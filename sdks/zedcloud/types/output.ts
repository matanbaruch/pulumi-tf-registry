// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ApplicationInstanceCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.ApplicationInstanceCustomConfigVariableGroup[];
}

export interface ApplicationInstanceCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.ApplicationInstanceCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.ApplicationInstanceCustomConfigVariableGroupVariable[];
}

export interface ApplicationInstanceCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface ApplicationInstanceCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.ApplicationInstanceCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface ApplicationInstanceCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface ApplicationInstanceDrife {
    /**
     * If set, don't encrypt the drive. Store in cleartext
     */
    cleartext?: boolean;
    /**
     * Type of Drive. Valid Values: UNSPECIFIED, CDROM, HDD, NET, HDD_EMPTY. HDD_EMPTY - is to allocate the empty disk of maxsizebytes specified
     */
    drvtype: string;
    /**
     * don't purge this drive as part of purge command for mutable volumes
     */
    ignorepurge?: boolean;
    /**
     * Name of Image Object used for the drive.
     */
    imagename: string;
    /**
     * immutable Volume for this drive. Only one of imvolname and mvolname must be specified.
     */
    imvolname: string;
    /**
     * Drive maximum size
     */
    maxsize: string;
    /**
     * Mount Path for the drive in the App Instance
     */
    mountpath?: string;
    /**
     * mutable Volume for this drive. Only one of imvolname and mvolname must be specified.
     */
    mvolname: string;
    /**
     * Preserve the drive even when all app instances using it are deleted
     */
    preserve: boolean;
    /**
     * Read only flag. If set, drive is mounted as readonly by app instance.
     */
    readonly: boolean;
    /**
     * type of target. Valid values: Disk, Kernel, Initrd, RamDisk
     */
    target: string;
    /**
     * User defined volume to use for this drive
     */
    volumelabel?: string;
}

export interface ApplicationInstanceInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.ApplicationInstanceInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.ApplicationInstanceInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.ApplicationInstanceInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface ApplicationInstanceInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.ApplicationInstanceInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.ApplicationInstanceInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface ApplicationInstanceInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.ApplicationInstanceInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface ApplicationInstanceInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface ApplicationInstanceInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface ApplicationInstanceInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.ApplicationInstanceInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface ApplicationInstanceInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface ApplicationInstanceInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface ApplicationInstanceLog {
    /**
     * Flags to enable / disable sending of logs generated by app instance to zedcloud
     */
    access: boolean;
}

export interface ApplicationInstanceManifestInfo {
    /**
     * Current version of edge application being used
     */
    bundleVersion: string;
    /**
     * Details for recommended transition action
     */
    details?: outputs.ApplicationInstanceManifestInfoDetail[];
    /**
     * Next version of edge application available
     */
    nextBundleVersion: string;
    /**
     * Common and Custom parameters for deciding on transition actions
     */
    params: {[key: string]: string};
    /**
     * Recommended transition action
     */
    transitionAction?: string;
}

export interface ApplicationInstanceManifestInfoDetail {
    /**
     * Cause of the transition action
     */
    cause?: string;
    /**
     * Scope of the action (e.g. project, cluster, instance)
     */
    scopes?: outputs.ApplicationInstanceManifestInfoDetailScope[];
    /**
     * Urgency of the recommended action (ERROR - must take action immediately, WARN - must take action but not immediately, NOTICE - may take action
     */
    severity?: string;
}

export interface ApplicationInstanceManifestInfoDetailScope {
    /**
     * Unique id of the type (e.g. projectId in case of project type)
     */
    id: string;
    /**
     * Scope of the action (e.g. project in case certificate expired at project level)
     */
    type?: string;
}

export interface ApplicationInstancePurge {
    /**
     * counter
     */
    counter?: number;
}

export interface ApplicationInstanceRefresh {
    /**
     * counter
     */
    counter?: number;
}

export interface ApplicationInstanceRestart {
    /**
     * counter
     */
    counter?: number;
}

export interface ApplicationInstanceRevision {
    /**
     * The time, in milliseconds since the epoch, when the record was created.
     */
    createdAt: string;
    /**
     * User data: Created By
     */
    createdBy: string;
    /**
     * Current Database version of the record
     */
    curr: string;
    /**
     * Previous
     */
    prev: string;
    /**
     * The time, in milliseconds since the epoch, when the record was last updated.
     */
    updatedAt: string;
    /**
     * User data: Updated By
     */
    updatedBy: string;
}

export interface ApplicationInstanceVminfo {
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled: boolean;
    /**
     * CPUs
     */
    cpus: number;
    /**
     * Memory
     */
    memory: number;
    /**
     * Hardware Virtualization
     */
    mode: string;
    /**
     * VNC
     */
    vnc: boolean;
    /**
     * VNC display
     */
    vncDisplay: number;
}

export interface ApplicationManifest {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.ApplicationManifestConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.ApplicationManifestContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.ApplicationManifestDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.ApplicationManifestImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.ApplicationManifestInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.ApplicationManifestModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.ApplicationManifestOwner[];
    permissions?: outputs.ApplicationManifestPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.ApplicationManifestResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface ApplicationManifestConfiguration {
    customConfigs?: outputs.ApplicationManifestConfigurationCustomConfig[];
}

export interface ApplicationManifestConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.ApplicationManifestConfigurationCustomConfigVariableGroup[];
}

export interface ApplicationManifestConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.ApplicationManifestConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.ApplicationManifestConfigurationCustomConfigVariableGroupVariable[];
}

export interface ApplicationManifestConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface ApplicationManifestConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.ApplicationManifestConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface ApplicationManifestConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface ApplicationManifestContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface ApplicationManifestDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface ApplicationManifestImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.ApplicationManifestImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface ApplicationManifestImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface ApplicationManifestInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.ApplicationManifestInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface ApplicationManifestInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.ApplicationManifestInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.ApplicationManifestInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface ApplicationManifestInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.ApplicationManifestInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.ApplicationManifestInterfaceAclActionPortmapto[];
}

export interface ApplicationManifestInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface ApplicationManifestInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface ApplicationManifestInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface ApplicationManifestModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface ApplicationManifestOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface ApplicationManifestPermission {
}

export interface ApplicationManifestResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface ApplicationParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface ApplicationRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface DatastoreCertificateChain {
    /**
     * List of Certificate object holds the details of certificate like cert block, encryption type, validity, subject etc
     */
    certificates?: outputs.DatastoreCertificateChainCertificate[];
}

export interface DatastoreCertificateChainCertificate {
    /**
     * This fields tells the basic constraints like isCA are correct.
     */
    basicContraintsValid?: boolean;
    /**
     * base64 string of the parent certificate
     */
    cert?: string;
    /**
     * Crypto Key for decrypting user secret information
     */
    cryptoKey?: string;
    /**
     * ECDSA encryption algorithm of the certificate
     */
    ecdsaEncryptions?: outputs.DatastoreCertificateChainCertificateEcdsaEncryption[];
    /**
     * user encrypted secrets map
     */
    encryptedSecrets?: {[key: string]: string};
    /**
     * Indicates if the private key can be exported.
     */
    exportable?: boolean;
    /**
     * Sequence of extended key usages.
     */
    extendedKeyUsages?: string[];
    /**
     * Parameters for the issuer of the X509 component of a certificate.
     */
    issuers?: outputs.DatastoreCertificateChainCertificateIssuer[];
    /**
     * Key usage extensions define the purpose of the public key contained in a certificate.
     */
    keyUsage?: number;
    /**
     * pass phase for the pvt key, this has to be filled if pvt key is encrypted with a pass phrase
     */
    passPhrase?: string;
    /**
     * base63 string of the public key
     */
    publicKey?: string;
    /**
     * Public key algorithm.
     */
    publicKeyAlgorithm?: string;
    /**
     * base64 string of the parent pvt key
     */
    pvtKey?: string;
    /**
     * Indicates if the same key pair will be used on certificate renewal.
     */
    reuseKey?: boolean;
    /**
     * RSA encryption algorithm of the certificate
     */
    rsaEcryptions?: outputs.DatastoreCertificateChainCertificateRsaEcryption[];
    /**
     * This holds the alternative name values like URIs, domain names IPs etc.
     */
    sanValues?: outputs.DatastoreCertificateChainCertificateSanValue[];
    /**
     * Unique identifier for each Certificate generated by an Certificate Issuer.
     */
    serialNumber?: string;
    signatureAlgorithm?: string;
    /**
     * Parameters for the subject of the X509 component of a certificate.
     */
    subjects?: outputs.DatastoreCertificateChainCertificateSubject[];
    /**
     * Certificate validatity start time
     */
    validFrom?: string;
    /**
     * Certificate validatity start time
     */
    validTill?: string;
}

export interface DatastoreCertificateChainCertificateEcdsaEncryption {
    /**
     * ECDSA curve to be used while signing the certificate.
     */
    curve?: string;
}

export interface DatastoreCertificateChainCertificateIssuer {
    /**
     * Certificate common name.
     */
    commonName?: string;
    /**
     * List of countries.
     */
    countries?: string[];
    /**
     * List of locallity.
     */
    localities?: string[];
    /**
     * List of Organizational Unit.
     */
    organizationalUnits?: string[];
    /**
     * List of organization.
     */
    organizations?: string[];
    /**
     * List of Postal codes.
     */
    postalCodes?: string[];
    /**
     * List of List of Prvince.
     */
    provinces?: string[];
    /**
     * Subject cerial number
     */
    serialNumber?: string;
}

export interface DatastoreCertificateChainCertificateRsaEcryption {
    /**
     * RSA Encryption Key bit size.
     */
    rsaBits?: string;
}

export interface DatastoreCertificateChainCertificateSanValue {
    /**
     * List of permitted DNS names.
     */
    dns?: string[];
    /**
     * List of permitted email addresses.
     */
    emaildIds?: string[];
    /**
     * List of permitted hosts.
     */
    hosts?: string[];
    /**
     * List of permitted IP addresses.
     */
    ips?: string[];
    /**
     * List of permitted User principal names.
     */
    upns?: string[];
    /**
     * List of permitted URIs.
     */
    uris?: string[];
}

export interface DatastoreCertificateChainCertificateSubject {
    /**
     * Certificate common name.
     */
    commonName?: string;
    /**
     * List of countries.
     */
    countries?: string[];
    /**
     * List of locallity.
     */
    localities?: string[];
    /**
     * List of Organizational Unit.
     */
    organizationalUnits?: string[];
    /**
     * List of organization.
     */
    organizations?: string[];
    /**
     * List of Postal codes.
     */
    postalCodes?: string[];
    /**
     * List of List of Prvince.
     */
    provinces?: string[];
    /**
     * Subject cerial number
     */
    serialNumber?: string;
}

export interface DatastoreRevision {
    /**
     * The time, in milliseconds since the epoch, when the record was created.
     */
    createdAt: string;
    /**
     * User data: Created By
     */
    createdBy: string;
    /**
     * Current Database version of the record
     */
    curr: string;
    /**
     * Previous
     */
    prev: string;
    /**
     * The time, in milliseconds since the epoch, when the record was last updated.
     */
    updatedAt: string;
    /**
     * User data: Updated By
     */
    updatedBy: string;
}

export interface DatastoreSecret {
    /**
     * Datastore access API key in plain-text
     */
    apiKey?: string;
    /**
     * Datastore access API password in plain-text
     */
    apiPasswd?: string;
}

export interface EdgenodeBaseImage {
    /**
     * activation flag
     */
    activate: boolean;
    /**
     * image name
     */
    imageName: string;
    /**
     * immutable Volume for this base image
     */
    imvolId?: string;
    /**
     * system generated unique id for an image
     */
    uuid?: string;
    /**
     * image version
     */
    version: string;
}

export interface EdgenodeConfigItem {
    /**
     * boolean value
     */
    boolValue?: boolean;
    /**
     * float value
     */
    floatValue?: number;
    /**
     * key
     */
    key?: string;
    /**
     * string value
     */
    stringValue?: string;
    /**
     * uint32 value
     */
    uint32Value?: number;
    /**
     * uint64 value in string format
     */
    uint64Value?: string;
    /**
     * value type
     */
    valueType?: string;
}

export interface EdgenodeDebugKnob {
    debugKnob: boolean;
    expired: boolean;
    expiry: string;
    id: string;
}

export interface EdgenodeDefaultNetInst {
    /**
     * ID of the Cluster in which the network instance is configured
     */
    clusterId?: string;
    /**
     * Detailed description of the network instance
     */
    description?: string;
    /**
     * Flag to indicate if this is the default network instance for the device
     */
    deviceDefault?: boolean;
    /**
     * ID of the device on which network instance is created
     */
    deviceId: string;
    /**
     * Deprecated
     */
    dhcp?: boolean;
    /**
     * List of Static DNS entries
     */
    dnsLists?: outputs.EdgenodeDefaultNetInstDnsList[];
    /**
     * System defined universally unique ID of the network instance
     */
    id: string;
    /**
     * DHCP Server Configuration
     */
    ips?: outputs.EdgenodeDefaultNetInstIp[];
    /**
     * Kind of Network Instance:
     * NETWORK_INSTANCE_KIND_UNSPECIFIED
     * NETWORK_INSTANCE_KIND_TRANSPARENT
     * NETWORK_INSTANCE_KIND_SWITCH
     * NETWORK_INSTANCE_KIND_LOCAL
     * NETWORK_INSTANCE_KIND_CLOUD
     * NETWORK_INSTANCE_KIND_MESH
     * NETWORK_INSTANCE_KIND_HONEYPOT
     */
    kind: string;
    /**
     * Lisp Config : read only for now. Deprecated.
     */
    lisps: outputs.EdgenodeDefaultNetInstLisp[];
    /**
     * User defined name of the network instance, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * id of the network policy to be attached to this network instance
     */
    networkPolicyId?: string;
    oconfig?: string;
    /**
     * Service specific Config
     */
    opaques?: outputs.EdgenodeDefaultNetInstOpaque[];
    /**
     * name of port mapping in the model
     */
    port?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    portTags?: {[key: string]: string};
    /**
     * id of the project in which network instance is created
     */
    projectId: string;
    /**
     * system defined info for the object
     */
    revisions: outputs.EdgenodeDefaultNetInstRevision[];
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the network instance. Title can be changed at any time
     */
    title: string;
    /**
     * Type of DHCP for this Network Instance:
     * NETWORK_INSTANCE_DHCP_TYPE_V4
     * NETWORK_INSTANCE_DHCP_TYPE_V6
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOEID
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOV4
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOV6
     */
    type: string;
}

export interface EdgenodeDefaultNetInstDnsList {
    /**
     * Addresses
     */
    addrs?: string[];
    /**
     * Host name
     */
    hostname?: string;
}

export interface EdgenodeDefaultNetInstIp {
    /**
     * Range of IP addresses to be used for DHCP
     */
    dhcpRanges?: outputs.EdgenodeDefaultNetInstIpDhcpRange[];
    /**
     * IP Addresses of DNS servers
     */
    dns?: string[];
    /**
     * Network domain
     */
    domain?: string;
    /**
     * IP Address of Network Gateway
     */
    gateway?: string;
    /**
     * Subnet Mask
     */
    mask?: string;
    /**
     * IP Address of NTP Server
     */
    ntp?: string;
    /**
     * Subnet address
     */
    subnet: string;
}

export interface EdgenodeDefaultNetInstIpDhcpRange {
    /**
     * ending IP
     */
    end?: string;
    /**
     * starting IP
     */
    start?: string;
}

export interface EdgenodeDefaultNetInstLisp {
    allocate: boolean;
    allocationprefix: string;
    allocationprefixlen: number;
    exportprivate: boolean;
    lispiid: number;
    sps: outputs.EdgenodeDefaultNetInstLispSp[];
}

export interface EdgenodeDefaultNetInstLispSp {
    credential: string;
    nameOrIp: string;
    type: string;
}

export interface EdgenodeDefaultNetInstOpaque {
    /**
     * Deprecated - Lisp config
     */
    lisps?: outputs.EdgenodeDefaultNetInstOpaqueLisp[];
    /**
     * base64 encoded string of opaque config
     */
    oconfig?: string;
    /**
     * type of Opaque config
     */
    type?: string;
}

export interface EdgenodeDefaultNetInstOpaqueLisp {
    /**
     * Allocate flag
     */
    allocate?: boolean;
    /**
     * Allocation Prefix
     */
    allocationprefix?: string;
    /**
     * Allocation Prefix Length
     */
    allocationprefixlen?: number;
    /**
     * Export Private flag
     */
    exportprivate?: boolean;
    /**
     * lisp id
     */
    lispiid?: number;
    /**
     * Service Point List
     */
    sps?: outputs.EdgenodeDefaultNetInstOpaqueLispSp[];
}

export interface EdgenodeDefaultNetInstOpaqueLispSp {
    /**
     * Service credentials
     */
    credential?: string;
    /**
     * Service name/ service name
     */
    nameOrIp?: string;
    /**
     * Service Point Type
     */
    type?: string;
}

export interface EdgenodeDefaultNetInstRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface EdgenodeDevLocation {
    /**
     * City
     */
    city?: string;
    /**
     * Country code consisting of 2 capital letters as per ISO 3166-1 alpha2 standard
     */
    country?: string;
    /**
     * Free formatted location string
     */
    freeloc?: string;
    /**
     * Host name
     */
    hostname?: string;
    /**
     * Deprecated field: comma, separated lat, long
     */
    latlong?: string;
    /**
     * Ordered pair of (latitude, longitude) separated by comma (,). Latitude is the horizontal component used for geographic positioning; it is the angle between 0Â° (the equator) and Â±90Â° (north or south) at the poles measured in decimal degrees. It is the first value in an ordered pair. A negative number denotes a location south of the equator; a positive number is north. Longitude is the vertical component used for geographic positioning; it is the angle between 0Â° (the Prime Meridian) and Â±180Â° (westward or eastward) measured in decimal degrees. It is the second number in an ordered pair. A negative number indicates a location west of Greenwich, England; a positive number east.
     */
    loc?: string;
    /**
     * The name of the recipient, firm, or company at this geographical location.
     */
    org?: string;
    /**
     * Postal code (ZIP code for USA) of the geographical location
     */
    postal?: string;
    /**
     * Region
     */
    region?: string;
    /**
     * Single IP address, either in IPv4 or in IPv6 format
     */
    underlayIp?: string;
}

export interface EdgenodeDlisp {
    /**
     * Client Address
     */
    clientAddr: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * EID allocation prefix
     */
    eidAllocationPrefix: string;
    /**
     * EID allocation prefix length
     */
    eidAllocationPrefixLen: number;
    /**
     * LISP instance
     */
    lispInstance: number;
    /**
     * List of Lisp servers
     */
    lispMapServers: outputs.EdgenodeDlispLispMapServer[];
    /**
     * TEMP : flag to indicate which version of LISP data plane should be running on the device
     */
    mode: string;
    /**
     * Zed development servers
     */
    zedServers: outputs.EdgenodeDlispZedServer[];
}

export interface EdgenodeDlispLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface EdgenodeDlispZedServer {
    /**
     * EID
     */
    eIds: string[];
    /**
     * Hostname for dev zed server
     */
    hostName: string;
}

export interface EdgenodeEdgeviewconfig {
    appPolicies?: outputs.EdgenodeEdgeviewconfigAppPolicy[];
    devPolicies?: outputs.EdgenodeEdgeviewconfigDevPolicy[];
    extPolicies?: outputs.EdgenodeEdgeviewconfigExtPolicy[];
    generationId?: number;
    jwtInfos?: outputs.EdgenodeEdgeviewconfigJwtInfo[];
    token?: string;
}

export interface EdgenodeEdgeviewconfigAppPolicy {
    allowApp?: boolean;
}

export interface EdgenodeEdgeviewconfigDevPolicy {
    allowDev?: boolean;
}

export interface EdgenodeEdgeviewconfigExtPolicy {
    allowExt?: boolean;
}

export interface EdgenodeEdgeviewconfigJwtInfo {
    allowSec?: number;
    dispUrl?: string;
    encrypt?: boolean;
    expireSec: string;
    numInst?: number;
}

export interface EdgenodeInterface {
    /**
     * cost of using this interface. Default is 0.
     */
    cost?: number;
    /**
     * Adapter Udage
     */
    intfUsage?: string;
    /**
     * name of interface in the manifest to which this network or adapter maps to
     */
    intfname?: string;
    /**
     * IP address: we will be needing this in cae of static network
     */
    ipaddr?: string;
    /**
     * mac address needs to be over-written in some cases
     */
    macaddr?: string;
    /**
     * network name: if attaching a network use netname
     */
    netname?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
}

export interface EdgenodeRevision {
    /**
     * The time, in milliseconds since the epoch, when the record was created.
     */
    createdAt: string;
    /**
     * User data: Created By
     */
    createdBy: string;
    /**
     * Current Database version of the record
     */
    curr: string;
    /**
     * Previous
     */
    prev: string;
    /**
     * The time, in milliseconds since the epoch, when the record was last updated.
     */
    updatedAt: string;
    /**
     * User data: Updated By
     */
    updatedBy: string;
}

export interface GetApplicationInstanceCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.GetApplicationInstanceCustomConfigVariableGroup[];
}

export interface GetApplicationInstanceCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.GetApplicationInstanceCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.GetApplicationInstanceCustomConfigVariableGroupVariable[];
}

export interface GetApplicationInstanceCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface GetApplicationInstanceCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.GetApplicationInstanceCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface GetApplicationInstanceCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface GetApplicationInstanceDrife {
    /**
     * If set, don't encrypt the drive. Store in cleartext
     */
    cleartext?: boolean;
    /**
     * Type of Drive. Valid Values: UNSPECIFIED, CDROM, HDD, NET, HDD_EMPTY. HDD_EMPTY - is to allocate the empty disk of maxsizebytes specified
     */
    drvtype: string;
    /**
     * don't purge this drive as part of purge command for mutable volumes
     */
    ignorepurge?: boolean;
    /**
     * Name of Image Object used for the drive.
     */
    imagename: string;
    /**
     * immutable Volume for this drive. Only one of imvolname and mvolname must be specified.
     */
    imvolname: string;
    /**
     * Drive maximum size
     */
    maxsize: string;
    /**
     * Mount Path for the drive in the App Instance
     */
    mountpath?: string;
    /**
     * mutable Volume for this drive. Only one of imvolname and mvolname must be specified.
     */
    mvolname: string;
    /**
     * Preserve the drive even when all app instances using it are deleted
     */
    preserve: boolean;
    /**
     * Read only flag. If set, drive is mounted as readonly by app instance.
     */
    readonly: boolean;
    /**
     * type of target. Valid values: Disk, Kernel, Initrd, RamDisk
     */
    target: string;
    /**
     * User defined volume to use for this drive
     */
    volumelabel?: string;
}

export interface GetApplicationInstanceInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.GetApplicationInstanceInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.GetApplicationInstanceInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.GetApplicationInstanceInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface GetApplicationInstanceInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.GetApplicationInstanceInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.GetApplicationInstanceInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface GetApplicationInstanceInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.GetApplicationInstanceInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface GetApplicationInstanceInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface GetApplicationInstanceInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface GetApplicationInstanceInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.GetApplicationInstanceInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface GetApplicationInstanceInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface GetApplicationInstanceInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface GetApplicationInstanceLog {
    /**
     * Flags to enable / disable sending of logs generated by app instance to zedcloud
     */
    access: boolean;
}

export interface GetApplicationInstanceManifestInfo {
    /**
     * Current version of edge application being used
     */
    bundleVersion: string;
    /**
     * Details for recommended transition action
     */
    details?: outputs.GetApplicationInstanceManifestInfoDetail[];
    /**
     * Next version of edge application available
     */
    nextBundleVersion: string;
    /**
     * Common and Custom parameters for deciding on transition actions
     */
    params: {[key: string]: string};
    /**
     * Recommended transition action
     */
    transitionAction?: string;
}

export interface GetApplicationInstanceManifestInfoDetail {
    /**
     * Cause of the transition action
     */
    cause?: string;
    /**
     * Scope of the action (e.g. project, cluster, instance)
     */
    scopes?: outputs.GetApplicationInstanceManifestInfoDetailScope[];
    /**
     * Urgency of the recommended action (ERROR - must take action immediately, WARN - must take action but not immediately, NOTICE - may take action
     */
    severity?: string;
}

export interface GetApplicationInstanceManifestInfoDetailScope {
    /**
     * Unique id of the type (e.g. projectId in case of project type)
     */
    id: string;
    /**
     * Scope of the action (e.g. project in case certificate expired at project level)
     */
    type?: string;
}

export interface GetApplicationInstancePurge {
    /**
     * counter
     */
    counter?: number;
}

export interface GetApplicationInstanceRefresh {
    /**
     * counter
     */
    counter?: number;
}

export interface GetApplicationInstanceRestart {
    /**
     * counter
     */
    counter?: number;
}

export interface GetApplicationInstanceRevision {
    /**
     * The time, in milliseconds since the epoch, when the record was created.
     */
    createdAt: string;
    /**
     * User data: Created By
     */
    createdBy: string;
    /**
     * Current Database version of the record
     */
    curr: string;
    /**
     * Previous
     */
    prev: string;
    /**
     * The time, in milliseconds since the epoch, when the record was last updated.
     */
    updatedAt: string;
    /**
     * User data: Updated By
     */
    updatedBy: string;
}

export interface GetApplicationInstanceVminfo {
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled: boolean;
    /**
     * CPUs
     */
    cpus: number;
    /**
     * Memory
     */
    memory: number;
    /**
     * Hardware Virtualization
     */
    mode: string;
    /**
     * VNC
     */
    vnc: boolean;
    /**
     * VNC display
     */
    vncDisplay: number;
}

export interface GetApplicationManifest {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.GetApplicationManifestConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.GetApplicationManifestContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.GetApplicationManifestDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.GetApplicationManifestImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.GetApplicationManifestInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.GetApplicationManifestModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.GetApplicationManifestOwner[];
    permissions?: outputs.GetApplicationManifestPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.GetApplicationManifestResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface GetApplicationManifestConfiguration {
    customConfigs?: outputs.GetApplicationManifestConfigurationCustomConfig[];
}

export interface GetApplicationManifestConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.GetApplicationManifestConfigurationCustomConfigVariableGroup[];
}

export interface GetApplicationManifestConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.GetApplicationManifestConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.GetApplicationManifestConfigurationCustomConfigVariableGroupVariable[];
}

export interface GetApplicationManifestConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface GetApplicationManifestConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.GetApplicationManifestConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface GetApplicationManifestConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface GetApplicationManifestContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface GetApplicationManifestDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface GetApplicationManifestImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.GetApplicationManifestImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface GetApplicationManifestImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface GetApplicationManifestInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.GetApplicationManifestInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface GetApplicationManifestInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.GetApplicationManifestInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.GetApplicationManifestInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface GetApplicationManifestInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.GetApplicationManifestInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.GetApplicationManifestInterfaceAclActionPortmapto[];
}

export interface GetApplicationManifestInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface GetApplicationManifestInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface GetApplicationManifestInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface GetApplicationManifestModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface GetApplicationManifestOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface GetApplicationManifestPermission {
}

export interface GetApplicationManifestResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface GetApplicationParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface GetApplicationRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface GetCredentialList {
    currentCred?: string;
    forgot?: boolean;
    id: string;
    newCred?: string;
    owner?: string;
    salt?: number;
    type?: string;
}

export interface GetCredentialNext {
    /**
     * OrderBy helps in sorting the list response
     */
    orderBies?: string[];
    /**
     * Page Number
     */
    pageNum?: number;
    /**
     * Defines the page size
     */
    pageSize?: number;
    /**
     * Page Token
     */
    pageToken?: string;
    /**
     * Total number of pages to be fetched.
     */
    totalPages?: number;
}

export interface GetCredentialSummaryByState {
    /**
     * Summary description
     */
    description?: string;
    /**
     * Total
     */
    total?: number;
    /**
     * Values: Map for storing <string, uint32>
     */
    values?: {[key: string]: number};
}

export interface GetDatastoreCertificateChain {
    /**
     * List of Certificate object holds the details of certificate like cert block, encryption type, validity, subject etc
     */
    certificates?: outputs.GetDatastoreCertificateChainCertificate[];
}

export interface GetDatastoreCertificateChainCertificate {
    /**
     * This fields tells the basic constraints like isCA are correct.
     */
    basicContraintsValid?: boolean;
    /**
     * base64 string of the parent certificate
     */
    cert?: string;
    /**
     * Crypto Key for decrypting user secret information
     */
    cryptoKey?: string;
    /**
     * ECDSA encryption algorithm of the certificate
     */
    ecdsaEncryptions?: outputs.GetDatastoreCertificateChainCertificateEcdsaEncryption[];
    /**
     * user encrypted secrets map
     */
    encryptedSecrets?: {[key: string]: string};
    /**
     * Indicates if the private key can be exported.
     */
    exportable?: boolean;
    /**
     * Sequence of extended key usages.
     */
    extendedKeyUsages?: string[];
    /**
     * Parameters for the issuer of the X509 component of a certificate.
     */
    issuers?: outputs.GetDatastoreCertificateChainCertificateIssuer[];
    /**
     * Key usage extensions define the purpose of the public key contained in a certificate.
     */
    keyUsage?: number;
    /**
     * pass phase for the pvt key, this has to be filled if pvt key is encrypted with a pass phrase
     */
    passPhrase?: string;
    /**
     * base63 string of the public key
     */
    publicKey?: string;
    /**
     * Public key algorithm.
     */
    publicKeyAlgorithm?: string;
    /**
     * base64 string of the parent pvt key
     */
    pvtKey?: string;
    /**
     * Indicates if the same key pair will be used on certificate renewal.
     */
    reuseKey?: boolean;
    /**
     * RSA encryption algorithm of the certificate
     */
    rsaEcryptions?: outputs.GetDatastoreCertificateChainCertificateRsaEcryption[];
    /**
     * This holds the alternative name values like URIs, domain names IPs etc.
     */
    sanValues?: outputs.GetDatastoreCertificateChainCertificateSanValue[];
    /**
     * Unique identifier for each Certificate generated by an Certificate Issuer.
     */
    serialNumber?: string;
    signatureAlgorithm?: string;
    /**
     * Parameters for the subject of the X509 component of a certificate.
     */
    subjects?: outputs.GetDatastoreCertificateChainCertificateSubject[];
    /**
     * Certificate validatity start time
     */
    validFrom?: string;
    /**
     * Certificate validatity start time
     */
    validTill?: string;
}

export interface GetDatastoreCertificateChainCertificateEcdsaEncryption {
    /**
     * ECDSA curve to be used while signing the certificate.
     */
    curve?: string;
}

export interface GetDatastoreCertificateChainCertificateIssuer {
    /**
     * Certificate common name.
     */
    commonName?: string;
    /**
     * List of countries.
     */
    countries?: string[];
    /**
     * List of locallity.
     */
    localities?: string[];
    /**
     * List of Organizational Unit.
     */
    organizationalUnits?: string[];
    /**
     * List of organization.
     */
    organizations?: string[];
    /**
     * List of Postal codes.
     */
    postalCodes?: string[];
    /**
     * List of List of Prvince.
     */
    provinces?: string[];
    /**
     * Subject cerial number
     */
    serialNumber?: string;
}

export interface GetDatastoreCertificateChainCertificateRsaEcryption {
    /**
     * RSA Encryption Key bit size.
     */
    rsaBits?: string;
}

export interface GetDatastoreCertificateChainCertificateSanValue {
    /**
     * List of permitted DNS names.
     */
    dns?: string[];
    /**
     * List of permitted email addresses.
     */
    emaildIds?: string[];
    /**
     * List of permitted hosts.
     */
    hosts?: string[];
    /**
     * List of permitted IP addresses.
     */
    ips?: string[];
    /**
     * List of permitted User principal names.
     */
    upns?: string[];
    /**
     * List of permitted URIs.
     */
    uris?: string[];
}

export interface GetDatastoreCertificateChainCertificateSubject {
    /**
     * Certificate common name.
     */
    commonName?: string;
    /**
     * List of countries.
     */
    countries?: string[];
    /**
     * List of locallity.
     */
    localities?: string[];
    /**
     * List of Organizational Unit.
     */
    organizationalUnits?: string[];
    /**
     * List of organization.
     */
    organizations?: string[];
    /**
     * List of Postal codes.
     */
    postalCodes?: string[];
    /**
     * List of List of Prvince.
     */
    provinces?: string[];
    /**
     * Subject cerial number
     */
    serialNumber?: string;
}

export interface GetDatastoreRevision {
    /**
     * The time, in milliseconds since the epoch, when the record was created.
     */
    createdAt: string;
    /**
     * User data: Created By
     */
    createdBy: string;
    /**
     * Current Database version of the record
     */
    curr: string;
    /**
     * Previous
     */
    prev: string;
    /**
     * The time, in milliseconds since the epoch, when the record was last updated.
     */
    updatedAt: string;
    /**
     * User data: Updated By
     */
    updatedBy: string;
}

export interface GetDatastoreSecret {
    /**
     * Datastore access API key in plain-text
     */
    apiKey?: string;
    /**
     * Datastore access API password in plain-text
     */
    apiPasswd?: string;
}

export interface GetEdgenodeBaseImage {
    /**
     * activation flag
     */
    activate: boolean;
    /**
     * image name
     */
    imageName: string;
    /**
     * immutable Volume for this base image
     */
    imvolId?: string;
    /**
     * system generated unique id for an image
     */
    uuid?: string;
    /**
     * image version
     */
    version: string;
}

export interface GetEdgenodeConfigItem {
    /**
     * boolean value
     */
    boolValue?: boolean;
    /**
     * float value
     */
    floatValue?: number;
    /**
     * key
     */
    key?: string;
    /**
     * string value
     */
    stringValue?: string;
    /**
     * uint32 value
     */
    uint32Value?: number;
    /**
     * uint64 value in string format
     */
    uint64Value?: string;
    /**
     * value type
     */
    valueType?: string;
}

export interface GetEdgenodeDebugKnob {
    debugKnob: boolean;
    expired: boolean;
    expiry: string;
    id: string;
}

export interface GetEdgenodeDefaultNetInst {
    /**
     * ID of the Cluster in which the network instance is configured
     */
    clusterId?: string;
    /**
     * Detailed description of the network instance
     */
    description?: string;
    /**
     * Flag to indicate if this is the default network instance for the device
     */
    deviceDefault?: boolean;
    /**
     * ID of the device on which network instance is created
     */
    deviceId: string;
    /**
     * Deprecated
     */
    dhcp?: boolean;
    /**
     * List of Static DNS entries
     */
    dnsLists?: outputs.GetEdgenodeDefaultNetInstDnsList[];
    /**
     * System defined universally unique ID of the network instance
     */
    id: string;
    /**
     * DHCP Server Configuration
     */
    ips?: outputs.GetEdgenodeDefaultNetInstIp[];
    /**
     * Kind of Network Instance:
     * NETWORK_INSTANCE_KIND_UNSPECIFIED
     * NETWORK_INSTANCE_KIND_TRANSPARENT
     * NETWORK_INSTANCE_KIND_SWITCH
     * NETWORK_INSTANCE_KIND_LOCAL
     * NETWORK_INSTANCE_KIND_CLOUD
     * NETWORK_INSTANCE_KIND_MESH
     * NETWORK_INSTANCE_KIND_HONEYPOT
     */
    kind: string;
    /**
     * Lisp Config : read only for now. Deprecated.
     */
    lisps: outputs.GetEdgenodeDefaultNetInstLisp[];
    /**
     * User defined name of the network instance, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * id of the network policy to be attached to this network instance
     */
    networkPolicyId?: string;
    oconfig?: string;
    /**
     * Service specific Config
     */
    opaques?: outputs.GetEdgenodeDefaultNetInstOpaque[];
    /**
     * name of port mapping in the model
     */
    port?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    portTags?: {[key: string]: string};
    /**
     * id of the project in which network instance is created
     */
    projectId: string;
    /**
     * system defined info for the object
     */
    revisions: outputs.GetEdgenodeDefaultNetInstRevision[];
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the network instance. Title can be changed at any time
     */
    title: string;
    /**
     * Type of DHCP for this Network Instance:
     * NETWORK_INSTANCE_DHCP_TYPE_V4
     * NETWORK_INSTANCE_DHCP_TYPE_V6
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOEID
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOV4
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOV6
     */
    type: string;
}

export interface GetEdgenodeDefaultNetInstDnsList {
    /**
     * Addresses
     */
    addrs?: string[];
    /**
     * Host name
     */
    hostname?: string;
}

export interface GetEdgenodeDefaultNetInstIp {
    /**
     * Range of IP addresses to be used for DHCP
     */
    dhcpRanges?: outputs.GetEdgenodeDefaultNetInstIpDhcpRange[];
    /**
     * IP Addresses of DNS servers
     */
    dns?: string[];
    /**
     * Network domain
     */
    domain?: string;
    /**
     * IP Address of Network Gateway
     */
    gateway?: string;
    /**
     * Subnet Mask
     */
    mask?: string;
    /**
     * IP Address of NTP Server
     */
    ntp?: string;
    /**
     * Subnet address
     */
    subnet: string;
}

export interface GetEdgenodeDefaultNetInstIpDhcpRange {
    /**
     * ending IP
     */
    end?: string;
    /**
     * starting IP
     */
    start?: string;
}

export interface GetEdgenodeDefaultNetInstLisp {
    allocate: boolean;
    allocationprefix: string;
    allocationprefixlen: number;
    exportprivate: boolean;
    lispiid: number;
    sps: outputs.GetEdgenodeDefaultNetInstLispSp[];
}

export interface GetEdgenodeDefaultNetInstLispSp {
    credential: string;
    nameOrIp: string;
    type: string;
}

export interface GetEdgenodeDefaultNetInstOpaque {
    /**
     * Deprecated - Lisp config
     */
    lisps?: outputs.GetEdgenodeDefaultNetInstOpaqueLisp[];
    /**
     * base64 encoded string of opaque config
     */
    oconfig?: string;
    /**
     * type of Opaque config
     */
    type?: string;
}

export interface GetEdgenodeDefaultNetInstOpaqueLisp {
    /**
     * Allocate flag
     */
    allocate?: boolean;
    /**
     * Allocation Prefix
     */
    allocationprefix?: string;
    /**
     * Allocation Prefix Length
     */
    allocationprefixlen?: number;
    /**
     * Export Private flag
     */
    exportprivate?: boolean;
    /**
     * lisp id
     */
    lispiid?: number;
    /**
     * Service Point List
     */
    sps?: outputs.GetEdgenodeDefaultNetInstOpaqueLispSp[];
}

export interface GetEdgenodeDefaultNetInstOpaqueLispSp {
    /**
     * Service credentials
     */
    credential?: string;
    /**
     * Service name/ service name
     */
    nameOrIp?: string;
    /**
     * Service Point Type
     */
    type?: string;
}

export interface GetEdgenodeDefaultNetInstRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface GetEdgenodeDevLocation {
    /**
     * City
     */
    city?: string;
    /**
     * Country code consisting of 2 capital letters as per ISO 3166-1 alpha2 standard
     */
    country?: string;
    /**
     * Free formatted location string
     */
    freeloc?: string;
    /**
     * Host name
     */
    hostname?: string;
    /**
     * Deprecated field: comma, separated lat, long
     */
    latlong?: string;
    /**
     * Ordered pair of (latitude, longitude) separated by comma (,). Latitude is the horizontal component used for geographic positioning; it is the angle between 0Â° (the equator) and Â±90Â° (north or south) at the poles measured in decimal degrees. It is the first value in an ordered pair. A negative number denotes a location south of the equator; a positive number is north. Longitude is the vertical component used for geographic positioning; it is the angle between 0Â° (the Prime Meridian) and Â±180Â° (westward or eastward) measured in decimal degrees. It is the second number in an ordered pair. A negative number indicates a location west of Greenwich, England; a positive number east.
     */
    loc?: string;
    /**
     * The name of the recipient, firm, or company at this geographical location.
     */
    org?: string;
    /**
     * Postal code (ZIP code for USA) of the geographical location
     */
    postal?: string;
    /**
     * Region
     */
    region?: string;
    /**
     * Single IP address, either in IPv4 or in IPv6 format
     */
    underlayIp?: string;
}

export interface GetEdgenodeDlisp {
    /**
     * Client Address
     */
    clientAddr: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * EID allocation prefix
     */
    eidAllocationPrefix: string;
    /**
     * EID allocation prefix length
     */
    eidAllocationPrefixLen: number;
    /**
     * LISP instance
     */
    lispInstance: number;
    /**
     * List of Lisp servers
     */
    lispMapServers: outputs.GetEdgenodeDlispLispMapServer[];
    /**
     * TEMP : flag to indicate which version of LISP data plane should be running on the device
     */
    mode: string;
    /**
     * Zed development servers
     */
    zedServers: outputs.GetEdgenodeDlispZedServer[];
}

export interface GetEdgenodeDlispLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface GetEdgenodeDlispZedServer {
    /**
     * EID
     */
    eIds: string[];
    /**
     * Hostname for dev zed server
     */
    hostName: string;
}

export interface GetEdgenodeEdgeviewconfig {
    appPolicies?: outputs.GetEdgenodeEdgeviewconfigAppPolicy[];
    devPolicies?: outputs.GetEdgenodeEdgeviewconfigDevPolicy[];
    extPolicies?: outputs.GetEdgenodeEdgeviewconfigExtPolicy[];
    generationId?: number;
    jwtInfos?: outputs.GetEdgenodeEdgeviewconfigJwtInfo[];
    token?: string;
}

export interface GetEdgenodeEdgeviewconfigAppPolicy {
    allowApp?: boolean;
}

export interface GetEdgenodeEdgeviewconfigDevPolicy {
    allowDev?: boolean;
}

export interface GetEdgenodeEdgeviewconfigExtPolicy {
    allowExt?: boolean;
}

export interface GetEdgenodeEdgeviewconfigJwtInfo {
    allowSec?: number;
    dispUrl?: string;
    encrypt?: boolean;
    expireSec: string;
    numInst?: number;
}

export interface GetEdgenodeInterface {
    /**
     * cost of using this interface. Default is 0.
     */
    cost?: number;
    /**
     * Adapter Udage
     */
    intfUsage?: string;
    /**
     * name of interface in the manifest to which this network or adapter maps to
     */
    intfname?: string;
    /**
     * IP address: we will be needing this in cae of static network
     */
    ipaddr?: string;
    /**
     * mac address needs to be over-written in some cases
     */
    macaddr?: string;
    /**
     * network name: if attaching a network use netname
     */
    netname?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
}

export interface GetEdgenodeRevision {
    /**
     * The time, in milliseconds since the epoch, when the record was created.
     */
    createdAt: string;
    /**
     * User data: Created By
     */
    createdBy: string;
    /**
     * Current Database version of the record
     */
    curr: string;
    /**
     * Previous
     */
    prev: string;
    /**
     * The time, in milliseconds since the epoch, when the record was last updated.
     */
    updatedAt: string;
    /**
     * User data: Updated By
     */
    updatedBy: string;
}

export interface GetImageRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface GetNetworkDnsList {
    /**
     * Addresses
     */
    addrs?: string[];
    /**
     * Host name
     */
    hostname?: string;
}

export interface GetNetworkInstanceDnsList {
    /**
     * Addresses
     */
    addrs?: string[];
    /**
     * Host name
     */
    hostname?: string;
}

export interface GetNetworkInstanceIp {
    /**
     * Range of IP addresses to be used for DHCP
     */
    dhcpRanges?: outputs.GetNetworkInstanceIpDhcpRange[];
    /**
     * IP Addresses of DNS servers
     */
    dns?: string[];
    /**
     * Network domain
     */
    domain?: string;
    /**
     * IP Address of Network Gateway
     */
    gateway?: string;
    /**
     * Subnet Mask
     */
    mask?: string;
    /**
     * IP Address of NTP Server
     */
    ntp?: string;
    /**
     * Subnet address
     */
    subnet: string;
}

export interface GetNetworkInstanceIpDhcpRange {
    /**
     * ending IP
     */
    end?: string;
    /**
     * starting IP
     */
    start?: string;
}

export interface GetNetworkInstanceLisp {
    allocate: boolean;
    allocationprefix: string;
    allocationprefixlen: number;
    exportprivate: boolean;
    lispiid: number;
    sps: outputs.GetNetworkInstanceLispSp[];
}

export interface GetNetworkInstanceLispSp {
    credential: string;
    nameOrIp: string;
    type: string;
}

export interface GetNetworkInstanceOpaque {
    /**
     * Deprecated - Lisp config
     */
    lisps?: outputs.GetNetworkInstanceOpaqueLisp[];
    /**
     * base64 encoded string of opaque config
     */
    oconfig?: string;
    /**
     * type of Opaque config
     */
    type?: string;
}

export interface GetNetworkInstanceOpaqueLisp {
    /**
     * Allocate flag
     */
    allocate?: boolean;
    /**
     * Allocation Prefix
     */
    allocationprefix?: string;
    /**
     * Allocation Prefix Length
     */
    allocationprefixlen?: number;
    /**
     * Export Private flag
     */
    exportprivate?: boolean;
    /**
     * lisp id
     */
    lispiid?: number;
    /**
     * Service Point List
     */
    sps?: outputs.GetNetworkInstanceOpaqueLispSp[];
}

export interface GetNetworkInstanceOpaqueLispSp {
    /**
     * Service credentials
     */
    credential?: string;
    /**
     * Service name/ service name
     */
    nameOrIp?: string;
    /**
     * Service Point Type
     */
    type?: string;
}

export interface GetNetworkInstanceRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface GetNetworkIp {
    deprecatedDhcp?: boolean;
    /**
     * DHCP type:
     * NETWORK_DHCP_TYPE_STATIC
     * NETWORK_DHCP_TYPE_PASSTHROUGH
     * NETWORK_DHCP_TYPE_CLIENT
     */
    dhcp?: string;
    /**
     * Range of IP addresses to be used for DHCP for IPAM management when dhcp is turned on. If none provided, system will default pool.
     */
    dhcpRanges?: outputs.GetNetworkIpDhcpRange[];
    /**
     * List of IP Addresses of DNS servers
     */
    dns?: string[];
    /**
     * Network domain
     */
    domain?: string;
    /**
     * IP Address of Network Gateway
     */
    gateway?: string;
    /**
     * Subnet Mask
     */
    mask?: string;
    /**
     * IP Address of NTP Server
     */
    ntp?: string;
    /**
     * Subnet address
     */
    subnet?: string;
}

export interface GetNetworkIpDhcpRange {
    /**
     * ending IP
     */
    end?: string;
    /**
     * starting IP
     */
    start?: string;
}

export interface GetNetworkProxy {
    /**
     * Proxy exceptions
     */
    exceptions?: string;
    /**
     * Enable WPAD (Web Proxy Auto Discovery) protocol to discover and download PAC file.
     */
    networkProxy?: boolean;
    /**
     * Network Proxy Certificates
     */
    networkProxyCerts?: string[];
    /**
     * URL for wpad.dat file to be downloaded. Used when network_proxy is set to False.
     */
    networkProxyUrl?: string;
    /**
     * Proxy configuration in a pacfile. Used when network_proxy is set to False.
     */
    pacfile?: string;
    /**
     * Net Proxy: protocol level proxies. Used when network_proxy is set to False.
     */
    proxies?: outputs.GetNetworkProxyProxy[];
}

export interface GetNetworkProxyProxy {
    /**
     * Net Proxy Port
     */
    port?: number;
    /**
     * Net Proxy protocol:
     * NETWORK_PROXY_PROTO_HTTP
     * NETWORK_PROXY_PROTO_HTTPS
     * NETWORK_PROXY_PROTO_SOCKS
     * NETWORK_PROXY_PROTO_FTP
     * NETWORK_PROXY_PROTO_OTHER
     */
    proto?: string;
    /**
     * Net Proxy Server
     */
    server?: string;
}

export interface GetNetworkRevision {
    /**
     * The time, in milliseconds since the epoch, when the record was created.
     */
    createdAt: string;
    /**
     * User data: Created By
     */
    createdBy: string;
    /**
     * Current Database version of the record
     */
    curr: string;
    /**
     * Previous
     */
    prev: string;
    /**
     * The time, in milliseconds since the epoch, when the record was last updated.
     */
    updatedAt: string;
    /**
     * User data: Updated By
     */
    updatedBy: string;
}

export interface GetNetworkWireless {
    /**
     * Cellular configuration
     */
    cellulars?: outputs.GetNetworkWirelessCellular[];
    /**
     * Type of Wireless Network:
     * NETWORK_WIRELESS_TYPE_WIFI
     * NETWORK_WIRELESS_TYPE_CELLULAR
     */
    type?: string;
    /**
     * Can be multiple APs on a single wlan, e.g. one for 2.5Ghz, other 5Ghz SSIDs
     */
    wifis?: outputs.GetNetworkWirelessWifi[];
}

export interface GetNetworkWirelessCellular {
    apn?: string;
    locationTracking: boolean;
}

export interface GetNetworkWirelessWifi {
    identity?: string;
    /**
     * Key management scheme:
     * NETWORK_WIFIKEY_SCHEME_WPAPSK
     * NETWORK_WIFIKEY_SCHEME_WPAEAPPSK
     */
    keyScheme?: string;
    /**
     * Priority of connection, default is 0
     */
    priority?: number;
    wifiSsid?: string;
}

export interface GetPatchEnvelopeArtifact {
    artifactMetaData?: string;
    base64Artifacts?: outputs.GetPatchEnvelopeArtifactBase64Artifact[];
    binaryArtifacts?: outputs.GetPatchEnvelopeArtifactBinaryArtifact[];
    format?: string;
    /**
     * System defined universally unique Id of the artifact.
     */
    id: string;
}

export interface GetPatchEnvelopeArtifactBase64Artifact {
    base64Data: string;
    base64MetaData?: string;
    fileNameToUse: string;
}

export interface GetPatchEnvelopeArtifactBinaryArtifact {
    /**
     * Eve shall use the image name when fileNameToUse is empty
     * optional - this can be image type or size etc encoded into a single string.
     * only the application instance agents will interpret this.
     */
    blobMetaData?: string;
    fileNameToUse: string;
    imageId: string;
    imageName: string;
}

export interface GetPatchEnvelopeRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface GetProjectAppPolicy {
    /**
     * app policy, which is used in auto app instance deployment
     */
    appPolicies?: outputs.GetProjectAppPolicyAppPolicy[];
    /**
     * attestation policy to enforce on all devices in this project
     */
    attestationPolicies?: outputs.GetProjectAppPolicyAttestationPolicy[];
    /**
     * Mapping of policy  variable keys and policy variable values
     */
    attr?: {[key: string]: string};
    /**
     * azure policy, which is used in configuring azure iot-edge.
     */
    azurePolicies?: outputs.GetProjectAppPolicyAzurePolicy[];
    /**
     * cluster policy to bring up cluster on devices in this project
     */
    clusterPolicies?: outputs.GetProjectAppPolicyClusterPolicy[];
    /**
     * Detailed description of the policy
     */
    description?: string;
    /**
     * edgeview policy on devices of this project
     */
    edgeviewPolicies?: outputs.GetProjectAppPolicyEdgeviewPolicy[];
    /**
     * System defined universally unique Id of the policy request
     */
    id: string;
    /**
     * local operator console policy to enforce on all devices in this project
     */
    localOperatorConsolePolicies?: outputs.GetProjectAppPolicyLocalOperatorConsolePolicy[];
    /**
     * module policy, which is used in auto module deployment
     */
    modulePolicies?: outputs.GetProjectAppPolicyModulePolicy[];
    /**
     * User defined name of the policy request, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * network policy to enforce on all devices in this project
     */
    networkPolicies?: outputs.GetProjectAppPolicyNetworkPolicy[];
    /**
     * system defined info
     */
    revisions: outputs.GetProjectAppPolicyRevision[];
    /**
     * status of the policy
     */
    status: string;
    /**
     * Detailed status message of the policy
     */
    statusMessage: string;
    /**
     * User defined title of the policy. Title can be changed at any time
     */
    title?: string;
    /**
     * type of policy
     */
    type?: string;
}

export interface GetProjectAppPolicyAppPolicy {
    /**
     * list of app details that will be provisioned on all the devices of the project to which this policy is attached
     */
    apps: outputs.GetProjectAppPolicyAppPolicyApp[];
}

export interface GetProjectAppPolicyAppPolicyApp {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.GetProjectAppPolicyAppPolicyAppInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.GetProjectAppPolicyAppPolicyAppManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.GetProjectAppPolicyAppPolicyAppParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface GetProjectAppPolicyAppPolicyAppInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.GetProjectAppPolicyAppPolicyAppInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.GetProjectAppPolicyAppPolicyAppInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.GetProjectAppPolicyAppPolicyAppInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface GetProjectAppPolicyAppPolicyAppInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.GetProjectAppPolicyAppPolicyAppInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.GetProjectAppPolicyAppPolicyAppInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface GetProjectAppPolicyAppPolicyAppInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.GetProjectAppPolicyAppPolicyAppInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface GetProjectAppPolicyAppPolicyAppInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface GetProjectAppPolicyAppPolicyAppInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface GetProjectAppPolicyAppPolicyAppInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.GetProjectAppPolicyAppPolicyAppInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface GetProjectAppPolicyAppPolicyAppInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface GetProjectAppPolicyAppPolicyAppInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface GetProjectAppPolicyAppPolicyAppManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.GetProjectAppPolicyAppPolicyAppManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.GetProjectAppPolicyAppPolicyAppManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.GetProjectAppPolicyAppPolicyAppManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.GetProjectAppPolicyAppPolicyAppManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.GetProjectAppPolicyAppPolicyAppManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.GetProjectAppPolicyAppPolicyAppManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.GetProjectAppPolicyAppPolicyAppManifestJsonOwner[];
    permissions?: outputs.GetProjectAppPolicyAppPolicyAppManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.GetProjectAppPolicyAppPolicyAppManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface GetProjectAppPolicyAppPolicyAppManifestJsonConfiguration {
    customConfigs?: outputs.GetProjectAppPolicyAppPolicyAppManifestJsonConfigurationCustomConfig[];
}

export interface GetProjectAppPolicyAppPolicyAppManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.GetProjectAppPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface GetProjectAppPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.GetProjectAppPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.GetProjectAppPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface GetProjectAppPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface GetProjectAppPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.GetProjectAppPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface GetProjectAppPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface GetProjectAppPolicyAppPolicyAppManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface GetProjectAppPolicyAppPolicyAppManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface GetProjectAppPolicyAppPolicyAppManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.GetProjectAppPolicyAppPolicyAppManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface GetProjectAppPolicyAppPolicyAppManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface GetProjectAppPolicyAppPolicyAppManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.GetProjectAppPolicyAppPolicyAppManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface GetProjectAppPolicyAppPolicyAppManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.GetProjectAppPolicyAppPolicyAppManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.GetProjectAppPolicyAppPolicyAppManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface GetProjectAppPolicyAppPolicyAppManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.GetProjectAppPolicyAppPolicyAppManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.GetProjectAppPolicyAppPolicyAppManifestJsonInterfaceAclActionPortmapto[];
}

export interface GetProjectAppPolicyAppPolicyAppManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface GetProjectAppPolicyAppPolicyAppManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface GetProjectAppPolicyAppPolicyAppManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface GetProjectAppPolicyAppPolicyAppManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface GetProjectAppPolicyAppPolicyAppManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface GetProjectAppPolicyAppPolicyAppManifestJsonPermission {
}

export interface GetProjectAppPolicyAppPolicyAppManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface GetProjectAppPolicyAppPolicyAppParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface GetProjectAppPolicyAttestationPolicy {
    /**
     * unique policy id
     */
    id: string;
    /**
     * Attestation policy type
     */
    type: string;
}

export interface GetProjectAppPolicyAzurePolicy {
    /**
     * app id for rbac
     */
    appId: string;
    /**
     * app password for rbac
     */
    appPassword: string;
    /**
     * azure resource and service the policy will be interested in
     */
    azureResourceAndServices?: outputs.GetProjectAppPolicyAzurePolicyAzureResourceAndService[];
    /**
     * Certificate object holds the details of certificate like encryption type, validity, subject etc
     */
    certificates?: outputs.GetProjectAppPolicyAzurePolicyCertificate[];
    /**
     * key to decrypt AppPassword
     */
    cryptoKey?: string;
    customDeploymentManaged?: boolean;
    /**
     * encrypted AppPassword
     */
    encryptedSecrets?: {[key: string]: string};
    /**
     * tenant id for rbac
     */
    tenantId: string;
}

export interface GetProjectAppPolicyAzurePolicyAzureResourceAndService {
    /**
     * dps service attached to cloud policy
     */
    dpsServices: outputs.GetProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsService[];
    /**
     * list of iothubs attached to cloud policy
     */
    iotHubServices: outputs.GetProjectAppPolicyAzurePolicyAzureResourceAndServiceIotHubService[];
    /**
     * list of resource groups attached to cloud policy
     */
    resourceGroups: outputs.GetProjectAppPolicyAzurePolicyAzureResourceAndServiceResourceGroup[];
}

export interface GetProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsService {
    enrollments?: outputs.GetProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollment[];
    serviceDetails?: outputs.GetProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetail[];
}

export interface GetProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollment {
    allocationPolicy?: string;
    attachedIotHubsNames?: string[];
    certificateEnrollments?: outputs.GetProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollment[];
    enableIotEdgeDevice?: boolean;
    mechanism?: string;
    symmetricKeyEnrollments?: outputs.GetProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollment[];
    tags?: {[key: string]: string};
    tpmEnrollments?: outputs.GetProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentTpmEnrollment[];
}

export interface GetProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollment {
    groupCertificateEnrollments?: outputs.GetProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollmentGroupCertificateEnrollment[];
    individualCertificateEnrollment?: string;
    type?: string;
}

export interface GetProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollmentGroupCertificateEnrollment {
    groupName?: string;
}

export interface GetProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollment {
    groupSymmetricKeyEnrollments?: outputs.GetProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentGroupSymmetricKeyEnrollment[];
    individualSymmetricKeyEnrollments?: outputs.GetProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentIndividualSymmetricKeyEnrollment[];
    type?: string;
}

export interface GetProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentGroupSymmetricKeyEnrollment {
    groupName?: string;
}

export interface GetProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentIndividualSymmetricKeyEnrollment {
    registrationId?: string;
}

export interface GetProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentTpmEnrollment {
    type?: string;
}

export interface GetProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetail {
    createByDefault?: boolean;
    name?: string;
    region?: string;
    resourceGroupName?: string;
    sKUs?: outputs.GetProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetailSKU[];
    subscriptionId?: string;
}

export interface GetProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetailSKU {
    capacity?: string;
    name?: string;
    tier?: string;
}

export interface GetProjectAppPolicyAzurePolicyAzureResourceAndServiceIotHubService {
    serviceDetails?: outputs.GetProjectAppPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetail[];
}

export interface GetProjectAppPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetail {
    createByDefault?: boolean;
    name?: string;
    region?: string;
    resourceGroupName?: string;
    sKUs?: outputs.GetProjectAppPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetailSKU[];
    subscriptionId?: string;
}

export interface GetProjectAppPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetailSKU {
    capacity?: string;
    name?: string;
    tier?: string;
}

export interface GetProjectAppPolicyAzurePolicyAzureResourceAndServiceResourceGroup {
    /**
     * resource group name
     */
    name: string;
    /**
     * resource group region
     */
    region?: string;
    /**
     * azure subscription id to which resource group is attached
     */
    subscriptionId: string;
}

export interface GetProjectAppPolicyAzurePolicyCertificate {
    /**
     * This fields tells the basic constraints like isCA are correct.
     */
    basicContraintsValid?: boolean;
    /**
     * base64 string of the parent certificate
     */
    cert?: string;
    /**
     * Crypto Key for decrypting user secret information
     */
    cryptoKey?: string;
    /**
     * ECDSA encryption algorithm of the certificate
     */
    ecdsaEncryptions?: outputs.GetProjectAppPolicyAzurePolicyCertificateEcdsaEncryption[];
    /**
     * user encrypted secrets map
     */
    encryptedSecrets?: {[key: string]: string};
    /**
     * Indicates if the private key can be exported.
     */
    exportable?: boolean;
    /**
     * Sequence of extended key usages.
     */
    extendedKeyUsages?: string[];
    /**
     * Parameters for the issuer of the X509 component of a certificate.
     */
    issuers?: outputs.GetProjectAppPolicyAzurePolicyCertificateIssuer[];
    /**
     * Key usage extensions define the purpose of the public key contained in a certificate.
     */
    keyUsage?: number;
    /**
     * pass phase for the pvt key, this has to be filled if pvt key is encrypted with a pass phrase
     */
    passPhrase?: string;
    /**
     * base63 string of the public key
     */
    publicKey?: string;
    /**
     * Public key algorithm.
     */
    publicKeyAlgorithm?: string;
    /**
     * base64 string of the parent pvt key
     */
    pvtKey?: string;
    /**
     * Indicates if the same key pair will be used on certificate renewal.
     */
    reuseKey?: boolean;
    /**
     * RSA encryption algorithm of the certificate
     */
    rsaEcryptions?: outputs.GetProjectAppPolicyAzurePolicyCertificateRsaEcryption[];
    /**
     * This holds the alternative name values like URIs, domain names IPs etc.
     */
    sanValues?: outputs.GetProjectAppPolicyAzurePolicyCertificateSanValue[];
    /**
     * Unique identifier for each Certificate generated by an Certificate Issuer.
     */
    serialNumber?: string;
    signatureAlgorithm?: string;
    /**
     * Parameters for the subject of the X509 component of a certificate.
     */
    subjects?: outputs.GetProjectAppPolicyAzurePolicyCertificateSubject[];
    /**
     * Certificate validatity start time
     */
    validFrom?: string;
    /**
     * Certificate validatity start time
     */
    validTill?: string;
}

export interface GetProjectAppPolicyAzurePolicyCertificateEcdsaEncryption {
    /**
     * ECDSA curve to be used while signing the certificate.
     */
    curve?: string;
}

export interface GetProjectAppPolicyAzurePolicyCertificateIssuer {
    /**
     * Certificate common name.
     */
    commonName?: string;
    /**
     * List of countries.
     */
    countries?: string[];
    /**
     * List of locallity.
     */
    localities?: string[];
    /**
     * List of Organizational Unit.
     */
    organizationalUnits?: string[];
    /**
     * List of organization.
     */
    organizations?: string[];
    /**
     * List of Postal codes.
     */
    postalCodes?: string[];
    /**
     * List of List of Prvince.
     */
    provinces?: string[];
    /**
     * Subject cerial number
     */
    serialNumber?: string;
}

export interface GetProjectAppPolicyAzurePolicyCertificateRsaEcryption {
    /**
     * RSA Encryption Key bit size.
     */
    rsaBits?: string;
}

export interface GetProjectAppPolicyAzurePolicyCertificateSanValue {
    /**
     * List of permitted DNS names.
     */
    dns?: string[];
    /**
     * List of permitted email addresses.
     */
    emaildIds?: string[];
    /**
     * List of permitted hosts.
     */
    hosts?: string[];
    /**
     * List of permitted IP addresses.
     */
    ips?: string[];
    /**
     * List of permitted User principal names.
     */
    upns?: string[];
    /**
     * List of permitted URIs.
     */
    uris?: string[];
}

export interface GetProjectAppPolicyAzurePolicyCertificateSubject {
    /**
     * Certificate common name.
     */
    commonName?: string;
    /**
     * List of countries.
     */
    countries?: string[];
    /**
     * List of locallity.
     */
    localities?: string[];
    /**
     * List of Organizational Unit.
     */
    organizationalUnits?: string[];
    /**
     * List of organization.
     */
    organizations?: string[];
    /**
     * List of Postal codes.
     */
    postalCodes?: string[];
    /**
     * List of List of Prvince.
     */
    provinces?: string[];
    /**
     * Subject cerial number
     */
    serialNumber?: string;
}

export interface GetProjectAppPolicyClusterPolicy {
    /**
     * UUID of the app policy linked to this cluster policy
     */
    appPolicyId: string;
    /**
     * Cluster Policy Parameters
     */
    clusterConfigs?: outputs.GetProjectAppPolicyClusterPolicyClusterConfig[];
    /**
     * UUID of the network policy linked to this cluster policy
     */
    networkPolicyId: string;
    /**
     * Type of cluster
     */
    type: string;
}

export interface GetProjectAppPolicyClusterPolicyClusterConfig {
    minNodesRequired?: number;
}

export interface GetProjectAppPolicyEdgeviewPolicy {
    /**
     * Allow inherit instance to change access policy
     */
    accessAllowChange?: boolean;
    /**
     * Allow device to enable Edgeview in this project
     */
    edgeviewAllow?: boolean;
    /**
     * Edgeview configuration and policies
     */
    edgeviewcfgs?: outputs.GetProjectAppPolicyEdgeviewPolicyEdgeviewcfg[];
    /**
     * Maximum seconds allowed for Edgeview session
     */
    maxExpireSec?: number;
    /**
     * Maximum instances allowed for Edgeview
     */
    maxInst?: number;
}

export interface GetProjectAppPolicyEdgeviewPolicyEdgeviewcfg {
    appPolicies?: outputs.GetProjectAppPolicyEdgeviewPolicyEdgeviewcfgAppPolicy[];
    devPolicies?: outputs.GetProjectAppPolicyEdgeviewPolicyEdgeviewcfgDevPolicy[];
    extPolicies?: outputs.GetProjectAppPolicyEdgeviewPolicyEdgeviewcfgExtPolicy[];
    generationId?: number;
    jwtInfos?: outputs.GetProjectAppPolicyEdgeviewPolicyEdgeviewcfgJwtInfo[];
    token?: string;
}

export interface GetProjectAppPolicyEdgeviewPolicyEdgeviewcfgAppPolicy {
    allowApp?: boolean;
}

export interface GetProjectAppPolicyEdgeviewPolicyEdgeviewcfgDevPolicy {
    allowDev?: boolean;
}

export interface GetProjectAppPolicyEdgeviewPolicyEdgeviewcfgExtPolicy {
    allowExt?: boolean;
}

export interface GetProjectAppPolicyEdgeviewPolicyEdgeviewcfgJwtInfo {
    allowSec?: number;
    dispUrl?: string;
    encrypt?: boolean;
    expireSec: string;
    numInst?: number;
}

export interface GetProjectAppPolicyLocalOperatorConsolePolicy {
    /**
     * unique policy id
     */
    id: string;
    /**
     * Local operator console URL
     */
    locUrl: string;
}

export interface GetProjectAppPolicyModulePolicy {
    /**
     * list of app details that will be provisioned on all the devices of the project to which this policy is attached
     */
    apps: outputs.GetProjectAppPolicyModulePolicyApp[];
    /**
     * app that describes the azure edge agent to be deployed on the Azure runtime
     */
    azureEdgeAgents?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeAgent[];
    /**
     * app that describes the azure edge hub to be deployed on the Azure runtime
     */
    azureEdgeHubs?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeHub[];
    /**
     * etag for deployment
     */
    etag?: string;
    /**
     * unique id for deployment
     */
    id: string;
    /**
     * Mapping of label variable keys and value
     */
    labels?: {[key: string]: string};
    /**
     * custom metrics for deployment
     */
    metrics?: outputs.GetProjectAppPolicyModulePolicyMetric[];
    /**
     * deployment priority of module manifest
     */
    priority: number;
    /**
     * Mapping of routes variable keys and value
     */
    routes?: {[key: string]: string};
    /**
     * target condition for deployment that matches single device or group of devices
     */
    targetCondition?: string;
    /**
     * target condition for deployment that matches single device or group of devices
     */
    targetConditionNew?: {[key: string]: string};
}

export interface GetProjectAppPolicyModulePolicyApp {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.GetProjectAppPolicyModulePolicyAppInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.GetProjectAppPolicyModulePolicyAppManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.GetProjectAppPolicyModulePolicyAppParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface GetProjectAppPolicyModulePolicyAppInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.GetProjectAppPolicyModulePolicyAppInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.GetProjectAppPolicyModulePolicyAppInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.GetProjectAppPolicyModulePolicyAppInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface GetProjectAppPolicyModulePolicyAppInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.GetProjectAppPolicyModulePolicyAppInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.GetProjectAppPolicyModulePolicyAppInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface GetProjectAppPolicyModulePolicyAppInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.GetProjectAppPolicyModulePolicyAppInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface GetProjectAppPolicyModulePolicyAppInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface GetProjectAppPolicyModulePolicyAppInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface GetProjectAppPolicyModulePolicyAppInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.GetProjectAppPolicyModulePolicyAppInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface GetProjectAppPolicyModulePolicyAppInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface GetProjectAppPolicyModulePolicyAppInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface GetProjectAppPolicyModulePolicyAppManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.GetProjectAppPolicyModulePolicyAppManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.GetProjectAppPolicyModulePolicyAppManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.GetProjectAppPolicyModulePolicyAppManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.GetProjectAppPolicyModulePolicyAppManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.GetProjectAppPolicyModulePolicyAppManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.GetProjectAppPolicyModulePolicyAppManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.GetProjectAppPolicyModulePolicyAppManifestJsonOwner[];
    permissions?: outputs.GetProjectAppPolicyModulePolicyAppManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.GetProjectAppPolicyModulePolicyAppManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface GetProjectAppPolicyModulePolicyAppManifestJsonConfiguration {
    customConfigs?: outputs.GetProjectAppPolicyModulePolicyAppManifestJsonConfigurationCustomConfig[];
}

export interface GetProjectAppPolicyModulePolicyAppManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.GetProjectAppPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface GetProjectAppPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.GetProjectAppPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.GetProjectAppPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface GetProjectAppPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface GetProjectAppPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.GetProjectAppPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface GetProjectAppPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface GetProjectAppPolicyModulePolicyAppManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface GetProjectAppPolicyModulePolicyAppManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface GetProjectAppPolicyModulePolicyAppManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.GetProjectAppPolicyModulePolicyAppManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface GetProjectAppPolicyModulePolicyAppManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface GetProjectAppPolicyModulePolicyAppManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.GetProjectAppPolicyModulePolicyAppManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface GetProjectAppPolicyModulePolicyAppManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.GetProjectAppPolicyModulePolicyAppManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.GetProjectAppPolicyModulePolicyAppManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface GetProjectAppPolicyModulePolicyAppManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.GetProjectAppPolicyModulePolicyAppManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.GetProjectAppPolicyModulePolicyAppManifestJsonInterfaceAclActionPortmapto[];
}

export interface GetProjectAppPolicyModulePolicyAppManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface GetProjectAppPolicyModulePolicyAppManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface GetProjectAppPolicyModulePolicyAppManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface GetProjectAppPolicyModulePolicyAppManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface GetProjectAppPolicyModulePolicyAppManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface GetProjectAppPolicyModulePolicyAppManifestJsonPermission {
}

export interface GetProjectAppPolicyModulePolicyAppManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface GetProjectAppPolicyModulePolicyAppParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeAgent {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeAgentInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeAgentParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeAgentInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeAgentInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeAgentInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeAgentInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeAgentInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeAgentInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeAgentInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeAgentInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeAgentInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeAgentInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeAgentInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeAgentInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.GetProjectAppPolicyModulePolicyAzureEdgeAgentInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeAgentInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeAgentInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonOwner[];
    permissions?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonConfiguration {
    customConfigs?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfig[];
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionPortmapto[];
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonPermission {
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeAgentParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeHub {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeHubInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeHubParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeHubInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeHubInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeHubInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeHubInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeHubInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeHubInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeHubInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeHubInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeHubInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeHubInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeHubInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeHubInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.GetProjectAppPolicyModulePolicyAzureEdgeHubInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeHubInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeHubInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonOwner[];
    permissions?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonConfiguration {
    customConfigs?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfig[];
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionPortmapto[];
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonPermission {
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface GetProjectAppPolicyModulePolicyAzureEdgeHubParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface GetProjectAppPolicyModulePolicyMetric {
    /**
     * Mapping of queries variable keys and value
     */
    queries?: {[key: string]: string};
    /**
     * Mapping of results variable keys and value
     */
    results?: {[key: string]: string};
}

export interface GetProjectAppPolicyNetworkPolicy {
    /**
     * list of network details that will be created on all the devices of the project to which this policy is attached
     */
    netInstanceConfigs: outputs.GetProjectAppPolicyNetworkPolicyNetInstanceConfig[];
}

export interface GetProjectAppPolicyNetworkPolicyNetInstanceConfig {
    /**
     * ID of the Cluster in which the network instance is configured
     */
    clusterId?: string;
    /**
     * Detailed description of the network instance
     */
    description?: string;
    /**
     * Flag to indicate if this is the default network instance for the device
     */
    deviceDefault?: boolean;
    /**
     * ID of the device on which network instance is created
     */
    deviceId: string;
    /**
     * Deprecated
     */
    dhcp?: boolean;
    /**
     * List of Static DNS entries
     */
    dnsLists?: outputs.GetProjectAppPolicyNetworkPolicyNetInstanceConfigDnsList[];
    /**
     * System defined universally unique ID of the network instance
     */
    id: string;
    /**
     * DHCP Server Configuration
     */
    ips?: outputs.GetProjectAppPolicyNetworkPolicyNetInstanceConfigIp[];
    /**
     * Kind of Network Instance:
     * NETWORK_INSTANCE_KIND_UNSPECIFIED
     * NETWORK_INSTANCE_KIND_TRANSPARENT
     * NETWORK_INSTANCE_KIND_SWITCH
     * NETWORK_INSTANCE_KIND_LOCAL
     * NETWORK_INSTANCE_KIND_CLOUD
     * NETWORK_INSTANCE_KIND_MESH
     * NETWORK_INSTANCE_KIND_HONEYPOT
     */
    kind: string;
    /**
     * Lisp Config : read only for now. Deprecated.
     */
    lisps: outputs.GetProjectAppPolicyNetworkPolicyNetInstanceConfigLisp[];
    /**
     * User defined name of the network instance, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * id of the network policy to be attached to this network instance
     */
    networkPolicyId?: string;
    oconfig?: string;
    /**
     * Service specific Config
     */
    opaques?: outputs.GetProjectAppPolicyNetworkPolicyNetInstanceConfigOpaque[];
    /**
     * name of port mapping in the model
     */
    port?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    portTags?: {[key: string]: string};
    /**
     * id of the project in which network instance is created
     */
    projectId: string;
    /**
     * system defined info for the object
     */
    revisions: outputs.GetProjectAppPolicyNetworkPolicyNetInstanceConfigRevision[];
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the network instance. Title can be changed at any time
     */
    title: string;
    /**
     * Type of DHCP for this Network Instance:
     * NETWORK_INSTANCE_DHCP_TYPE_V4
     * NETWORK_INSTANCE_DHCP_TYPE_V6
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOEID
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOV4
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOV6
     */
    type: string;
}

export interface GetProjectAppPolicyNetworkPolicyNetInstanceConfigDnsList {
    /**
     * Addresses
     */
    addrs?: string[];
    /**
     * Host name
     */
    hostname?: string;
}

export interface GetProjectAppPolicyNetworkPolicyNetInstanceConfigIp {
    /**
     * Range of IP addresses to be used for DHCP
     */
    dhcpRanges?: outputs.GetProjectAppPolicyNetworkPolicyNetInstanceConfigIpDhcpRange[];
    /**
     * IP Addresses of DNS servers
     */
    dns?: string[];
    /**
     * Network domain
     */
    domain?: string;
    /**
     * IP Address of Network Gateway
     */
    gateway?: string;
    /**
     * Subnet Mask
     */
    mask?: string;
    /**
     * IP Address of NTP Server
     */
    ntp?: string;
    /**
     * Subnet address
     */
    subnet: string;
}

export interface GetProjectAppPolicyNetworkPolicyNetInstanceConfigIpDhcpRange {
    /**
     * ending IP
     */
    end?: string;
    /**
     * starting IP
     */
    start?: string;
}

export interface GetProjectAppPolicyNetworkPolicyNetInstanceConfigLisp {
    allocate: boolean;
    allocationprefix: string;
    allocationprefixlen: number;
    exportprivate: boolean;
    lispiid: number;
    sps: outputs.GetProjectAppPolicyNetworkPolicyNetInstanceConfigLispSp[];
}

export interface GetProjectAppPolicyNetworkPolicyNetInstanceConfigLispSp {
    credential: string;
    nameOrIp: string;
    type: string;
}

export interface GetProjectAppPolicyNetworkPolicyNetInstanceConfigOpaque {
    /**
     * Deprecated - Lisp config
     */
    lisps?: outputs.GetProjectAppPolicyNetworkPolicyNetInstanceConfigOpaqueLisp[];
    /**
     * base64 encoded string of opaque config
     */
    oconfig?: string;
    /**
     * type of Opaque config
     */
    type?: string;
}

export interface GetProjectAppPolicyNetworkPolicyNetInstanceConfigOpaqueLisp {
    /**
     * Allocate flag
     */
    allocate?: boolean;
    /**
     * Allocation Prefix
     */
    allocationprefix?: string;
    /**
     * Allocation Prefix Length
     */
    allocationprefixlen?: number;
    /**
     * Export Private flag
     */
    exportprivate?: boolean;
    /**
     * lisp id
     */
    lispiid?: number;
    /**
     * Service Point List
     */
    sps?: outputs.GetProjectAppPolicyNetworkPolicyNetInstanceConfigOpaqueLispSp[];
}

export interface GetProjectAppPolicyNetworkPolicyNetInstanceConfigOpaqueLispSp {
    /**
     * Service credentials
     */
    credential?: string;
    /**
     * Service name/ service name
     */
    nameOrIp?: string;
    /**
     * Service Point Type
     */
    type?: string;
}

export interface GetProjectAppPolicyNetworkPolicyNetInstanceConfigRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface GetProjectAppPolicyRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface GetProjectAttestationPolicy {
    /**
     * app policy, which is used in auto app instance deployment
     */
    appPolicies?: outputs.GetProjectAttestationPolicyAppPolicy[];
    /**
     * attestation policy to enforce on all devices in this project
     */
    attestationPolicies?: outputs.GetProjectAttestationPolicyAttestationPolicy[];
    /**
     * Mapping of policy  variable keys and policy variable values
     */
    attr?: {[key: string]: string};
    /**
     * azure policy, which is used in configuring azure iot-edge.
     */
    azurePolicies?: outputs.GetProjectAttestationPolicyAzurePolicy[];
    /**
     * cluster policy to bring up cluster on devices in this project
     */
    clusterPolicies?: outputs.GetProjectAttestationPolicyClusterPolicy[];
    /**
     * Detailed description of the policy
     */
    description?: string;
    /**
     * edgeview policy on devices of this project
     */
    edgeviewPolicies?: outputs.GetProjectAttestationPolicyEdgeviewPolicy[];
    /**
     * System defined universally unique Id of the policy request
     */
    id: string;
    /**
     * local operator console policy to enforce on all devices in this project
     */
    localOperatorConsolePolicies?: outputs.GetProjectAttestationPolicyLocalOperatorConsolePolicy[];
    /**
     * module policy, which is used in auto module deployment
     */
    modulePolicies?: outputs.GetProjectAttestationPolicyModulePolicy[];
    /**
     * User defined name of the policy request, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * network policy to enforce on all devices in this project
     */
    networkPolicies?: outputs.GetProjectAttestationPolicyNetworkPolicy[];
    /**
     * system defined info
     */
    revisions: outputs.GetProjectAttestationPolicyRevision[];
    /**
     * status of the policy
     */
    status: string;
    /**
     * Detailed status message of the policy
     */
    statusMessage: string;
    /**
     * User defined title of the policy. Title can be changed at any time
     */
    title?: string;
    /**
     * type of policy
     */
    type?: string;
}

export interface GetProjectAttestationPolicyAppPolicy {
    /**
     * list of app details that will be provisioned on all the devices of the project to which this policy is attached
     */
    apps: outputs.GetProjectAttestationPolicyAppPolicyApp[];
}

export interface GetProjectAttestationPolicyAppPolicyApp {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.GetProjectAttestationPolicyAppPolicyAppInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.GetProjectAttestationPolicyAppPolicyAppManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.GetProjectAttestationPolicyAppPolicyAppParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface GetProjectAttestationPolicyAppPolicyAppInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.GetProjectAttestationPolicyAppPolicyAppInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.GetProjectAttestationPolicyAppPolicyAppInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.GetProjectAttestationPolicyAppPolicyAppInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface GetProjectAttestationPolicyAppPolicyAppInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.GetProjectAttestationPolicyAppPolicyAppInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.GetProjectAttestationPolicyAppPolicyAppInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface GetProjectAttestationPolicyAppPolicyAppInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.GetProjectAttestationPolicyAppPolicyAppInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface GetProjectAttestationPolicyAppPolicyAppInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface GetProjectAttestationPolicyAppPolicyAppInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface GetProjectAttestationPolicyAppPolicyAppInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.GetProjectAttestationPolicyAppPolicyAppInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface GetProjectAttestationPolicyAppPolicyAppInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface GetProjectAttestationPolicyAppPolicyAppInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface GetProjectAttestationPolicyAppPolicyAppManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.GetProjectAttestationPolicyAppPolicyAppManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.GetProjectAttestationPolicyAppPolicyAppManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.GetProjectAttestationPolicyAppPolicyAppManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.GetProjectAttestationPolicyAppPolicyAppManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.GetProjectAttestationPolicyAppPolicyAppManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.GetProjectAttestationPolicyAppPolicyAppManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.GetProjectAttestationPolicyAppPolicyAppManifestJsonOwner[];
    permissions?: outputs.GetProjectAttestationPolicyAppPolicyAppManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.GetProjectAttestationPolicyAppPolicyAppManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface GetProjectAttestationPolicyAppPolicyAppManifestJsonConfiguration {
    customConfigs?: outputs.GetProjectAttestationPolicyAppPolicyAppManifestJsonConfigurationCustomConfig[];
}

export interface GetProjectAttestationPolicyAppPolicyAppManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.GetProjectAttestationPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface GetProjectAttestationPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.GetProjectAttestationPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.GetProjectAttestationPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface GetProjectAttestationPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface GetProjectAttestationPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.GetProjectAttestationPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface GetProjectAttestationPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface GetProjectAttestationPolicyAppPolicyAppManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface GetProjectAttestationPolicyAppPolicyAppManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface GetProjectAttestationPolicyAppPolicyAppManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.GetProjectAttestationPolicyAppPolicyAppManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface GetProjectAttestationPolicyAppPolicyAppManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface GetProjectAttestationPolicyAppPolicyAppManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.GetProjectAttestationPolicyAppPolicyAppManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface GetProjectAttestationPolicyAppPolicyAppManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.GetProjectAttestationPolicyAppPolicyAppManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.GetProjectAttestationPolicyAppPolicyAppManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface GetProjectAttestationPolicyAppPolicyAppManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.GetProjectAttestationPolicyAppPolicyAppManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.GetProjectAttestationPolicyAppPolicyAppManifestJsonInterfaceAclActionPortmapto[];
}

export interface GetProjectAttestationPolicyAppPolicyAppManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface GetProjectAttestationPolicyAppPolicyAppManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface GetProjectAttestationPolicyAppPolicyAppManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface GetProjectAttestationPolicyAppPolicyAppManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface GetProjectAttestationPolicyAppPolicyAppManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface GetProjectAttestationPolicyAppPolicyAppManifestJsonPermission {
}

export interface GetProjectAttestationPolicyAppPolicyAppManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface GetProjectAttestationPolicyAppPolicyAppParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface GetProjectAttestationPolicyAttestationPolicy {
    /**
     * unique policy id
     */
    id: string;
    /**
     * Attestation policy type
     */
    type: string;
}

export interface GetProjectAttestationPolicyAzurePolicy {
    /**
     * app id for rbac
     */
    appId: string;
    /**
     * app password for rbac
     */
    appPassword: string;
    /**
     * azure resource and service the policy will be interested in
     */
    azureResourceAndServices?: outputs.GetProjectAttestationPolicyAzurePolicyAzureResourceAndService[];
    /**
     * Certificate object holds the details of certificate like encryption type, validity, subject etc
     */
    certificates?: outputs.GetProjectAttestationPolicyAzurePolicyCertificate[];
    /**
     * key to decrypt AppPassword
     */
    cryptoKey?: string;
    customDeploymentManaged?: boolean;
    /**
     * encrypted AppPassword
     */
    encryptedSecrets?: {[key: string]: string};
    /**
     * tenant id for rbac
     */
    tenantId: string;
}

export interface GetProjectAttestationPolicyAzurePolicyAzureResourceAndService {
    /**
     * dps service attached to cloud policy
     */
    dpsServices: outputs.GetProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsService[];
    /**
     * list of iothubs attached to cloud policy
     */
    iotHubServices: outputs.GetProjectAttestationPolicyAzurePolicyAzureResourceAndServiceIotHubService[];
    /**
     * list of resource groups attached to cloud policy
     */
    resourceGroups: outputs.GetProjectAttestationPolicyAzurePolicyAzureResourceAndServiceResourceGroup[];
}

export interface GetProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsService {
    enrollments?: outputs.GetProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollment[];
    serviceDetails?: outputs.GetProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetail[];
}

export interface GetProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollment {
    allocationPolicy?: string;
    attachedIotHubsNames?: string[];
    certificateEnrollments?: outputs.GetProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollment[];
    enableIotEdgeDevice?: boolean;
    mechanism?: string;
    symmetricKeyEnrollments?: outputs.GetProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollment[];
    tags?: {[key: string]: string};
    tpmEnrollments?: outputs.GetProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentTpmEnrollment[];
}

export interface GetProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollment {
    groupCertificateEnrollments?: outputs.GetProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollmentGroupCertificateEnrollment[];
    individualCertificateEnrollment?: string;
    type?: string;
}

export interface GetProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollmentGroupCertificateEnrollment {
    groupName?: string;
}

export interface GetProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollment {
    groupSymmetricKeyEnrollments?: outputs.GetProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentGroupSymmetricKeyEnrollment[];
    individualSymmetricKeyEnrollments?: outputs.GetProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentIndividualSymmetricKeyEnrollment[];
    type?: string;
}

export interface GetProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentGroupSymmetricKeyEnrollment {
    groupName?: string;
}

export interface GetProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentIndividualSymmetricKeyEnrollment {
    registrationId?: string;
}

export interface GetProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentTpmEnrollment {
    type?: string;
}

export interface GetProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetail {
    createByDefault?: boolean;
    name?: string;
    region?: string;
    resourceGroupName?: string;
    sKUs?: outputs.GetProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetailSKU[];
    subscriptionId?: string;
}

export interface GetProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetailSKU {
    capacity?: string;
    name?: string;
    tier?: string;
}

export interface GetProjectAttestationPolicyAzurePolicyAzureResourceAndServiceIotHubService {
    serviceDetails?: outputs.GetProjectAttestationPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetail[];
}

export interface GetProjectAttestationPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetail {
    createByDefault?: boolean;
    name?: string;
    region?: string;
    resourceGroupName?: string;
    sKUs?: outputs.GetProjectAttestationPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetailSKU[];
    subscriptionId?: string;
}

export interface GetProjectAttestationPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetailSKU {
    capacity?: string;
    name?: string;
    tier?: string;
}

export interface GetProjectAttestationPolicyAzurePolicyAzureResourceAndServiceResourceGroup {
    /**
     * resource group name
     */
    name: string;
    /**
     * resource group region
     */
    region?: string;
    /**
     * azure subscription id to which resource group is attached
     */
    subscriptionId: string;
}

export interface GetProjectAttestationPolicyAzurePolicyCertificate {
    /**
     * This fields tells the basic constraints like isCA are correct.
     */
    basicContraintsValid?: boolean;
    /**
     * base64 string of the parent certificate
     */
    cert?: string;
    /**
     * Crypto Key for decrypting user secret information
     */
    cryptoKey?: string;
    /**
     * ECDSA encryption algorithm of the certificate
     */
    ecdsaEncryptions?: outputs.GetProjectAttestationPolicyAzurePolicyCertificateEcdsaEncryption[];
    /**
     * user encrypted secrets map
     */
    encryptedSecrets?: {[key: string]: string};
    /**
     * Indicates if the private key can be exported.
     */
    exportable?: boolean;
    /**
     * Sequence of extended key usages.
     */
    extendedKeyUsages?: string[];
    /**
     * Parameters for the issuer of the X509 component of a certificate.
     */
    issuers?: outputs.GetProjectAttestationPolicyAzurePolicyCertificateIssuer[];
    /**
     * Key usage extensions define the purpose of the public key contained in a certificate.
     */
    keyUsage?: number;
    /**
     * pass phase for the pvt key, this has to be filled if pvt key is encrypted with a pass phrase
     */
    passPhrase?: string;
    /**
     * base63 string of the public key
     */
    publicKey?: string;
    /**
     * Public key algorithm.
     */
    publicKeyAlgorithm?: string;
    /**
     * base64 string of the parent pvt key
     */
    pvtKey?: string;
    /**
     * Indicates if the same key pair will be used on certificate renewal.
     */
    reuseKey?: boolean;
    /**
     * RSA encryption algorithm of the certificate
     */
    rsaEcryptions?: outputs.GetProjectAttestationPolicyAzurePolicyCertificateRsaEcryption[];
    /**
     * This holds the alternative name values like URIs, domain names IPs etc.
     */
    sanValues?: outputs.GetProjectAttestationPolicyAzurePolicyCertificateSanValue[];
    /**
     * Unique identifier for each Certificate generated by an Certificate Issuer.
     */
    serialNumber?: string;
    signatureAlgorithm?: string;
    /**
     * Parameters for the subject of the X509 component of a certificate.
     */
    subjects?: outputs.GetProjectAttestationPolicyAzurePolicyCertificateSubject[];
    /**
     * Certificate validatity start time
     */
    validFrom?: string;
    /**
     * Certificate validatity start time
     */
    validTill?: string;
}

export interface GetProjectAttestationPolicyAzurePolicyCertificateEcdsaEncryption {
    /**
     * ECDSA curve to be used while signing the certificate.
     */
    curve?: string;
}

export interface GetProjectAttestationPolicyAzurePolicyCertificateIssuer {
    /**
     * Certificate common name.
     */
    commonName?: string;
    /**
     * List of countries.
     */
    countries?: string[];
    /**
     * List of locallity.
     */
    localities?: string[];
    /**
     * List of Organizational Unit.
     */
    organizationalUnits?: string[];
    /**
     * List of organization.
     */
    organizations?: string[];
    /**
     * List of Postal codes.
     */
    postalCodes?: string[];
    /**
     * List of List of Prvince.
     */
    provinces?: string[];
    /**
     * Subject cerial number
     */
    serialNumber?: string;
}

export interface GetProjectAttestationPolicyAzurePolicyCertificateRsaEcryption {
    /**
     * RSA Encryption Key bit size.
     */
    rsaBits?: string;
}

export interface GetProjectAttestationPolicyAzurePolicyCertificateSanValue {
    /**
     * List of permitted DNS names.
     */
    dns?: string[];
    /**
     * List of permitted email addresses.
     */
    emaildIds?: string[];
    /**
     * List of permitted hosts.
     */
    hosts?: string[];
    /**
     * List of permitted IP addresses.
     */
    ips?: string[];
    /**
     * List of permitted User principal names.
     */
    upns?: string[];
    /**
     * List of permitted URIs.
     */
    uris?: string[];
}

export interface GetProjectAttestationPolicyAzurePolicyCertificateSubject {
    /**
     * Certificate common name.
     */
    commonName?: string;
    /**
     * List of countries.
     */
    countries?: string[];
    /**
     * List of locallity.
     */
    localities?: string[];
    /**
     * List of Organizational Unit.
     */
    organizationalUnits?: string[];
    /**
     * List of organization.
     */
    organizations?: string[];
    /**
     * List of Postal codes.
     */
    postalCodes?: string[];
    /**
     * List of List of Prvince.
     */
    provinces?: string[];
    /**
     * Subject cerial number
     */
    serialNumber?: string;
}

export interface GetProjectAttestationPolicyClusterPolicy {
    /**
     * UUID of the app policy linked to this cluster policy
     */
    appPolicyId: string;
    /**
     * Cluster Policy Parameters
     */
    clusterConfigs?: outputs.GetProjectAttestationPolicyClusterPolicyClusterConfig[];
    /**
     * UUID of the network policy linked to this cluster policy
     */
    networkPolicyId: string;
    /**
     * Type of cluster
     */
    type: string;
}

export interface GetProjectAttestationPolicyClusterPolicyClusterConfig {
    minNodesRequired?: number;
}

export interface GetProjectAttestationPolicyEdgeviewPolicy {
    /**
     * Allow inherit instance to change access policy
     */
    accessAllowChange?: boolean;
    /**
     * Allow device to enable Edgeview in this project
     */
    edgeviewAllow?: boolean;
    /**
     * Edgeview configuration and policies
     */
    edgeviewcfgs?: outputs.GetProjectAttestationPolicyEdgeviewPolicyEdgeviewcfg[];
    /**
     * Maximum seconds allowed for Edgeview session
     */
    maxExpireSec?: number;
    /**
     * Maximum instances allowed for Edgeview
     */
    maxInst?: number;
}

export interface GetProjectAttestationPolicyEdgeviewPolicyEdgeviewcfg {
    appPolicies?: outputs.GetProjectAttestationPolicyEdgeviewPolicyEdgeviewcfgAppPolicy[];
    devPolicies?: outputs.GetProjectAttestationPolicyEdgeviewPolicyEdgeviewcfgDevPolicy[];
    extPolicies?: outputs.GetProjectAttestationPolicyEdgeviewPolicyEdgeviewcfgExtPolicy[];
    generationId?: number;
    jwtInfos?: outputs.GetProjectAttestationPolicyEdgeviewPolicyEdgeviewcfgJwtInfo[];
    token?: string;
}

export interface GetProjectAttestationPolicyEdgeviewPolicyEdgeviewcfgAppPolicy {
    allowApp?: boolean;
}

export interface GetProjectAttestationPolicyEdgeviewPolicyEdgeviewcfgDevPolicy {
    allowDev?: boolean;
}

export interface GetProjectAttestationPolicyEdgeviewPolicyEdgeviewcfgExtPolicy {
    allowExt?: boolean;
}

export interface GetProjectAttestationPolicyEdgeviewPolicyEdgeviewcfgJwtInfo {
    allowSec?: number;
    dispUrl?: string;
    encrypt?: boolean;
    expireSec: string;
    numInst?: number;
}

export interface GetProjectAttestationPolicyLocalOperatorConsolePolicy {
    /**
     * unique policy id
     */
    id: string;
    /**
     * Local operator console URL
     */
    locUrl: string;
}

export interface GetProjectAttestationPolicyModulePolicy {
    /**
     * list of app details that will be provisioned on all the devices of the project to which this policy is attached
     */
    apps: outputs.GetProjectAttestationPolicyModulePolicyApp[];
    /**
     * app that describes the azure edge agent to be deployed on the Azure runtime
     */
    azureEdgeAgents?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeAgent[];
    /**
     * app that describes the azure edge hub to be deployed on the Azure runtime
     */
    azureEdgeHubs?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeHub[];
    /**
     * etag for deployment
     */
    etag?: string;
    /**
     * unique id for deployment
     */
    id: string;
    /**
     * Mapping of label variable keys and value
     */
    labels?: {[key: string]: string};
    /**
     * custom metrics for deployment
     */
    metrics?: outputs.GetProjectAttestationPolicyModulePolicyMetric[];
    /**
     * deployment priority of module manifest
     */
    priority: number;
    /**
     * Mapping of routes variable keys and value
     */
    routes?: {[key: string]: string};
    /**
     * target condition for deployment that matches single device or group of devices
     */
    targetCondition?: string;
    /**
     * target condition for deployment that matches single device or group of devices
     */
    targetConditionNew?: {[key: string]: string};
}

export interface GetProjectAttestationPolicyModulePolicyApp {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.GetProjectAttestationPolicyModulePolicyAppInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.GetProjectAttestationPolicyModulePolicyAppManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.GetProjectAttestationPolicyModulePolicyAppParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface GetProjectAttestationPolicyModulePolicyAppInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.GetProjectAttestationPolicyModulePolicyAppInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.GetProjectAttestationPolicyModulePolicyAppInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.GetProjectAttestationPolicyModulePolicyAppInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface GetProjectAttestationPolicyModulePolicyAppInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.GetProjectAttestationPolicyModulePolicyAppInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.GetProjectAttestationPolicyModulePolicyAppInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAppInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.GetProjectAttestationPolicyModulePolicyAppInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface GetProjectAttestationPolicyModulePolicyAppInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface GetProjectAttestationPolicyModulePolicyAppInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAppInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.GetProjectAttestationPolicyModulePolicyAppInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface GetProjectAttestationPolicyModulePolicyAppInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface GetProjectAttestationPolicyModulePolicyAppInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAppManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.GetProjectAttestationPolicyModulePolicyAppManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.GetProjectAttestationPolicyModulePolicyAppManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.GetProjectAttestationPolicyModulePolicyAppManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.GetProjectAttestationPolicyModulePolicyAppManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.GetProjectAttestationPolicyModulePolicyAppManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.GetProjectAttestationPolicyModulePolicyAppManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.GetProjectAttestationPolicyModulePolicyAppManifestJsonOwner[];
    permissions?: outputs.GetProjectAttestationPolicyModulePolicyAppManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.GetProjectAttestationPolicyModulePolicyAppManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAppManifestJsonConfiguration {
    customConfigs?: outputs.GetProjectAttestationPolicyModulePolicyAppManifestJsonConfigurationCustomConfig[];
}

export interface GetProjectAttestationPolicyModulePolicyAppManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.GetProjectAttestationPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface GetProjectAttestationPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.GetProjectAttestationPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.GetProjectAttestationPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface GetProjectAttestationPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.GetProjectAttestationPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAppManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAppManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAppManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.GetProjectAttestationPolicyModulePolicyAppManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAppManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAppManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.GetProjectAttestationPolicyModulePolicyAppManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAppManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.GetProjectAttestationPolicyModulePolicyAppManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.GetProjectAttestationPolicyModulePolicyAppManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAppManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.GetProjectAttestationPolicyModulePolicyAppManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.GetProjectAttestationPolicyModulePolicyAppManifestJsonInterfaceAclActionPortmapto[];
}

export interface GetProjectAttestationPolicyModulePolicyAppManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAppManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface GetProjectAttestationPolicyModulePolicyAppManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAppManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAppManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAppManifestJsonPermission {
}

export interface GetProjectAttestationPolicyModulePolicyAppManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAppParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeAgent {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeAgentInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeAgentParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeAgentInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeAgentInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeAgentInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeAgentInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeAgentInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeAgentInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeAgentInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeAgentInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeAgentInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeAgentInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeAgentInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeAgentInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeAgentInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeAgentInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeAgentInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonOwner[];
    permissions?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonConfiguration {
    customConfigs?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfig[];
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionPortmapto[];
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonPermission {
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeAgentParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeHub {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeHubInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeHubParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeHubInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeHubInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeHubInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeHubInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeHubInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeHubInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeHubInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeHubInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeHubInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeHubInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeHubInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeHubInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeHubInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeHubInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeHubInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonOwner[];
    permissions?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonConfiguration {
    customConfigs?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfig[];
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionPortmapto[];
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonPermission {
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface GetProjectAttestationPolicyModulePolicyAzureEdgeHubParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface GetProjectAttestationPolicyModulePolicyMetric {
    /**
     * Mapping of queries variable keys and value
     */
    queries?: {[key: string]: string};
    /**
     * Mapping of results variable keys and value
     */
    results?: {[key: string]: string};
}

export interface GetProjectAttestationPolicyNetworkPolicy {
    /**
     * list of network details that will be created on all the devices of the project to which this policy is attached
     */
    netInstanceConfigs: outputs.GetProjectAttestationPolicyNetworkPolicyNetInstanceConfig[];
}

export interface GetProjectAttestationPolicyNetworkPolicyNetInstanceConfig {
    /**
     * ID of the Cluster in which the network instance is configured
     */
    clusterId?: string;
    /**
     * Detailed description of the network instance
     */
    description?: string;
    /**
     * Flag to indicate if this is the default network instance for the device
     */
    deviceDefault?: boolean;
    /**
     * ID of the device on which network instance is created
     */
    deviceId: string;
    /**
     * Deprecated
     */
    dhcp?: boolean;
    /**
     * List of Static DNS entries
     */
    dnsLists?: outputs.GetProjectAttestationPolicyNetworkPolicyNetInstanceConfigDnsList[];
    /**
     * System defined universally unique ID of the network instance
     */
    id: string;
    /**
     * DHCP Server Configuration
     */
    ips?: outputs.GetProjectAttestationPolicyNetworkPolicyNetInstanceConfigIp[];
    /**
     * Kind of Network Instance:
     * NETWORK_INSTANCE_KIND_UNSPECIFIED
     * NETWORK_INSTANCE_KIND_TRANSPARENT
     * NETWORK_INSTANCE_KIND_SWITCH
     * NETWORK_INSTANCE_KIND_LOCAL
     * NETWORK_INSTANCE_KIND_CLOUD
     * NETWORK_INSTANCE_KIND_MESH
     * NETWORK_INSTANCE_KIND_HONEYPOT
     */
    kind: string;
    /**
     * Lisp Config : read only for now. Deprecated.
     */
    lisps: outputs.GetProjectAttestationPolicyNetworkPolicyNetInstanceConfigLisp[];
    /**
     * User defined name of the network instance, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * id of the network policy to be attached to this network instance
     */
    networkPolicyId?: string;
    oconfig?: string;
    /**
     * Service specific Config
     */
    opaques?: outputs.GetProjectAttestationPolicyNetworkPolicyNetInstanceConfigOpaque[];
    /**
     * name of port mapping in the model
     */
    port?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    portTags?: {[key: string]: string};
    /**
     * id of the project in which network instance is created
     */
    projectId: string;
    /**
     * system defined info for the object
     */
    revisions: outputs.GetProjectAttestationPolicyNetworkPolicyNetInstanceConfigRevision[];
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the network instance. Title can be changed at any time
     */
    title: string;
    /**
     * Type of DHCP for this Network Instance:
     * NETWORK_INSTANCE_DHCP_TYPE_V4
     * NETWORK_INSTANCE_DHCP_TYPE_V6
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOEID
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOV4
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOV6
     */
    type: string;
}

export interface GetProjectAttestationPolicyNetworkPolicyNetInstanceConfigDnsList {
    /**
     * Addresses
     */
    addrs?: string[];
    /**
     * Host name
     */
    hostname?: string;
}

export interface GetProjectAttestationPolicyNetworkPolicyNetInstanceConfigIp {
    /**
     * Range of IP addresses to be used for DHCP
     */
    dhcpRanges?: outputs.GetProjectAttestationPolicyNetworkPolicyNetInstanceConfigIpDhcpRange[];
    /**
     * IP Addresses of DNS servers
     */
    dns?: string[];
    /**
     * Network domain
     */
    domain?: string;
    /**
     * IP Address of Network Gateway
     */
    gateway?: string;
    /**
     * Subnet Mask
     */
    mask?: string;
    /**
     * IP Address of NTP Server
     */
    ntp?: string;
    /**
     * Subnet address
     */
    subnet: string;
}

export interface GetProjectAttestationPolicyNetworkPolicyNetInstanceConfigIpDhcpRange {
    /**
     * ending IP
     */
    end?: string;
    /**
     * starting IP
     */
    start?: string;
}

export interface GetProjectAttestationPolicyNetworkPolicyNetInstanceConfigLisp {
    allocate: boolean;
    allocationprefix: string;
    allocationprefixlen: number;
    exportprivate: boolean;
    lispiid: number;
    sps: outputs.GetProjectAttestationPolicyNetworkPolicyNetInstanceConfigLispSp[];
}

export interface GetProjectAttestationPolicyNetworkPolicyNetInstanceConfigLispSp {
    credential: string;
    nameOrIp: string;
    type: string;
}

export interface GetProjectAttestationPolicyNetworkPolicyNetInstanceConfigOpaque {
    /**
     * Deprecated - Lisp config
     */
    lisps?: outputs.GetProjectAttestationPolicyNetworkPolicyNetInstanceConfigOpaqueLisp[];
    /**
     * base64 encoded string of opaque config
     */
    oconfig?: string;
    /**
     * type of Opaque config
     */
    type?: string;
}

export interface GetProjectAttestationPolicyNetworkPolicyNetInstanceConfigOpaqueLisp {
    /**
     * Allocate flag
     */
    allocate?: boolean;
    /**
     * Allocation Prefix
     */
    allocationprefix?: string;
    /**
     * Allocation Prefix Length
     */
    allocationprefixlen?: number;
    /**
     * Export Private flag
     */
    exportprivate?: boolean;
    /**
     * lisp id
     */
    lispiid?: number;
    /**
     * Service Point List
     */
    sps?: outputs.GetProjectAttestationPolicyNetworkPolicyNetInstanceConfigOpaqueLispSp[];
}

export interface GetProjectAttestationPolicyNetworkPolicyNetInstanceConfigOpaqueLispSp {
    /**
     * Service credentials
     */
    credential?: string;
    /**
     * Service name/ service name
     */
    nameOrIp?: string;
    /**
     * Service Point Type
     */
    type?: string;
}

export interface GetProjectAttestationPolicyNetworkPolicyNetInstanceConfigRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface GetProjectAttestationPolicyRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface GetProjectCloudPolicy {
    appPolicies: outputs.GetProjectCloudPolicyAppPolicy[];
    attestationPolicies: outputs.GetProjectCloudPolicyAttestationPolicy[];
    attr: {[key: string]: string};
    azurePolicies: outputs.GetProjectCloudPolicyAzurePolicy[];
    clusterPolicies: outputs.GetProjectCloudPolicyClusterPolicy[];
    description: string;
    edgeviewPolicies: outputs.GetProjectCloudPolicyEdgeviewPolicy[];
    id: string;
    localOperatorConsolePolicies: outputs.GetProjectCloudPolicyLocalOperatorConsolePolicy[];
    modulePolicies: outputs.GetProjectCloudPolicyModulePolicy[];
    name: string;
    networkPolicies: outputs.GetProjectCloudPolicyNetworkPolicy[];
    revisions: outputs.GetProjectCloudPolicyRevision[];
    status: string;
    statusMessage: string;
    title: string;
    type: string;
}

export interface GetProjectCloudPolicyAppPolicy {
    apps: outputs.GetProjectCloudPolicyAppPolicyApp[];
}

export interface GetProjectCloudPolicyAppPolicyApp {
    appId: string;
    appVersion: string;
    cpus: number;
    description: string;
    drives: number;
    id: string;
    interfaces: outputs.GetProjectCloudPolicyAppPolicyAppInterface[];
    manifestJsons: outputs.GetProjectCloudPolicyAppPolicyAppManifestJson[];
    memory: number;
    name: string;
    nameAppPart: string;
    nameProjectPart: string;
    namingScheme: string;
    networks: number;
    originType: string;
    parentDetails: outputs.GetProjectCloudPolicyAppPolicyAppParentDetail[];
    startDelayInSeconds: number;
    storage: number;
    tags: {[key: string]: string};
    title: string;
}

export interface GetProjectCloudPolicyAppPolicyAppInterface {
    accessVlanId: number;
    acls: outputs.GetProjectCloudPolicyAppPolicyAppInterfaceAcl[];
    defaultNetInstance: boolean;
    directattach: boolean;
    eidregisters: outputs.GetProjectCloudPolicyAppPolicyAppInterfaceEidregister[];
    intfname: string;
    intforder: number;
    ios: outputs.GetProjectCloudPolicyAppPolicyAppInterfaceIo[];
    ipaddr: string;
    macaddr: string;
    netinstid: string;
    netinstname: string;
    netinsttag: {[key: string]: string};
    netname: string;
    privateip: boolean;
}

export interface GetProjectCloudPolicyAppPolicyAppInterfaceAcl {
    actions: outputs.GetProjectCloudPolicyAppPolicyAppInterfaceAclAction[];
    id: number;
    matches: outputs.GetProjectCloudPolicyAppPolicyAppInterfaceAclMatch[];
    name: string;
}

export interface GetProjectCloudPolicyAppPolicyAppInterfaceAclAction {
    drop: boolean;
    limit: boolean;
    limitburst: number;
    limitrate: number;
    limitunit: string;
    mapparams: outputs.GetProjectCloudPolicyAppPolicyAppInterfaceAclActionMapparam[];
    portmap: boolean;
}

export interface GetProjectCloudPolicyAppPolicyAppInterfaceAclActionMapparam {
    port: number;
}

export interface GetProjectCloudPolicyAppPolicyAppInterfaceAclMatch {
    type: string;
    value: string;
}

export interface GetProjectCloudPolicyAppPolicyAppInterfaceEidregister {
    appCert: string;
    appPrivateKey: string;
    appPublicKey: string;
    displayName: string;
    eId: string;
    eIdHashLen: number;
    lispInstance: number;
    lispMapServers: outputs.GetProjectCloudPolicyAppPolicyAppInterfaceEidregisterLispMapServer[];
    lispSignature: string;
    uuid: string;
}

export interface GetProjectCloudPolicyAppPolicyAppInterfaceEidregisterLispMapServer {
    credential: string;
    nameOrIp: string;
}

export interface GetProjectCloudPolicyAppPolicyAppInterfaceIo {
    name: string;
    tags: {[key: string]: string};
    type: string;
}

export interface GetProjectCloudPolicyAppPolicyAppManifestJson {
    acKind: string;
    acVersion: string;
    appType: string;
    configurations: outputs.GetProjectCloudPolicyAppPolicyAppManifestJsonConfiguration[];
    containerDetails: outputs.GetProjectCloudPolicyAppPolicyAppManifestJsonContainerDetail[];
    cpuPinningEnabled: boolean;
    deploymentType: string;
    description: string;
    descs: outputs.GetProjectCloudPolicyAppPolicyAppManifestJsonDesc[];
    displayName: string;
    enablevnc: boolean;
    images: outputs.GetProjectCloudPolicyAppPolicyAppManifestJsonImage[];
    interfaces: outputs.GetProjectCloudPolicyAppPolicyAppManifestJsonInterface[];
    modules: outputs.GetProjectCloudPolicyAppPolicyAppManifestJsonModule[];
    name: string;
    owners: outputs.GetProjectCloudPolicyAppPolicyAppManifestJsonOwner[];
    permissions: outputs.GetProjectCloudPolicyAppPolicyAppManifestJsonPermission[];
    resources: outputs.GetProjectCloudPolicyAppPolicyAppManifestJsonResource[];
    vmmode: string;
}

export interface GetProjectCloudPolicyAppPolicyAppManifestJsonConfiguration {
    customConfigs: outputs.GetProjectCloudPolicyAppPolicyAppManifestJsonConfigurationCustomConfig[];
}

export interface GetProjectCloudPolicyAppPolicyAppManifestJsonConfigurationCustomConfig {
    add: boolean;
    allowStorageResize: boolean;
    fieldDelimiter: string;
    name: string;
    override: boolean;
    template: string;
    variableGroups: outputs.GetProjectCloudPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface GetProjectCloudPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroup {
    conditions: outputs.GetProjectCloudPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    name: string;
    required: boolean;
    variables: outputs.GetProjectCloudPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface GetProjectCloudPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name: string;
    operator: string;
    value: string;
}

export interface GetProjectCloudPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable {
    default: string;
    encode: string;
    format: string;
    label: string;
    maxLength: string;
    name: string;
    options: outputs.GetProjectCloudPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput: string;
    required: boolean;
    type: string;
    value: string;
}

export interface GetProjectCloudPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    label: string;
    value: string;
}

export interface GetProjectCloudPolicyAppPolicyAppManifestJsonContainerDetail {
    containerCreateOption: string;
}

export interface GetProjectCloudPolicyAppPolicyAppManifestJsonDesc {
    agreementList: {[key: string]: string};
    appCategory: string;
    category: string;
    licenseList: {[key: string]: string};
    logo: {[key: string]: string};
    os: string;
    screenshotList: {[key: string]: string};
    support: string;
}

export interface GetProjectCloudPolicyAppPolicyAppManifestJsonImage {
    cleartext: boolean;
    drvtype: string;
    ignorepurge: boolean;
    imageformat: string;
    imageid: string;
    imagename: string;
    maxsize: string;
    mountpath: string;
    params: outputs.GetProjectCloudPolicyAppPolicyAppManifestJsonImageParam[];
    preserve: boolean;
    readonly: boolean;
    target: string;
    volumelabel: string;
}

export interface GetProjectCloudPolicyAppPolicyAppManifestJsonImageParam {
    name: string;
    value: string;
}

export interface GetProjectCloudPolicyAppPolicyAppManifestJsonInterface {
    acls: outputs.GetProjectCloudPolicyAppPolicyAppManifestJsonInterfaceAcl[];
    directattach: boolean;
    name: string;
    optional: boolean;
    privateip: boolean;
    type: string;
}

export interface GetProjectCloudPolicyAppPolicyAppManifestJsonInterfaceAcl {
    actions: outputs.GetProjectCloudPolicyAppPolicyAppManifestJsonInterfaceAclAction[];
    matches: outputs.GetProjectCloudPolicyAppPolicyAppManifestJsonInterfaceAclMatch[];
    name: string;
}

export interface GetProjectCloudPolicyAppPolicyAppManifestJsonInterfaceAclAction {
    drop: boolean;
    limit: boolean;
    limitValues: outputs.GetProjectCloudPolicyAppPolicyAppManifestJsonInterfaceAclActionLimitValue[];
    limitburst: number;
    limitrate: number;
    limitunit: string;
    portmap: boolean;
    portmaptos: outputs.GetProjectCloudPolicyAppPolicyAppManifestJsonInterfaceAclActionPortmapto[];
}

export interface GetProjectCloudPolicyAppPolicyAppManifestJsonInterfaceAclActionLimitValue {
    limitburst: number;
    limitrate: number;
    limitunit: string;
}

export interface GetProjectCloudPolicyAppPolicyAppManifestJsonInterfaceAclActionPortmapto {
    appPort: number;
}

export interface GetProjectCloudPolicyAppPolicyAppManifestJsonInterfaceAclMatch {
    type: string;
    value: string;
}

export interface GetProjectCloudPolicyAppPolicyAppManifestJsonModule {
    environment: {[key: string]: string};
    moduleType: string;
    routes: {[key: string]: string};
    twinDetail: string;
}

export interface GetProjectCloudPolicyAppPolicyAppManifestJsonOwner {
    company: string;
    email: string;
    group: string;
    user: string;
    website: string;
}

export interface GetProjectCloudPolicyAppPolicyAppManifestJsonPermission {
}

export interface GetProjectCloudPolicyAppPolicyAppManifestJsonResource {
    name: string;
    value: string;
}

export interface GetProjectCloudPolicyAppPolicyAppParentDetail {
    idOfParentObject: string;
    referenceExists: boolean;
    updateAvailable: boolean;
    versionOfParentObject: number;
}

export interface GetProjectCloudPolicyAttestationPolicy {
    id: string;
    type: string;
}

export interface GetProjectCloudPolicyAzurePolicy {
    appId: string;
    appPassword: string;
    azureResourceAndServices: outputs.GetProjectCloudPolicyAzurePolicyAzureResourceAndService[];
    certificates: outputs.GetProjectCloudPolicyAzurePolicyCertificate[];
    cryptoKey: string;
    customDeploymentManaged: boolean;
    encryptedSecrets: {[key: string]: string};
    tenantId: string;
}

export interface GetProjectCloudPolicyAzurePolicyAzureResourceAndService {
    dpsServices: outputs.GetProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsService[];
    iotHubServices: outputs.GetProjectCloudPolicyAzurePolicyAzureResourceAndServiceIotHubService[];
    resourceGroups: outputs.GetProjectCloudPolicyAzurePolicyAzureResourceAndServiceResourceGroup[];
}

export interface GetProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsService {
    enrollments: outputs.GetProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollment[];
    serviceDetails: outputs.GetProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetail[];
}

export interface GetProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollment {
    allocationPolicy: string;
    attachedIotHubsNames: string[];
    certificateEnrollments: outputs.GetProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollment[];
    enableIotEdgeDevice: boolean;
    mechanism: string;
    symmetricKeyEnrollments: outputs.GetProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollment[];
    tags: {[key: string]: string};
    tpmEnrollments: outputs.GetProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentTpmEnrollment[];
}

export interface GetProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollment {
    groupCertificateEnrollments: outputs.GetProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollmentGroupCertificateEnrollment[];
    individualCertificateEnrollment: string;
    type: string;
}

export interface GetProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollmentGroupCertificateEnrollment {
    groupName: string;
}

export interface GetProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollment {
    groupSymmetricKeyEnrollments: outputs.GetProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentGroupSymmetricKeyEnrollment[];
    individualSymmetricKeyEnrollments: outputs.GetProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentIndividualSymmetricKeyEnrollment[];
    type: string;
}

export interface GetProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentGroupSymmetricKeyEnrollment {
    groupName: string;
}

export interface GetProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentIndividualSymmetricKeyEnrollment {
    registrationId: string;
}

export interface GetProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentTpmEnrollment {
    type: string;
}

export interface GetProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetail {
    createByDefault: boolean;
    name: string;
    region: string;
    resourceGroupName: string;
    sKUs: outputs.GetProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetailSKU[];
    subscriptionId: string;
}

export interface GetProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetailSKU {
    capacity: string;
    name: string;
    tier: string;
}

export interface GetProjectCloudPolicyAzurePolicyAzureResourceAndServiceIotHubService {
    serviceDetails: outputs.GetProjectCloudPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetail[];
}

export interface GetProjectCloudPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetail {
    createByDefault: boolean;
    name: string;
    region: string;
    resourceGroupName: string;
    sKUs: outputs.GetProjectCloudPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetailSKU[];
    subscriptionId: string;
}

export interface GetProjectCloudPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetailSKU {
    capacity: string;
    name: string;
    tier: string;
}

export interface GetProjectCloudPolicyAzurePolicyAzureResourceAndServiceResourceGroup {
    name: string;
    region: string;
    subscriptionId: string;
}

export interface GetProjectCloudPolicyAzurePolicyCertificate {
    basicContraintsValid: boolean;
    cert: string;
    cryptoKey: string;
    ecdsaEncryptions: outputs.GetProjectCloudPolicyAzurePolicyCertificateEcdsaEncryption[];
    encryptedSecrets: {[key: string]: string};
    exportable: boolean;
    extendedKeyUsages: string[];
    issuers: outputs.GetProjectCloudPolicyAzurePolicyCertificateIssuer[];
    keyUsage: number;
    passPhrase: string;
    publicKey: string;
    publicKeyAlgorithm: string;
    pvtKey: string;
    reuseKey: boolean;
    rsaEcryptions: outputs.GetProjectCloudPolicyAzurePolicyCertificateRsaEcryption[];
    sanValues: outputs.GetProjectCloudPolicyAzurePolicyCertificateSanValue[];
    serialNumber: string;
    signatureAlgorithm: string;
    subjects: outputs.GetProjectCloudPolicyAzurePolicyCertificateSubject[];
    validFrom: string;
    validTill: string;
}

export interface GetProjectCloudPolicyAzurePolicyCertificateEcdsaEncryption {
    curve: string;
}

export interface GetProjectCloudPolicyAzurePolicyCertificateIssuer {
    commonName: string;
    countries: string[];
    localities: string[];
    organizationalUnits: string[];
    organizations: string[];
    postalCodes: string[];
    provinces: string[];
    serialNumber: string;
}

export interface GetProjectCloudPolicyAzurePolicyCertificateRsaEcryption {
    rsaBits: string;
}

export interface GetProjectCloudPolicyAzurePolicyCertificateSanValue {
    dns: string[];
    emaildIds: string[];
    hosts: string[];
    ips: string[];
    upns: string[];
    uris: string[];
}

export interface GetProjectCloudPolicyAzurePolicyCertificateSubject {
    commonName: string;
    countries: string[];
    localities: string[];
    organizationalUnits: string[];
    organizations: string[];
    postalCodes: string[];
    provinces: string[];
    serialNumber: string;
}

export interface GetProjectCloudPolicyClusterPolicy {
    appPolicyId: string;
    clusterConfigs: outputs.GetProjectCloudPolicyClusterPolicyClusterConfig[];
    networkPolicyId: string;
    type: string;
}

export interface GetProjectCloudPolicyClusterPolicyClusterConfig {
    minNodesRequired: number;
}

export interface GetProjectCloudPolicyEdgeviewPolicy {
    accessAllowChange: boolean;
    edgeviewAllow: boolean;
    edgeviewcfgs: outputs.GetProjectCloudPolicyEdgeviewPolicyEdgeviewcfg[];
    maxExpireSec: number;
    maxInst: number;
}

export interface GetProjectCloudPolicyEdgeviewPolicyEdgeviewcfg {
    appPolicies: outputs.GetProjectCloudPolicyEdgeviewPolicyEdgeviewcfgAppPolicy[];
    devPolicies: outputs.GetProjectCloudPolicyEdgeviewPolicyEdgeviewcfgDevPolicy[];
    extPolicies: outputs.GetProjectCloudPolicyEdgeviewPolicyEdgeviewcfgExtPolicy[];
    generationId: number;
    jwtInfos: outputs.GetProjectCloudPolicyEdgeviewPolicyEdgeviewcfgJwtInfo[];
    token: string;
}

export interface GetProjectCloudPolicyEdgeviewPolicyEdgeviewcfgAppPolicy {
    allowApp: boolean;
}

export interface GetProjectCloudPolicyEdgeviewPolicyEdgeviewcfgDevPolicy {
    allowDev: boolean;
}

export interface GetProjectCloudPolicyEdgeviewPolicyEdgeviewcfgExtPolicy {
    allowExt: boolean;
}

export interface GetProjectCloudPolicyEdgeviewPolicyEdgeviewcfgJwtInfo {
    allowSec: number;
    dispUrl: string;
    encrypt: boolean;
    expireSec: string;
    numInst: number;
}

export interface GetProjectCloudPolicyLocalOperatorConsolePolicy {
    id: string;
    locUrl: string;
}

export interface GetProjectCloudPolicyModulePolicy {
    apps: outputs.GetProjectCloudPolicyModulePolicyApp[];
    azureEdgeAgents: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeAgent[];
    azureEdgeHubs: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeHub[];
    etag: string;
    id: string;
    labels: {[key: string]: string};
    metrics: outputs.GetProjectCloudPolicyModulePolicyMetric[];
    priority: number;
    routes: {[key: string]: string};
    targetCondition: string;
    targetConditionNew: {[key: string]: string};
}

export interface GetProjectCloudPolicyModulePolicyApp {
    appId: string;
    appVersion: string;
    cpus: number;
    description: string;
    drives: number;
    id: string;
    interfaces: outputs.GetProjectCloudPolicyModulePolicyAppInterface[];
    manifestJsons: outputs.GetProjectCloudPolicyModulePolicyAppManifestJson[];
    memory: number;
    name: string;
    nameAppPart: string;
    nameProjectPart: string;
    namingScheme: string;
    networks: number;
    originType: string;
    parentDetails: outputs.GetProjectCloudPolicyModulePolicyAppParentDetail[];
    startDelayInSeconds: number;
    storage: number;
    tags: {[key: string]: string};
    title: string;
}

export interface GetProjectCloudPolicyModulePolicyAppInterface {
    accessVlanId: number;
    acls: outputs.GetProjectCloudPolicyModulePolicyAppInterfaceAcl[];
    defaultNetInstance: boolean;
    directattach: boolean;
    eidregisters: outputs.GetProjectCloudPolicyModulePolicyAppInterfaceEidregister[];
    intfname: string;
    intforder: number;
    ios: outputs.GetProjectCloudPolicyModulePolicyAppInterfaceIo[];
    ipaddr: string;
    macaddr: string;
    netinstid: string;
    netinstname: string;
    netinsttag: {[key: string]: string};
    netname: string;
    privateip: boolean;
}

export interface GetProjectCloudPolicyModulePolicyAppInterfaceAcl {
    actions: outputs.GetProjectCloudPolicyModulePolicyAppInterfaceAclAction[];
    id: number;
    matches: outputs.GetProjectCloudPolicyModulePolicyAppInterfaceAclMatch[];
    name: string;
}

export interface GetProjectCloudPolicyModulePolicyAppInterfaceAclAction {
    drop: boolean;
    limit: boolean;
    limitburst: number;
    limitrate: number;
    limitunit: string;
    mapparams: outputs.GetProjectCloudPolicyModulePolicyAppInterfaceAclActionMapparam[];
    portmap: boolean;
}

export interface GetProjectCloudPolicyModulePolicyAppInterfaceAclActionMapparam {
    port: number;
}

export interface GetProjectCloudPolicyModulePolicyAppInterfaceAclMatch {
    type: string;
    value: string;
}

export interface GetProjectCloudPolicyModulePolicyAppInterfaceEidregister {
    appCert: string;
    appPrivateKey: string;
    appPublicKey: string;
    displayName: string;
    eId: string;
    eIdHashLen: number;
    lispInstance: number;
    lispMapServers: outputs.GetProjectCloudPolicyModulePolicyAppInterfaceEidregisterLispMapServer[];
    lispSignature: string;
    uuid: string;
}

export interface GetProjectCloudPolicyModulePolicyAppInterfaceEidregisterLispMapServer {
    credential: string;
    nameOrIp: string;
}

export interface GetProjectCloudPolicyModulePolicyAppInterfaceIo {
    name: string;
    tags: {[key: string]: string};
    type: string;
}

export interface GetProjectCloudPolicyModulePolicyAppManifestJson {
    acKind: string;
    acVersion: string;
    appType: string;
    configurations: outputs.GetProjectCloudPolicyModulePolicyAppManifestJsonConfiguration[];
    containerDetails: outputs.GetProjectCloudPolicyModulePolicyAppManifestJsonContainerDetail[];
    cpuPinningEnabled: boolean;
    deploymentType: string;
    description: string;
    descs: outputs.GetProjectCloudPolicyModulePolicyAppManifestJsonDesc[];
    displayName: string;
    enablevnc: boolean;
    images: outputs.GetProjectCloudPolicyModulePolicyAppManifestJsonImage[];
    interfaces: outputs.GetProjectCloudPolicyModulePolicyAppManifestJsonInterface[];
    modules: outputs.GetProjectCloudPolicyModulePolicyAppManifestJsonModule[];
    name: string;
    owners: outputs.GetProjectCloudPolicyModulePolicyAppManifestJsonOwner[];
    permissions: outputs.GetProjectCloudPolicyModulePolicyAppManifestJsonPermission[];
    resources: outputs.GetProjectCloudPolicyModulePolicyAppManifestJsonResource[];
    vmmode: string;
}

export interface GetProjectCloudPolicyModulePolicyAppManifestJsonConfiguration {
    customConfigs: outputs.GetProjectCloudPolicyModulePolicyAppManifestJsonConfigurationCustomConfig[];
}

export interface GetProjectCloudPolicyModulePolicyAppManifestJsonConfigurationCustomConfig {
    add: boolean;
    allowStorageResize: boolean;
    fieldDelimiter: string;
    name: string;
    override: boolean;
    template: string;
    variableGroups: outputs.GetProjectCloudPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface GetProjectCloudPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroup {
    conditions: outputs.GetProjectCloudPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    name: string;
    required: boolean;
    variables: outputs.GetProjectCloudPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface GetProjectCloudPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name: string;
    operator: string;
    value: string;
}

export interface GetProjectCloudPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable {
    default: string;
    encode: string;
    format: string;
    label: string;
    maxLength: string;
    name: string;
    options: outputs.GetProjectCloudPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput: string;
    required: boolean;
    type: string;
    value: string;
}

export interface GetProjectCloudPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    label: string;
    value: string;
}

export interface GetProjectCloudPolicyModulePolicyAppManifestJsonContainerDetail {
    containerCreateOption: string;
}

export interface GetProjectCloudPolicyModulePolicyAppManifestJsonDesc {
    agreementList: {[key: string]: string};
    appCategory: string;
    category: string;
    licenseList: {[key: string]: string};
    logo: {[key: string]: string};
    os: string;
    screenshotList: {[key: string]: string};
    support: string;
}

export interface GetProjectCloudPolicyModulePolicyAppManifestJsonImage {
    cleartext: boolean;
    drvtype: string;
    ignorepurge: boolean;
    imageformat: string;
    imageid: string;
    imagename: string;
    maxsize: string;
    mountpath: string;
    params: outputs.GetProjectCloudPolicyModulePolicyAppManifestJsonImageParam[];
    preserve: boolean;
    readonly: boolean;
    target: string;
    volumelabel: string;
}

export interface GetProjectCloudPolicyModulePolicyAppManifestJsonImageParam {
    name: string;
    value: string;
}

export interface GetProjectCloudPolicyModulePolicyAppManifestJsonInterface {
    acls: outputs.GetProjectCloudPolicyModulePolicyAppManifestJsonInterfaceAcl[];
    directattach: boolean;
    name: string;
    optional: boolean;
    privateip: boolean;
    type: string;
}

export interface GetProjectCloudPolicyModulePolicyAppManifestJsonInterfaceAcl {
    actions: outputs.GetProjectCloudPolicyModulePolicyAppManifestJsonInterfaceAclAction[];
    matches: outputs.GetProjectCloudPolicyModulePolicyAppManifestJsonInterfaceAclMatch[];
    name: string;
}

export interface GetProjectCloudPolicyModulePolicyAppManifestJsonInterfaceAclAction {
    drop: boolean;
    limit: boolean;
    limitValues: outputs.GetProjectCloudPolicyModulePolicyAppManifestJsonInterfaceAclActionLimitValue[];
    limitburst: number;
    limitrate: number;
    limitunit: string;
    portmap: boolean;
    portmaptos: outputs.GetProjectCloudPolicyModulePolicyAppManifestJsonInterfaceAclActionPortmapto[];
}

export interface GetProjectCloudPolicyModulePolicyAppManifestJsonInterfaceAclActionLimitValue {
    limitburst: number;
    limitrate: number;
    limitunit: string;
}

export interface GetProjectCloudPolicyModulePolicyAppManifestJsonInterfaceAclActionPortmapto {
    appPort: number;
}

export interface GetProjectCloudPolicyModulePolicyAppManifestJsonInterfaceAclMatch {
    type: string;
    value: string;
}

export interface GetProjectCloudPolicyModulePolicyAppManifestJsonModule {
    environment: {[key: string]: string};
    moduleType: string;
    routes: {[key: string]: string};
    twinDetail: string;
}

export interface GetProjectCloudPolicyModulePolicyAppManifestJsonOwner {
    company: string;
    email: string;
    group: string;
    user: string;
    website: string;
}

export interface GetProjectCloudPolicyModulePolicyAppManifestJsonPermission {
}

export interface GetProjectCloudPolicyModulePolicyAppManifestJsonResource {
    name: string;
    value: string;
}

export interface GetProjectCloudPolicyModulePolicyAppParentDetail {
    idOfParentObject: string;
    referenceExists: boolean;
    updateAvailable: boolean;
    versionOfParentObject: number;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeAgent {
    appId: string;
    appVersion: string;
    cpus: number;
    description: string;
    drives: number;
    id: string;
    interfaces: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeAgentInterface[];
    manifestJsons: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJson[];
    memory: number;
    name: string;
    nameAppPart: string;
    nameProjectPart: string;
    namingScheme: string;
    networks: number;
    originType: string;
    parentDetails: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeAgentParentDetail[];
    startDelayInSeconds: number;
    storage: number;
    tags: {[key: string]: string};
    title: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeAgentInterface {
    accessVlanId: number;
    acls: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeAgentInterfaceAcl[];
    defaultNetInstance: boolean;
    directattach: boolean;
    eidregisters: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeAgentInterfaceEidregister[];
    intfname: string;
    intforder: number;
    ios: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeAgentInterfaceIo[];
    ipaddr: string;
    macaddr: string;
    netinstid: string;
    netinstname: string;
    netinsttag: {[key: string]: string};
    netname: string;
    privateip: boolean;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeAgentInterfaceAcl {
    actions: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeAgentInterfaceAclAction[];
    id: number;
    matches: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeAgentInterfaceAclMatch[];
    name: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeAgentInterfaceAclAction {
    drop: boolean;
    limit: boolean;
    limitburst: number;
    limitrate: number;
    limitunit: string;
    mapparams: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeAgentInterfaceAclActionMapparam[];
    portmap: boolean;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeAgentInterfaceAclActionMapparam {
    port: number;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeAgentInterfaceAclMatch {
    type: string;
    value: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeAgentInterfaceEidregister {
    appCert: string;
    appPrivateKey: string;
    appPublicKey: string;
    displayName: string;
    eId: string;
    eIdHashLen: number;
    lispInstance: number;
    lispMapServers: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeAgentInterfaceEidregisterLispMapServer[];
    lispSignature: string;
    uuid: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeAgentInterfaceEidregisterLispMapServer {
    credential: string;
    nameOrIp: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeAgentInterfaceIo {
    name: string;
    tags: {[key: string]: string};
    type: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJson {
    acKind: string;
    acVersion: string;
    appType: string;
    configurations: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonConfiguration[];
    containerDetails: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonContainerDetail[];
    cpuPinningEnabled: boolean;
    deploymentType: string;
    description: string;
    descs: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonDesc[];
    displayName: string;
    enablevnc: boolean;
    images: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonImage[];
    interfaces: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonInterface[];
    modules: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonModule[];
    name: string;
    owners: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonOwner[];
    permissions: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonPermission[];
    resources: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonResource[];
    vmmode: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonConfiguration {
    customConfigs: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfig[];
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfig {
    add: boolean;
    allowStorageResize: boolean;
    fieldDelimiter: string;
    name: string;
    override: boolean;
    template: string;
    variableGroups: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroup {
    conditions: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    name: string;
    required: boolean;
    variables: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name: string;
    operator: string;
    value: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariable {
    default: string;
    encode: string;
    format: string;
    label: string;
    maxLength: string;
    name: string;
    options: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput: string;
    required: boolean;
    type: string;
    value: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    label: string;
    value: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonContainerDetail {
    containerCreateOption: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonDesc {
    agreementList: {[key: string]: string};
    appCategory: string;
    category: string;
    licenseList: {[key: string]: string};
    logo: {[key: string]: string};
    os: string;
    screenshotList: {[key: string]: string};
    support: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonImage {
    cleartext: boolean;
    drvtype: string;
    ignorepurge: boolean;
    imageformat: string;
    imageid: string;
    imagename: string;
    maxsize: string;
    mountpath: string;
    params: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonImageParam[];
    preserve: boolean;
    readonly: boolean;
    target: string;
    volumelabel: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonImageParam {
    name: string;
    value: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonInterface {
    acls: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAcl[];
    directattach: boolean;
    name: string;
    optional: boolean;
    privateip: boolean;
    type: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAcl {
    actions: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclAction[];
    matches: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclMatch[];
    name: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclAction {
    drop: boolean;
    limit: boolean;
    limitValues: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionLimitValue[];
    limitburst: number;
    limitrate: number;
    limitunit: string;
    portmap: boolean;
    portmaptos: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionPortmapto[];
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionLimitValue {
    limitburst: number;
    limitrate: number;
    limitunit: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionPortmapto {
    appPort: number;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclMatch {
    type: string;
    value: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonModule {
    environment: {[key: string]: string};
    moduleType: string;
    routes: {[key: string]: string};
    twinDetail: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonOwner {
    company: string;
    email: string;
    group: string;
    user: string;
    website: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonPermission {
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonResource {
    name: string;
    value: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeAgentParentDetail {
    idOfParentObject: string;
    referenceExists: boolean;
    updateAvailable: boolean;
    versionOfParentObject: number;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeHub {
    appId: string;
    appVersion: string;
    cpus: number;
    description: string;
    drives: number;
    id: string;
    interfaces: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeHubInterface[];
    manifestJsons: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJson[];
    memory: number;
    name: string;
    nameAppPart: string;
    nameProjectPart: string;
    namingScheme: string;
    networks: number;
    originType: string;
    parentDetails: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeHubParentDetail[];
    startDelayInSeconds: number;
    storage: number;
    tags: {[key: string]: string};
    title: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeHubInterface {
    accessVlanId: number;
    acls: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeHubInterfaceAcl[];
    defaultNetInstance: boolean;
    directattach: boolean;
    eidregisters: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeHubInterfaceEidregister[];
    intfname: string;
    intforder: number;
    ios: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeHubInterfaceIo[];
    ipaddr: string;
    macaddr: string;
    netinstid: string;
    netinstname: string;
    netinsttag: {[key: string]: string};
    netname: string;
    privateip: boolean;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeHubInterfaceAcl {
    actions: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeHubInterfaceAclAction[];
    id: number;
    matches: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeHubInterfaceAclMatch[];
    name: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeHubInterfaceAclAction {
    drop: boolean;
    limit: boolean;
    limitburst: number;
    limitrate: number;
    limitunit: string;
    mapparams: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeHubInterfaceAclActionMapparam[];
    portmap: boolean;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeHubInterfaceAclActionMapparam {
    port: number;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeHubInterfaceAclMatch {
    type: string;
    value: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeHubInterfaceEidregister {
    appCert: string;
    appPrivateKey: string;
    appPublicKey: string;
    displayName: string;
    eId: string;
    eIdHashLen: number;
    lispInstance: number;
    lispMapServers: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeHubInterfaceEidregisterLispMapServer[];
    lispSignature: string;
    uuid: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeHubInterfaceEidregisterLispMapServer {
    credential: string;
    nameOrIp: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeHubInterfaceIo {
    name: string;
    tags: {[key: string]: string};
    type: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJson {
    acKind: string;
    acVersion: string;
    appType: string;
    configurations: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonConfiguration[];
    containerDetails: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonContainerDetail[];
    cpuPinningEnabled: boolean;
    deploymentType: string;
    description: string;
    descs: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonDesc[];
    displayName: string;
    enablevnc: boolean;
    images: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonImage[];
    interfaces: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonInterface[];
    modules: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonModule[];
    name: string;
    owners: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonOwner[];
    permissions: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonPermission[];
    resources: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonResource[];
    vmmode: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonConfiguration {
    customConfigs: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfig[];
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfig {
    add: boolean;
    allowStorageResize: boolean;
    fieldDelimiter: string;
    name: string;
    override: boolean;
    template: string;
    variableGroups: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroup {
    conditions: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    name: string;
    required: boolean;
    variables: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name: string;
    operator: string;
    value: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariable {
    default: string;
    encode: string;
    format: string;
    label: string;
    maxLength: string;
    name: string;
    options: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput: string;
    required: boolean;
    type: string;
    value: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    label: string;
    value: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonContainerDetail {
    containerCreateOption: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonDesc {
    agreementList: {[key: string]: string};
    appCategory: string;
    category: string;
    licenseList: {[key: string]: string};
    logo: {[key: string]: string};
    os: string;
    screenshotList: {[key: string]: string};
    support: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonImage {
    cleartext: boolean;
    drvtype: string;
    ignorepurge: boolean;
    imageformat: string;
    imageid: string;
    imagename: string;
    maxsize: string;
    mountpath: string;
    params: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonImageParam[];
    preserve: boolean;
    readonly: boolean;
    target: string;
    volumelabel: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonImageParam {
    name: string;
    value: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonInterface {
    acls: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAcl[];
    directattach: boolean;
    name: string;
    optional: boolean;
    privateip: boolean;
    type: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAcl {
    actions: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclAction[];
    matches: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclMatch[];
    name: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclAction {
    drop: boolean;
    limit: boolean;
    limitValues: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionLimitValue[];
    limitburst: number;
    limitrate: number;
    limitunit: string;
    portmap: boolean;
    portmaptos: outputs.GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionPortmapto[];
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionLimitValue {
    limitburst: number;
    limitrate: number;
    limitunit: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionPortmapto {
    appPort: number;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclMatch {
    type: string;
    value: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonModule {
    environment: {[key: string]: string};
    moduleType: string;
    routes: {[key: string]: string};
    twinDetail: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonOwner {
    company: string;
    email: string;
    group: string;
    user: string;
    website: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonPermission {
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonResource {
    name: string;
    value: string;
}

export interface GetProjectCloudPolicyModulePolicyAzureEdgeHubParentDetail {
    idOfParentObject: string;
    referenceExists: boolean;
    updateAvailable: boolean;
    versionOfParentObject: number;
}

export interface GetProjectCloudPolicyModulePolicyMetric {
    queries: {[key: string]: string};
    results: {[key: string]: string};
}

export interface GetProjectCloudPolicyNetworkPolicy {
    netInstanceConfigs: outputs.GetProjectCloudPolicyNetworkPolicyNetInstanceConfig[];
}

export interface GetProjectCloudPolicyNetworkPolicyNetInstanceConfig {
    clusterId: string;
    description: string;
    deviceDefault: boolean;
    deviceId: string;
    dhcp: boolean;
    dnsLists: outputs.GetProjectCloudPolicyNetworkPolicyNetInstanceConfigDnsList[];
    id: string;
    ips: outputs.GetProjectCloudPolicyNetworkPolicyNetInstanceConfigIp[];
    kind: string;
    lisps: outputs.GetProjectCloudPolicyNetworkPolicyNetInstanceConfigLisp[];
    name: string;
    networkPolicyId: string;
    oconfig: string;
    opaques: outputs.GetProjectCloudPolicyNetworkPolicyNetInstanceConfigOpaque[];
    port: string;
    portTags: {[key: string]: string};
    projectId: string;
    revisions: outputs.GetProjectCloudPolicyNetworkPolicyNetInstanceConfigRevision[];
    tags: {[key: string]: string};
    title: string;
    type: string;
}

export interface GetProjectCloudPolicyNetworkPolicyNetInstanceConfigDnsList {
    addrs: string[];
    hostname: string;
}

export interface GetProjectCloudPolicyNetworkPolicyNetInstanceConfigIp {
    dhcpRanges: outputs.GetProjectCloudPolicyNetworkPolicyNetInstanceConfigIpDhcpRange[];
    dns: string[];
    domain: string;
    gateway: string;
    mask: string;
    ntp: string;
    subnet: string;
}

export interface GetProjectCloudPolicyNetworkPolicyNetInstanceConfigIpDhcpRange {
    end: string;
    start: string;
}

export interface GetProjectCloudPolicyNetworkPolicyNetInstanceConfigLisp {
    allocate: boolean;
    allocationprefix: string;
    allocationprefixlen: number;
    exportprivate: boolean;
    lispiid: number;
    sps: outputs.GetProjectCloudPolicyNetworkPolicyNetInstanceConfigLispSp[];
}

export interface GetProjectCloudPolicyNetworkPolicyNetInstanceConfigLispSp {
    credential: string;
    nameOrIp: string;
    type: string;
}

export interface GetProjectCloudPolicyNetworkPolicyNetInstanceConfigOpaque {
    lisps: outputs.GetProjectCloudPolicyNetworkPolicyNetInstanceConfigOpaqueLisp[];
    oconfig: string;
    type: string;
}

export interface GetProjectCloudPolicyNetworkPolicyNetInstanceConfigOpaqueLisp {
    allocate: boolean;
    allocationprefix: string;
    allocationprefixlen: number;
    exportprivate: boolean;
    lispiid: number;
    sps: outputs.GetProjectCloudPolicyNetworkPolicyNetInstanceConfigOpaqueLispSp[];
}

export interface GetProjectCloudPolicyNetworkPolicyNetInstanceConfigOpaqueLispSp {
    credential: string;
    nameOrIp: string;
    type: string;
}

export interface GetProjectCloudPolicyNetworkPolicyNetInstanceConfigRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface GetProjectCloudPolicyRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface GetProjectDeployment {
    /**
     * list of app instance policies
     */
    appInstPolicies?: outputs.GetProjectDeploymentAppInstPolicy[];
    /**
     * cluster policy details
     */
    clusterPolicies?: outputs.GetProjectDeploymentClusterPolicy[];
    /**
     * user defined tag for the deployment, which is used while targeting set of devices
     */
    deploymentTag?: string;
    /**
     * list of device policies
     */
    devicePolicies?: outputs.GetProjectDeploymentDevicePolicy[];
    /**
     * system generated unique id for an deployment
     */
    id: string;
    /**
     * integration policy details
     */
    integrationPolicies?: outputs.GetProjectDeploymentIntegrationPolicy[];
    /**
     * user defined name for the deployment
     */
    name?: string;
    /**
     * list of network instance policies
     */
    networkInstPolicies?: outputs.GetProjectDeploymentNetworkInstPolicy[];
    /**
     * object revision
     */
    revisions?: outputs.GetProjectDeploymentRevision[];
    /**
     * user defined title for the deployment
     */
    title?: string;
    /**
     * list of volume instamce policies
     */
    volumeInstPolicies?: outputs.GetProjectDeploymentVolumeInstPolicy[];
}

export interface GetProjectDeploymentAppInstPolicy {
    /**
     * app instance config for automated deployment
     */
    appInstConfigs?: outputs.GetProjectDeploymentAppInstPolicyAppInstConfig[];
    /**
     * all the required metadata for a policy like id, name, different types of tags
     */
    metaDatas?: outputs.GetProjectDeploymentAppInstPolicyMetaData[];
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfig {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    bundleId?: string;
    /**
     * current bundle version
     */
    bundleVersion?: number;
    /**
     * user defined cpus for bundle
     */
    cpus?: number;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * application interfaces
     */
    interfaces?: outputs.GetProjectDeploymentAppInstPolicyAppInstConfigInterface[];
    /**
     * App Instance logs
     */
    logs?: outputs.GetProjectDeploymentAppInstPolicyAppInstConfigLog[];
    /**
     * user defined manifest in JSON format
     */
    manifestJsons?: outputs.GetProjectDeploymentAppInstPolicyAppInstConfigManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory?: number;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks?: number;
    /**
     * this flag denotes whether there is latest bundle available in the marketplace or not
     */
    newBundleVersionAvailable?: boolean;
    /**
     * origin of object
     */
    originType?: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.GetProjectDeploymentAppInstPolicyAppInstConfigParentDetail[];
    /**
     * Remote console flag
     */
    remoteConsole?: boolean;
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * virtual machine info
     */
    vminfos?: outputs.GetProjectDeploymentAppInstPolicyAppInstConfigVminfo[];
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfigInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.GetProjectDeploymentAppInstPolicyAppInstConfigInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.GetProjectDeploymentAppInstPolicyAppInstConfigInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.GetProjectDeploymentAppInstPolicyAppInstConfigInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfigInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.GetProjectDeploymentAppInstPolicyAppInstConfigInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.GetProjectDeploymentAppInstPolicyAppInstConfigInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfigInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.GetProjectDeploymentAppInstPolicyAppInstConfigInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfigInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfigInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfigInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.GetProjectDeploymentAppInstPolicyAppInstConfigInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfigInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfigInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfigLog {
    /**
     * Flags to enable / disable sending of logs generated by app instance to zedcloud
     */
    access: boolean;
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfigManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonOwner[];
    permissions?: outputs.GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonConfiguration {
    customConfigs?: outputs.GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonConfigurationCustomConfig[];
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonInterfaceAclActionPortmapto[];
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonPermission {
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfigManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfigParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface GetProjectDeploymentAppInstPolicyAppInstConfigVminfo {
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled: boolean;
    /**
     * CPUs
     */
    cpus: number;
    /**
     * Memory
     */
    memory: number;
    /**
     * Hardware Virtualization
     */
    mode: string;
    /**
     * VNC
     */
    vnc: boolean;
    /**
     * VNC display
     */
    vncDisplay: number;
}

export interface GetProjectDeploymentAppInstPolicyMetaData {
    /**
     * system generated unique id for an policy
     */
    id: string;
    /**
     * user defined policy name
     */
    name?: string;
    /**
     * user defined key-value pairs of a policy that will be used for targeting by devices
     */
    policyTargetCondition?: {[key: string]: string};
    /**
     * object revision details
     */
    revisions?: outputs.GetProjectDeploymentAppInstPolicyMetaDataRevision[];
    /**
     * user defined key-value pairs of a policy
     */
    tags?: {[key: string]: string};
    /**
     * user defined policy title
     */
    title?: string;
}

export interface GetProjectDeploymentAppInstPolicyMetaDataRevision {
    /**
     * The time, in milliseconds since the epoch, when the record was created.
     */
    createdAt: string;
    /**
     * User data: Created By
     */
    createdBy: string;
    /**
     * Current Database version of the record
     */
    curr: string;
    /**
     * Previous
     */
    prev: string;
    /**
     * The time, in milliseconds since the epoch, when the record was last updated.
     */
    updatedAt: string;
    /**
     * User data: Updated By
     */
    updatedBy: string;
}

export interface GetProjectDeploymentClusterPolicy {
    id?: string;
    name?: string;
    revisions?: outputs.GetProjectDeploymentClusterPolicyRevision[];
    title?: string;
}

export interface GetProjectDeploymentClusterPolicyRevision {
    /**
     * The time, in milliseconds since the epoch, when the record was created.
     */
    createdAt: string;
    /**
     * User data: Created By
     */
    createdBy: string;
    /**
     * Current Database version of the record
     */
    curr: string;
    /**
     * Previous
     */
    prev: string;
    /**
     * The time, in milliseconds since the epoch, when the record was last updated.
     */
    updatedAt: string;
    /**
     * User data: Updated By
     */
    updatedBy: string;
}

export interface GetProjectDeploymentDevicePolicy {
    /**
     * device attestation policy
     */
    attestationPolicies?: outputs.GetProjectDeploymentDevicePolicyAttestationPolicy[];
    /**
     * all the required metadata for a policy like id, name, different types of tags
     */
    metaDatas?: outputs.GetProjectDeploymentDevicePolicyMetaData[];
    /**
     * device policy type
     */
    policySubType?: string;
}

export interface GetProjectDeploymentDevicePolicyAttestationPolicy {
    /**
     * Attestation policy type
     */
    type: string;
}

export interface GetProjectDeploymentDevicePolicyMetaData {
    /**
     * system generated unique id for an policy
     */
    id: string;
    /**
     * user defined policy name
     */
    name?: string;
    /**
     * user defined key-value pairs of a policy that will be used for targeting by devices
     */
    policyTargetCondition?: {[key: string]: string};
    /**
     * object revision details
     */
    revisions?: outputs.GetProjectDeploymentDevicePolicyMetaDataRevision[];
    /**
     * user defined key-value pairs of a policy
     */
    tags?: {[key: string]: string};
    /**
     * user defined policy title
     */
    title?: string;
}

export interface GetProjectDeploymentDevicePolicyMetaDataRevision {
    /**
     * The time, in milliseconds since the epoch, when the record was created.
     */
    createdAt: string;
    /**
     * User data: Created By
     */
    createdBy: string;
    /**
     * Current Database version of the record
     */
    curr: string;
    /**
     * Previous
     */
    prev: string;
    /**
     * The time, in milliseconds since the epoch, when the record was last updated.
     */
    updatedAt: string;
    /**
     * User data: Updated By
     */
    updatedBy: string;
}

export interface GetProjectDeploymentIntegrationPolicy {
    id?: string;
    name?: string;
    revisions?: outputs.GetProjectDeploymentIntegrationPolicyRevision[];
    title?: string;
}

export interface GetProjectDeploymentIntegrationPolicyRevision {
    /**
     * The time, in milliseconds since the epoch, when the record was created.
     */
    createdAt: string;
    /**
     * User data: Created By
     */
    createdBy: string;
    /**
     * Current Database version of the record
     */
    curr: string;
    /**
     * Previous
     */
    prev: string;
    /**
     * The time, in milliseconds since the epoch, when the record was last updated.
     */
    updatedAt: string;
    /**
     * User data: Updated By
     */
    updatedBy: string;
}

export interface GetProjectDeploymentNetworkInstPolicy {
    /**
     * all the required metadata for a policy like id, name, different types of tags
     */
    metaDatas?: outputs.GetProjectDeploymentNetworkInstPolicyMetaData[];
    /**
     * network instance config details
     */
    netInstConfigs?: outputs.GetProjectDeploymentNetworkInstPolicyNetInstConfig[];
}

export interface GetProjectDeploymentNetworkInstPolicyMetaData {
    /**
     * system generated unique id for an policy
     */
    id: string;
    /**
     * user defined policy name
     */
    name?: string;
    /**
     * user defined key-value pairs of a policy that will be used for targeting by devices
     */
    policyTargetCondition?: {[key: string]: string};
    /**
     * object revision details
     */
    revisions?: outputs.GetProjectDeploymentNetworkInstPolicyMetaDataRevision[];
    /**
     * user defined key-value pairs of a policy
     */
    tags?: {[key: string]: string};
    /**
     * user defined policy title
     */
    title?: string;
}

export interface GetProjectDeploymentNetworkInstPolicyMetaDataRevision {
    /**
     * The time, in milliseconds since the epoch, when the record was created.
     */
    createdAt: string;
    /**
     * User data: Created By
     */
    createdBy: string;
    /**
     * Current Database version of the record
     */
    curr: string;
    /**
     * Previous
     */
    prev: string;
    /**
     * The time, in milliseconds since the epoch, when the record was last updated.
     */
    updatedAt: string;
    /**
     * User data: Updated By
     */
    updatedBy: string;
}

export interface GetProjectDeploymentNetworkInstPolicyNetInstConfig {
    /**
     * ID of the Cluster in which the network instance is configured
     */
    clusterId?: string;
    /**
     * Detailed description of the network instance
     */
    description?: string;
    /**
     * Flag to indicate if this is the default network instance for the device
     */
    deviceDefault?: boolean;
    /**
     * ID of the device on which network instance is created
     */
    deviceId: string;
    /**
     * Deprecated
     */
    dhcp?: boolean;
    /**
     * List of Static DNS entries
     */
    dnsLists?: outputs.GetProjectDeploymentNetworkInstPolicyNetInstConfigDnsList[];
    /**
     * System defined universally unique ID of the network instance
     */
    id: string;
    /**
     * DHCP Server Configuration
     */
    ips?: outputs.GetProjectDeploymentNetworkInstPolicyNetInstConfigIp[];
    /**
     * Kind of Network Instance:
     * NETWORK_INSTANCE_KIND_UNSPECIFIED
     * NETWORK_INSTANCE_KIND_TRANSPARENT
     * NETWORK_INSTANCE_KIND_SWITCH
     * NETWORK_INSTANCE_KIND_LOCAL
     * NETWORK_INSTANCE_KIND_CLOUD
     * NETWORK_INSTANCE_KIND_MESH
     * NETWORK_INSTANCE_KIND_HONEYPOT
     */
    kind: string;
    /**
     * Lisp Config : read only for now. Deprecated.
     */
    lisps: outputs.GetProjectDeploymentNetworkInstPolicyNetInstConfigLisp[];
    /**
     * User defined name of the network instance, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * id of the network policy to be attached to this network instance
     */
    networkPolicyId?: string;
    oconfig?: string;
    /**
     * Service specific Config
     */
    opaques?: outputs.GetProjectDeploymentNetworkInstPolicyNetInstConfigOpaque[];
    /**
     * name of port mapping in the model
     */
    port?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    portTags?: {[key: string]: string};
    /**
     * id of the project in which network instance is created
     */
    projectId: string;
    /**
     * system defined info for the object
     */
    revisions: outputs.GetProjectDeploymentNetworkInstPolicyNetInstConfigRevision[];
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the network instance. Title can be changed at any time
     */
    title: string;
    /**
     * Type of DHCP for this Network Instance:
     * NETWORK_INSTANCE_DHCP_TYPE_V4
     * NETWORK_INSTANCE_DHCP_TYPE_V6
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOEID
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOV4
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOV6
     */
    type: string;
}

export interface GetProjectDeploymentNetworkInstPolicyNetInstConfigDnsList {
    /**
     * Addresses
     */
    addrs?: string[];
    /**
     * Host name
     */
    hostname?: string;
}

export interface GetProjectDeploymentNetworkInstPolicyNetInstConfigIp {
    /**
     * Range of IP addresses to be used for DHCP
     */
    dhcpRanges?: outputs.GetProjectDeploymentNetworkInstPolicyNetInstConfigIpDhcpRange[];
    /**
     * IP Addresses of DNS servers
     */
    dns?: string[];
    /**
     * Network domain
     */
    domain?: string;
    /**
     * IP Address of Network Gateway
     */
    gateway?: string;
    /**
     * Subnet Mask
     */
    mask?: string;
    /**
     * IP Address of NTP Server
     */
    ntp?: string;
    /**
     * Subnet address
     */
    subnet: string;
}

export interface GetProjectDeploymentNetworkInstPolicyNetInstConfigIpDhcpRange {
    /**
     * ending IP
     */
    end?: string;
    /**
     * starting IP
     */
    start?: string;
}

export interface GetProjectDeploymentNetworkInstPolicyNetInstConfigLisp {
    allocate: boolean;
    allocationprefix: string;
    allocationprefixlen: number;
    exportprivate: boolean;
    lispiid: number;
    sps: outputs.GetProjectDeploymentNetworkInstPolicyNetInstConfigLispSp[];
}

export interface GetProjectDeploymentNetworkInstPolicyNetInstConfigLispSp {
    credential: string;
    nameOrIp: string;
    type: string;
}

export interface GetProjectDeploymentNetworkInstPolicyNetInstConfigOpaque {
    /**
     * Deprecated - Lisp config
     */
    lisps?: outputs.GetProjectDeploymentNetworkInstPolicyNetInstConfigOpaqueLisp[];
    /**
     * base64 encoded string of opaque config
     */
    oconfig?: string;
    /**
     * type of Opaque config
     */
    type?: string;
}

export interface GetProjectDeploymentNetworkInstPolicyNetInstConfigOpaqueLisp {
    /**
     * Allocate flag
     */
    allocate?: boolean;
    /**
     * Allocation Prefix
     */
    allocationprefix?: string;
    /**
     * Allocation Prefix Length
     */
    allocationprefixlen?: number;
    /**
     * Export Private flag
     */
    exportprivate?: boolean;
    /**
     * lisp id
     */
    lispiid?: number;
    /**
     * Service Point List
     */
    sps?: outputs.GetProjectDeploymentNetworkInstPolicyNetInstConfigOpaqueLispSp[];
}

export interface GetProjectDeploymentNetworkInstPolicyNetInstConfigOpaqueLispSp {
    /**
     * Service credentials
     */
    credential?: string;
    /**
     * Service name/ service name
     */
    nameOrIp?: string;
    /**
     * Service Point Type
     */
    type?: string;
}

export interface GetProjectDeploymentNetworkInstPolicyNetInstConfigRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface GetProjectDeploymentRevision {
    /**
     * The time, in milliseconds since the epoch, when the record was created.
     */
    createdAt: string;
    /**
     * User data: Created By
     */
    createdBy: string;
    /**
     * Current Database version of the record
     */
    curr: string;
    /**
     * Previous
     */
    prev: string;
    /**
     * The time, in milliseconds since the epoch, when the record was last updated.
     */
    updatedAt: string;
    /**
     * User data: Updated By
     */
    updatedBy: string;
}

export interface GetProjectDeploymentVolumeInstPolicy {
    /**
     * all the required metadata for a policy like id, name, different types of tags
     */
    metaDatas?: outputs.GetProjectDeploymentVolumeInstPolicyMetaData[];
    /**
     * volume instance config details
     */
    volInstConfigs?: outputs.GetProjectDeploymentVolumeInstPolicyVolInstConfig[];
}

export interface GetProjectDeploymentVolumeInstPolicyMetaData {
    /**
     * system generated unique id for an policy
     */
    id: string;
    /**
     * user defined policy name
     */
    name?: string;
    /**
     * user defined key-value pairs of a policy that will be used for targeting by devices
     */
    policyTargetCondition?: {[key: string]: string};
    /**
     * object revision details
     */
    revisions?: outputs.GetProjectDeploymentVolumeInstPolicyMetaDataRevision[];
    /**
     * user defined key-value pairs of a policy
     */
    tags?: {[key: string]: string};
    /**
     * user defined policy title
     */
    title?: string;
}

export interface GetProjectDeploymentVolumeInstPolicyMetaDataRevision {
    /**
     * The time, in milliseconds since the epoch, when the record was created.
     */
    createdAt: string;
    /**
     * User data: Created By
     */
    createdBy: string;
    /**
     * Current Database version of the record
     */
    curr: string;
    /**
     * Previous
     */
    prev: string;
    /**
     * The time, in milliseconds since the epoch, when the record was last updated.
     */
    updatedAt: string;
    /**
     * User data: Updated By
     */
    updatedBy: string;
}

export interface GetProjectDeploymentVolumeInstPolicyVolInstConfig {
    /**
     * Access mode
     */
    accessmode?: string;
    /**
     * flag to keep the contents of the volume unencrypted (in clear text)
     */
    cleartext?: boolean;
    /**
     * content tree ID
     */
    contentTreeId: string;
    /**
     * Detailed description of the volume instance.
     */
    description?: string;
    /**
     * id of the device on which volume instance is created
     */
    deviceId: string;
    /**
     * System defined universally unique Id of the volume instance.
     */
    id: string;
    /**
     * name of the image
     */
    image: string;
    /**
     * flag to create implicit volumes
     */
    implicit?: boolean;
    /**
     * label
     */
    label?: string;
    /**
     * flag to enable the volume to be attached to multiple app instances
     */
    multiattach?: boolean;
    /**
     * User defined name of the volume instance, unique across the enterprise. Once object is created, name canâ€™t be changed.
     */
    name: string;
    /**
     * id of the project in which the volume instance is created
     */
    projectId: string;
    /**
     * system defined Revision info of the object
     */
    revisions: outputs.GetProjectDeploymentVolumeInstPolicyVolInstConfigRevision[];
    /**
     * size of volume
     */
    sizeBytes?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the volume instance. Title can be changed at any time.
     */
    title: string;
    /**
     * type of Volume Instance
     */
    type: string;
}

export interface GetProjectDeploymentVolumeInstPolicyVolInstConfigRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface GetProjectEdgeviewPolicy {
    /**
     * app policy, which is used in auto app instance deployment
     */
    appPolicies?: outputs.GetProjectEdgeviewPolicyAppPolicy[];
    /**
     * attestation policy to enforce on all devices in this project
     */
    attestationPolicies?: outputs.GetProjectEdgeviewPolicyAttestationPolicy[];
    /**
     * Mapping of policy  variable keys and policy variable values
     */
    attr?: {[key: string]: string};
    /**
     * azure policy, which is used in configuring azure iot-edge.
     */
    azurePolicies?: outputs.GetProjectEdgeviewPolicyAzurePolicy[];
    /**
     * cluster policy to bring up cluster on devices in this project
     */
    clusterPolicies?: outputs.GetProjectEdgeviewPolicyClusterPolicy[];
    /**
     * Detailed description of the policy
     */
    description?: string;
    /**
     * edgeview policy on devices of this project
     */
    edgeviewPolicies?: outputs.GetProjectEdgeviewPolicyEdgeviewPolicy[];
    /**
     * System defined universally unique Id of the policy request
     */
    id: string;
    /**
     * local operator console policy to enforce on all devices in this project
     */
    localOperatorConsolePolicies?: outputs.GetProjectEdgeviewPolicyLocalOperatorConsolePolicy[];
    /**
     * module policy, which is used in auto module deployment
     */
    modulePolicies?: outputs.GetProjectEdgeviewPolicyModulePolicy[];
    /**
     * User defined name of the policy request, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * network policy to enforce on all devices in this project
     */
    networkPolicies?: outputs.GetProjectEdgeviewPolicyNetworkPolicy[];
    /**
     * system defined info
     */
    revisions: outputs.GetProjectEdgeviewPolicyRevision[];
    /**
     * status of the policy
     */
    status: string;
    /**
     * Detailed status message of the policy
     */
    statusMessage: string;
    /**
     * User defined title of the policy. Title can be changed at any time
     */
    title?: string;
    /**
     * type of policy
     */
    type?: string;
}

export interface GetProjectEdgeviewPolicyAppPolicy {
    /**
     * list of app details that will be provisioned on all the devices of the project to which this policy is attached
     */
    apps: outputs.GetProjectEdgeviewPolicyAppPolicyApp[];
}

export interface GetProjectEdgeviewPolicyAppPolicyApp {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.GetProjectEdgeviewPolicyAppPolicyAppInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.GetProjectEdgeviewPolicyAppPolicyAppManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.GetProjectEdgeviewPolicyAppPolicyAppParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface GetProjectEdgeviewPolicyAppPolicyAppInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.GetProjectEdgeviewPolicyAppPolicyAppInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.GetProjectEdgeviewPolicyAppPolicyAppInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.GetProjectEdgeviewPolicyAppPolicyAppInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface GetProjectEdgeviewPolicyAppPolicyAppInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.GetProjectEdgeviewPolicyAppPolicyAppInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.GetProjectEdgeviewPolicyAppPolicyAppInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface GetProjectEdgeviewPolicyAppPolicyAppInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.GetProjectEdgeviewPolicyAppPolicyAppInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface GetProjectEdgeviewPolicyAppPolicyAppInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface GetProjectEdgeviewPolicyAppPolicyAppInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface GetProjectEdgeviewPolicyAppPolicyAppInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.GetProjectEdgeviewPolicyAppPolicyAppInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface GetProjectEdgeviewPolicyAppPolicyAppInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface GetProjectEdgeviewPolicyAppPolicyAppInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface GetProjectEdgeviewPolicyAppPolicyAppManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.GetProjectEdgeviewPolicyAppPolicyAppManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.GetProjectEdgeviewPolicyAppPolicyAppManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.GetProjectEdgeviewPolicyAppPolicyAppManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.GetProjectEdgeviewPolicyAppPolicyAppManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.GetProjectEdgeviewPolicyAppPolicyAppManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.GetProjectEdgeviewPolicyAppPolicyAppManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.GetProjectEdgeviewPolicyAppPolicyAppManifestJsonOwner[];
    permissions?: outputs.GetProjectEdgeviewPolicyAppPolicyAppManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.GetProjectEdgeviewPolicyAppPolicyAppManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface GetProjectEdgeviewPolicyAppPolicyAppManifestJsonConfiguration {
    customConfigs?: outputs.GetProjectEdgeviewPolicyAppPolicyAppManifestJsonConfigurationCustomConfig[];
}

export interface GetProjectEdgeviewPolicyAppPolicyAppManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.GetProjectEdgeviewPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface GetProjectEdgeviewPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.GetProjectEdgeviewPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.GetProjectEdgeviewPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface GetProjectEdgeviewPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface GetProjectEdgeviewPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.GetProjectEdgeviewPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface GetProjectEdgeviewPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface GetProjectEdgeviewPolicyAppPolicyAppManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface GetProjectEdgeviewPolicyAppPolicyAppManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface GetProjectEdgeviewPolicyAppPolicyAppManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.GetProjectEdgeviewPolicyAppPolicyAppManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface GetProjectEdgeviewPolicyAppPolicyAppManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface GetProjectEdgeviewPolicyAppPolicyAppManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.GetProjectEdgeviewPolicyAppPolicyAppManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface GetProjectEdgeviewPolicyAppPolicyAppManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.GetProjectEdgeviewPolicyAppPolicyAppManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.GetProjectEdgeviewPolicyAppPolicyAppManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface GetProjectEdgeviewPolicyAppPolicyAppManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.GetProjectEdgeviewPolicyAppPolicyAppManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.GetProjectEdgeviewPolicyAppPolicyAppManifestJsonInterfaceAclActionPortmapto[];
}

export interface GetProjectEdgeviewPolicyAppPolicyAppManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface GetProjectEdgeviewPolicyAppPolicyAppManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface GetProjectEdgeviewPolicyAppPolicyAppManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface GetProjectEdgeviewPolicyAppPolicyAppManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface GetProjectEdgeviewPolicyAppPolicyAppManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface GetProjectEdgeviewPolicyAppPolicyAppManifestJsonPermission {
}

export interface GetProjectEdgeviewPolicyAppPolicyAppManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface GetProjectEdgeviewPolicyAppPolicyAppParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface GetProjectEdgeviewPolicyAttestationPolicy {
    /**
     * unique policy id
     */
    id: string;
    /**
     * Attestation policy type
     */
    type: string;
}

export interface GetProjectEdgeviewPolicyAzurePolicy {
    /**
     * app id for rbac
     */
    appId: string;
    /**
     * app password for rbac
     */
    appPassword: string;
    /**
     * azure resource and service the policy will be interested in
     */
    azureResourceAndServices?: outputs.GetProjectEdgeviewPolicyAzurePolicyAzureResourceAndService[];
    /**
     * Certificate object holds the details of certificate like encryption type, validity, subject etc
     */
    certificates?: outputs.GetProjectEdgeviewPolicyAzurePolicyCertificate[];
    /**
     * key to decrypt AppPassword
     */
    cryptoKey?: string;
    customDeploymentManaged?: boolean;
    /**
     * encrypted AppPassword
     */
    encryptedSecrets?: {[key: string]: string};
    /**
     * tenant id for rbac
     */
    tenantId: string;
}

export interface GetProjectEdgeviewPolicyAzurePolicyAzureResourceAndService {
    /**
     * dps service attached to cloud policy
     */
    dpsServices: outputs.GetProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsService[];
    /**
     * list of iothubs attached to cloud policy
     */
    iotHubServices: outputs.GetProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceIotHubService[];
    /**
     * list of resource groups attached to cloud policy
     */
    resourceGroups: outputs.GetProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceResourceGroup[];
}

export interface GetProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsService {
    enrollments?: outputs.GetProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollment[];
    serviceDetails?: outputs.GetProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetail[];
}

export interface GetProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollment {
    allocationPolicy?: string;
    attachedIotHubsNames?: string[];
    certificateEnrollments?: outputs.GetProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollment[];
    enableIotEdgeDevice?: boolean;
    mechanism?: string;
    symmetricKeyEnrollments?: outputs.GetProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollment[];
    tags?: {[key: string]: string};
    tpmEnrollments?: outputs.GetProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentTpmEnrollment[];
}

export interface GetProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollment {
    groupCertificateEnrollments?: outputs.GetProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollmentGroupCertificateEnrollment[];
    individualCertificateEnrollment?: string;
    type?: string;
}

export interface GetProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollmentGroupCertificateEnrollment {
    groupName?: string;
}

export interface GetProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollment {
    groupSymmetricKeyEnrollments?: outputs.GetProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentGroupSymmetricKeyEnrollment[];
    individualSymmetricKeyEnrollments?: outputs.GetProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentIndividualSymmetricKeyEnrollment[];
    type?: string;
}

export interface GetProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentGroupSymmetricKeyEnrollment {
    groupName?: string;
}

export interface GetProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentIndividualSymmetricKeyEnrollment {
    registrationId?: string;
}

export interface GetProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentTpmEnrollment {
    type?: string;
}

export interface GetProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetail {
    createByDefault?: boolean;
    name?: string;
    region?: string;
    resourceGroupName?: string;
    sKUs?: outputs.GetProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetailSKU[];
    subscriptionId?: string;
}

export interface GetProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetailSKU {
    capacity?: string;
    name?: string;
    tier?: string;
}

export interface GetProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceIotHubService {
    serviceDetails?: outputs.GetProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetail[];
}

export interface GetProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetail {
    createByDefault?: boolean;
    name?: string;
    region?: string;
    resourceGroupName?: string;
    sKUs?: outputs.GetProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetailSKU[];
    subscriptionId?: string;
}

export interface GetProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetailSKU {
    capacity?: string;
    name?: string;
    tier?: string;
}

export interface GetProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceResourceGroup {
    /**
     * resource group name
     */
    name: string;
    /**
     * resource group region
     */
    region?: string;
    /**
     * azure subscription id to which resource group is attached
     */
    subscriptionId: string;
}

export interface GetProjectEdgeviewPolicyAzurePolicyCertificate {
    /**
     * This fields tells the basic constraints like isCA are correct.
     */
    basicContraintsValid?: boolean;
    /**
     * base64 string of the parent certificate
     */
    cert?: string;
    /**
     * Crypto Key for decrypting user secret information
     */
    cryptoKey?: string;
    /**
     * ECDSA encryption algorithm of the certificate
     */
    ecdsaEncryptions?: outputs.GetProjectEdgeviewPolicyAzurePolicyCertificateEcdsaEncryption[];
    /**
     * user encrypted secrets map
     */
    encryptedSecrets?: {[key: string]: string};
    /**
     * Indicates if the private key can be exported.
     */
    exportable?: boolean;
    /**
     * Sequence of extended key usages.
     */
    extendedKeyUsages?: string[];
    /**
     * Parameters for the issuer of the X509 component of a certificate.
     */
    issuers?: outputs.GetProjectEdgeviewPolicyAzurePolicyCertificateIssuer[];
    /**
     * Key usage extensions define the purpose of the public key contained in a certificate.
     */
    keyUsage?: number;
    /**
     * pass phase for the pvt key, this has to be filled if pvt key is encrypted with a pass phrase
     */
    passPhrase?: string;
    /**
     * base63 string of the public key
     */
    publicKey?: string;
    /**
     * Public key algorithm.
     */
    publicKeyAlgorithm?: string;
    /**
     * base64 string of the parent pvt key
     */
    pvtKey?: string;
    /**
     * Indicates if the same key pair will be used on certificate renewal.
     */
    reuseKey?: boolean;
    /**
     * RSA encryption algorithm of the certificate
     */
    rsaEcryptions?: outputs.GetProjectEdgeviewPolicyAzurePolicyCertificateRsaEcryption[];
    /**
     * This holds the alternative name values like URIs, domain names IPs etc.
     */
    sanValues?: outputs.GetProjectEdgeviewPolicyAzurePolicyCertificateSanValue[];
    /**
     * Unique identifier for each Certificate generated by an Certificate Issuer.
     */
    serialNumber?: string;
    signatureAlgorithm?: string;
    /**
     * Parameters for the subject of the X509 component of a certificate.
     */
    subjects?: outputs.GetProjectEdgeviewPolicyAzurePolicyCertificateSubject[];
    /**
     * Certificate validatity start time
     */
    validFrom?: string;
    /**
     * Certificate validatity start time
     */
    validTill?: string;
}

export interface GetProjectEdgeviewPolicyAzurePolicyCertificateEcdsaEncryption {
    /**
     * ECDSA curve to be used while signing the certificate.
     */
    curve?: string;
}

export interface GetProjectEdgeviewPolicyAzurePolicyCertificateIssuer {
    /**
     * Certificate common name.
     */
    commonName?: string;
    /**
     * List of countries.
     */
    countries?: string[];
    /**
     * List of locallity.
     */
    localities?: string[];
    /**
     * List of Organizational Unit.
     */
    organizationalUnits?: string[];
    /**
     * List of organization.
     */
    organizations?: string[];
    /**
     * List of Postal codes.
     */
    postalCodes?: string[];
    /**
     * List of List of Prvince.
     */
    provinces?: string[];
    /**
     * Subject cerial number
     */
    serialNumber?: string;
}

export interface GetProjectEdgeviewPolicyAzurePolicyCertificateRsaEcryption {
    /**
     * RSA Encryption Key bit size.
     */
    rsaBits?: string;
}

export interface GetProjectEdgeviewPolicyAzurePolicyCertificateSanValue {
    /**
     * List of permitted DNS names.
     */
    dns?: string[];
    /**
     * List of permitted email addresses.
     */
    emaildIds?: string[];
    /**
     * List of permitted hosts.
     */
    hosts?: string[];
    /**
     * List of permitted IP addresses.
     */
    ips?: string[];
    /**
     * List of permitted User principal names.
     */
    upns?: string[];
    /**
     * List of permitted URIs.
     */
    uris?: string[];
}

export interface GetProjectEdgeviewPolicyAzurePolicyCertificateSubject {
    /**
     * Certificate common name.
     */
    commonName?: string;
    /**
     * List of countries.
     */
    countries?: string[];
    /**
     * List of locallity.
     */
    localities?: string[];
    /**
     * List of Organizational Unit.
     */
    organizationalUnits?: string[];
    /**
     * List of organization.
     */
    organizations?: string[];
    /**
     * List of Postal codes.
     */
    postalCodes?: string[];
    /**
     * List of List of Prvince.
     */
    provinces?: string[];
    /**
     * Subject cerial number
     */
    serialNumber?: string;
}

export interface GetProjectEdgeviewPolicyClusterPolicy {
    /**
     * UUID of the app policy linked to this cluster policy
     */
    appPolicyId: string;
    /**
     * Cluster Policy Parameters
     */
    clusterConfigs?: outputs.GetProjectEdgeviewPolicyClusterPolicyClusterConfig[];
    /**
     * UUID of the network policy linked to this cluster policy
     */
    networkPolicyId: string;
    /**
     * Type of cluster
     */
    type: string;
}

export interface GetProjectEdgeviewPolicyClusterPolicyClusterConfig {
    minNodesRequired?: number;
}

export interface GetProjectEdgeviewPolicyEdgeviewPolicy {
    /**
     * Allow inherit instance to change access policy
     */
    accessAllowChange?: boolean;
    /**
     * Allow device to enable Edgeview in this project
     */
    edgeviewAllow?: boolean;
    /**
     * Edgeview configuration and policies
     */
    edgeviewcfgs?: outputs.GetProjectEdgeviewPolicyEdgeviewPolicyEdgeviewcfg[];
    /**
     * Maximum seconds allowed for Edgeview session
     */
    maxExpireSec?: number;
    /**
     * Maximum instances allowed for Edgeview
     */
    maxInst?: number;
}

export interface GetProjectEdgeviewPolicyEdgeviewPolicyEdgeviewcfg {
    appPolicies?: outputs.GetProjectEdgeviewPolicyEdgeviewPolicyEdgeviewcfgAppPolicy[];
    devPolicies?: outputs.GetProjectEdgeviewPolicyEdgeviewPolicyEdgeviewcfgDevPolicy[];
    extPolicies?: outputs.GetProjectEdgeviewPolicyEdgeviewPolicyEdgeviewcfgExtPolicy[];
    generationId?: number;
    jwtInfos?: outputs.GetProjectEdgeviewPolicyEdgeviewPolicyEdgeviewcfgJwtInfo[];
    token?: string;
}

export interface GetProjectEdgeviewPolicyEdgeviewPolicyEdgeviewcfgAppPolicy {
    allowApp?: boolean;
}

export interface GetProjectEdgeviewPolicyEdgeviewPolicyEdgeviewcfgDevPolicy {
    allowDev?: boolean;
}

export interface GetProjectEdgeviewPolicyEdgeviewPolicyEdgeviewcfgExtPolicy {
    allowExt?: boolean;
}

export interface GetProjectEdgeviewPolicyEdgeviewPolicyEdgeviewcfgJwtInfo {
    allowSec?: number;
    dispUrl?: string;
    encrypt?: boolean;
    expireSec: string;
    numInst?: number;
}

export interface GetProjectEdgeviewPolicyLocalOperatorConsolePolicy {
    /**
     * unique policy id
     */
    id: string;
    /**
     * Local operator console URL
     */
    locUrl: string;
}

export interface GetProjectEdgeviewPolicyModulePolicy {
    /**
     * list of app details that will be provisioned on all the devices of the project to which this policy is attached
     */
    apps: outputs.GetProjectEdgeviewPolicyModulePolicyApp[];
    /**
     * app that describes the azure edge agent to be deployed on the Azure runtime
     */
    azureEdgeAgents?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgent[];
    /**
     * app that describes the azure edge hub to be deployed on the Azure runtime
     */
    azureEdgeHubs?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeHub[];
    /**
     * etag for deployment
     */
    etag?: string;
    /**
     * unique id for deployment
     */
    id: string;
    /**
     * Mapping of label variable keys and value
     */
    labels?: {[key: string]: string};
    /**
     * custom metrics for deployment
     */
    metrics?: outputs.GetProjectEdgeviewPolicyModulePolicyMetric[];
    /**
     * deployment priority of module manifest
     */
    priority: number;
    /**
     * Mapping of routes variable keys and value
     */
    routes?: {[key: string]: string};
    /**
     * target condition for deployment that matches single device or group of devices
     */
    targetCondition?: string;
    /**
     * target condition for deployment that matches single device or group of devices
     */
    targetConditionNew?: {[key: string]: string};
}

export interface GetProjectEdgeviewPolicyModulePolicyApp {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.GetProjectEdgeviewPolicyModulePolicyAppInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.GetProjectEdgeviewPolicyModulePolicyAppManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.GetProjectEdgeviewPolicyModulePolicyAppParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAppInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.GetProjectEdgeviewPolicyModulePolicyAppInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.GetProjectEdgeviewPolicyModulePolicyAppInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.GetProjectEdgeviewPolicyModulePolicyAppInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface GetProjectEdgeviewPolicyModulePolicyAppInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.GetProjectEdgeviewPolicyModulePolicyAppInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.GetProjectEdgeviewPolicyModulePolicyAppInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAppInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.GetProjectEdgeviewPolicyModulePolicyAppInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface GetProjectEdgeviewPolicyModulePolicyAppInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface GetProjectEdgeviewPolicyModulePolicyAppInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAppInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.GetProjectEdgeviewPolicyModulePolicyAppInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAppInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAppInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAppManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.GetProjectEdgeviewPolicyModulePolicyAppManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.GetProjectEdgeviewPolicyModulePolicyAppManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.GetProjectEdgeviewPolicyModulePolicyAppManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.GetProjectEdgeviewPolicyModulePolicyAppManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.GetProjectEdgeviewPolicyModulePolicyAppManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.GetProjectEdgeviewPolicyModulePolicyAppManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.GetProjectEdgeviewPolicyModulePolicyAppManifestJsonOwner[];
    permissions?: outputs.GetProjectEdgeviewPolicyModulePolicyAppManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.GetProjectEdgeviewPolicyModulePolicyAppManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAppManifestJsonConfiguration {
    customConfigs?: outputs.GetProjectEdgeviewPolicyModulePolicyAppManifestJsonConfigurationCustomConfig[];
}

export interface GetProjectEdgeviewPolicyModulePolicyAppManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.GetProjectEdgeviewPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface GetProjectEdgeviewPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.GetProjectEdgeviewPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.GetProjectEdgeviewPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface GetProjectEdgeviewPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.GetProjectEdgeviewPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAppManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAppManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAppManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.GetProjectEdgeviewPolicyModulePolicyAppManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAppManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAppManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.GetProjectEdgeviewPolicyModulePolicyAppManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAppManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.GetProjectEdgeviewPolicyModulePolicyAppManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.GetProjectEdgeviewPolicyModulePolicyAppManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAppManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.GetProjectEdgeviewPolicyModulePolicyAppManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.GetProjectEdgeviewPolicyModulePolicyAppManifestJsonInterfaceAclActionPortmapto[];
}

export interface GetProjectEdgeviewPolicyModulePolicyAppManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAppManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface GetProjectEdgeviewPolicyModulePolicyAppManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAppManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAppManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAppManifestJsonPermission {
}

export interface GetProjectEdgeviewPolicyModulePolicyAppManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAppParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgent {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonOwner[];
    permissions?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonConfiguration {
    customConfigs?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfig[];
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionPortmapto[];
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonPermission {
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeAgentParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeHub {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonOwner[];
    permissions?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonConfiguration {
    customConfigs?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfig[];
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionPortmapto[];
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonPermission {
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface GetProjectEdgeviewPolicyModulePolicyAzureEdgeHubParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface GetProjectEdgeviewPolicyModulePolicyMetric {
    /**
     * Mapping of queries variable keys and value
     */
    queries?: {[key: string]: string};
    /**
     * Mapping of results variable keys and value
     */
    results?: {[key: string]: string};
}

export interface GetProjectEdgeviewPolicyNetworkPolicy {
    /**
     * list of network details that will be created on all the devices of the project to which this policy is attached
     */
    netInstanceConfigs: outputs.GetProjectEdgeviewPolicyNetworkPolicyNetInstanceConfig[];
}

export interface GetProjectEdgeviewPolicyNetworkPolicyNetInstanceConfig {
    /**
     * ID of the Cluster in which the network instance is configured
     */
    clusterId?: string;
    /**
     * Detailed description of the network instance
     */
    description?: string;
    /**
     * Flag to indicate if this is the default network instance for the device
     */
    deviceDefault?: boolean;
    /**
     * ID of the device on which network instance is created
     */
    deviceId: string;
    /**
     * Deprecated
     */
    dhcp?: boolean;
    /**
     * List of Static DNS entries
     */
    dnsLists?: outputs.GetProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigDnsList[];
    /**
     * System defined universally unique ID of the network instance
     */
    id: string;
    /**
     * DHCP Server Configuration
     */
    ips?: outputs.GetProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigIp[];
    /**
     * Kind of Network Instance:
     * NETWORK_INSTANCE_KIND_UNSPECIFIED
     * NETWORK_INSTANCE_KIND_TRANSPARENT
     * NETWORK_INSTANCE_KIND_SWITCH
     * NETWORK_INSTANCE_KIND_LOCAL
     * NETWORK_INSTANCE_KIND_CLOUD
     * NETWORK_INSTANCE_KIND_MESH
     * NETWORK_INSTANCE_KIND_HONEYPOT
     */
    kind: string;
    /**
     * Lisp Config : read only for now. Deprecated.
     */
    lisps: outputs.GetProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigLisp[];
    /**
     * User defined name of the network instance, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * id of the network policy to be attached to this network instance
     */
    networkPolicyId?: string;
    oconfig?: string;
    /**
     * Service specific Config
     */
    opaques?: outputs.GetProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigOpaque[];
    /**
     * name of port mapping in the model
     */
    port?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    portTags?: {[key: string]: string};
    /**
     * id of the project in which network instance is created
     */
    projectId: string;
    /**
     * system defined info for the object
     */
    revisions: outputs.GetProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigRevision[];
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the network instance. Title can be changed at any time
     */
    title: string;
    /**
     * Type of DHCP for this Network Instance:
     * NETWORK_INSTANCE_DHCP_TYPE_V4
     * NETWORK_INSTANCE_DHCP_TYPE_V6
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOEID
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOV4
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOV6
     */
    type: string;
}

export interface GetProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigDnsList {
    /**
     * Addresses
     */
    addrs?: string[];
    /**
     * Host name
     */
    hostname?: string;
}

export interface GetProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigIp {
    /**
     * Range of IP addresses to be used for DHCP
     */
    dhcpRanges?: outputs.GetProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigIpDhcpRange[];
    /**
     * IP Addresses of DNS servers
     */
    dns?: string[];
    /**
     * Network domain
     */
    domain?: string;
    /**
     * IP Address of Network Gateway
     */
    gateway?: string;
    /**
     * Subnet Mask
     */
    mask?: string;
    /**
     * IP Address of NTP Server
     */
    ntp?: string;
    /**
     * Subnet address
     */
    subnet: string;
}

export interface GetProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigIpDhcpRange {
    /**
     * ending IP
     */
    end?: string;
    /**
     * starting IP
     */
    start?: string;
}

export interface GetProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigLisp {
    allocate: boolean;
    allocationprefix: string;
    allocationprefixlen: number;
    exportprivate: boolean;
    lispiid: number;
    sps: outputs.GetProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigLispSp[];
}

export interface GetProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigLispSp {
    credential: string;
    nameOrIp: string;
    type: string;
}

export interface GetProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigOpaque {
    /**
     * Deprecated - Lisp config
     */
    lisps?: outputs.GetProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigOpaqueLisp[];
    /**
     * base64 encoded string of opaque config
     */
    oconfig?: string;
    /**
     * type of Opaque config
     */
    type?: string;
}

export interface GetProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigOpaqueLisp {
    /**
     * Allocate flag
     */
    allocate?: boolean;
    /**
     * Allocation Prefix
     */
    allocationprefix?: string;
    /**
     * Allocation Prefix Length
     */
    allocationprefixlen?: number;
    /**
     * Export Private flag
     */
    exportprivate?: boolean;
    /**
     * lisp id
     */
    lispiid?: number;
    /**
     * Service Point List
     */
    sps?: outputs.GetProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigOpaqueLispSp[];
}

export interface GetProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigOpaqueLispSp {
    /**
     * Service credentials
     */
    credential?: string;
    /**
     * Service name/ service name
     */
    nameOrIp?: string;
    /**
     * Service Point Type
     */
    type?: string;
}

export interface GetProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface GetProjectEdgeviewPolicyRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface GetProjectLocalOperatorConsolePolicy {
    /**
     * app policy, which is used in auto app instance deployment
     */
    appPolicies?: outputs.GetProjectLocalOperatorConsolePolicyAppPolicy[];
    /**
     * attestation policy to enforce on all devices in this project
     */
    attestationPolicies?: outputs.GetProjectLocalOperatorConsolePolicyAttestationPolicy[];
    /**
     * Mapping of policy  variable keys and policy variable values
     */
    attr?: {[key: string]: string};
    /**
     * azure policy, which is used in configuring azure iot-edge.
     */
    azurePolicies?: outputs.GetProjectLocalOperatorConsolePolicyAzurePolicy[];
    /**
     * cluster policy to bring up cluster on devices in this project
     */
    clusterPolicies?: outputs.GetProjectLocalOperatorConsolePolicyClusterPolicy[];
    /**
     * Detailed description of the policy
     */
    description?: string;
    /**
     * edgeview policy on devices of this project
     */
    edgeviewPolicies?: outputs.GetProjectLocalOperatorConsolePolicyEdgeviewPolicy[];
    /**
     * System defined universally unique Id of the policy request
     */
    id: string;
    /**
     * local operator console policy to enforce on all devices in this project
     */
    localOperatorConsolePolicies?: outputs.GetProjectLocalOperatorConsolePolicyLocalOperatorConsolePolicy[];
    /**
     * module policy, which is used in auto module deployment
     */
    modulePolicies?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicy[];
    /**
     * User defined name of the policy request, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * network policy to enforce on all devices in this project
     */
    networkPolicies?: outputs.GetProjectLocalOperatorConsolePolicyNetworkPolicy[];
    /**
     * system defined info
     */
    revisions: outputs.GetProjectLocalOperatorConsolePolicyRevision[];
    /**
     * status of the policy
     */
    status: string;
    /**
     * Detailed status message of the policy
     */
    statusMessage: string;
    /**
     * User defined title of the policy. Title can be changed at any time
     */
    title?: string;
    /**
     * type of policy
     */
    type?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAppPolicy {
    /**
     * list of app details that will be provisioned on all the devices of the project to which this policy is attached
     */
    apps: outputs.GetProjectLocalOperatorConsolePolicyAppPolicyApp[];
}

export interface GetProjectLocalOperatorConsolePolicyAppPolicyApp {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.GetProjectLocalOperatorConsolePolicyAppPolicyAppInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.GetProjectLocalOperatorConsolePolicyAppPolicyAppParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface GetProjectLocalOperatorConsolePolicyAppPolicyAppInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.GetProjectLocalOperatorConsolePolicyAppPolicyAppInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.GetProjectLocalOperatorConsolePolicyAppPolicyAppInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.GetProjectLocalOperatorConsolePolicyAppPolicyAppInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface GetProjectLocalOperatorConsolePolicyAppPolicyAppInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.GetProjectLocalOperatorConsolePolicyAppPolicyAppInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.GetProjectLocalOperatorConsolePolicyAppPolicyAppInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAppPolicyAppInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.GetProjectLocalOperatorConsolePolicyAppPolicyAppInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface GetProjectLocalOperatorConsolePolicyAppPolicyAppInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface GetProjectLocalOperatorConsolePolicyAppPolicyAppInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAppPolicyAppInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.GetProjectLocalOperatorConsolePolicyAppPolicyAppInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface GetProjectLocalOperatorConsolePolicyAppPolicyAppInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface GetProjectLocalOperatorConsolePolicyAppPolicyAppInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonOwner[];
    permissions?: outputs.GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonConfiguration {
    customConfigs?: outputs.GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonConfigurationCustomConfig[];
}

export interface GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonInterfaceAclActionPortmapto[];
}

export interface GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonPermission {
}

export interface GetProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAppPolicyAppParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface GetProjectLocalOperatorConsolePolicyAttestationPolicy {
    /**
     * unique policy id
     */
    id: string;
    /**
     * Attestation policy type
     */
    type: string;
}

export interface GetProjectLocalOperatorConsolePolicyAzurePolicy {
    /**
     * app id for rbac
     */
    appId: string;
    /**
     * app password for rbac
     */
    appPassword: string;
    /**
     * azure resource and service the policy will be interested in
     */
    azureResourceAndServices?: outputs.GetProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndService[];
    /**
     * Certificate object holds the details of certificate like encryption type, validity, subject etc
     */
    certificates?: outputs.GetProjectLocalOperatorConsolePolicyAzurePolicyCertificate[];
    /**
     * key to decrypt AppPassword
     */
    cryptoKey?: string;
    customDeploymentManaged?: boolean;
    /**
     * encrypted AppPassword
     */
    encryptedSecrets?: {[key: string]: string};
    /**
     * tenant id for rbac
     */
    tenantId: string;
}

export interface GetProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndService {
    /**
     * dps service attached to cloud policy
     */
    dpsServices: outputs.GetProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsService[];
    /**
     * list of iothubs attached to cloud policy
     */
    iotHubServices: outputs.GetProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceIotHubService[];
    /**
     * list of resource groups attached to cloud policy
     */
    resourceGroups: outputs.GetProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceResourceGroup[];
}

export interface GetProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsService {
    enrollments?: outputs.GetProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollment[];
    serviceDetails?: outputs.GetProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetail[];
}

export interface GetProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollment {
    allocationPolicy?: string;
    attachedIotHubsNames?: string[];
    certificateEnrollments?: outputs.GetProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollment[];
    enableIotEdgeDevice?: boolean;
    mechanism?: string;
    symmetricKeyEnrollments?: outputs.GetProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollment[];
    tags?: {[key: string]: string};
    tpmEnrollments?: outputs.GetProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentTpmEnrollment[];
}

export interface GetProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollment {
    groupCertificateEnrollments?: outputs.GetProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollmentGroupCertificateEnrollment[];
    individualCertificateEnrollment?: string;
    type?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollmentGroupCertificateEnrollment {
    groupName?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollment {
    groupSymmetricKeyEnrollments?: outputs.GetProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentGroupSymmetricKeyEnrollment[];
    individualSymmetricKeyEnrollments?: outputs.GetProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentIndividualSymmetricKeyEnrollment[];
    type?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentGroupSymmetricKeyEnrollment {
    groupName?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentIndividualSymmetricKeyEnrollment {
    registrationId?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentTpmEnrollment {
    type?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetail {
    createByDefault?: boolean;
    name?: string;
    region?: string;
    resourceGroupName?: string;
    sKUs?: outputs.GetProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetailSKU[];
    subscriptionId?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetailSKU {
    capacity?: string;
    name?: string;
    tier?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceIotHubService {
    serviceDetails?: outputs.GetProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetail[];
}

export interface GetProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetail {
    createByDefault?: boolean;
    name?: string;
    region?: string;
    resourceGroupName?: string;
    sKUs?: outputs.GetProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetailSKU[];
    subscriptionId?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetailSKU {
    capacity?: string;
    name?: string;
    tier?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceResourceGroup {
    /**
     * resource group name
     */
    name: string;
    /**
     * resource group region
     */
    region?: string;
    /**
     * azure subscription id to which resource group is attached
     */
    subscriptionId: string;
}

export interface GetProjectLocalOperatorConsolePolicyAzurePolicyCertificate {
    /**
     * This fields tells the basic constraints like isCA are correct.
     */
    basicContraintsValid?: boolean;
    /**
     * base64 string of the parent certificate
     */
    cert?: string;
    /**
     * Crypto Key for decrypting user secret information
     */
    cryptoKey?: string;
    /**
     * ECDSA encryption algorithm of the certificate
     */
    ecdsaEncryptions?: outputs.GetProjectLocalOperatorConsolePolicyAzurePolicyCertificateEcdsaEncryption[];
    /**
     * user encrypted secrets map
     */
    encryptedSecrets?: {[key: string]: string};
    /**
     * Indicates if the private key can be exported.
     */
    exportable?: boolean;
    /**
     * Sequence of extended key usages.
     */
    extendedKeyUsages?: string[];
    /**
     * Parameters for the issuer of the X509 component of a certificate.
     */
    issuers?: outputs.GetProjectLocalOperatorConsolePolicyAzurePolicyCertificateIssuer[];
    /**
     * Key usage extensions define the purpose of the public key contained in a certificate.
     */
    keyUsage?: number;
    /**
     * pass phase for the pvt key, this has to be filled if pvt key is encrypted with a pass phrase
     */
    passPhrase?: string;
    /**
     * base63 string of the public key
     */
    publicKey?: string;
    /**
     * Public key algorithm.
     */
    publicKeyAlgorithm?: string;
    /**
     * base64 string of the parent pvt key
     */
    pvtKey?: string;
    /**
     * Indicates if the same key pair will be used on certificate renewal.
     */
    reuseKey?: boolean;
    /**
     * RSA encryption algorithm of the certificate
     */
    rsaEcryptions?: outputs.GetProjectLocalOperatorConsolePolicyAzurePolicyCertificateRsaEcryption[];
    /**
     * This holds the alternative name values like URIs, domain names IPs etc.
     */
    sanValues?: outputs.GetProjectLocalOperatorConsolePolicyAzurePolicyCertificateSanValue[];
    /**
     * Unique identifier for each Certificate generated by an Certificate Issuer.
     */
    serialNumber?: string;
    signatureAlgorithm?: string;
    /**
     * Parameters for the subject of the X509 component of a certificate.
     */
    subjects?: outputs.GetProjectLocalOperatorConsolePolicyAzurePolicyCertificateSubject[];
    /**
     * Certificate validatity start time
     */
    validFrom?: string;
    /**
     * Certificate validatity start time
     */
    validTill?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAzurePolicyCertificateEcdsaEncryption {
    /**
     * ECDSA curve to be used while signing the certificate.
     */
    curve?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAzurePolicyCertificateIssuer {
    /**
     * Certificate common name.
     */
    commonName?: string;
    /**
     * List of countries.
     */
    countries?: string[];
    /**
     * List of locallity.
     */
    localities?: string[];
    /**
     * List of Organizational Unit.
     */
    organizationalUnits?: string[];
    /**
     * List of organization.
     */
    organizations?: string[];
    /**
     * List of Postal codes.
     */
    postalCodes?: string[];
    /**
     * List of List of Prvince.
     */
    provinces?: string[];
    /**
     * Subject cerial number
     */
    serialNumber?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAzurePolicyCertificateRsaEcryption {
    /**
     * RSA Encryption Key bit size.
     */
    rsaBits?: string;
}

export interface GetProjectLocalOperatorConsolePolicyAzurePolicyCertificateSanValue {
    /**
     * List of permitted DNS names.
     */
    dns?: string[];
    /**
     * List of permitted email addresses.
     */
    emaildIds?: string[];
    /**
     * List of permitted hosts.
     */
    hosts?: string[];
    /**
     * List of permitted IP addresses.
     */
    ips?: string[];
    /**
     * List of permitted User principal names.
     */
    upns?: string[];
    /**
     * List of permitted URIs.
     */
    uris?: string[];
}

export interface GetProjectLocalOperatorConsolePolicyAzurePolicyCertificateSubject {
    /**
     * Certificate common name.
     */
    commonName?: string;
    /**
     * List of countries.
     */
    countries?: string[];
    /**
     * List of locallity.
     */
    localities?: string[];
    /**
     * List of Organizational Unit.
     */
    organizationalUnits?: string[];
    /**
     * List of organization.
     */
    organizations?: string[];
    /**
     * List of Postal codes.
     */
    postalCodes?: string[];
    /**
     * List of List of Prvince.
     */
    provinces?: string[];
    /**
     * Subject cerial number
     */
    serialNumber?: string;
}

export interface GetProjectLocalOperatorConsolePolicyClusterPolicy {
    /**
     * UUID of the app policy linked to this cluster policy
     */
    appPolicyId: string;
    /**
     * Cluster Policy Parameters
     */
    clusterConfigs?: outputs.GetProjectLocalOperatorConsolePolicyClusterPolicyClusterConfig[];
    /**
     * UUID of the network policy linked to this cluster policy
     */
    networkPolicyId: string;
    /**
     * Type of cluster
     */
    type: string;
}

export interface GetProjectLocalOperatorConsolePolicyClusterPolicyClusterConfig {
    minNodesRequired?: number;
}

export interface GetProjectLocalOperatorConsolePolicyEdgeviewPolicy {
    /**
     * Allow inherit instance to change access policy
     */
    accessAllowChange?: boolean;
    /**
     * Allow device to enable Edgeview in this project
     */
    edgeviewAllow?: boolean;
    /**
     * Edgeview configuration and policies
     */
    edgeviewcfgs?: outputs.GetProjectLocalOperatorConsolePolicyEdgeviewPolicyEdgeviewcfg[];
    /**
     * Maximum seconds allowed for Edgeview session
     */
    maxExpireSec?: number;
    /**
     * Maximum instances allowed for Edgeview
     */
    maxInst?: number;
}

export interface GetProjectLocalOperatorConsolePolicyEdgeviewPolicyEdgeviewcfg {
    appPolicies?: outputs.GetProjectLocalOperatorConsolePolicyEdgeviewPolicyEdgeviewcfgAppPolicy[];
    devPolicies?: outputs.GetProjectLocalOperatorConsolePolicyEdgeviewPolicyEdgeviewcfgDevPolicy[];
    extPolicies?: outputs.GetProjectLocalOperatorConsolePolicyEdgeviewPolicyEdgeviewcfgExtPolicy[];
    generationId?: number;
    jwtInfos?: outputs.GetProjectLocalOperatorConsolePolicyEdgeviewPolicyEdgeviewcfgJwtInfo[];
    token?: string;
}

export interface GetProjectLocalOperatorConsolePolicyEdgeviewPolicyEdgeviewcfgAppPolicy {
    allowApp?: boolean;
}

export interface GetProjectLocalOperatorConsolePolicyEdgeviewPolicyEdgeviewcfgDevPolicy {
    allowDev?: boolean;
}

export interface GetProjectLocalOperatorConsolePolicyEdgeviewPolicyEdgeviewcfgExtPolicy {
    allowExt?: boolean;
}

export interface GetProjectLocalOperatorConsolePolicyEdgeviewPolicyEdgeviewcfgJwtInfo {
    allowSec?: number;
    dispUrl?: string;
    encrypt?: boolean;
    expireSec: string;
    numInst?: number;
}

export interface GetProjectLocalOperatorConsolePolicyLocalOperatorConsolePolicy {
    /**
     * unique policy id
     */
    id: string;
    /**
     * Local operator console URL
     */
    locUrl: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicy {
    /**
     * list of app details that will be provisioned on all the devices of the project to which this policy is attached
     */
    apps: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyApp[];
    /**
     * app that describes the azure edge agent to be deployed on the Azure runtime
     */
    azureEdgeAgents?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgent[];
    /**
     * app that describes the azure edge hub to be deployed on the Azure runtime
     */
    azureEdgeHubs?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHub[];
    /**
     * etag for deployment
     */
    etag?: string;
    /**
     * unique id for deployment
     */
    id: string;
    /**
     * Mapping of label variable keys and value
     */
    labels?: {[key: string]: string};
    /**
     * custom metrics for deployment
     */
    metrics?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyMetric[];
    /**
     * deployment priority of module manifest
     */
    priority: number;
    /**
     * Mapping of routes variable keys and value
     */
    routes?: {[key: string]: string};
    /**
     * target condition for deployment that matches single device or group of devices
     */
    targetCondition?: string;
    /**
     * target condition for deployment that matches single device or group of devices
     */
    targetConditionNew?: {[key: string]: string};
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyApp {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAppInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAppParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAppInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAppInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAppInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAppInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAppInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAppInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAppInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAppInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAppInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAppInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAppInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAppInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAppInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAppInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAppInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonOwner[];
    permissions?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonConfiguration {
    customConfigs?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonConfigurationCustomConfig[];
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonInterfaceAclActionPortmapto[];
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonPermission {
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAppParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgent {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonOwner[];
    permissions?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonConfiguration {
    customConfigs?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfig[];
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionPortmapto[];
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonPermission {
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHub {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonOwner[];
    permissions?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonConfiguration {
    customConfigs?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfig[];
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionPortmapto[];
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonPermission {
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface GetProjectLocalOperatorConsolePolicyModulePolicyMetric {
    /**
     * Mapping of queries variable keys and value
     */
    queries?: {[key: string]: string};
    /**
     * Mapping of results variable keys and value
     */
    results?: {[key: string]: string};
}

export interface GetProjectLocalOperatorConsolePolicyNetworkPolicy {
    /**
     * list of network details that will be created on all the devices of the project to which this policy is attached
     */
    netInstanceConfigs: outputs.GetProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfig[];
}

export interface GetProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfig {
    /**
     * ID of the Cluster in which the network instance is configured
     */
    clusterId?: string;
    /**
     * Detailed description of the network instance
     */
    description?: string;
    /**
     * Flag to indicate if this is the default network instance for the device
     */
    deviceDefault?: boolean;
    /**
     * ID of the device on which network instance is created
     */
    deviceId: string;
    /**
     * Deprecated
     */
    dhcp?: boolean;
    /**
     * List of Static DNS entries
     */
    dnsLists?: outputs.GetProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigDnsList[];
    /**
     * System defined universally unique ID of the network instance
     */
    id: string;
    /**
     * DHCP Server Configuration
     */
    ips?: outputs.GetProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigIp[];
    /**
     * Kind of Network Instance:
     * NETWORK_INSTANCE_KIND_UNSPECIFIED
     * NETWORK_INSTANCE_KIND_TRANSPARENT
     * NETWORK_INSTANCE_KIND_SWITCH
     * NETWORK_INSTANCE_KIND_LOCAL
     * NETWORK_INSTANCE_KIND_CLOUD
     * NETWORK_INSTANCE_KIND_MESH
     * NETWORK_INSTANCE_KIND_HONEYPOT
     */
    kind: string;
    /**
     * Lisp Config : read only for now. Deprecated.
     */
    lisps: outputs.GetProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigLisp[];
    /**
     * User defined name of the network instance, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * id of the network policy to be attached to this network instance
     */
    networkPolicyId?: string;
    oconfig?: string;
    /**
     * Service specific Config
     */
    opaques?: outputs.GetProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigOpaque[];
    /**
     * name of port mapping in the model
     */
    port?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    portTags?: {[key: string]: string};
    /**
     * id of the project in which network instance is created
     */
    projectId: string;
    /**
     * system defined info for the object
     */
    revisions: outputs.GetProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigRevision[];
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the network instance. Title can be changed at any time
     */
    title: string;
    /**
     * Type of DHCP for this Network Instance:
     * NETWORK_INSTANCE_DHCP_TYPE_V4
     * NETWORK_INSTANCE_DHCP_TYPE_V6
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOEID
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOV4
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOV6
     */
    type: string;
}

export interface GetProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigDnsList {
    /**
     * Addresses
     */
    addrs?: string[];
    /**
     * Host name
     */
    hostname?: string;
}

export interface GetProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigIp {
    /**
     * Range of IP addresses to be used for DHCP
     */
    dhcpRanges?: outputs.GetProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigIpDhcpRange[];
    /**
     * IP Addresses of DNS servers
     */
    dns?: string[];
    /**
     * Network domain
     */
    domain?: string;
    /**
     * IP Address of Network Gateway
     */
    gateway?: string;
    /**
     * Subnet Mask
     */
    mask?: string;
    /**
     * IP Address of NTP Server
     */
    ntp?: string;
    /**
     * Subnet address
     */
    subnet: string;
}

export interface GetProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigIpDhcpRange {
    /**
     * ending IP
     */
    end?: string;
    /**
     * starting IP
     */
    start?: string;
}

export interface GetProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigLisp {
    allocate: boolean;
    allocationprefix: string;
    allocationprefixlen: number;
    exportprivate: boolean;
    lispiid: number;
    sps: outputs.GetProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigLispSp[];
}

export interface GetProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigLispSp {
    credential: string;
    nameOrIp: string;
    type: string;
}

export interface GetProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigOpaque {
    /**
     * Deprecated - Lisp config
     */
    lisps?: outputs.GetProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigOpaqueLisp[];
    /**
     * base64 encoded string of opaque config
     */
    oconfig?: string;
    /**
     * type of Opaque config
     */
    type?: string;
}

export interface GetProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigOpaqueLisp {
    /**
     * Allocate flag
     */
    allocate?: boolean;
    /**
     * Allocation Prefix
     */
    allocationprefix?: string;
    /**
     * Allocation Prefix Length
     */
    allocationprefixlen?: number;
    /**
     * Export Private flag
     */
    exportprivate?: boolean;
    /**
     * lisp id
     */
    lispiid?: number;
    /**
     * Service Point List
     */
    sps?: outputs.GetProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigOpaqueLispSp[];
}

export interface GetProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigOpaqueLispSp {
    /**
     * Service credentials
     */
    credential?: string;
    /**
     * Service name/ service name
     */
    nameOrIp?: string;
    /**
     * Service Point Type
     */
    type?: string;
}

export interface GetProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface GetProjectLocalOperatorConsolePolicyRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface GetProjectModulePolicy {
    appPolicies: outputs.GetProjectModulePolicyAppPolicy[];
    attestationPolicies: outputs.GetProjectModulePolicyAttestationPolicy[];
    attr: {[key: string]: string};
    azurePolicies: outputs.GetProjectModulePolicyAzurePolicy[];
    clusterPolicies: outputs.GetProjectModulePolicyClusterPolicy[];
    description: string;
    edgeviewPolicies: outputs.GetProjectModulePolicyEdgeviewPolicy[];
    id: string;
    localOperatorConsolePolicies: outputs.GetProjectModulePolicyLocalOperatorConsolePolicy[];
    modulePolicies: outputs.GetProjectModulePolicyModulePolicy[];
    name: string;
    networkPolicies: outputs.GetProjectModulePolicyNetworkPolicy[];
    revisions: outputs.GetProjectModulePolicyRevision[];
    status: string;
    statusMessage: string;
    title: string;
    type: string;
}

export interface GetProjectModulePolicyAppPolicy {
    apps: outputs.GetProjectModulePolicyAppPolicyApp[];
}

export interface GetProjectModulePolicyAppPolicyApp {
    appId: string;
    appVersion: string;
    cpus: number;
    description: string;
    drives: number;
    id: string;
    interfaces: outputs.GetProjectModulePolicyAppPolicyAppInterface[];
    manifestJsons: outputs.GetProjectModulePolicyAppPolicyAppManifestJson[];
    memory: number;
    name: string;
    nameAppPart: string;
    nameProjectPart: string;
    namingScheme: string;
    networks: number;
    originType: string;
    parentDetails: outputs.GetProjectModulePolicyAppPolicyAppParentDetail[];
    startDelayInSeconds: number;
    storage: number;
    tags: {[key: string]: string};
    title: string;
}

export interface GetProjectModulePolicyAppPolicyAppInterface {
    accessVlanId: number;
    acls: outputs.GetProjectModulePolicyAppPolicyAppInterfaceAcl[];
    defaultNetInstance: boolean;
    directattach: boolean;
    eidregisters: outputs.GetProjectModulePolicyAppPolicyAppInterfaceEidregister[];
    intfname: string;
    intforder: number;
    ios: outputs.GetProjectModulePolicyAppPolicyAppInterfaceIo[];
    ipaddr: string;
    macaddr: string;
    netinstid: string;
    netinstname: string;
    netinsttag: {[key: string]: string};
    netname: string;
    privateip: boolean;
}

export interface GetProjectModulePolicyAppPolicyAppInterfaceAcl {
    actions: outputs.GetProjectModulePolicyAppPolicyAppInterfaceAclAction[];
    id: number;
    matches: outputs.GetProjectModulePolicyAppPolicyAppInterfaceAclMatch[];
    name: string;
}

export interface GetProjectModulePolicyAppPolicyAppInterfaceAclAction {
    drop: boolean;
    limit: boolean;
    limitburst: number;
    limitrate: number;
    limitunit: string;
    mapparams: outputs.GetProjectModulePolicyAppPolicyAppInterfaceAclActionMapparam[];
    portmap: boolean;
}

export interface GetProjectModulePolicyAppPolicyAppInterfaceAclActionMapparam {
    port: number;
}

export interface GetProjectModulePolicyAppPolicyAppInterfaceAclMatch {
    type: string;
    value: string;
}

export interface GetProjectModulePolicyAppPolicyAppInterfaceEidregister {
    appCert: string;
    appPrivateKey: string;
    appPublicKey: string;
    displayName: string;
    eId: string;
    eIdHashLen: number;
    lispInstance: number;
    lispMapServers: outputs.GetProjectModulePolicyAppPolicyAppInterfaceEidregisterLispMapServer[];
    lispSignature: string;
    uuid: string;
}

export interface GetProjectModulePolicyAppPolicyAppInterfaceEidregisterLispMapServer {
    credential: string;
    nameOrIp: string;
}

export interface GetProjectModulePolicyAppPolicyAppInterfaceIo {
    name: string;
    tags: {[key: string]: string};
    type: string;
}

export interface GetProjectModulePolicyAppPolicyAppManifestJson {
    acKind: string;
    acVersion: string;
    appType: string;
    configurations: outputs.GetProjectModulePolicyAppPolicyAppManifestJsonConfiguration[];
    containerDetails: outputs.GetProjectModulePolicyAppPolicyAppManifestJsonContainerDetail[];
    cpuPinningEnabled: boolean;
    deploymentType: string;
    description: string;
    descs: outputs.GetProjectModulePolicyAppPolicyAppManifestJsonDesc[];
    displayName: string;
    enablevnc: boolean;
    images: outputs.GetProjectModulePolicyAppPolicyAppManifestJsonImage[];
    interfaces: outputs.GetProjectModulePolicyAppPolicyAppManifestJsonInterface[];
    modules: outputs.GetProjectModulePolicyAppPolicyAppManifestJsonModule[];
    name: string;
    owners: outputs.GetProjectModulePolicyAppPolicyAppManifestJsonOwner[];
    permissions: outputs.GetProjectModulePolicyAppPolicyAppManifestJsonPermission[];
    resources: outputs.GetProjectModulePolicyAppPolicyAppManifestJsonResource[];
    vmmode: string;
}

export interface GetProjectModulePolicyAppPolicyAppManifestJsonConfiguration {
    customConfigs: outputs.GetProjectModulePolicyAppPolicyAppManifestJsonConfigurationCustomConfig[];
}

export interface GetProjectModulePolicyAppPolicyAppManifestJsonConfigurationCustomConfig {
    add: boolean;
    allowStorageResize: boolean;
    fieldDelimiter: string;
    name: string;
    override: boolean;
    template: string;
    variableGroups: outputs.GetProjectModulePolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface GetProjectModulePolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroup {
    conditions: outputs.GetProjectModulePolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    name: string;
    required: boolean;
    variables: outputs.GetProjectModulePolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface GetProjectModulePolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name: string;
    operator: string;
    value: string;
}

export interface GetProjectModulePolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable {
    default: string;
    encode: string;
    format: string;
    label: string;
    maxLength: string;
    name: string;
    options: outputs.GetProjectModulePolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput: string;
    required: boolean;
    type: string;
    value: string;
}

export interface GetProjectModulePolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    label: string;
    value: string;
}

export interface GetProjectModulePolicyAppPolicyAppManifestJsonContainerDetail {
    containerCreateOption: string;
}

export interface GetProjectModulePolicyAppPolicyAppManifestJsonDesc {
    agreementList: {[key: string]: string};
    appCategory: string;
    category: string;
    licenseList: {[key: string]: string};
    logo: {[key: string]: string};
    os: string;
    screenshotList: {[key: string]: string};
    support: string;
}

export interface GetProjectModulePolicyAppPolicyAppManifestJsonImage {
    cleartext: boolean;
    drvtype: string;
    ignorepurge: boolean;
    imageformat: string;
    imageid: string;
    imagename: string;
    maxsize: string;
    mountpath: string;
    params: outputs.GetProjectModulePolicyAppPolicyAppManifestJsonImageParam[];
    preserve: boolean;
    readonly: boolean;
    target: string;
    volumelabel: string;
}

export interface GetProjectModulePolicyAppPolicyAppManifestJsonImageParam {
    name: string;
    value: string;
}

export interface GetProjectModulePolicyAppPolicyAppManifestJsonInterface {
    acls: outputs.GetProjectModulePolicyAppPolicyAppManifestJsonInterfaceAcl[];
    directattach: boolean;
    name: string;
    optional: boolean;
    privateip: boolean;
    type: string;
}

export interface GetProjectModulePolicyAppPolicyAppManifestJsonInterfaceAcl {
    actions: outputs.GetProjectModulePolicyAppPolicyAppManifestJsonInterfaceAclAction[];
    matches: outputs.GetProjectModulePolicyAppPolicyAppManifestJsonInterfaceAclMatch[];
    name: string;
}

export interface GetProjectModulePolicyAppPolicyAppManifestJsonInterfaceAclAction {
    drop: boolean;
    limit: boolean;
    limitValues: outputs.GetProjectModulePolicyAppPolicyAppManifestJsonInterfaceAclActionLimitValue[];
    limitburst: number;
    limitrate: number;
    limitunit: string;
    portmap: boolean;
    portmaptos: outputs.GetProjectModulePolicyAppPolicyAppManifestJsonInterfaceAclActionPortmapto[];
}

export interface GetProjectModulePolicyAppPolicyAppManifestJsonInterfaceAclActionLimitValue {
    limitburst: number;
    limitrate: number;
    limitunit: string;
}

export interface GetProjectModulePolicyAppPolicyAppManifestJsonInterfaceAclActionPortmapto {
    appPort: number;
}

export interface GetProjectModulePolicyAppPolicyAppManifestJsonInterfaceAclMatch {
    type: string;
    value: string;
}

export interface GetProjectModulePolicyAppPolicyAppManifestJsonModule {
    environment: {[key: string]: string};
    moduleType: string;
    routes: {[key: string]: string};
    twinDetail: string;
}

export interface GetProjectModulePolicyAppPolicyAppManifestJsonOwner {
    company: string;
    email: string;
    group: string;
    user: string;
    website: string;
}

export interface GetProjectModulePolicyAppPolicyAppManifestJsonPermission {
}

export interface GetProjectModulePolicyAppPolicyAppManifestJsonResource {
    name: string;
    value: string;
}

export interface GetProjectModulePolicyAppPolicyAppParentDetail {
    idOfParentObject: string;
    referenceExists: boolean;
    updateAvailable: boolean;
    versionOfParentObject: number;
}

export interface GetProjectModulePolicyAttestationPolicy {
    id: string;
    type: string;
}

export interface GetProjectModulePolicyAzurePolicy {
    appId: string;
    appPassword: string;
    azureResourceAndServices: outputs.GetProjectModulePolicyAzurePolicyAzureResourceAndService[];
    certificates: outputs.GetProjectModulePolicyAzurePolicyCertificate[];
    cryptoKey: string;
    customDeploymentManaged: boolean;
    encryptedSecrets: {[key: string]: string};
    tenantId: string;
}

export interface GetProjectModulePolicyAzurePolicyAzureResourceAndService {
    dpsServices: outputs.GetProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsService[];
    iotHubServices: outputs.GetProjectModulePolicyAzurePolicyAzureResourceAndServiceIotHubService[];
    resourceGroups: outputs.GetProjectModulePolicyAzurePolicyAzureResourceAndServiceResourceGroup[];
}

export interface GetProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsService {
    enrollments: outputs.GetProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollment[];
    serviceDetails: outputs.GetProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetail[];
}

export interface GetProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollment {
    allocationPolicy: string;
    attachedIotHubsNames: string[];
    certificateEnrollments: outputs.GetProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollment[];
    enableIotEdgeDevice: boolean;
    mechanism: string;
    symmetricKeyEnrollments: outputs.GetProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollment[];
    tags: {[key: string]: string};
    tpmEnrollments: outputs.GetProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentTpmEnrollment[];
}

export interface GetProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollment {
    groupCertificateEnrollments: outputs.GetProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollmentGroupCertificateEnrollment[];
    individualCertificateEnrollment: string;
    type: string;
}

export interface GetProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollmentGroupCertificateEnrollment {
    groupName: string;
}

export interface GetProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollment {
    groupSymmetricKeyEnrollments: outputs.GetProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentGroupSymmetricKeyEnrollment[];
    individualSymmetricKeyEnrollments: outputs.GetProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentIndividualSymmetricKeyEnrollment[];
    type: string;
}

export interface GetProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentGroupSymmetricKeyEnrollment {
    groupName: string;
}

export interface GetProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentIndividualSymmetricKeyEnrollment {
    registrationId: string;
}

export interface GetProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentTpmEnrollment {
    type: string;
}

export interface GetProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetail {
    createByDefault: boolean;
    name: string;
    region: string;
    resourceGroupName: string;
    sKUs: outputs.GetProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetailSKU[];
    subscriptionId: string;
}

export interface GetProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetailSKU {
    capacity: string;
    name: string;
    tier: string;
}

export interface GetProjectModulePolicyAzurePolicyAzureResourceAndServiceIotHubService {
    serviceDetails: outputs.GetProjectModulePolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetail[];
}

export interface GetProjectModulePolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetail {
    createByDefault: boolean;
    name: string;
    region: string;
    resourceGroupName: string;
    sKUs: outputs.GetProjectModulePolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetailSKU[];
    subscriptionId: string;
}

export interface GetProjectModulePolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetailSKU {
    capacity: string;
    name: string;
    tier: string;
}

export interface GetProjectModulePolicyAzurePolicyAzureResourceAndServiceResourceGroup {
    name: string;
    region: string;
    subscriptionId: string;
}

export interface GetProjectModulePolicyAzurePolicyCertificate {
    basicContraintsValid: boolean;
    cert: string;
    cryptoKey: string;
    ecdsaEncryptions: outputs.GetProjectModulePolicyAzurePolicyCertificateEcdsaEncryption[];
    encryptedSecrets: {[key: string]: string};
    exportable: boolean;
    extendedKeyUsages: string[];
    issuers: outputs.GetProjectModulePolicyAzurePolicyCertificateIssuer[];
    keyUsage: number;
    passPhrase: string;
    publicKey: string;
    publicKeyAlgorithm: string;
    pvtKey: string;
    reuseKey: boolean;
    rsaEcryptions: outputs.GetProjectModulePolicyAzurePolicyCertificateRsaEcryption[];
    sanValues: outputs.GetProjectModulePolicyAzurePolicyCertificateSanValue[];
    serialNumber: string;
    signatureAlgorithm: string;
    subjects: outputs.GetProjectModulePolicyAzurePolicyCertificateSubject[];
    validFrom: string;
    validTill: string;
}

export interface GetProjectModulePolicyAzurePolicyCertificateEcdsaEncryption {
    curve: string;
}

export interface GetProjectModulePolicyAzurePolicyCertificateIssuer {
    commonName: string;
    countries: string[];
    localities: string[];
    organizationalUnits: string[];
    organizations: string[];
    postalCodes: string[];
    provinces: string[];
    serialNumber: string;
}

export interface GetProjectModulePolicyAzurePolicyCertificateRsaEcryption {
    rsaBits: string;
}

export interface GetProjectModulePolicyAzurePolicyCertificateSanValue {
    dns: string[];
    emaildIds: string[];
    hosts: string[];
    ips: string[];
    upns: string[];
    uris: string[];
}

export interface GetProjectModulePolicyAzurePolicyCertificateSubject {
    commonName: string;
    countries: string[];
    localities: string[];
    organizationalUnits: string[];
    organizations: string[];
    postalCodes: string[];
    provinces: string[];
    serialNumber: string;
}

export interface GetProjectModulePolicyClusterPolicy {
    appPolicyId: string;
    clusterConfigs: outputs.GetProjectModulePolicyClusterPolicyClusterConfig[];
    networkPolicyId: string;
    type: string;
}

export interface GetProjectModulePolicyClusterPolicyClusterConfig {
    minNodesRequired: number;
}

export interface GetProjectModulePolicyEdgeviewPolicy {
    accessAllowChange: boolean;
    edgeviewAllow: boolean;
    edgeviewcfgs: outputs.GetProjectModulePolicyEdgeviewPolicyEdgeviewcfg[];
    maxExpireSec: number;
    maxInst: number;
}

export interface GetProjectModulePolicyEdgeviewPolicyEdgeviewcfg {
    appPolicies: outputs.GetProjectModulePolicyEdgeviewPolicyEdgeviewcfgAppPolicy[];
    devPolicies: outputs.GetProjectModulePolicyEdgeviewPolicyEdgeviewcfgDevPolicy[];
    extPolicies: outputs.GetProjectModulePolicyEdgeviewPolicyEdgeviewcfgExtPolicy[];
    generationId: number;
    jwtInfos: outputs.GetProjectModulePolicyEdgeviewPolicyEdgeviewcfgJwtInfo[];
    token: string;
}

export interface GetProjectModulePolicyEdgeviewPolicyEdgeviewcfgAppPolicy {
    allowApp: boolean;
}

export interface GetProjectModulePolicyEdgeviewPolicyEdgeviewcfgDevPolicy {
    allowDev: boolean;
}

export interface GetProjectModulePolicyEdgeviewPolicyEdgeviewcfgExtPolicy {
    allowExt: boolean;
}

export interface GetProjectModulePolicyEdgeviewPolicyEdgeviewcfgJwtInfo {
    allowSec: number;
    dispUrl: string;
    encrypt: boolean;
    expireSec: string;
    numInst: number;
}

export interface GetProjectModulePolicyLocalOperatorConsolePolicy {
    id: string;
    locUrl: string;
}

export interface GetProjectModulePolicyModulePolicy {
    apps: outputs.GetProjectModulePolicyModulePolicyApp[];
    azureEdgeAgents: outputs.GetProjectModulePolicyModulePolicyAzureEdgeAgent[];
    azureEdgeHubs: outputs.GetProjectModulePolicyModulePolicyAzureEdgeHub[];
    etag: string;
    id: string;
    labels: {[key: string]: string};
    metrics: outputs.GetProjectModulePolicyModulePolicyMetric[];
    priority: number;
    routes: {[key: string]: string};
    targetCondition: string;
    targetConditionNew: {[key: string]: string};
}

export interface GetProjectModulePolicyModulePolicyApp {
    appId: string;
    appVersion: string;
    cpus: number;
    description: string;
    drives: number;
    id: string;
    interfaces: outputs.GetProjectModulePolicyModulePolicyAppInterface[];
    manifestJsons: outputs.GetProjectModulePolicyModulePolicyAppManifestJson[];
    memory: number;
    name: string;
    nameAppPart: string;
    nameProjectPart: string;
    namingScheme: string;
    networks: number;
    originType: string;
    parentDetails: outputs.GetProjectModulePolicyModulePolicyAppParentDetail[];
    startDelayInSeconds: number;
    storage: number;
    tags: {[key: string]: string};
    title: string;
}

export interface GetProjectModulePolicyModulePolicyAppInterface {
    accessVlanId: number;
    acls: outputs.GetProjectModulePolicyModulePolicyAppInterfaceAcl[];
    defaultNetInstance: boolean;
    directattach: boolean;
    eidregisters: outputs.GetProjectModulePolicyModulePolicyAppInterfaceEidregister[];
    intfname: string;
    intforder: number;
    ios: outputs.GetProjectModulePolicyModulePolicyAppInterfaceIo[];
    ipaddr: string;
    macaddr: string;
    netinstid: string;
    netinstname: string;
    netinsttag: {[key: string]: string};
    netname: string;
    privateip: boolean;
}

export interface GetProjectModulePolicyModulePolicyAppInterfaceAcl {
    actions: outputs.GetProjectModulePolicyModulePolicyAppInterfaceAclAction[];
    id: number;
    matches: outputs.GetProjectModulePolicyModulePolicyAppInterfaceAclMatch[];
    name: string;
}

export interface GetProjectModulePolicyModulePolicyAppInterfaceAclAction {
    drop: boolean;
    limit: boolean;
    limitburst: number;
    limitrate: number;
    limitunit: string;
    mapparams: outputs.GetProjectModulePolicyModulePolicyAppInterfaceAclActionMapparam[];
    portmap: boolean;
}

export interface GetProjectModulePolicyModulePolicyAppInterfaceAclActionMapparam {
    port: number;
}

export interface GetProjectModulePolicyModulePolicyAppInterfaceAclMatch {
    type: string;
    value: string;
}

export interface GetProjectModulePolicyModulePolicyAppInterfaceEidregister {
    appCert: string;
    appPrivateKey: string;
    appPublicKey: string;
    displayName: string;
    eId: string;
    eIdHashLen: number;
    lispInstance: number;
    lispMapServers: outputs.GetProjectModulePolicyModulePolicyAppInterfaceEidregisterLispMapServer[];
    lispSignature: string;
    uuid: string;
}

export interface GetProjectModulePolicyModulePolicyAppInterfaceEidregisterLispMapServer {
    credential: string;
    nameOrIp: string;
}

export interface GetProjectModulePolicyModulePolicyAppInterfaceIo {
    name: string;
    tags: {[key: string]: string};
    type: string;
}

export interface GetProjectModulePolicyModulePolicyAppManifestJson {
    acKind: string;
    acVersion: string;
    appType: string;
    configurations: outputs.GetProjectModulePolicyModulePolicyAppManifestJsonConfiguration[];
    containerDetails: outputs.GetProjectModulePolicyModulePolicyAppManifestJsonContainerDetail[];
    cpuPinningEnabled: boolean;
    deploymentType: string;
    description: string;
    descs: outputs.GetProjectModulePolicyModulePolicyAppManifestJsonDesc[];
    displayName: string;
    enablevnc: boolean;
    images: outputs.GetProjectModulePolicyModulePolicyAppManifestJsonImage[];
    interfaces: outputs.GetProjectModulePolicyModulePolicyAppManifestJsonInterface[];
    modules: outputs.GetProjectModulePolicyModulePolicyAppManifestJsonModule[];
    name: string;
    owners: outputs.GetProjectModulePolicyModulePolicyAppManifestJsonOwner[];
    permissions: outputs.GetProjectModulePolicyModulePolicyAppManifestJsonPermission[];
    resources: outputs.GetProjectModulePolicyModulePolicyAppManifestJsonResource[];
    vmmode: string;
}

export interface GetProjectModulePolicyModulePolicyAppManifestJsonConfiguration {
    customConfigs: outputs.GetProjectModulePolicyModulePolicyAppManifestJsonConfigurationCustomConfig[];
}

export interface GetProjectModulePolicyModulePolicyAppManifestJsonConfigurationCustomConfig {
    add: boolean;
    allowStorageResize: boolean;
    fieldDelimiter: string;
    name: string;
    override: boolean;
    template: string;
    variableGroups: outputs.GetProjectModulePolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface GetProjectModulePolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroup {
    conditions: outputs.GetProjectModulePolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    name: string;
    required: boolean;
    variables: outputs.GetProjectModulePolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface GetProjectModulePolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name: string;
    operator: string;
    value: string;
}

export interface GetProjectModulePolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable {
    default: string;
    encode: string;
    format: string;
    label: string;
    maxLength: string;
    name: string;
    options: outputs.GetProjectModulePolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput: string;
    required: boolean;
    type: string;
    value: string;
}

export interface GetProjectModulePolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    label: string;
    value: string;
}

export interface GetProjectModulePolicyModulePolicyAppManifestJsonContainerDetail {
    containerCreateOption: string;
}

export interface GetProjectModulePolicyModulePolicyAppManifestJsonDesc {
    agreementList: {[key: string]: string};
    appCategory: string;
    category: string;
    licenseList: {[key: string]: string};
    logo: {[key: string]: string};
    os: string;
    screenshotList: {[key: string]: string};
    support: string;
}

export interface GetProjectModulePolicyModulePolicyAppManifestJsonImage {
    cleartext: boolean;
    drvtype: string;
    ignorepurge: boolean;
    imageformat: string;
    imageid: string;
    imagename: string;
    maxsize: string;
    mountpath: string;
    params: outputs.GetProjectModulePolicyModulePolicyAppManifestJsonImageParam[];
    preserve: boolean;
    readonly: boolean;
    target: string;
    volumelabel: string;
}

export interface GetProjectModulePolicyModulePolicyAppManifestJsonImageParam {
    name: string;
    value: string;
}

export interface GetProjectModulePolicyModulePolicyAppManifestJsonInterface {
    acls: outputs.GetProjectModulePolicyModulePolicyAppManifestJsonInterfaceAcl[];
    directattach: boolean;
    name: string;
    optional: boolean;
    privateip: boolean;
    type: string;
}

export interface GetProjectModulePolicyModulePolicyAppManifestJsonInterfaceAcl {
    actions: outputs.GetProjectModulePolicyModulePolicyAppManifestJsonInterfaceAclAction[];
    matches: outputs.GetProjectModulePolicyModulePolicyAppManifestJsonInterfaceAclMatch[];
    name: string;
}

export interface GetProjectModulePolicyModulePolicyAppManifestJsonInterfaceAclAction {
    drop: boolean;
    limit: boolean;
    limitValues: outputs.GetProjectModulePolicyModulePolicyAppManifestJsonInterfaceAclActionLimitValue[];
    limitburst: number;
    limitrate: number;
    limitunit: string;
    portmap: boolean;
    portmaptos: outputs.GetProjectModulePolicyModulePolicyAppManifestJsonInterfaceAclActionPortmapto[];
}

export interface GetProjectModulePolicyModulePolicyAppManifestJsonInterfaceAclActionLimitValue {
    limitburst: number;
    limitrate: number;
    limitunit: string;
}

export interface GetProjectModulePolicyModulePolicyAppManifestJsonInterfaceAclActionPortmapto {
    appPort: number;
}

export interface GetProjectModulePolicyModulePolicyAppManifestJsonInterfaceAclMatch {
    type: string;
    value: string;
}

export interface GetProjectModulePolicyModulePolicyAppManifestJsonModule {
    environment: {[key: string]: string};
    moduleType: string;
    routes: {[key: string]: string};
    twinDetail: string;
}

export interface GetProjectModulePolicyModulePolicyAppManifestJsonOwner {
    company: string;
    email: string;
    group: string;
    user: string;
    website: string;
}

export interface GetProjectModulePolicyModulePolicyAppManifestJsonPermission {
}

export interface GetProjectModulePolicyModulePolicyAppManifestJsonResource {
    name: string;
    value: string;
}

export interface GetProjectModulePolicyModulePolicyAppParentDetail {
    idOfParentObject: string;
    referenceExists: boolean;
    updateAvailable: boolean;
    versionOfParentObject: number;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeAgent {
    appId: string;
    appVersion: string;
    cpus: number;
    description: string;
    drives: number;
    id: string;
    interfaces: outputs.GetProjectModulePolicyModulePolicyAzureEdgeAgentInterface[];
    manifestJsons: outputs.GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJson[];
    memory: number;
    name: string;
    nameAppPart: string;
    nameProjectPart: string;
    namingScheme: string;
    networks: number;
    originType: string;
    parentDetails: outputs.GetProjectModulePolicyModulePolicyAzureEdgeAgentParentDetail[];
    startDelayInSeconds: number;
    storage: number;
    tags: {[key: string]: string};
    title: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeAgentInterface {
    accessVlanId: number;
    acls: outputs.GetProjectModulePolicyModulePolicyAzureEdgeAgentInterfaceAcl[];
    defaultNetInstance: boolean;
    directattach: boolean;
    eidregisters: outputs.GetProjectModulePolicyModulePolicyAzureEdgeAgentInterfaceEidregister[];
    intfname: string;
    intforder: number;
    ios: outputs.GetProjectModulePolicyModulePolicyAzureEdgeAgentInterfaceIo[];
    ipaddr: string;
    macaddr: string;
    netinstid: string;
    netinstname: string;
    netinsttag: {[key: string]: string};
    netname: string;
    privateip: boolean;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeAgentInterfaceAcl {
    actions: outputs.GetProjectModulePolicyModulePolicyAzureEdgeAgentInterfaceAclAction[];
    id: number;
    matches: outputs.GetProjectModulePolicyModulePolicyAzureEdgeAgentInterfaceAclMatch[];
    name: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeAgentInterfaceAclAction {
    drop: boolean;
    limit: boolean;
    limitburst: number;
    limitrate: number;
    limitunit: string;
    mapparams: outputs.GetProjectModulePolicyModulePolicyAzureEdgeAgentInterfaceAclActionMapparam[];
    portmap: boolean;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeAgentInterfaceAclActionMapparam {
    port: number;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeAgentInterfaceAclMatch {
    type: string;
    value: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeAgentInterfaceEidregister {
    appCert: string;
    appPrivateKey: string;
    appPublicKey: string;
    displayName: string;
    eId: string;
    eIdHashLen: number;
    lispInstance: number;
    lispMapServers: outputs.GetProjectModulePolicyModulePolicyAzureEdgeAgentInterfaceEidregisterLispMapServer[];
    lispSignature: string;
    uuid: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeAgentInterfaceEidregisterLispMapServer {
    credential: string;
    nameOrIp: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeAgentInterfaceIo {
    name: string;
    tags: {[key: string]: string};
    type: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJson {
    acKind: string;
    acVersion: string;
    appType: string;
    configurations: outputs.GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonConfiguration[];
    containerDetails: outputs.GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonContainerDetail[];
    cpuPinningEnabled: boolean;
    deploymentType: string;
    description: string;
    descs: outputs.GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonDesc[];
    displayName: string;
    enablevnc: boolean;
    images: outputs.GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonImage[];
    interfaces: outputs.GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonInterface[];
    modules: outputs.GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonModule[];
    name: string;
    owners: outputs.GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonOwner[];
    permissions: outputs.GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonPermission[];
    resources: outputs.GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonResource[];
    vmmode: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonConfiguration {
    customConfigs: outputs.GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfig[];
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfig {
    add: boolean;
    allowStorageResize: boolean;
    fieldDelimiter: string;
    name: string;
    override: boolean;
    template: string;
    variableGroups: outputs.GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroup {
    conditions: outputs.GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    name: string;
    required: boolean;
    variables: outputs.GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name: string;
    operator: string;
    value: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariable {
    default: string;
    encode: string;
    format: string;
    label: string;
    maxLength: string;
    name: string;
    options: outputs.GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput: string;
    required: boolean;
    type: string;
    value: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    label: string;
    value: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonContainerDetail {
    containerCreateOption: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonDesc {
    agreementList: {[key: string]: string};
    appCategory: string;
    category: string;
    licenseList: {[key: string]: string};
    logo: {[key: string]: string};
    os: string;
    screenshotList: {[key: string]: string};
    support: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonImage {
    cleartext: boolean;
    drvtype: string;
    ignorepurge: boolean;
    imageformat: string;
    imageid: string;
    imagename: string;
    maxsize: string;
    mountpath: string;
    params: outputs.GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonImageParam[];
    preserve: boolean;
    readonly: boolean;
    target: string;
    volumelabel: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonImageParam {
    name: string;
    value: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonInterface {
    acls: outputs.GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAcl[];
    directattach: boolean;
    name: string;
    optional: boolean;
    privateip: boolean;
    type: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAcl {
    actions: outputs.GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclAction[];
    matches: outputs.GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclMatch[];
    name: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclAction {
    drop: boolean;
    limit: boolean;
    limitValues: outputs.GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionLimitValue[];
    limitburst: number;
    limitrate: number;
    limitunit: string;
    portmap: boolean;
    portmaptos: outputs.GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionPortmapto[];
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionLimitValue {
    limitburst: number;
    limitrate: number;
    limitunit: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionPortmapto {
    appPort: number;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclMatch {
    type: string;
    value: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonModule {
    environment: {[key: string]: string};
    moduleType: string;
    routes: {[key: string]: string};
    twinDetail: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonOwner {
    company: string;
    email: string;
    group: string;
    user: string;
    website: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonPermission {
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonResource {
    name: string;
    value: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeAgentParentDetail {
    idOfParentObject: string;
    referenceExists: boolean;
    updateAvailable: boolean;
    versionOfParentObject: number;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeHub {
    appId: string;
    appVersion: string;
    cpus: number;
    description: string;
    drives: number;
    id: string;
    interfaces: outputs.GetProjectModulePolicyModulePolicyAzureEdgeHubInterface[];
    manifestJsons: outputs.GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJson[];
    memory: number;
    name: string;
    nameAppPart: string;
    nameProjectPart: string;
    namingScheme: string;
    networks: number;
    originType: string;
    parentDetails: outputs.GetProjectModulePolicyModulePolicyAzureEdgeHubParentDetail[];
    startDelayInSeconds: number;
    storage: number;
    tags: {[key: string]: string};
    title: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeHubInterface {
    accessVlanId: number;
    acls: outputs.GetProjectModulePolicyModulePolicyAzureEdgeHubInterfaceAcl[];
    defaultNetInstance: boolean;
    directattach: boolean;
    eidregisters: outputs.GetProjectModulePolicyModulePolicyAzureEdgeHubInterfaceEidregister[];
    intfname: string;
    intforder: number;
    ios: outputs.GetProjectModulePolicyModulePolicyAzureEdgeHubInterfaceIo[];
    ipaddr: string;
    macaddr: string;
    netinstid: string;
    netinstname: string;
    netinsttag: {[key: string]: string};
    netname: string;
    privateip: boolean;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeHubInterfaceAcl {
    actions: outputs.GetProjectModulePolicyModulePolicyAzureEdgeHubInterfaceAclAction[];
    id: number;
    matches: outputs.GetProjectModulePolicyModulePolicyAzureEdgeHubInterfaceAclMatch[];
    name: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeHubInterfaceAclAction {
    drop: boolean;
    limit: boolean;
    limitburst: number;
    limitrate: number;
    limitunit: string;
    mapparams: outputs.GetProjectModulePolicyModulePolicyAzureEdgeHubInterfaceAclActionMapparam[];
    portmap: boolean;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeHubInterfaceAclActionMapparam {
    port: number;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeHubInterfaceAclMatch {
    type: string;
    value: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeHubInterfaceEidregister {
    appCert: string;
    appPrivateKey: string;
    appPublicKey: string;
    displayName: string;
    eId: string;
    eIdHashLen: number;
    lispInstance: number;
    lispMapServers: outputs.GetProjectModulePolicyModulePolicyAzureEdgeHubInterfaceEidregisterLispMapServer[];
    lispSignature: string;
    uuid: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeHubInterfaceEidregisterLispMapServer {
    credential: string;
    nameOrIp: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeHubInterfaceIo {
    name: string;
    tags: {[key: string]: string};
    type: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJson {
    acKind: string;
    acVersion: string;
    appType: string;
    configurations: outputs.GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonConfiguration[];
    containerDetails: outputs.GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonContainerDetail[];
    cpuPinningEnabled: boolean;
    deploymentType: string;
    description: string;
    descs: outputs.GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonDesc[];
    displayName: string;
    enablevnc: boolean;
    images: outputs.GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonImage[];
    interfaces: outputs.GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonInterface[];
    modules: outputs.GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonModule[];
    name: string;
    owners: outputs.GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonOwner[];
    permissions: outputs.GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonPermission[];
    resources: outputs.GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonResource[];
    vmmode: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonConfiguration {
    customConfigs: outputs.GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfig[];
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfig {
    add: boolean;
    allowStorageResize: boolean;
    fieldDelimiter: string;
    name: string;
    override: boolean;
    template: string;
    variableGroups: outputs.GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroup {
    conditions: outputs.GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    name: string;
    required: boolean;
    variables: outputs.GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name: string;
    operator: string;
    value: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariable {
    default: string;
    encode: string;
    format: string;
    label: string;
    maxLength: string;
    name: string;
    options: outputs.GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput: string;
    required: boolean;
    type: string;
    value: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    label: string;
    value: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonContainerDetail {
    containerCreateOption: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonDesc {
    agreementList: {[key: string]: string};
    appCategory: string;
    category: string;
    licenseList: {[key: string]: string};
    logo: {[key: string]: string};
    os: string;
    screenshotList: {[key: string]: string};
    support: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonImage {
    cleartext: boolean;
    drvtype: string;
    ignorepurge: boolean;
    imageformat: string;
    imageid: string;
    imagename: string;
    maxsize: string;
    mountpath: string;
    params: outputs.GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonImageParam[];
    preserve: boolean;
    readonly: boolean;
    target: string;
    volumelabel: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonImageParam {
    name: string;
    value: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonInterface {
    acls: outputs.GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAcl[];
    directattach: boolean;
    name: string;
    optional: boolean;
    privateip: boolean;
    type: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAcl {
    actions: outputs.GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclAction[];
    matches: outputs.GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclMatch[];
    name: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclAction {
    drop: boolean;
    limit: boolean;
    limitValues: outputs.GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionLimitValue[];
    limitburst: number;
    limitrate: number;
    limitunit: string;
    portmap: boolean;
    portmaptos: outputs.GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionPortmapto[];
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionLimitValue {
    limitburst: number;
    limitrate: number;
    limitunit: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionPortmapto {
    appPort: number;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclMatch {
    type: string;
    value: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonModule {
    environment: {[key: string]: string};
    moduleType: string;
    routes: {[key: string]: string};
    twinDetail: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonOwner {
    company: string;
    email: string;
    group: string;
    user: string;
    website: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonPermission {
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonResource {
    name: string;
    value: string;
}

export interface GetProjectModulePolicyModulePolicyAzureEdgeHubParentDetail {
    idOfParentObject: string;
    referenceExists: boolean;
    updateAvailable: boolean;
    versionOfParentObject: number;
}

export interface GetProjectModulePolicyModulePolicyMetric {
    queries: {[key: string]: string};
    results: {[key: string]: string};
}

export interface GetProjectModulePolicyNetworkPolicy {
    netInstanceConfigs: outputs.GetProjectModulePolicyNetworkPolicyNetInstanceConfig[];
}

export interface GetProjectModulePolicyNetworkPolicyNetInstanceConfig {
    clusterId: string;
    description: string;
    deviceDefault: boolean;
    deviceId: string;
    dhcp: boolean;
    dnsLists: outputs.GetProjectModulePolicyNetworkPolicyNetInstanceConfigDnsList[];
    id: string;
    ips: outputs.GetProjectModulePolicyNetworkPolicyNetInstanceConfigIp[];
    kind: string;
    lisps: outputs.GetProjectModulePolicyNetworkPolicyNetInstanceConfigLisp[];
    name: string;
    networkPolicyId: string;
    oconfig: string;
    opaques: outputs.GetProjectModulePolicyNetworkPolicyNetInstanceConfigOpaque[];
    port: string;
    portTags: {[key: string]: string};
    projectId: string;
    revisions: outputs.GetProjectModulePolicyNetworkPolicyNetInstanceConfigRevision[];
    tags: {[key: string]: string};
    title: string;
    type: string;
}

export interface GetProjectModulePolicyNetworkPolicyNetInstanceConfigDnsList {
    addrs: string[];
    hostname: string;
}

export interface GetProjectModulePolicyNetworkPolicyNetInstanceConfigIp {
    dhcpRanges: outputs.GetProjectModulePolicyNetworkPolicyNetInstanceConfigIpDhcpRange[];
    dns: string[];
    domain: string;
    gateway: string;
    mask: string;
    ntp: string;
    subnet: string;
}

export interface GetProjectModulePolicyNetworkPolicyNetInstanceConfigIpDhcpRange {
    end: string;
    start: string;
}

export interface GetProjectModulePolicyNetworkPolicyNetInstanceConfigLisp {
    allocate: boolean;
    allocationprefix: string;
    allocationprefixlen: number;
    exportprivate: boolean;
    lispiid: number;
    sps: outputs.GetProjectModulePolicyNetworkPolicyNetInstanceConfigLispSp[];
}

export interface GetProjectModulePolicyNetworkPolicyNetInstanceConfigLispSp {
    credential: string;
    nameOrIp: string;
    type: string;
}

export interface GetProjectModulePolicyNetworkPolicyNetInstanceConfigOpaque {
    lisps: outputs.GetProjectModulePolicyNetworkPolicyNetInstanceConfigOpaqueLisp[];
    oconfig: string;
    type: string;
}

export interface GetProjectModulePolicyNetworkPolicyNetInstanceConfigOpaqueLisp {
    allocate: boolean;
    allocationprefix: string;
    allocationprefixlen: number;
    exportprivate: boolean;
    lispiid: number;
    sps: outputs.GetProjectModulePolicyNetworkPolicyNetInstanceConfigOpaqueLispSp[];
}

export interface GetProjectModulePolicyNetworkPolicyNetInstanceConfigOpaqueLispSp {
    credential: string;
    nameOrIp: string;
    type: string;
}

export interface GetProjectModulePolicyNetworkPolicyNetInstanceConfigRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface GetProjectModulePolicyRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface GetProjectNetworkPolicy {
    /**
     * app policy, which is used in auto app instance deployment
     */
    appPolicies?: outputs.GetProjectNetworkPolicyAppPolicy[];
    /**
     * attestation policy to enforce on all devices in this project
     */
    attestationPolicies?: outputs.GetProjectNetworkPolicyAttestationPolicy[];
    /**
     * Mapping of policy  variable keys and policy variable values
     */
    attr?: {[key: string]: string};
    /**
     * azure policy, which is used in configuring azure iot-edge.
     */
    azurePolicies?: outputs.GetProjectNetworkPolicyAzurePolicy[];
    /**
     * cluster policy to bring up cluster on devices in this project
     */
    clusterPolicies?: outputs.GetProjectNetworkPolicyClusterPolicy[];
    /**
     * Detailed description of the policy
     */
    description?: string;
    /**
     * edgeview policy on devices of this project
     */
    edgeviewPolicies?: outputs.GetProjectNetworkPolicyEdgeviewPolicy[];
    /**
     * System defined universally unique Id of the policy request
     */
    id: string;
    /**
     * local operator console policy to enforce on all devices in this project
     */
    localOperatorConsolePolicies?: outputs.GetProjectNetworkPolicyLocalOperatorConsolePolicy[];
    /**
     * module policy, which is used in auto module deployment
     */
    modulePolicies?: outputs.GetProjectNetworkPolicyModulePolicy[];
    /**
     * User defined name of the policy request, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * network policy to enforce on all devices in this project
     */
    networkPolicies?: outputs.GetProjectNetworkPolicyNetworkPolicy[];
    /**
     * system defined info
     */
    revisions: outputs.GetProjectNetworkPolicyRevision[];
    /**
     * status of the policy
     */
    status: string;
    /**
     * Detailed status message of the policy
     */
    statusMessage: string;
    /**
     * User defined title of the policy. Title can be changed at any time
     */
    title?: string;
    /**
     * type of policy
     */
    type?: string;
}

export interface GetProjectNetworkPolicyAppPolicy {
    /**
     * list of app details that will be provisioned on all the devices of the project to which this policy is attached
     */
    apps: outputs.GetProjectNetworkPolicyAppPolicyApp[];
}

export interface GetProjectNetworkPolicyAppPolicyApp {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.GetProjectNetworkPolicyAppPolicyAppInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.GetProjectNetworkPolicyAppPolicyAppManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.GetProjectNetworkPolicyAppPolicyAppParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface GetProjectNetworkPolicyAppPolicyAppInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.GetProjectNetworkPolicyAppPolicyAppInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.GetProjectNetworkPolicyAppPolicyAppInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.GetProjectNetworkPolicyAppPolicyAppInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface GetProjectNetworkPolicyAppPolicyAppInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.GetProjectNetworkPolicyAppPolicyAppInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.GetProjectNetworkPolicyAppPolicyAppInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface GetProjectNetworkPolicyAppPolicyAppInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.GetProjectNetworkPolicyAppPolicyAppInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface GetProjectNetworkPolicyAppPolicyAppInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface GetProjectNetworkPolicyAppPolicyAppInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface GetProjectNetworkPolicyAppPolicyAppInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.GetProjectNetworkPolicyAppPolicyAppInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface GetProjectNetworkPolicyAppPolicyAppInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface GetProjectNetworkPolicyAppPolicyAppInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface GetProjectNetworkPolicyAppPolicyAppManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.GetProjectNetworkPolicyAppPolicyAppManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.GetProjectNetworkPolicyAppPolicyAppManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.GetProjectNetworkPolicyAppPolicyAppManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.GetProjectNetworkPolicyAppPolicyAppManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.GetProjectNetworkPolicyAppPolicyAppManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.GetProjectNetworkPolicyAppPolicyAppManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.GetProjectNetworkPolicyAppPolicyAppManifestJsonOwner[];
    permissions?: outputs.GetProjectNetworkPolicyAppPolicyAppManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.GetProjectNetworkPolicyAppPolicyAppManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface GetProjectNetworkPolicyAppPolicyAppManifestJsonConfiguration {
    customConfigs?: outputs.GetProjectNetworkPolicyAppPolicyAppManifestJsonConfigurationCustomConfig[];
}

export interface GetProjectNetworkPolicyAppPolicyAppManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.GetProjectNetworkPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface GetProjectNetworkPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.GetProjectNetworkPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.GetProjectNetworkPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface GetProjectNetworkPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface GetProjectNetworkPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.GetProjectNetworkPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface GetProjectNetworkPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface GetProjectNetworkPolicyAppPolicyAppManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface GetProjectNetworkPolicyAppPolicyAppManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface GetProjectNetworkPolicyAppPolicyAppManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.GetProjectNetworkPolicyAppPolicyAppManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface GetProjectNetworkPolicyAppPolicyAppManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface GetProjectNetworkPolicyAppPolicyAppManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.GetProjectNetworkPolicyAppPolicyAppManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface GetProjectNetworkPolicyAppPolicyAppManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.GetProjectNetworkPolicyAppPolicyAppManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.GetProjectNetworkPolicyAppPolicyAppManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface GetProjectNetworkPolicyAppPolicyAppManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.GetProjectNetworkPolicyAppPolicyAppManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.GetProjectNetworkPolicyAppPolicyAppManifestJsonInterfaceAclActionPortmapto[];
}

export interface GetProjectNetworkPolicyAppPolicyAppManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface GetProjectNetworkPolicyAppPolicyAppManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface GetProjectNetworkPolicyAppPolicyAppManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface GetProjectNetworkPolicyAppPolicyAppManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface GetProjectNetworkPolicyAppPolicyAppManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface GetProjectNetworkPolicyAppPolicyAppManifestJsonPermission {
}

export interface GetProjectNetworkPolicyAppPolicyAppManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface GetProjectNetworkPolicyAppPolicyAppParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface GetProjectNetworkPolicyAttestationPolicy {
    /**
     * unique policy id
     */
    id: string;
    /**
     * Attestation policy type
     */
    type: string;
}

export interface GetProjectNetworkPolicyAzurePolicy {
    /**
     * app id for rbac
     */
    appId: string;
    /**
     * app password for rbac
     */
    appPassword: string;
    /**
     * azure resource and service the policy will be interested in
     */
    azureResourceAndServices?: outputs.GetProjectNetworkPolicyAzurePolicyAzureResourceAndService[];
    /**
     * Certificate object holds the details of certificate like encryption type, validity, subject etc
     */
    certificates?: outputs.GetProjectNetworkPolicyAzurePolicyCertificate[];
    /**
     * key to decrypt AppPassword
     */
    cryptoKey?: string;
    customDeploymentManaged?: boolean;
    /**
     * encrypted AppPassword
     */
    encryptedSecrets?: {[key: string]: string};
    /**
     * tenant id for rbac
     */
    tenantId: string;
}

export interface GetProjectNetworkPolicyAzurePolicyAzureResourceAndService {
    /**
     * dps service attached to cloud policy
     */
    dpsServices: outputs.GetProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsService[];
    /**
     * list of iothubs attached to cloud policy
     */
    iotHubServices: outputs.GetProjectNetworkPolicyAzurePolicyAzureResourceAndServiceIotHubService[];
    /**
     * list of resource groups attached to cloud policy
     */
    resourceGroups: outputs.GetProjectNetworkPolicyAzurePolicyAzureResourceAndServiceResourceGroup[];
}

export interface GetProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsService {
    enrollments?: outputs.GetProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollment[];
    serviceDetails?: outputs.GetProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetail[];
}

export interface GetProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollment {
    allocationPolicy?: string;
    attachedIotHubsNames?: string[];
    certificateEnrollments?: outputs.GetProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollment[];
    enableIotEdgeDevice?: boolean;
    mechanism?: string;
    symmetricKeyEnrollments?: outputs.GetProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollment[];
    tags?: {[key: string]: string};
    tpmEnrollments?: outputs.GetProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentTpmEnrollment[];
}

export interface GetProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollment {
    groupCertificateEnrollments?: outputs.GetProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollmentGroupCertificateEnrollment[];
    individualCertificateEnrollment?: string;
    type?: string;
}

export interface GetProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollmentGroupCertificateEnrollment {
    groupName?: string;
}

export interface GetProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollment {
    groupSymmetricKeyEnrollments?: outputs.GetProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentGroupSymmetricKeyEnrollment[];
    individualSymmetricKeyEnrollments?: outputs.GetProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentIndividualSymmetricKeyEnrollment[];
    type?: string;
}

export interface GetProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentGroupSymmetricKeyEnrollment {
    groupName?: string;
}

export interface GetProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentIndividualSymmetricKeyEnrollment {
    registrationId?: string;
}

export interface GetProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentTpmEnrollment {
    type?: string;
}

export interface GetProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetail {
    createByDefault?: boolean;
    name?: string;
    region?: string;
    resourceGroupName?: string;
    sKUs?: outputs.GetProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetailSKU[];
    subscriptionId?: string;
}

export interface GetProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetailSKU {
    capacity?: string;
    name?: string;
    tier?: string;
}

export interface GetProjectNetworkPolicyAzurePolicyAzureResourceAndServiceIotHubService {
    serviceDetails?: outputs.GetProjectNetworkPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetail[];
}

export interface GetProjectNetworkPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetail {
    createByDefault?: boolean;
    name?: string;
    region?: string;
    resourceGroupName?: string;
    sKUs?: outputs.GetProjectNetworkPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetailSKU[];
    subscriptionId?: string;
}

export interface GetProjectNetworkPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetailSKU {
    capacity?: string;
    name?: string;
    tier?: string;
}

export interface GetProjectNetworkPolicyAzurePolicyAzureResourceAndServiceResourceGroup {
    /**
     * resource group name
     */
    name: string;
    /**
     * resource group region
     */
    region?: string;
    /**
     * azure subscription id to which resource group is attached
     */
    subscriptionId: string;
}

export interface GetProjectNetworkPolicyAzurePolicyCertificate {
    /**
     * This fields tells the basic constraints like isCA are correct.
     */
    basicContraintsValid?: boolean;
    /**
     * base64 string of the parent certificate
     */
    cert?: string;
    /**
     * Crypto Key for decrypting user secret information
     */
    cryptoKey?: string;
    /**
     * ECDSA encryption algorithm of the certificate
     */
    ecdsaEncryptions?: outputs.GetProjectNetworkPolicyAzurePolicyCertificateEcdsaEncryption[];
    /**
     * user encrypted secrets map
     */
    encryptedSecrets?: {[key: string]: string};
    /**
     * Indicates if the private key can be exported.
     */
    exportable?: boolean;
    /**
     * Sequence of extended key usages.
     */
    extendedKeyUsages?: string[];
    /**
     * Parameters for the issuer of the X509 component of a certificate.
     */
    issuers?: outputs.GetProjectNetworkPolicyAzurePolicyCertificateIssuer[];
    /**
     * Key usage extensions define the purpose of the public key contained in a certificate.
     */
    keyUsage?: number;
    /**
     * pass phase for the pvt key, this has to be filled if pvt key is encrypted with a pass phrase
     */
    passPhrase?: string;
    /**
     * base63 string of the public key
     */
    publicKey?: string;
    /**
     * Public key algorithm.
     */
    publicKeyAlgorithm?: string;
    /**
     * base64 string of the parent pvt key
     */
    pvtKey?: string;
    /**
     * Indicates if the same key pair will be used on certificate renewal.
     */
    reuseKey?: boolean;
    /**
     * RSA encryption algorithm of the certificate
     */
    rsaEcryptions?: outputs.GetProjectNetworkPolicyAzurePolicyCertificateRsaEcryption[];
    /**
     * This holds the alternative name values like URIs, domain names IPs etc.
     */
    sanValues?: outputs.GetProjectNetworkPolicyAzurePolicyCertificateSanValue[];
    /**
     * Unique identifier for each Certificate generated by an Certificate Issuer.
     */
    serialNumber?: string;
    signatureAlgorithm?: string;
    /**
     * Parameters for the subject of the X509 component of a certificate.
     */
    subjects?: outputs.GetProjectNetworkPolicyAzurePolicyCertificateSubject[];
    /**
     * Certificate validatity start time
     */
    validFrom?: string;
    /**
     * Certificate validatity start time
     */
    validTill?: string;
}

export interface GetProjectNetworkPolicyAzurePolicyCertificateEcdsaEncryption {
    /**
     * ECDSA curve to be used while signing the certificate.
     */
    curve?: string;
}

export interface GetProjectNetworkPolicyAzurePolicyCertificateIssuer {
    /**
     * Certificate common name.
     */
    commonName?: string;
    /**
     * List of countries.
     */
    countries?: string[];
    /**
     * List of locallity.
     */
    localities?: string[];
    /**
     * List of Organizational Unit.
     */
    organizationalUnits?: string[];
    /**
     * List of organization.
     */
    organizations?: string[];
    /**
     * List of Postal codes.
     */
    postalCodes?: string[];
    /**
     * List of List of Prvince.
     */
    provinces?: string[];
    /**
     * Subject cerial number
     */
    serialNumber?: string;
}

export interface GetProjectNetworkPolicyAzurePolicyCertificateRsaEcryption {
    /**
     * RSA Encryption Key bit size.
     */
    rsaBits?: string;
}

export interface GetProjectNetworkPolicyAzurePolicyCertificateSanValue {
    /**
     * List of permitted DNS names.
     */
    dns?: string[];
    /**
     * List of permitted email addresses.
     */
    emaildIds?: string[];
    /**
     * List of permitted hosts.
     */
    hosts?: string[];
    /**
     * List of permitted IP addresses.
     */
    ips?: string[];
    /**
     * List of permitted User principal names.
     */
    upns?: string[];
    /**
     * List of permitted URIs.
     */
    uris?: string[];
}

export interface GetProjectNetworkPolicyAzurePolicyCertificateSubject {
    /**
     * Certificate common name.
     */
    commonName?: string;
    /**
     * List of countries.
     */
    countries?: string[];
    /**
     * List of locallity.
     */
    localities?: string[];
    /**
     * List of Organizational Unit.
     */
    organizationalUnits?: string[];
    /**
     * List of organization.
     */
    organizations?: string[];
    /**
     * List of Postal codes.
     */
    postalCodes?: string[];
    /**
     * List of List of Prvince.
     */
    provinces?: string[];
    /**
     * Subject cerial number
     */
    serialNumber?: string;
}

export interface GetProjectNetworkPolicyClusterPolicy {
    /**
     * UUID of the app policy linked to this cluster policy
     */
    appPolicyId: string;
    /**
     * Cluster Policy Parameters
     */
    clusterConfigs?: outputs.GetProjectNetworkPolicyClusterPolicyClusterConfig[];
    /**
     * UUID of the network policy linked to this cluster policy
     */
    networkPolicyId: string;
    /**
     * Type of cluster
     */
    type: string;
}

export interface GetProjectNetworkPolicyClusterPolicyClusterConfig {
    minNodesRequired?: number;
}

export interface GetProjectNetworkPolicyEdgeviewPolicy {
    /**
     * Allow inherit instance to change access policy
     */
    accessAllowChange?: boolean;
    /**
     * Allow device to enable Edgeview in this project
     */
    edgeviewAllow?: boolean;
    /**
     * Edgeview configuration and policies
     */
    edgeviewcfgs?: outputs.GetProjectNetworkPolicyEdgeviewPolicyEdgeviewcfg[];
    /**
     * Maximum seconds allowed for Edgeview session
     */
    maxExpireSec?: number;
    /**
     * Maximum instances allowed for Edgeview
     */
    maxInst?: number;
}

export interface GetProjectNetworkPolicyEdgeviewPolicyEdgeviewcfg {
    appPolicies?: outputs.GetProjectNetworkPolicyEdgeviewPolicyEdgeviewcfgAppPolicy[];
    devPolicies?: outputs.GetProjectNetworkPolicyEdgeviewPolicyEdgeviewcfgDevPolicy[];
    extPolicies?: outputs.GetProjectNetworkPolicyEdgeviewPolicyEdgeviewcfgExtPolicy[];
    generationId?: number;
    jwtInfos?: outputs.GetProjectNetworkPolicyEdgeviewPolicyEdgeviewcfgJwtInfo[];
    token?: string;
}

export interface GetProjectNetworkPolicyEdgeviewPolicyEdgeviewcfgAppPolicy {
    allowApp?: boolean;
}

export interface GetProjectNetworkPolicyEdgeviewPolicyEdgeviewcfgDevPolicy {
    allowDev?: boolean;
}

export interface GetProjectNetworkPolicyEdgeviewPolicyEdgeviewcfgExtPolicy {
    allowExt?: boolean;
}

export interface GetProjectNetworkPolicyEdgeviewPolicyEdgeviewcfgJwtInfo {
    allowSec?: number;
    dispUrl?: string;
    encrypt?: boolean;
    expireSec: string;
    numInst?: number;
}

export interface GetProjectNetworkPolicyLocalOperatorConsolePolicy {
    /**
     * unique policy id
     */
    id: string;
    /**
     * Local operator console URL
     */
    locUrl: string;
}

export interface GetProjectNetworkPolicyModulePolicy {
    /**
     * list of app details that will be provisioned on all the devices of the project to which this policy is attached
     */
    apps: outputs.GetProjectNetworkPolicyModulePolicyApp[];
    /**
     * app that describes the azure edge agent to be deployed on the Azure runtime
     */
    azureEdgeAgents?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeAgent[];
    /**
     * app that describes the azure edge hub to be deployed on the Azure runtime
     */
    azureEdgeHubs?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeHub[];
    /**
     * etag for deployment
     */
    etag?: string;
    /**
     * unique id for deployment
     */
    id: string;
    /**
     * Mapping of label variable keys and value
     */
    labels?: {[key: string]: string};
    /**
     * custom metrics for deployment
     */
    metrics?: outputs.GetProjectNetworkPolicyModulePolicyMetric[];
    /**
     * deployment priority of module manifest
     */
    priority: number;
    /**
     * Mapping of routes variable keys and value
     */
    routes?: {[key: string]: string};
    /**
     * target condition for deployment that matches single device or group of devices
     */
    targetCondition?: string;
    /**
     * target condition for deployment that matches single device or group of devices
     */
    targetConditionNew?: {[key: string]: string};
}

export interface GetProjectNetworkPolicyModulePolicyApp {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.GetProjectNetworkPolicyModulePolicyAppInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.GetProjectNetworkPolicyModulePolicyAppManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.GetProjectNetworkPolicyModulePolicyAppParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface GetProjectNetworkPolicyModulePolicyAppInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.GetProjectNetworkPolicyModulePolicyAppInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.GetProjectNetworkPolicyModulePolicyAppInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.GetProjectNetworkPolicyModulePolicyAppInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface GetProjectNetworkPolicyModulePolicyAppInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.GetProjectNetworkPolicyModulePolicyAppInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.GetProjectNetworkPolicyModulePolicyAppInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAppInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.GetProjectNetworkPolicyModulePolicyAppInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface GetProjectNetworkPolicyModulePolicyAppInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface GetProjectNetworkPolicyModulePolicyAppInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAppInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.GetProjectNetworkPolicyModulePolicyAppInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface GetProjectNetworkPolicyModulePolicyAppInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface GetProjectNetworkPolicyModulePolicyAppInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAppManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.GetProjectNetworkPolicyModulePolicyAppManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.GetProjectNetworkPolicyModulePolicyAppManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.GetProjectNetworkPolicyModulePolicyAppManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.GetProjectNetworkPolicyModulePolicyAppManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.GetProjectNetworkPolicyModulePolicyAppManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.GetProjectNetworkPolicyModulePolicyAppManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.GetProjectNetworkPolicyModulePolicyAppManifestJsonOwner[];
    permissions?: outputs.GetProjectNetworkPolicyModulePolicyAppManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.GetProjectNetworkPolicyModulePolicyAppManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAppManifestJsonConfiguration {
    customConfigs?: outputs.GetProjectNetworkPolicyModulePolicyAppManifestJsonConfigurationCustomConfig[];
}

export interface GetProjectNetworkPolicyModulePolicyAppManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.GetProjectNetworkPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface GetProjectNetworkPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.GetProjectNetworkPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.GetProjectNetworkPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface GetProjectNetworkPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.GetProjectNetworkPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAppManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAppManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAppManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.GetProjectNetworkPolicyModulePolicyAppManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAppManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAppManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.GetProjectNetworkPolicyModulePolicyAppManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAppManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.GetProjectNetworkPolicyModulePolicyAppManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.GetProjectNetworkPolicyModulePolicyAppManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAppManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.GetProjectNetworkPolicyModulePolicyAppManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.GetProjectNetworkPolicyModulePolicyAppManifestJsonInterfaceAclActionPortmapto[];
}

export interface GetProjectNetworkPolicyModulePolicyAppManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAppManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface GetProjectNetworkPolicyModulePolicyAppManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAppManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAppManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAppManifestJsonPermission {
}

export interface GetProjectNetworkPolicyModulePolicyAppManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAppParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeAgent {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeAgentInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeAgentParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeAgentInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeAgentInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeAgentInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeAgentInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeAgentInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeAgentInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeAgentInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeAgentInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeAgentInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeAgentInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeAgentInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeAgentInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeAgentInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeAgentInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeAgentInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonOwner[];
    permissions?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonConfiguration {
    customConfigs?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfig[];
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionPortmapto[];
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonPermission {
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeAgentParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeHub {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeHubInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeHubParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeHubInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeHubInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeHubInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeHubInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeHubInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeHubInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeHubInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeHubInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeHubInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeHubInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeHubInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeHubInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeHubInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeHubInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeHubInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonOwner[];
    permissions?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonConfiguration {
    customConfigs?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfig[];
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionPortmapto[];
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonPermission {
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface GetProjectNetworkPolicyModulePolicyAzureEdgeHubParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface GetProjectNetworkPolicyModulePolicyMetric {
    /**
     * Mapping of queries variable keys and value
     */
    queries?: {[key: string]: string};
    /**
     * Mapping of results variable keys and value
     */
    results?: {[key: string]: string};
}

export interface GetProjectNetworkPolicyNetworkPolicy {
    /**
     * list of network details that will be created on all the devices of the project to which this policy is attached
     */
    netInstanceConfigs: outputs.GetProjectNetworkPolicyNetworkPolicyNetInstanceConfig[];
}

export interface GetProjectNetworkPolicyNetworkPolicyNetInstanceConfig {
    /**
     * ID of the Cluster in which the network instance is configured
     */
    clusterId?: string;
    /**
     * Detailed description of the network instance
     */
    description?: string;
    /**
     * Flag to indicate if this is the default network instance for the device
     */
    deviceDefault?: boolean;
    /**
     * ID of the device on which network instance is created
     */
    deviceId: string;
    /**
     * Deprecated
     */
    dhcp?: boolean;
    /**
     * List of Static DNS entries
     */
    dnsLists?: outputs.GetProjectNetworkPolicyNetworkPolicyNetInstanceConfigDnsList[];
    /**
     * System defined universally unique ID of the network instance
     */
    id: string;
    /**
     * DHCP Server Configuration
     */
    ips?: outputs.GetProjectNetworkPolicyNetworkPolicyNetInstanceConfigIp[];
    /**
     * Kind of Network Instance:
     * NETWORK_INSTANCE_KIND_UNSPECIFIED
     * NETWORK_INSTANCE_KIND_TRANSPARENT
     * NETWORK_INSTANCE_KIND_SWITCH
     * NETWORK_INSTANCE_KIND_LOCAL
     * NETWORK_INSTANCE_KIND_CLOUD
     * NETWORK_INSTANCE_KIND_MESH
     * NETWORK_INSTANCE_KIND_HONEYPOT
     */
    kind: string;
    /**
     * Lisp Config : read only for now. Deprecated.
     */
    lisps: outputs.GetProjectNetworkPolicyNetworkPolicyNetInstanceConfigLisp[];
    /**
     * User defined name of the network instance, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * id of the network policy to be attached to this network instance
     */
    networkPolicyId?: string;
    oconfig?: string;
    /**
     * Service specific Config
     */
    opaques?: outputs.GetProjectNetworkPolicyNetworkPolicyNetInstanceConfigOpaque[];
    /**
     * name of port mapping in the model
     */
    port?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    portTags?: {[key: string]: string};
    /**
     * id of the project in which network instance is created
     */
    projectId: string;
    /**
     * system defined info for the object
     */
    revisions: outputs.GetProjectNetworkPolicyNetworkPolicyNetInstanceConfigRevision[];
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the network instance. Title can be changed at any time
     */
    title: string;
    /**
     * Type of DHCP for this Network Instance:
     * NETWORK_INSTANCE_DHCP_TYPE_V4
     * NETWORK_INSTANCE_DHCP_TYPE_V6
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOEID
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOV4
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOV6
     */
    type: string;
}

export interface GetProjectNetworkPolicyNetworkPolicyNetInstanceConfigDnsList {
    /**
     * Addresses
     */
    addrs?: string[];
    /**
     * Host name
     */
    hostname?: string;
}

export interface GetProjectNetworkPolicyNetworkPolicyNetInstanceConfigIp {
    /**
     * Range of IP addresses to be used for DHCP
     */
    dhcpRanges?: outputs.GetProjectNetworkPolicyNetworkPolicyNetInstanceConfigIpDhcpRange[];
    /**
     * IP Addresses of DNS servers
     */
    dns?: string[];
    /**
     * Network domain
     */
    domain?: string;
    /**
     * IP Address of Network Gateway
     */
    gateway?: string;
    /**
     * Subnet Mask
     */
    mask?: string;
    /**
     * IP Address of NTP Server
     */
    ntp?: string;
    /**
     * Subnet address
     */
    subnet: string;
}

export interface GetProjectNetworkPolicyNetworkPolicyNetInstanceConfigIpDhcpRange {
    /**
     * ending IP
     */
    end?: string;
    /**
     * starting IP
     */
    start?: string;
}

export interface GetProjectNetworkPolicyNetworkPolicyNetInstanceConfigLisp {
    allocate: boolean;
    allocationprefix: string;
    allocationprefixlen: number;
    exportprivate: boolean;
    lispiid: number;
    sps: outputs.GetProjectNetworkPolicyNetworkPolicyNetInstanceConfigLispSp[];
}

export interface GetProjectNetworkPolicyNetworkPolicyNetInstanceConfigLispSp {
    credential: string;
    nameOrIp: string;
    type: string;
}

export interface GetProjectNetworkPolicyNetworkPolicyNetInstanceConfigOpaque {
    /**
     * Deprecated - Lisp config
     */
    lisps?: outputs.GetProjectNetworkPolicyNetworkPolicyNetInstanceConfigOpaqueLisp[];
    /**
     * base64 encoded string of opaque config
     */
    oconfig?: string;
    /**
     * type of Opaque config
     */
    type?: string;
}

export interface GetProjectNetworkPolicyNetworkPolicyNetInstanceConfigOpaqueLisp {
    /**
     * Allocate flag
     */
    allocate?: boolean;
    /**
     * Allocation Prefix
     */
    allocationprefix?: string;
    /**
     * Allocation Prefix Length
     */
    allocationprefixlen?: number;
    /**
     * Export Private flag
     */
    exportprivate?: boolean;
    /**
     * lisp id
     */
    lispiid?: number;
    /**
     * Service Point List
     */
    sps?: outputs.GetProjectNetworkPolicyNetworkPolicyNetInstanceConfigOpaqueLispSp[];
}

export interface GetProjectNetworkPolicyNetworkPolicyNetInstanceConfigOpaqueLispSp {
    /**
     * Service credentials
     */
    credential?: string;
    /**
     * Service name/ service name
     */
    nameOrIp?: string;
    /**
     * Service Point Type
     */
    type?: string;
}

export interface GetProjectNetworkPolicyNetworkPolicyNetInstanceConfigRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface GetProjectNetworkPolicyRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface GetProjectRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface GetRoleRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface GetRoleScope {
    /**
     * Application access permission, this will be deprecated in further release - please use accessEdgeApp and accessAppInstance for granular permission access scope.
     */
    accessApp?: string;
    /**
     * Application Instance access permission
     */
    accessAppInstance?: string;
    /**
     * Device access permission
     */
    accessDevice?: string;
    /**
     * Edge app access permission
     */
    accessEdgeApp?: string;
    /**
     * Enterprise access permission
     */
    accessEnterprise?: string;
    /**
     * Storage access permission
     */
    accessStorage?: string;
    /**
     * User access permission
     */
    accessUser?: string;
    /**
     * List of enterprise filters
     */
    enterpriseFilters?: string[];
    /**
     * List of project filters
     */
    projectFilters?: string[];
    /**
     * Unique system defined scope ID
     */
    uuid: string;
}

export interface GetUserAllowedEnterprise {
    id: string;
    name?: string;
    roleId?: string;
}

export interface GetUserRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface GetVolumeInstanceRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface ImageRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface NetworkDnsList {
    /**
     * Addresses
     */
    addrs?: string[];
    /**
     * Host name
     */
    hostname?: string;
}

export interface NetworkInstanceDnsList {
    /**
     * Addresses
     */
    addrs?: string[];
    /**
     * Host name
     */
    hostname?: string;
}

export interface NetworkInstanceIp {
    /**
     * Range of IP addresses to be used for DHCP
     */
    dhcpRanges?: outputs.NetworkInstanceIpDhcpRange[];
    /**
     * IP Addresses of DNS servers
     */
    dns?: string[];
    /**
     * Network domain
     */
    domain?: string;
    /**
     * IP Address of Network Gateway
     */
    gateway?: string;
    /**
     * Subnet Mask
     */
    mask?: string;
    /**
     * IP Address of NTP Server
     */
    ntp?: string;
    /**
     * Subnet address
     */
    subnet: string;
}

export interface NetworkInstanceIpDhcpRange {
    /**
     * ending IP
     */
    end?: string;
    /**
     * starting IP
     */
    start?: string;
}

export interface NetworkInstanceLisp {
    allocate: boolean;
    allocationprefix: string;
    allocationprefixlen: number;
    exportprivate: boolean;
    lispiid: number;
    sps: outputs.NetworkInstanceLispSp[];
}

export interface NetworkInstanceLispSp {
    credential: string;
    nameOrIp: string;
    type: string;
}

export interface NetworkInstanceOpaque {
    /**
     * Deprecated - Lisp config
     */
    lisps?: outputs.NetworkInstanceOpaqueLisp[];
    /**
     * base64 encoded string of opaque config
     */
    oconfig?: string;
    /**
     * type of Opaque config
     */
    type?: string;
}

export interface NetworkInstanceOpaqueLisp {
    /**
     * Allocate flag
     */
    allocate?: boolean;
    /**
     * Allocation Prefix
     */
    allocationprefix?: string;
    /**
     * Allocation Prefix Length
     */
    allocationprefixlen?: number;
    /**
     * Export Private flag
     */
    exportprivate?: boolean;
    /**
     * lisp id
     */
    lispiid?: number;
    /**
     * Service Point List
     */
    sps?: outputs.NetworkInstanceOpaqueLispSp[];
}

export interface NetworkInstanceOpaqueLispSp {
    /**
     * Service credentials
     */
    credential?: string;
    /**
     * Service name/ service name
     */
    nameOrIp?: string;
    /**
     * Service Point Type
     */
    type?: string;
}

export interface NetworkInstanceRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface NetworkIp {
    deprecatedDhcp?: boolean;
    /**
     * DHCP type:
     * NETWORK_DHCP_TYPE_STATIC
     * NETWORK_DHCP_TYPE_PASSTHROUGH
     * NETWORK_DHCP_TYPE_CLIENT
     */
    dhcp?: string;
    /**
     * Range of IP addresses to be used for DHCP for IPAM management when dhcp is turned on. If none provided, system will default pool.
     */
    dhcpRanges?: outputs.NetworkIpDhcpRange[];
    /**
     * List of IP Addresses of DNS servers
     */
    dns?: string[];
    /**
     * Network domain
     */
    domain?: string;
    /**
     * IP Address of Network Gateway
     */
    gateway?: string;
    /**
     * Subnet Mask
     */
    mask?: string;
    /**
     * IP Address of NTP Server
     */
    ntp?: string;
    /**
     * Subnet address
     */
    subnet?: string;
}

export interface NetworkIpDhcpRange {
    /**
     * ending IP
     */
    end?: string;
    /**
     * starting IP
     */
    start?: string;
}

export interface NetworkProxy {
    /**
     * Proxy exceptions
     */
    exceptions?: string;
    /**
     * Enable WPAD (Web Proxy Auto Discovery) protocol to discover and download PAC file.
     */
    networkProxy?: boolean;
    /**
     * Network Proxy Certificates
     */
    networkProxyCerts?: string[];
    /**
     * URL for wpad.dat file to be downloaded. Used when network_proxy is set to False.
     */
    networkProxyUrl?: string;
    /**
     * Proxy configuration in a pacfile. Used when network_proxy is set to False.
     */
    pacfile?: string;
    /**
     * Net Proxy: protocol level proxies. Used when network_proxy is set to False.
     */
    proxies?: outputs.NetworkProxyProxy[];
}

export interface NetworkProxyProxy {
    /**
     * Net Proxy Port
     */
    port?: number;
    /**
     * Net Proxy protocol:
     * NETWORK_PROXY_PROTO_HTTP
     * NETWORK_PROXY_PROTO_HTTPS
     * NETWORK_PROXY_PROTO_SOCKS
     * NETWORK_PROXY_PROTO_FTP
     * NETWORK_PROXY_PROTO_OTHER
     */
    proto?: string;
    /**
     * Net Proxy Server
     */
    server?: string;
}

export interface NetworkRevision {
    /**
     * The time, in milliseconds since the epoch, when the record was created.
     */
    createdAt: string;
    /**
     * User data: Created By
     */
    createdBy: string;
    /**
     * Current Database version of the record
     */
    curr: string;
    /**
     * Previous
     */
    prev: string;
    /**
     * The time, in milliseconds since the epoch, when the record was last updated.
     */
    updatedAt: string;
    /**
     * User data: Updated By
     */
    updatedBy: string;
}

export interface NetworkWireless {
    /**
     * Cellular configuration
     */
    cellulars?: outputs.NetworkWirelessCellular[];
    /**
     * Type of Wireless Network:
     * NETWORK_WIRELESS_TYPE_WIFI
     * NETWORK_WIRELESS_TYPE_CELLULAR
     */
    type?: string;
    /**
     * Can be multiple APs on a single wlan, e.g. one for 2.5Ghz, other 5Ghz SSIDs
     */
    wifis?: outputs.NetworkWirelessWifi[];
}

export interface NetworkWirelessCellular {
    apn?: string;
    locationTracking: boolean;
}

export interface NetworkWirelessWifi {
    identity?: string;
    /**
     * Key management scheme:
     * NETWORK_WIFIKEY_SCHEME_WPAPSK
     * NETWORK_WIFIKEY_SCHEME_WPAEAPPSK
     */
    keyScheme?: string;
    /**
     * Priority of connection, default is 0
     */
    priority?: number;
    wifiSsid?: string;
}

export interface PatchEnvelopeArtifact {
    artifactMetaData?: string;
    base64Artifacts?: outputs.PatchEnvelopeArtifactBase64Artifact[];
    binaryArtifacts?: outputs.PatchEnvelopeArtifactBinaryArtifact[];
    format?: string;
    /**
     * System defined universally unique Id of the artifact.
     */
    id: string;
}

export interface PatchEnvelopeArtifactBase64Artifact {
    base64Data: string;
    base64MetaData?: string;
    fileNameToUse: string;
}

export interface PatchEnvelopeArtifactBinaryArtifact {
    /**
     * Eve shall use the image name when fileNameToUse is empty
     * optional - this can be image type or size etc encoded into a single string.
     * only the application instance agents will interpret this.
     */
    blobMetaData?: string;
    fileNameToUse: string;
    imageId: string;
    imageName: string;
}

export interface PatchEnvelopeRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface ProjectAppPolicy {
    /**
     * app policy, which is used in auto app instance deployment
     */
    appPolicies?: outputs.ProjectAppPolicyAppPolicy[];
    /**
     * attestation policy to enforce on all devices in this project
     */
    attestationPolicies?: outputs.ProjectAppPolicyAttestationPolicy[];
    /**
     * Mapping of policy  variable keys and policy variable values
     */
    attr?: {[key: string]: string};
    /**
     * azure policy, which is used in configuring azure iot-edge.
     */
    azurePolicies?: outputs.ProjectAppPolicyAzurePolicy[];
    /**
     * cluster policy to bring up cluster on devices in this project
     */
    clusterPolicies?: outputs.ProjectAppPolicyClusterPolicy[];
    /**
     * Detailed description of the policy
     */
    description?: string;
    /**
     * edgeview policy on devices of this project
     */
    edgeviewPolicies?: outputs.ProjectAppPolicyEdgeviewPolicy[];
    /**
     * System defined universally unique Id of the policy request
     */
    id: string;
    /**
     * local operator console policy to enforce on all devices in this project
     */
    localOperatorConsolePolicies?: outputs.ProjectAppPolicyLocalOperatorConsolePolicy[];
    /**
     * module policy, which is used in auto module deployment
     */
    modulePolicies?: outputs.ProjectAppPolicyModulePolicy[];
    /**
     * User defined name of the policy request, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * network policy to enforce on all devices in this project
     */
    networkPolicies?: outputs.ProjectAppPolicyNetworkPolicy[];
    /**
     * system defined info
     */
    revisions: outputs.ProjectAppPolicyRevision[];
    /**
     * status of the policy
     */
    status: string;
    /**
     * Detailed status message of the policy
     */
    statusMessage: string;
    /**
     * User defined title of the policy. Title can be changed at any time
     */
    title?: string;
    /**
     * type of policy
     */
    type?: string;
}

export interface ProjectAppPolicyAppPolicy {
    /**
     * list of app details that will be provisioned on all the devices of the project to which this policy is attached
     */
    apps: outputs.ProjectAppPolicyAppPolicyApp[];
}

export interface ProjectAppPolicyAppPolicyApp {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.ProjectAppPolicyAppPolicyAppInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.ProjectAppPolicyAppPolicyAppManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.ProjectAppPolicyAppPolicyAppParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface ProjectAppPolicyAppPolicyAppInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.ProjectAppPolicyAppPolicyAppInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.ProjectAppPolicyAppPolicyAppInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.ProjectAppPolicyAppPolicyAppInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface ProjectAppPolicyAppPolicyAppInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.ProjectAppPolicyAppPolicyAppInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.ProjectAppPolicyAppPolicyAppInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface ProjectAppPolicyAppPolicyAppInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.ProjectAppPolicyAppPolicyAppInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface ProjectAppPolicyAppPolicyAppInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface ProjectAppPolicyAppPolicyAppInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface ProjectAppPolicyAppPolicyAppInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.ProjectAppPolicyAppPolicyAppInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface ProjectAppPolicyAppPolicyAppInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface ProjectAppPolicyAppPolicyAppInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface ProjectAppPolicyAppPolicyAppManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.ProjectAppPolicyAppPolicyAppManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.ProjectAppPolicyAppPolicyAppManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.ProjectAppPolicyAppPolicyAppManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.ProjectAppPolicyAppPolicyAppManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.ProjectAppPolicyAppPolicyAppManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.ProjectAppPolicyAppPolicyAppManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.ProjectAppPolicyAppPolicyAppManifestJsonOwner[];
    permissions?: outputs.ProjectAppPolicyAppPolicyAppManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.ProjectAppPolicyAppPolicyAppManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface ProjectAppPolicyAppPolicyAppManifestJsonConfiguration {
    customConfigs?: outputs.ProjectAppPolicyAppPolicyAppManifestJsonConfigurationCustomConfig[];
}

export interface ProjectAppPolicyAppPolicyAppManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.ProjectAppPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface ProjectAppPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.ProjectAppPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.ProjectAppPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface ProjectAppPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface ProjectAppPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.ProjectAppPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface ProjectAppPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface ProjectAppPolicyAppPolicyAppManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface ProjectAppPolicyAppPolicyAppManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface ProjectAppPolicyAppPolicyAppManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.ProjectAppPolicyAppPolicyAppManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface ProjectAppPolicyAppPolicyAppManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface ProjectAppPolicyAppPolicyAppManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.ProjectAppPolicyAppPolicyAppManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface ProjectAppPolicyAppPolicyAppManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.ProjectAppPolicyAppPolicyAppManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.ProjectAppPolicyAppPolicyAppManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface ProjectAppPolicyAppPolicyAppManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.ProjectAppPolicyAppPolicyAppManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.ProjectAppPolicyAppPolicyAppManifestJsonInterfaceAclActionPortmapto[];
}

export interface ProjectAppPolicyAppPolicyAppManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface ProjectAppPolicyAppPolicyAppManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface ProjectAppPolicyAppPolicyAppManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface ProjectAppPolicyAppPolicyAppManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface ProjectAppPolicyAppPolicyAppManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface ProjectAppPolicyAppPolicyAppManifestJsonPermission {
}

export interface ProjectAppPolicyAppPolicyAppManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface ProjectAppPolicyAppPolicyAppParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface ProjectAppPolicyAttestationPolicy {
    /**
     * unique policy id
     */
    id: string;
    /**
     * Attestation policy type
     */
    type: string;
}

export interface ProjectAppPolicyAzurePolicy {
    /**
     * app id for rbac
     */
    appId: string;
    /**
     * app password for rbac
     */
    appPassword: string;
    /**
     * azure resource and service the policy will be interested in
     */
    azureResourceAndServices?: outputs.ProjectAppPolicyAzurePolicyAzureResourceAndService[];
    /**
     * Certificate object holds the details of certificate like encryption type, validity, subject etc
     */
    certificates?: outputs.ProjectAppPolicyAzurePolicyCertificate[];
    /**
     * key to decrypt AppPassword
     */
    cryptoKey?: string;
    customDeploymentManaged?: boolean;
    /**
     * encrypted AppPassword
     */
    encryptedSecrets?: {[key: string]: string};
    /**
     * tenant id for rbac
     */
    tenantId: string;
}

export interface ProjectAppPolicyAzurePolicyAzureResourceAndService {
    /**
     * dps service attached to cloud policy
     */
    dpsServices: outputs.ProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsService[];
    /**
     * list of iothubs attached to cloud policy
     */
    iotHubServices: outputs.ProjectAppPolicyAzurePolicyAzureResourceAndServiceIotHubService[];
    /**
     * list of resource groups attached to cloud policy
     */
    resourceGroups: outputs.ProjectAppPolicyAzurePolicyAzureResourceAndServiceResourceGroup[];
}

export interface ProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsService {
    enrollments?: outputs.ProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollment[];
    serviceDetails?: outputs.ProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetail[];
}

export interface ProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollment {
    allocationPolicy?: string;
    attachedIotHubsNames?: string[];
    certificateEnrollments?: outputs.ProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollment[];
    enableIotEdgeDevice?: boolean;
    mechanism?: string;
    symmetricKeyEnrollments?: outputs.ProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollment[];
    tags?: {[key: string]: string};
    tpmEnrollments?: outputs.ProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentTpmEnrollment[];
}

export interface ProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollment {
    groupCertificateEnrollments?: outputs.ProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollmentGroupCertificateEnrollment[];
    individualCertificateEnrollment?: string;
    type?: string;
}

export interface ProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollmentGroupCertificateEnrollment {
    groupName?: string;
}

export interface ProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollment {
    groupSymmetricKeyEnrollments?: outputs.ProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentGroupSymmetricKeyEnrollment[];
    individualSymmetricKeyEnrollments?: outputs.ProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentIndividualSymmetricKeyEnrollment[];
    type?: string;
}

export interface ProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentGroupSymmetricKeyEnrollment {
    groupName?: string;
}

export interface ProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentIndividualSymmetricKeyEnrollment {
    registrationId?: string;
}

export interface ProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentTpmEnrollment {
    type?: string;
}

export interface ProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetail {
    createByDefault?: boolean;
    name?: string;
    region?: string;
    resourceGroupName?: string;
    sKUs?: outputs.ProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetailSKU[];
    subscriptionId?: string;
}

export interface ProjectAppPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetailSKU {
    capacity?: string;
    name?: string;
    tier?: string;
}

export interface ProjectAppPolicyAzurePolicyAzureResourceAndServiceIotHubService {
    serviceDetails?: outputs.ProjectAppPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetail[];
}

export interface ProjectAppPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetail {
    createByDefault?: boolean;
    name?: string;
    region?: string;
    resourceGroupName?: string;
    sKUs?: outputs.ProjectAppPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetailSKU[];
    subscriptionId?: string;
}

export interface ProjectAppPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetailSKU {
    capacity?: string;
    name?: string;
    tier?: string;
}

export interface ProjectAppPolicyAzurePolicyAzureResourceAndServiceResourceGroup {
    /**
     * resource group name
     */
    name: string;
    /**
     * resource group region
     */
    region?: string;
    /**
     * azure subscription id to which resource group is attached
     */
    subscriptionId: string;
}

export interface ProjectAppPolicyAzurePolicyCertificate {
    /**
     * This fields tells the basic constraints like isCA are correct.
     */
    basicContraintsValid?: boolean;
    /**
     * base64 string of the parent certificate
     */
    cert?: string;
    /**
     * Crypto Key for decrypting user secret information
     */
    cryptoKey?: string;
    /**
     * ECDSA encryption algorithm of the certificate
     */
    ecdsaEncryptions?: outputs.ProjectAppPolicyAzurePolicyCertificateEcdsaEncryption[];
    /**
     * user encrypted secrets map
     */
    encryptedSecrets?: {[key: string]: string};
    /**
     * Indicates if the private key can be exported.
     */
    exportable?: boolean;
    /**
     * Sequence of extended key usages.
     */
    extendedKeyUsages?: string[];
    /**
     * Parameters for the issuer of the X509 component of a certificate.
     */
    issuers?: outputs.ProjectAppPolicyAzurePolicyCertificateIssuer[];
    /**
     * Key usage extensions define the purpose of the public key contained in a certificate.
     */
    keyUsage?: number;
    /**
     * pass phase for the pvt key, this has to be filled if pvt key is encrypted with a pass phrase
     */
    passPhrase?: string;
    /**
     * base63 string of the public key
     */
    publicKey?: string;
    /**
     * Public key algorithm.
     */
    publicKeyAlgorithm?: string;
    /**
     * base64 string of the parent pvt key
     */
    pvtKey?: string;
    /**
     * Indicates if the same key pair will be used on certificate renewal.
     */
    reuseKey?: boolean;
    /**
     * RSA encryption algorithm of the certificate
     */
    rsaEcryptions?: outputs.ProjectAppPolicyAzurePolicyCertificateRsaEcryption[];
    /**
     * This holds the alternative name values like URIs, domain names IPs etc.
     */
    sanValues?: outputs.ProjectAppPolicyAzurePolicyCertificateSanValue[];
    /**
     * Unique identifier for each Certificate generated by an Certificate Issuer.
     */
    serialNumber?: string;
    signatureAlgorithm?: string;
    /**
     * Parameters for the subject of the X509 component of a certificate.
     */
    subjects?: outputs.ProjectAppPolicyAzurePolicyCertificateSubject[];
    /**
     * Certificate validatity start time
     */
    validFrom?: string;
    /**
     * Certificate validatity start time
     */
    validTill?: string;
}

export interface ProjectAppPolicyAzurePolicyCertificateEcdsaEncryption {
    /**
     * ECDSA curve to be used while signing the certificate.
     */
    curve?: string;
}

export interface ProjectAppPolicyAzurePolicyCertificateIssuer {
    /**
     * Certificate common name.
     */
    commonName?: string;
    /**
     * List of countries.
     */
    countries?: string[];
    /**
     * List of locallity.
     */
    localities?: string[];
    /**
     * List of Organizational Unit.
     */
    organizationalUnits?: string[];
    /**
     * List of organization.
     */
    organizations?: string[];
    /**
     * List of Postal codes.
     */
    postalCodes?: string[];
    /**
     * List of List of Prvince.
     */
    provinces?: string[];
    /**
     * Subject cerial number
     */
    serialNumber?: string;
}

export interface ProjectAppPolicyAzurePolicyCertificateRsaEcryption {
    /**
     * RSA Encryption Key bit size.
     */
    rsaBits?: string;
}

export interface ProjectAppPolicyAzurePolicyCertificateSanValue {
    /**
     * List of permitted DNS names.
     */
    dns?: string[];
    /**
     * List of permitted email addresses.
     */
    emaildIds?: string[];
    /**
     * List of permitted hosts.
     */
    hosts?: string[];
    /**
     * List of permitted IP addresses.
     */
    ips?: string[];
    /**
     * List of permitted User principal names.
     */
    upns?: string[];
    /**
     * List of permitted URIs.
     */
    uris?: string[];
}

export interface ProjectAppPolicyAzurePolicyCertificateSubject {
    /**
     * Certificate common name.
     */
    commonName?: string;
    /**
     * List of countries.
     */
    countries?: string[];
    /**
     * List of locallity.
     */
    localities?: string[];
    /**
     * List of Organizational Unit.
     */
    organizationalUnits?: string[];
    /**
     * List of organization.
     */
    organizations?: string[];
    /**
     * List of Postal codes.
     */
    postalCodes?: string[];
    /**
     * List of List of Prvince.
     */
    provinces?: string[];
    /**
     * Subject cerial number
     */
    serialNumber?: string;
}

export interface ProjectAppPolicyClusterPolicy {
    /**
     * UUID of the app policy linked to this cluster policy
     */
    appPolicyId: string;
    /**
     * Cluster Policy Parameters
     */
    clusterConfigs?: outputs.ProjectAppPolicyClusterPolicyClusterConfig[];
    /**
     * UUID of the network policy linked to this cluster policy
     */
    networkPolicyId: string;
    /**
     * Type of cluster
     */
    type: string;
}

export interface ProjectAppPolicyClusterPolicyClusterConfig {
    minNodesRequired?: number;
}

export interface ProjectAppPolicyEdgeviewPolicy {
    /**
     * Allow inherit instance to change access policy
     */
    accessAllowChange?: boolean;
    /**
     * Allow device to enable Edgeview in this project
     */
    edgeviewAllow?: boolean;
    /**
     * Edgeview configuration and policies
     */
    edgeviewcfgs?: outputs.ProjectAppPolicyEdgeviewPolicyEdgeviewcfg[];
    /**
     * Maximum seconds allowed for Edgeview session
     */
    maxExpireSec?: number;
    /**
     * Maximum instances allowed for Edgeview
     */
    maxInst?: number;
}

export interface ProjectAppPolicyEdgeviewPolicyEdgeviewcfg {
    appPolicies?: outputs.ProjectAppPolicyEdgeviewPolicyEdgeviewcfgAppPolicy[];
    devPolicies?: outputs.ProjectAppPolicyEdgeviewPolicyEdgeviewcfgDevPolicy[];
    extPolicies?: outputs.ProjectAppPolicyEdgeviewPolicyEdgeviewcfgExtPolicy[];
    generationId?: number;
    jwtInfos?: outputs.ProjectAppPolicyEdgeviewPolicyEdgeviewcfgJwtInfo[];
    token?: string;
}

export interface ProjectAppPolicyEdgeviewPolicyEdgeviewcfgAppPolicy {
    allowApp?: boolean;
}

export interface ProjectAppPolicyEdgeviewPolicyEdgeviewcfgDevPolicy {
    allowDev?: boolean;
}

export interface ProjectAppPolicyEdgeviewPolicyEdgeviewcfgExtPolicy {
    allowExt?: boolean;
}

export interface ProjectAppPolicyEdgeviewPolicyEdgeviewcfgJwtInfo {
    allowSec?: number;
    dispUrl?: string;
    encrypt?: boolean;
    expireSec: string;
    numInst?: number;
}

export interface ProjectAppPolicyLocalOperatorConsolePolicy {
    /**
     * unique policy id
     */
    id: string;
    /**
     * Local operator console URL
     */
    locUrl: string;
}

export interface ProjectAppPolicyModulePolicy {
    /**
     * list of app details that will be provisioned on all the devices of the project to which this policy is attached
     */
    apps: outputs.ProjectAppPolicyModulePolicyApp[];
    /**
     * app that describes the azure edge agent to be deployed on the Azure runtime
     */
    azureEdgeAgents?: outputs.ProjectAppPolicyModulePolicyAzureEdgeAgent[];
    /**
     * app that describes the azure edge hub to be deployed on the Azure runtime
     */
    azureEdgeHubs?: outputs.ProjectAppPolicyModulePolicyAzureEdgeHub[];
    /**
     * etag for deployment
     */
    etag?: string;
    /**
     * unique id for deployment
     */
    id: string;
    /**
     * Mapping of label variable keys and value
     */
    labels?: {[key: string]: string};
    /**
     * custom metrics for deployment
     */
    metrics?: outputs.ProjectAppPolicyModulePolicyMetric[];
    /**
     * deployment priority of module manifest
     */
    priority: number;
    /**
     * Mapping of routes variable keys and value
     */
    routes?: {[key: string]: string};
    /**
     * target condition for deployment that matches single device or group of devices
     */
    targetCondition?: string;
    /**
     * target condition for deployment that matches single device or group of devices
     */
    targetConditionNew?: {[key: string]: string};
}

export interface ProjectAppPolicyModulePolicyApp {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.ProjectAppPolicyModulePolicyAppInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.ProjectAppPolicyModulePolicyAppManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.ProjectAppPolicyModulePolicyAppParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface ProjectAppPolicyModulePolicyAppInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.ProjectAppPolicyModulePolicyAppInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.ProjectAppPolicyModulePolicyAppInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.ProjectAppPolicyModulePolicyAppInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface ProjectAppPolicyModulePolicyAppInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.ProjectAppPolicyModulePolicyAppInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.ProjectAppPolicyModulePolicyAppInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface ProjectAppPolicyModulePolicyAppInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.ProjectAppPolicyModulePolicyAppInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface ProjectAppPolicyModulePolicyAppInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface ProjectAppPolicyModulePolicyAppInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface ProjectAppPolicyModulePolicyAppInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.ProjectAppPolicyModulePolicyAppInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface ProjectAppPolicyModulePolicyAppInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface ProjectAppPolicyModulePolicyAppInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface ProjectAppPolicyModulePolicyAppManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.ProjectAppPolicyModulePolicyAppManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.ProjectAppPolicyModulePolicyAppManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.ProjectAppPolicyModulePolicyAppManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.ProjectAppPolicyModulePolicyAppManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.ProjectAppPolicyModulePolicyAppManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.ProjectAppPolicyModulePolicyAppManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.ProjectAppPolicyModulePolicyAppManifestJsonOwner[];
    permissions?: outputs.ProjectAppPolicyModulePolicyAppManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.ProjectAppPolicyModulePolicyAppManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface ProjectAppPolicyModulePolicyAppManifestJsonConfiguration {
    customConfigs?: outputs.ProjectAppPolicyModulePolicyAppManifestJsonConfigurationCustomConfig[];
}

export interface ProjectAppPolicyModulePolicyAppManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.ProjectAppPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface ProjectAppPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.ProjectAppPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.ProjectAppPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface ProjectAppPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface ProjectAppPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.ProjectAppPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface ProjectAppPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface ProjectAppPolicyModulePolicyAppManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface ProjectAppPolicyModulePolicyAppManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface ProjectAppPolicyModulePolicyAppManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.ProjectAppPolicyModulePolicyAppManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface ProjectAppPolicyModulePolicyAppManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface ProjectAppPolicyModulePolicyAppManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.ProjectAppPolicyModulePolicyAppManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface ProjectAppPolicyModulePolicyAppManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.ProjectAppPolicyModulePolicyAppManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.ProjectAppPolicyModulePolicyAppManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface ProjectAppPolicyModulePolicyAppManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.ProjectAppPolicyModulePolicyAppManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.ProjectAppPolicyModulePolicyAppManifestJsonInterfaceAclActionPortmapto[];
}

export interface ProjectAppPolicyModulePolicyAppManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface ProjectAppPolicyModulePolicyAppManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface ProjectAppPolicyModulePolicyAppManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface ProjectAppPolicyModulePolicyAppManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface ProjectAppPolicyModulePolicyAppManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface ProjectAppPolicyModulePolicyAppManifestJsonPermission {
}

export interface ProjectAppPolicyModulePolicyAppManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface ProjectAppPolicyModulePolicyAppParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeAgent {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.ProjectAppPolicyModulePolicyAzureEdgeAgentInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.ProjectAppPolicyModulePolicyAzureEdgeAgentParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeAgentInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.ProjectAppPolicyModulePolicyAzureEdgeAgentInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.ProjectAppPolicyModulePolicyAzureEdgeAgentInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.ProjectAppPolicyModulePolicyAzureEdgeAgentInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeAgentInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.ProjectAppPolicyModulePolicyAzureEdgeAgentInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.ProjectAppPolicyModulePolicyAzureEdgeAgentInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeAgentInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.ProjectAppPolicyModulePolicyAzureEdgeAgentInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeAgentInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeAgentInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeAgentInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.ProjectAppPolicyModulePolicyAzureEdgeAgentInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeAgentInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeAgentInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonOwner[];
    permissions?: outputs.ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonConfiguration {
    customConfigs?: outputs.ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfig[];
}

export interface ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionPortmapto[];
}

export interface ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonPermission {
}

export interface ProjectAppPolicyModulePolicyAzureEdgeAgentManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeAgentParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeHub {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.ProjectAppPolicyModulePolicyAzureEdgeHubInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.ProjectAppPolicyModulePolicyAzureEdgeHubManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.ProjectAppPolicyModulePolicyAzureEdgeHubParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeHubInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.ProjectAppPolicyModulePolicyAzureEdgeHubInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.ProjectAppPolicyModulePolicyAzureEdgeHubInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.ProjectAppPolicyModulePolicyAzureEdgeHubInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeHubInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.ProjectAppPolicyModulePolicyAzureEdgeHubInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.ProjectAppPolicyModulePolicyAzureEdgeHubInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeHubInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.ProjectAppPolicyModulePolicyAzureEdgeHubInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeHubInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeHubInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeHubInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.ProjectAppPolicyModulePolicyAzureEdgeHubInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeHubInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeHubInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeHubManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonOwner[];
    permissions?: outputs.ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonConfiguration {
    customConfigs?: outputs.ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfig[];
}

export interface ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionPortmapto[];
}

export interface ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonPermission {
}

export interface ProjectAppPolicyModulePolicyAzureEdgeHubManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface ProjectAppPolicyModulePolicyAzureEdgeHubParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface ProjectAppPolicyModulePolicyMetric {
    /**
     * Mapping of queries variable keys and value
     */
    queries?: {[key: string]: string};
    /**
     * Mapping of results variable keys and value
     */
    results?: {[key: string]: string};
}

export interface ProjectAppPolicyNetworkPolicy {
    /**
     * list of network details that will be created on all the devices of the project to which this policy is attached
     */
    netInstanceConfigs: outputs.ProjectAppPolicyNetworkPolicyNetInstanceConfig[];
}

export interface ProjectAppPolicyNetworkPolicyNetInstanceConfig {
    /**
     * ID of the Cluster in which the network instance is configured
     */
    clusterId?: string;
    /**
     * Detailed description of the network instance
     */
    description?: string;
    /**
     * Flag to indicate if this is the default network instance for the device
     */
    deviceDefault?: boolean;
    /**
     * ID of the device on which network instance is created
     */
    deviceId: string;
    /**
     * Deprecated
     */
    dhcp?: boolean;
    /**
     * List of Static DNS entries
     */
    dnsLists?: outputs.ProjectAppPolicyNetworkPolicyNetInstanceConfigDnsList[];
    /**
     * System defined universally unique ID of the network instance
     */
    id: string;
    /**
     * DHCP Server Configuration
     */
    ips?: outputs.ProjectAppPolicyNetworkPolicyNetInstanceConfigIp[];
    /**
     * Kind of Network Instance:
     * NETWORK_INSTANCE_KIND_UNSPECIFIED
     * NETWORK_INSTANCE_KIND_TRANSPARENT
     * NETWORK_INSTANCE_KIND_SWITCH
     * NETWORK_INSTANCE_KIND_LOCAL
     * NETWORK_INSTANCE_KIND_CLOUD
     * NETWORK_INSTANCE_KIND_MESH
     * NETWORK_INSTANCE_KIND_HONEYPOT
     */
    kind: string;
    /**
     * Lisp Config : read only for now. Deprecated.
     */
    lisps: outputs.ProjectAppPolicyNetworkPolicyNetInstanceConfigLisp[];
    /**
     * User defined name of the network instance, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * id of the network policy to be attached to this network instance
     */
    networkPolicyId?: string;
    oconfig?: string;
    /**
     * Service specific Config
     */
    opaques?: outputs.ProjectAppPolicyNetworkPolicyNetInstanceConfigOpaque[];
    /**
     * name of port mapping in the model
     */
    port?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    portTags?: {[key: string]: string};
    /**
     * id of the project in which network instance is created
     */
    projectId: string;
    /**
     * system defined info for the object
     */
    revisions: outputs.ProjectAppPolicyNetworkPolicyNetInstanceConfigRevision[];
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the network instance. Title can be changed at any time
     */
    title: string;
    /**
     * Type of DHCP for this Network Instance:
     * NETWORK_INSTANCE_DHCP_TYPE_V4
     * NETWORK_INSTANCE_DHCP_TYPE_V6
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOEID
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOV4
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOV6
     */
    type: string;
}

export interface ProjectAppPolicyNetworkPolicyNetInstanceConfigDnsList {
    /**
     * Addresses
     */
    addrs?: string[];
    /**
     * Host name
     */
    hostname?: string;
}

export interface ProjectAppPolicyNetworkPolicyNetInstanceConfigIp {
    /**
     * Range of IP addresses to be used for DHCP
     */
    dhcpRanges?: outputs.ProjectAppPolicyNetworkPolicyNetInstanceConfigIpDhcpRange[];
    /**
     * IP Addresses of DNS servers
     */
    dns?: string[];
    /**
     * Network domain
     */
    domain?: string;
    /**
     * IP Address of Network Gateway
     */
    gateway?: string;
    /**
     * Subnet Mask
     */
    mask?: string;
    /**
     * IP Address of NTP Server
     */
    ntp?: string;
    /**
     * Subnet address
     */
    subnet: string;
}

export interface ProjectAppPolicyNetworkPolicyNetInstanceConfigIpDhcpRange {
    /**
     * ending IP
     */
    end?: string;
    /**
     * starting IP
     */
    start?: string;
}

export interface ProjectAppPolicyNetworkPolicyNetInstanceConfigLisp {
    allocate: boolean;
    allocationprefix: string;
    allocationprefixlen: number;
    exportprivate: boolean;
    lispiid: number;
    sps: outputs.ProjectAppPolicyNetworkPolicyNetInstanceConfigLispSp[];
}

export interface ProjectAppPolicyNetworkPolicyNetInstanceConfigLispSp {
    credential: string;
    nameOrIp: string;
    type: string;
}

export interface ProjectAppPolicyNetworkPolicyNetInstanceConfigOpaque {
    /**
     * Deprecated - Lisp config
     */
    lisps?: outputs.ProjectAppPolicyNetworkPolicyNetInstanceConfigOpaqueLisp[];
    /**
     * base64 encoded string of opaque config
     */
    oconfig?: string;
    /**
     * type of Opaque config
     */
    type?: string;
}

export interface ProjectAppPolicyNetworkPolicyNetInstanceConfigOpaqueLisp {
    /**
     * Allocate flag
     */
    allocate?: boolean;
    /**
     * Allocation Prefix
     */
    allocationprefix?: string;
    /**
     * Allocation Prefix Length
     */
    allocationprefixlen?: number;
    /**
     * Export Private flag
     */
    exportprivate?: boolean;
    /**
     * lisp id
     */
    lispiid?: number;
    /**
     * Service Point List
     */
    sps?: outputs.ProjectAppPolicyNetworkPolicyNetInstanceConfigOpaqueLispSp[];
}

export interface ProjectAppPolicyNetworkPolicyNetInstanceConfigOpaqueLispSp {
    /**
     * Service credentials
     */
    credential?: string;
    /**
     * Service name/ service name
     */
    nameOrIp?: string;
    /**
     * Service Point Type
     */
    type?: string;
}

export interface ProjectAppPolicyNetworkPolicyNetInstanceConfigRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface ProjectAppPolicyRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface ProjectAttestationPolicy {
    /**
     * app policy, which is used in auto app instance deployment
     */
    appPolicies?: outputs.ProjectAttestationPolicyAppPolicy[];
    /**
     * attestation policy to enforce on all devices in this project
     */
    attestationPolicies?: outputs.ProjectAttestationPolicyAttestationPolicy[];
    /**
     * Mapping of policy  variable keys and policy variable values
     */
    attr?: {[key: string]: string};
    /**
     * azure policy, which is used in configuring azure iot-edge.
     */
    azurePolicies?: outputs.ProjectAttestationPolicyAzurePolicy[];
    /**
     * cluster policy to bring up cluster on devices in this project
     */
    clusterPolicies?: outputs.ProjectAttestationPolicyClusterPolicy[];
    /**
     * Detailed description of the policy
     */
    description?: string;
    /**
     * edgeview policy on devices of this project
     */
    edgeviewPolicies?: outputs.ProjectAttestationPolicyEdgeviewPolicy[];
    /**
     * System defined universally unique Id of the policy request
     */
    id: string;
    /**
     * local operator console policy to enforce on all devices in this project
     */
    localOperatorConsolePolicies?: outputs.ProjectAttestationPolicyLocalOperatorConsolePolicy[];
    /**
     * module policy, which is used in auto module deployment
     */
    modulePolicies?: outputs.ProjectAttestationPolicyModulePolicy[];
    /**
     * User defined name of the policy request, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * network policy to enforce on all devices in this project
     */
    networkPolicies?: outputs.ProjectAttestationPolicyNetworkPolicy[];
    /**
     * system defined info
     */
    revisions: outputs.ProjectAttestationPolicyRevision[];
    /**
     * status of the policy
     */
    status: string;
    /**
     * Detailed status message of the policy
     */
    statusMessage: string;
    /**
     * User defined title of the policy. Title can be changed at any time
     */
    title?: string;
    /**
     * type of policy
     */
    type?: string;
}

export interface ProjectAttestationPolicyAppPolicy {
    /**
     * list of app details that will be provisioned on all the devices of the project to which this policy is attached
     */
    apps: outputs.ProjectAttestationPolicyAppPolicyApp[];
}

export interface ProjectAttestationPolicyAppPolicyApp {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.ProjectAttestationPolicyAppPolicyAppInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.ProjectAttestationPolicyAppPolicyAppManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.ProjectAttestationPolicyAppPolicyAppParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface ProjectAttestationPolicyAppPolicyAppInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.ProjectAttestationPolicyAppPolicyAppInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.ProjectAttestationPolicyAppPolicyAppInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.ProjectAttestationPolicyAppPolicyAppInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface ProjectAttestationPolicyAppPolicyAppInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.ProjectAttestationPolicyAppPolicyAppInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.ProjectAttestationPolicyAppPolicyAppInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface ProjectAttestationPolicyAppPolicyAppInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.ProjectAttestationPolicyAppPolicyAppInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface ProjectAttestationPolicyAppPolicyAppInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface ProjectAttestationPolicyAppPolicyAppInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface ProjectAttestationPolicyAppPolicyAppInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.ProjectAttestationPolicyAppPolicyAppInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface ProjectAttestationPolicyAppPolicyAppInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface ProjectAttestationPolicyAppPolicyAppInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface ProjectAttestationPolicyAppPolicyAppManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.ProjectAttestationPolicyAppPolicyAppManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.ProjectAttestationPolicyAppPolicyAppManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.ProjectAttestationPolicyAppPolicyAppManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.ProjectAttestationPolicyAppPolicyAppManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.ProjectAttestationPolicyAppPolicyAppManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.ProjectAttestationPolicyAppPolicyAppManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.ProjectAttestationPolicyAppPolicyAppManifestJsonOwner[];
    permissions?: outputs.ProjectAttestationPolicyAppPolicyAppManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.ProjectAttestationPolicyAppPolicyAppManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface ProjectAttestationPolicyAppPolicyAppManifestJsonConfiguration {
    customConfigs?: outputs.ProjectAttestationPolicyAppPolicyAppManifestJsonConfigurationCustomConfig[];
}

export interface ProjectAttestationPolicyAppPolicyAppManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.ProjectAttestationPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface ProjectAttestationPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.ProjectAttestationPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.ProjectAttestationPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface ProjectAttestationPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface ProjectAttestationPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.ProjectAttestationPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface ProjectAttestationPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface ProjectAttestationPolicyAppPolicyAppManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface ProjectAttestationPolicyAppPolicyAppManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface ProjectAttestationPolicyAppPolicyAppManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.ProjectAttestationPolicyAppPolicyAppManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface ProjectAttestationPolicyAppPolicyAppManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface ProjectAttestationPolicyAppPolicyAppManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.ProjectAttestationPolicyAppPolicyAppManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface ProjectAttestationPolicyAppPolicyAppManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.ProjectAttestationPolicyAppPolicyAppManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.ProjectAttestationPolicyAppPolicyAppManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface ProjectAttestationPolicyAppPolicyAppManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.ProjectAttestationPolicyAppPolicyAppManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.ProjectAttestationPolicyAppPolicyAppManifestJsonInterfaceAclActionPortmapto[];
}

export interface ProjectAttestationPolicyAppPolicyAppManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface ProjectAttestationPolicyAppPolicyAppManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface ProjectAttestationPolicyAppPolicyAppManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface ProjectAttestationPolicyAppPolicyAppManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface ProjectAttestationPolicyAppPolicyAppManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface ProjectAttestationPolicyAppPolicyAppManifestJsonPermission {
}

export interface ProjectAttestationPolicyAppPolicyAppManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface ProjectAttestationPolicyAppPolicyAppParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface ProjectAttestationPolicyAttestationPolicy {
    /**
     * unique policy id
     */
    id: string;
    /**
     * Attestation policy type
     */
    type: string;
}

export interface ProjectAttestationPolicyAzurePolicy {
    /**
     * app id for rbac
     */
    appId: string;
    /**
     * app password for rbac
     */
    appPassword: string;
    /**
     * azure resource and service the policy will be interested in
     */
    azureResourceAndServices?: outputs.ProjectAttestationPolicyAzurePolicyAzureResourceAndService[];
    /**
     * Certificate object holds the details of certificate like encryption type, validity, subject etc
     */
    certificates?: outputs.ProjectAttestationPolicyAzurePolicyCertificate[];
    /**
     * key to decrypt AppPassword
     */
    cryptoKey?: string;
    customDeploymentManaged?: boolean;
    /**
     * encrypted AppPassword
     */
    encryptedSecrets?: {[key: string]: string};
    /**
     * tenant id for rbac
     */
    tenantId: string;
}

export interface ProjectAttestationPolicyAzurePolicyAzureResourceAndService {
    /**
     * dps service attached to cloud policy
     */
    dpsServices: outputs.ProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsService[];
    /**
     * list of iothubs attached to cloud policy
     */
    iotHubServices: outputs.ProjectAttestationPolicyAzurePolicyAzureResourceAndServiceIotHubService[];
    /**
     * list of resource groups attached to cloud policy
     */
    resourceGroups: outputs.ProjectAttestationPolicyAzurePolicyAzureResourceAndServiceResourceGroup[];
}

export interface ProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsService {
    enrollments?: outputs.ProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollment[];
    serviceDetails?: outputs.ProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetail[];
}

export interface ProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollment {
    allocationPolicy?: string;
    attachedIotHubsNames?: string[];
    certificateEnrollments?: outputs.ProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollment[];
    enableIotEdgeDevice?: boolean;
    mechanism?: string;
    symmetricKeyEnrollments?: outputs.ProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollment[];
    tags?: {[key: string]: string};
    tpmEnrollments?: outputs.ProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentTpmEnrollment[];
}

export interface ProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollment {
    groupCertificateEnrollments?: outputs.ProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollmentGroupCertificateEnrollment[];
    individualCertificateEnrollment?: string;
    type?: string;
}

export interface ProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollmentGroupCertificateEnrollment {
    groupName?: string;
}

export interface ProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollment {
    groupSymmetricKeyEnrollments?: outputs.ProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentGroupSymmetricKeyEnrollment[];
    individualSymmetricKeyEnrollments?: outputs.ProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentIndividualSymmetricKeyEnrollment[];
    type?: string;
}

export interface ProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentGroupSymmetricKeyEnrollment {
    groupName?: string;
}

export interface ProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentIndividualSymmetricKeyEnrollment {
    registrationId?: string;
}

export interface ProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentTpmEnrollment {
    type?: string;
}

export interface ProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetail {
    createByDefault?: boolean;
    name?: string;
    region?: string;
    resourceGroupName?: string;
    sKUs?: outputs.ProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetailSKU[];
    subscriptionId?: string;
}

export interface ProjectAttestationPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetailSKU {
    capacity?: string;
    name?: string;
    tier?: string;
}

export interface ProjectAttestationPolicyAzurePolicyAzureResourceAndServiceIotHubService {
    serviceDetails?: outputs.ProjectAttestationPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetail[];
}

export interface ProjectAttestationPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetail {
    createByDefault?: boolean;
    name?: string;
    region?: string;
    resourceGroupName?: string;
    sKUs?: outputs.ProjectAttestationPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetailSKU[];
    subscriptionId?: string;
}

export interface ProjectAttestationPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetailSKU {
    capacity?: string;
    name?: string;
    tier?: string;
}

export interface ProjectAttestationPolicyAzurePolicyAzureResourceAndServiceResourceGroup {
    /**
     * resource group name
     */
    name: string;
    /**
     * resource group region
     */
    region?: string;
    /**
     * azure subscription id to which resource group is attached
     */
    subscriptionId: string;
}

export interface ProjectAttestationPolicyAzurePolicyCertificate {
    /**
     * This fields tells the basic constraints like isCA are correct.
     */
    basicContraintsValid?: boolean;
    /**
     * base64 string of the parent certificate
     */
    cert?: string;
    /**
     * Crypto Key for decrypting user secret information
     */
    cryptoKey?: string;
    /**
     * ECDSA encryption algorithm of the certificate
     */
    ecdsaEncryptions?: outputs.ProjectAttestationPolicyAzurePolicyCertificateEcdsaEncryption[];
    /**
     * user encrypted secrets map
     */
    encryptedSecrets?: {[key: string]: string};
    /**
     * Indicates if the private key can be exported.
     */
    exportable?: boolean;
    /**
     * Sequence of extended key usages.
     */
    extendedKeyUsages?: string[];
    /**
     * Parameters for the issuer of the X509 component of a certificate.
     */
    issuers?: outputs.ProjectAttestationPolicyAzurePolicyCertificateIssuer[];
    /**
     * Key usage extensions define the purpose of the public key contained in a certificate.
     */
    keyUsage?: number;
    /**
     * pass phase for the pvt key, this has to be filled if pvt key is encrypted with a pass phrase
     */
    passPhrase?: string;
    /**
     * base63 string of the public key
     */
    publicKey?: string;
    /**
     * Public key algorithm.
     */
    publicKeyAlgorithm?: string;
    /**
     * base64 string of the parent pvt key
     */
    pvtKey?: string;
    /**
     * Indicates if the same key pair will be used on certificate renewal.
     */
    reuseKey?: boolean;
    /**
     * RSA encryption algorithm of the certificate
     */
    rsaEcryptions?: outputs.ProjectAttestationPolicyAzurePolicyCertificateRsaEcryption[];
    /**
     * This holds the alternative name values like URIs, domain names IPs etc.
     */
    sanValues?: outputs.ProjectAttestationPolicyAzurePolicyCertificateSanValue[];
    /**
     * Unique identifier for each Certificate generated by an Certificate Issuer.
     */
    serialNumber?: string;
    signatureAlgorithm?: string;
    /**
     * Parameters for the subject of the X509 component of a certificate.
     */
    subjects?: outputs.ProjectAttestationPolicyAzurePolicyCertificateSubject[];
    /**
     * Certificate validatity start time
     */
    validFrom?: string;
    /**
     * Certificate validatity start time
     */
    validTill?: string;
}

export interface ProjectAttestationPolicyAzurePolicyCertificateEcdsaEncryption {
    /**
     * ECDSA curve to be used while signing the certificate.
     */
    curve?: string;
}

export interface ProjectAttestationPolicyAzurePolicyCertificateIssuer {
    /**
     * Certificate common name.
     */
    commonName?: string;
    /**
     * List of countries.
     */
    countries?: string[];
    /**
     * List of locallity.
     */
    localities?: string[];
    /**
     * List of Organizational Unit.
     */
    organizationalUnits?: string[];
    /**
     * List of organization.
     */
    organizations?: string[];
    /**
     * List of Postal codes.
     */
    postalCodes?: string[];
    /**
     * List of List of Prvince.
     */
    provinces?: string[];
    /**
     * Subject cerial number
     */
    serialNumber?: string;
}

export interface ProjectAttestationPolicyAzurePolicyCertificateRsaEcryption {
    /**
     * RSA Encryption Key bit size.
     */
    rsaBits?: string;
}

export interface ProjectAttestationPolicyAzurePolicyCertificateSanValue {
    /**
     * List of permitted DNS names.
     */
    dns?: string[];
    /**
     * List of permitted email addresses.
     */
    emaildIds?: string[];
    /**
     * List of permitted hosts.
     */
    hosts?: string[];
    /**
     * List of permitted IP addresses.
     */
    ips?: string[];
    /**
     * List of permitted User principal names.
     */
    upns?: string[];
    /**
     * List of permitted URIs.
     */
    uris?: string[];
}

export interface ProjectAttestationPolicyAzurePolicyCertificateSubject {
    /**
     * Certificate common name.
     */
    commonName?: string;
    /**
     * List of countries.
     */
    countries?: string[];
    /**
     * List of locallity.
     */
    localities?: string[];
    /**
     * List of Organizational Unit.
     */
    organizationalUnits?: string[];
    /**
     * List of organization.
     */
    organizations?: string[];
    /**
     * List of Postal codes.
     */
    postalCodes?: string[];
    /**
     * List of List of Prvince.
     */
    provinces?: string[];
    /**
     * Subject cerial number
     */
    serialNumber?: string;
}

export interface ProjectAttestationPolicyClusterPolicy {
    /**
     * UUID of the app policy linked to this cluster policy
     */
    appPolicyId: string;
    /**
     * Cluster Policy Parameters
     */
    clusterConfigs?: outputs.ProjectAttestationPolicyClusterPolicyClusterConfig[];
    /**
     * UUID of the network policy linked to this cluster policy
     */
    networkPolicyId: string;
    /**
     * Type of cluster
     */
    type: string;
}

export interface ProjectAttestationPolicyClusterPolicyClusterConfig {
    minNodesRequired?: number;
}

export interface ProjectAttestationPolicyEdgeviewPolicy {
    /**
     * Allow inherit instance to change access policy
     */
    accessAllowChange?: boolean;
    /**
     * Allow device to enable Edgeview in this project
     */
    edgeviewAllow?: boolean;
    /**
     * Edgeview configuration and policies
     */
    edgeviewcfgs?: outputs.ProjectAttestationPolicyEdgeviewPolicyEdgeviewcfg[];
    /**
     * Maximum seconds allowed for Edgeview session
     */
    maxExpireSec?: number;
    /**
     * Maximum instances allowed for Edgeview
     */
    maxInst?: number;
}

export interface ProjectAttestationPolicyEdgeviewPolicyEdgeviewcfg {
    appPolicies?: outputs.ProjectAttestationPolicyEdgeviewPolicyEdgeviewcfgAppPolicy[];
    devPolicies?: outputs.ProjectAttestationPolicyEdgeviewPolicyEdgeviewcfgDevPolicy[];
    extPolicies?: outputs.ProjectAttestationPolicyEdgeviewPolicyEdgeviewcfgExtPolicy[];
    generationId?: number;
    jwtInfos?: outputs.ProjectAttestationPolicyEdgeviewPolicyEdgeviewcfgJwtInfo[];
    token?: string;
}

export interface ProjectAttestationPolicyEdgeviewPolicyEdgeviewcfgAppPolicy {
    allowApp?: boolean;
}

export interface ProjectAttestationPolicyEdgeviewPolicyEdgeviewcfgDevPolicy {
    allowDev?: boolean;
}

export interface ProjectAttestationPolicyEdgeviewPolicyEdgeviewcfgExtPolicy {
    allowExt?: boolean;
}

export interface ProjectAttestationPolicyEdgeviewPolicyEdgeviewcfgJwtInfo {
    allowSec?: number;
    dispUrl?: string;
    encrypt?: boolean;
    expireSec: string;
    numInst?: number;
}

export interface ProjectAttestationPolicyLocalOperatorConsolePolicy {
    /**
     * unique policy id
     */
    id: string;
    /**
     * Local operator console URL
     */
    locUrl: string;
}

export interface ProjectAttestationPolicyModulePolicy {
    /**
     * list of app details that will be provisioned on all the devices of the project to which this policy is attached
     */
    apps: outputs.ProjectAttestationPolicyModulePolicyApp[];
    /**
     * app that describes the azure edge agent to be deployed on the Azure runtime
     */
    azureEdgeAgents?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeAgent[];
    /**
     * app that describes the azure edge hub to be deployed on the Azure runtime
     */
    azureEdgeHubs?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeHub[];
    /**
     * etag for deployment
     */
    etag?: string;
    /**
     * unique id for deployment
     */
    id: string;
    /**
     * Mapping of label variable keys and value
     */
    labels?: {[key: string]: string};
    /**
     * custom metrics for deployment
     */
    metrics?: outputs.ProjectAttestationPolicyModulePolicyMetric[];
    /**
     * deployment priority of module manifest
     */
    priority: number;
    /**
     * Mapping of routes variable keys and value
     */
    routes?: {[key: string]: string};
    /**
     * target condition for deployment that matches single device or group of devices
     */
    targetCondition?: string;
    /**
     * target condition for deployment that matches single device or group of devices
     */
    targetConditionNew?: {[key: string]: string};
}

export interface ProjectAttestationPolicyModulePolicyApp {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.ProjectAttestationPolicyModulePolicyAppInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.ProjectAttestationPolicyModulePolicyAppManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.ProjectAttestationPolicyModulePolicyAppParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface ProjectAttestationPolicyModulePolicyAppInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.ProjectAttestationPolicyModulePolicyAppInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.ProjectAttestationPolicyModulePolicyAppInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.ProjectAttestationPolicyModulePolicyAppInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface ProjectAttestationPolicyModulePolicyAppInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.ProjectAttestationPolicyModulePolicyAppInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.ProjectAttestationPolicyModulePolicyAppInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface ProjectAttestationPolicyModulePolicyAppInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.ProjectAttestationPolicyModulePolicyAppInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface ProjectAttestationPolicyModulePolicyAppInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface ProjectAttestationPolicyModulePolicyAppInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface ProjectAttestationPolicyModulePolicyAppInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.ProjectAttestationPolicyModulePolicyAppInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface ProjectAttestationPolicyModulePolicyAppInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface ProjectAttestationPolicyModulePolicyAppInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface ProjectAttestationPolicyModulePolicyAppManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.ProjectAttestationPolicyModulePolicyAppManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.ProjectAttestationPolicyModulePolicyAppManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.ProjectAttestationPolicyModulePolicyAppManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.ProjectAttestationPolicyModulePolicyAppManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.ProjectAttestationPolicyModulePolicyAppManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.ProjectAttestationPolicyModulePolicyAppManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.ProjectAttestationPolicyModulePolicyAppManifestJsonOwner[];
    permissions?: outputs.ProjectAttestationPolicyModulePolicyAppManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.ProjectAttestationPolicyModulePolicyAppManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface ProjectAttestationPolicyModulePolicyAppManifestJsonConfiguration {
    customConfigs?: outputs.ProjectAttestationPolicyModulePolicyAppManifestJsonConfigurationCustomConfig[];
}

export interface ProjectAttestationPolicyModulePolicyAppManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.ProjectAttestationPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface ProjectAttestationPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.ProjectAttestationPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.ProjectAttestationPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface ProjectAttestationPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface ProjectAttestationPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.ProjectAttestationPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface ProjectAttestationPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface ProjectAttestationPolicyModulePolicyAppManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface ProjectAttestationPolicyModulePolicyAppManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface ProjectAttestationPolicyModulePolicyAppManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.ProjectAttestationPolicyModulePolicyAppManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface ProjectAttestationPolicyModulePolicyAppManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface ProjectAttestationPolicyModulePolicyAppManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.ProjectAttestationPolicyModulePolicyAppManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface ProjectAttestationPolicyModulePolicyAppManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.ProjectAttestationPolicyModulePolicyAppManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.ProjectAttestationPolicyModulePolicyAppManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface ProjectAttestationPolicyModulePolicyAppManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.ProjectAttestationPolicyModulePolicyAppManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.ProjectAttestationPolicyModulePolicyAppManifestJsonInterfaceAclActionPortmapto[];
}

export interface ProjectAttestationPolicyModulePolicyAppManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface ProjectAttestationPolicyModulePolicyAppManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface ProjectAttestationPolicyModulePolicyAppManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface ProjectAttestationPolicyModulePolicyAppManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface ProjectAttestationPolicyModulePolicyAppManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface ProjectAttestationPolicyModulePolicyAppManifestJsonPermission {
}

export interface ProjectAttestationPolicyModulePolicyAppManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface ProjectAttestationPolicyModulePolicyAppParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeAgent {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeAgentInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeAgentParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeAgentInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeAgentInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeAgentInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeAgentInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeAgentInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeAgentInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeAgentInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeAgentInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeAgentInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeAgentInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeAgentInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeAgentInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeAgentInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeAgentInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeAgentInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonOwner[];
    permissions?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonConfiguration {
    customConfigs?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfig[];
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionPortmapto[];
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonPermission {
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeAgentManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeAgentParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeHub {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeHubInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeHubParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeHubInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeHubInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeHubInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeHubInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeHubInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeHubInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeHubInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeHubInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeHubInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeHubInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeHubInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeHubInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeHubInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeHubInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeHubInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonOwner[];
    permissions?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonConfiguration {
    customConfigs?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfig[];
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionPortmapto[];
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonPermission {
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeHubManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface ProjectAttestationPolicyModulePolicyAzureEdgeHubParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface ProjectAttestationPolicyModulePolicyMetric {
    /**
     * Mapping of queries variable keys and value
     */
    queries?: {[key: string]: string};
    /**
     * Mapping of results variable keys and value
     */
    results?: {[key: string]: string};
}

export interface ProjectAttestationPolicyNetworkPolicy {
    /**
     * list of network details that will be created on all the devices of the project to which this policy is attached
     */
    netInstanceConfigs: outputs.ProjectAttestationPolicyNetworkPolicyNetInstanceConfig[];
}

export interface ProjectAttestationPolicyNetworkPolicyNetInstanceConfig {
    /**
     * ID of the Cluster in which the network instance is configured
     */
    clusterId?: string;
    /**
     * Detailed description of the network instance
     */
    description?: string;
    /**
     * Flag to indicate if this is the default network instance for the device
     */
    deviceDefault?: boolean;
    /**
     * ID of the device on which network instance is created
     */
    deviceId: string;
    /**
     * Deprecated
     */
    dhcp?: boolean;
    /**
     * List of Static DNS entries
     */
    dnsLists?: outputs.ProjectAttestationPolicyNetworkPolicyNetInstanceConfigDnsList[];
    /**
     * System defined universally unique ID of the network instance
     */
    id: string;
    /**
     * DHCP Server Configuration
     */
    ips?: outputs.ProjectAttestationPolicyNetworkPolicyNetInstanceConfigIp[];
    /**
     * Kind of Network Instance:
     * NETWORK_INSTANCE_KIND_UNSPECIFIED
     * NETWORK_INSTANCE_KIND_TRANSPARENT
     * NETWORK_INSTANCE_KIND_SWITCH
     * NETWORK_INSTANCE_KIND_LOCAL
     * NETWORK_INSTANCE_KIND_CLOUD
     * NETWORK_INSTANCE_KIND_MESH
     * NETWORK_INSTANCE_KIND_HONEYPOT
     */
    kind: string;
    /**
     * Lisp Config : read only for now. Deprecated.
     */
    lisps: outputs.ProjectAttestationPolicyNetworkPolicyNetInstanceConfigLisp[];
    /**
     * User defined name of the network instance, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * id of the network policy to be attached to this network instance
     */
    networkPolicyId?: string;
    oconfig?: string;
    /**
     * Service specific Config
     */
    opaques?: outputs.ProjectAttestationPolicyNetworkPolicyNetInstanceConfigOpaque[];
    /**
     * name of port mapping in the model
     */
    port?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    portTags?: {[key: string]: string};
    /**
     * id of the project in which network instance is created
     */
    projectId: string;
    /**
     * system defined info for the object
     */
    revisions: outputs.ProjectAttestationPolicyNetworkPolicyNetInstanceConfigRevision[];
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the network instance. Title can be changed at any time
     */
    title: string;
    /**
     * Type of DHCP for this Network Instance:
     * NETWORK_INSTANCE_DHCP_TYPE_V4
     * NETWORK_INSTANCE_DHCP_TYPE_V6
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOEID
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOV4
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOV6
     */
    type: string;
}

export interface ProjectAttestationPolicyNetworkPolicyNetInstanceConfigDnsList {
    /**
     * Addresses
     */
    addrs?: string[];
    /**
     * Host name
     */
    hostname?: string;
}

export interface ProjectAttestationPolicyNetworkPolicyNetInstanceConfigIp {
    /**
     * Range of IP addresses to be used for DHCP
     */
    dhcpRanges?: outputs.ProjectAttestationPolicyNetworkPolicyNetInstanceConfigIpDhcpRange[];
    /**
     * IP Addresses of DNS servers
     */
    dns?: string[];
    /**
     * Network domain
     */
    domain?: string;
    /**
     * IP Address of Network Gateway
     */
    gateway?: string;
    /**
     * Subnet Mask
     */
    mask?: string;
    /**
     * IP Address of NTP Server
     */
    ntp?: string;
    /**
     * Subnet address
     */
    subnet: string;
}

export interface ProjectAttestationPolicyNetworkPolicyNetInstanceConfigIpDhcpRange {
    /**
     * ending IP
     */
    end?: string;
    /**
     * starting IP
     */
    start?: string;
}

export interface ProjectAttestationPolicyNetworkPolicyNetInstanceConfigLisp {
    allocate: boolean;
    allocationprefix: string;
    allocationprefixlen: number;
    exportprivate: boolean;
    lispiid: number;
    sps: outputs.ProjectAttestationPolicyNetworkPolicyNetInstanceConfigLispSp[];
}

export interface ProjectAttestationPolicyNetworkPolicyNetInstanceConfigLispSp {
    credential: string;
    nameOrIp: string;
    type: string;
}

export interface ProjectAttestationPolicyNetworkPolicyNetInstanceConfigOpaque {
    /**
     * Deprecated - Lisp config
     */
    lisps?: outputs.ProjectAttestationPolicyNetworkPolicyNetInstanceConfigOpaqueLisp[];
    /**
     * base64 encoded string of opaque config
     */
    oconfig?: string;
    /**
     * type of Opaque config
     */
    type?: string;
}

export interface ProjectAttestationPolicyNetworkPolicyNetInstanceConfigOpaqueLisp {
    /**
     * Allocate flag
     */
    allocate?: boolean;
    /**
     * Allocation Prefix
     */
    allocationprefix?: string;
    /**
     * Allocation Prefix Length
     */
    allocationprefixlen?: number;
    /**
     * Export Private flag
     */
    exportprivate?: boolean;
    /**
     * lisp id
     */
    lispiid?: number;
    /**
     * Service Point List
     */
    sps?: outputs.ProjectAttestationPolicyNetworkPolicyNetInstanceConfigOpaqueLispSp[];
}

export interface ProjectAttestationPolicyNetworkPolicyNetInstanceConfigOpaqueLispSp {
    /**
     * Service credentials
     */
    credential?: string;
    /**
     * Service name/ service name
     */
    nameOrIp?: string;
    /**
     * Service Point Type
     */
    type?: string;
}

export interface ProjectAttestationPolicyNetworkPolicyNetInstanceConfigRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface ProjectAttestationPolicyRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface ProjectCloudPolicy {
    appPolicies: outputs.ProjectCloudPolicyAppPolicy[];
    attestationPolicies: outputs.ProjectCloudPolicyAttestationPolicy[];
    attr: {[key: string]: string};
    azurePolicies: outputs.ProjectCloudPolicyAzurePolicy[];
    clusterPolicies: outputs.ProjectCloudPolicyClusterPolicy[];
    description: string;
    edgeviewPolicies: outputs.ProjectCloudPolicyEdgeviewPolicy[];
    id: string;
    localOperatorConsolePolicies: outputs.ProjectCloudPolicyLocalOperatorConsolePolicy[];
    modulePolicies: outputs.ProjectCloudPolicyModulePolicy[];
    name: string;
    networkPolicies: outputs.ProjectCloudPolicyNetworkPolicy[];
    revisions: outputs.ProjectCloudPolicyRevision[];
    status: string;
    statusMessage: string;
    title: string;
    type: string;
}

export interface ProjectCloudPolicyAppPolicy {
    apps: outputs.ProjectCloudPolicyAppPolicyApp[];
}

export interface ProjectCloudPolicyAppPolicyApp {
    appId: string;
    appVersion: string;
    cpus: number;
    description: string;
    drives: number;
    id: string;
    interfaces: outputs.ProjectCloudPolicyAppPolicyAppInterface[];
    manifestJsons: outputs.ProjectCloudPolicyAppPolicyAppManifestJson[];
    memory: number;
    name: string;
    nameAppPart: string;
    nameProjectPart: string;
    namingScheme: string;
    networks: number;
    originType: string;
    parentDetails: outputs.ProjectCloudPolicyAppPolicyAppParentDetail[];
    startDelayInSeconds: number;
    storage: number;
    tags: {[key: string]: string};
    title: string;
}

export interface ProjectCloudPolicyAppPolicyAppInterface {
    accessVlanId: number;
    acls: outputs.ProjectCloudPolicyAppPolicyAppInterfaceAcl[];
    defaultNetInstance: boolean;
    directattach: boolean;
    eidregisters: outputs.ProjectCloudPolicyAppPolicyAppInterfaceEidregister[];
    intfname: string;
    intforder: number;
    ios: outputs.ProjectCloudPolicyAppPolicyAppInterfaceIo[];
    ipaddr: string;
    macaddr: string;
    netinstid: string;
    netinstname: string;
    netinsttag: {[key: string]: string};
    netname: string;
    privateip: boolean;
}

export interface ProjectCloudPolicyAppPolicyAppInterfaceAcl {
    actions: outputs.ProjectCloudPolicyAppPolicyAppInterfaceAclAction[];
    id: number;
    matches: outputs.ProjectCloudPolicyAppPolicyAppInterfaceAclMatch[];
    name: string;
}

export interface ProjectCloudPolicyAppPolicyAppInterfaceAclAction {
    drop: boolean;
    limit: boolean;
    limitburst: number;
    limitrate: number;
    limitunit: string;
    mapparams: outputs.ProjectCloudPolicyAppPolicyAppInterfaceAclActionMapparam[];
    portmap: boolean;
}

export interface ProjectCloudPolicyAppPolicyAppInterfaceAclActionMapparam {
    port: number;
}

export interface ProjectCloudPolicyAppPolicyAppInterfaceAclMatch {
    type: string;
    value: string;
}

export interface ProjectCloudPolicyAppPolicyAppInterfaceEidregister {
    appCert: string;
    appPrivateKey: string;
    appPublicKey: string;
    displayName: string;
    eId: string;
    eIdHashLen: number;
    lispInstance: number;
    lispMapServers: outputs.ProjectCloudPolicyAppPolicyAppInterfaceEidregisterLispMapServer[];
    lispSignature: string;
    uuid: string;
}

export interface ProjectCloudPolicyAppPolicyAppInterfaceEidregisterLispMapServer {
    credential: string;
    nameOrIp: string;
}

export interface ProjectCloudPolicyAppPolicyAppInterfaceIo {
    name: string;
    tags: {[key: string]: string};
    type: string;
}

export interface ProjectCloudPolicyAppPolicyAppManifestJson {
    acKind: string;
    acVersion: string;
    appType: string;
    configurations: outputs.ProjectCloudPolicyAppPolicyAppManifestJsonConfiguration[];
    containerDetails: outputs.ProjectCloudPolicyAppPolicyAppManifestJsonContainerDetail[];
    cpuPinningEnabled: boolean;
    deploymentType: string;
    description: string;
    descs: outputs.ProjectCloudPolicyAppPolicyAppManifestJsonDesc[];
    displayName: string;
    enablevnc: boolean;
    images: outputs.ProjectCloudPolicyAppPolicyAppManifestJsonImage[];
    interfaces: outputs.ProjectCloudPolicyAppPolicyAppManifestJsonInterface[];
    modules: outputs.ProjectCloudPolicyAppPolicyAppManifestJsonModule[];
    name: string;
    owners: outputs.ProjectCloudPolicyAppPolicyAppManifestJsonOwner[];
    permissions: outputs.ProjectCloudPolicyAppPolicyAppManifestJsonPermission[];
    resources: outputs.ProjectCloudPolicyAppPolicyAppManifestJsonResource[];
    vmmode: string;
}

export interface ProjectCloudPolicyAppPolicyAppManifestJsonConfiguration {
    customConfigs: outputs.ProjectCloudPolicyAppPolicyAppManifestJsonConfigurationCustomConfig[];
}

export interface ProjectCloudPolicyAppPolicyAppManifestJsonConfigurationCustomConfig {
    add: boolean;
    allowStorageResize: boolean;
    fieldDelimiter: string;
    name: string;
    override: boolean;
    template: string;
    variableGroups: outputs.ProjectCloudPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface ProjectCloudPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroup {
    conditions: outputs.ProjectCloudPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    name: string;
    required: boolean;
    variables: outputs.ProjectCloudPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface ProjectCloudPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name: string;
    operator: string;
    value: string;
}

export interface ProjectCloudPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable {
    default: string;
    encode: string;
    format: string;
    label: string;
    maxLength: string;
    name: string;
    options: outputs.ProjectCloudPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput: string;
    required: boolean;
    type: string;
    value: string;
}

export interface ProjectCloudPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    label: string;
    value: string;
}

export interface ProjectCloudPolicyAppPolicyAppManifestJsonContainerDetail {
    containerCreateOption: string;
}

export interface ProjectCloudPolicyAppPolicyAppManifestJsonDesc {
    agreementList: {[key: string]: string};
    appCategory: string;
    category: string;
    licenseList: {[key: string]: string};
    logo: {[key: string]: string};
    os: string;
    screenshotList: {[key: string]: string};
    support: string;
}

export interface ProjectCloudPolicyAppPolicyAppManifestJsonImage {
    cleartext: boolean;
    drvtype: string;
    ignorepurge: boolean;
    imageformat: string;
    imageid: string;
    imagename: string;
    maxsize: string;
    mountpath: string;
    params: outputs.ProjectCloudPolicyAppPolicyAppManifestJsonImageParam[];
    preserve: boolean;
    readonly: boolean;
    target: string;
    volumelabel: string;
}

export interface ProjectCloudPolicyAppPolicyAppManifestJsonImageParam {
    name: string;
    value: string;
}

export interface ProjectCloudPolicyAppPolicyAppManifestJsonInterface {
    acls: outputs.ProjectCloudPolicyAppPolicyAppManifestJsonInterfaceAcl[];
    directattach: boolean;
    name: string;
    optional: boolean;
    privateip: boolean;
    type: string;
}

export interface ProjectCloudPolicyAppPolicyAppManifestJsonInterfaceAcl {
    actions: outputs.ProjectCloudPolicyAppPolicyAppManifestJsonInterfaceAclAction[];
    matches: outputs.ProjectCloudPolicyAppPolicyAppManifestJsonInterfaceAclMatch[];
    name: string;
}

export interface ProjectCloudPolicyAppPolicyAppManifestJsonInterfaceAclAction {
    drop: boolean;
    limit: boolean;
    limitValues: outputs.ProjectCloudPolicyAppPolicyAppManifestJsonInterfaceAclActionLimitValue[];
    limitburst: number;
    limitrate: number;
    limitunit: string;
    portmap: boolean;
    portmaptos: outputs.ProjectCloudPolicyAppPolicyAppManifestJsonInterfaceAclActionPortmapto[];
}

export interface ProjectCloudPolicyAppPolicyAppManifestJsonInterfaceAclActionLimitValue {
    limitburst: number;
    limitrate: number;
    limitunit: string;
}

export interface ProjectCloudPolicyAppPolicyAppManifestJsonInterfaceAclActionPortmapto {
    appPort: number;
}

export interface ProjectCloudPolicyAppPolicyAppManifestJsonInterfaceAclMatch {
    type: string;
    value: string;
}

export interface ProjectCloudPolicyAppPolicyAppManifestJsonModule {
    environment: {[key: string]: string};
    moduleType: string;
    routes: {[key: string]: string};
    twinDetail: string;
}

export interface ProjectCloudPolicyAppPolicyAppManifestJsonOwner {
    company: string;
    email: string;
    group: string;
    user: string;
    website: string;
}

export interface ProjectCloudPolicyAppPolicyAppManifestJsonPermission {
}

export interface ProjectCloudPolicyAppPolicyAppManifestJsonResource {
    name: string;
    value: string;
}

export interface ProjectCloudPolicyAppPolicyAppParentDetail {
    idOfParentObject: string;
    referenceExists: boolean;
    updateAvailable: boolean;
    versionOfParentObject: number;
}

export interface ProjectCloudPolicyAttestationPolicy {
    id: string;
    type: string;
}

export interface ProjectCloudPolicyAzurePolicy {
    appId: string;
    appPassword: string;
    azureResourceAndServices: outputs.ProjectCloudPolicyAzurePolicyAzureResourceAndService[];
    certificates: outputs.ProjectCloudPolicyAzurePolicyCertificate[];
    cryptoKey: string;
    customDeploymentManaged: boolean;
    encryptedSecrets: {[key: string]: string};
    tenantId: string;
}

export interface ProjectCloudPolicyAzurePolicyAzureResourceAndService {
    dpsServices: outputs.ProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsService[];
    iotHubServices: outputs.ProjectCloudPolicyAzurePolicyAzureResourceAndServiceIotHubService[];
    resourceGroups: outputs.ProjectCloudPolicyAzurePolicyAzureResourceAndServiceResourceGroup[];
}

export interface ProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsService {
    enrollments: outputs.ProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollment[];
    serviceDetails: outputs.ProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetail[];
}

export interface ProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollment {
    allocationPolicy: string;
    attachedIotHubsNames: string[];
    certificateEnrollments: outputs.ProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollment[];
    enableIotEdgeDevice: boolean;
    mechanism: string;
    symmetricKeyEnrollments: outputs.ProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollment[];
    tags: {[key: string]: string};
    tpmEnrollments: outputs.ProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentTpmEnrollment[];
}

export interface ProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollment {
    groupCertificateEnrollments: outputs.ProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollmentGroupCertificateEnrollment[];
    individualCertificateEnrollment: string;
    type: string;
}

export interface ProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollmentGroupCertificateEnrollment {
    groupName: string;
}

export interface ProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollment {
    groupSymmetricKeyEnrollments: outputs.ProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentGroupSymmetricKeyEnrollment[];
    individualSymmetricKeyEnrollments: outputs.ProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentIndividualSymmetricKeyEnrollment[];
    type: string;
}

export interface ProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentGroupSymmetricKeyEnrollment {
    groupName: string;
}

export interface ProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentIndividualSymmetricKeyEnrollment {
    registrationId: string;
}

export interface ProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentTpmEnrollment {
    type: string;
}

export interface ProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetail {
    createByDefault: boolean;
    name: string;
    region: string;
    resourceGroupName: string;
    sKUs: outputs.ProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetailSKU[];
    subscriptionId: string;
}

export interface ProjectCloudPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetailSKU {
    capacity: string;
    name: string;
    tier: string;
}

export interface ProjectCloudPolicyAzurePolicyAzureResourceAndServiceIotHubService {
    serviceDetails: outputs.ProjectCloudPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetail[];
}

export interface ProjectCloudPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetail {
    createByDefault: boolean;
    name: string;
    region: string;
    resourceGroupName: string;
    sKUs: outputs.ProjectCloudPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetailSKU[];
    subscriptionId: string;
}

export interface ProjectCloudPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetailSKU {
    capacity: string;
    name: string;
    tier: string;
}

export interface ProjectCloudPolicyAzurePolicyAzureResourceAndServiceResourceGroup {
    name: string;
    region: string;
    subscriptionId: string;
}

export interface ProjectCloudPolicyAzurePolicyCertificate {
    basicContraintsValid: boolean;
    cert: string;
    cryptoKey: string;
    ecdsaEncryptions: outputs.ProjectCloudPolicyAzurePolicyCertificateEcdsaEncryption[];
    encryptedSecrets: {[key: string]: string};
    exportable: boolean;
    extendedKeyUsages: string[];
    issuers: outputs.ProjectCloudPolicyAzurePolicyCertificateIssuer[];
    keyUsage: number;
    passPhrase: string;
    publicKey: string;
    publicKeyAlgorithm: string;
    pvtKey: string;
    reuseKey: boolean;
    rsaEcryptions: outputs.ProjectCloudPolicyAzurePolicyCertificateRsaEcryption[];
    sanValues: outputs.ProjectCloudPolicyAzurePolicyCertificateSanValue[];
    serialNumber: string;
    signatureAlgorithm: string;
    subjects: outputs.ProjectCloudPolicyAzurePolicyCertificateSubject[];
    validFrom: string;
    validTill: string;
}

export interface ProjectCloudPolicyAzurePolicyCertificateEcdsaEncryption {
    curve: string;
}

export interface ProjectCloudPolicyAzurePolicyCertificateIssuer {
    commonName: string;
    countries: string[];
    localities: string[];
    organizationalUnits: string[];
    organizations: string[];
    postalCodes: string[];
    provinces: string[];
    serialNumber: string;
}

export interface ProjectCloudPolicyAzurePolicyCertificateRsaEcryption {
    rsaBits: string;
}

export interface ProjectCloudPolicyAzurePolicyCertificateSanValue {
    dns: string[];
    emaildIds: string[];
    hosts: string[];
    ips: string[];
    upns: string[];
    uris: string[];
}

export interface ProjectCloudPolicyAzurePolicyCertificateSubject {
    commonName: string;
    countries: string[];
    localities: string[];
    organizationalUnits: string[];
    organizations: string[];
    postalCodes: string[];
    provinces: string[];
    serialNumber: string;
}

export interface ProjectCloudPolicyClusterPolicy {
    appPolicyId: string;
    clusterConfigs: outputs.ProjectCloudPolicyClusterPolicyClusterConfig[];
    networkPolicyId: string;
    type: string;
}

export interface ProjectCloudPolicyClusterPolicyClusterConfig {
    minNodesRequired: number;
}

export interface ProjectCloudPolicyEdgeviewPolicy {
    accessAllowChange: boolean;
    edgeviewAllow: boolean;
    edgeviewcfgs: outputs.ProjectCloudPolicyEdgeviewPolicyEdgeviewcfg[];
    maxExpireSec: number;
    maxInst: number;
}

export interface ProjectCloudPolicyEdgeviewPolicyEdgeviewcfg {
    appPolicies: outputs.ProjectCloudPolicyEdgeviewPolicyEdgeviewcfgAppPolicy[];
    devPolicies: outputs.ProjectCloudPolicyEdgeviewPolicyEdgeviewcfgDevPolicy[];
    extPolicies: outputs.ProjectCloudPolicyEdgeviewPolicyEdgeviewcfgExtPolicy[];
    generationId: number;
    jwtInfos: outputs.ProjectCloudPolicyEdgeviewPolicyEdgeviewcfgJwtInfo[];
    token: string;
}

export interface ProjectCloudPolicyEdgeviewPolicyEdgeviewcfgAppPolicy {
    allowApp: boolean;
}

export interface ProjectCloudPolicyEdgeviewPolicyEdgeviewcfgDevPolicy {
    allowDev: boolean;
}

export interface ProjectCloudPolicyEdgeviewPolicyEdgeviewcfgExtPolicy {
    allowExt: boolean;
}

export interface ProjectCloudPolicyEdgeviewPolicyEdgeviewcfgJwtInfo {
    allowSec: number;
    dispUrl: string;
    encrypt: boolean;
    expireSec: string;
    numInst: number;
}

export interface ProjectCloudPolicyLocalOperatorConsolePolicy {
    id: string;
    locUrl: string;
}

export interface ProjectCloudPolicyModulePolicy {
    apps: outputs.ProjectCloudPolicyModulePolicyApp[];
    azureEdgeAgents: outputs.ProjectCloudPolicyModulePolicyAzureEdgeAgent[];
    azureEdgeHubs: outputs.ProjectCloudPolicyModulePolicyAzureEdgeHub[];
    etag: string;
    id: string;
    labels: {[key: string]: string};
    metrics: outputs.ProjectCloudPolicyModulePolicyMetric[];
    priority: number;
    routes: {[key: string]: string};
    targetCondition: string;
    targetConditionNew: {[key: string]: string};
}

export interface ProjectCloudPolicyModulePolicyApp {
    appId: string;
    appVersion: string;
    cpus: number;
    description: string;
    drives: number;
    id: string;
    interfaces: outputs.ProjectCloudPolicyModulePolicyAppInterface[];
    manifestJsons: outputs.ProjectCloudPolicyModulePolicyAppManifestJson[];
    memory: number;
    name: string;
    nameAppPart: string;
    nameProjectPart: string;
    namingScheme: string;
    networks: number;
    originType: string;
    parentDetails: outputs.ProjectCloudPolicyModulePolicyAppParentDetail[];
    startDelayInSeconds: number;
    storage: number;
    tags: {[key: string]: string};
    title: string;
}

export interface ProjectCloudPolicyModulePolicyAppInterface {
    accessVlanId: number;
    acls: outputs.ProjectCloudPolicyModulePolicyAppInterfaceAcl[];
    defaultNetInstance: boolean;
    directattach: boolean;
    eidregisters: outputs.ProjectCloudPolicyModulePolicyAppInterfaceEidregister[];
    intfname: string;
    intforder: number;
    ios: outputs.ProjectCloudPolicyModulePolicyAppInterfaceIo[];
    ipaddr: string;
    macaddr: string;
    netinstid: string;
    netinstname: string;
    netinsttag: {[key: string]: string};
    netname: string;
    privateip: boolean;
}

export interface ProjectCloudPolicyModulePolicyAppInterfaceAcl {
    actions: outputs.ProjectCloudPolicyModulePolicyAppInterfaceAclAction[];
    id: number;
    matches: outputs.ProjectCloudPolicyModulePolicyAppInterfaceAclMatch[];
    name: string;
}

export interface ProjectCloudPolicyModulePolicyAppInterfaceAclAction {
    drop: boolean;
    limit: boolean;
    limitburst: number;
    limitrate: number;
    limitunit: string;
    mapparams: outputs.ProjectCloudPolicyModulePolicyAppInterfaceAclActionMapparam[];
    portmap: boolean;
}

export interface ProjectCloudPolicyModulePolicyAppInterfaceAclActionMapparam {
    port: number;
}

export interface ProjectCloudPolicyModulePolicyAppInterfaceAclMatch {
    type: string;
    value: string;
}

export interface ProjectCloudPolicyModulePolicyAppInterfaceEidregister {
    appCert: string;
    appPrivateKey: string;
    appPublicKey: string;
    displayName: string;
    eId: string;
    eIdHashLen: number;
    lispInstance: number;
    lispMapServers: outputs.ProjectCloudPolicyModulePolicyAppInterfaceEidregisterLispMapServer[];
    lispSignature: string;
    uuid: string;
}

export interface ProjectCloudPolicyModulePolicyAppInterfaceEidregisterLispMapServer {
    credential: string;
    nameOrIp: string;
}

export interface ProjectCloudPolicyModulePolicyAppInterfaceIo {
    name: string;
    tags: {[key: string]: string};
    type: string;
}

export interface ProjectCloudPolicyModulePolicyAppManifestJson {
    acKind: string;
    acVersion: string;
    appType: string;
    configurations: outputs.ProjectCloudPolicyModulePolicyAppManifestJsonConfiguration[];
    containerDetails: outputs.ProjectCloudPolicyModulePolicyAppManifestJsonContainerDetail[];
    cpuPinningEnabled: boolean;
    deploymentType: string;
    description: string;
    descs: outputs.ProjectCloudPolicyModulePolicyAppManifestJsonDesc[];
    displayName: string;
    enablevnc: boolean;
    images: outputs.ProjectCloudPolicyModulePolicyAppManifestJsonImage[];
    interfaces: outputs.ProjectCloudPolicyModulePolicyAppManifestJsonInterface[];
    modules: outputs.ProjectCloudPolicyModulePolicyAppManifestJsonModule[];
    name: string;
    owners: outputs.ProjectCloudPolicyModulePolicyAppManifestJsonOwner[];
    permissions: outputs.ProjectCloudPolicyModulePolicyAppManifestJsonPermission[];
    resources: outputs.ProjectCloudPolicyModulePolicyAppManifestJsonResource[];
    vmmode: string;
}

export interface ProjectCloudPolicyModulePolicyAppManifestJsonConfiguration {
    customConfigs: outputs.ProjectCloudPolicyModulePolicyAppManifestJsonConfigurationCustomConfig[];
}

export interface ProjectCloudPolicyModulePolicyAppManifestJsonConfigurationCustomConfig {
    add: boolean;
    allowStorageResize: boolean;
    fieldDelimiter: string;
    name: string;
    override: boolean;
    template: string;
    variableGroups: outputs.ProjectCloudPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface ProjectCloudPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroup {
    conditions: outputs.ProjectCloudPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    name: string;
    required: boolean;
    variables: outputs.ProjectCloudPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface ProjectCloudPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name: string;
    operator: string;
    value: string;
}

export interface ProjectCloudPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable {
    default: string;
    encode: string;
    format: string;
    label: string;
    maxLength: string;
    name: string;
    options: outputs.ProjectCloudPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput: string;
    required: boolean;
    type: string;
    value: string;
}

export interface ProjectCloudPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    label: string;
    value: string;
}

export interface ProjectCloudPolicyModulePolicyAppManifestJsonContainerDetail {
    containerCreateOption: string;
}

export interface ProjectCloudPolicyModulePolicyAppManifestJsonDesc {
    agreementList: {[key: string]: string};
    appCategory: string;
    category: string;
    licenseList: {[key: string]: string};
    logo: {[key: string]: string};
    os: string;
    screenshotList: {[key: string]: string};
    support: string;
}

export interface ProjectCloudPolicyModulePolicyAppManifestJsonImage {
    cleartext: boolean;
    drvtype: string;
    ignorepurge: boolean;
    imageformat: string;
    imageid: string;
    imagename: string;
    maxsize: string;
    mountpath: string;
    params: outputs.ProjectCloudPolicyModulePolicyAppManifestJsonImageParam[];
    preserve: boolean;
    readonly: boolean;
    target: string;
    volumelabel: string;
}

export interface ProjectCloudPolicyModulePolicyAppManifestJsonImageParam {
    name: string;
    value: string;
}

export interface ProjectCloudPolicyModulePolicyAppManifestJsonInterface {
    acls: outputs.ProjectCloudPolicyModulePolicyAppManifestJsonInterfaceAcl[];
    directattach: boolean;
    name: string;
    optional: boolean;
    privateip: boolean;
    type: string;
}

export interface ProjectCloudPolicyModulePolicyAppManifestJsonInterfaceAcl {
    actions: outputs.ProjectCloudPolicyModulePolicyAppManifestJsonInterfaceAclAction[];
    matches: outputs.ProjectCloudPolicyModulePolicyAppManifestJsonInterfaceAclMatch[];
    name: string;
}

export interface ProjectCloudPolicyModulePolicyAppManifestJsonInterfaceAclAction {
    drop: boolean;
    limit: boolean;
    limitValues: outputs.ProjectCloudPolicyModulePolicyAppManifestJsonInterfaceAclActionLimitValue[];
    limitburst: number;
    limitrate: number;
    limitunit: string;
    portmap: boolean;
    portmaptos: outputs.ProjectCloudPolicyModulePolicyAppManifestJsonInterfaceAclActionPortmapto[];
}

export interface ProjectCloudPolicyModulePolicyAppManifestJsonInterfaceAclActionLimitValue {
    limitburst: number;
    limitrate: number;
    limitunit: string;
}

export interface ProjectCloudPolicyModulePolicyAppManifestJsonInterfaceAclActionPortmapto {
    appPort: number;
}

export interface ProjectCloudPolicyModulePolicyAppManifestJsonInterfaceAclMatch {
    type: string;
    value: string;
}

export interface ProjectCloudPolicyModulePolicyAppManifestJsonModule {
    environment: {[key: string]: string};
    moduleType: string;
    routes: {[key: string]: string};
    twinDetail: string;
}

export interface ProjectCloudPolicyModulePolicyAppManifestJsonOwner {
    company: string;
    email: string;
    group: string;
    user: string;
    website: string;
}

export interface ProjectCloudPolicyModulePolicyAppManifestJsonPermission {
}

export interface ProjectCloudPolicyModulePolicyAppManifestJsonResource {
    name: string;
    value: string;
}

export interface ProjectCloudPolicyModulePolicyAppParentDetail {
    idOfParentObject: string;
    referenceExists: boolean;
    updateAvailable: boolean;
    versionOfParentObject: number;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeAgent {
    appId: string;
    appVersion: string;
    cpus: number;
    description: string;
    drives: number;
    id: string;
    interfaces: outputs.ProjectCloudPolicyModulePolicyAzureEdgeAgentInterface[];
    manifestJsons: outputs.ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJson[];
    memory: number;
    name: string;
    nameAppPart: string;
    nameProjectPart: string;
    namingScheme: string;
    networks: number;
    originType: string;
    parentDetails: outputs.ProjectCloudPolicyModulePolicyAzureEdgeAgentParentDetail[];
    startDelayInSeconds: number;
    storage: number;
    tags: {[key: string]: string};
    title: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeAgentInterface {
    accessVlanId: number;
    acls: outputs.ProjectCloudPolicyModulePolicyAzureEdgeAgentInterfaceAcl[];
    defaultNetInstance: boolean;
    directattach: boolean;
    eidregisters: outputs.ProjectCloudPolicyModulePolicyAzureEdgeAgentInterfaceEidregister[];
    intfname: string;
    intforder: number;
    ios: outputs.ProjectCloudPolicyModulePolicyAzureEdgeAgentInterfaceIo[];
    ipaddr: string;
    macaddr: string;
    netinstid: string;
    netinstname: string;
    netinsttag: {[key: string]: string};
    netname: string;
    privateip: boolean;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeAgentInterfaceAcl {
    actions: outputs.ProjectCloudPolicyModulePolicyAzureEdgeAgentInterfaceAclAction[];
    id: number;
    matches: outputs.ProjectCloudPolicyModulePolicyAzureEdgeAgentInterfaceAclMatch[];
    name: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeAgentInterfaceAclAction {
    drop: boolean;
    limit: boolean;
    limitburst: number;
    limitrate: number;
    limitunit: string;
    mapparams: outputs.ProjectCloudPolicyModulePolicyAzureEdgeAgentInterfaceAclActionMapparam[];
    portmap: boolean;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeAgentInterfaceAclActionMapparam {
    port: number;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeAgentInterfaceAclMatch {
    type: string;
    value: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeAgentInterfaceEidregister {
    appCert: string;
    appPrivateKey: string;
    appPublicKey: string;
    displayName: string;
    eId: string;
    eIdHashLen: number;
    lispInstance: number;
    lispMapServers: outputs.ProjectCloudPolicyModulePolicyAzureEdgeAgentInterfaceEidregisterLispMapServer[];
    lispSignature: string;
    uuid: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeAgentInterfaceEidregisterLispMapServer {
    credential: string;
    nameOrIp: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeAgentInterfaceIo {
    name: string;
    tags: {[key: string]: string};
    type: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJson {
    acKind: string;
    acVersion: string;
    appType: string;
    configurations: outputs.ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonConfiguration[];
    containerDetails: outputs.ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonContainerDetail[];
    cpuPinningEnabled: boolean;
    deploymentType: string;
    description: string;
    descs: outputs.ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonDesc[];
    displayName: string;
    enablevnc: boolean;
    images: outputs.ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonImage[];
    interfaces: outputs.ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonInterface[];
    modules: outputs.ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonModule[];
    name: string;
    owners: outputs.ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonOwner[];
    permissions: outputs.ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonPermission[];
    resources: outputs.ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonResource[];
    vmmode: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonConfiguration {
    customConfigs: outputs.ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfig[];
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfig {
    add: boolean;
    allowStorageResize: boolean;
    fieldDelimiter: string;
    name: string;
    override: boolean;
    template: string;
    variableGroups: outputs.ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroup {
    conditions: outputs.ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    name: string;
    required: boolean;
    variables: outputs.ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name: string;
    operator: string;
    value: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariable {
    default: string;
    encode: string;
    format: string;
    label: string;
    maxLength: string;
    name: string;
    options: outputs.ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput: string;
    required: boolean;
    type: string;
    value: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    label: string;
    value: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonContainerDetail {
    containerCreateOption: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonDesc {
    agreementList: {[key: string]: string};
    appCategory: string;
    category: string;
    licenseList: {[key: string]: string};
    logo: {[key: string]: string};
    os: string;
    screenshotList: {[key: string]: string};
    support: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonImage {
    cleartext: boolean;
    drvtype: string;
    ignorepurge: boolean;
    imageformat: string;
    imageid: string;
    imagename: string;
    maxsize: string;
    mountpath: string;
    params: outputs.ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonImageParam[];
    preserve: boolean;
    readonly: boolean;
    target: string;
    volumelabel: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonImageParam {
    name: string;
    value: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonInterface {
    acls: outputs.ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAcl[];
    directattach: boolean;
    name: string;
    optional: boolean;
    privateip: boolean;
    type: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAcl {
    actions: outputs.ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclAction[];
    matches: outputs.ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclMatch[];
    name: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclAction {
    drop: boolean;
    limit: boolean;
    limitValues: outputs.ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionLimitValue[];
    limitburst: number;
    limitrate: number;
    limitunit: string;
    portmap: boolean;
    portmaptos: outputs.ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionPortmapto[];
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionLimitValue {
    limitburst: number;
    limitrate: number;
    limitunit: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionPortmapto {
    appPort: number;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclMatch {
    type: string;
    value: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonModule {
    environment: {[key: string]: string};
    moduleType: string;
    routes: {[key: string]: string};
    twinDetail: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonOwner {
    company: string;
    email: string;
    group: string;
    user: string;
    website: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonPermission {
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeAgentManifestJsonResource {
    name: string;
    value: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeAgentParentDetail {
    idOfParentObject: string;
    referenceExists: boolean;
    updateAvailable: boolean;
    versionOfParentObject: number;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeHub {
    appId: string;
    appVersion: string;
    cpus: number;
    description: string;
    drives: number;
    id: string;
    interfaces: outputs.ProjectCloudPolicyModulePolicyAzureEdgeHubInterface[];
    manifestJsons: outputs.ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJson[];
    memory: number;
    name: string;
    nameAppPart: string;
    nameProjectPart: string;
    namingScheme: string;
    networks: number;
    originType: string;
    parentDetails: outputs.ProjectCloudPolicyModulePolicyAzureEdgeHubParentDetail[];
    startDelayInSeconds: number;
    storage: number;
    tags: {[key: string]: string};
    title: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeHubInterface {
    accessVlanId: number;
    acls: outputs.ProjectCloudPolicyModulePolicyAzureEdgeHubInterfaceAcl[];
    defaultNetInstance: boolean;
    directattach: boolean;
    eidregisters: outputs.ProjectCloudPolicyModulePolicyAzureEdgeHubInterfaceEidregister[];
    intfname: string;
    intforder: number;
    ios: outputs.ProjectCloudPolicyModulePolicyAzureEdgeHubInterfaceIo[];
    ipaddr: string;
    macaddr: string;
    netinstid: string;
    netinstname: string;
    netinsttag: {[key: string]: string};
    netname: string;
    privateip: boolean;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeHubInterfaceAcl {
    actions: outputs.ProjectCloudPolicyModulePolicyAzureEdgeHubInterfaceAclAction[];
    id: number;
    matches: outputs.ProjectCloudPolicyModulePolicyAzureEdgeHubInterfaceAclMatch[];
    name: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeHubInterfaceAclAction {
    drop: boolean;
    limit: boolean;
    limitburst: number;
    limitrate: number;
    limitunit: string;
    mapparams: outputs.ProjectCloudPolicyModulePolicyAzureEdgeHubInterfaceAclActionMapparam[];
    portmap: boolean;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeHubInterfaceAclActionMapparam {
    port: number;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeHubInterfaceAclMatch {
    type: string;
    value: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeHubInterfaceEidregister {
    appCert: string;
    appPrivateKey: string;
    appPublicKey: string;
    displayName: string;
    eId: string;
    eIdHashLen: number;
    lispInstance: number;
    lispMapServers: outputs.ProjectCloudPolicyModulePolicyAzureEdgeHubInterfaceEidregisterLispMapServer[];
    lispSignature: string;
    uuid: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeHubInterfaceEidregisterLispMapServer {
    credential: string;
    nameOrIp: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeHubInterfaceIo {
    name: string;
    tags: {[key: string]: string};
    type: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJson {
    acKind: string;
    acVersion: string;
    appType: string;
    configurations: outputs.ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonConfiguration[];
    containerDetails: outputs.ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonContainerDetail[];
    cpuPinningEnabled: boolean;
    deploymentType: string;
    description: string;
    descs: outputs.ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonDesc[];
    displayName: string;
    enablevnc: boolean;
    images: outputs.ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonImage[];
    interfaces: outputs.ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonInterface[];
    modules: outputs.ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonModule[];
    name: string;
    owners: outputs.ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonOwner[];
    permissions: outputs.ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonPermission[];
    resources: outputs.ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonResource[];
    vmmode: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonConfiguration {
    customConfigs: outputs.ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfig[];
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfig {
    add: boolean;
    allowStorageResize: boolean;
    fieldDelimiter: string;
    name: string;
    override: boolean;
    template: string;
    variableGroups: outputs.ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroup {
    conditions: outputs.ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    name: string;
    required: boolean;
    variables: outputs.ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name: string;
    operator: string;
    value: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariable {
    default: string;
    encode: string;
    format: string;
    label: string;
    maxLength: string;
    name: string;
    options: outputs.ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput: string;
    required: boolean;
    type: string;
    value: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    label: string;
    value: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonContainerDetail {
    containerCreateOption: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonDesc {
    agreementList: {[key: string]: string};
    appCategory: string;
    category: string;
    licenseList: {[key: string]: string};
    logo: {[key: string]: string};
    os: string;
    screenshotList: {[key: string]: string};
    support: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonImage {
    cleartext: boolean;
    drvtype: string;
    ignorepurge: boolean;
    imageformat: string;
    imageid: string;
    imagename: string;
    maxsize: string;
    mountpath: string;
    params: outputs.ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonImageParam[];
    preserve: boolean;
    readonly: boolean;
    target: string;
    volumelabel: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonImageParam {
    name: string;
    value: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonInterface {
    acls: outputs.ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAcl[];
    directattach: boolean;
    name: string;
    optional: boolean;
    privateip: boolean;
    type: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAcl {
    actions: outputs.ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclAction[];
    matches: outputs.ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclMatch[];
    name: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclAction {
    drop: boolean;
    limit: boolean;
    limitValues: outputs.ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionLimitValue[];
    limitburst: number;
    limitrate: number;
    limitunit: string;
    portmap: boolean;
    portmaptos: outputs.ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionPortmapto[];
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionLimitValue {
    limitburst: number;
    limitrate: number;
    limitunit: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionPortmapto {
    appPort: number;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclMatch {
    type: string;
    value: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonModule {
    environment: {[key: string]: string};
    moduleType: string;
    routes: {[key: string]: string};
    twinDetail: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonOwner {
    company: string;
    email: string;
    group: string;
    user: string;
    website: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonPermission {
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeHubManifestJsonResource {
    name: string;
    value: string;
}

export interface ProjectCloudPolicyModulePolicyAzureEdgeHubParentDetail {
    idOfParentObject: string;
    referenceExists: boolean;
    updateAvailable: boolean;
    versionOfParentObject: number;
}

export interface ProjectCloudPolicyModulePolicyMetric {
    queries: {[key: string]: string};
    results: {[key: string]: string};
}

export interface ProjectCloudPolicyNetworkPolicy {
    netInstanceConfigs: outputs.ProjectCloudPolicyNetworkPolicyNetInstanceConfig[];
}

export interface ProjectCloudPolicyNetworkPolicyNetInstanceConfig {
    clusterId: string;
    description: string;
    deviceDefault: boolean;
    deviceId: string;
    dhcp: boolean;
    dnsLists: outputs.ProjectCloudPolicyNetworkPolicyNetInstanceConfigDnsList[];
    id: string;
    ips: outputs.ProjectCloudPolicyNetworkPolicyNetInstanceConfigIp[];
    kind: string;
    lisps: outputs.ProjectCloudPolicyNetworkPolicyNetInstanceConfigLisp[];
    name: string;
    networkPolicyId: string;
    oconfig: string;
    opaques: outputs.ProjectCloudPolicyNetworkPolicyNetInstanceConfigOpaque[];
    port: string;
    portTags: {[key: string]: string};
    projectId: string;
    revisions: outputs.ProjectCloudPolicyNetworkPolicyNetInstanceConfigRevision[];
    tags: {[key: string]: string};
    title: string;
    type: string;
}

export interface ProjectCloudPolicyNetworkPolicyNetInstanceConfigDnsList {
    addrs: string[];
    hostname: string;
}

export interface ProjectCloudPolicyNetworkPolicyNetInstanceConfigIp {
    dhcpRanges: outputs.ProjectCloudPolicyNetworkPolicyNetInstanceConfigIpDhcpRange[];
    dns: string[];
    domain: string;
    gateway: string;
    mask: string;
    ntp: string;
    subnet: string;
}

export interface ProjectCloudPolicyNetworkPolicyNetInstanceConfigIpDhcpRange {
    end: string;
    start: string;
}

export interface ProjectCloudPolicyNetworkPolicyNetInstanceConfigLisp {
    allocate: boolean;
    allocationprefix: string;
    allocationprefixlen: number;
    exportprivate: boolean;
    lispiid: number;
    sps: outputs.ProjectCloudPolicyNetworkPolicyNetInstanceConfigLispSp[];
}

export interface ProjectCloudPolicyNetworkPolicyNetInstanceConfigLispSp {
    credential: string;
    nameOrIp: string;
    type: string;
}

export interface ProjectCloudPolicyNetworkPolicyNetInstanceConfigOpaque {
    lisps: outputs.ProjectCloudPolicyNetworkPolicyNetInstanceConfigOpaqueLisp[];
    oconfig: string;
    type: string;
}

export interface ProjectCloudPolicyNetworkPolicyNetInstanceConfigOpaqueLisp {
    allocate: boolean;
    allocationprefix: string;
    allocationprefixlen: number;
    exportprivate: boolean;
    lispiid: number;
    sps: outputs.ProjectCloudPolicyNetworkPolicyNetInstanceConfigOpaqueLispSp[];
}

export interface ProjectCloudPolicyNetworkPolicyNetInstanceConfigOpaqueLispSp {
    credential: string;
    nameOrIp: string;
    type: string;
}

export interface ProjectCloudPolicyNetworkPolicyNetInstanceConfigRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface ProjectCloudPolicyRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface ProjectDeployment {
    /**
     * list of app instance policies
     */
    appInstPolicies?: outputs.ProjectDeploymentAppInstPolicy[];
    /**
     * cluster policy details
     */
    clusterPolicies?: outputs.ProjectDeploymentClusterPolicy[];
    /**
     * user defined tag for the deployment, which is used while targeting set of devices
     */
    deploymentTag?: string;
    /**
     * list of device policies
     */
    devicePolicies?: outputs.ProjectDeploymentDevicePolicy[];
    /**
     * system generated unique id for an deployment
     */
    id: string;
    /**
     * integration policy details
     */
    integrationPolicies?: outputs.ProjectDeploymentIntegrationPolicy[];
    /**
     * user defined name for the deployment
     */
    name?: string;
    /**
     * list of network instance policies
     */
    networkInstPolicies?: outputs.ProjectDeploymentNetworkInstPolicy[];
    /**
     * object revision
     */
    revisions?: outputs.ProjectDeploymentRevision[];
    /**
     * user defined title for the deployment
     */
    title?: string;
    /**
     * list of volume instamce policies
     */
    volumeInstPolicies?: outputs.ProjectDeploymentVolumeInstPolicy[];
}

export interface ProjectDeploymentAppInstPolicy {
    /**
     * app instance config for automated deployment
     */
    appInstConfigs?: outputs.ProjectDeploymentAppInstPolicyAppInstConfig[];
    /**
     * all the required metadata for a policy like id, name, different types of tags
     */
    metaDatas?: outputs.ProjectDeploymentAppInstPolicyMetaData[];
}

export interface ProjectDeploymentAppInstPolicyAppInstConfig {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    bundleId?: string;
    /**
     * current bundle version
     */
    bundleVersion?: number;
    /**
     * user defined cpus for bundle
     */
    cpus?: number;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * application interfaces
     */
    interfaces?: outputs.ProjectDeploymentAppInstPolicyAppInstConfigInterface[];
    /**
     * App Instance logs
     */
    logs?: outputs.ProjectDeploymentAppInstPolicyAppInstConfigLog[];
    /**
     * user defined manifest in JSON format
     */
    manifestJsons?: outputs.ProjectDeploymentAppInstPolicyAppInstConfigManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory?: number;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks?: number;
    /**
     * this flag denotes whether there is latest bundle available in the marketplace or not
     */
    newBundleVersionAvailable?: boolean;
    /**
     * origin of object
     */
    originType?: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.ProjectDeploymentAppInstPolicyAppInstConfigParentDetail[];
    /**
     * Remote console flag
     */
    remoteConsole?: boolean;
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * virtual machine info
     */
    vminfos?: outputs.ProjectDeploymentAppInstPolicyAppInstConfigVminfo[];
}

export interface ProjectDeploymentAppInstPolicyAppInstConfigInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.ProjectDeploymentAppInstPolicyAppInstConfigInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.ProjectDeploymentAppInstPolicyAppInstConfigInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.ProjectDeploymentAppInstPolicyAppInstConfigInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface ProjectDeploymentAppInstPolicyAppInstConfigInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.ProjectDeploymentAppInstPolicyAppInstConfigInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.ProjectDeploymentAppInstPolicyAppInstConfigInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface ProjectDeploymentAppInstPolicyAppInstConfigInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.ProjectDeploymentAppInstPolicyAppInstConfigInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface ProjectDeploymentAppInstPolicyAppInstConfigInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface ProjectDeploymentAppInstPolicyAppInstConfigInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface ProjectDeploymentAppInstPolicyAppInstConfigInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.ProjectDeploymentAppInstPolicyAppInstConfigInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface ProjectDeploymentAppInstPolicyAppInstConfigInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface ProjectDeploymentAppInstPolicyAppInstConfigInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface ProjectDeploymentAppInstPolicyAppInstConfigLog {
    /**
     * Flags to enable / disable sending of logs generated by app instance to zedcloud
     */
    access: boolean;
}

export interface ProjectDeploymentAppInstPolicyAppInstConfigManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonOwner[];
    permissions?: outputs.ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonConfiguration {
    customConfigs?: outputs.ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonConfigurationCustomConfig[];
}

export interface ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonInterfaceAclActionPortmapto[];
}

export interface ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonPermission {
}

export interface ProjectDeploymentAppInstPolicyAppInstConfigManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface ProjectDeploymentAppInstPolicyAppInstConfigParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface ProjectDeploymentAppInstPolicyAppInstConfigVminfo {
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled: boolean;
    /**
     * CPUs
     */
    cpus: number;
    /**
     * Memory
     */
    memory: number;
    /**
     * Hardware Virtualization
     */
    mode: string;
    /**
     * VNC
     */
    vnc: boolean;
    /**
     * VNC display
     */
    vncDisplay: number;
}

export interface ProjectDeploymentAppInstPolicyMetaData {
    /**
     * system generated unique id for an policy
     */
    id: string;
    /**
     * user defined policy name
     */
    name?: string;
    /**
     * user defined key-value pairs of a policy that will be used for targeting by devices
     */
    policyTargetCondition?: {[key: string]: string};
    /**
     * object revision details
     */
    revisions?: outputs.ProjectDeploymentAppInstPolicyMetaDataRevision[];
    /**
     * user defined key-value pairs of a policy
     */
    tags?: {[key: string]: string};
    /**
     * user defined policy title
     */
    title?: string;
}

export interface ProjectDeploymentAppInstPolicyMetaDataRevision {
    /**
     * The time, in milliseconds since the epoch, when the record was created.
     */
    createdAt: string;
    /**
     * User data: Created By
     */
    createdBy: string;
    /**
     * Current Database version of the record
     */
    curr: string;
    /**
     * Previous
     */
    prev: string;
    /**
     * The time, in milliseconds since the epoch, when the record was last updated.
     */
    updatedAt: string;
    /**
     * User data: Updated By
     */
    updatedBy: string;
}

export interface ProjectDeploymentClusterPolicy {
    id?: string;
    name?: string;
    revisions?: outputs.ProjectDeploymentClusterPolicyRevision[];
    title?: string;
}

export interface ProjectDeploymentClusterPolicyRevision {
    /**
     * The time, in milliseconds since the epoch, when the record was created.
     */
    createdAt: string;
    /**
     * User data: Created By
     */
    createdBy: string;
    /**
     * Current Database version of the record
     */
    curr: string;
    /**
     * Previous
     */
    prev: string;
    /**
     * The time, in milliseconds since the epoch, when the record was last updated.
     */
    updatedAt: string;
    /**
     * User data: Updated By
     */
    updatedBy: string;
}

export interface ProjectDeploymentDevicePolicy {
    /**
     * device attestation policy
     */
    attestationPolicies?: outputs.ProjectDeploymentDevicePolicyAttestationPolicy[];
    /**
     * all the required metadata for a policy like id, name, different types of tags
     */
    metaDatas?: outputs.ProjectDeploymentDevicePolicyMetaData[];
    /**
     * device policy type
     */
    policySubType?: string;
}

export interface ProjectDeploymentDevicePolicyAttestationPolicy {
    /**
     * Attestation policy type
     */
    type: string;
}

export interface ProjectDeploymentDevicePolicyMetaData {
    /**
     * system generated unique id for an policy
     */
    id: string;
    /**
     * user defined policy name
     */
    name?: string;
    /**
     * user defined key-value pairs of a policy that will be used for targeting by devices
     */
    policyTargetCondition?: {[key: string]: string};
    /**
     * object revision details
     */
    revisions?: outputs.ProjectDeploymentDevicePolicyMetaDataRevision[];
    /**
     * user defined key-value pairs of a policy
     */
    tags?: {[key: string]: string};
    /**
     * user defined policy title
     */
    title?: string;
}

export interface ProjectDeploymentDevicePolicyMetaDataRevision {
    /**
     * The time, in milliseconds since the epoch, when the record was created.
     */
    createdAt: string;
    /**
     * User data: Created By
     */
    createdBy: string;
    /**
     * Current Database version of the record
     */
    curr: string;
    /**
     * Previous
     */
    prev: string;
    /**
     * The time, in milliseconds since the epoch, when the record was last updated.
     */
    updatedAt: string;
    /**
     * User data: Updated By
     */
    updatedBy: string;
}

export interface ProjectDeploymentIntegrationPolicy {
    id?: string;
    name?: string;
    revisions?: outputs.ProjectDeploymentIntegrationPolicyRevision[];
    title?: string;
}

export interface ProjectDeploymentIntegrationPolicyRevision {
    /**
     * The time, in milliseconds since the epoch, when the record was created.
     */
    createdAt: string;
    /**
     * User data: Created By
     */
    createdBy: string;
    /**
     * Current Database version of the record
     */
    curr: string;
    /**
     * Previous
     */
    prev: string;
    /**
     * The time, in milliseconds since the epoch, when the record was last updated.
     */
    updatedAt: string;
    /**
     * User data: Updated By
     */
    updatedBy: string;
}

export interface ProjectDeploymentNetworkInstPolicy {
    /**
     * all the required metadata for a policy like id, name, different types of tags
     */
    metaDatas?: outputs.ProjectDeploymentNetworkInstPolicyMetaData[];
    /**
     * network instance config details
     */
    netInstConfigs?: outputs.ProjectDeploymentNetworkInstPolicyNetInstConfig[];
}

export interface ProjectDeploymentNetworkInstPolicyMetaData {
    /**
     * system generated unique id for an policy
     */
    id: string;
    /**
     * user defined policy name
     */
    name?: string;
    /**
     * user defined key-value pairs of a policy that will be used for targeting by devices
     */
    policyTargetCondition?: {[key: string]: string};
    /**
     * object revision details
     */
    revisions?: outputs.ProjectDeploymentNetworkInstPolicyMetaDataRevision[];
    /**
     * user defined key-value pairs of a policy
     */
    tags?: {[key: string]: string};
    /**
     * user defined policy title
     */
    title?: string;
}

export interface ProjectDeploymentNetworkInstPolicyMetaDataRevision {
    /**
     * The time, in milliseconds since the epoch, when the record was created.
     */
    createdAt: string;
    /**
     * User data: Created By
     */
    createdBy: string;
    /**
     * Current Database version of the record
     */
    curr: string;
    /**
     * Previous
     */
    prev: string;
    /**
     * The time, in milliseconds since the epoch, when the record was last updated.
     */
    updatedAt: string;
    /**
     * User data: Updated By
     */
    updatedBy: string;
}

export interface ProjectDeploymentNetworkInstPolicyNetInstConfig {
    /**
     * ID of the Cluster in which the network instance is configured
     */
    clusterId?: string;
    /**
     * Detailed description of the network instance
     */
    description?: string;
    /**
     * Flag to indicate if this is the default network instance for the device
     */
    deviceDefault?: boolean;
    /**
     * ID of the device on which network instance is created
     */
    deviceId: string;
    /**
     * Deprecated
     */
    dhcp?: boolean;
    /**
     * List of Static DNS entries
     */
    dnsLists?: outputs.ProjectDeploymentNetworkInstPolicyNetInstConfigDnsList[];
    /**
     * System defined universally unique ID of the network instance
     */
    id: string;
    /**
     * DHCP Server Configuration
     */
    ips?: outputs.ProjectDeploymentNetworkInstPolicyNetInstConfigIp[];
    /**
     * Kind of Network Instance:
     * NETWORK_INSTANCE_KIND_UNSPECIFIED
     * NETWORK_INSTANCE_KIND_TRANSPARENT
     * NETWORK_INSTANCE_KIND_SWITCH
     * NETWORK_INSTANCE_KIND_LOCAL
     * NETWORK_INSTANCE_KIND_CLOUD
     * NETWORK_INSTANCE_KIND_MESH
     * NETWORK_INSTANCE_KIND_HONEYPOT
     */
    kind: string;
    /**
     * Lisp Config : read only for now. Deprecated.
     */
    lisps: outputs.ProjectDeploymentNetworkInstPolicyNetInstConfigLisp[];
    /**
     * User defined name of the network instance, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * id of the network policy to be attached to this network instance
     */
    networkPolicyId?: string;
    oconfig?: string;
    /**
     * Service specific Config
     */
    opaques?: outputs.ProjectDeploymentNetworkInstPolicyNetInstConfigOpaque[];
    /**
     * name of port mapping in the model
     */
    port?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    portTags?: {[key: string]: string};
    /**
     * id of the project in which network instance is created
     */
    projectId: string;
    /**
     * system defined info for the object
     */
    revisions: outputs.ProjectDeploymentNetworkInstPolicyNetInstConfigRevision[];
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the network instance. Title can be changed at any time
     */
    title: string;
    /**
     * Type of DHCP for this Network Instance:
     * NETWORK_INSTANCE_DHCP_TYPE_V4
     * NETWORK_INSTANCE_DHCP_TYPE_V6
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOEID
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOV4
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOV6
     */
    type: string;
}

export interface ProjectDeploymentNetworkInstPolicyNetInstConfigDnsList {
    /**
     * Addresses
     */
    addrs?: string[];
    /**
     * Host name
     */
    hostname?: string;
}

export interface ProjectDeploymentNetworkInstPolicyNetInstConfigIp {
    /**
     * Range of IP addresses to be used for DHCP
     */
    dhcpRanges?: outputs.ProjectDeploymentNetworkInstPolicyNetInstConfigIpDhcpRange[];
    /**
     * IP Addresses of DNS servers
     */
    dns?: string[];
    /**
     * Network domain
     */
    domain?: string;
    /**
     * IP Address of Network Gateway
     */
    gateway?: string;
    /**
     * Subnet Mask
     */
    mask?: string;
    /**
     * IP Address of NTP Server
     */
    ntp?: string;
    /**
     * Subnet address
     */
    subnet: string;
}

export interface ProjectDeploymentNetworkInstPolicyNetInstConfigIpDhcpRange {
    /**
     * ending IP
     */
    end?: string;
    /**
     * starting IP
     */
    start?: string;
}

export interface ProjectDeploymentNetworkInstPolicyNetInstConfigLisp {
    allocate: boolean;
    allocationprefix: string;
    allocationprefixlen: number;
    exportprivate: boolean;
    lispiid: number;
    sps: outputs.ProjectDeploymentNetworkInstPolicyNetInstConfigLispSp[];
}

export interface ProjectDeploymentNetworkInstPolicyNetInstConfigLispSp {
    credential: string;
    nameOrIp: string;
    type: string;
}

export interface ProjectDeploymentNetworkInstPolicyNetInstConfigOpaque {
    /**
     * Deprecated - Lisp config
     */
    lisps?: outputs.ProjectDeploymentNetworkInstPolicyNetInstConfigOpaqueLisp[];
    /**
     * base64 encoded string of opaque config
     */
    oconfig?: string;
    /**
     * type of Opaque config
     */
    type?: string;
}

export interface ProjectDeploymentNetworkInstPolicyNetInstConfigOpaqueLisp {
    /**
     * Allocate flag
     */
    allocate?: boolean;
    /**
     * Allocation Prefix
     */
    allocationprefix?: string;
    /**
     * Allocation Prefix Length
     */
    allocationprefixlen?: number;
    /**
     * Export Private flag
     */
    exportprivate?: boolean;
    /**
     * lisp id
     */
    lispiid?: number;
    /**
     * Service Point List
     */
    sps?: outputs.ProjectDeploymentNetworkInstPolicyNetInstConfigOpaqueLispSp[];
}

export interface ProjectDeploymentNetworkInstPolicyNetInstConfigOpaqueLispSp {
    /**
     * Service credentials
     */
    credential?: string;
    /**
     * Service name/ service name
     */
    nameOrIp?: string;
    /**
     * Service Point Type
     */
    type?: string;
}

export interface ProjectDeploymentNetworkInstPolicyNetInstConfigRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface ProjectDeploymentRevision {
    /**
     * The time, in milliseconds since the epoch, when the record was created.
     */
    createdAt: string;
    /**
     * User data: Created By
     */
    createdBy: string;
    /**
     * Current Database version of the record
     */
    curr: string;
    /**
     * Previous
     */
    prev: string;
    /**
     * The time, in milliseconds since the epoch, when the record was last updated.
     */
    updatedAt: string;
    /**
     * User data: Updated By
     */
    updatedBy: string;
}

export interface ProjectDeploymentVolumeInstPolicy {
    /**
     * all the required metadata for a policy like id, name, different types of tags
     */
    metaDatas?: outputs.ProjectDeploymentVolumeInstPolicyMetaData[];
    /**
     * volume instance config details
     */
    volInstConfigs?: outputs.ProjectDeploymentVolumeInstPolicyVolInstConfig[];
}

export interface ProjectDeploymentVolumeInstPolicyMetaData {
    /**
     * system generated unique id for an policy
     */
    id: string;
    /**
     * user defined policy name
     */
    name?: string;
    /**
     * user defined key-value pairs of a policy that will be used for targeting by devices
     */
    policyTargetCondition?: {[key: string]: string};
    /**
     * object revision details
     */
    revisions?: outputs.ProjectDeploymentVolumeInstPolicyMetaDataRevision[];
    /**
     * user defined key-value pairs of a policy
     */
    tags?: {[key: string]: string};
    /**
     * user defined policy title
     */
    title?: string;
}

export interface ProjectDeploymentVolumeInstPolicyMetaDataRevision {
    /**
     * The time, in milliseconds since the epoch, when the record was created.
     */
    createdAt: string;
    /**
     * User data: Created By
     */
    createdBy: string;
    /**
     * Current Database version of the record
     */
    curr: string;
    /**
     * Previous
     */
    prev: string;
    /**
     * The time, in milliseconds since the epoch, when the record was last updated.
     */
    updatedAt: string;
    /**
     * User data: Updated By
     */
    updatedBy: string;
}

export interface ProjectDeploymentVolumeInstPolicyVolInstConfig {
    /**
     * Access mode
     */
    accessmode?: string;
    /**
     * flag to keep the contents of the volume unencrypted (in clear text)
     */
    cleartext?: boolean;
    /**
     * content tree ID
     */
    contentTreeId: string;
    /**
     * Detailed description of the volume instance.
     */
    description?: string;
    /**
     * id of the device on which volume instance is created
     */
    deviceId: string;
    /**
     * System defined universally unique Id of the volume instance.
     */
    id: string;
    /**
     * name of the image
     */
    image: string;
    /**
     * flag to create implicit volumes
     */
    implicit?: boolean;
    /**
     * label
     */
    label?: string;
    /**
     * flag to enable the volume to be attached to multiple app instances
     */
    multiattach?: boolean;
    /**
     * User defined name of the volume instance, unique across the enterprise. Once object is created, name canâ€™t be changed.
     */
    name: string;
    /**
     * id of the project in which the volume instance is created
     */
    projectId: string;
    /**
     * system defined Revision info of the object
     */
    revisions: outputs.ProjectDeploymentVolumeInstPolicyVolInstConfigRevision[];
    /**
     * size of volume
     */
    sizeBytes?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the volume instance. Title can be changed at any time.
     */
    title: string;
    /**
     * type of Volume Instance
     */
    type: string;
}

export interface ProjectDeploymentVolumeInstPolicyVolInstConfigRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface ProjectEdgeviewPolicy {
    /**
     * app policy, which is used in auto app instance deployment
     */
    appPolicies?: outputs.ProjectEdgeviewPolicyAppPolicy[];
    /**
     * attestation policy to enforce on all devices in this project
     */
    attestationPolicies?: outputs.ProjectEdgeviewPolicyAttestationPolicy[];
    /**
     * Mapping of policy  variable keys and policy variable values
     */
    attr?: {[key: string]: string};
    /**
     * azure policy, which is used in configuring azure iot-edge.
     */
    azurePolicies?: outputs.ProjectEdgeviewPolicyAzurePolicy[];
    /**
     * cluster policy to bring up cluster on devices in this project
     */
    clusterPolicies?: outputs.ProjectEdgeviewPolicyClusterPolicy[];
    /**
     * Detailed description of the policy
     */
    description?: string;
    /**
     * edgeview policy on devices of this project
     */
    edgeviewPolicies?: outputs.ProjectEdgeviewPolicyEdgeviewPolicy[];
    /**
     * System defined universally unique Id of the policy request
     */
    id: string;
    /**
     * local operator console policy to enforce on all devices in this project
     */
    localOperatorConsolePolicies?: outputs.ProjectEdgeviewPolicyLocalOperatorConsolePolicy[];
    /**
     * module policy, which is used in auto module deployment
     */
    modulePolicies?: outputs.ProjectEdgeviewPolicyModulePolicy[];
    /**
     * User defined name of the policy request, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * network policy to enforce on all devices in this project
     */
    networkPolicies?: outputs.ProjectEdgeviewPolicyNetworkPolicy[];
    /**
     * system defined info
     */
    revisions: outputs.ProjectEdgeviewPolicyRevision[];
    /**
     * status of the policy
     */
    status: string;
    /**
     * Detailed status message of the policy
     */
    statusMessage: string;
    /**
     * User defined title of the policy. Title can be changed at any time
     */
    title?: string;
    /**
     * type of policy
     */
    type?: string;
}

export interface ProjectEdgeviewPolicyAppPolicy {
    /**
     * list of app details that will be provisioned on all the devices of the project to which this policy is attached
     */
    apps: outputs.ProjectEdgeviewPolicyAppPolicyApp[];
}

export interface ProjectEdgeviewPolicyAppPolicyApp {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.ProjectEdgeviewPolicyAppPolicyAppInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.ProjectEdgeviewPolicyAppPolicyAppManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.ProjectEdgeviewPolicyAppPolicyAppParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface ProjectEdgeviewPolicyAppPolicyAppInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.ProjectEdgeviewPolicyAppPolicyAppInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.ProjectEdgeviewPolicyAppPolicyAppInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.ProjectEdgeviewPolicyAppPolicyAppInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface ProjectEdgeviewPolicyAppPolicyAppInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.ProjectEdgeviewPolicyAppPolicyAppInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.ProjectEdgeviewPolicyAppPolicyAppInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface ProjectEdgeviewPolicyAppPolicyAppInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.ProjectEdgeviewPolicyAppPolicyAppInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface ProjectEdgeviewPolicyAppPolicyAppInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface ProjectEdgeviewPolicyAppPolicyAppInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface ProjectEdgeviewPolicyAppPolicyAppInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.ProjectEdgeviewPolicyAppPolicyAppInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface ProjectEdgeviewPolicyAppPolicyAppInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface ProjectEdgeviewPolicyAppPolicyAppInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface ProjectEdgeviewPolicyAppPolicyAppManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.ProjectEdgeviewPolicyAppPolicyAppManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.ProjectEdgeviewPolicyAppPolicyAppManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.ProjectEdgeviewPolicyAppPolicyAppManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.ProjectEdgeviewPolicyAppPolicyAppManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.ProjectEdgeviewPolicyAppPolicyAppManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.ProjectEdgeviewPolicyAppPolicyAppManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.ProjectEdgeviewPolicyAppPolicyAppManifestJsonOwner[];
    permissions?: outputs.ProjectEdgeviewPolicyAppPolicyAppManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.ProjectEdgeviewPolicyAppPolicyAppManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface ProjectEdgeviewPolicyAppPolicyAppManifestJsonConfiguration {
    customConfigs?: outputs.ProjectEdgeviewPolicyAppPolicyAppManifestJsonConfigurationCustomConfig[];
}

export interface ProjectEdgeviewPolicyAppPolicyAppManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.ProjectEdgeviewPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface ProjectEdgeviewPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.ProjectEdgeviewPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.ProjectEdgeviewPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface ProjectEdgeviewPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface ProjectEdgeviewPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.ProjectEdgeviewPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface ProjectEdgeviewPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface ProjectEdgeviewPolicyAppPolicyAppManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface ProjectEdgeviewPolicyAppPolicyAppManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface ProjectEdgeviewPolicyAppPolicyAppManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.ProjectEdgeviewPolicyAppPolicyAppManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface ProjectEdgeviewPolicyAppPolicyAppManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface ProjectEdgeviewPolicyAppPolicyAppManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.ProjectEdgeviewPolicyAppPolicyAppManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface ProjectEdgeviewPolicyAppPolicyAppManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.ProjectEdgeviewPolicyAppPolicyAppManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.ProjectEdgeviewPolicyAppPolicyAppManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface ProjectEdgeviewPolicyAppPolicyAppManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.ProjectEdgeviewPolicyAppPolicyAppManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.ProjectEdgeviewPolicyAppPolicyAppManifestJsonInterfaceAclActionPortmapto[];
}

export interface ProjectEdgeviewPolicyAppPolicyAppManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface ProjectEdgeviewPolicyAppPolicyAppManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface ProjectEdgeviewPolicyAppPolicyAppManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface ProjectEdgeviewPolicyAppPolicyAppManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface ProjectEdgeviewPolicyAppPolicyAppManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface ProjectEdgeviewPolicyAppPolicyAppManifestJsonPermission {
}

export interface ProjectEdgeviewPolicyAppPolicyAppManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface ProjectEdgeviewPolicyAppPolicyAppParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface ProjectEdgeviewPolicyAttestationPolicy {
    /**
     * unique policy id
     */
    id: string;
    /**
     * Attestation policy type
     */
    type: string;
}

export interface ProjectEdgeviewPolicyAzurePolicy {
    /**
     * app id for rbac
     */
    appId: string;
    /**
     * app password for rbac
     */
    appPassword: string;
    /**
     * azure resource and service the policy will be interested in
     */
    azureResourceAndServices?: outputs.ProjectEdgeviewPolicyAzurePolicyAzureResourceAndService[];
    /**
     * Certificate object holds the details of certificate like encryption type, validity, subject etc
     */
    certificates?: outputs.ProjectEdgeviewPolicyAzurePolicyCertificate[];
    /**
     * key to decrypt AppPassword
     */
    cryptoKey?: string;
    customDeploymentManaged?: boolean;
    /**
     * encrypted AppPassword
     */
    encryptedSecrets?: {[key: string]: string};
    /**
     * tenant id for rbac
     */
    tenantId: string;
}

export interface ProjectEdgeviewPolicyAzurePolicyAzureResourceAndService {
    /**
     * dps service attached to cloud policy
     */
    dpsServices: outputs.ProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsService[];
    /**
     * list of iothubs attached to cloud policy
     */
    iotHubServices: outputs.ProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceIotHubService[];
    /**
     * list of resource groups attached to cloud policy
     */
    resourceGroups: outputs.ProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceResourceGroup[];
}

export interface ProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsService {
    enrollments?: outputs.ProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollment[];
    serviceDetails?: outputs.ProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetail[];
}

export interface ProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollment {
    allocationPolicy?: string;
    attachedIotHubsNames?: string[];
    certificateEnrollments?: outputs.ProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollment[];
    enableIotEdgeDevice?: boolean;
    mechanism?: string;
    symmetricKeyEnrollments?: outputs.ProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollment[];
    tags?: {[key: string]: string};
    tpmEnrollments?: outputs.ProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentTpmEnrollment[];
}

export interface ProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollment {
    groupCertificateEnrollments?: outputs.ProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollmentGroupCertificateEnrollment[];
    individualCertificateEnrollment?: string;
    type?: string;
}

export interface ProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollmentGroupCertificateEnrollment {
    groupName?: string;
}

export interface ProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollment {
    groupSymmetricKeyEnrollments?: outputs.ProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentGroupSymmetricKeyEnrollment[];
    individualSymmetricKeyEnrollments?: outputs.ProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentIndividualSymmetricKeyEnrollment[];
    type?: string;
}

export interface ProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentGroupSymmetricKeyEnrollment {
    groupName?: string;
}

export interface ProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentIndividualSymmetricKeyEnrollment {
    registrationId?: string;
}

export interface ProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentTpmEnrollment {
    type?: string;
}

export interface ProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetail {
    createByDefault?: boolean;
    name?: string;
    region?: string;
    resourceGroupName?: string;
    sKUs?: outputs.ProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetailSKU[];
    subscriptionId?: string;
}

export interface ProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetailSKU {
    capacity?: string;
    name?: string;
    tier?: string;
}

export interface ProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceIotHubService {
    serviceDetails?: outputs.ProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetail[];
}

export interface ProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetail {
    createByDefault?: boolean;
    name?: string;
    region?: string;
    resourceGroupName?: string;
    sKUs?: outputs.ProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetailSKU[];
    subscriptionId?: string;
}

export interface ProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetailSKU {
    capacity?: string;
    name?: string;
    tier?: string;
}

export interface ProjectEdgeviewPolicyAzurePolicyAzureResourceAndServiceResourceGroup {
    /**
     * resource group name
     */
    name: string;
    /**
     * resource group region
     */
    region?: string;
    /**
     * azure subscription id to which resource group is attached
     */
    subscriptionId: string;
}

export interface ProjectEdgeviewPolicyAzurePolicyCertificate {
    /**
     * This fields tells the basic constraints like isCA are correct.
     */
    basicContraintsValid?: boolean;
    /**
     * base64 string of the parent certificate
     */
    cert?: string;
    /**
     * Crypto Key for decrypting user secret information
     */
    cryptoKey?: string;
    /**
     * ECDSA encryption algorithm of the certificate
     */
    ecdsaEncryptions?: outputs.ProjectEdgeviewPolicyAzurePolicyCertificateEcdsaEncryption[];
    /**
     * user encrypted secrets map
     */
    encryptedSecrets?: {[key: string]: string};
    /**
     * Indicates if the private key can be exported.
     */
    exportable?: boolean;
    /**
     * Sequence of extended key usages.
     */
    extendedKeyUsages?: string[];
    /**
     * Parameters for the issuer of the X509 component of a certificate.
     */
    issuers?: outputs.ProjectEdgeviewPolicyAzurePolicyCertificateIssuer[];
    /**
     * Key usage extensions define the purpose of the public key contained in a certificate.
     */
    keyUsage?: number;
    /**
     * pass phase for the pvt key, this has to be filled if pvt key is encrypted with a pass phrase
     */
    passPhrase?: string;
    /**
     * base63 string of the public key
     */
    publicKey?: string;
    /**
     * Public key algorithm.
     */
    publicKeyAlgorithm?: string;
    /**
     * base64 string of the parent pvt key
     */
    pvtKey?: string;
    /**
     * Indicates if the same key pair will be used on certificate renewal.
     */
    reuseKey?: boolean;
    /**
     * RSA encryption algorithm of the certificate
     */
    rsaEcryptions?: outputs.ProjectEdgeviewPolicyAzurePolicyCertificateRsaEcryption[];
    /**
     * This holds the alternative name values like URIs, domain names IPs etc.
     */
    sanValues?: outputs.ProjectEdgeviewPolicyAzurePolicyCertificateSanValue[];
    /**
     * Unique identifier for each Certificate generated by an Certificate Issuer.
     */
    serialNumber?: string;
    signatureAlgorithm?: string;
    /**
     * Parameters for the subject of the X509 component of a certificate.
     */
    subjects?: outputs.ProjectEdgeviewPolicyAzurePolicyCertificateSubject[];
    /**
     * Certificate validatity start time
     */
    validFrom?: string;
    /**
     * Certificate validatity start time
     */
    validTill?: string;
}

export interface ProjectEdgeviewPolicyAzurePolicyCertificateEcdsaEncryption {
    /**
     * ECDSA curve to be used while signing the certificate.
     */
    curve?: string;
}

export interface ProjectEdgeviewPolicyAzurePolicyCertificateIssuer {
    /**
     * Certificate common name.
     */
    commonName?: string;
    /**
     * List of countries.
     */
    countries?: string[];
    /**
     * List of locallity.
     */
    localities?: string[];
    /**
     * List of Organizational Unit.
     */
    organizationalUnits?: string[];
    /**
     * List of organization.
     */
    organizations?: string[];
    /**
     * List of Postal codes.
     */
    postalCodes?: string[];
    /**
     * List of List of Prvince.
     */
    provinces?: string[];
    /**
     * Subject cerial number
     */
    serialNumber?: string;
}

export interface ProjectEdgeviewPolicyAzurePolicyCertificateRsaEcryption {
    /**
     * RSA Encryption Key bit size.
     */
    rsaBits?: string;
}

export interface ProjectEdgeviewPolicyAzurePolicyCertificateSanValue {
    /**
     * List of permitted DNS names.
     */
    dns?: string[];
    /**
     * List of permitted email addresses.
     */
    emaildIds?: string[];
    /**
     * List of permitted hosts.
     */
    hosts?: string[];
    /**
     * List of permitted IP addresses.
     */
    ips?: string[];
    /**
     * List of permitted User principal names.
     */
    upns?: string[];
    /**
     * List of permitted URIs.
     */
    uris?: string[];
}

export interface ProjectEdgeviewPolicyAzurePolicyCertificateSubject {
    /**
     * Certificate common name.
     */
    commonName?: string;
    /**
     * List of countries.
     */
    countries?: string[];
    /**
     * List of locallity.
     */
    localities?: string[];
    /**
     * List of Organizational Unit.
     */
    organizationalUnits?: string[];
    /**
     * List of organization.
     */
    organizations?: string[];
    /**
     * List of Postal codes.
     */
    postalCodes?: string[];
    /**
     * List of List of Prvince.
     */
    provinces?: string[];
    /**
     * Subject cerial number
     */
    serialNumber?: string;
}

export interface ProjectEdgeviewPolicyClusterPolicy {
    /**
     * UUID of the app policy linked to this cluster policy
     */
    appPolicyId: string;
    /**
     * Cluster Policy Parameters
     */
    clusterConfigs?: outputs.ProjectEdgeviewPolicyClusterPolicyClusterConfig[];
    /**
     * UUID of the network policy linked to this cluster policy
     */
    networkPolicyId: string;
    /**
     * Type of cluster
     */
    type: string;
}

export interface ProjectEdgeviewPolicyClusterPolicyClusterConfig {
    minNodesRequired?: number;
}

export interface ProjectEdgeviewPolicyEdgeviewPolicy {
    /**
     * Allow inherit instance to change access policy
     */
    accessAllowChange?: boolean;
    /**
     * Allow device to enable Edgeview in this project
     */
    edgeviewAllow?: boolean;
    /**
     * Edgeview configuration and policies
     */
    edgeviewcfgs?: outputs.ProjectEdgeviewPolicyEdgeviewPolicyEdgeviewcfg[];
    /**
     * Maximum seconds allowed for Edgeview session
     */
    maxExpireSec?: number;
    /**
     * Maximum instances allowed for Edgeview
     */
    maxInst?: number;
}

export interface ProjectEdgeviewPolicyEdgeviewPolicyEdgeviewcfg {
    appPolicies?: outputs.ProjectEdgeviewPolicyEdgeviewPolicyEdgeviewcfgAppPolicy[];
    devPolicies?: outputs.ProjectEdgeviewPolicyEdgeviewPolicyEdgeviewcfgDevPolicy[];
    extPolicies?: outputs.ProjectEdgeviewPolicyEdgeviewPolicyEdgeviewcfgExtPolicy[];
    generationId?: number;
    jwtInfos?: outputs.ProjectEdgeviewPolicyEdgeviewPolicyEdgeviewcfgJwtInfo[];
    token?: string;
}

export interface ProjectEdgeviewPolicyEdgeviewPolicyEdgeviewcfgAppPolicy {
    allowApp?: boolean;
}

export interface ProjectEdgeviewPolicyEdgeviewPolicyEdgeviewcfgDevPolicy {
    allowDev?: boolean;
}

export interface ProjectEdgeviewPolicyEdgeviewPolicyEdgeviewcfgExtPolicy {
    allowExt?: boolean;
}

export interface ProjectEdgeviewPolicyEdgeviewPolicyEdgeviewcfgJwtInfo {
    allowSec?: number;
    dispUrl?: string;
    encrypt?: boolean;
    expireSec: string;
    numInst?: number;
}

export interface ProjectEdgeviewPolicyLocalOperatorConsolePolicy {
    /**
     * unique policy id
     */
    id: string;
    /**
     * Local operator console URL
     */
    locUrl: string;
}

export interface ProjectEdgeviewPolicyModulePolicy {
    /**
     * list of app details that will be provisioned on all the devices of the project to which this policy is attached
     */
    apps: outputs.ProjectEdgeviewPolicyModulePolicyApp[];
    /**
     * app that describes the azure edge agent to be deployed on the Azure runtime
     */
    azureEdgeAgents?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeAgent[];
    /**
     * app that describes the azure edge hub to be deployed on the Azure runtime
     */
    azureEdgeHubs?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeHub[];
    /**
     * etag for deployment
     */
    etag?: string;
    /**
     * unique id for deployment
     */
    id: string;
    /**
     * Mapping of label variable keys and value
     */
    labels?: {[key: string]: string};
    /**
     * custom metrics for deployment
     */
    metrics?: outputs.ProjectEdgeviewPolicyModulePolicyMetric[];
    /**
     * deployment priority of module manifest
     */
    priority: number;
    /**
     * Mapping of routes variable keys and value
     */
    routes?: {[key: string]: string};
    /**
     * target condition for deployment that matches single device or group of devices
     */
    targetCondition?: string;
    /**
     * target condition for deployment that matches single device or group of devices
     */
    targetConditionNew?: {[key: string]: string};
}

export interface ProjectEdgeviewPolicyModulePolicyApp {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.ProjectEdgeviewPolicyModulePolicyAppInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.ProjectEdgeviewPolicyModulePolicyAppManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.ProjectEdgeviewPolicyModulePolicyAppParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAppInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.ProjectEdgeviewPolicyModulePolicyAppInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.ProjectEdgeviewPolicyModulePolicyAppInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.ProjectEdgeviewPolicyModulePolicyAppInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface ProjectEdgeviewPolicyModulePolicyAppInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.ProjectEdgeviewPolicyModulePolicyAppInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.ProjectEdgeviewPolicyModulePolicyAppInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAppInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.ProjectEdgeviewPolicyModulePolicyAppInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface ProjectEdgeviewPolicyModulePolicyAppInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface ProjectEdgeviewPolicyModulePolicyAppInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAppInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.ProjectEdgeviewPolicyModulePolicyAppInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAppInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAppInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAppManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.ProjectEdgeviewPolicyModulePolicyAppManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.ProjectEdgeviewPolicyModulePolicyAppManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.ProjectEdgeviewPolicyModulePolicyAppManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.ProjectEdgeviewPolicyModulePolicyAppManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.ProjectEdgeviewPolicyModulePolicyAppManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.ProjectEdgeviewPolicyModulePolicyAppManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.ProjectEdgeviewPolicyModulePolicyAppManifestJsonOwner[];
    permissions?: outputs.ProjectEdgeviewPolicyModulePolicyAppManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.ProjectEdgeviewPolicyModulePolicyAppManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAppManifestJsonConfiguration {
    customConfigs?: outputs.ProjectEdgeviewPolicyModulePolicyAppManifestJsonConfigurationCustomConfig[];
}

export interface ProjectEdgeviewPolicyModulePolicyAppManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.ProjectEdgeviewPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface ProjectEdgeviewPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.ProjectEdgeviewPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.ProjectEdgeviewPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface ProjectEdgeviewPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.ProjectEdgeviewPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAppManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAppManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAppManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.ProjectEdgeviewPolicyModulePolicyAppManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAppManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAppManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.ProjectEdgeviewPolicyModulePolicyAppManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAppManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.ProjectEdgeviewPolicyModulePolicyAppManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.ProjectEdgeviewPolicyModulePolicyAppManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAppManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.ProjectEdgeviewPolicyModulePolicyAppManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.ProjectEdgeviewPolicyModulePolicyAppManifestJsonInterfaceAclActionPortmapto[];
}

export interface ProjectEdgeviewPolicyModulePolicyAppManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAppManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface ProjectEdgeviewPolicyModulePolicyAppManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAppManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAppManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAppManifestJsonPermission {
}

export interface ProjectEdgeviewPolicyModulePolicyAppManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAppParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeAgent {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonOwner[];
    permissions?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonConfiguration {
    customConfigs?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfig[];
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionPortmapto[];
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonPermission {
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeAgentParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeHub {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeHubInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeHubParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeHubInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeHubInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeHubInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeHubInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeHubInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeHubInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeHubInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeHubInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeHubInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeHubInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeHubInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeHubInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeHubInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeHubInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeHubInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonOwner[];
    permissions?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonConfiguration {
    customConfigs?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfig[];
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionPortmapto[];
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonPermission {
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeHubManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface ProjectEdgeviewPolicyModulePolicyAzureEdgeHubParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface ProjectEdgeviewPolicyModulePolicyMetric {
    /**
     * Mapping of queries variable keys and value
     */
    queries?: {[key: string]: string};
    /**
     * Mapping of results variable keys and value
     */
    results?: {[key: string]: string};
}

export interface ProjectEdgeviewPolicyNetworkPolicy {
    /**
     * list of network details that will be created on all the devices of the project to which this policy is attached
     */
    netInstanceConfigs: outputs.ProjectEdgeviewPolicyNetworkPolicyNetInstanceConfig[];
}

export interface ProjectEdgeviewPolicyNetworkPolicyNetInstanceConfig {
    /**
     * ID of the Cluster in which the network instance is configured
     */
    clusterId?: string;
    /**
     * Detailed description of the network instance
     */
    description?: string;
    /**
     * Flag to indicate if this is the default network instance for the device
     */
    deviceDefault?: boolean;
    /**
     * ID of the device on which network instance is created
     */
    deviceId: string;
    /**
     * Deprecated
     */
    dhcp?: boolean;
    /**
     * List of Static DNS entries
     */
    dnsLists?: outputs.ProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigDnsList[];
    /**
     * System defined universally unique ID of the network instance
     */
    id: string;
    /**
     * DHCP Server Configuration
     */
    ips?: outputs.ProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigIp[];
    /**
     * Kind of Network Instance:
     * NETWORK_INSTANCE_KIND_UNSPECIFIED
     * NETWORK_INSTANCE_KIND_TRANSPARENT
     * NETWORK_INSTANCE_KIND_SWITCH
     * NETWORK_INSTANCE_KIND_LOCAL
     * NETWORK_INSTANCE_KIND_CLOUD
     * NETWORK_INSTANCE_KIND_MESH
     * NETWORK_INSTANCE_KIND_HONEYPOT
     */
    kind: string;
    /**
     * Lisp Config : read only for now. Deprecated.
     */
    lisps: outputs.ProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigLisp[];
    /**
     * User defined name of the network instance, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * id of the network policy to be attached to this network instance
     */
    networkPolicyId?: string;
    oconfig?: string;
    /**
     * Service specific Config
     */
    opaques?: outputs.ProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigOpaque[];
    /**
     * name of port mapping in the model
     */
    port?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    portTags?: {[key: string]: string};
    /**
     * id of the project in which network instance is created
     */
    projectId: string;
    /**
     * system defined info for the object
     */
    revisions: outputs.ProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigRevision[];
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the network instance. Title can be changed at any time
     */
    title: string;
    /**
     * Type of DHCP for this Network Instance:
     * NETWORK_INSTANCE_DHCP_TYPE_V4
     * NETWORK_INSTANCE_DHCP_TYPE_V6
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOEID
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOV4
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOV6
     */
    type: string;
}

export interface ProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigDnsList {
    /**
     * Addresses
     */
    addrs?: string[];
    /**
     * Host name
     */
    hostname?: string;
}

export interface ProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigIp {
    /**
     * Range of IP addresses to be used for DHCP
     */
    dhcpRanges?: outputs.ProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigIpDhcpRange[];
    /**
     * IP Addresses of DNS servers
     */
    dns?: string[];
    /**
     * Network domain
     */
    domain?: string;
    /**
     * IP Address of Network Gateway
     */
    gateway?: string;
    /**
     * Subnet Mask
     */
    mask?: string;
    /**
     * IP Address of NTP Server
     */
    ntp?: string;
    /**
     * Subnet address
     */
    subnet: string;
}

export interface ProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigIpDhcpRange {
    /**
     * ending IP
     */
    end?: string;
    /**
     * starting IP
     */
    start?: string;
}

export interface ProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigLisp {
    allocate: boolean;
    allocationprefix: string;
    allocationprefixlen: number;
    exportprivate: boolean;
    lispiid: number;
    sps: outputs.ProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigLispSp[];
}

export interface ProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigLispSp {
    credential: string;
    nameOrIp: string;
    type: string;
}

export interface ProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigOpaque {
    /**
     * Deprecated - Lisp config
     */
    lisps?: outputs.ProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigOpaqueLisp[];
    /**
     * base64 encoded string of opaque config
     */
    oconfig?: string;
    /**
     * type of Opaque config
     */
    type?: string;
}

export interface ProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigOpaqueLisp {
    /**
     * Allocate flag
     */
    allocate?: boolean;
    /**
     * Allocation Prefix
     */
    allocationprefix?: string;
    /**
     * Allocation Prefix Length
     */
    allocationprefixlen?: number;
    /**
     * Export Private flag
     */
    exportprivate?: boolean;
    /**
     * lisp id
     */
    lispiid?: number;
    /**
     * Service Point List
     */
    sps?: outputs.ProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigOpaqueLispSp[];
}

export interface ProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigOpaqueLispSp {
    /**
     * Service credentials
     */
    credential?: string;
    /**
     * Service name/ service name
     */
    nameOrIp?: string;
    /**
     * Service Point Type
     */
    type?: string;
}

export interface ProjectEdgeviewPolicyNetworkPolicyNetInstanceConfigRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface ProjectEdgeviewPolicyRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface ProjectLocalOperatorConsolePolicy {
    /**
     * app policy, which is used in auto app instance deployment
     */
    appPolicies?: outputs.ProjectLocalOperatorConsolePolicyAppPolicy[];
    /**
     * attestation policy to enforce on all devices in this project
     */
    attestationPolicies?: outputs.ProjectLocalOperatorConsolePolicyAttestationPolicy[];
    /**
     * Mapping of policy  variable keys and policy variable values
     */
    attr?: {[key: string]: string};
    /**
     * azure policy, which is used in configuring azure iot-edge.
     */
    azurePolicies?: outputs.ProjectLocalOperatorConsolePolicyAzurePolicy[];
    /**
     * cluster policy to bring up cluster on devices in this project
     */
    clusterPolicies?: outputs.ProjectLocalOperatorConsolePolicyClusterPolicy[];
    /**
     * Detailed description of the policy
     */
    description?: string;
    /**
     * edgeview policy on devices of this project
     */
    edgeviewPolicies?: outputs.ProjectLocalOperatorConsolePolicyEdgeviewPolicy[];
    /**
     * System defined universally unique Id of the policy request
     */
    id: string;
    /**
     * local operator console policy to enforce on all devices in this project
     */
    localOperatorConsolePolicies?: outputs.ProjectLocalOperatorConsolePolicyLocalOperatorConsolePolicy[];
    /**
     * module policy, which is used in auto module deployment
     */
    modulePolicies?: outputs.ProjectLocalOperatorConsolePolicyModulePolicy[];
    /**
     * User defined name of the policy request, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * network policy to enforce on all devices in this project
     */
    networkPolicies?: outputs.ProjectLocalOperatorConsolePolicyNetworkPolicy[];
    /**
     * system defined info
     */
    revisions: outputs.ProjectLocalOperatorConsolePolicyRevision[];
    /**
     * status of the policy
     */
    status: string;
    /**
     * Detailed status message of the policy
     */
    statusMessage: string;
    /**
     * User defined title of the policy. Title can be changed at any time
     */
    title?: string;
    /**
     * type of policy
     */
    type?: string;
}

export interface ProjectLocalOperatorConsolePolicyAppPolicy {
    /**
     * list of app details that will be provisioned on all the devices of the project to which this policy is attached
     */
    apps: outputs.ProjectLocalOperatorConsolePolicyAppPolicyApp[];
}

export interface ProjectLocalOperatorConsolePolicyAppPolicyApp {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.ProjectLocalOperatorConsolePolicyAppPolicyAppInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.ProjectLocalOperatorConsolePolicyAppPolicyAppParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface ProjectLocalOperatorConsolePolicyAppPolicyAppInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.ProjectLocalOperatorConsolePolicyAppPolicyAppInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.ProjectLocalOperatorConsolePolicyAppPolicyAppInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.ProjectLocalOperatorConsolePolicyAppPolicyAppInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface ProjectLocalOperatorConsolePolicyAppPolicyAppInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.ProjectLocalOperatorConsolePolicyAppPolicyAppInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.ProjectLocalOperatorConsolePolicyAppPolicyAppInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface ProjectLocalOperatorConsolePolicyAppPolicyAppInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.ProjectLocalOperatorConsolePolicyAppPolicyAppInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface ProjectLocalOperatorConsolePolicyAppPolicyAppInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface ProjectLocalOperatorConsolePolicyAppPolicyAppInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface ProjectLocalOperatorConsolePolicyAppPolicyAppInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.ProjectLocalOperatorConsolePolicyAppPolicyAppInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface ProjectLocalOperatorConsolePolicyAppPolicyAppInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface ProjectLocalOperatorConsolePolicyAppPolicyAppInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonOwner[];
    permissions?: outputs.ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonConfiguration {
    customConfigs?: outputs.ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonConfigurationCustomConfig[];
}

export interface ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonInterfaceAclActionPortmapto[];
}

export interface ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonPermission {
}

export interface ProjectLocalOperatorConsolePolicyAppPolicyAppManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface ProjectLocalOperatorConsolePolicyAppPolicyAppParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface ProjectLocalOperatorConsolePolicyAttestationPolicy {
    /**
     * unique policy id
     */
    id: string;
    /**
     * Attestation policy type
     */
    type: string;
}

export interface ProjectLocalOperatorConsolePolicyAzurePolicy {
    /**
     * app id for rbac
     */
    appId: string;
    /**
     * app password for rbac
     */
    appPassword: string;
    /**
     * azure resource and service the policy will be interested in
     */
    azureResourceAndServices?: outputs.ProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndService[];
    /**
     * Certificate object holds the details of certificate like encryption type, validity, subject etc
     */
    certificates?: outputs.ProjectLocalOperatorConsolePolicyAzurePolicyCertificate[];
    /**
     * key to decrypt AppPassword
     */
    cryptoKey?: string;
    customDeploymentManaged?: boolean;
    /**
     * encrypted AppPassword
     */
    encryptedSecrets?: {[key: string]: string};
    /**
     * tenant id for rbac
     */
    tenantId: string;
}

export interface ProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndService {
    /**
     * dps service attached to cloud policy
     */
    dpsServices: outputs.ProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsService[];
    /**
     * list of iothubs attached to cloud policy
     */
    iotHubServices: outputs.ProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceIotHubService[];
    /**
     * list of resource groups attached to cloud policy
     */
    resourceGroups: outputs.ProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceResourceGroup[];
}

export interface ProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsService {
    enrollments?: outputs.ProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollment[];
    serviceDetails?: outputs.ProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetail[];
}

export interface ProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollment {
    allocationPolicy?: string;
    attachedIotHubsNames?: string[];
    certificateEnrollments?: outputs.ProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollment[];
    enableIotEdgeDevice?: boolean;
    mechanism?: string;
    symmetricKeyEnrollments?: outputs.ProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollment[];
    tags?: {[key: string]: string};
    tpmEnrollments?: outputs.ProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentTpmEnrollment[];
}

export interface ProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollment {
    groupCertificateEnrollments?: outputs.ProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollmentGroupCertificateEnrollment[];
    individualCertificateEnrollment?: string;
    type?: string;
}

export interface ProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollmentGroupCertificateEnrollment {
    groupName?: string;
}

export interface ProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollment {
    groupSymmetricKeyEnrollments?: outputs.ProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentGroupSymmetricKeyEnrollment[];
    individualSymmetricKeyEnrollments?: outputs.ProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentIndividualSymmetricKeyEnrollment[];
    type?: string;
}

export interface ProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentGroupSymmetricKeyEnrollment {
    groupName?: string;
}

export interface ProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentIndividualSymmetricKeyEnrollment {
    registrationId?: string;
}

export interface ProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentTpmEnrollment {
    type?: string;
}

export interface ProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetail {
    createByDefault?: boolean;
    name?: string;
    region?: string;
    resourceGroupName?: string;
    sKUs?: outputs.ProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetailSKU[];
    subscriptionId?: string;
}

export interface ProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetailSKU {
    capacity?: string;
    name?: string;
    tier?: string;
}

export interface ProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceIotHubService {
    serviceDetails?: outputs.ProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetail[];
}

export interface ProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetail {
    createByDefault?: boolean;
    name?: string;
    region?: string;
    resourceGroupName?: string;
    sKUs?: outputs.ProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetailSKU[];
    subscriptionId?: string;
}

export interface ProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetailSKU {
    capacity?: string;
    name?: string;
    tier?: string;
}

export interface ProjectLocalOperatorConsolePolicyAzurePolicyAzureResourceAndServiceResourceGroup {
    /**
     * resource group name
     */
    name: string;
    /**
     * resource group region
     */
    region?: string;
    /**
     * azure subscription id to which resource group is attached
     */
    subscriptionId: string;
}

export interface ProjectLocalOperatorConsolePolicyAzurePolicyCertificate {
    /**
     * This fields tells the basic constraints like isCA are correct.
     */
    basicContraintsValid?: boolean;
    /**
     * base64 string of the parent certificate
     */
    cert?: string;
    /**
     * Crypto Key for decrypting user secret information
     */
    cryptoKey?: string;
    /**
     * ECDSA encryption algorithm of the certificate
     */
    ecdsaEncryptions?: outputs.ProjectLocalOperatorConsolePolicyAzurePolicyCertificateEcdsaEncryption[];
    /**
     * user encrypted secrets map
     */
    encryptedSecrets?: {[key: string]: string};
    /**
     * Indicates if the private key can be exported.
     */
    exportable?: boolean;
    /**
     * Sequence of extended key usages.
     */
    extendedKeyUsages?: string[];
    /**
     * Parameters for the issuer of the X509 component of a certificate.
     */
    issuers?: outputs.ProjectLocalOperatorConsolePolicyAzurePolicyCertificateIssuer[];
    /**
     * Key usage extensions define the purpose of the public key contained in a certificate.
     */
    keyUsage?: number;
    /**
     * pass phase for the pvt key, this has to be filled if pvt key is encrypted with a pass phrase
     */
    passPhrase?: string;
    /**
     * base63 string of the public key
     */
    publicKey?: string;
    /**
     * Public key algorithm.
     */
    publicKeyAlgorithm?: string;
    /**
     * base64 string of the parent pvt key
     */
    pvtKey?: string;
    /**
     * Indicates if the same key pair will be used on certificate renewal.
     */
    reuseKey?: boolean;
    /**
     * RSA encryption algorithm of the certificate
     */
    rsaEcryptions?: outputs.ProjectLocalOperatorConsolePolicyAzurePolicyCertificateRsaEcryption[];
    /**
     * This holds the alternative name values like URIs, domain names IPs etc.
     */
    sanValues?: outputs.ProjectLocalOperatorConsolePolicyAzurePolicyCertificateSanValue[];
    /**
     * Unique identifier for each Certificate generated by an Certificate Issuer.
     */
    serialNumber?: string;
    signatureAlgorithm?: string;
    /**
     * Parameters for the subject of the X509 component of a certificate.
     */
    subjects?: outputs.ProjectLocalOperatorConsolePolicyAzurePolicyCertificateSubject[];
    /**
     * Certificate validatity start time
     */
    validFrom?: string;
    /**
     * Certificate validatity start time
     */
    validTill?: string;
}

export interface ProjectLocalOperatorConsolePolicyAzurePolicyCertificateEcdsaEncryption {
    /**
     * ECDSA curve to be used while signing the certificate.
     */
    curve?: string;
}

export interface ProjectLocalOperatorConsolePolicyAzurePolicyCertificateIssuer {
    /**
     * Certificate common name.
     */
    commonName?: string;
    /**
     * List of countries.
     */
    countries?: string[];
    /**
     * List of locallity.
     */
    localities?: string[];
    /**
     * List of Organizational Unit.
     */
    organizationalUnits?: string[];
    /**
     * List of organization.
     */
    organizations?: string[];
    /**
     * List of Postal codes.
     */
    postalCodes?: string[];
    /**
     * List of List of Prvince.
     */
    provinces?: string[];
    /**
     * Subject cerial number
     */
    serialNumber?: string;
}

export interface ProjectLocalOperatorConsolePolicyAzurePolicyCertificateRsaEcryption {
    /**
     * RSA Encryption Key bit size.
     */
    rsaBits?: string;
}

export interface ProjectLocalOperatorConsolePolicyAzurePolicyCertificateSanValue {
    /**
     * List of permitted DNS names.
     */
    dns?: string[];
    /**
     * List of permitted email addresses.
     */
    emaildIds?: string[];
    /**
     * List of permitted hosts.
     */
    hosts?: string[];
    /**
     * List of permitted IP addresses.
     */
    ips?: string[];
    /**
     * List of permitted User principal names.
     */
    upns?: string[];
    /**
     * List of permitted URIs.
     */
    uris?: string[];
}

export interface ProjectLocalOperatorConsolePolicyAzurePolicyCertificateSubject {
    /**
     * Certificate common name.
     */
    commonName?: string;
    /**
     * List of countries.
     */
    countries?: string[];
    /**
     * List of locallity.
     */
    localities?: string[];
    /**
     * List of Organizational Unit.
     */
    organizationalUnits?: string[];
    /**
     * List of organization.
     */
    organizations?: string[];
    /**
     * List of Postal codes.
     */
    postalCodes?: string[];
    /**
     * List of List of Prvince.
     */
    provinces?: string[];
    /**
     * Subject cerial number
     */
    serialNumber?: string;
}

export interface ProjectLocalOperatorConsolePolicyClusterPolicy {
    /**
     * UUID of the app policy linked to this cluster policy
     */
    appPolicyId: string;
    /**
     * Cluster Policy Parameters
     */
    clusterConfigs?: outputs.ProjectLocalOperatorConsolePolicyClusterPolicyClusterConfig[];
    /**
     * UUID of the network policy linked to this cluster policy
     */
    networkPolicyId: string;
    /**
     * Type of cluster
     */
    type: string;
}

export interface ProjectLocalOperatorConsolePolicyClusterPolicyClusterConfig {
    minNodesRequired?: number;
}

export interface ProjectLocalOperatorConsolePolicyEdgeviewPolicy {
    /**
     * Allow inherit instance to change access policy
     */
    accessAllowChange?: boolean;
    /**
     * Allow device to enable Edgeview in this project
     */
    edgeviewAllow?: boolean;
    /**
     * Edgeview configuration and policies
     */
    edgeviewcfgs?: outputs.ProjectLocalOperatorConsolePolicyEdgeviewPolicyEdgeviewcfg[];
    /**
     * Maximum seconds allowed for Edgeview session
     */
    maxExpireSec?: number;
    /**
     * Maximum instances allowed for Edgeview
     */
    maxInst?: number;
}

export interface ProjectLocalOperatorConsolePolicyEdgeviewPolicyEdgeviewcfg {
    appPolicies?: outputs.ProjectLocalOperatorConsolePolicyEdgeviewPolicyEdgeviewcfgAppPolicy[];
    devPolicies?: outputs.ProjectLocalOperatorConsolePolicyEdgeviewPolicyEdgeviewcfgDevPolicy[];
    extPolicies?: outputs.ProjectLocalOperatorConsolePolicyEdgeviewPolicyEdgeviewcfgExtPolicy[];
    generationId?: number;
    jwtInfos?: outputs.ProjectLocalOperatorConsolePolicyEdgeviewPolicyEdgeviewcfgJwtInfo[];
    token?: string;
}

export interface ProjectLocalOperatorConsolePolicyEdgeviewPolicyEdgeviewcfgAppPolicy {
    allowApp?: boolean;
}

export interface ProjectLocalOperatorConsolePolicyEdgeviewPolicyEdgeviewcfgDevPolicy {
    allowDev?: boolean;
}

export interface ProjectLocalOperatorConsolePolicyEdgeviewPolicyEdgeviewcfgExtPolicy {
    allowExt?: boolean;
}

export interface ProjectLocalOperatorConsolePolicyEdgeviewPolicyEdgeviewcfgJwtInfo {
    allowSec?: number;
    dispUrl?: string;
    encrypt?: boolean;
    expireSec: string;
    numInst?: number;
}

export interface ProjectLocalOperatorConsolePolicyLocalOperatorConsolePolicy {
    /**
     * unique policy id
     */
    id: string;
    /**
     * Local operator console URL
     */
    locUrl: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicy {
    /**
     * list of app details that will be provisioned on all the devices of the project to which this policy is attached
     */
    apps: outputs.ProjectLocalOperatorConsolePolicyModulePolicyApp[];
    /**
     * app that describes the azure edge agent to be deployed on the Azure runtime
     */
    azureEdgeAgents?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgent[];
    /**
     * app that describes the azure edge hub to be deployed on the Azure runtime
     */
    azureEdgeHubs?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHub[];
    /**
     * etag for deployment
     */
    etag?: string;
    /**
     * unique id for deployment
     */
    id: string;
    /**
     * Mapping of label variable keys and value
     */
    labels?: {[key: string]: string};
    /**
     * custom metrics for deployment
     */
    metrics?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyMetric[];
    /**
     * deployment priority of module manifest
     */
    priority: number;
    /**
     * Mapping of routes variable keys and value
     */
    routes?: {[key: string]: string};
    /**
     * target condition for deployment that matches single device or group of devices
     */
    targetCondition?: string;
    /**
     * target condition for deployment that matches single device or group of devices
     */
    targetConditionNew?: {[key: string]: string};
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyApp {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAppInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAppParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAppInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAppInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAppInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAppInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAppInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAppInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAppInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAppInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAppInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAppInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAppInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAppInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAppInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAppInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAppInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonOwner[];
    permissions?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonConfiguration {
    customConfigs?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonConfigurationCustomConfig[];
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonInterfaceAclActionPortmapto[];
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonPermission {
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAppManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAppParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgent {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonOwner[];
    permissions?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonConfiguration {
    customConfigs?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfig[];
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionPortmapto[];
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonPermission {
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeAgentParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHub {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonOwner[];
    permissions?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonConfiguration {
    customConfigs?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfig[];
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionPortmapto[];
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonPermission {
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyAzureEdgeHubParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface ProjectLocalOperatorConsolePolicyModulePolicyMetric {
    /**
     * Mapping of queries variable keys and value
     */
    queries?: {[key: string]: string};
    /**
     * Mapping of results variable keys and value
     */
    results?: {[key: string]: string};
}

export interface ProjectLocalOperatorConsolePolicyNetworkPolicy {
    /**
     * list of network details that will be created on all the devices of the project to which this policy is attached
     */
    netInstanceConfigs: outputs.ProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfig[];
}

export interface ProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfig {
    /**
     * ID of the Cluster in which the network instance is configured
     */
    clusterId?: string;
    /**
     * Detailed description of the network instance
     */
    description?: string;
    /**
     * Flag to indicate if this is the default network instance for the device
     */
    deviceDefault?: boolean;
    /**
     * ID of the device on which network instance is created
     */
    deviceId: string;
    /**
     * Deprecated
     */
    dhcp?: boolean;
    /**
     * List of Static DNS entries
     */
    dnsLists?: outputs.ProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigDnsList[];
    /**
     * System defined universally unique ID of the network instance
     */
    id: string;
    /**
     * DHCP Server Configuration
     */
    ips?: outputs.ProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigIp[];
    /**
     * Kind of Network Instance:
     * NETWORK_INSTANCE_KIND_UNSPECIFIED
     * NETWORK_INSTANCE_KIND_TRANSPARENT
     * NETWORK_INSTANCE_KIND_SWITCH
     * NETWORK_INSTANCE_KIND_LOCAL
     * NETWORK_INSTANCE_KIND_CLOUD
     * NETWORK_INSTANCE_KIND_MESH
     * NETWORK_INSTANCE_KIND_HONEYPOT
     */
    kind: string;
    /**
     * Lisp Config : read only for now. Deprecated.
     */
    lisps: outputs.ProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigLisp[];
    /**
     * User defined name of the network instance, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * id of the network policy to be attached to this network instance
     */
    networkPolicyId?: string;
    oconfig?: string;
    /**
     * Service specific Config
     */
    opaques?: outputs.ProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigOpaque[];
    /**
     * name of port mapping in the model
     */
    port?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    portTags?: {[key: string]: string};
    /**
     * id of the project in which network instance is created
     */
    projectId: string;
    /**
     * system defined info for the object
     */
    revisions: outputs.ProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigRevision[];
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the network instance. Title can be changed at any time
     */
    title: string;
    /**
     * Type of DHCP for this Network Instance:
     * NETWORK_INSTANCE_DHCP_TYPE_V4
     * NETWORK_INSTANCE_DHCP_TYPE_V6
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOEID
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOV4
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOV6
     */
    type: string;
}

export interface ProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigDnsList {
    /**
     * Addresses
     */
    addrs?: string[];
    /**
     * Host name
     */
    hostname?: string;
}

export interface ProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigIp {
    /**
     * Range of IP addresses to be used for DHCP
     */
    dhcpRanges?: outputs.ProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigIpDhcpRange[];
    /**
     * IP Addresses of DNS servers
     */
    dns?: string[];
    /**
     * Network domain
     */
    domain?: string;
    /**
     * IP Address of Network Gateway
     */
    gateway?: string;
    /**
     * Subnet Mask
     */
    mask?: string;
    /**
     * IP Address of NTP Server
     */
    ntp?: string;
    /**
     * Subnet address
     */
    subnet: string;
}

export interface ProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigIpDhcpRange {
    /**
     * ending IP
     */
    end?: string;
    /**
     * starting IP
     */
    start?: string;
}

export interface ProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigLisp {
    allocate: boolean;
    allocationprefix: string;
    allocationprefixlen: number;
    exportprivate: boolean;
    lispiid: number;
    sps: outputs.ProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigLispSp[];
}

export interface ProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigLispSp {
    credential: string;
    nameOrIp: string;
    type: string;
}

export interface ProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigOpaque {
    /**
     * Deprecated - Lisp config
     */
    lisps?: outputs.ProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigOpaqueLisp[];
    /**
     * base64 encoded string of opaque config
     */
    oconfig?: string;
    /**
     * type of Opaque config
     */
    type?: string;
}

export interface ProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigOpaqueLisp {
    /**
     * Allocate flag
     */
    allocate?: boolean;
    /**
     * Allocation Prefix
     */
    allocationprefix?: string;
    /**
     * Allocation Prefix Length
     */
    allocationprefixlen?: number;
    /**
     * Export Private flag
     */
    exportprivate?: boolean;
    /**
     * lisp id
     */
    lispiid?: number;
    /**
     * Service Point List
     */
    sps?: outputs.ProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigOpaqueLispSp[];
}

export interface ProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigOpaqueLispSp {
    /**
     * Service credentials
     */
    credential?: string;
    /**
     * Service name/ service name
     */
    nameOrIp?: string;
    /**
     * Service Point Type
     */
    type?: string;
}

export interface ProjectLocalOperatorConsolePolicyNetworkPolicyNetInstanceConfigRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface ProjectLocalOperatorConsolePolicyRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface ProjectModulePolicy {
    appPolicies: outputs.ProjectModulePolicyAppPolicy[];
    attestationPolicies: outputs.ProjectModulePolicyAttestationPolicy[];
    attr: {[key: string]: string};
    azurePolicies: outputs.ProjectModulePolicyAzurePolicy[];
    clusterPolicies: outputs.ProjectModulePolicyClusterPolicy[];
    description: string;
    edgeviewPolicies: outputs.ProjectModulePolicyEdgeviewPolicy[];
    id: string;
    localOperatorConsolePolicies: outputs.ProjectModulePolicyLocalOperatorConsolePolicy[];
    modulePolicies: outputs.ProjectModulePolicyModulePolicy[];
    name: string;
    networkPolicies: outputs.ProjectModulePolicyNetworkPolicy[];
    revisions: outputs.ProjectModulePolicyRevision[];
    status: string;
    statusMessage: string;
    title: string;
    type: string;
}

export interface ProjectModulePolicyAppPolicy {
    apps: outputs.ProjectModulePolicyAppPolicyApp[];
}

export interface ProjectModulePolicyAppPolicyApp {
    appId: string;
    appVersion: string;
    cpus: number;
    description: string;
    drives: number;
    id: string;
    interfaces: outputs.ProjectModulePolicyAppPolicyAppInterface[];
    manifestJsons: outputs.ProjectModulePolicyAppPolicyAppManifestJson[];
    memory: number;
    name: string;
    nameAppPart: string;
    nameProjectPart: string;
    namingScheme: string;
    networks: number;
    originType: string;
    parentDetails: outputs.ProjectModulePolicyAppPolicyAppParentDetail[];
    startDelayInSeconds: number;
    storage: number;
    tags: {[key: string]: string};
    title: string;
}

export interface ProjectModulePolicyAppPolicyAppInterface {
    accessVlanId: number;
    acls: outputs.ProjectModulePolicyAppPolicyAppInterfaceAcl[];
    defaultNetInstance: boolean;
    directattach: boolean;
    eidregisters: outputs.ProjectModulePolicyAppPolicyAppInterfaceEidregister[];
    intfname: string;
    intforder: number;
    ios: outputs.ProjectModulePolicyAppPolicyAppInterfaceIo[];
    ipaddr: string;
    macaddr: string;
    netinstid: string;
    netinstname: string;
    netinsttag: {[key: string]: string};
    netname: string;
    privateip: boolean;
}

export interface ProjectModulePolicyAppPolicyAppInterfaceAcl {
    actions: outputs.ProjectModulePolicyAppPolicyAppInterfaceAclAction[];
    id: number;
    matches: outputs.ProjectModulePolicyAppPolicyAppInterfaceAclMatch[];
    name: string;
}

export interface ProjectModulePolicyAppPolicyAppInterfaceAclAction {
    drop: boolean;
    limit: boolean;
    limitburst: number;
    limitrate: number;
    limitunit: string;
    mapparams: outputs.ProjectModulePolicyAppPolicyAppInterfaceAclActionMapparam[];
    portmap: boolean;
}

export interface ProjectModulePolicyAppPolicyAppInterfaceAclActionMapparam {
    port: number;
}

export interface ProjectModulePolicyAppPolicyAppInterfaceAclMatch {
    type: string;
    value: string;
}

export interface ProjectModulePolicyAppPolicyAppInterfaceEidregister {
    appCert: string;
    appPrivateKey: string;
    appPublicKey: string;
    displayName: string;
    eId: string;
    eIdHashLen: number;
    lispInstance: number;
    lispMapServers: outputs.ProjectModulePolicyAppPolicyAppInterfaceEidregisterLispMapServer[];
    lispSignature: string;
    uuid: string;
}

export interface ProjectModulePolicyAppPolicyAppInterfaceEidregisterLispMapServer {
    credential: string;
    nameOrIp: string;
}

export interface ProjectModulePolicyAppPolicyAppInterfaceIo {
    name: string;
    tags: {[key: string]: string};
    type: string;
}

export interface ProjectModulePolicyAppPolicyAppManifestJson {
    acKind: string;
    acVersion: string;
    appType: string;
    configurations: outputs.ProjectModulePolicyAppPolicyAppManifestJsonConfiguration[];
    containerDetails: outputs.ProjectModulePolicyAppPolicyAppManifestJsonContainerDetail[];
    cpuPinningEnabled: boolean;
    deploymentType: string;
    description: string;
    descs: outputs.ProjectModulePolicyAppPolicyAppManifestJsonDesc[];
    displayName: string;
    enablevnc: boolean;
    images: outputs.ProjectModulePolicyAppPolicyAppManifestJsonImage[];
    interfaces: outputs.ProjectModulePolicyAppPolicyAppManifestJsonInterface[];
    modules: outputs.ProjectModulePolicyAppPolicyAppManifestJsonModule[];
    name: string;
    owners: outputs.ProjectModulePolicyAppPolicyAppManifestJsonOwner[];
    permissions: outputs.ProjectModulePolicyAppPolicyAppManifestJsonPermission[];
    resources: outputs.ProjectModulePolicyAppPolicyAppManifestJsonResource[];
    vmmode: string;
}

export interface ProjectModulePolicyAppPolicyAppManifestJsonConfiguration {
    customConfigs: outputs.ProjectModulePolicyAppPolicyAppManifestJsonConfigurationCustomConfig[];
}

export interface ProjectModulePolicyAppPolicyAppManifestJsonConfigurationCustomConfig {
    add: boolean;
    allowStorageResize: boolean;
    fieldDelimiter: string;
    name: string;
    override: boolean;
    template: string;
    variableGroups: outputs.ProjectModulePolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface ProjectModulePolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroup {
    conditions: outputs.ProjectModulePolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    name: string;
    required: boolean;
    variables: outputs.ProjectModulePolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface ProjectModulePolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name: string;
    operator: string;
    value: string;
}

export interface ProjectModulePolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable {
    default: string;
    encode: string;
    format: string;
    label: string;
    maxLength: string;
    name: string;
    options: outputs.ProjectModulePolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput: string;
    required: boolean;
    type: string;
    value: string;
}

export interface ProjectModulePolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    label: string;
    value: string;
}

export interface ProjectModulePolicyAppPolicyAppManifestJsonContainerDetail {
    containerCreateOption: string;
}

export interface ProjectModulePolicyAppPolicyAppManifestJsonDesc {
    agreementList: {[key: string]: string};
    appCategory: string;
    category: string;
    licenseList: {[key: string]: string};
    logo: {[key: string]: string};
    os: string;
    screenshotList: {[key: string]: string};
    support: string;
}

export interface ProjectModulePolicyAppPolicyAppManifestJsonImage {
    cleartext: boolean;
    drvtype: string;
    ignorepurge: boolean;
    imageformat: string;
    imageid: string;
    imagename: string;
    maxsize: string;
    mountpath: string;
    params: outputs.ProjectModulePolicyAppPolicyAppManifestJsonImageParam[];
    preserve: boolean;
    readonly: boolean;
    target: string;
    volumelabel: string;
}

export interface ProjectModulePolicyAppPolicyAppManifestJsonImageParam {
    name: string;
    value: string;
}

export interface ProjectModulePolicyAppPolicyAppManifestJsonInterface {
    acls: outputs.ProjectModulePolicyAppPolicyAppManifestJsonInterfaceAcl[];
    directattach: boolean;
    name: string;
    optional: boolean;
    privateip: boolean;
    type: string;
}

export interface ProjectModulePolicyAppPolicyAppManifestJsonInterfaceAcl {
    actions: outputs.ProjectModulePolicyAppPolicyAppManifestJsonInterfaceAclAction[];
    matches: outputs.ProjectModulePolicyAppPolicyAppManifestJsonInterfaceAclMatch[];
    name: string;
}

export interface ProjectModulePolicyAppPolicyAppManifestJsonInterfaceAclAction {
    drop: boolean;
    limit: boolean;
    limitValues: outputs.ProjectModulePolicyAppPolicyAppManifestJsonInterfaceAclActionLimitValue[];
    limitburst: number;
    limitrate: number;
    limitunit: string;
    portmap: boolean;
    portmaptos: outputs.ProjectModulePolicyAppPolicyAppManifestJsonInterfaceAclActionPortmapto[];
}

export interface ProjectModulePolicyAppPolicyAppManifestJsonInterfaceAclActionLimitValue {
    limitburst: number;
    limitrate: number;
    limitunit: string;
}

export interface ProjectModulePolicyAppPolicyAppManifestJsonInterfaceAclActionPortmapto {
    appPort: number;
}

export interface ProjectModulePolicyAppPolicyAppManifestJsonInterfaceAclMatch {
    type: string;
    value: string;
}

export interface ProjectModulePolicyAppPolicyAppManifestJsonModule {
    environment: {[key: string]: string};
    moduleType: string;
    routes: {[key: string]: string};
    twinDetail: string;
}

export interface ProjectModulePolicyAppPolicyAppManifestJsonOwner {
    company: string;
    email: string;
    group: string;
    user: string;
    website: string;
}

export interface ProjectModulePolicyAppPolicyAppManifestJsonPermission {
}

export interface ProjectModulePolicyAppPolicyAppManifestJsonResource {
    name: string;
    value: string;
}

export interface ProjectModulePolicyAppPolicyAppParentDetail {
    idOfParentObject: string;
    referenceExists: boolean;
    updateAvailable: boolean;
    versionOfParentObject: number;
}

export interface ProjectModulePolicyAttestationPolicy {
    id: string;
    type: string;
}

export interface ProjectModulePolicyAzurePolicy {
    appId: string;
    appPassword: string;
    azureResourceAndServices: outputs.ProjectModulePolicyAzurePolicyAzureResourceAndService[];
    certificates: outputs.ProjectModulePolicyAzurePolicyCertificate[];
    cryptoKey: string;
    customDeploymentManaged: boolean;
    encryptedSecrets: {[key: string]: string};
    tenantId: string;
}

export interface ProjectModulePolicyAzurePolicyAzureResourceAndService {
    dpsServices: outputs.ProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsService[];
    iotHubServices: outputs.ProjectModulePolicyAzurePolicyAzureResourceAndServiceIotHubService[];
    resourceGroups: outputs.ProjectModulePolicyAzurePolicyAzureResourceAndServiceResourceGroup[];
}

export interface ProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsService {
    enrollments: outputs.ProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollment[];
    serviceDetails: outputs.ProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetail[];
}

export interface ProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollment {
    allocationPolicy: string;
    attachedIotHubsNames: string[];
    certificateEnrollments: outputs.ProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollment[];
    enableIotEdgeDevice: boolean;
    mechanism: string;
    symmetricKeyEnrollments: outputs.ProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollment[];
    tags: {[key: string]: string};
    tpmEnrollments: outputs.ProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentTpmEnrollment[];
}

export interface ProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollment {
    groupCertificateEnrollments: outputs.ProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollmentGroupCertificateEnrollment[];
    individualCertificateEnrollment: string;
    type: string;
}

export interface ProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollmentGroupCertificateEnrollment {
    groupName: string;
}

export interface ProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollment {
    groupSymmetricKeyEnrollments: outputs.ProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentGroupSymmetricKeyEnrollment[];
    individualSymmetricKeyEnrollments: outputs.ProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentIndividualSymmetricKeyEnrollment[];
    type: string;
}

export interface ProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentGroupSymmetricKeyEnrollment {
    groupName: string;
}

export interface ProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentIndividualSymmetricKeyEnrollment {
    registrationId: string;
}

export interface ProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentTpmEnrollment {
    type: string;
}

export interface ProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetail {
    createByDefault: boolean;
    name: string;
    region: string;
    resourceGroupName: string;
    sKUs: outputs.ProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetailSKU[];
    subscriptionId: string;
}

export interface ProjectModulePolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetailSKU {
    capacity: string;
    name: string;
    tier: string;
}

export interface ProjectModulePolicyAzurePolicyAzureResourceAndServiceIotHubService {
    serviceDetails: outputs.ProjectModulePolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetail[];
}

export interface ProjectModulePolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetail {
    createByDefault: boolean;
    name: string;
    region: string;
    resourceGroupName: string;
    sKUs: outputs.ProjectModulePolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetailSKU[];
    subscriptionId: string;
}

export interface ProjectModulePolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetailSKU {
    capacity: string;
    name: string;
    tier: string;
}

export interface ProjectModulePolicyAzurePolicyAzureResourceAndServiceResourceGroup {
    name: string;
    region: string;
    subscriptionId: string;
}

export interface ProjectModulePolicyAzurePolicyCertificate {
    basicContraintsValid: boolean;
    cert: string;
    cryptoKey: string;
    ecdsaEncryptions: outputs.ProjectModulePolicyAzurePolicyCertificateEcdsaEncryption[];
    encryptedSecrets: {[key: string]: string};
    exportable: boolean;
    extendedKeyUsages: string[];
    issuers: outputs.ProjectModulePolicyAzurePolicyCertificateIssuer[];
    keyUsage: number;
    passPhrase: string;
    publicKey: string;
    publicKeyAlgorithm: string;
    pvtKey: string;
    reuseKey: boolean;
    rsaEcryptions: outputs.ProjectModulePolicyAzurePolicyCertificateRsaEcryption[];
    sanValues: outputs.ProjectModulePolicyAzurePolicyCertificateSanValue[];
    serialNumber: string;
    signatureAlgorithm: string;
    subjects: outputs.ProjectModulePolicyAzurePolicyCertificateSubject[];
    validFrom: string;
    validTill: string;
}

export interface ProjectModulePolicyAzurePolicyCertificateEcdsaEncryption {
    curve: string;
}

export interface ProjectModulePolicyAzurePolicyCertificateIssuer {
    commonName: string;
    countries: string[];
    localities: string[];
    organizationalUnits: string[];
    organizations: string[];
    postalCodes: string[];
    provinces: string[];
    serialNumber: string;
}

export interface ProjectModulePolicyAzurePolicyCertificateRsaEcryption {
    rsaBits: string;
}

export interface ProjectModulePolicyAzurePolicyCertificateSanValue {
    dns: string[];
    emaildIds: string[];
    hosts: string[];
    ips: string[];
    upns: string[];
    uris: string[];
}

export interface ProjectModulePolicyAzurePolicyCertificateSubject {
    commonName: string;
    countries: string[];
    localities: string[];
    organizationalUnits: string[];
    organizations: string[];
    postalCodes: string[];
    provinces: string[];
    serialNumber: string;
}

export interface ProjectModulePolicyClusterPolicy {
    appPolicyId: string;
    clusterConfigs: outputs.ProjectModulePolicyClusterPolicyClusterConfig[];
    networkPolicyId: string;
    type: string;
}

export interface ProjectModulePolicyClusterPolicyClusterConfig {
    minNodesRequired: number;
}

export interface ProjectModulePolicyEdgeviewPolicy {
    accessAllowChange: boolean;
    edgeviewAllow: boolean;
    edgeviewcfgs: outputs.ProjectModulePolicyEdgeviewPolicyEdgeviewcfg[];
    maxExpireSec: number;
    maxInst: number;
}

export interface ProjectModulePolicyEdgeviewPolicyEdgeviewcfg {
    appPolicies: outputs.ProjectModulePolicyEdgeviewPolicyEdgeviewcfgAppPolicy[];
    devPolicies: outputs.ProjectModulePolicyEdgeviewPolicyEdgeviewcfgDevPolicy[];
    extPolicies: outputs.ProjectModulePolicyEdgeviewPolicyEdgeviewcfgExtPolicy[];
    generationId: number;
    jwtInfos: outputs.ProjectModulePolicyEdgeviewPolicyEdgeviewcfgJwtInfo[];
    token: string;
}

export interface ProjectModulePolicyEdgeviewPolicyEdgeviewcfgAppPolicy {
    allowApp: boolean;
}

export interface ProjectModulePolicyEdgeviewPolicyEdgeviewcfgDevPolicy {
    allowDev: boolean;
}

export interface ProjectModulePolicyEdgeviewPolicyEdgeviewcfgExtPolicy {
    allowExt: boolean;
}

export interface ProjectModulePolicyEdgeviewPolicyEdgeviewcfgJwtInfo {
    allowSec: number;
    dispUrl: string;
    encrypt: boolean;
    expireSec: string;
    numInst: number;
}

export interface ProjectModulePolicyLocalOperatorConsolePolicy {
    id: string;
    locUrl: string;
}

export interface ProjectModulePolicyModulePolicy {
    apps: outputs.ProjectModulePolicyModulePolicyApp[];
    azureEdgeAgents: outputs.ProjectModulePolicyModulePolicyAzureEdgeAgent[];
    azureEdgeHubs: outputs.ProjectModulePolicyModulePolicyAzureEdgeHub[];
    etag: string;
    id: string;
    labels: {[key: string]: string};
    metrics: outputs.ProjectModulePolicyModulePolicyMetric[];
    priority: number;
    routes: {[key: string]: string};
    targetCondition: string;
    targetConditionNew: {[key: string]: string};
}

export interface ProjectModulePolicyModulePolicyApp {
    appId: string;
    appVersion: string;
    cpus: number;
    description: string;
    drives: number;
    id: string;
    interfaces: outputs.ProjectModulePolicyModulePolicyAppInterface[];
    manifestJsons: outputs.ProjectModulePolicyModulePolicyAppManifestJson[];
    memory: number;
    name: string;
    nameAppPart: string;
    nameProjectPart: string;
    namingScheme: string;
    networks: number;
    originType: string;
    parentDetails: outputs.ProjectModulePolicyModulePolicyAppParentDetail[];
    startDelayInSeconds: number;
    storage: number;
    tags: {[key: string]: string};
    title: string;
}

export interface ProjectModulePolicyModulePolicyAppInterface {
    accessVlanId: number;
    acls: outputs.ProjectModulePolicyModulePolicyAppInterfaceAcl[];
    defaultNetInstance: boolean;
    directattach: boolean;
    eidregisters: outputs.ProjectModulePolicyModulePolicyAppInterfaceEidregister[];
    intfname: string;
    intforder: number;
    ios: outputs.ProjectModulePolicyModulePolicyAppInterfaceIo[];
    ipaddr: string;
    macaddr: string;
    netinstid: string;
    netinstname: string;
    netinsttag: {[key: string]: string};
    netname: string;
    privateip: boolean;
}

export interface ProjectModulePolicyModulePolicyAppInterfaceAcl {
    actions: outputs.ProjectModulePolicyModulePolicyAppInterfaceAclAction[];
    id: number;
    matches: outputs.ProjectModulePolicyModulePolicyAppInterfaceAclMatch[];
    name: string;
}

export interface ProjectModulePolicyModulePolicyAppInterfaceAclAction {
    drop: boolean;
    limit: boolean;
    limitburst: number;
    limitrate: number;
    limitunit: string;
    mapparams: outputs.ProjectModulePolicyModulePolicyAppInterfaceAclActionMapparam[];
    portmap: boolean;
}

export interface ProjectModulePolicyModulePolicyAppInterfaceAclActionMapparam {
    port: number;
}

export interface ProjectModulePolicyModulePolicyAppInterfaceAclMatch {
    type: string;
    value: string;
}

export interface ProjectModulePolicyModulePolicyAppInterfaceEidregister {
    appCert: string;
    appPrivateKey: string;
    appPublicKey: string;
    displayName: string;
    eId: string;
    eIdHashLen: number;
    lispInstance: number;
    lispMapServers: outputs.ProjectModulePolicyModulePolicyAppInterfaceEidregisterLispMapServer[];
    lispSignature: string;
    uuid: string;
}

export interface ProjectModulePolicyModulePolicyAppInterfaceEidregisterLispMapServer {
    credential: string;
    nameOrIp: string;
}

export interface ProjectModulePolicyModulePolicyAppInterfaceIo {
    name: string;
    tags: {[key: string]: string};
    type: string;
}

export interface ProjectModulePolicyModulePolicyAppManifestJson {
    acKind: string;
    acVersion: string;
    appType: string;
    configurations: outputs.ProjectModulePolicyModulePolicyAppManifestJsonConfiguration[];
    containerDetails: outputs.ProjectModulePolicyModulePolicyAppManifestJsonContainerDetail[];
    cpuPinningEnabled: boolean;
    deploymentType: string;
    description: string;
    descs: outputs.ProjectModulePolicyModulePolicyAppManifestJsonDesc[];
    displayName: string;
    enablevnc: boolean;
    images: outputs.ProjectModulePolicyModulePolicyAppManifestJsonImage[];
    interfaces: outputs.ProjectModulePolicyModulePolicyAppManifestJsonInterface[];
    modules: outputs.ProjectModulePolicyModulePolicyAppManifestJsonModule[];
    name: string;
    owners: outputs.ProjectModulePolicyModulePolicyAppManifestJsonOwner[];
    permissions: outputs.ProjectModulePolicyModulePolicyAppManifestJsonPermission[];
    resources: outputs.ProjectModulePolicyModulePolicyAppManifestJsonResource[];
    vmmode: string;
}

export interface ProjectModulePolicyModulePolicyAppManifestJsonConfiguration {
    customConfigs: outputs.ProjectModulePolicyModulePolicyAppManifestJsonConfigurationCustomConfig[];
}

export interface ProjectModulePolicyModulePolicyAppManifestJsonConfigurationCustomConfig {
    add: boolean;
    allowStorageResize: boolean;
    fieldDelimiter: string;
    name: string;
    override: boolean;
    template: string;
    variableGroups: outputs.ProjectModulePolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface ProjectModulePolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroup {
    conditions: outputs.ProjectModulePolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    name: string;
    required: boolean;
    variables: outputs.ProjectModulePolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface ProjectModulePolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name: string;
    operator: string;
    value: string;
}

export interface ProjectModulePolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable {
    default: string;
    encode: string;
    format: string;
    label: string;
    maxLength: string;
    name: string;
    options: outputs.ProjectModulePolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput: string;
    required: boolean;
    type: string;
    value: string;
}

export interface ProjectModulePolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    label: string;
    value: string;
}

export interface ProjectModulePolicyModulePolicyAppManifestJsonContainerDetail {
    containerCreateOption: string;
}

export interface ProjectModulePolicyModulePolicyAppManifestJsonDesc {
    agreementList: {[key: string]: string};
    appCategory: string;
    category: string;
    licenseList: {[key: string]: string};
    logo: {[key: string]: string};
    os: string;
    screenshotList: {[key: string]: string};
    support: string;
}

export interface ProjectModulePolicyModulePolicyAppManifestJsonImage {
    cleartext: boolean;
    drvtype: string;
    ignorepurge: boolean;
    imageformat: string;
    imageid: string;
    imagename: string;
    maxsize: string;
    mountpath: string;
    params: outputs.ProjectModulePolicyModulePolicyAppManifestJsonImageParam[];
    preserve: boolean;
    readonly: boolean;
    target: string;
    volumelabel: string;
}

export interface ProjectModulePolicyModulePolicyAppManifestJsonImageParam {
    name: string;
    value: string;
}

export interface ProjectModulePolicyModulePolicyAppManifestJsonInterface {
    acls: outputs.ProjectModulePolicyModulePolicyAppManifestJsonInterfaceAcl[];
    directattach: boolean;
    name: string;
    optional: boolean;
    privateip: boolean;
    type: string;
}

export interface ProjectModulePolicyModulePolicyAppManifestJsonInterfaceAcl {
    actions: outputs.ProjectModulePolicyModulePolicyAppManifestJsonInterfaceAclAction[];
    matches: outputs.ProjectModulePolicyModulePolicyAppManifestJsonInterfaceAclMatch[];
    name: string;
}

export interface ProjectModulePolicyModulePolicyAppManifestJsonInterfaceAclAction {
    drop: boolean;
    limit: boolean;
    limitValues: outputs.ProjectModulePolicyModulePolicyAppManifestJsonInterfaceAclActionLimitValue[];
    limitburst: number;
    limitrate: number;
    limitunit: string;
    portmap: boolean;
    portmaptos: outputs.ProjectModulePolicyModulePolicyAppManifestJsonInterfaceAclActionPortmapto[];
}

export interface ProjectModulePolicyModulePolicyAppManifestJsonInterfaceAclActionLimitValue {
    limitburst: number;
    limitrate: number;
    limitunit: string;
}

export interface ProjectModulePolicyModulePolicyAppManifestJsonInterfaceAclActionPortmapto {
    appPort: number;
}

export interface ProjectModulePolicyModulePolicyAppManifestJsonInterfaceAclMatch {
    type: string;
    value: string;
}

export interface ProjectModulePolicyModulePolicyAppManifestJsonModule {
    environment: {[key: string]: string};
    moduleType: string;
    routes: {[key: string]: string};
    twinDetail: string;
}

export interface ProjectModulePolicyModulePolicyAppManifestJsonOwner {
    company: string;
    email: string;
    group: string;
    user: string;
    website: string;
}

export interface ProjectModulePolicyModulePolicyAppManifestJsonPermission {
}

export interface ProjectModulePolicyModulePolicyAppManifestJsonResource {
    name: string;
    value: string;
}

export interface ProjectModulePolicyModulePolicyAppParentDetail {
    idOfParentObject: string;
    referenceExists: boolean;
    updateAvailable: boolean;
    versionOfParentObject: number;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeAgent {
    appId: string;
    appVersion: string;
    cpus: number;
    description: string;
    drives: number;
    id: string;
    interfaces: outputs.ProjectModulePolicyModulePolicyAzureEdgeAgentInterface[];
    manifestJsons: outputs.ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJson[];
    memory: number;
    name: string;
    nameAppPart: string;
    nameProjectPart: string;
    namingScheme: string;
    networks: number;
    originType: string;
    parentDetails: outputs.ProjectModulePolicyModulePolicyAzureEdgeAgentParentDetail[];
    startDelayInSeconds: number;
    storage: number;
    tags: {[key: string]: string};
    title: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeAgentInterface {
    accessVlanId: number;
    acls: outputs.ProjectModulePolicyModulePolicyAzureEdgeAgentInterfaceAcl[];
    defaultNetInstance: boolean;
    directattach: boolean;
    eidregisters: outputs.ProjectModulePolicyModulePolicyAzureEdgeAgentInterfaceEidregister[];
    intfname: string;
    intforder: number;
    ios: outputs.ProjectModulePolicyModulePolicyAzureEdgeAgentInterfaceIo[];
    ipaddr: string;
    macaddr: string;
    netinstid: string;
    netinstname: string;
    netinsttag: {[key: string]: string};
    netname: string;
    privateip: boolean;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeAgentInterfaceAcl {
    actions: outputs.ProjectModulePolicyModulePolicyAzureEdgeAgentInterfaceAclAction[];
    id: number;
    matches: outputs.ProjectModulePolicyModulePolicyAzureEdgeAgentInterfaceAclMatch[];
    name: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeAgentInterfaceAclAction {
    drop: boolean;
    limit: boolean;
    limitburst: number;
    limitrate: number;
    limitunit: string;
    mapparams: outputs.ProjectModulePolicyModulePolicyAzureEdgeAgentInterfaceAclActionMapparam[];
    portmap: boolean;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeAgentInterfaceAclActionMapparam {
    port: number;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeAgentInterfaceAclMatch {
    type: string;
    value: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeAgentInterfaceEidregister {
    appCert: string;
    appPrivateKey: string;
    appPublicKey: string;
    displayName: string;
    eId: string;
    eIdHashLen: number;
    lispInstance: number;
    lispMapServers: outputs.ProjectModulePolicyModulePolicyAzureEdgeAgentInterfaceEidregisterLispMapServer[];
    lispSignature: string;
    uuid: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeAgentInterfaceEidregisterLispMapServer {
    credential: string;
    nameOrIp: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeAgentInterfaceIo {
    name: string;
    tags: {[key: string]: string};
    type: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJson {
    acKind: string;
    acVersion: string;
    appType: string;
    configurations: outputs.ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonConfiguration[];
    containerDetails: outputs.ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonContainerDetail[];
    cpuPinningEnabled: boolean;
    deploymentType: string;
    description: string;
    descs: outputs.ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonDesc[];
    displayName: string;
    enablevnc: boolean;
    images: outputs.ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonImage[];
    interfaces: outputs.ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonInterface[];
    modules: outputs.ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonModule[];
    name: string;
    owners: outputs.ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonOwner[];
    permissions: outputs.ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonPermission[];
    resources: outputs.ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonResource[];
    vmmode: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonConfiguration {
    customConfigs: outputs.ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfig[];
}

export interface ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfig {
    add: boolean;
    allowStorageResize: boolean;
    fieldDelimiter: string;
    name: string;
    override: boolean;
    template: string;
    variableGroups: outputs.ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroup {
    conditions: outputs.ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    name: string;
    required: boolean;
    variables: outputs.ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name: string;
    operator: string;
    value: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariable {
    default: string;
    encode: string;
    format: string;
    label: string;
    maxLength: string;
    name: string;
    options: outputs.ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput: string;
    required: boolean;
    type: string;
    value: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    label: string;
    value: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonContainerDetail {
    containerCreateOption: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonDesc {
    agreementList: {[key: string]: string};
    appCategory: string;
    category: string;
    licenseList: {[key: string]: string};
    logo: {[key: string]: string};
    os: string;
    screenshotList: {[key: string]: string};
    support: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonImage {
    cleartext: boolean;
    drvtype: string;
    ignorepurge: boolean;
    imageformat: string;
    imageid: string;
    imagename: string;
    maxsize: string;
    mountpath: string;
    params: outputs.ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonImageParam[];
    preserve: boolean;
    readonly: boolean;
    target: string;
    volumelabel: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonImageParam {
    name: string;
    value: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonInterface {
    acls: outputs.ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAcl[];
    directattach: boolean;
    name: string;
    optional: boolean;
    privateip: boolean;
    type: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAcl {
    actions: outputs.ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclAction[];
    matches: outputs.ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclMatch[];
    name: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclAction {
    drop: boolean;
    limit: boolean;
    limitValues: outputs.ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionLimitValue[];
    limitburst: number;
    limitrate: number;
    limitunit: string;
    portmap: boolean;
    portmaptos: outputs.ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionPortmapto[];
}

export interface ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionLimitValue {
    limitburst: number;
    limitrate: number;
    limitunit: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionPortmapto {
    appPort: number;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclMatch {
    type: string;
    value: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonModule {
    environment: {[key: string]: string};
    moduleType: string;
    routes: {[key: string]: string};
    twinDetail: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonOwner {
    company: string;
    email: string;
    group: string;
    user: string;
    website: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonPermission {
}

export interface ProjectModulePolicyModulePolicyAzureEdgeAgentManifestJsonResource {
    name: string;
    value: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeAgentParentDetail {
    idOfParentObject: string;
    referenceExists: boolean;
    updateAvailable: boolean;
    versionOfParentObject: number;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeHub {
    appId: string;
    appVersion: string;
    cpus: number;
    description: string;
    drives: number;
    id: string;
    interfaces: outputs.ProjectModulePolicyModulePolicyAzureEdgeHubInterface[];
    manifestJsons: outputs.ProjectModulePolicyModulePolicyAzureEdgeHubManifestJson[];
    memory: number;
    name: string;
    nameAppPart: string;
    nameProjectPart: string;
    namingScheme: string;
    networks: number;
    originType: string;
    parentDetails: outputs.ProjectModulePolicyModulePolicyAzureEdgeHubParentDetail[];
    startDelayInSeconds: number;
    storage: number;
    tags: {[key: string]: string};
    title: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeHubInterface {
    accessVlanId: number;
    acls: outputs.ProjectModulePolicyModulePolicyAzureEdgeHubInterfaceAcl[];
    defaultNetInstance: boolean;
    directattach: boolean;
    eidregisters: outputs.ProjectModulePolicyModulePolicyAzureEdgeHubInterfaceEidregister[];
    intfname: string;
    intforder: number;
    ios: outputs.ProjectModulePolicyModulePolicyAzureEdgeHubInterfaceIo[];
    ipaddr: string;
    macaddr: string;
    netinstid: string;
    netinstname: string;
    netinsttag: {[key: string]: string};
    netname: string;
    privateip: boolean;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeHubInterfaceAcl {
    actions: outputs.ProjectModulePolicyModulePolicyAzureEdgeHubInterfaceAclAction[];
    id: number;
    matches: outputs.ProjectModulePolicyModulePolicyAzureEdgeHubInterfaceAclMatch[];
    name: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeHubInterfaceAclAction {
    drop: boolean;
    limit: boolean;
    limitburst: number;
    limitrate: number;
    limitunit: string;
    mapparams: outputs.ProjectModulePolicyModulePolicyAzureEdgeHubInterfaceAclActionMapparam[];
    portmap: boolean;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeHubInterfaceAclActionMapparam {
    port: number;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeHubInterfaceAclMatch {
    type: string;
    value: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeHubInterfaceEidregister {
    appCert: string;
    appPrivateKey: string;
    appPublicKey: string;
    displayName: string;
    eId: string;
    eIdHashLen: number;
    lispInstance: number;
    lispMapServers: outputs.ProjectModulePolicyModulePolicyAzureEdgeHubInterfaceEidregisterLispMapServer[];
    lispSignature: string;
    uuid: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeHubInterfaceEidregisterLispMapServer {
    credential: string;
    nameOrIp: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeHubInterfaceIo {
    name: string;
    tags: {[key: string]: string};
    type: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeHubManifestJson {
    acKind: string;
    acVersion: string;
    appType: string;
    configurations: outputs.ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonConfiguration[];
    containerDetails: outputs.ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonContainerDetail[];
    cpuPinningEnabled: boolean;
    deploymentType: string;
    description: string;
    descs: outputs.ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonDesc[];
    displayName: string;
    enablevnc: boolean;
    images: outputs.ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonImage[];
    interfaces: outputs.ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonInterface[];
    modules: outputs.ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonModule[];
    name: string;
    owners: outputs.ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonOwner[];
    permissions: outputs.ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonPermission[];
    resources: outputs.ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonResource[];
    vmmode: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonConfiguration {
    customConfigs: outputs.ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfig[];
}

export interface ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfig {
    add: boolean;
    allowStorageResize: boolean;
    fieldDelimiter: string;
    name: string;
    override: boolean;
    template: string;
    variableGroups: outputs.ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroup {
    conditions: outputs.ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    name: string;
    required: boolean;
    variables: outputs.ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name: string;
    operator: string;
    value: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariable {
    default: string;
    encode: string;
    format: string;
    label: string;
    maxLength: string;
    name: string;
    options: outputs.ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput: string;
    required: boolean;
    type: string;
    value: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    label: string;
    value: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonContainerDetail {
    containerCreateOption: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonDesc {
    agreementList: {[key: string]: string};
    appCategory: string;
    category: string;
    licenseList: {[key: string]: string};
    logo: {[key: string]: string};
    os: string;
    screenshotList: {[key: string]: string};
    support: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonImage {
    cleartext: boolean;
    drvtype: string;
    ignorepurge: boolean;
    imageformat: string;
    imageid: string;
    imagename: string;
    maxsize: string;
    mountpath: string;
    params: outputs.ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonImageParam[];
    preserve: boolean;
    readonly: boolean;
    target: string;
    volumelabel: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonImageParam {
    name: string;
    value: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonInterface {
    acls: outputs.ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAcl[];
    directattach: boolean;
    name: string;
    optional: boolean;
    privateip: boolean;
    type: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAcl {
    actions: outputs.ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclAction[];
    matches: outputs.ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclMatch[];
    name: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclAction {
    drop: boolean;
    limit: boolean;
    limitValues: outputs.ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionLimitValue[];
    limitburst: number;
    limitrate: number;
    limitunit: string;
    portmap: boolean;
    portmaptos: outputs.ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionPortmapto[];
}

export interface ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionLimitValue {
    limitburst: number;
    limitrate: number;
    limitunit: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionPortmapto {
    appPort: number;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclMatch {
    type: string;
    value: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonModule {
    environment: {[key: string]: string};
    moduleType: string;
    routes: {[key: string]: string};
    twinDetail: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonOwner {
    company: string;
    email: string;
    group: string;
    user: string;
    website: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonPermission {
}

export interface ProjectModulePolicyModulePolicyAzureEdgeHubManifestJsonResource {
    name: string;
    value: string;
}

export interface ProjectModulePolicyModulePolicyAzureEdgeHubParentDetail {
    idOfParentObject: string;
    referenceExists: boolean;
    updateAvailable: boolean;
    versionOfParentObject: number;
}

export interface ProjectModulePolicyModulePolicyMetric {
    queries: {[key: string]: string};
    results: {[key: string]: string};
}

export interface ProjectModulePolicyNetworkPolicy {
    netInstanceConfigs: outputs.ProjectModulePolicyNetworkPolicyNetInstanceConfig[];
}

export interface ProjectModulePolicyNetworkPolicyNetInstanceConfig {
    clusterId: string;
    description: string;
    deviceDefault: boolean;
    deviceId: string;
    dhcp: boolean;
    dnsLists: outputs.ProjectModulePolicyNetworkPolicyNetInstanceConfigDnsList[];
    id: string;
    ips: outputs.ProjectModulePolicyNetworkPolicyNetInstanceConfigIp[];
    kind: string;
    lisps: outputs.ProjectModulePolicyNetworkPolicyNetInstanceConfigLisp[];
    name: string;
    networkPolicyId: string;
    oconfig: string;
    opaques: outputs.ProjectModulePolicyNetworkPolicyNetInstanceConfigOpaque[];
    port: string;
    portTags: {[key: string]: string};
    projectId: string;
    revisions: outputs.ProjectModulePolicyNetworkPolicyNetInstanceConfigRevision[];
    tags: {[key: string]: string};
    title: string;
    type: string;
}

export interface ProjectModulePolicyNetworkPolicyNetInstanceConfigDnsList {
    addrs: string[];
    hostname: string;
}

export interface ProjectModulePolicyNetworkPolicyNetInstanceConfigIp {
    dhcpRanges: outputs.ProjectModulePolicyNetworkPolicyNetInstanceConfigIpDhcpRange[];
    dns: string[];
    domain: string;
    gateway: string;
    mask: string;
    ntp: string;
    subnet: string;
}

export interface ProjectModulePolicyNetworkPolicyNetInstanceConfigIpDhcpRange {
    end: string;
    start: string;
}

export interface ProjectModulePolicyNetworkPolicyNetInstanceConfigLisp {
    allocate: boolean;
    allocationprefix: string;
    allocationprefixlen: number;
    exportprivate: boolean;
    lispiid: number;
    sps: outputs.ProjectModulePolicyNetworkPolicyNetInstanceConfigLispSp[];
}

export interface ProjectModulePolicyNetworkPolicyNetInstanceConfigLispSp {
    credential: string;
    nameOrIp: string;
    type: string;
}

export interface ProjectModulePolicyNetworkPolicyNetInstanceConfigOpaque {
    lisps: outputs.ProjectModulePolicyNetworkPolicyNetInstanceConfigOpaqueLisp[];
    oconfig: string;
    type: string;
}

export interface ProjectModulePolicyNetworkPolicyNetInstanceConfigOpaqueLisp {
    allocate: boolean;
    allocationprefix: string;
    allocationprefixlen: number;
    exportprivate: boolean;
    lispiid: number;
    sps: outputs.ProjectModulePolicyNetworkPolicyNetInstanceConfigOpaqueLispSp[];
}

export interface ProjectModulePolicyNetworkPolicyNetInstanceConfigOpaqueLispSp {
    credential: string;
    nameOrIp: string;
    type: string;
}

export interface ProjectModulePolicyNetworkPolicyNetInstanceConfigRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface ProjectModulePolicyRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface ProjectNetworkPolicy {
    /**
     * app policy, which is used in auto app instance deployment
     */
    appPolicies?: outputs.ProjectNetworkPolicyAppPolicy[];
    /**
     * attestation policy to enforce on all devices in this project
     */
    attestationPolicies?: outputs.ProjectNetworkPolicyAttestationPolicy[];
    /**
     * Mapping of policy  variable keys and policy variable values
     */
    attr?: {[key: string]: string};
    /**
     * azure policy, which is used in configuring azure iot-edge.
     */
    azurePolicies?: outputs.ProjectNetworkPolicyAzurePolicy[];
    /**
     * cluster policy to bring up cluster on devices in this project
     */
    clusterPolicies?: outputs.ProjectNetworkPolicyClusterPolicy[];
    /**
     * Detailed description of the policy
     */
    description?: string;
    /**
     * edgeview policy on devices of this project
     */
    edgeviewPolicies?: outputs.ProjectNetworkPolicyEdgeviewPolicy[];
    /**
     * System defined universally unique Id of the policy request
     */
    id: string;
    /**
     * local operator console policy to enforce on all devices in this project
     */
    localOperatorConsolePolicies?: outputs.ProjectNetworkPolicyLocalOperatorConsolePolicy[];
    /**
     * module policy, which is used in auto module deployment
     */
    modulePolicies?: outputs.ProjectNetworkPolicyModulePolicy[];
    /**
     * User defined name of the policy request, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * network policy to enforce on all devices in this project
     */
    networkPolicies?: outputs.ProjectNetworkPolicyNetworkPolicy[];
    /**
     * system defined info
     */
    revisions: outputs.ProjectNetworkPolicyRevision[];
    /**
     * status of the policy
     */
    status: string;
    /**
     * Detailed status message of the policy
     */
    statusMessage: string;
    /**
     * User defined title of the policy. Title can be changed at any time
     */
    title?: string;
    /**
     * type of policy
     */
    type?: string;
}

export interface ProjectNetworkPolicyAppPolicy {
    /**
     * list of app details that will be provisioned on all the devices of the project to which this policy is attached
     */
    apps: outputs.ProjectNetworkPolicyAppPolicyApp[];
}

export interface ProjectNetworkPolicyAppPolicyApp {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.ProjectNetworkPolicyAppPolicyAppInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.ProjectNetworkPolicyAppPolicyAppManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.ProjectNetworkPolicyAppPolicyAppParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface ProjectNetworkPolicyAppPolicyAppInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.ProjectNetworkPolicyAppPolicyAppInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.ProjectNetworkPolicyAppPolicyAppInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.ProjectNetworkPolicyAppPolicyAppInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface ProjectNetworkPolicyAppPolicyAppInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.ProjectNetworkPolicyAppPolicyAppInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.ProjectNetworkPolicyAppPolicyAppInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface ProjectNetworkPolicyAppPolicyAppInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.ProjectNetworkPolicyAppPolicyAppInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface ProjectNetworkPolicyAppPolicyAppInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface ProjectNetworkPolicyAppPolicyAppInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface ProjectNetworkPolicyAppPolicyAppInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.ProjectNetworkPolicyAppPolicyAppInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface ProjectNetworkPolicyAppPolicyAppInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface ProjectNetworkPolicyAppPolicyAppInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface ProjectNetworkPolicyAppPolicyAppManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.ProjectNetworkPolicyAppPolicyAppManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.ProjectNetworkPolicyAppPolicyAppManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.ProjectNetworkPolicyAppPolicyAppManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.ProjectNetworkPolicyAppPolicyAppManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.ProjectNetworkPolicyAppPolicyAppManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.ProjectNetworkPolicyAppPolicyAppManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.ProjectNetworkPolicyAppPolicyAppManifestJsonOwner[];
    permissions?: outputs.ProjectNetworkPolicyAppPolicyAppManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.ProjectNetworkPolicyAppPolicyAppManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface ProjectNetworkPolicyAppPolicyAppManifestJsonConfiguration {
    customConfigs?: outputs.ProjectNetworkPolicyAppPolicyAppManifestJsonConfigurationCustomConfig[];
}

export interface ProjectNetworkPolicyAppPolicyAppManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.ProjectNetworkPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface ProjectNetworkPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.ProjectNetworkPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.ProjectNetworkPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface ProjectNetworkPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface ProjectNetworkPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.ProjectNetworkPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface ProjectNetworkPolicyAppPolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface ProjectNetworkPolicyAppPolicyAppManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface ProjectNetworkPolicyAppPolicyAppManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface ProjectNetworkPolicyAppPolicyAppManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.ProjectNetworkPolicyAppPolicyAppManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface ProjectNetworkPolicyAppPolicyAppManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface ProjectNetworkPolicyAppPolicyAppManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.ProjectNetworkPolicyAppPolicyAppManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface ProjectNetworkPolicyAppPolicyAppManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.ProjectNetworkPolicyAppPolicyAppManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.ProjectNetworkPolicyAppPolicyAppManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface ProjectNetworkPolicyAppPolicyAppManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.ProjectNetworkPolicyAppPolicyAppManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.ProjectNetworkPolicyAppPolicyAppManifestJsonInterfaceAclActionPortmapto[];
}

export interface ProjectNetworkPolicyAppPolicyAppManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface ProjectNetworkPolicyAppPolicyAppManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface ProjectNetworkPolicyAppPolicyAppManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface ProjectNetworkPolicyAppPolicyAppManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface ProjectNetworkPolicyAppPolicyAppManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface ProjectNetworkPolicyAppPolicyAppManifestJsonPermission {
}

export interface ProjectNetworkPolicyAppPolicyAppManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface ProjectNetworkPolicyAppPolicyAppParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface ProjectNetworkPolicyAttestationPolicy {
    /**
     * unique policy id
     */
    id: string;
    /**
     * Attestation policy type
     */
    type: string;
}

export interface ProjectNetworkPolicyAzurePolicy {
    /**
     * app id for rbac
     */
    appId: string;
    /**
     * app password for rbac
     */
    appPassword: string;
    /**
     * azure resource and service the policy will be interested in
     */
    azureResourceAndServices?: outputs.ProjectNetworkPolicyAzurePolicyAzureResourceAndService[];
    /**
     * Certificate object holds the details of certificate like encryption type, validity, subject etc
     */
    certificates?: outputs.ProjectNetworkPolicyAzurePolicyCertificate[];
    /**
     * key to decrypt AppPassword
     */
    cryptoKey?: string;
    customDeploymentManaged?: boolean;
    /**
     * encrypted AppPassword
     */
    encryptedSecrets?: {[key: string]: string};
    /**
     * tenant id for rbac
     */
    tenantId: string;
}

export interface ProjectNetworkPolicyAzurePolicyAzureResourceAndService {
    /**
     * dps service attached to cloud policy
     */
    dpsServices: outputs.ProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsService[];
    /**
     * list of iothubs attached to cloud policy
     */
    iotHubServices: outputs.ProjectNetworkPolicyAzurePolicyAzureResourceAndServiceIotHubService[];
    /**
     * list of resource groups attached to cloud policy
     */
    resourceGroups: outputs.ProjectNetworkPolicyAzurePolicyAzureResourceAndServiceResourceGroup[];
}

export interface ProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsService {
    enrollments?: outputs.ProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollment[];
    serviceDetails?: outputs.ProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetail[];
}

export interface ProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollment {
    allocationPolicy?: string;
    attachedIotHubsNames?: string[];
    certificateEnrollments?: outputs.ProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollment[];
    enableIotEdgeDevice?: boolean;
    mechanism?: string;
    symmetricKeyEnrollments?: outputs.ProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollment[];
    tags?: {[key: string]: string};
    tpmEnrollments?: outputs.ProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentTpmEnrollment[];
}

export interface ProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollment {
    groupCertificateEnrollments?: outputs.ProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollmentGroupCertificateEnrollment[];
    individualCertificateEnrollment?: string;
    type?: string;
}

export interface ProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentCertificateEnrollmentGroupCertificateEnrollment {
    groupName?: string;
}

export interface ProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollment {
    groupSymmetricKeyEnrollments?: outputs.ProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentGroupSymmetricKeyEnrollment[];
    individualSymmetricKeyEnrollments?: outputs.ProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentIndividualSymmetricKeyEnrollment[];
    type?: string;
}

export interface ProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentGroupSymmetricKeyEnrollment {
    groupName?: string;
}

export interface ProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentSymmetricKeyEnrollmentIndividualSymmetricKeyEnrollment {
    registrationId?: string;
}

export interface ProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceEnrollmentTpmEnrollment {
    type?: string;
}

export interface ProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetail {
    createByDefault?: boolean;
    name?: string;
    region?: string;
    resourceGroupName?: string;
    sKUs?: outputs.ProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetailSKU[];
    subscriptionId?: string;
}

export interface ProjectNetworkPolicyAzurePolicyAzureResourceAndServiceDpsServiceServiceDetailSKU {
    capacity?: string;
    name?: string;
    tier?: string;
}

export interface ProjectNetworkPolicyAzurePolicyAzureResourceAndServiceIotHubService {
    serviceDetails?: outputs.ProjectNetworkPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetail[];
}

export interface ProjectNetworkPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetail {
    createByDefault?: boolean;
    name?: string;
    region?: string;
    resourceGroupName?: string;
    sKUs?: outputs.ProjectNetworkPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetailSKU[];
    subscriptionId?: string;
}

export interface ProjectNetworkPolicyAzurePolicyAzureResourceAndServiceIotHubServiceServiceDetailSKU {
    capacity?: string;
    name?: string;
    tier?: string;
}

export interface ProjectNetworkPolicyAzurePolicyAzureResourceAndServiceResourceGroup {
    /**
     * resource group name
     */
    name: string;
    /**
     * resource group region
     */
    region?: string;
    /**
     * azure subscription id to which resource group is attached
     */
    subscriptionId: string;
}

export interface ProjectNetworkPolicyAzurePolicyCertificate {
    /**
     * This fields tells the basic constraints like isCA are correct.
     */
    basicContraintsValid?: boolean;
    /**
     * base64 string of the parent certificate
     */
    cert?: string;
    /**
     * Crypto Key for decrypting user secret information
     */
    cryptoKey?: string;
    /**
     * ECDSA encryption algorithm of the certificate
     */
    ecdsaEncryptions?: outputs.ProjectNetworkPolicyAzurePolicyCertificateEcdsaEncryption[];
    /**
     * user encrypted secrets map
     */
    encryptedSecrets?: {[key: string]: string};
    /**
     * Indicates if the private key can be exported.
     */
    exportable?: boolean;
    /**
     * Sequence of extended key usages.
     */
    extendedKeyUsages?: string[];
    /**
     * Parameters for the issuer of the X509 component of a certificate.
     */
    issuers?: outputs.ProjectNetworkPolicyAzurePolicyCertificateIssuer[];
    /**
     * Key usage extensions define the purpose of the public key contained in a certificate.
     */
    keyUsage?: number;
    /**
     * pass phase for the pvt key, this has to be filled if pvt key is encrypted with a pass phrase
     */
    passPhrase?: string;
    /**
     * base63 string of the public key
     */
    publicKey?: string;
    /**
     * Public key algorithm.
     */
    publicKeyAlgorithm?: string;
    /**
     * base64 string of the parent pvt key
     */
    pvtKey?: string;
    /**
     * Indicates if the same key pair will be used on certificate renewal.
     */
    reuseKey?: boolean;
    /**
     * RSA encryption algorithm of the certificate
     */
    rsaEcryptions?: outputs.ProjectNetworkPolicyAzurePolicyCertificateRsaEcryption[];
    /**
     * This holds the alternative name values like URIs, domain names IPs etc.
     */
    sanValues?: outputs.ProjectNetworkPolicyAzurePolicyCertificateSanValue[];
    /**
     * Unique identifier for each Certificate generated by an Certificate Issuer.
     */
    serialNumber?: string;
    signatureAlgorithm?: string;
    /**
     * Parameters for the subject of the X509 component of a certificate.
     */
    subjects?: outputs.ProjectNetworkPolicyAzurePolicyCertificateSubject[];
    /**
     * Certificate validatity start time
     */
    validFrom?: string;
    /**
     * Certificate validatity start time
     */
    validTill?: string;
}

export interface ProjectNetworkPolicyAzurePolicyCertificateEcdsaEncryption {
    /**
     * ECDSA curve to be used while signing the certificate.
     */
    curve?: string;
}

export interface ProjectNetworkPolicyAzurePolicyCertificateIssuer {
    /**
     * Certificate common name.
     */
    commonName?: string;
    /**
     * List of countries.
     */
    countries?: string[];
    /**
     * List of locallity.
     */
    localities?: string[];
    /**
     * List of Organizational Unit.
     */
    organizationalUnits?: string[];
    /**
     * List of organization.
     */
    organizations?: string[];
    /**
     * List of Postal codes.
     */
    postalCodes?: string[];
    /**
     * List of List of Prvince.
     */
    provinces?: string[];
    /**
     * Subject cerial number
     */
    serialNumber?: string;
}

export interface ProjectNetworkPolicyAzurePolicyCertificateRsaEcryption {
    /**
     * RSA Encryption Key bit size.
     */
    rsaBits?: string;
}

export interface ProjectNetworkPolicyAzurePolicyCertificateSanValue {
    /**
     * List of permitted DNS names.
     */
    dns?: string[];
    /**
     * List of permitted email addresses.
     */
    emaildIds?: string[];
    /**
     * List of permitted hosts.
     */
    hosts?: string[];
    /**
     * List of permitted IP addresses.
     */
    ips?: string[];
    /**
     * List of permitted User principal names.
     */
    upns?: string[];
    /**
     * List of permitted URIs.
     */
    uris?: string[];
}

export interface ProjectNetworkPolicyAzurePolicyCertificateSubject {
    /**
     * Certificate common name.
     */
    commonName?: string;
    /**
     * List of countries.
     */
    countries?: string[];
    /**
     * List of locallity.
     */
    localities?: string[];
    /**
     * List of Organizational Unit.
     */
    organizationalUnits?: string[];
    /**
     * List of organization.
     */
    organizations?: string[];
    /**
     * List of Postal codes.
     */
    postalCodes?: string[];
    /**
     * List of List of Prvince.
     */
    provinces?: string[];
    /**
     * Subject cerial number
     */
    serialNumber?: string;
}

export interface ProjectNetworkPolicyClusterPolicy {
    /**
     * UUID of the app policy linked to this cluster policy
     */
    appPolicyId: string;
    /**
     * Cluster Policy Parameters
     */
    clusterConfigs?: outputs.ProjectNetworkPolicyClusterPolicyClusterConfig[];
    /**
     * UUID of the network policy linked to this cluster policy
     */
    networkPolicyId: string;
    /**
     * Type of cluster
     */
    type: string;
}

export interface ProjectNetworkPolicyClusterPolicyClusterConfig {
    minNodesRequired?: number;
}

export interface ProjectNetworkPolicyEdgeviewPolicy {
    /**
     * Allow inherit instance to change access policy
     */
    accessAllowChange?: boolean;
    /**
     * Allow device to enable Edgeview in this project
     */
    edgeviewAllow?: boolean;
    /**
     * Edgeview configuration and policies
     */
    edgeviewcfgs?: outputs.ProjectNetworkPolicyEdgeviewPolicyEdgeviewcfg[];
    /**
     * Maximum seconds allowed for Edgeview session
     */
    maxExpireSec?: number;
    /**
     * Maximum instances allowed for Edgeview
     */
    maxInst?: number;
}

export interface ProjectNetworkPolicyEdgeviewPolicyEdgeviewcfg {
    appPolicies?: outputs.ProjectNetworkPolicyEdgeviewPolicyEdgeviewcfgAppPolicy[];
    devPolicies?: outputs.ProjectNetworkPolicyEdgeviewPolicyEdgeviewcfgDevPolicy[];
    extPolicies?: outputs.ProjectNetworkPolicyEdgeviewPolicyEdgeviewcfgExtPolicy[];
    generationId?: number;
    jwtInfos?: outputs.ProjectNetworkPolicyEdgeviewPolicyEdgeviewcfgJwtInfo[];
    token?: string;
}

export interface ProjectNetworkPolicyEdgeviewPolicyEdgeviewcfgAppPolicy {
    allowApp?: boolean;
}

export interface ProjectNetworkPolicyEdgeviewPolicyEdgeviewcfgDevPolicy {
    allowDev?: boolean;
}

export interface ProjectNetworkPolicyEdgeviewPolicyEdgeviewcfgExtPolicy {
    allowExt?: boolean;
}

export interface ProjectNetworkPolicyEdgeviewPolicyEdgeviewcfgJwtInfo {
    allowSec?: number;
    dispUrl?: string;
    encrypt?: boolean;
    expireSec: string;
    numInst?: number;
}

export interface ProjectNetworkPolicyLocalOperatorConsolePolicy {
    /**
     * unique policy id
     */
    id: string;
    /**
     * Local operator console URL
     */
    locUrl: string;
}

export interface ProjectNetworkPolicyModulePolicy {
    /**
     * list of app details that will be provisioned on all the devices of the project to which this policy is attached
     */
    apps: outputs.ProjectNetworkPolicyModulePolicyApp[];
    /**
     * app that describes the azure edge agent to be deployed on the Azure runtime
     */
    azureEdgeAgents?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeAgent[];
    /**
     * app that describes the azure edge hub to be deployed on the Azure runtime
     */
    azureEdgeHubs?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeHub[];
    /**
     * etag for deployment
     */
    etag?: string;
    /**
     * unique id for deployment
     */
    id: string;
    /**
     * Mapping of label variable keys and value
     */
    labels?: {[key: string]: string};
    /**
     * custom metrics for deployment
     */
    metrics?: outputs.ProjectNetworkPolicyModulePolicyMetric[];
    /**
     * deployment priority of module manifest
     */
    priority: number;
    /**
     * Mapping of routes variable keys and value
     */
    routes?: {[key: string]: string};
    /**
     * target condition for deployment that matches single device or group of devices
     */
    targetCondition?: string;
    /**
     * target condition for deployment that matches single device or group of devices
     */
    targetConditionNew?: {[key: string]: string};
}

export interface ProjectNetworkPolicyModulePolicyApp {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.ProjectNetworkPolicyModulePolicyAppInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.ProjectNetworkPolicyModulePolicyAppManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.ProjectNetworkPolicyModulePolicyAppParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface ProjectNetworkPolicyModulePolicyAppInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.ProjectNetworkPolicyModulePolicyAppInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.ProjectNetworkPolicyModulePolicyAppInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.ProjectNetworkPolicyModulePolicyAppInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface ProjectNetworkPolicyModulePolicyAppInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.ProjectNetworkPolicyModulePolicyAppInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.ProjectNetworkPolicyModulePolicyAppInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface ProjectNetworkPolicyModulePolicyAppInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.ProjectNetworkPolicyModulePolicyAppInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface ProjectNetworkPolicyModulePolicyAppInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface ProjectNetworkPolicyModulePolicyAppInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface ProjectNetworkPolicyModulePolicyAppInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.ProjectNetworkPolicyModulePolicyAppInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface ProjectNetworkPolicyModulePolicyAppInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface ProjectNetworkPolicyModulePolicyAppInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface ProjectNetworkPolicyModulePolicyAppManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.ProjectNetworkPolicyModulePolicyAppManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.ProjectNetworkPolicyModulePolicyAppManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.ProjectNetworkPolicyModulePolicyAppManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.ProjectNetworkPolicyModulePolicyAppManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.ProjectNetworkPolicyModulePolicyAppManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.ProjectNetworkPolicyModulePolicyAppManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.ProjectNetworkPolicyModulePolicyAppManifestJsonOwner[];
    permissions?: outputs.ProjectNetworkPolicyModulePolicyAppManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.ProjectNetworkPolicyModulePolicyAppManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface ProjectNetworkPolicyModulePolicyAppManifestJsonConfiguration {
    customConfigs?: outputs.ProjectNetworkPolicyModulePolicyAppManifestJsonConfigurationCustomConfig[];
}

export interface ProjectNetworkPolicyModulePolicyAppManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.ProjectNetworkPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface ProjectNetworkPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.ProjectNetworkPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.ProjectNetworkPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface ProjectNetworkPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface ProjectNetworkPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.ProjectNetworkPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface ProjectNetworkPolicyModulePolicyAppManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface ProjectNetworkPolicyModulePolicyAppManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface ProjectNetworkPolicyModulePolicyAppManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface ProjectNetworkPolicyModulePolicyAppManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.ProjectNetworkPolicyModulePolicyAppManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface ProjectNetworkPolicyModulePolicyAppManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface ProjectNetworkPolicyModulePolicyAppManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.ProjectNetworkPolicyModulePolicyAppManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface ProjectNetworkPolicyModulePolicyAppManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.ProjectNetworkPolicyModulePolicyAppManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.ProjectNetworkPolicyModulePolicyAppManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface ProjectNetworkPolicyModulePolicyAppManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.ProjectNetworkPolicyModulePolicyAppManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.ProjectNetworkPolicyModulePolicyAppManifestJsonInterfaceAclActionPortmapto[];
}

export interface ProjectNetworkPolicyModulePolicyAppManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface ProjectNetworkPolicyModulePolicyAppManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface ProjectNetworkPolicyModulePolicyAppManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface ProjectNetworkPolicyModulePolicyAppManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface ProjectNetworkPolicyModulePolicyAppManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface ProjectNetworkPolicyModulePolicyAppManifestJsonPermission {
}

export interface ProjectNetworkPolicyModulePolicyAppManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface ProjectNetworkPolicyModulePolicyAppParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeAgent {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeAgentInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeAgentParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeAgentInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeAgentInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeAgentInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeAgentInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeAgentInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeAgentInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeAgentInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeAgentInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeAgentInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeAgentInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeAgentInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeAgentInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeAgentInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeAgentInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeAgentInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonOwner[];
    permissions?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonConfiguration {
    customConfigs?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfig[];
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionPortmapto[];
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonPermission {
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeAgentManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeAgentParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeHub {
    /**
     * User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
     */
    appId?: string;
    /**
     * Current version of the attached bundle
     */
    appVersion?: string;
    /**
     * user defined cpus for bundle
     */
    cpus: number;
    /**
     * Detailed description of the edge application
     */
    description?: string;
    /**
     * user defined drives
     */
    drives: number;
    /**
     * System defined universally unique Id of the edge application
     */
    id: string;
    /**
     * application interfaces
     */
    interfaces?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeHubInterface[];
    /**
     * Manifest data
     */
    manifestJsons: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJson[];
    /**
     * user defined memory for bundle
     */
    memory: number;
    /**
     * User defined name of the edge application, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameAppPart?: string;
    /**
     * User provided name part  for the auto deployed app
     */
    nameProjectPart?: string;
    /**
     * app naming scheme
     */
    namingScheme?: string;
    /**
     * user defined network options
     */
    networks: number;
    /**
     * origin of object
     */
    originType: string;
    /**
     * origin and parent related details
     */
    parentDetails?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeHubParentDetail[];
    /**
     * start delay is the time in seconds EVE should wait after boot before starting the application instance
     */
    startDelayInSeconds?: number;
    /**
     * user defined storage for bundle
     */
    storage?: number;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the edge application. Title can be changed at any time
     */
    title: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeHubInterface {
    /**
     * access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
     */
    accessVlanId?: number;
    /**
     * app Acls
     */
    acls?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeHubInterfaceAcl[];
    /**
     * default instance flag
     */
    defaultNetInstance?: boolean;
    /**
     * direct attach flag
     */
    directattach?: boolean;
    /**
     * EID register details
     */
    eidregisters?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeHubInterfaceEidregister[];
    /**
     * intf Name
     */
    intfname: string;
    /**
     * intforder
     */
    intforder?: number;
    /**
     * Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
     */
    ios?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeHubInterfaceIo[];
    /**
     * IP address
     */
    ipaddr?: string;
    /**
     * MAC address
     */
    macaddr?: string;
    /**
     * Network Instance id to be matched for interface assignment.
     */
    netinstid: string;
    /**
     * Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinstname: string;
    /**
     * Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
     */
    netinsttag?: {[key: string]: string};
    /**
     * network name: will be deprecated in future, use netinstname
     */
    netname?: string;
    /**
     * Private IP flag
     */
    privateip: boolean;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeHubInterfaceAcl {
    /**
     * app ACE actions
     */
    actions?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeHubInterfaceAclAction[];
    /**
     * app ACE id
     */
    id: number;
    /**
     * app ACE match
     */
    matches?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeHubInterfaceAclMatch[];
    /**
     * User defined name of the app ACE, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeHubInterfaceAclAction {
    /**
     * ACE drop flag
     */
    drop?: boolean;
    /**
     * ACE limit flag
     */
    limit?: boolean;
    /**
     * ACE limit burst
     */
    limitburst?: number;
    /**
     * ACE limit rate
     */
    limitrate?: number;
    /**
     * ACE limit unit
     */
    limitunit?: string;
    /**
     * Application map params
     */
    mapparams?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeHubInterfaceAclActionMapparam[];
    /**
     * application port map flag
     */
    portmap?: boolean;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeHubInterfaceAclActionMapparam {
    /**
     * Application port
     */
    port?: number;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeHubInterfaceAclMatch {
    /**
     * Type
     */
    type?: string;
    /**
     * Value
     */
    value?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeHubInterfaceEidregister {
    /**
     * app certificate
     */
    appCert: string;
    /**
     * App private key
     */
    appPrivateKey: string;
    /**
     * App public key
     */
    appPublicKey: string;
    /**
     * Display name
     */
    displayName: string;
    /**
     * EID
     */
    eId: string;
    /**
     * EID hash length
     */
    eIdHashLen: number;
    /**
     * Lisp Instance
     */
    lispInstance: number;
    /**
     * Lisp Map Server
     */
    lispMapServers: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeHubInterfaceEidregisterLispMapServer[];
    /**
     * Lisp Signature
     */
    lispSignature: string;
    /**
     * UUID
     */
    uuid: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeHubInterfaceEidregisterLispMapServer {
    /**
     * lisp credential
     */
    credential: string;
    /**
     * name/IP
     */
    nameOrIp: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeHubInterfaceIo {
    /**
     * Physical Adapter name
     */
    name?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * IoType specifies the type of the Input output of the device
     */
    type?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJson {
    /**
     * UI map: N/A - not exposed to users
     */
    acKind: string;
    /**
     * UI map: N/A - not exposed to users
     */
    acVersion: string;
    /**
     * bundle type, eg: vm, container, module
     */
    appType?: string;
    /**
     * Template for Custom Configuration. Used for Cloud-Init
     */
    configurations?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonConfiguration[];
    /**
     * Create options direct the creation of the Docker container
     */
    containerDetails?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonContainerDetail[];
    /**
     * Enable CpuPinning
     */
    cpuPinningEnabled?: boolean;
    /**
     * type of deployment for the app, eg: azure, k3s, standalone
     */
    deploymentType?: string;
    /**
     * UI map: AppDetailsPage:IdentityPane:DescriptionField, AppMarketplacePage:AppCard:DescriptionField
     */
    description?: string;
    /**
     * Description of the application
     */
    descs?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonDesc[];
    /**
     * UI map: AppEditPage:IdentityPane:Title_Field, AppDetailsPage:IdentityPane:Title_Field
     */
    displayName?: string;
    /**
     * UI map: AppEditPage:IdentityPane:VNC_Field, AppDetailsPage:IdentityPane:VNC_Field
     */
    enablevnc?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane, AppDetailsPage:DrivesPane
     */
    images?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonImage[];
    /**
     * UI map: AppEditPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    interfaces?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonInterface[];
    /**
     * Azure module specific details like module twin, environment variable, routes
     */
    modules?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonModule[];
    /**
     * UI map: AppEditPage:IdentityPane:Name_Field, AppDetailsPage:IdentityPane:Name_Field
     */
    name: string;
    /**
     * Owner of the application
     */
    owners?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonOwner[];
    permissions?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonPermission[];
    /**
     * UI map: AppEditPage:ResourcesPane, AppDetailsPage:ResourcesPane
     */
    resources?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonResource[];
    /**
     * UI map: AppEditPage:IdentityPane:VM_Mode_Field, AppDetailsPage:IdentityPane:VM_Mode_Field
     */
    vmmode?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonConfiguration {
    customConfigs?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfig[];
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfig {
    /**
     * Add the Custom Config to App Instance (Optional. Default: False)
     */
    add?: boolean;
    /**
     * Allow Appinstance storage to be resized after app instance is created. (Optional. Default: False)
     */
    allowStorageResize?: boolean;
    /**
     * Field delimiter used in specifying variables in template. (Required)
     */
    fieldDelimiter?: string;
    /**
     * Name of CustomConfig (Required)
     */
    name?: string;
    /**
     * Override existing custom config from App Bundle Manifest (Optional. Default: False)
     */
    override?: boolean;
    /**
     * base64 encrypted template string. (Optional)
     */
    template?: string;
    /**
     * List of Variable groups. (Required)
     */
    variableGroups?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroup[];
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroup {
    /**
     * Condition to apply the variable group. (Optional. Default: None)
     */
    conditions?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupCondition[];
    /**
     * Name of the Variable Group(Required)
     */
    name?: string;
    /**
     * Indicates if the variable group is required to be specified for the App Instance. (Optional. Default:False)
     */
    required?: boolean;
    /**
     * List of variables(Required)
     */
    variables?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariable[];
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupCondition {
    name?: string;
    operator?: string;
    value?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariable {
    /**
     * Default value of the variable. (Optional. Default: <Default value based on type>)
     */
    default?: string;
    /**
     * Encoding of file content. Applicable if format is VARIABLE_FORMAT_FILE
     */
    encode?: string;
    /**
     * Format of the user variable. (Required)
     */
    format: string;
    /**
     * Label for the variable (Required)
     */
    label: string;
    /**
     * Max length of the value of the variable(Optional. Default: 1024)
     */
    maxLength?: string;
    /**
     * Name of the Variable (Required)
     */
    name: string;
    /**
     * Key-Value pair of options. Applicable if format is VARIABLE_FORMAT_DROPDOWN
     */
    options?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariableOption[];
    processInput?: string;
    /**
     * This variable MUST be specified when creating an App Instance. (Optional. Default: False)
     */
    required: boolean;
    type?: string;
    /**
     * User-specified value of the variable.(Required if required is true. Optional otherwise)
     */
    value?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonConfigurationCustomConfigVariableGroupVariableOption {
    /**
     * Display label of the key in User-Agent
     */
    label?: string;
    /**
     * Value of the key to be used
     */
    value?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonContainerDetail {
    /**
     * Create options direct the creation of the Docker container
     */
    containerCreateOption?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonDesc {
    /**
     * UI map: AppEditPage:DeveloperPane:Developer_Agreement_Field, AppDetailsPage:DeveloperPane:Developer_Agreement_Field
     */
    agreementList?: {[key: string]: string};
    appCategory: string;
    /**
     * UI map: AppMarketplacePage:AppCard:DescriptionField, AppEditPage:IdentityPane:CategoryField, AppDetailsPage:IdentityPane:CategoryField
     */
    category?: string;
    /**
     * UI map: AppMarketplacePage:AppCard:License, AppEditPage:IdentityPane:License, AppDetailsPage:IdentityPane:License
     */
    licenseList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:IdentityPane:Logo, AppDetailsPage:IdentityPane:Logo
     */
    logo?: {[key: string]: string};
    os?: string;
    /**
     * UI map: AppEditPage:IdentityPane:Screenshot_Fields, AppDetailsPage:IdentityPane:Screenshot_Fields
     */
    screenshotList?: {[key: string]: string};
    /**
     * UI map: AppEditPage:DeveloperPane:Support_Description_Field, AppDetailsPage:DeveloperPane:Support_Description_Field
     */
    support?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonImage {
    /**
     * UI map: AppEditPage:DrivesPane:Cleartext, AppDetailsPage:DrivesPane:ClearText_Field
     */
    cleartext?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Drive_Type_Field, AppDetailsPage:DrivesPane:Drive_Type_Field
     */
    drvtype?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Ignorepurge, AppDetailsPage:DrivesPane:Ignorepurgee_Field
     */
    ignorepurge?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Format_Field, AppDetailsPage:DrivesPane:Image_Format_Field
     */
    imageformat?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_ID_Field, AppDetailsPage:DrivesPane:Image_ID_Field
     */
    imageid?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Image_Name_Field, AppDetailsPage:DrivesPane:Image_Name_Field
     */
    imagename?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Max_Size_Field, AppDetailsPage:DrivesPane:Max_Size_Field
     */
    maxsize?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Mountpath, AppDetailsPage:DrivesPane:Mountpath_Field
     */
    mountpath?: string;
    params?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonImageParam[];
    /**
     * UI map: AppEditPage:DrivesPane:Preserve_Field, AppDetailsPage:DrivesPane:Preserve_Field
     */
    preserve?: boolean;
    readonly?: boolean;
    /**
     * UI map: AppEditPage:DrivesPane:Target_Field, AppDetailsPage:DrivesPane:Target_Field
     */
    target?: string;
    /**
     * UI map: AppEditPage:DrivesPane:Volume_Label, AppDetailsPage:DrivesPane:Volume_Label
     */
    volumelabel?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonImageParam {
    /**
     * Name of the Parameter (Required)
     */
    name?: string;
    /**
     * Value of the parameter (Required)
     */
    value?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonInterface {
    /**
     * Traffic access control rules for this interface. Applicable only when "direct attach" flag is false.
     */
    acls?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAcl[];
    /**
     * If true, a physical adapter is assigned to the edge application directly. If false, a network instance is assigned to the edge application.
     */
    directattach?: boolean;
    /**
     * Interface name used by the edge application
     */
    name?: string;
    /**
     * Indicates if the interface is optional for edge application.
     */
    optional?: boolean;
    /**
     * If true, DHCP network can't be assigned and user needs to provide a static IP address.
     */
    privateip?: boolean;
    /**
     * Physical Adapter type for this interface. Applicable only when "direct attach" flag is true.
     */
    type?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAcl {
    /**
     * Chain of actions to be taken on matching network traffic
     */
    actions?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclAction[];
    /**
     * Network traffic matching criteria consistngs of one or more of source IP address, destination IP address, protocol, source port and destination port
     */
    matches?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclMatch[];
    /**
     * Name of the Access Control List
     */
    name?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclAction {
    /**
     * Drop the packet
     */
    drop?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limit?: boolean;
    /**
     * Value to be used for limit action (Required if limit is true)
     */
    limitValues?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionLimitValue[];
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmap?: boolean;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    portmaptos?: outputs.ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionPortmapto[];
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionLimitValue {
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitburst?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitrate?: number;
    /**
     * UI map: AppDetailsPage:EnvironmentsPane, AppDetailsPage:EnvironmentsPane
     */
    limitunit?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclActionPortmapto {
    /**
     * Application Port value
     */
    appPort?: number;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonInterfaceAclMatch {
    /**
     * Type of Match (Required)
     */
    type?: string;
    /**
     * Value of match (Required)
     */
    value?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonModule {
    /**
     * Extra information to module to make configuration easier
     */
    environment?: {[key: string]: string};
    /**
     * Type of modules
     */
    moduleType?: string;
    /**
     * Send messages between modules or send messages from modules to iot hub
     */
    routes?: {[key: string]: string};
    /**
     * Base64 encoded module twin details, desired properties of the module will be updated to reflect these values
     */
    twinDetail?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonOwner {
    /**
     * UI map: AppEditPage:IdentityPane:Category_Field, AppDetailsPage:IdentityPane:Category_Field
     */
    company?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Email_Field, AppDetailsPage:DeveloperPane:Email_Field
     */
    email?: string;
    group?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Name_Field, AppDetailsPage:DeveloperPane:Name_Field
     */
    user?: string;
    /**
     * UI map: AppEditPage:DeveloperPane:Website_Field, AppDetailsPage:DeveloperPane:Website_Field
     */
    website?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonPermission {
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeHubManifestJsonResource {
    /**
     * Name of the Resource (Required)
     */
    name?: string;
    /**
     * Value of Resource (Required)
     */
    value?: string;
}

export interface ProjectNetworkPolicyModulePolicyAzureEdgeHubParentDetail {
    /**
     * system defined unique id of parent object
     */
    idOfParentObject: string;
    /**
     * Relation with child and parent object exists or not
     */
    referenceExists?: boolean;
    /**
     * Update required flag
     */
    updateAvailable?: boolean;
    /**
     * version of object present in parent
     */
    versionOfParentObject: number;
}

export interface ProjectNetworkPolicyModulePolicyMetric {
    /**
     * Mapping of queries variable keys and value
     */
    queries?: {[key: string]: string};
    /**
     * Mapping of results variable keys and value
     */
    results?: {[key: string]: string};
}

export interface ProjectNetworkPolicyNetworkPolicy {
    /**
     * list of network details that will be created on all the devices of the project to which this policy is attached
     */
    netInstanceConfigs: outputs.ProjectNetworkPolicyNetworkPolicyNetInstanceConfig[];
}

export interface ProjectNetworkPolicyNetworkPolicyNetInstanceConfig {
    /**
     * ID of the Cluster in which the network instance is configured
     */
    clusterId?: string;
    /**
     * Detailed description of the network instance
     */
    description?: string;
    /**
     * Flag to indicate if this is the default network instance for the device
     */
    deviceDefault?: boolean;
    /**
     * ID of the device on which network instance is created
     */
    deviceId: string;
    /**
     * Deprecated
     */
    dhcp?: boolean;
    /**
     * List of Static DNS entries
     */
    dnsLists?: outputs.ProjectNetworkPolicyNetworkPolicyNetInstanceConfigDnsList[];
    /**
     * System defined universally unique ID of the network instance
     */
    id: string;
    /**
     * DHCP Server Configuration
     */
    ips?: outputs.ProjectNetworkPolicyNetworkPolicyNetInstanceConfigIp[];
    /**
     * Kind of Network Instance:
     * NETWORK_INSTANCE_KIND_UNSPECIFIED
     * NETWORK_INSTANCE_KIND_TRANSPARENT
     * NETWORK_INSTANCE_KIND_SWITCH
     * NETWORK_INSTANCE_KIND_LOCAL
     * NETWORK_INSTANCE_KIND_CLOUD
     * NETWORK_INSTANCE_KIND_MESH
     * NETWORK_INSTANCE_KIND_HONEYPOT
     */
    kind: string;
    /**
     * Lisp Config : read only for now. Deprecated.
     */
    lisps: outputs.ProjectNetworkPolicyNetworkPolicyNetInstanceConfigLisp[];
    /**
     * User defined name of the network instance, unique across the enterprise. Once object is created, name canâ€™t be changed
     */
    name: string;
    /**
     * id of the network policy to be attached to this network instance
     */
    networkPolicyId?: string;
    oconfig?: string;
    /**
     * Service specific Config
     */
    opaques?: outputs.ProjectNetworkPolicyNetworkPolicyNetInstanceConfigOpaque[];
    /**
     * name of port mapping in the model
     */
    port?: string;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    portTags?: {[key: string]: string};
    /**
     * id of the project in which network instance is created
     */
    projectId: string;
    /**
     * system defined info for the object
     */
    revisions: outputs.ProjectNetworkPolicyNetworkPolicyNetInstanceConfigRevision[];
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: {[key: string]: string};
    /**
     * User defined title of the network instance. Title can be changed at any time
     */
    title: string;
    /**
     * Type of DHCP for this Network Instance:
     * NETWORK_INSTANCE_DHCP_TYPE_V4
     * NETWORK_INSTANCE_DHCP_TYPE_V6
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOEID
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOV4
     * NETWORK_INSTANCE_DHCP_TYPE_CRYPTOV6
     */
    type: string;
}

export interface ProjectNetworkPolicyNetworkPolicyNetInstanceConfigDnsList {
    /**
     * Addresses
     */
    addrs?: string[];
    /**
     * Host name
     */
    hostname?: string;
}

export interface ProjectNetworkPolicyNetworkPolicyNetInstanceConfigIp {
    /**
     * Range of IP addresses to be used for DHCP
     */
    dhcpRanges?: outputs.ProjectNetworkPolicyNetworkPolicyNetInstanceConfigIpDhcpRange[];
    /**
     * IP Addresses of DNS servers
     */
    dns?: string[];
    /**
     * Network domain
     */
    domain?: string;
    /**
     * IP Address of Network Gateway
     */
    gateway?: string;
    /**
     * Subnet Mask
     */
    mask?: string;
    /**
     * IP Address of NTP Server
     */
    ntp?: string;
    /**
     * Subnet address
     */
    subnet: string;
}

export interface ProjectNetworkPolicyNetworkPolicyNetInstanceConfigIpDhcpRange {
    /**
     * ending IP
     */
    end?: string;
    /**
     * starting IP
     */
    start?: string;
}

export interface ProjectNetworkPolicyNetworkPolicyNetInstanceConfigLisp {
    allocate: boolean;
    allocationprefix: string;
    allocationprefixlen: number;
    exportprivate: boolean;
    lispiid: number;
    sps: outputs.ProjectNetworkPolicyNetworkPolicyNetInstanceConfigLispSp[];
}

export interface ProjectNetworkPolicyNetworkPolicyNetInstanceConfigLispSp {
    credential: string;
    nameOrIp: string;
    type: string;
}

export interface ProjectNetworkPolicyNetworkPolicyNetInstanceConfigOpaque {
    /**
     * Deprecated - Lisp config
     */
    lisps?: outputs.ProjectNetworkPolicyNetworkPolicyNetInstanceConfigOpaqueLisp[];
    /**
     * base64 encoded string of opaque config
     */
    oconfig?: string;
    /**
     * type of Opaque config
     */
    type?: string;
}

export interface ProjectNetworkPolicyNetworkPolicyNetInstanceConfigOpaqueLisp {
    /**
     * Allocate flag
     */
    allocate?: boolean;
    /**
     * Allocation Prefix
     */
    allocationprefix?: string;
    /**
     * Allocation Prefix Length
     */
    allocationprefixlen?: number;
    /**
     * Export Private flag
     */
    exportprivate?: boolean;
    /**
     * lisp id
     */
    lispiid?: number;
    /**
     * Service Point List
     */
    sps?: outputs.ProjectNetworkPolicyNetworkPolicyNetInstanceConfigOpaqueLispSp[];
}

export interface ProjectNetworkPolicyNetworkPolicyNetInstanceConfigOpaqueLispSp {
    /**
     * Service credentials
     */
    credential?: string;
    /**
     * Service name/ service name
     */
    nameOrIp?: string;
    /**
     * Service Point Type
     */
    type?: string;
}

export interface ProjectNetworkPolicyNetworkPolicyNetInstanceConfigRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface ProjectNetworkPolicyRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface ProjectRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface RoleRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface RoleScope {
    /**
     * Application access permission, this will be deprecated in further release - please use accessEdgeApp and accessAppInstance for granular permission access scope.
     */
    accessApp?: string;
    /**
     * Application Instance access permission
     */
    accessAppInstance?: string;
    /**
     * Device access permission
     */
    accessDevice?: string;
    /**
     * Edge app access permission
     */
    accessEdgeApp?: string;
    /**
     * Enterprise access permission
     */
    accessEnterprise?: string;
    /**
     * Storage access permission
     */
    accessStorage?: string;
    /**
     * User access permission
     */
    accessUser?: string;
    /**
     * List of enterprise filters
     */
    enterpriseFilters?: string[];
    /**
     * List of project filters
     */
    projectFilters?: string[];
    /**
     * Unique system defined scope ID
     */
    uuid: string;
}

export interface UserAllowedEnterprise {
    id: string;
    name?: string;
    roleId?: string;
}

export interface UserRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

export interface VolumeInstanceRevision {
    createdAt: string;
    createdBy: string;
    curr: string;
    prev: string;
    updatedAt: string;
    updatedBy: string;
}

