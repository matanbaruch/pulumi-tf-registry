// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectState, opts?: pulumi.CustomResourceOptions): Project {
        return new Project(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zedcloud:index/project:Project';

    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Project {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Project.__pulumiType;
    }

    /**
     * Resource group wide policy for edge applications to be deployed on all edge nodes on this resource group
     */
    public readonly appPolicies!: pulumi.Output<outputs.ProjectAppPolicy[] | undefined>;
    /**
     * Attestation policy to enforce on all devices of this project
     */
    public readonly attestationPolicies!: pulumi.Output<outputs.ProjectAttestationPolicy[] | undefined>;
    /**
     * Resource group wide configuration for edge nodes
     */
    public /*out*/ readonly attr!: pulumi.Output<{[key: string]: string}>;
    /**
     * Resource group wide policy for Azure IoTEdge configuration to be applied to all edge applications
     */
    public /*out*/ readonly cloudPolicies!: pulumi.Output<outputs.ProjectCloudPolicy[]>;
    /**
     * Deployment template containing different types of policies
     */
    public readonly deployments!: pulumi.Output<outputs.ProjectDeployment[] | undefined>;
    /**
     * Detailed description of the resource group.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Edgeview policy on devices of this project
     */
    public readonly edgeviewPolicies!: pulumi.Output<outputs.ProjectEdgeviewPolicy[] | undefined>;
    /**
     * Local operator console policy on devices of this project
     */
    public readonly localOperatorConsolePolicies!: pulumi.Output<outputs.ProjectLocalOperatorConsolePolicy[] | undefined>;
    /**
     * Resource group wide policy for Azure module configuration to be applied to all edge applications
     */
    public /*out*/ readonly modulePolicies!: pulumi.Output<outputs.ProjectModulePolicy[]>;
    /**
     * User defined name of the resource group, unique across the enterprise. Once resource group is created, name can’t be
     * changed.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Network policy to enforce on all devices of this project
     */
    public readonly networkPolicies!: pulumi.Output<outputs.ProjectNetworkPolicy[] | undefined>;
    /**
     * Number of edge nodes in this resource group
     */
    public /*out*/ readonly numdevices!: pulumi.Output<number>;
    /**
     * system defined info
     */
    public /*out*/ readonly revisions!: pulumi.Output<outputs.ProjectRevision[]>;
    /**
     * User defined title of the resource group. Title can be changed at any time.
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * Resource group type
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Project resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectArgs | ProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectState | undefined;
            resourceInputs["appPolicies"] = state ? state.appPolicies : undefined;
            resourceInputs["attestationPolicies"] = state ? state.attestationPolicies : undefined;
            resourceInputs["attr"] = state ? state.attr : undefined;
            resourceInputs["cloudPolicies"] = state ? state.cloudPolicies : undefined;
            resourceInputs["deployments"] = state ? state.deployments : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["edgeviewPolicies"] = state ? state.edgeviewPolicies : undefined;
            resourceInputs["localOperatorConsolePolicies"] = state ? state.localOperatorConsolePolicies : undefined;
            resourceInputs["modulePolicies"] = state ? state.modulePolicies : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkPolicies"] = state ? state.networkPolicies : undefined;
            resourceInputs["numdevices"] = state ? state.numdevices : undefined;
            resourceInputs["revisions"] = state ? state.revisions : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ProjectArgs | undefined;
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["appPolicies"] = args ? args.appPolicies : undefined;
            resourceInputs["attestationPolicies"] = args ? args.attestationPolicies : undefined;
            resourceInputs["deployments"] = args ? args.deployments : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["edgeviewPolicies"] = args ? args.edgeviewPolicies : undefined;
            resourceInputs["localOperatorConsolePolicies"] = args ? args.localOperatorConsolePolicies : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkPolicies"] = args ? args.networkPolicies : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["attr"] = undefined /*out*/;
            resourceInputs["cloudPolicies"] = undefined /*out*/;
            resourceInputs["modulePolicies"] = undefined /*out*/;
            resourceInputs["numdevices"] = undefined /*out*/;
            resourceInputs["revisions"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Project.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Project resources.
 */
export interface ProjectState {
    /**
     * Resource group wide policy for edge applications to be deployed on all edge nodes on this resource group
     */
    appPolicies?: pulumi.Input<pulumi.Input<inputs.ProjectAppPolicy>[]>;
    /**
     * Attestation policy to enforce on all devices of this project
     */
    attestationPolicies?: pulumi.Input<pulumi.Input<inputs.ProjectAttestationPolicy>[]>;
    /**
     * Resource group wide configuration for edge nodes
     */
    attr?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource group wide policy for Azure IoTEdge configuration to be applied to all edge applications
     */
    cloudPolicies?: pulumi.Input<pulumi.Input<inputs.ProjectCloudPolicy>[]>;
    /**
     * Deployment template containing different types of policies
     */
    deployments?: pulumi.Input<pulumi.Input<inputs.ProjectDeployment>[]>;
    /**
     * Detailed description of the resource group.
     */
    description?: pulumi.Input<string>;
    /**
     * Edgeview policy on devices of this project
     */
    edgeviewPolicies?: pulumi.Input<pulumi.Input<inputs.ProjectEdgeviewPolicy>[]>;
    /**
     * Local operator console policy on devices of this project
     */
    localOperatorConsolePolicies?: pulumi.Input<pulumi.Input<inputs.ProjectLocalOperatorConsolePolicy>[]>;
    /**
     * Resource group wide policy for Azure module configuration to be applied to all edge applications
     */
    modulePolicies?: pulumi.Input<pulumi.Input<inputs.ProjectModulePolicy>[]>;
    /**
     * User defined name of the resource group, unique across the enterprise. Once resource group is created, name can’t be
     * changed.
     */
    name?: pulumi.Input<string>;
    /**
     * Network policy to enforce on all devices of this project
     */
    networkPolicies?: pulumi.Input<pulumi.Input<inputs.ProjectNetworkPolicy>[]>;
    /**
     * Number of edge nodes in this resource group
     */
    numdevices?: pulumi.Input<number>;
    /**
     * system defined info
     */
    revisions?: pulumi.Input<pulumi.Input<inputs.ProjectRevision>[]>;
    /**
     * User defined title of the resource group. Title can be changed at any time.
     */
    title?: pulumi.Input<string>;
    /**
     * Resource group type
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Project resource.
 */
export interface ProjectArgs {
    /**
     * Resource group wide policy for edge applications to be deployed on all edge nodes on this resource group
     */
    appPolicies?: pulumi.Input<pulumi.Input<inputs.ProjectAppPolicy>[]>;
    /**
     * Attestation policy to enforce on all devices of this project
     */
    attestationPolicies?: pulumi.Input<pulumi.Input<inputs.ProjectAttestationPolicy>[]>;
    /**
     * Deployment template containing different types of policies
     */
    deployments?: pulumi.Input<pulumi.Input<inputs.ProjectDeployment>[]>;
    /**
     * Detailed description of the resource group.
     */
    description?: pulumi.Input<string>;
    /**
     * Edgeview policy on devices of this project
     */
    edgeviewPolicies?: pulumi.Input<pulumi.Input<inputs.ProjectEdgeviewPolicy>[]>;
    /**
     * Local operator console policy on devices of this project
     */
    localOperatorConsolePolicies?: pulumi.Input<pulumi.Input<inputs.ProjectLocalOperatorConsolePolicy>[]>;
    /**
     * User defined name of the resource group, unique across the enterprise. Once resource group is created, name can’t be
     * changed.
     */
    name?: pulumi.Input<string>;
    /**
     * Network policy to enforce on all devices of this project
     */
    networkPolicies?: pulumi.Input<pulumi.Input<inputs.ProjectNetworkPolicy>[]>;
    /**
     * User defined title of the resource group. Title can be changed at any time.
     */
    title: pulumi.Input<string>;
    /**
     * Resource group type
     */
    type: pulumi.Input<string>;
}
