// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNetworkInstance(args: GetNetworkInstanceArgs, opts?: pulumi.InvokeOptions): Promise<GetNetworkInstanceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zedcloud:index/getNetworkInstance:getNetworkInstance", {
        "clusterId": args.clusterId,
        "description": args.description,
        "deviceDefault": args.deviceDefault,
        "deviceId": args.deviceId,
        "dhcp": args.dhcp,
        "dnsLists": args.dnsLists,
        "ips": args.ips,
        "kind": args.kind,
        "name": args.name,
        "networkPolicyId": args.networkPolicyId,
        "oconfig": args.oconfig,
        "opaques": args.opaques,
        "port": args.port,
        "portTags": args.portTags,
        "projectId": args.projectId,
        "tags": args.tags,
        "title": args.title,
        "type": args.type,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNetworkInstance.
 */
export interface GetNetworkInstanceArgs {
    clusterId?: string;
    description?: string;
    deviceDefault?: boolean;
    deviceId: string;
    dhcp?: boolean;
    dnsLists?: inputs.GetNetworkInstanceDnsList[];
    ips?: inputs.GetNetworkInstanceIp[];
    kind: string;
    name: string;
    networkPolicyId?: string;
    oconfig?: string;
    opaques?: inputs.GetNetworkInstanceOpaque[];
    port?: string;
    portTags?: {[key: string]: string};
    projectId?: string;
    tags?: {[key: string]: string};
    title: string;
    type?: string;
}

/**
 * A collection of values returned by getNetworkInstance.
 */
export interface GetNetworkInstanceResult {
    readonly clusterId?: string;
    readonly description?: string;
    readonly deviceDefault?: boolean;
    readonly deviceId: string;
    readonly dhcp?: boolean;
    readonly dnsLists?: outputs.GetNetworkInstanceDnsList[];
    readonly id: string;
    readonly ips?: outputs.GetNetworkInstanceIp[];
    readonly kind: string;
    readonly lisps: outputs.GetNetworkInstanceLisp[];
    readonly name: string;
    readonly networkPolicyId?: string;
    readonly oconfig?: string;
    readonly opaques?: outputs.GetNetworkInstanceOpaque[];
    readonly port?: string;
    readonly portTags?: {[key: string]: string};
    readonly projectId: string;
    readonly revisions: outputs.GetNetworkInstanceRevision[];
    readonly tags?: {[key: string]: string};
    readonly title: string;
    readonly type: string;
}
export function getNetworkInstanceOutput(args: GetNetworkInstanceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetworkInstanceResult> {
    return pulumi.output(args).apply((a: any) => getNetworkInstance(a, opts))
}

/**
 * A collection of arguments for invoking getNetworkInstance.
 */
export interface GetNetworkInstanceOutputArgs {
    clusterId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    deviceDefault?: pulumi.Input<boolean>;
    deviceId: pulumi.Input<string>;
    dhcp?: pulumi.Input<boolean>;
    dnsLists?: pulumi.Input<pulumi.Input<inputs.GetNetworkInstanceDnsListArgs>[]>;
    ips?: pulumi.Input<pulumi.Input<inputs.GetNetworkInstanceIpArgs>[]>;
    kind: pulumi.Input<string>;
    name: pulumi.Input<string>;
    networkPolicyId?: pulumi.Input<string>;
    oconfig?: pulumi.Input<string>;
    opaques?: pulumi.Input<pulumi.Input<inputs.GetNetworkInstanceOpaqueArgs>[]>;
    port?: pulumi.Input<string>;
    portTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    projectId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    title: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}
