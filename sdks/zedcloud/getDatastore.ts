// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDatastore(args: GetDatastoreArgs, opts?: pulumi.InvokeOptions): Promise<GetDatastoreResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zedcloud:index/getDatastore:getDatastore", {
        "apiKey": args.apiKey,
        "certificateChains": args.certificateChains,
        "description": args.description,
        "dsFqdn": args.dsFqdn,
        "dsPath": args.dsPath,
        "dsStatus": args.dsStatus,
        "dsType": args.dsType,
        "name": args.name,
        "needClearText": args.needClearText,
        "projectAccessLists": args.projectAccessLists,
        "region": args.region,
        "revisions": args.revisions,
        "secrets": args.secrets,
        "title": args.title,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDatastore.
 */
export interface GetDatastoreArgs {
    apiKey?: string;
    certificateChains?: inputs.GetDatastoreCertificateChain[];
    description?: string;
    dsFqdn: string;
    dsPath?: string;
    dsStatus?: string;
    dsType: string;
    name: string;
    needClearText?: boolean;
    projectAccessLists?: string[];
    region?: string;
    revisions?: inputs.GetDatastoreRevision[];
    secrets?: inputs.GetDatastoreSecret[];
    title: string;
}

/**
 * A collection of values returned by getDatastore.
 */
export interface GetDatastoreResult {
    readonly apiKey?: string;
    readonly certificateChains?: outputs.GetDatastoreCertificateChain[];
    readonly cryptoKey: string;
    readonly description?: string;
    readonly dsFqdn: string;
    readonly dsPath?: string;
    readonly dsStatus: string;
    readonly dsType: string;
    readonly encryptedSecrets: {[key: string]: string};
    readonly id: string;
    readonly name: string;
    readonly needClearText?: boolean;
    readonly originType: string;
    readonly projectAccessLists?: string[];
    readonly region?: string;
    readonly revisions?: outputs.GetDatastoreRevision[];
    readonly secrets?: outputs.GetDatastoreSecret[];
    readonly title: string;
}
export function getDatastoreOutput(args: GetDatastoreOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatastoreResult> {
    return pulumi.output(args).apply((a: any) => getDatastore(a, opts))
}

/**
 * A collection of arguments for invoking getDatastore.
 */
export interface GetDatastoreOutputArgs {
    apiKey?: pulumi.Input<string>;
    certificateChains?: pulumi.Input<pulumi.Input<inputs.GetDatastoreCertificateChainArgs>[]>;
    description?: pulumi.Input<string>;
    dsFqdn: pulumi.Input<string>;
    dsPath?: pulumi.Input<string>;
    dsStatus?: pulumi.Input<string>;
    dsType: pulumi.Input<string>;
    name: pulumi.Input<string>;
    needClearText?: pulumi.Input<boolean>;
    projectAccessLists?: pulumi.Input<pulumi.Input<string>[]>;
    region?: pulumi.Input<string>;
    revisions?: pulumi.Input<pulumi.Input<inputs.GetDatastoreRevisionArgs>[]>;
    secrets?: pulumi.Input<pulumi.Input<inputs.GetDatastoreSecretArgs>[]>;
    title: pulumi.Input<string>;
}
