// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVolumeInstance(args: GetVolumeInstanceArgs, opts?: pulumi.InvokeOptions): Promise<GetVolumeInstanceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zedcloud:index/getVolumeInstance:getVolumeInstance", {
        "accessmode": args.accessmode,
        "cleartext": args.cleartext,
        "contentTreeId": args.contentTreeId,
        "description": args.description,
        "deviceId": args.deviceId,
        "image": args.image,
        "implicit": args.implicit,
        "label": args.label,
        "multiattach": args.multiattach,
        "name": args.name,
        "projectId": args.projectId,
        "sizeBytes": args.sizeBytes,
        "tags": args.tags,
        "title": args.title,
        "type": args.type,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVolumeInstance.
 */
export interface GetVolumeInstanceArgs {
    accessmode?: string;
    cleartext?: boolean;
    contentTreeId?: string;
    description?: string;
    deviceId: string;
    image?: string;
    implicit?: boolean;
    label?: string;
    multiattach?: boolean;
    name: string;
    projectId?: string;
    sizeBytes?: string;
    tags?: {[key: string]: string};
    title: string;
    type: string;
}

/**
 * A collection of values returned by getVolumeInstance.
 */
export interface GetVolumeInstanceResult {
    readonly accessmode?: string;
    readonly cleartext?: boolean;
    readonly contentTreeId: string;
    readonly description?: string;
    readonly deviceId: string;
    readonly id: string;
    readonly image: string;
    readonly implicit?: boolean;
    readonly label?: string;
    readonly multiattach?: boolean;
    readonly name: string;
    readonly projectId: string;
    readonly revisions: outputs.GetVolumeInstanceRevision[];
    readonly sizeBytes?: string;
    readonly tags?: {[key: string]: string};
    readonly title: string;
    readonly type: string;
}
export function getVolumeInstanceOutput(args: GetVolumeInstanceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVolumeInstanceResult> {
    return pulumi.output(args).apply((a: any) => getVolumeInstance(a, opts))
}

/**
 * A collection of arguments for invoking getVolumeInstance.
 */
export interface GetVolumeInstanceOutputArgs {
    accessmode?: pulumi.Input<string>;
    cleartext?: pulumi.Input<boolean>;
    contentTreeId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    deviceId: pulumi.Input<string>;
    image?: pulumi.Input<string>;
    implicit?: pulumi.Input<boolean>;
    label?: pulumi.Input<string>;
    multiattach?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    sizeBytes?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    title: pulumi.Input<string>;
    type: pulumi.Input<string>;
}
