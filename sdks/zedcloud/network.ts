// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Network extends pulumi.CustomResource {
    /**
     * Get an existing Network resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkState, opts?: pulumi.CustomResourceOptions): Network {
        return new Network(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zedcloud:index/network:Network';

    /**
     * Returns true if the given object is an instance of Network.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Network {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Network.__pulumiType;
    }

    /**
     * Detailed description of the network
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly dnsLists!: pulumi.Output<outputs.NetworkDnsList[] | undefined>;
    public readonly enterpriseDefault!: pulumi.Output<boolean | undefined>;
    /**
     * IP configuration for the network
     */
    public readonly ips!: pulumi.Output<outputs.NetworkIp[] | undefined>;
    /**
     * Kind of network: NETWORK_KIND_V4 NETWORK_KIND_V6
     */
    public readonly kind!: pulumi.Output<string>;
    /**
     * User defined name of the network, unique across the enterprise. Once object is created, name can’t be changed
     */
    public readonly name!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<string>;
    /**
     * proxy block is used to configure network proxy settings. The following is a brief description of how to use the
     * attributes in the block: 1) If the proxy server requires certificates, set network_proxy_certs to carry the certificates
     * 2) To have the EdgeNode auto discover pacfile, set network_proxy to True 3) To configure EdgeNode to download the
     * pacfile from a specific URL: a) set network_proxy = false b) set network_proxy_url to the URL of the pac file 4) To
     * configure EdgeNode with the contents of the pacfile, set 'pacfile' to content of the pacfile. 5) To configure Proxy
     * setting manually instead of using a pacfile, use the 'proxy' and 'exceptions' blocks
     */
    public readonly proxies!: pulumi.Output<outputs.NetworkProxy[] | undefined>;
    /**
     * system defined info
     */
    public readonly revisions!: pulumi.Output<outputs.NetworkRevision[] | undefined>;
    /**
     * User defined title of the network. Title can be changed at any time
     */
    public readonly title!: pulumi.Output<string>;
    public readonly wirelesses!: pulumi.Output<outputs.NetworkWireless[] | undefined>;

    /**
     * Create a Network resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkArgs | NetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dnsLists"] = state ? state.dnsLists : undefined;
            resourceInputs["enterpriseDefault"] = state ? state.enterpriseDefault : undefined;
            resourceInputs["ips"] = state ? state.ips : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["proxies"] = state ? state.proxies : undefined;
            resourceInputs["revisions"] = state ? state.revisions : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["wirelesses"] = state ? state.wirelesses : undefined;
        } else {
            const args = argsOrState as NetworkArgs | undefined;
            if ((!args || args.kind === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kind'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dnsLists"] = args ? args.dnsLists : undefined;
            resourceInputs["enterpriseDefault"] = args ? args.enterpriseDefault : undefined;
            resourceInputs["ips"] = args ? args.ips : undefined;
            resourceInputs["kind"] = args ? args.kind : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["proxies"] = args ? args.proxies : undefined;
            resourceInputs["revisions"] = args ? args.revisions : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["wirelesses"] = args ? args.wirelesses : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Network.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Network resources.
 */
export interface NetworkState {
    /**
     * Detailed description of the network
     */
    description?: pulumi.Input<string>;
    dnsLists?: pulumi.Input<pulumi.Input<inputs.NetworkDnsList>[]>;
    enterpriseDefault?: pulumi.Input<boolean>;
    /**
     * IP configuration for the network
     */
    ips?: pulumi.Input<pulumi.Input<inputs.NetworkIp>[]>;
    /**
     * Kind of network: NETWORK_KIND_V4 NETWORK_KIND_V6
     */
    kind?: pulumi.Input<string>;
    /**
     * User defined name of the network, unique across the enterprise. Once object is created, name can’t be changed
     */
    name?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    /**
     * proxy block is used to configure network proxy settings. The following is a brief description of how to use the
     * attributes in the block: 1) If the proxy server requires certificates, set network_proxy_certs to carry the certificates
     * 2) To have the EdgeNode auto discover pacfile, set network_proxy to True 3) To configure EdgeNode to download the
     * pacfile from a specific URL: a) set network_proxy = false b) set network_proxy_url to the URL of the pac file 4) To
     * configure EdgeNode with the contents of the pacfile, set 'pacfile' to content of the pacfile. 5) To configure Proxy
     * setting manually instead of using a pacfile, use the 'proxy' and 'exceptions' blocks
     */
    proxies?: pulumi.Input<pulumi.Input<inputs.NetworkProxy>[]>;
    /**
     * system defined info
     */
    revisions?: pulumi.Input<pulumi.Input<inputs.NetworkRevision>[]>;
    /**
     * User defined title of the network. Title can be changed at any time
     */
    title?: pulumi.Input<string>;
    wirelesses?: pulumi.Input<pulumi.Input<inputs.NetworkWireless>[]>;
}

/**
 * The set of arguments for constructing a Network resource.
 */
export interface NetworkArgs {
    /**
     * Detailed description of the network
     */
    description?: pulumi.Input<string>;
    dnsLists?: pulumi.Input<pulumi.Input<inputs.NetworkDnsList>[]>;
    enterpriseDefault?: pulumi.Input<boolean>;
    /**
     * IP configuration for the network
     */
    ips?: pulumi.Input<pulumi.Input<inputs.NetworkIp>[]>;
    /**
     * Kind of network: NETWORK_KIND_V4 NETWORK_KIND_V6
     */
    kind: pulumi.Input<string>;
    /**
     * User defined name of the network, unique across the enterprise. Once object is created, name can’t be changed
     */
    name?: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    /**
     * proxy block is used to configure network proxy settings. The following is a brief description of how to use the
     * attributes in the block: 1) If the proxy server requires certificates, set network_proxy_certs to carry the certificates
     * 2) To have the EdgeNode auto discover pacfile, set network_proxy to True 3) To configure EdgeNode to download the
     * pacfile from a specific URL: a) set network_proxy = false b) set network_proxy_url to the URL of the pac file 4) To
     * configure EdgeNode with the contents of the pacfile, set 'pacfile' to content of the pacfile. 5) To configure Proxy
     * setting manually instead of using a pacfile, use the 'proxy' and 'exceptions' blocks
     */
    proxies?: pulumi.Input<pulumi.Input<inputs.NetworkProxy>[]>;
    /**
     * system defined info
     */
    revisions?: pulumi.Input<pulumi.Input<inputs.NetworkRevision>[]>;
    /**
     * User defined title of the network. Title can be changed at any time
     */
    title: pulumi.Input<string>;
    wirelesses?: pulumi.Input<pulumi.Input<inputs.NetworkWireless>[]>;
}
