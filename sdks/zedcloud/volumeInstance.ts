// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VolumeInstance extends pulumi.CustomResource {
    /**
     * Get an existing VolumeInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeInstanceState, opts?: pulumi.CustomResourceOptions): VolumeInstance {
        return new VolumeInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zedcloud:index/volumeInstance:VolumeInstance';

    /**
     * Returns true if the given object is an instance of VolumeInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VolumeInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VolumeInstance.__pulumiType;
    }

    /**
     * Access mode
     */
    public readonly accessmode!: pulumi.Output<string | undefined>;
    /**
     * flag to keep the contents of the volume unencrypted (in clear text)
     */
    public readonly cleartext!: pulumi.Output<boolean | undefined>;
    /**
     * content tree ID
     */
    public readonly contentTreeId!: pulumi.Output<string>;
    /**
     * Detailed description of the volume instance.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * id of the device on which volume instance is created
     */
    public readonly deviceId!: pulumi.Output<string>;
    /**
     * name of the image
     */
    public readonly image!: pulumi.Output<string>;
    /**
     * flag to create implicit volumes
     */
    public readonly implicit!: pulumi.Output<boolean | undefined>;
    /**
     * label
     */
    public readonly label!: pulumi.Output<string | undefined>;
    /**
     * flag to enable the volume to be attached to multiple app instances
     */
    public readonly multiattach!: pulumi.Output<boolean | undefined>;
    /**
     * User defined name of the volume instance, unique across the enterprise. Once object is created, name can’t be changed.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * id of the project in which the volume instance is created
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * system defined Revision info of the object
     */
    public /*out*/ readonly revisions!: pulumi.Output<outputs.VolumeInstanceRevision[]>;
    /**
     * size of volume
     */
    public readonly sizeBytes!: pulumi.Output<string | undefined>;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512
     * and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * User defined title of the volume instance. Title can be changed at any time.
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * type of Volume Instance
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a VolumeInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeInstanceArgs | VolumeInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumeInstanceState | undefined;
            resourceInputs["accessmode"] = state ? state.accessmode : undefined;
            resourceInputs["cleartext"] = state ? state.cleartext : undefined;
            resourceInputs["contentTreeId"] = state ? state.contentTreeId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceId"] = state ? state.deviceId : undefined;
            resourceInputs["image"] = state ? state.image : undefined;
            resourceInputs["implicit"] = state ? state.implicit : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["multiattach"] = state ? state.multiattach : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["revisions"] = state ? state.revisions : undefined;
            resourceInputs["sizeBytes"] = state ? state.sizeBytes : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as VolumeInstanceArgs | undefined;
            if ((!args || args.deviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deviceId'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["accessmode"] = args ? args.accessmode : undefined;
            resourceInputs["cleartext"] = args ? args.cleartext : undefined;
            resourceInputs["contentTreeId"] = args ? args.contentTreeId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["deviceId"] = args ? args.deviceId : undefined;
            resourceInputs["image"] = args ? args.image : undefined;
            resourceInputs["implicit"] = args ? args.implicit : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["multiattach"] = args ? args.multiattach : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["sizeBytes"] = args ? args.sizeBytes : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["revisions"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VolumeInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VolumeInstance resources.
 */
export interface VolumeInstanceState {
    /**
     * Access mode
     */
    accessmode?: pulumi.Input<string>;
    /**
     * flag to keep the contents of the volume unencrypted (in clear text)
     */
    cleartext?: pulumi.Input<boolean>;
    /**
     * content tree ID
     */
    contentTreeId?: pulumi.Input<string>;
    /**
     * Detailed description of the volume instance.
     */
    description?: pulumi.Input<string>;
    /**
     * id of the device on which volume instance is created
     */
    deviceId?: pulumi.Input<string>;
    /**
     * name of the image
     */
    image?: pulumi.Input<string>;
    /**
     * flag to create implicit volumes
     */
    implicit?: pulumi.Input<boolean>;
    /**
     * label
     */
    label?: pulumi.Input<string>;
    /**
     * flag to enable the volume to be attached to multiple app instances
     */
    multiattach?: pulumi.Input<boolean>;
    /**
     * User defined name of the volume instance, unique across the enterprise. Once object is created, name can’t be changed.
     */
    name?: pulumi.Input<string>;
    /**
     * id of the project in which the volume instance is created
     */
    projectId?: pulumi.Input<string>;
    /**
     * system defined Revision info of the object
     */
    revisions?: pulumi.Input<pulumi.Input<inputs.VolumeInstanceRevision>[]>;
    /**
     * size of volume
     */
    sizeBytes?: pulumi.Input<string>;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512
     * and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * User defined title of the volume instance. Title can be changed at any time.
     */
    title?: pulumi.Input<string>;
    /**
     * type of Volume Instance
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VolumeInstance resource.
 */
export interface VolumeInstanceArgs {
    /**
     * Access mode
     */
    accessmode?: pulumi.Input<string>;
    /**
     * flag to keep the contents of the volume unencrypted (in clear text)
     */
    cleartext?: pulumi.Input<boolean>;
    /**
     * content tree ID
     */
    contentTreeId?: pulumi.Input<string>;
    /**
     * Detailed description of the volume instance.
     */
    description?: pulumi.Input<string>;
    /**
     * id of the device on which volume instance is created
     */
    deviceId: pulumi.Input<string>;
    /**
     * name of the image
     */
    image?: pulumi.Input<string>;
    /**
     * flag to create implicit volumes
     */
    implicit?: pulumi.Input<boolean>;
    /**
     * label
     */
    label?: pulumi.Input<string>;
    /**
     * flag to enable the volume to be attached to multiple app instances
     */
    multiattach?: pulumi.Input<boolean>;
    /**
     * User defined name of the volume instance, unique across the enterprise. Once object is created, name can’t be changed.
     */
    name?: pulumi.Input<string>;
    /**
     * id of the project in which the volume instance is created
     */
    projectId?: pulumi.Input<string>;
    /**
     * size of volume
     */
    sizeBytes?: pulumi.Input<string>;
    /**
     * Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512
     * and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * User defined title of the volume instance. Title can be changed at any time.
     */
    title: pulumi.Input<string>;
    /**
     * type of Volume Instance
     */
    type: pulumi.Input<string>;
}
