// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEdgenode(args: GetEdgenodeArgs, opts?: pulumi.InvokeOptions): Promise<GetEdgenodeResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zedcloud:index/getEdgenode:getEdgenode", {
        "adminState": args.adminState,
        "assetId": args.assetId,
        "baseImages": args.baseImages,
        "baseOsRetryCounter": args.baseOsRetryCounter,
        "baseOsRetryTime": args.baseOsRetryTime,
        "clientIp": args.clientIp,
        "clusterId": args.clusterId,
        "configItems": args.configItems,
        "cpu": args.cpu,
        "defaultNetInsts": args.defaultNetInsts,
        "deploymentTag": args.deploymentTag,
        "deprecated": args.deprecated,
        "description": args.description,
        "devLocations": args.devLocations,
        "dlisps": args.dlisps,
        "edgeviewconfigs": args.edgeviewconfigs,
        "generateSoftSerial": args.generateSoftSerial,
        "identity": args.identity,
        "interfaces": args.interfaces,
        "location": args.location,
        "memory": args.memory,
        "modelId": args.modelId,
        "name": args.name,
        "onboardingKey": args.onboardingKey,
        "preparePowerOffCounter": args.preparePowerOffCounter,
        "preparePowerOffTime": args.preparePowerOffTime,
        "projectId": args.projectId,
        "resetCounter": args.resetCounter,
        "resetTime": args.resetTime,
        "revisions": args.revisions,
        "serialno": args.serialno,
        "sitePictures": args.sitePictures,
        "storage": args.storage,
        "tags": args.tags,
        "thread": args.thread,
        "title": args.title,
        "token": args.token,
        "utype": args.utype,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEdgenode.
 */
export interface GetEdgenodeArgs {
    adminState?: string;
    assetId?: string;
    baseImages?: inputs.GetEdgenodeBaseImage[];
    baseOsRetryCounter?: number;
    baseOsRetryTime?: string;
    clientIp?: string;
    clusterId?: string;
    configItems?: inputs.GetEdgenodeConfigItem[];
    cpu?: number;
    defaultNetInsts?: inputs.GetEdgenodeDefaultNetInst[];
    deploymentTag?: string;
    deprecated?: string;
    description?: string;
    devLocations?: inputs.GetEdgenodeDevLocation[];
    dlisps?: inputs.GetEdgenodeDlisp[];
    edgeviewconfigs?: inputs.GetEdgenodeEdgeviewconfig[];
    generateSoftSerial?: boolean;
    identity?: string;
    interfaces?: inputs.GetEdgenodeInterface[];
    location?: string;
    memory?: number;
    modelId: string;
    name: string;
    onboardingKey?: string;
    preparePowerOffCounter?: number;
    preparePowerOffTime?: string;
    projectId?: string;
    resetCounter?: number;
    resetTime?: string;
    revisions?: inputs.GetEdgenodeRevision[];
    serialno?: string;
    sitePictures?: string[];
    storage?: number;
    tags?: {[key: string]: string};
    thread?: number;
    title: string;
    token?: string;
    utype?: string;
}

/**
 * A collection of values returned by getEdgenode.
 */
export interface GetEdgenodeResult {
    readonly adminState?: string;
    readonly assetId?: string;
    readonly baseImages?: outputs.GetEdgenodeBaseImage[];
    readonly baseOsRetryCounter?: number;
    readonly baseOsRetryTime?: string;
    readonly clientIp?: string;
    readonly clusterId?: string;
    readonly configItems?: outputs.GetEdgenodeConfigItem[];
    readonly cpu?: number;
    readonly debugKnobs: outputs.GetEdgenodeDebugKnob[];
    readonly defaultNetInsts?: outputs.GetEdgenodeDefaultNetInst[];
    readonly deploymentTag?: string;
    readonly deprecated?: string;
    readonly description?: string;
    readonly devLocations?: outputs.GetEdgenodeDevLocation[];
    readonly dlisps?: outputs.GetEdgenodeDlisp[];
    readonly edgeviewconfigs?: outputs.GetEdgenodeEdgeviewconfig[];
    readonly generateSoftSerial?: boolean;
    readonly id: string;
    readonly identity: string;
    readonly interfaces?: outputs.GetEdgenodeInterface[];
    readonly location?: string;
    readonly memory?: number;
    readonly modelId: string;
    readonly name: string;
    readonly onboardingKey: string;
    readonly preparePowerOffCounter?: number;
    readonly preparePowerOffTime?: string;
    readonly projectId?: string;
    readonly resetCounter: number;
    readonly resetTime: string;
    readonly revisions?: outputs.GetEdgenodeRevision[];
    readonly serialno?: string;
    readonly sitePictures?: string[];
    readonly storage?: number;
    readonly tags?: {[key: string]: string};
    readonly thread?: number;
    readonly title: string;
    readonly token?: string;
    readonly utype: string;
}
export function getEdgenodeOutput(args: GetEdgenodeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEdgenodeResult> {
    return pulumi.output(args).apply((a: any) => getEdgenode(a, opts))
}

/**
 * A collection of arguments for invoking getEdgenode.
 */
export interface GetEdgenodeOutputArgs {
    adminState?: pulumi.Input<string>;
    assetId?: pulumi.Input<string>;
    baseImages?: pulumi.Input<pulumi.Input<inputs.GetEdgenodeBaseImageArgs>[]>;
    baseOsRetryCounter?: pulumi.Input<number>;
    baseOsRetryTime?: pulumi.Input<string>;
    clientIp?: pulumi.Input<string>;
    clusterId?: pulumi.Input<string>;
    configItems?: pulumi.Input<pulumi.Input<inputs.GetEdgenodeConfigItemArgs>[]>;
    cpu?: pulumi.Input<number>;
    defaultNetInsts?: pulumi.Input<pulumi.Input<inputs.GetEdgenodeDefaultNetInstArgs>[]>;
    deploymentTag?: pulumi.Input<string>;
    deprecated?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    devLocations?: pulumi.Input<pulumi.Input<inputs.GetEdgenodeDevLocationArgs>[]>;
    dlisps?: pulumi.Input<pulumi.Input<inputs.GetEdgenodeDlispArgs>[]>;
    edgeviewconfigs?: pulumi.Input<pulumi.Input<inputs.GetEdgenodeEdgeviewconfigArgs>[]>;
    generateSoftSerial?: pulumi.Input<boolean>;
    identity?: pulumi.Input<string>;
    interfaces?: pulumi.Input<pulumi.Input<inputs.GetEdgenodeInterfaceArgs>[]>;
    location?: pulumi.Input<string>;
    memory?: pulumi.Input<number>;
    modelId: pulumi.Input<string>;
    name: pulumi.Input<string>;
    onboardingKey?: pulumi.Input<string>;
    preparePowerOffCounter?: pulumi.Input<number>;
    preparePowerOffTime?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    resetCounter?: pulumi.Input<number>;
    resetTime?: pulumi.Input<string>;
    revisions?: pulumi.Input<pulumi.Input<inputs.GetEdgenodeRevisionArgs>[]>;
    serialno?: pulumi.Input<string>;
    sitePictures?: pulumi.Input<pulumi.Input<string>[]>;
    storage?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    thread?: pulumi.Input<number>;
    title: pulumi.Input<string>;
    token?: pulumi.Input<string>;
    utype?: pulumi.Input<string>;
}
