// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Datastore extends pulumi.CustomResource {
    /**
     * Get an existing Datastore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatastoreState, opts?: pulumi.CustomResourceOptions): Datastore {
        return new Datastore(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zedcloud:index/datastore:Datastore';

    /**
     * Returns true if the given object is an instance of Datastore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Datastore {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Datastore.__pulumiType;
    }

    public readonly apiKey!: pulumi.Output<string | undefined>;
    /**
     * Certificate chain of the certificate
     */
    public readonly certificateChains!: pulumi.Output<outputs.DatastoreCertificateChain[] | undefined>;
    /**
     * Internal - Encryption Key context
     */
    public /*out*/ readonly cryptoKey!: pulumi.Output<string>;
    /**
     * Detailed description of the datastore.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Datastore Fully Qualified Domain Name
     */
    public readonly dsFqdn!: pulumi.Output<string>;
    /**
     * Datastore relative path w.r.t. Datastore root
     */
    public readonly dsPath!: pulumi.Output<string | undefined>;
    /**
     * Datastore status
     */
    public readonly dsStatus!: pulumi.Output<string>;
    /**
     * Datastore type
     */
    public readonly dsType!: pulumi.Output<string>;
    /**
     * Internal - Encrypted sensitive data
     */
    public /*out*/ readonly encryptedSecrets!: pulumi.Output<{[key: string]: string}>;
    /**
     * User defined name of the datastore, unique across the enterprise. Once datastore is created, name can’t be changed.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * knob for sending creds in clear text
     */
    public readonly needClearText!: pulumi.Output<boolean | undefined>;
    /**
     * Origin type of datastore.
     */
    public /*out*/ readonly originType!: pulumi.Output<string>;
    /**
     * project access list of the datastore
     */
    public readonly projectAccessLists!: pulumi.Output<string[] | undefined>;
    /**
     * Datastore region - valid for AWS S3 and Azure BlobStorage
     */
    public readonly region!: pulumi.Output<string | undefined>;
    /**
     * Object revision details
     */
    public readonly revisions!: pulumi.Output<outputs.DatastoreRevision[] | undefined>;
    /**
     * Plain-text sensitive data
     */
    public readonly secrets!: pulumi.Output<outputs.DatastoreSecret[] | undefined>;
    /**
     * User defined title of the datastore. Title can be changed at any time.
     */
    public readonly title!: pulumi.Output<string>;

    /**
     * Create a Datastore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatastoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatastoreArgs | DatastoreState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatastoreState | undefined;
            resourceInputs["apiKey"] = state ? state.apiKey : undefined;
            resourceInputs["certificateChains"] = state ? state.certificateChains : undefined;
            resourceInputs["cryptoKey"] = state ? state.cryptoKey : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dsFqdn"] = state ? state.dsFqdn : undefined;
            resourceInputs["dsPath"] = state ? state.dsPath : undefined;
            resourceInputs["dsStatus"] = state ? state.dsStatus : undefined;
            resourceInputs["dsType"] = state ? state.dsType : undefined;
            resourceInputs["encryptedSecrets"] = state ? state.encryptedSecrets : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["needClearText"] = state ? state.needClearText : undefined;
            resourceInputs["originType"] = state ? state.originType : undefined;
            resourceInputs["projectAccessLists"] = state ? state.projectAccessLists : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["revisions"] = state ? state.revisions : undefined;
            resourceInputs["secrets"] = state ? state.secrets : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
        } else {
            const args = argsOrState as DatastoreArgs | undefined;
            if ((!args || args.dsFqdn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dsFqdn'");
            }
            if ((!args || args.dsType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dsType'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            resourceInputs["apiKey"] = args?.apiKey ? pulumi.secret(args.apiKey) : undefined;
            resourceInputs["certificateChains"] = args ? args.certificateChains : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dsFqdn"] = args ? args.dsFqdn : undefined;
            resourceInputs["dsPath"] = args ? args.dsPath : undefined;
            resourceInputs["dsStatus"] = args ? args.dsStatus : undefined;
            resourceInputs["dsType"] = args ? args.dsType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["needClearText"] = args ? args.needClearText : undefined;
            resourceInputs["projectAccessLists"] = args ? args.projectAccessLists : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["revisions"] = args ? args.revisions : undefined;
            resourceInputs["secrets"] = args ? args.secrets : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["cryptoKey"] = undefined /*out*/;
            resourceInputs["encryptedSecrets"] = undefined /*out*/;
            resourceInputs["originType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["apiKey", "encryptedSecrets"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Datastore.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Datastore resources.
 */
export interface DatastoreState {
    apiKey?: pulumi.Input<string>;
    /**
     * Certificate chain of the certificate
     */
    certificateChains?: pulumi.Input<pulumi.Input<inputs.DatastoreCertificateChain>[]>;
    /**
     * Internal - Encryption Key context
     */
    cryptoKey?: pulumi.Input<string>;
    /**
     * Detailed description of the datastore.
     */
    description?: pulumi.Input<string>;
    /**
     * Datastore Fully Qualified Domain Name
     */
    dsFqdn?: pulumi.Input<string>;
    /**
     * Datastore relative path w.r.t. Datastore root
     */
    dsPath?: pulumi.Input<string>;
    /**
     * Datastore status
     */
    dsStatus?: pulumi.Input<string>;
    /**
     * Datastore type
     */
    dsType?: pulumi.Input<string>;
    /**
     * Internal - Encrypted sensitive data
     */
    encryptedSecrets?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * User defined name of the datastore, unique across the enterprise. Once datastore is created, name can’t be changed.
     */
    name?: pulumi.Input<string>;
    /**
     * knob for sending creds in clear text
     */
    needClearText?: pulumi.Input<boolean>;
    /**
     * Origin type of datastore.
     */
    originType?: pulumi.Input<string>;
    /**
     * project access list of the datastore
     */
    projectAccessLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Datastore region - valid for AWS S3 and Azure BlobStorage
     */
    region?: pulumi.Input<string>;
    /**
     * Object revision details
     */
    revisions?: pulumi.Input<pulumi.Input<inputs.DatastoreRevision>[]>;
    /**
     * Plain-text sensitive data
     */
    secrets?: pulumi.Input<pulumi.Input<inputs.DatastoreSecret>[]>;
    /**
     * User defined title of the datastore. Title can be changed at any time.
     */
    title?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Datastore resource.
 */
export interface DatastoreArgs {
    apiKey?: pulumi.Input<string>;
    /**
     * Certificate chain of the certificate
     */
    certificateChains?: pulumi.Input<pulumi.Input<inputs.DatastoreCertificateChain>[]>;
    /**
     * Detailed description of the datastore.
     */
    description?: pulumi.Input<string>;
    /**
     * Datastore Fully Qualified Domain Name
     */
    dsFqdn: pulumi.Input<string>;
    /**
     * Datastore relative path w.r.t. Datastore root
     */
    dsPath?: pulumi.Input<string>;
    /**
     * Datastore status
     */
    dsStatus?: pulumi.Input<string>;
    /**
     * Datastore type
     */
    dsType: pulumi.Input<string>;
    /**
     * User defined name of the datastore, unique across the enterprise. Once datastore is created, name can’t be changed.
     */
    name?: pulumi.Input<string>;
    /**
     * knob for sending creds in clear text
     */
    needClearText?: pulumi.Input<boolean>;
    /**
     * project access list of the datastore
     */
    projectAccessLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Datastore region - valid for AWS S3 and Azure BlobStorage
     */
    region?: pulumi.Input<string>;
    /**
     * Object revision details
     */
    revisions?: pulumi.Input<pulumi.Input<inputs.DatastoreRevision>[]>;
    /**
     * Plain-text sensitive data
     */
    secrets?: pulumi.Input<pulumi.Input<inputs.DatastoreSecret>[]>;
    /**
     * User defined title of the datastore. Title can be changed at any time.
     */
    title: pulumi.Input<string>;
}
