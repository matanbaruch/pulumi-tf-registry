// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Schema extends pulumi.CustomResource {
    /**
     * Get an existing Schema resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SchemaState, opts?: pulumi.CustomResourceOptions): Schema {
        return new Schema(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'atlas:index/schema:Schema';

    /**
     * Returns true if the given object is an instance of Schema.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Schema {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Schema.__pulumiType;
    }

    /**
     * The url of the dev-db see https://atlasgo.io/cli/url
     */
    public readonly devUrl!: pulumi.Output<string | undefined>;
    public readonly diff!: pulumi.Output<outputs.SchemaDiff | undefined>;
    /**
     * Filter out resources matching the given glob pattern. See https://atlasgo.io/declarative/inspect#exclude-schemas
     */
    public readonly excludes!: pulumi.Output<string[] | undefined>;
    /**
     * The schema definition for the database (preferably normalized - see `atlas.Schema` data source)
     */
    public readonly hcl!: pulumi.Output<string>;
    /**
     * The transaction mode to use when applying the schema. See https://atlasgo.io/versioned/apply#transaction-configuration
     */
    public readonly txMode!: pulumi.Output<string | undefined>;
    /**
     * The url of the database see https://atlasgo.io/cli/url
     */
    public readonly url!: pulumi.Output<string>;

    /**
     * Create a Schema resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SchemaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SchemaArgs | SchemaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SchemaState | undefined;
            resourceInputs["devUrl"] = state ? state.devUrl : undefined;
            resourceInputs["diff"] = state ? state.diff : undefined;
            resourceInputs["excludes"] = state ? state.excludes : undefined;
            resourceInputs["hcl"] = state ? state.hcl : undefined;
            resourceInputs["txMode"] = state ? state.txMode : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as SchemaArgs | undefined;
            if ((!args || args.hcl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hcl'");
            }
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["devUrl"] = args?.devUrl ? pulumi.secret(args.devUrl) : undefined;
            resourceInputs["diff"] = args ? args.diff : undefined;
            resourceInputs["excludes"] = args ? args.excludes : undefined;
            resourceInputs["hcl"] = args ? args.hcl : undefined;
            resourceInputs["txMode"] = args ? args.txMode : undefined;
            resourceInputs["url"] = args?.url ? pulumi.secret(args.url) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["devUrl", "url"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Schema.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Schema resources.
 */
export interface SchemaState {
    /**
     * The url of the dev-db see https://atlasgo.io/cli/url
     */
    devUrl?: pulumi.Input<string>;
    diff?: pulumi.Input<inputs.SchemaDiff>;
    /**
     * Filter out resources matching the given glob pattern. See https://atlasgo.io/declarative/inspect#exclude-schemas
     */
    excludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The schema definition for the database (preferably normalized - see `atlas.Schema` data source)
     */
    hcl?: pulumi.Input<string>;
    /**
     * The transaction mode to use when applying the schema. See https://atlasgo.io/versioned/apply#transaction-configuration
     */
    txMode?: pulumi.Input<string>;
    /**
     * The url of the database see https://atlasgo.io/cli/url
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Schema resource.
 */
export interface SchemaArgs {
    /**
     * The url of the dev-db see https://atlasgo.io/cli/url
     */
    devUrl?: pulumi.Input<string>;
    diff?: pulumi.Input<inputs.SchemaDiff>;
    /**
     * Filter out resources matching the given glob pattern. See https://atlasgo.io/declarative/inspect#exclude-schemas
     */
    excludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The schema definition for the database (preferably normalized - see `atlas.Schema` data source)
     */
    hcl: pulumi.Input<string>;
    /**
     * The transaction mode to use when applying the schema. See https://atlasgo.io/versioned/apply#transaction-configuration
     */
    txMode?: pulumi.Input<string>;
    /**
     * The url of the database see https://atlasgo.io/cli/url
     */
    url: pulumi.Input<string>;
}
