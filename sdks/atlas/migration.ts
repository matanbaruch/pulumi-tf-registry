// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Migration extends pulumi.CustomResource {
    /**
     * Get an existing Migration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MigrationState, opts?: pulumi.CustomResourceOptions): Migration {
        return new Migration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'atlas:index/migration:Migration';

    /**
     * Returns true if the given object is an instance of Migration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Migration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Migration.__pulumiType;
    }

    /**
     * An optional version to start the migration history from. See https://atlasgo.io/versioned/apply#existing-databases
     */
    public readonly baseline!: pulumi.Output<string | undefined>;
    public readonly cloud!: pulumi.Output<outputs.MigrationCloud | undefined>;
    /**
     * The url of the dev-db see https://atlasgo.io/cli/url
     */
    public readonly devUrl!: pulumi.Output<string | undefined>;
    /**
     * the URL of the migration directory. dir or remote_dir block is required
     */
    public readonly dir!: pulumi.Output<string | undefined>;
    /**
     * The name of the environment used for reporting runs to Atlas Cloud. Default: tf
     */
    public readonly envName!: pulumi.Output<string | undefined>;
    /**
     * How Atlas computes and executes pending migration files to the database. One of `linear`,`linear-skip` or `non-linear`.
     * See https://atlasgo.io/versioned/apply#execution-order
     */
    public readonly execOrder!: pulumi.Output<string | undefined>;
    public readonly remoteDir!: pulumi.Output<outputs.MigrationRemoteDir | undefined>;
    /**
     * The name of the schema the revisions table resides in
     */
    public readonly revisionsSchema!: pulumi.Output<string | undefined>;
    /**
     * The status of the migration
     */
    public /*out*/ readonly status!: pulumi.Output<outputs.MigrationStatus>;
    /**
     * The url of the database see https://atlasgo.io/cli/url
     */
    public readonly url!: pulumi.Output<string>;
    /**
     * The version of the migration to apply, if not specified the latest version will be applied
     */
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a Migration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MigrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MigrationArgs | MigrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MigrationState | undefined;
            resourceInputs["baseline"] = state ? state.baseline : undefined;
            resourceInputs["cloud"] = state ? state.cloud : undefined;
            resourceInputs["devUrl"] = state ? state.devUrl : undefined;
            resourceInputs["dir"] = state ? state.dir : undefined;
            resourceInputs["envName"] = state ? state.envName : undefined;
            resourceInputs["execOrder"] = state ? state.execOrder : undefined;
            resourceInputs["remoteDir"] = state ? state.remoteDir : undefined;
            resourceInputs["revisionsSchema"] = state ? state.revisionsSchema : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as MigrationArgs | undefined;
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["baseline"] = args ? args.baseline : undefined;
            resourceInputs["cloud"] = args ? args.cloud : undefined;
            resourceInputs["devUrl"] = args?.devUrl ? pulumi.secret(args.devUrl) : undefined;
            resourceInputs["dir"] = args ? args.dir : undefined;
            resourceInputs["envName"] = args ? args.envName : undefined;
            resourceInputs["execOrder"] = args ? args.execOrder : undefined;
            resourceInputs["remoteDir"] = args ? args.remoteDir : undefined;
            resourceInputs["revisionsSchema"] = args ? args.revisionsSchema : undefined;
            resourceInputs["url"] = args?.url ? pulumi.secret(args.url) : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["devUrl", "url"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Migration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Migration resources.
 */
export interface MigrationState {
    /**
     * An optional version to start the migration history from. See https://atlasgo.io/versioned/apply#existing-databases
     */
    baseline?: pulumi.Input<string>;
    cloud?: pulumi.Input<inputs.MigrationCloud>;
    /**
     * The url of the dev-db see https://atlasgo.io/cli/url
     */
    devUrl?: pulumi.Input<string>;
    /**
     * the URL of the migration directory. dir or remote_dir block is required
     */
    dir?: pulumi.Input<string>;
    /**
     * The name of the environment used for reporting runs to Atlas Cloud. Default: tf
     */
    envName?: pulumi.Input<string>;
    /**
     * How Atlas computes and executes pending migration files to the database. One of `linear`,`linear-skip` or `non-linear`.
     * See https://atlasgo.io/versioned/apply#execution-order
     */
    execOrder?: pulumi.Input<string>;
    remoteDir?: pulumi.Input<inputs.MigrationRemoteDir>;
    /**
     * The name of the schema the revisions table resides in
     */
    revisionsSchema?: pulumi.Input<string>;
    /**
     * The status of the migration
     */
    status?: pulumi.Input<inputs.MigrationStatus>;
    /**
     * The url of the database see https://atlasgo.io/cli/url
     */
    url?: pulumi.Input<string>;
    /**
     * The version of the migration to apply, if not specified the latest version will be applied
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Migration resource.
 */
export interface MigrationArgs {
    /**
     * An optional version to start the migration history from. See https://atlasgo.io/versioned/apply#existing-databases
     */
    baseline?: pulumi.Input<string>;
    cloud?: pulumi.Input<inputs.MigrationCloud>;
    /**
     * The url of the dev-db see https://atlasgo.io/cli/url
     */
    devUrl?: pulumi.Input<string>;
    /**
     * the URL of the migration directory. dir or remote_dir block is required
     */
    dir?: pulumi.Input<string>;
    /**
     * The name of the environment used for reporting runs to Atlas Cloud. Default: tf
     */
    envName?: pulumi.Input<string>;
    /**
     * How Atlas computes and executes pending migration files to the database. One of `linear`,`linear-skip` or `non-linear`.
     * See https://atlasgo.io/versioned/apply#execution-order
     */
    execOrder?: pulumi.Input<string>;
    remoteDir?: pulumi.Input<inputs.MigrationRemoteDir>;
    /**
     * The name of the schema the revisions table resides in
     */
    revisionsSchema?: pulumi.Input<string>;
    /**
     * The url of the database see https://atlasgo.io/cli/url
     */
    url: pulumi.Input<string>;
    /**
     * The version of the migration to apply, if not specified the latest version will be applied
     */
    version?: pulumi.Input<string>;
}
