// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Usersource extends pulumi.CustomResource {
    /**
     * Get an existing Usersource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UsersourceState, opts?: pulumi.CustomResourceOptions): Usersource {
        return new Usersource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortitokencloud:index/usersource:Usersource';

    /**
     * Returns true if the given object is an instance of Usersource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Usersource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Usersource.__pulumiType;
    }

    public readonly attrMapping!: pulumi.Output<string>;
    public readonly authUri!: pulumi.Output<string>;
    public readonly clientId!: pulumi.Output<string>;
    public readonly clientSecret!: pulumi.Output<string>;
    public readonly domainIds!: pulumi.Output<string[]>;
    public readonly entityId!: pulumi.Output<string>;
    public readonly includeSubject!: pulumi.Output<boolean>;
    public readonly issuer!: pulumi.Output<string>;
    public readonly loginHint!: pulumi.Output<string>;
    public readonly loginUrl!: pulumi.Output<string>;
    public readonly logoutUri!: pulumi.Output<string>;
    public readonly logoutUrl!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly postBinding!: pulumi.Output<boolean>;
    public /*out*/ readonly prefix!: pulumi.Output<string>;
    public /*out*/ readonly proxyAcsUrl!: pulumi.Output<string>;
    public /*out*/ readonly proxyCallbackUrl!: pulumi.Output<string>;
    public /*out*/ readonly proxyEntityId!: pulumi.Output<string>;
    public /*out*/ readonly proxyOidcLoginUrl!: pulumi.Output<string>;
    public /*out*/ readonly proxyPostLogoutRedirectUri!: pulumi.Output<string>;
    public /*out*/ readonly proxySloUrl!: pulumi.Output<string>;
    public /*out*/ readonly proxySsoUrl!: pulumi.Output<string>;
    public readonly realmId!: pulumi.Output<string>;
    public readonly tokenUri!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public readonly userinfoUri!: pulumi.Output<string>;
    public readonly usernameAssertion!: pulumi.Output<string>;

    /**
     * Create a Usersource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UsersourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UsersourceArgs | UsersourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UsersourceState | undefined;
            resourceInputs["attrMapping"] = state ? state.attrMapping : undefined;
            resourceInputs["authUri"] = state ? state.authUri : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["clientSecret"] = state ? state.clientSecret : undefined;
            resourceInputs["domainIds"] = state ? state.domainIds : undefined;
            resourceInputs["entityId"] = state ? state.entityId : undefined;
            resourceInputs["includeSubject"] = state ? state.includeSubject : undefined;
            resourceInputs["issuer"] = state ? state.issuer : undefined;
            resourceInputs["loginHint"] = state ? state.loginHint : undefined;
            resourceInputs["loginUrl"] = state ? state.loginUrl : undefined;
            resourceInputs["logoutUri"] = state ? state.logoutUri : undefined;
            resourceInputs["logoutUrl"] = state ? state.logoutUrl : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["postBinding"] = state ? state.postBinding : undefined;
            resourceInputs["prefix"] = state ? state.prefix : undefined;
            resourceInputs["proxyAcsUrl"] = state ? state.proxyAcsUrl : undefined;
            resourceInputs["proxyCallbackUrl"] = state ? state.proxyCallbackUrl : undefined;
            resourceInputs["proxyEntityId"] = state ? state.proxyEntityId : undefined;
            resourceInputs["proxyOidcLoginUrl"] = state ? state.proxyOidcLoginUrl : undefined;
            resourceInputs["proxyPostLogoutRedirectUri"] = state ? state.proxyPostLogoutRedirectUri : undefined;
            resourceInputs["proxySloUrl"] = state ? state.proxySloUrl : undefined;
            resourceInputs["proxySsoUrl"] = state ? state.proxySsoUrl : undefined;
            resourceInputs["realmId"] = state ? state.realmId : undefined;
            resourceInputs["tokenUri"] = state ? state.tokenUri : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["userinfoUri"] = state ? state.userinfoUri : undefined;
            resourceInputs["usernameAssertion"] = state ? state.usernameAssertion : undefined;
        } else {
            const args = argsOrState as UsersourceArgs | undefined;
            if ((!args || args.realmId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'realmId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["attrMapping"] = args ? args.attrMapping : undefined;
            resourceInputs["authUri"] = args ? args.authUri : undefined;
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["clientSecret"] = args ? args.clientSecret : undefined;
            resourceInputs["domainIds"] = args ? args.domainIds : undefined;
            resourceInputs["entityId"] = args ? args.entityId : undefined;
            resourceInputs["includeSubject"] = args ? args.includeSubject : undefined;
            resourceInputs["issuer"] = args ? args.issuer : undefined;
            resourceInputs["loginHint"] = args ? args.loginHint : undefined;
            resourceInputs["loginUrl"] = args ? args.loginUrl : undefined;
            resourceInputs["logoutUri"] = args ? args.logoutUri : undefined;
            resourceInputs["logoutUrl"] = args ? args.logoutUrl : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["postBinding"] = args ? args.postBinding : undefined;
            resourceInputs["realmId"] = args ? args.realmId : undefined;
            resourceInputs["tokenUri"] = args ? args.tokenUri : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["userinfoUri"] = args ? args.userinfoUri : undefined;
            resourceInputs["usernameAssertion"] = args ? args.usernameAssertion : undefined;
            resourceInputs["prefix"] = undefined /*out*/;
            resourceInputs["proxyAcsUrl"] = undefined /*out*/;
            resourceInputs["proxyCallbackUrl"] = undefined /*out*/;
            resourceInputs["proxyEntityId"] = undefined /*out*/;
            resourceInputs["proxyOidcLoginUrl"] = undefined /*out*/;
            resourceInputs["proxyPostLogoutRedirectUri"] = undefined /*out*/;
            resourceInputs["proxySloUrl"] = undefined /*out*/;
            resourceInputs["proxySsoUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Usersource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Usersource resources.
 */
export interface UsersourceState {
    attrMapping?: pulumi.Input<string>;
    authUri?: pulumi.Input<string>;
    clientId?: pulumi.Input<string>;
    clientSecret?: pulumi.Input<string>;
    domainIds?: pulumi.Input<pulumi.Input<string>[]>;
    entityId?: pulumi.Input<string>;
    includeSubject?: pulumi.Input<boolean>;
    issuer?: pulumi.Input<string>;
    loginHint?: pulumi.Input<string>;
    loginUrl?: pulumi.Input<string>;
    logoutUri?: pulumi.Input<string>;
    logoutUrl?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    postBinding?: pulumi.Input<boolean>;
    prefix?: pulumi.Input<string>;
    proxyAcsUrl?: pulumi.Input<string>;
    proxyCallbackUrl?: pulumi.Input<string>;
    proxyEntityId?: pulumi.Input<string>;
    proxyOidcLoginUrl?: pulumi.Input<string>;
    proxyPostLogoutRedirectUri?: pulumi.Input<string>;
    proxySloUrl?: pulumi.Input<string>;
    proxySsoUrl?: pulumi.Input<string>;
    realmId?: pulumi.Input<string>;
    tokenUri?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    userinfoUri?: pulumi.Input<string>;
    usernameAssertion?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Usersource resource.
 */
export interface UsersourceArgs {
    attrMapping?: pulumi.Input<string>;
    authUri?: pulumi.Input<string>;
    clientId?: pulumi.Input<string>;
    clientSecret?: pulumi.Input<string>;
    domainIds?: pulumi.Input<pulumi.Input<string>[]>;
    entityId?: pulumi.Input<string>;
    includeSubject?: pulumi.Input<boolean>;
    issuer?: pulumi.Input<string>;
    loginHint?: pulumi.Input<string>;
    loginUrl?: pulumi.Input<string>;
    logoutUri?: pulumi.Input<string>;
    logoutUrl?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    postBinding?: pulumi.Input<boolean>;
    realmId: pulumi.Input<string>;
    tokenUri?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    userinfoUri?: pulumi.Input<string>;
    usernameAssertion?: pulumi.Input<string>;
}
