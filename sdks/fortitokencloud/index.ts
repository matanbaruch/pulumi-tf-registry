// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ApplicationArgs, ApplicationState } from "./application";
export type Application = import("./application").Application;
export const Application: typeof import("./application").Application = null as any;
utilities.lazyLoad(exports, ["Application"], () => require("./application"));

export { DomainArgs, DomainState } from "./domain";
export type Domain = import("./domain").Domain;
export const Domain: typeof import("./domain").Domain = null as any;
utilities.lazyLoad(exports, ["Domain"], () => require("./domain"));

export { GetApplicationsResult } from "./getApplications";
export const getApplications: typeof import("./getApplications").getApplications = null as any;
export const getApplicationsOutput: typeof import("./getApplications").getApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getApplications","getApplicationsOutput"], () => require("./getApplications"));

export { GetRealmArgs, GetRealmResult, GetRealmOutputArgs } from "./getRealm";
export const getRealm: typeof import("./getRealm").getRealm = null as any;
export const getRealmOutput: typeof import("./getRealm").getRealmOutput = null as any;
utilities.lazyLoad(exports, ["getRealm","getRealmOutput"], () => require("./getRealm"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { UsersourceArgs, UsersourceState } from "./usersource";
export type Usersource = import("./usersource").Usersource;
export const Usersource: typeof import("./usersource").Usersource = null as any;
utilities.lazyLoad(exports, ["Usersource"], () => require("./usersource"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "fortitokencloud:index/application:Application":
                return new Application(name, <any>undefined, { urn })
            case "fortitokencloud:index/domain:Domain":
                return new Domain(name, <any>undefined, { urn })
            case "fortitokencloud:index/usersource:Usersource":
                return new Usersource(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("fortitokencloud", "index/application", _module)
pulumi.runtime.registerResourceModule("fortitokencloud", "index/domain", _module)
pulumi.runtime.registerResourceModule("fortitokencloud", "index/usersource", _module)
pulumi.runtime.registerResourcePackage("fortitokencloud", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:fortitokencloud") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
