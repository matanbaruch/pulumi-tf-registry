// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VirtualMachine extends pulumi.CustomResource {
    /**
     * Get an existing VirtualMachine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualMachineState, opts?: pulumi.CustomResourceOptions): VirtualMachine {
        return new VirtualMachine(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurestack:index/virtualMachine:VirtualMachine';

    /**
     * Returns true if the given object is an instance of VirtualMachine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualMachine {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualMachine.__pulumiType;
    }

    public readonly availabilitySetId!: pulumi.Output<string>;
    public readonly bootDiagnostics!: pulumi.Output<outputs.VirtualMachineBootDiagnostics | undefined>;
    public readonly deleteDataDisksOnTermination!: pulumi.Output<boolean | undefined>;
    public readonly deleteOsDiskOnTermination!: pulumi.Output<boolean | undefined>;
    public readonly identity!: pulumi.Output<outputs.VirtualMachineIdentity | undefined>;
    public readonly licenseType!: pulumi.Output<string>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkInterfaceIds!: pulumi.Output<string[]>;
    public readonly osProfile!: pulumi.Output<outputs.VirtualMachineOsProfile | undefined>;
    public readonly osProfileLinuxConfig!: pulumi.Output<outputs.VirtualMachineOsProfileLinuxConfig | undefined>;
    public readonly osProfileSecrets!: pulumi.Output<outputs.VirtualMachineOsProfileSecret[] | undefined>;
    public readonly osProfileWindowsConfig!: pulumi.Output<outputs.VirtualMachineOsProfileWindowsConfig | undefined>;
    public readonly plan!: pulumi.Output<outputs.VirtualMachinePlan | undefined>;
    public readonly primaryNetworkInterfaceId!: pulumi.Output<string | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly storageDataDisks!: pulumi.Output<outputs.VirtualMachineStorageDataDisk[] | undefined>;
    public readonly storageImageReference!: pulumi.Output<outputs.VirtualMachineStorageImageReference | undefined>;
    public readonly storageOsDisk!: pulumi.Output<outputs.VirtualMachineStorageOsDisk>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.VirtualMachineTimeouts | undefined>;
    public readonly vmSize!: pulumi.Output<string>;
    public readonly zones!: pulumi.Output<string[] | undefined>;

    /**
     * Create a VirtualMachine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualMachineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualMachineArgs | VirtualMachineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualMachineState | undefined;
            resourceInputs["availabilitySetId"] = state ? state.availabilitySetId : undefined;
            resourceInputs["bootDiagnostics"] = state ? state.bootDiagnostics : undefined;
            resourceInputs["deleteDataDisksOnTermination"] = state ? state.deleteDataDisksOnTermination : undefined;
            resourceInputs["deleteOsDiskOnTermination"] = state ? state.deleteOsDiskOnTermination : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["licenseType"] = state ? state.licenseType : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkInterfaceIds"] = state ? state.networkInterfaceIds : undefined;
            resourceInputs["osProfile"] = state ? state.osProfile : undefined;
            resourceInputs["osProfileLinuxConfig"] = state ? state.osProfileLinuxConfig : undefined;
            resourceInputs["osProfileSecrets"] = state ? state.osProfileSecrets : undefined;
            resourceInputs["osProfileWindowsConfig"] = state ? state.osProfileWindowsConfig : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["primaryNetworkInterfaceId"] = state ? state.primaryNetworkInterfaceId : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["storageDataDisks"] = state ? state.storageDataDisks : undefined;
            resourceInputs["storageImageReference"] = state ? state.storageImageReference : undefined;
            resourceInputs["storageOsDisk"] = state ? state.storageOsDisk : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vmSize"] = state ? state.vmSize : undefined;
            resourceInputs["zones"] = state ? state.zones : undefined;
        } else {
            const args = argsOrState as VirtualMachineArgs | undefined;
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.networkInterfaceIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkInterfaceIds'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.storageOsDisk === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageOsDisk'");
            }
            if ((!args || args.vmSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmSize'");
            }
            resourceInputs["availabilitySetId"] = args ? args.availabilitySetId : undefined;
            resourceInputs["bootDiagnostics"] = args ? args.bootDiagnostics : undefined;
            resourceInputs["deleteDataDisksOnTermination"] = args ? args.deleteDataDisksOnTermination : undefined;
            resourceInputs["deleteOsDiskOnTermination"] = args ? args.deleteOsDiskOnTermination : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["licenseType"] = args ? args.licenseType : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkInterfaceIds"] = args ? args.networkInterfaceIds : undefined;
            resourceInputs["osProfile"] = args ? args.osProfile : undefined;
            resourceInputs["osProfileLinuxConfig"] = args ? args.osProfileLinuxConfig : undefined;
            resourceInputs["osProfileSecrets"] = args ? args.osProfileSecrets : undefined;
            resourceInputs["osProfileWindowsConfig"] = args ? args.osProfileWindowsConfig : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["primaryNetworkInterfaceId"] = args ? args.primaryNetworkInterfaceId : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["storageDataDisks"] = args ? args.storageDataDisks : undefined;
            resourceInputs["storageImageReference"] = args ? args.storageImageReference : undefined;
            resourceInputs["storageOsDisk"] = args ? args.storageOsDisk : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vmSize"] = args ? args.vmSize : undefined;
            resourceInputs["zones"] = args ? args.zones : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VirtualMachine.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VirtualMachine resources.
 */
export interface VirtualMachineState {
    availabilitySetId?: pulumi.Input<string>;
    bootDiagnostics?: pulumi.Input<inputs.VirtualMachineBootDiagnostics>;
    deleteDataDisksOnTermination?: pulumi.Input<boolean>;
    deleteOsDiskOnTermination?: pulumi.Input<boolean>;
    identity?: pulumi.Input<inputs.VirtualMachineIdentity>;
    licenseType?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkInterfaceIds?: pulumi.Input<pulumi.Input<string>[]>;
    osProfile?: pulumi.Input<inputs.VirtualMachineOsProfile>;
    osProfileLinuxConfig?: pulumi.Input<inputs.VirtualMachineOsProfileLinuxConfig>;
    osProfileSecrets?: pulumi.Input<pulumi.Input<inputs.VirtualMachineOsProfileSecret>[]>;
    osProfileWindowsConfig?: pulumi.Input<inputs.VirtualMachineOsProfileWindowsConfig>;
    plan?: pulumi.Input<inputs.VirtualMachinePlan>;
    primaryNetworkInterfaceId?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    storageDataDisks?: pulumi.Input<pulumi.Input<inputs.VirtualMachineStorageDataDisk>[]>;
    storageImageReference?: pulumi.Input<inputs.VirtualMachineStorageImageReference>;
    storageOsDisk?: pulumi.Input<inputs.VirtualMachineStorageOsDisk>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.VirtualMachineTimeouts>;
    vmSize?: pulumi.Input<string>;
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a VirtualMachine resource.
 */
export interface VirtualMachineArgs {
    availabilitySetId?: pulumi.Input<string>;
    bootDiagnostics?: pulumi.Input<inputs.VirtualMachineBootDiagnostics>;
    deleteDataDisksOnTermination?: pulumi.Input<boolean>;
    deleteOsDiskOnTermination?: pulumi.Input<boolean>;
    identity?: pulumi.Input<inputs.VirtualMachineIdentity>;
    licenseType?: pulumi.Input<string>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkInterfaceIds: pulumi.Input<pulumi.Input<string>[]>;
    osProfile?: pulumi.Input<inputs.VirtualMachineOsProfile>;
    osProfileLinuxConfig?: pulumi.Input<inputs.VirtualMachineOsProfileLinuxConfig>;
    osProfileSecrets?: pulumi.Input<pulumi.Input<inputs.VirtualMachineOsProfileSecret>[]>;
    osProfileWindowsConfig?: pulumi.Input<inputs.VirtualMachineOsProfileWindowsConfig>;
    plan?: pulumi.Input<inputs.VirtualMachinePlan>;
    primaryNetworkInterfaceId?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    storageDataDisks?: pulumi.Input<pulumi.Input<inputs.VirtualMachineStorageDataDisk>[]>;
    storageImageReference?: pulumi.Input<inputs.VirtualMachineStorageImageReference>;
    storageOsDisk: pulumi.Input<inputs.VirtualMachineStorageOsDisk>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.VirtualMachineTimeouts>;
    vmSize: pulumi.Input<string>;
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}
