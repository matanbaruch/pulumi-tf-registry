// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StorageAccount extends pulumi.CustomResource {
    /**
     * Get an existing StorageAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageAccountState, opts?: pulumi.CustomResourceOptions): StorageAccount {
        return new StorageAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurestack:index/storageAccount:StorageAccount';

    /**
     * Returns true if the given object is an instance of StorageAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageAccount.__pulumiType;
    }

    public readonly accountEncryptionSource!: pulumi.Output<string | undefined>;
    public readonly accountKind!: pulumi.Output<string | undefined>;
    public readonly accountReplicationType!: pulumi.Output<string>;
    public readonly accountTier!: pulumi.Output<string>;
    public readonly customDomain!: pulumi.Output<outputs.StorageAccountCustomDomain | undefined>;
    public readonly enableBlobEncryption!: pulumi.Output<boolean>;
    public readonly enableHttpsTrafficOnly!: pulumi.Output<boolean | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly primaryAccessKey!: pulumi.Output<string>;
    public /*out*/ readonly primaryBlobConnectionString!: pulumi.Output<string>;
    public /*out*/ readonly primaryBlobEndpoint!: pulumi.Output<string>;
    public /*out*/ readonly primaryConnectionString!: pulumi.Output<string>;
    public /*out*/ readonly primaryFileEndpoint!: pulumi.Output<string>;
    public /*out*/ readonly primaryLocation!: pulumi.Output<string>;
    public /*out*/ readonly primaryQueueEndpoint!: pulumi.Output<string>;
    public /*out*/ readonly primaryTableEndpoint!: pulumi.Output<string>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public /*out*/ readonly secondaryAccessKey!: pulumi.Output<string>;
    public /*out*/ readonly secondaryBlobConnectionString!: pulumi.Output<string>;
    public /*out*/ readonly secondaryBlobEndpoint!: pulumi.Output<string>;
    public /*out*/ readonly secondaryConnectionString!: pulumi.Output<string>;
    public /*out*/ readonly secondaryLocation!: pulumi.Output<string>;
    public /*out*/ readonly secondaryQueueEndpoint!: pulumi.Output<string>;
    public /*out*/ readonly secondaryTableEndpoint!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.StorageAccountTimeouts | undefined>;

    /**
     * Create a StorageAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageAccountArgs | StorageAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageAccountState | undefined;
            resourceInputs["accountEncryptionSource"] = state ? state.accountEncryptionSource : undefined;
            resourceInputs["accountKind"] = state ? state.accountKind : undefined;
            resourceInputs["accountReplicationType"] = state ? state.accountReplicationType : undefined;
            resourceInputs["accountTier"] = state ? state.accountTier : undefined;
            resourceInputs["customDomain"] = state ? state.customDomain : undefined;
            resourceInputs["enableBlobEncryption"] = state ? state.enableBlobEncryption : undefined;
            resourceInputs["enableHttpsTrafficOnly"] = state ? state.enableHttpsTrafficOnly : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["primaryAccessKey"] = state ? state.primaryAccessKey : undefined;
            resourceInputs["primaryBlobConnectionString"] = state ? state.primaryBlobConnectionString : undefined;
            resourceInputs["primaryBlobEndpoint"] = state ? state.primaryBlobEndpoint : undefined;
            resourceInputs["primaryConnectionString"] = state ? state.primaryConnectionString : undefined;
            resourceInputs["primaryFileEndpoint"] = state ? state.primaryFileEndpoint : undefined;
            resourceInputs["primaryLocation"] = state ? state.primaryLocation : undefined;
            resourceInputs["primaryQueueEndpoint"] = state ? state.primaryQueueEndpoint : undefined;
            resourceInputs["primaryTableEndpoint"] = state ? state.primaryTableEndpoint : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["secondaryAccessKey"] = state ? state.secondaryAccessKey : undefined;
            resourceInputs["secondaryBlobConnectionString"] = state ? state.secondaryBlobConnectionString : undefined;
            resourceInputs["secondaryBlobEndpoint"] = state ? state.secondaryBlobEndpoint : undefined;
            resourceInputs["secondaryConnectionString"] = state ? state.secondaryConnectionString : undefined;
            resourceInputs["secondaryLocation"] = state ? state.secondaryLocation : undefined;
            resourceInputs["secondaryQueueEndpoint"] = state ? state.secondaryQueueEndpoint : undefined;
            resourceInputs["secondaryTableEndpoint"] = state ? state.secondaryTableEndpoint : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as StorageAccountArgs | undefined;
            if ((!args || args.accountReplicationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountReplicationType'");
            }
            if ((!args || args.accountTier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountTier'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["accountEncryptionSource"] = args ? args.accountEncryptionSource : undefined;
            resourceInputs["accountKind"] = args ? args.accountKind : undefined;
            resourceInputs["accountReplicationType"] = args ? args.accountReplicationType : undefined;
            resourceInputs["accountTier"] = args ? args.accountTier : undefined;
            resourceInputs["customDomain"] = args ? args.customDomain : undefined;
            resourceInputs["enableBlobEncryption"] = args ? args.enableBlobEncryption : undefined;
            resourceInputs["enableHttpsTrafficOnly"] = args ? args.enableHttpsTrafficOnly : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["primaryAccessKey"] = undefined /*out*/;
            resourceInputs["primaryBlobConnectionString"] = undefined /*out*/;
            resourceInputs["primaryBlobEndpoint"] = undefined /*out*/;
            resourceInputs["primaryConnectionString"] = undefined /*out*/;
            resourceInputs["primaryFileEndpoint"] = undefined /*out*/;
            resourceInputs["primaryLocation"] = undefined /*out*/;
            resourceInputs["primaryQueueEndpoint"] = undefined /*out*/;
            resourceInputs["primaryTableEndpoint"] = undefined /*out*/;
            resourceInputs["secondaryAccessKey"] = undefined /*out*/;
            resourceInputs["secondaryBlobConnectionString"] = undefined /*out*/;
            resourceInputs["secondaryBlobEndpoint"] = undefined /*out*/;
            resourceInputs["secondaryConnectionString"] = undefined /*out*/;
            resourceInputs["secondaryLocation"] = undefined /*out*/;
            resourceInputs["secondaryQueueEndpoint"] = undefined /*out*/;
            resourceInputs["secondaryTableEndpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageAccount.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StorageAccount resources.
 */
export interface StorageAccountState {
    accountEncryptionSource?: pulumi.Input<string>;
    accountKind?: pulumi.Input<string>;
    accountReplicationType?: pulumi.Input<string>;
    accountTier?: pulumi.Input<string>;
    customDomain?: pulumi.Input<inputs.StorageAccountCustomDomain>;
    enableBlobEncryption?: pulumi.Input<boolean>;
    enableHttpsTrafficOnly?: pulumi.Input<boolean>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    primaryAccessKey?: pulumi.Input<string>;
    primaryBlobConnectionString?: pulumi.Input<string>;
    primaryBlobEndpoint?: pulumi.Input<string>;
    primaryConnectionString?: pulumi.Input<string>;
    primaryFileEndpoint?: pulumi.Input<string>;
    primaryLocation?: pulumi.Input<string>;
    primaryQueueEndpoint?: pulumi.Input<string>;
    primaryTableEndpoint?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    secondaryAccessKey?: pulumi.Input<string>;
    secondaryBlobConnectionString?: pulumi.Input<string>;
    secondaryBlobEndpoint?: pulumi.Input<string>;
    secondaryConnectionString?: pulumi.Input<string>;
    secondaryLocation?: pulumi.Input<string>;
    secondaryQueueEndpoint?: pulumi.Input<string>;
    secondaryTableEndpoint?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.StorageAccountTimeouts>;
}

/**
 * The set of arguments for constructing a StorageAccount resource.
 */
export interface StorageAccountArgs {
    accountEncryptionSource?: pulumi.Input<string>;
    accountKind?: pulumi.Input<string>;
    accountReplicationType: pulumi.Input<string>;
    accountTier: pulumi.Input<string>;
    customDomain?: pulumi.Input<inputs.StorageAccountCustomDomain>;
    enableBlobEncryption?: pulumi.Input<boolean>;
    enableHttpsTrafficOnly?: pulumi.Input<boolean>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.StorageAccountTimeouts>;
}
