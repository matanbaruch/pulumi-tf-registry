// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WindowsVirtualMachineScaleSet extends pulumi.CustomResource {
    /**
     * Get an existing WindowsVirtualMachineScaleSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WindowsVirtualMachineScaleSetState, opts?: pulumi.CustomResourceOptions): WindowsVirtualMachineScaleSet {
        return new WindowsVirtualMachineScaleSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurestack:index/windowsVirtualMachineScaleSet:WindowsVirtualMachineScaleSet';

    /**
     * Returns true if the given object is an instance of WindowsVirtualMachineScaleSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WindowsVirtualMachineScaleSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WindowsVirtualMachineScaleSet.__pulumiType;
    }

    public readonly additionalCapabilities!: pulumi.Output<outputs.WindowsVirtualMachineScaleSetAdditionalCapabilities | undefined>;
    public readonly additionalUnattendContents!: pulumi.Output<outputs.WindowsVirtualMachineScaleSetAdditionalUnattendContent[] | undefined>;
    public readonly adminPassword!: pulumi.Output<string>;
    public readonly adminUsername!: pulumi.Output<string>;
    public readonly automaticInstanceRepair!: pulumi.Output<outputs.WindowsVirtualMachineScaleSetAutomaticInstanceRepair | undefined>;
    public readonly automaticOsUpgradePolicy!: pulumi.Output<outputs.WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicy | undefined>;
    public readonly bootDiagnostics!: pulumi.Output<outputs.WindowsVirtualMachineScaleSetBootDiagnostics | undefined>;
    public readonly computerNamePrefix!: pulumi.Output<string>;
    public readonly customData!: pulumi.Output<string | undefined>;
    public readonly dataDisks!: pulumi.Output<outputs.WindowsVirtualMachineScaleSetDataDisk[] | undefined>;
    public readonly doNotRunExtensionsOnOverprovisionedMachines!: pulumi.Output<boolean | undefined>;
    public readonly enableAutomaticUpdates!: pulumi.Output<boolean | undefined>;
    public readonly encryptionAtHostEnabled!: pulumi.Output<boolean | undefined>;
    public readonly extensions!: pulumi.Output<outputs.WindowsVirtualMachineScaleSetExtension[] | undefined>;
    public readonly healthProbeId!: pulumi.Output<string | undefined>;
    public readonly instances!: pulumi.Output<number>;
    public readonly licenseType!: pulumi.Output<string | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkInterfaces!: pulumi.Output<outputs.WindowsVirtualMachineScaleSetNetworkInterface[]>;
    public readonly osDisk!: pulumi.Output<outputs.WindowsVirtualMachineScaleSetOsDisk>;
    public readonly overprovision!: pulumi.Output<boolean | undefined>;
    public readonly plan!: pulumi.Output<outputs.WindowsVirtualMachineScaleSetPlan | undefined>;
    public readonly platformFaultDomainCount!: pulumi.Output<number>;
    public readonly provisionVmAgent!: pulumi.Output<boolean | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly scaleInPolicy!: pulumi.Output<string | undefined>;
    public readonly secrets!: pulumi.Output<outputs.WindowsVirtualMachineScaleSetSecret[] | undefined>;
    public readonly singlePlacementGroup!: pulumi.Output<boolean | undefined>;
    public readonly sku!: pulumi.Output<string>;
    public readonly sourceImageId!: pulumi.Output<string | undefined>;
    public readonly sourceImageReference!: pulumi.Output<outputs.WindowsVirtualMachineScaleSetSourceImageReference | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly terminateNotification!: pulumi.Output<outputs.WindowsVirtualMachineScaleSetTerminateNotification | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.WindowsVirtualMachineScaleSetTimeouts | undefined>;
    public readonly timezone!: pulumi.Output<string | undefined>;
    public /*out*/ readonly uniqueId!: pulumi.Output<string>;
    public readonly upgradeMode!: pulumi.Output<string | undefined>;
    public readonly winrmListeners!: pulumi.Output<outputs.WindowsVirtualMachineScaleSetWinrmListener[] | undefined>;

    /**
     * Create a WindowsVirtualMachineScaleSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WindowsVirtualMachineScaleSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WindowsVirtualMachineScaleSetArgs | WindowsVirtualMachineScaleSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WindowsVirtualMachineScaleSetState | undefined;
            resourceInputs["additionalCapabilities"] = state ? state.additionalCapabilities : undefined;
            resourceInputs["additionalUnattendContents"] = state ? state.additionalUnattendContents : undefined;
            resourceInputs["adminPassword"] = state ? state.adminPassword : undefined;
            resourceInputs["adminUsername"] = state ? state.adminUsername : undefined;
            resourceInputs["automaticInstanceRepair"] = state ? state.automaticInstanceRepair : undefined;
            resourceInputs["automaticOsUpgradePolicy"] = state ? state.automaticOsUpgradePolicy : undefined;
            resourceInputs["bootDiagnostics"] = state ? state.bootDiagnostics : undefined;
            resourceInputs["computerNamePrefix"] = state ? state.computerNamePrefix : undefined;
            resourceInputs["customData"] = state ? state.customData : undefined;
            resourceInputs["dataDisks"] = state ? state.dataDisks : undefined;
            resourceInputs["doNotRunExtensionsOnOverprovisionedMachines"] = state ? state.doNotRunExtensionsOnOverprovisionedMachines : undefined;
            resourceInputs["enableAutomaticUpdates"] = state ? state.enableAutomaticUpdates : undefined;
            resourceInputs["encryptionAtHostEnabled"] = state ? state.encryptionAtHostEnabled : undefined;
            resourceInputs["extensions"] = state ? state.extensions : undefined;
            resourceInputs["healthProbeId"] = state ? state.healthProbeId : undefined;
            resourceInputs["instances"] = state ? state.instances : undefined;
            resourceInputs["licenseType"] = state ? state.licenseType : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkInterfaces"] = state ? state.networkInterfaces : undefined;
            resourceInputs["osDisk"] = state ? state.osDisk : undefined;
            resourceInputs["overprovision"] = state ? state.overprovision : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["platformFaultDomainCount"] = state ? state.platformFaultDomainCount : undefined;
            resourceInputs["provisionVmAgent"] = state ? state.provisionVmAgent : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["scaleInPolicy"] = state ? state.scaleInPolicy : undefined;
            resourceInputs["secrets"] = state ? state.secrets : undefined;
            resourceInputs["singlePlacementGroup"] = state ? state.singlePlacementGroup : undefined;
            resourceInputs["sku"] = state ? state.sku : undefined;
            resourceInputs["sourceImageId"] = state ? state.sourceImageId : undefined;
            resourceInputs["sourceImageReference"] = state ? state.sourceImageReference : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["terminateNotification"] = state ? state.terminateNotification : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
            resourceInputs["uniqueId"] = state ? state.uniqueId : undefined;
            resourceInputs["upgradeMode"] = state ? state.upgradeMode : undefined;
            resourceInputs["winrmListeners"] = state ? state.winrmListeners : undefined;
        } else {
            const args = argsOrState as WindowsVirtualMachineScaleSetArgs | undefined;
            if ((!args || args.adminPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminPassword'");
            }
            if ((!args || args.adminUsername === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminUsername'");
            }
            if ((!args || args.instances === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instances'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.networkInterfaces === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkInterfaces'");
            }
            if ((!args || args.osDisk === undefined) && !opts.urn) {
                throw new Error("Missing required property 'osDisk'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.sku === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sku'");
            }
            resourceInputs["additionalCapabilities"] = args ? args.additionalCapabilities : undefined;
            resourceInputs["additionalUnattendContents"] = args ? args.additionalUnattendContents : undefined;
            resourceInputs["adminPassword"] = args?.adminPassword ? pulumi.secret(args.adminPassword) : undefined;
            resourceInputs["adminUsername"] = args ? args.adminUsername : undefined;
            resourceInputs["automaticInstanceRepair"] = args ? args.automaticInstanceRepair : undefined;
            resourceInputs["automaticOsUpgradePolicy"] = args ? args.automaticOsUpgradePolicy : undefined;
            resourceInputs["bootDiagnostics"] = args ? args.bootDiagnostics : undefined;
            resourceInputs["computerNamePrefix"] = args ? args.computerNamePrefix : undefined;
            resourceInputs["customData"] = args?.customData ? pulumi.secret(args.customData) : undefined;
            resourceInputs["dataDisks"] = args ? args.dataDisks : undefined;
            resourceInputs["doNotRunExtensionsOnOverprovisionedMachines"] = args ? args.doNotRunExtensionsOnOverprovisionedMachines : undefined;
            resourceInputs["enableAutomaticUpdates"] = args ? args.enableAutomaticUpdates : undefined;
            resourceInputs["encryptionAtHostEnabled"] = args ? args.encryptionAtHostEnabled : undefined;
            resourceInputs["extensions"] = args ? args.extensions : undefined;
            resourceInputs["healthProbeId"] = args ? args.healthProbeId : undefined;
            resourceInputs["instances"] = args ? args.instances : undefined;
            resourceInputs["licenseType"] = args ? args.licenseType : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkInterfaces"] = args ? args.networkInterfaces : undefined;
            resourceInputs["osDisk"] = args ? args.osDisk : undefined;
            resourceInputs["overprovision"] = args ? args.overprovision : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["platformFaultDomainCount"] = args ? args.platformFaultDomainCount : undefined;
            resourceInputs["provisionVmAgent"] = args ? args.provisionVmAgent : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["scaleInPolicy"] = args ? args.scaleInPolicy : undefined;
            resourceInputs["secrets"] = args ? args.secrets : undefined;
            resourceInputs["singlePlacementGroup"] = args ? args.singlePlacementGroup : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["sourceImageId"] = args ? args.sourceImageId : undefined;
            resourceInputs["sourceImageReference"] = args ? args.sourceImageReference : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["terminateNotification"] = args ? args.terminateNotification : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
            resourceInputs["upgradeMode"] = args ? args.upgradeMode : undefined;
            resourceInputs["winrmListeners"] = args ? args.winrmListeners : undefined;
            resourceInputs["uniqueId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["adminPassword", "customData"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(WindowsVirtualMachineScaleSet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WindowsVirtualMachineScaleSet resources.
 */
export interface WindowsVirtualMachineScaleSetState {
    additionalCapabilities?: pulumi.Input<inputs.WindowsVirtualMachineScaleSetAdditionalCapabilities>;
    additionalUnattendContents?: pulumi.Input<pulumi.Input<inputs.WindowsVirtualMachineScaleSetAdditionalUnattendContent>[]>;
    adminPassword?: pulumi.Input<string>;
    adminUsername?: pulumi.Input<string>;
    automaticInstanceRepair?: pulumi.Input<inputs.WindowsVirtualMachineScaleSetAutomaticInstanceRepair>;
    automaticOsUpgradePolicy?: pulumi.Input<inputs.WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicy>;
    bootDiagnostics?: pulumi.Input<inputs.WindowsVirtualMachineScaleSetBootDiagnostics>;
    computerNamePrefix?: pulumi.Input<string>;
    customData?: pulumi.Input<string>;
    dataDisks?: pulumi.Input<pulumi.Input<inputs.WindowsVirtualMachineScaleSetDataDisk>[]>;
    doNotRunExtensionsOnOverprovisionedMachines?: pulumi.Input<boolean>;
    enableAutomaticUpdates?: pulumi.Input<boolean>;
    encryptionAtHostEnabled?: pulumi.Input<boolean>;
    extensions?: pulumi.Input<pulumi.Input<inputs.WindowsVirtualMachineScaleSetExtension>[]>;
    healthProbeId?: pulumi.Input<string>;
    instances?: pulumi.Input<number>;
    licenseType?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.WindowsVirtualMachineScaleSetNetworkInterface>[]>;
    osDisk?: pulumi.Input<inputs.WindowsVirtualMachineScaleSetOsDisk>;
    overprovision?: pulumi.Input<boolean>;
    plan?: pulumi.Input<inputs.WindowsVirtualMachineScaleSetPlan>;
    platformFaultDomainCount?: pulumi.Input<number>;
    provisionVmAgent?: pulumi.Input<boolean>;
    resourceGroupName?: pulumi.Input<string>;
    scaleInPolicy?: pulumi.Input<string>;
    secrets?: pulumi.Input<pulumi.Input<inputs.WindowsVirtualMachineScaleSetSecret>[]>;
    singlePlacementGroup?: pulumi.Input<boolean>;
    sku?: pulumi.Input<string>;
    sourceImageId?: pulumi.Input<string>;
    sourceImageReference?: pulumi.Input<inputs.WindowsVirtualMachineScaleSetSourceImageReference>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    terminateNotification?: pulumi.Input<inputs.WindowsVirtualMachineScaleSetTerminateNotification>;
    timeouts?: pulumi.Input<inputs.WindowsVirtualMachineScaleSetTimeouts>;
    timezone?: pulumi.Input<string>;
    uniqueId?: pulumi.Input<string>;
    upgradeMode?: pulumi.Input<string>;
    winrmListeners?: pulumi.Input<pulumi.Input<inputs.WindowsVirtualMachineScaleSetWinrmListener>[]>;
}

/**
 * The set of arguments for constructing a WindowsVirtualMachineScaleSet resource.
 */
export interface WindowsVirtualMachineScaleSetArgs {
    additionalCapabilities?: pulumi.Input<inputs.WindowsVirtualMachineScaleSetAdditionalCapabilities>;
    additionalUnattendContents?: pulumi.Input<pulumi.Input<inputs.WindowsVirtualMachineScaleSetAdditionalUnattendContent>[]>;
    adminPassword: pulumi.Input<string>;
    adminUsername: pulumi.Input<string>;
    automaticInstanceRepair?: pulumi.Input<inputs.WindowsVirtualMachineScaleSetAutomaticInstanceRepair>;
    automaticOsUpgradePolicy?: pulumi.Input<inputs.WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicy>;
    bootDiagnostics?: pulumi.Input<inputs.WindowsVirtualMachineScaleSetBootDiagnostics>;
    computerNamePrefix?: pulumi.Input<string>;
    customData?: pulumi.Input<string>;
    dataDisks?: pulumi.Input<pulumi.Input<inputs.WindowsVirtualMachineScaleSetDataDisk>[]>;
    doNotRunExtensionsOnOverprovisionedMachines?: pulumi.Input<boolean>;
    enableAutomaticUpdates?: pulumi.Input<boolean>;
    encryptionAtHostEnabled?: pulumi.Input<boolean>;
    extensions?: pulumi.Input<pulumi.Input<inputs.WindowsVirtualMachineScaleSetExtension>[]>;
    healthProbeId?: pulumi.Input<string>;
    instances: pulumi.Input<number>;
    licenseType?: pulumi.Input<string>;
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkInterfaces: pulumi.Input<pulumi.Input<inputs.WindowsVirtualMachineScaleSetNetworkInterface>[]>;
    osDisk: pulumi.Input<inputs.WindowsVirtualMachineScaleSetOsDisk>;
    overprovision?: pulumi.Input<boolean>;
    plan?: pulumi.Input<inputs.WindowsVirtualMachineScaleSetPlan>;
    platformFaultDomainCount?: pulumi.Input<number>;
    provisionVmAgent?: pulumi.Input<boolean>;
    resourceGroupName: pulumi.Input<string>;
    scaleInPolicy?: pulumi.Input<string>;
    secrets?: pulumi.Input<pulumi.Input<inputs.WindowsVirtualMachineScaleSetSecret>[]>;
    singlePlacementGroup?: pulumi.Input<boolean>;
    sku: pulumi.Input<string>;
    sourceImageId?: pulumi.Input<string>;
    sourceImageReference?: pulumi.Input<inputs.WindowsVirtualMachineScaleSetSourceImageReference>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    terminateNotification?: pulumi.Input<inputs.WindowsVirtualMachineScaleSetTerminateNotification>;
    timeouts?: pulumi.Input<inputs.WindowsVirtualMachineScaleSetTimeouts>;
    timezone?: pulumi.Input<string>;
    upgradeMode?: pulumi.Input<string>;
    winrmListeners?: pulumi.Input<pulumi.Input<inputs.WindowsVirtualMachineScaleSetWinrmListener>[]>;
}
