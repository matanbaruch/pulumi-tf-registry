// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LbProbe extends pulumi.CustomResource {
    /**
     * Get an existing LbProbe resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LbProbeState, opts?: pulumi.CustomResourceOptions): LbProbe {
        return new LbProbe(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurestack:index/lbProbe:LbProbe';

    /**
     * Returns true if the given object is an instance of LbProbe.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LbProbe {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LbProbe.__pulumiType;
    }

    public readonly intervalInSeconds!: pulumi.Output<number | undefined>;
    public /*out*/ readonly loadBalancerRules!: pulumi.Output<string[]>;
    public readonly loadbalancerId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly numberOfProbes!: pulumi.Output<number | undefined>;
    public readonly port!: pulumi.Output<number>;
    public readonly protocol!: pulumi.Output<string>;
    public readonly requestPath!: pulumi.Output<string | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.LbProbeTimeouts | undefined>;

    /**
     * Create a LbProbe resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LbProbeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LbProbeArgs | LbProbeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LbProbeState | undefined;
            resourceInputs["intervalInSeconds"] = state ? state.intervalInSeconds : undefined;
            resourceInputs["loadBalancerRules"] = state ? state.loadBalancerRules : undefined;
            resourceInputs["loadbalancerId"] = state ? state.loadbalancerId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numberOfProbes"] = state ? state.numberOfProbes : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["requestPath"] = state ? state.requestPath : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as LbProbeArgs | undefined;
            if ((!args || args.loadbalancerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadbalancerId'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["intervalInSeconds"] = args ? args.intervalInSeconds : undefined;
            resourceInputs["loadbalancerId"] = args ? args.loadbalancerId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["numberOfProbes"] = args ? args.numberOfProbes : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["requestPath"] = args ? args.requestPath : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["loadBalancerRules"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LbProbe.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LbProbe resources.
 */
export interface LbProbeState {
    intervalInSeconds?: pulumi.Input<number>;
    loadBalancerRules?: pulumi.Input<pulumi.Input<string>[]>;
    loadbalancerId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    numberOfProbes?: pulumi.Input<number>;
    port?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    requestPath?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LbProbeTimeouts>;
}

/**
 * The set of arguments for constructing a LbProbe resource.
 */
export interface LbProbeArgs {
    intervalInSeconds?: pulumi.Input<number>;
    loadbalancerId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    numberOfProbes?: pulumi.Input<number>;
    port: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    requestPath?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LbProbeTimeouts>;
}
