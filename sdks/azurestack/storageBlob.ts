// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StorageBlob extends pulumi.CustomResource {
    /**
     * Get an existing StorageBlob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageBlobState, opts?: pulumi.CustomResourceOptions): StorageBlob {
        return new StorageBlob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurestack:index/storageBlob:StorageBlob';

    /**
     * Returns true if the given object is an instance of StorageBlob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageBlob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageBlob.__pulumiType;
    }

    public readonly cacheControl!: pulumi.Output<string | undefined>;
    public readonly contentMd5!: pulumi.Output<string | undefined>;
    public readonly contentType!: pulumi.Output<string | undefined>;
    public readonly metadata!: pulumi.Output<{[key: string]: string}>;
    public readonly name!: pulumi.Output<string>;
    public readonly parallelism!: pulumi.Output<number | undefined>;
    public readonly size!: pulumi.Output<number | undefined>;
    public readonly source!: pulumi.Output<string | undefined>;
    public readonly sourceContent!: pulumi.Output<string | undefined>;
    public readonly sourceUri!: pulumi.Output<string | undefined>;
    public readonly storageAccountName!: pulumi.Output<string>;
    public readonly storageContainerName!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.StorageBlobTimeouts | undefined>;
    public readonly type!: pulumi.Output<string>;
    public /*out*/ readonly url!: pulumi.Output<string>;

    /**
     * Create a StorageBlob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageBlobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageBlobArgs | StorageBlobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageBlobState | undefined;
            resourceInputs["cacheControl"] = state ? state.cacheControl : undefined;
            resourceInputs["contentMd5"] = state ? state.contentMd5 : undefined;
            resourceInputs["contentType"] = state ? state.contentType : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parallelism"] = state ? state.parallelism : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["sourceContent"] = state ? state.sourceContent : undefined;
            resourceInputs["sourceUri"] = state ? state.sourceUri : undefined;
            resourceInputs["storageAccountName"] = state ? state.storageAccountName : undefined;
            resourceInputs["storageContainerName"] = state ? state.storageContainerName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as StorageBlobArgs | undefined;
            if ((!args || args.storageAccountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageAccountName'");
            }
            if ((!args || args.storageContainerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageContainerName'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["cacheControl"] = args ? args.cacheControl : undefined;
            resourceInputs["contentMd5"] = args ? args.contentMd5 : undefined;
            resourceInputs["contentType"] = args ? args.contentType : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parallelism"] = args ? args.parallelism : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["sourceContent"] = args ? args.sourceContent : undefined;
            resourceInputs["sourceUri"] = args ? args.sourceUri : undefined;
            resourceInputs["storageAccountName"] = args ? args.storageAccountName : undefined;
            resourceInputs["storageContainerName"] = args ? args.storageContainerName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageBlob.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StorageBlob resources.
 */
export interface StorageBlobState {
    cacheControl?: pulumi.Input<string>;
    contentMd5?: pulumi.Input<string>;
    contentType?: pulumi.Input<string>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    parallelism?: pulumi.Input<number>;
    size?: pulumi.Input<number>;
    source?: pulumi.Input<string>;
    sourceContent?: pulumi.Input<string>;
    sourceUri?: pulumi.Input<string>;
    storageAccountName?: pulumi.Input<string>;
    storageContainerName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StorageBlobTimeouts>;
    type?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StorageBlob resource.
 */
export interface StorageBlobArgs {
    cacheControl?: pulumi.Input<string>;
    contentMd5?: pulumi.Input<string>;
    contentType?: pulumi.Input<string>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    parallelism?: pulumi.Input<number>;
    size?: pulumi.Input<number>;
    source?: pulumi.Input<string>;
    sourceContent?: pulumi.Input<string>;
    sourceUri?: pulumi.Input<string>;
    storageAccountName: pulumi.Input<string>;
    storageContainerName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.StorageBlobTimeouts>;
    type: pulumi.Input<string>;
}
