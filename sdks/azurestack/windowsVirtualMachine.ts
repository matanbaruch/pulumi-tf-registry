// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WindowsVirtualMachine extends pulumi.CustomResource {
    /**
     * Get an existing WindowsVirtualMachine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WindowsVirtualMachineState, opts?: pulumi.CustomResourceOptions): WindowsVirtualMachine {
        return new WindowsVirtualMachine(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurestack:index/windowsVirtualMachine:WindowsVirtualMachine';

    /**
     * Returns true if the given object is an instance of WindowsVirtualMachine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WindowsVirtualMachine {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WindowsVirtualMachine.__pulumiType;
    }

    public readonly additionalCapabilities!: pulumi.Output<outputs.WindowsVirtualMachineAdditionalCapabilities | undefined>;
    public readonly additionalUnattendContents!: pulumi.Output<outputs.WindowsVirtualMachineAdditionalUnattendContent[] | undefined>;
    public readonly adminPassword!: pulumi.Output<string>;
    public readonly adminUsername!: pulumi.Output<string>;
    public readonly allowExtensionOperations!: pulumi.Output<boolean | undefined>;
    public readonly availabilitySetId!: pulumi.Output<string | undefined>;
    public readonly bootDiagnostics!: pulumi.Output<outputs.WindowsVirtualMachineBootDiagnostics | undefined>;
    public readonly computerName!: pulumi.Output<string>;
    public readonly customData!: pulumi.Output<string | undefined>;
    public readonly enableAutomaticUpdates!: pulumi.Output<boolean | undefined>;
    public readonly encryptionAtHostEnabled!: pulumi.Output<boolean | undefined>;
    public readonly evictionPolicy!: pulumi.Output<string | undefined>;
    public readonly extensionsTimeBudget!: pulumi.Output<string | undefined>;
    public readonly licenseType!: pulumi.Output<string | undefined>;
    public readonly location!: pulumi.Output<string>;
    public readonly maxBidPrice!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkInterfaceIds!: pulumi.Output<string[]>;
    public readonly osDisk!: pulumi.Output<outputs.WindowsVirtualMachineOsDisk>;
    public readonly patchMode!: pulumi.Output<string | undefined>;
    public readonly plan!: pulumi.Output<outputs.WindowsVirtualMachinePlan | undefined>;
    public readonly priority!: pulumi.Output<string | undefined>;
    public /*out*/ readonly privateIpAddress!: pulumi.Output<string>;
    public /*out*/ readonly privateIpAddresses!: pulumi.Output<string[]>;
    public readonly provisionVmAgent!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly publicIpAddress!: pulumi.Output<string>;
    public /*out*/ readonly publicIpAddresses!: pulumi.Output<string[]>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly secrets!: pulumi.Output<outputs.WindowsVirtualMachineSecret[] | undefined>;
    public readonly size!: pulumi.Output<string>;
    public readonly sourceImageId!: pulumi.Output<string | undefined>;
    public readonly sourceImageReference!: pulumi.Output<outputs.WindowsVirtualMachineSourceImageReference | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.WindowsVirtualMachineTimeouts | undefined>;
    public readonly timezone!: pulumi.Output<string | undefined>;
    public /*out*/ readonly virtualMachineId!: pulumi.Output<string>;
    public readonly virtualMachineScaleSetId!: pulumi.Output<string | undefined>;
    public readonly winrmListeners!: pulumi.Output<outputs.WindowsVirtualMachineWinrmListener[] | undefined>;
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a WindowsVirtualMachine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WindowsVirtualMachineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WindowsVirtualMachineArgs | WindowsVirtualMachineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WindowsVirtualMachineState | undefined;
            resourceInputs["additionalCapabilities"] = state ? state.additionalCapabilities : undefined;
            resourceInputs["additionalUnattendContents"] = state ? state.additionalUnattendContents : undefined;
            resourceInputs["adminPassword"] = state ? state.adminPassword : undefined;
            resourceInputs["adminUsername"] = state ? state.adminUsername : undefined;
            resourceInputs["allowExtensionOperations"] = state ? state.allowExtensionOperations : undefined;
            resourceInputs["availabilitySetId"] = state ? state.availabilitySetId : undefined;
            resourceInputs["bootDiagnostics"] = state ? state.bootDiagnostics : undefined;
            resourceInputs["computerName"] = state ? state.computerName : undefined;
            resourceInputs["customData"] = state ? state.customData : undefined;
            resourceInputs["enableAutomaticUpdates"] = state ? state.enableAutomaticUpdates : undefined;
            resourceInputs["encryptionAtHostEnabled"] = state ? state.encryptionAtHostEnabled : undefined;
            resourceInputs["evictionPolicy"] = state ? state.evictionPolicy : undefined;
            resourceInputs["extensionsTimeBudget"] = state ? state.extensionsTimeBudget : undefined;
            resourceInputs["licenseType"] = state ? state.licenseType : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["maxBidPrice"] = state ? state.maxBidPrice : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkInterfaceIds"] = state ? state.networkInterfaceIds : undefined;
            resourceInputs["osDisk"] = state ? state.osDisk : undefined;
            resourceInputs["patchMode"] = state ? state.patchMode : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["privateIpAddress"] = state ? state.privateIpAddress : undefined;
            resourceInputs["privateIpAddresses"] = state ? state.privateIpAddresses : undefined;
            resourceInputs["provisionVmAgent"] = state ? state.provisionVmAgent : undefined;
            resourceInputs["publicIpAddress"] = state ? state.publicIpAddress : undefined;
            resourceInputs["publicIpAddresses"] = state ? state.publicIpAddresses : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["secrets"] = state ? state.secrets : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["sourceImageId"] = state ? state.sourceImageId : undefined;
            resourceInputs["sourceImageReference"] = state ? state.sourceImageReference : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
            resourceInputs["virtualMachineId"] = state ? state.virtualMachineId : undefined;
            resourceInputs["virtualMachineScaleSetId"] = state ? state.virtualMachineScaleSetId : undefined;
            resourceInputs["winrmListeners"] = state ? state.winrmListeners : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as WindowsVirtualMachineArgs | undefined;
            if ((!args || args.adminPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminPassword'");
            }
            if ((!args || args.adminUsername === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminUsername'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.networkInterfaceIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkInterfaceIds'");
            }
            if ((!args || args.osDisk === undefined) && !opts.urn) {
                throw new Error("Missing required property 'osDisk'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["additionalCapabilities"] = args ? args.additionalCapabilities : undefined;
            resourceInputs["additionalUnattendContents"] = args ? args.additionalUnattendContents : undefined;
            resourceInputs["adminPassword"] = args?.adminPassword ? pulumi.secret(args.adminPassword) : undefined;
            resourceInputs["adminUsername"] = args ? args.adminUsername : undefined;
            resourceInputs["allowExtensionOperations"] = args ? args.allowExtensionOperations : undefined;
            resourceInputs["availabilitySetId"] = args ? args.availabilitySetId : undefined;
            resourceInputs["bootDiagnostics"] = args ? args.bootDiagnostics : undefined;
            resourceInputs["computerName"] = args ? args.computerName : undefined;
            resourceInputs["customData"] = args?.customData ? pulumi.secret(args.customData) : undefined;
            resourceInputs["enableAutomaticUpdates"] = args ? args.enableAutomaticUpdates : undefined;
            resourceInputs["encryptionAtHostEnabled"] = args ? args.encryptionAtHostEnabled : undefined;
            resourceInputs["evictionPolicy"] = args ? args.evictionPolicy : undefined;
            resourceInputs["extensionsTimeBudget"] = args ? args.extensionsTimeBudget : undefined;
            resourceInputs["licenseType"] = args ? args.licenseType : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["maxBidPrice"] = args ? args.maxBidPrice : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkInterfaceIds"] = args ? args.networkInterfaceIds : undefined;
            resourceInputs["osDisk"] = args ? args.osDisk : undefined;
            resourceInputs["patchMode"] = args ? args.patchMode : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["provisionVmAgent"] = args ? args.provisionVmAgent : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["secrets"] = args ? args.secrets : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["sourceImageId"] = args ? args.sourceImageId : undefined;
            resourceInputs["sourceImageReference"] = args ? args.sourceImageReference : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
            resourceInputs["virtualMachineScaleSetId"] = args ? args.virtualMachineScaleSetId : undefined;
            resourceInputs["winrmListeners"] = args ? args.winrmListeners : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["privateIpAddress"] = undefined /*out*/;
            resourceInputs["privateIpAddresses"] = undefined /*out*/;
            resourceInputs["publicIpAddress"] = undefined /*out*/;
            resourceInputs["publicIpAddresses"] = undefined /*out*/;
            resourceInputs["virtualMachineId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["adminPassword", "customData"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(WindowsVirtualMachine.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WindowsVirtualMachine resources.
 */
export interface WindowsVirtualMachineState {
    additionalCapabilities?: pulumi.Input<inputs.WindowsVirtualMachineAdditionalCapabilities>;
    additionalUnattendContents?: pulumi.Input<pulumi.Input<inputs.WindowsVirtualMachineAdditionalUnattendContent>[]>;
    adminPassword?: pulumi.Input<string>;
    adminUsername?: pulumi.Input<string>;
    allowExtensionOperations?: pulumi.Input<boolean>;
    availabilitySetId?: pulumi.Input<string>;
    bootDiagnostics?: pulumi.Input<inputs.WindowsVirtualMachineBootDiagnostics>;
    computerName?: pulumi.Input<string>;
    customData?: pulumi.Input<string>;
    enableAutomaticUpdates?: pulumi.Input<boolean>;
    encryptionAtHostEnabled?: pulumi.Input<boolean>;
    evictionPolicy?: pulumi.Input<string>;
    extensionsTimeBudget?: pulumi.Input<string>;
    licenseType?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    maxBidPrice?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    networkInterfaceIds?: pulumi.Input<pulumi.Input<string>[]>;
    osDisk?: pulumi.Input<inputs.WindowsVirtualMachineOsDisk>;
    patchMode?: pulumi.Input<string>;
    plan?: pulumi.Input<inputs.WindowsVirtualMachinePlan>;
    priority?: pulumi.Input<string>;
    privateIpAddress?: pulumi.Input<string>;
    privateIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    provisionVmAgent?: pulumi.Input<boolean>;
    publicIpAddress?: pulumi.Input<string>;
    publicIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    resourceGroupName?: pulumi.Input<string>;
    secrets?: pulumi.Input<pulumi.Input<inputs.WindowsVirtualMachineSecret>[]>;
    size?: pulumi.Input<string>;
    sourceImageId?: pulumi.Input<string>;
    sourceImageReference?: pulumi.Input<inputs.WindowsVirtualMachineSourceImageReference>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.WindowsVirtualMachineTimeouts>;
    timezone?: pulumi.Input<string>;
    virtualMachineId?: pulumi.Input<string>;
    virtualMachineScaleSetId?: pulumi.Input<string>;
    winrmListeners?: pulumi.Input<pulumi.Input<inputs.WindowsVirtualMachineWinrmListener>[]>;
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WindowsVirtualMachine resource.
 */
export interface WindowsVirtualMachineArgs {
    additionalCapabilities?: pulumi.Input<inputs.WindowsVirtualMachineAdditionalCapabilities>;
    additionalUnattendContents?: pulumi.Input<pulumi.Input<inputs.WindowsVirtualMachineAdditionalUnattendContent>[]>;
    adminPassword: pulumi.Input<string>;
    adminUsername: pulumi.Input<string>;
    allowExtensionOperations?: pulumi.Input<boolean>;
    availabilitySetId?: pulumi.Input<string>;
    bootDiagnostics?: pulumi.Input<inputs.WindowsVirtualMachineBootDiagnostics>;
    computerName?: pulumi.Input<string>;
    customData?: pulumi.Input<string>;
    enableAutomaticUpdates?: pulumi.Input<boolean>;
    encryptionAtHostEnabled?: pulumi.Input<boolean>;
    evictionPolicy?: pulumi.Input<string>;
    extensionsTimeBudget?: pulumi.Input<string>;
    licenseType?: pulumi.Input<string>;
    location: pulumi.Input<string>;
    maxBidPrice?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    networkInterfaceIds: pulumi.Input<pulumi.Input<string>[]>;
    osDisk: pulumi.Input<inputs.WindowsVirtualMachineOsDisk>;
    patchMode?: pulumi.Input<string>;
    plan?: pulumi.Input<inputs.WindowsVirtualMachinePlan>;
    priority?: pulumi.Input<string>;
    provisionVmAgent?: pulumi.Input<boolean>;
    resourceGroupName: pulumi.Input<string>;
    secrets?: pulumi.Input<pulumi.Input<inputs.WindowsVirtualMachineSecret>[]>;
    size: pulumi.Input<string>;
    sourceImageId?: pulumi.Input<string>;
    sourceImageReference?: pulumi.Input<inputs.WindowsVirtualMachineSourceImageReference>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.WindowsVirtualMachineTimeouts>;
    timezone?: pulumi.Input<string>;
    virtualMachineScaleSetId?: pulumi.Input<string>;
    winrmListeners?: pulumi.Input<pulumi.Input<inputs.WindowsVirtualMachineWinrmListener>[]>;
    zone?: pulumi.Input<string>;
}
