// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AvailabilitySetArgs, AvailabilitySetState } from "./availabilitySet";
export type AvailabilitySet = import("./availabilitySet").AvailabilitySet;
export const AvailabilitySet: typeof import("./availabilitySet").AvailabilitySet = null as any;
utilities.lazyLoad(exports, ["AvailabilitySet"], () => require("./availabilitySet"));

export { DnsARecordArgs, DnsARecordState } from "./dnsARecord";
export type DnsARecord = import("./dnsARecord").DnsARecord;
export const DnsARecord: typeof import("./dnsARecord").DnsARecord = null as any;
utilities.lazyLoad(exports, ["DnsARecord"], () => require("./dnsARecord"));

export { DnsAaaaRecordArgs, DnsAaaaRecordState } from "./dnsAaaaRecord";
export type DnsAaaaRecord = import("./dnsAaaaRecord").DnsAaaaRecord;
export const DnsAaaaRecord: typeof import("./dnsAaaaRecord").DnsAaaaRecord = null as any;
utilities.lazyLoad(exports, ["DnsAaaaRecord"], () => require("./dnsAaaaRecord"));

export { DnsCnameRecordArgs, DnsCnameRecordState } from "./dnsCnameRecord";
export type DnsCnameRecord = import("./dnsCnameRecord").DnsCnameRecord;
export const DnsCnameRecord: typeof import("./dnsCnameRecord").DnsCnameRecord = null as any;
utilities.lazyLoad(exports, ["DnsCnameRecord"], () => require("./dnsCnameRecord"));

export { DnsMxRecordArgs, DnsMxRecordState } from "./dnsMxRecord";
export type DnsMxRecord = import("./dnsMxRecord").DnsMxRecord;
export const DnsMxRecord: typeof import("./dnsMxRecord").DnsMxRecord = null as any;
utilities.lazyLoad(exports, ["DnsMxRecord"], () => require("./dnsMxRecord"));

export { DnsNsRecordArgs, DnsNsRecordState } from "./dnsNsRecord";
export type DnsNsRecord = import("./dnsNsRecord").DnsNsRecord;
export const DnsNsRecord: typeof import("./dnsNsRecord").DnsNsRecord = null as any;
utilities.lazyLoad(exports, ["DnsNsRecord"], () => require("./dnsNsRecord"));

export { DnsPtrRecordArgs, DnsPtrRecordState } from "./dnsPtrRecord";
export type DnsPtrRecord = import("./dnsPtrRecord").DnsPtrRecord;
export const DnsPtrRecord: typeof import("./dnsPtrRecord").DnsPtrRecord = null as any;
utilities.lazyLoad(exports, ["DnsPtrRecord"], () => require("./dnsPtrRecord"));

export { DnsSrvRecordArgs, DnsSrvRecordState } from "./dnsSrvRecord";
export type DnsSrvRecord = import("./dnsSrvRecord").DnsSrvRecord;
export const DnsSrvRecord: typeof import("./dnsSrvRecord").DnsSrvRecord = null as any;
utilities.lazyLoad(exports, ["DnsSrvRecord"], () => require("./dnsSrvRecord"));

export { DnsTxtRecordArgs, DnsTxtRecordState } from "./dnsTxtRecord";
export type DnsTxtRecord = import("./dnsTxtRecord").DnsTxtRecord;
export const DnsTxtRecord: typeof import("./dnsTxtRecord").DnsTxtRecord = null as any;
utilities.lazyLoad(exports, ["DnsTxtRecord"], () => require("./dnsTxtRecord"));

export { DnsZoneArgs, DnsZoneState } from "./dnsZone";
export type DnsZone = import("./dnsZone").DnsZone;
export const DnsZone: typeof import("./dnsZone").DnsZone = null as any;
utilities.lazyLoad(exports, ["DnsZone"], () => require("./dnsZone"));

export { GetAvailabilitySetArgs, GetAvailabilitySetResult, GetAvailabilitySetOutputArgs } from "./getAvailabilitySet";
export const getAvailabilitySet: typeof import("./getAvailabilitySet").getAvailabilitySet = null as any;
export const getAvailabilitySetOutput: typeof import("./getAvailabilitySet").getAvailabilitySetOutput = null as any;
utilities.lazyLoad(exports, ["getAvailabilitySet","getAvailabilitySetOutput"], () => require("./getAvailabilitySet"));

export { GetClientConfigArgs, GetClientConfigResult, GetClientConfigOutputArgs } from "./getClientConfig";
export const getClientConfig: typeof import("./getClientConfig").getClientConfig = null as any;
export const getClientConfigOutput: typeof import("./getClientConfig").getClientConfigOutput = null as any;
utilities.lazyLoad(exports, ["getClientConfig","getClientConfigOutput"], () => require("./getClientConfig"));

export { GetDnsZoneArgs, GetDnsZoneResult, GetDnsZoneOutputArgs } from "./getDnsZone";
export const getDnsZone: typeof import("./getDnsZone").getDnsZone = null as any;
export const getDnsZoneOutput: typeof import("./getDnsZone").getDnsZoneOutput = null as any;
utilities.lazyLoad(exports, ["getDnsZone","getDnsZoneOutput"], () => require("./getDnsZone"));

export { GetImageArgs, GetImageResult, GetImageOutputArgs } from "./getImage";
export const getImage: typeof import("./getImage").getImage = null as any;
export const getImageOutput: typeof import("./getImage").getImageOutput = null as any;
utilities.lazyLoad(exports, ["getImage","getImageOutput"], () => require("./getImage"));

export { GetKeyVaultArgs, GetKeyVaultResult, GetKeyVaultOutputArgs } from "./getKeyVault";
export const getKeyVault: typeof import("./getKeyVault").getKeyVault = null as any;
export const getKeyVaultOutput: typeof import("./getKeyVault").getKeyVaultOutput = null as any;
utilities.lazyLoad(exports, ["getKeyVault","getKeyVaultOutput"], () => require("./getKeyVault"));

export { GetKeyVaultAccessPolicyArgs, GetKeyVaultAccessPolicyResult, GetKeyVaultAccessPolicyOutputArgs } from "./getKeyVaultAccessPolicy";
export const getKeyVaultAccessPolicy: typeof import("./getKeyVaultAccessPolicy").getKeyVaultAccessPolicy = null as any;
export const getKeyVaultAccessPolicyOutput: typeof import("./getKeyVaultAccessPolicy").getKeyVaultAccessPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getKeyVaultAccessPolicy","getKeyVaultAccessPolicyOutput"], () => require("./getKeyVaultAccessPolicy"));

export { GetKeyVaultKeyArgs, GetKeyVaultKeyResult, GetKeyVaultKeyOutputArgs } from "./getKeyVaultKey";
export const getKeyVaultKey: typeof import("./getKeyVaultKey").getKeyVaultKey = null as any;
export const getKeyVaultKeyOutput: typeof import("./getKeyVaultKey").getKeyVaultKeyOutput = null as any;
utilities.lazyLoad(exports, ["getKeyVaultKey","getKeyVaultKeyOutput"], () => require("./getKeyVaultKey"));

export { GetKeyVaultSecretArgs, GetKeyVaultSecretResult, GetKeyVaultSecretOutputArgs } from "./getKeyVaultSecret";
export const getKeyVaultSecret: typeof import("./getKeyVaultSecret").getKeyVaultSecret = null as any;
export const getKeyVaultSecretOutput: typeof import("./getKeyVaultSecret").getKeyVaultSecretOutput = null as any;
utilities.lazyLoad(exports, ["getKeyVaultSecret","getKeyVaultSecretOutput"], () => require("./getKeyVaultSecret"));

export { GetLbArgs, GetLbResult, GetLbOutputArgs } from "./getLb";
export const getLb: typeof import("./getLb").getLb = null as any;
export const getLbOutput: typeof import("./getLb").getLbOutput = null as any;
utilities.lazyLoad(exports, ["getLb","getLbOutput"], () => require("./getLb"));

export { GetLbBackendAddressPoolArgs, GetLbBackendAddressPoolResult, GetLbBackendAddressPoolOutputArgs } from "./getLbBackendAddressPool";
export const getLbBackendAddressPool: typeof import("./getLbBackendAddressPool").getLbBackendAddressPool = null as any;
export const getLbBackendAddressPoolOutput: typeof import("./getLbBackendAddressPool").getLbBackendAddressPoolOutput = null as any;
utilities.lazyLoad(exports, ["getLbBackendAddressPool","getLbBackendAddressPoolOutput"], () => require("./getLbBackendAddressPool"));

export { GetLbRuleArgs, GetLbRuleResult, GetLbRuleOutputArgs } from "./getLbRule";
export const getLbRule: typeof import("./getLbRule").getLbRule = null as any;
export const getLbRuleOutput: typeof import("./getLbRule").getLbRuleOutput = null as any;
utilities.lazyLoad(exports, ["getLbRule","getLbRuleOutput"], () => require("./getLbRule"));

export { GetLocalNetworkGatewayArgs, GetLocalNetworkGatewayResult, GetLocalNetworkGatewayOutputArgs } from "./getLocalNetworkGateway";
export const getLocalNetworkGateway: typeof import("./getLocalNetworkGateway").getLocalNetworkGateway = null as any;
export const getLocalNetworkGatewayOutput: typeof import("./getLocalNetworkGateway").getLocalNetworkGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getLocalNetworkGateway","getLocalNetworkGatewayOutput"], () => require("./getLocalNetworkGateway"));

export { GetManagedDiskArgs, GetManagedDiskResult, GetManagedDiskOutputArgs } from "./getManagedDisk";
export const getManagedDisk: typeof import("./getManagedDisk").getManagedDisk = null as any;
export const getManagedDiskOutput: typeof import("./getManagedDisk").getManagedDiskOutput = null as any;
utilities.lazyLoad(exports, ["getManagedDisk","getManagedDiskOutput"], () => require("./getManagedDisk"));

export { GetNetworkInterfaceArgs, GetNetworkInterfaceResult, GetNetworkInterfaceOutputArgs } from "./getNetworkInterface";
export const getNetworkInterface: typeof import("./getNetworkInterface").getNetworkInterface = null as any;
export const getNetworkInterfaceOutput: typeof import("./getNetworkInterface").getNetworkInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkInterface","getNetworkInterfaceOutput"], () => require("./getNetworkInterface"));

export { GetNetworkSecurityGroupArgs, GetNetworkSecurityGroupResult, GetNetworkSecurityGroupOutputArgs } from "./getNetworkSecurityGroup";
export const getNetworkSecurityGroup: typeof import("./getNetworkSecurityGroup").getNetworkSecurityGroup = null as any;
export const getNetworkSecurityGroupOutput: typeof import("./getNetworkSecurityGroup").getNetworkSecurityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkSecurityGroup","getNetworkSecurityGroupOutput"], () => require("./getNetworkSecurityGroup"));

export { GetPlatformImageArgs, GetPlatformImageResult, GetPlatformImageOutputArgs } from "./getPlatformImage";
export const getPlatformImage: typeof import("./getPlatformImage").getPlatformImage = null as any;
export const getPlatformImageOutput: typeof import("./getPlatformImage").getPlatformImageOutput = null as any;
utilities.lazyLoad(exports, ["getPlatformImage","getPlatformImageOutput"], () => require("./getPlatformImage"));

export { GetPublicIpArgs, GetPublicIpResult, GetPublicIpOutputArgs } from "./getPublicIp";
export const getPublicIp: typeof import("./getPublicIp").getPublicIp = null as any;
export const getPublicIpOutput: typeof import("./getPublicIp").getPublicIpOutput = null as any;
utilities.lazyLoad(exports, ["getPublicIp","getPublicIpOutput"], () => require("./getPublicIp"));

export { GetPublicIpsArgs, GetPublicIpsResult, GetPublicIpsOutputArgs } from "./getPublicIps";
export const getPublicIps: typeof import("./getPublicIps").getPublicIps = null as any;
export const getPublicIpsOutput: typeof import("./getPublicIps").getPublicIpsOutput = null as any;
utilities.lazyLoad(exports, ["getPublicIps","getPublicIpsOutput"], () => require("./getPublicIps"));

export { GetResourceGroupArgs, GetResourceGroupResult, GetResourceGroupOutputArgs } from "./getResourceGroup";
export const getResourceGroup: typeof import("./getResourceGroup").getResourceGroup = null as any;
export const getResourceGroupOutput: typeof import("./getResourceGroup").getResourceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getResourceGroup","getResourceGroupOutput"], () => require("./getResourceGroup"));

export { GetResourcesArgs, GetResourcesResult, GetResourcesOutputArgs } from "./getResources";
export const getResources: typeof import("./getResources").getResources = null as any;
export const getResourcesOutput: typeof import("./getResources").getResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getResources","getResourcesOutput"], () => require("./getResources"));

export { GetRouteTableArgs, GetRouteTableResult, GetRouteTableOutputArgs } from "./getRouteTable";
export const getRouteTable: typeof import("./getRouteTable").getRouteTable = null as any;
export const getRouteTableOutput: typeof import("./getRouteTable").getRouteTableOutput = null as any;
utilities.lazyLoad(exports, ["getRouteTable","getRouteTableOutput"], () => require("./getRouteTable"));

export { GetStorageAccountArgs, GetStorageAccountResult, GetStorageAccountOutputArgs } from "./getStorageAccount";
export const getStorageAccount: typeof import("./getStorageAccount").getStorageAccount = null as any;
export const getStorageAccountOutput: typeof import("./getStorageAccount").getStorageAccountOutput = null as any;
utilities.lazyLoad(exports, ["getStorageAccount","getStorageAccountOutput"], () => require("./getStorageAccount"));

export { GetStorageContainerArgs, GetStorageContainerResult, GetStorageContainerOutputArgs } from "./getStorageContainer";
export const getStorageContainer: typeof import("./getStorageContainer").getStorageContainer = null as any;
export const getStorageContainerOutput: typeof import("./getStorageContainer").getStorageContainerOutput = null as any;
utilities.lazyLoad(exports, ["getStorageContainer","getStorageContainerOutput"], () => require("./getStorageContainer"));

export { GetSubnetArgs, GetSubnetResult, GetSubnetOutputArgs } from "./getSubnet";
export const getSubnet: typeof import("./getSubnet").getSubnet = null as any;
export const getSubnetOutput: typeof import("./getSubnet").getSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getSubnet","getSubnetOutput"], () => require("./getSubnet"));

export { GetVirtualNetworkArgs, GetVirtualNetworkResult, GetVirtualNetworkOutputArgs } from "./getVirtualNetwork";
export const getVirtualNetwork: typeof import("./getVirtualNetwork").getVirtualNetwork = null as any;
export const getVirtualNetworkOutput: typeof import("./getVirtualNetwork").getVirtualNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualNetwork","getVirtualNetworkOutput"], () => require("./getVirtualNetwork"));

export { GetVirtualNetworkGatewayArgs, GetVirtualNetworkGatewayResult, GetVirtualNetworkGatewayOutputArgs } from "./getVirtualNetworkGateway";
export const getVirtualNetworkGateway: typeof import("./getVirtualNetworkGateway").getVirtualNetworkGateway = null as any;
export const getVirtualNetworkGatewayOutput: typeof import("./getVirtualNetworkGateway").getVirtualNetworkGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualNetworkGateway","getVirtualNetworkGatewayOutput"], () => require("./getVirtualNetworkGateway"));

export { GetVirtualNetworkGatewayConnectionArgs, GetVirtualNetworkGatewayConnectionResult, GetVirtualNetworkGatewayConnectionOutputArgs } from "./getVirtualNetworkGatewayConnection";
export const getVirtualNetworkGatewayConnection: typeof import("./getVirtualNetworkGatewayConnection").getVirtualNetworkGatewayConnection = null as any;
export const getVirtualNetworkGatewayConnectionOutput: typeof import("./getVirtualNetworkGatewayConnection").getVirtualNetworkGatewayConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualNetworkGatewayConnection","getVirtualNetworkGatewayConnectionOutput"], () => require("./getVirtualNetworkGatewayConnection"));

export { ImageArgs, ImageState } from "./image";
export type Image = import("./image").Image;
export const Image: typeof import("./image").Image = null as any;
utilities.lazyLoad(exports, ["Image"], () => require("./image"));

export { KeyVaultArgs, KeyVaultState } from "./keyVault";
export type KeyVault = import("./keyVault").KeyVault;
export const KeyVault: typeof import("./keyVault").KeyVault = null as any;
utilities.lazyLoad(exports, ["KeyVault"], () => require("./keyVault"));

export { KeyVaultAccessPolicyArgs, KeyVaultAccessPolicyState } from "./keyVaultAccessPolicy";
export type KeyVaultAccessPolicy = import("./keyVaultAccessPolicy").KeyVaultAccessPolicy;
export const KeyVaultAccessPolicy: typeof import("./keyVaultAccessPolicy").KeyVaultAccessPolicy = null as any;
utilities.lazyLoad(exports, ["KeyVaultAccessPolicy"], () => require("./keyVaultAccessPolicy"));

export { KeyVaultKeyArgs, KeyVaultKeyState } from "./keyVaultKey";
export type KeyVaultKey = import("./keyVaultKey").KeyVaultKey;
export const KeyVaultKey: typeof import("./keyVaultKey").KeyVaultKey = null as any;
utilities.lazyLoad(exports, ["KeyVaultKey"], () => require("./keyVaultKey"));

export { KeyVaultSecretArgs, KeyVaultSecretState } from "./keyVaultSecret";
export type KeyVaultSecret = import("./keyVaultSecret").KeyVaultSecret;
export const KeyVaultSecret: typeof import("./keyVaultSecret").KeyVaultSecret = null as any;
utilities.lazyLoad(exports, ["KeyVaultSecret"], () => require("./keyVaultSecret"));

export { LbArgs, LbState } from "./lb";
export type Lb = import("./lb").Lb;
export const Lb: typeof import("./lb").Lb = null as any;
utilities.lazyLoad(exports, ["Lb"], () => require("./lb"));

export { LbBackendAddressPoolArgs, LbBackendAddressPoolState } from "./lbBackendAddressPool";
export type LbBackendAddressPool = import("./lbBackendAddressPool").LbBackendAddressPool;
export const LbBackendAddressPool: typeof import("./lbBackendAddressPool").LbBackendAddressPool = null as any;
utilities.lazyLoad(exports, ["LbBackendAddressPool"], () => require("./lbBackendAddressPool"));

export { LbNatPoolArgs, LbNatPoolState } from "./lbNatPool";
export type LbNatPool = import("./lbNatPool").LbNatPool;
export const LbNatPool: typeof import("./lbNatPool").LbNatPool = null as any;
utilities.lazyLoad(exports, ["LbNatPool"], () => require("./lbNatPool"));

export { LbNatRuleArgs, LbNatRuleState } from "./lbNatRule";
export type LbNatRule = import("./lbNatRule").LbNatRule;
export const LbNatRule: typeof import("./lbNatRule").LbNatRule = null as any;
utilities.lazyLoad(exports, ["LbNatRule"], () => require("./lbNatRule"));

export { LbProbeArgs, LbProbeState } from "./lbProbe";
export type LbProbe = import("./lbProbe").LbProbe;
export const LbProbe: typeof import("./lbProbe").LbProbe = null as any;
utilities.lazyLoad(exports, ["LbProbe"], () => require("./lbProbe"));

export { LbRuleArgs, LbRuleState } from "./lbRule";
export type LbRule = import("./lbRule").LbRule;
export const LbRule: typeof import("./lbRule").LbRule = null as any;
utilities.lazyLoad(exports, ["LbRule"], () => require("./lbRule"));

export { LinuxVirtualMachineArgs, LinuxVirtualMachineState } from "./linuxVirtualMachine";
export type LinuxVirtualMachine = import("./linuxVirtualMachine").LinuxVirtualMachine;
export const LinuxVirtualMachine: typeof import("./linuxVirtualMachine").LinuxVirtualMachine = null as any;
utilities.lazyLoad(exports, ["LinuxVirtualMachine"], () => require("./linuxVirtualMachine"));

export { LinuxVirtualMachineScaleSetArgs, LinuxVirtualMachineScaleSetState } from "./linuxVirtualMachineScaleSet";
export type LinuxVirtualMachineScaleSet = import("./linuxVirtualMachineScaleSet").LinuxVirtualMachineScaleSet;
export const LinuxVirtualMachineScaleSet: typeof import("./linuxVirtualMachineScaleSet").LinuxVirtualMachineScaleSet = null as any;
utilities.lazyLoad(exports, ["LinuxVirtualMachineScaleSet"], () => require("./linuxVirtualMachineScaleSet"));

export { LocalNetworkGatewayArgs, LocalNetworkGatewayState } from "./localNetworkGateway";
export type LocalNetworkGateway = import("./localNetworkGateway").LocalNetworkGateway;
export const LocalNetworkGateway: typeof import("./localNetworkGateway").LocalNetworkGateway = null as any;
utilities.lazyLoad(exports, ["LocalNetworkGateway"], () => require("./localNetworkGateway"));

export { ManagedDiskArgs, ManagedDiskState } from "./managedDisk";
export type ManagedDisk = import("./managedDisk").ManagedDisk;
export const ManagedDisk: typeof import("./managedDisk").ManagedDisk = null as any;
utilities.lazyLoad(exports, ["ManagedDisk"], () => require("./managedDisk"));

export { NetworkInterfaceArgs, NetworkInterfaceState } from "./networkInterface";
export type NetworkInterface = import("./networkInterface").NetworkInterface;
export const NetworkInterface: typeof import("./networkInterface").NetworkInterface = null as any;
utilities.lazyLoad(exports, ["NetworkInterface"], () => require("./networkInterface"));

export { NetworkInterfaceBackendAddressPoolAssociationArgs, NetworkInterfaceBackendAddressPoolAssociationState } from "./networkInterfaceBackendAddressPoolAssociation";
export type NetworkInterfaceBackendAddressPoolAssociation = import("./networkInterfaceBackendAddressPoolAssociation").NetworkInterfaceBackendAddressPoolAssociation;
export const NetworkInterfaceBackendAddressPoolAssociation: typeof import("./networkInterfaceBackendAddressPoolAssociation").NetworkInterfaceBackendAddressPoolAssociation = null as any;
utilities.lazyLoad(exports, ["NetworkInterfaceBackendAddressPoolAssociation"], () => require("./networkInterfaceBackendAddressPoolAssociation"));

export { NetworkSecurityGroupArgs, NetworkSecurityGroupState } from "./networkSecurityGroup";
export type NetworkSecurityGroup = import("./networkSecurityGroup").NetworkSecurityGroup;
export const NetworkSecurityGroup: typeof import("./networkSecurityGroup").NetworkSecurityGroup = null as any;
utilities.lazyLoad(exports, ["NetworkSecurityGroup"], () => require("./networkSecurityGroup"));

export { NetworkSecurityRuleArgs, NetworkSecurityRuleState } from "./networkSecurityRule";
export type NetworkSecurityRule = import("./networkSecurityRule").NetworkSecurityRule;
export const NetworkSecurityRule: typeof import("./networkSecurityRule").NetworkSecurityRule = null as any;
utilities.lazyLoad(exports, ["NetworkSecurityRule"], () => require("./networkSecurityRule"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { PublicIpArgs, PublicIpState } from "./publicIp";
export type PublicIp = import("./publicIp").PublicIp;
export const PublicIp: typeof import("./publicIp").PublicIp = null as any;
utilities.lazyLoad(exports, ["PublicIp"], () => require("./publicIp"));

export { ResourceGroupArgs, ResourceGroupState } from "./resourceGroup";
export type ResourceGroup = import("./resourceGroup").ResourceGroup;
export const ResourceGroup: typeof import("./resourceGroup").ResourceGroup = null as any;
utilities.lazyLoad(exports, ["ResourceGroup"], () => require("./resourceGroup"));

export { RouteArgs, RouteState } from "./route";
export type Route = import("./route").Route;
export const Route: typeof import("./route").Route = null as any;
utilities.lazyLoad(exports, ["Route"], () => require("./route"));

export { RouteTableArgs, RouteTableState } from "./routeTable";
export type RouteTable = import("./routeTable").RouteTable;
export const RouteTable: typeof import("./routeTable").RouteTable = null as any;
utilities.lazyLoad(exports, ["RouteTable"], () => require("./routeTable"));

export { StorageAccountArgs, StorageAccountState } from "./storageAccount";
export type StorageAccount = import("./storageAccount").StorageAccount;
export const StorageAccount: typeof import("./storageAccount").StorageAccount = null as any;
utilities.lazyLoad(exports, ["StorageAccount"], () => require("./storageAccount"));

export { StorageBlobArgs, StorageBlobState } from "./storageBlob";
export type StorageBlob = import("./storageBlob").StorageBlob;
export const StorageBlob: typeof import("./storageBlob").StorageBlob = null as any;
utilities.lazyLoad(exports, ["StorageBlob"], () => require("./storageBlob"));

export { StorageContainerArgs, StorageContainerState } from "./storageContainer";
export type StorageContainer = import("./storageContainer").StorageContainer;
export const StorageContainer: typeof import("./storageContainer").StorageContainer = null as any;
utilities.lazyLoad(exports, ["StorageContainer"], () => require("./storageContainer"));

export { SubnetArgs, SubnetState } from "./subnet";
export type Subnet = import("./subnet").Subnet;
export const Subnet: typeof import("./subnet").Subnet = null as any;
utilities.lazyLoad(exports, ["Subnet"], () => require("./subnet"));

export { TemplateDeploymentArgs, TemplateDeploymentState } from "./templateDeployment";
export type TemplateDeployment = import("./templateDeployment").TemplateDeployment;
export const TemplateDeployment: typeof import("./templateDeployment").TemplateDeployment = null as any;
utilities.lazyLoad(exports, ["TemplateDeployment"], () => require("./templateDeployment"));

export { VirtualMachineArgs, VirtualMachineState } from "./virtualMachine";
export type VirtualMachine = import("./virtualMachine").VirtualMachine;
export const VirtualMachine: typeof import("./virtualMachine").VirtualMachine = null as any;
utilities.lazyLoad(exports, ["VirtualMachine"], () => require("./virtualMachine"));

export { VirtualMachineDataDiskAttachmentArgs, VirtualMachineDataDiskAttachmentState } from "./virtualMachineDataDiskAttachment";
export type VirtualMachineDataDiskAttachment = import("./virtualMachineDataDiskAttachment").VirtualMachineDataDiskAttachment;
export const VirtualMachineDataDiskAttachment: typeof import("./virtualMachineDataDiskAttachment").VirtualMachineDataDiskAttachment = null as any;
utilities.lazyLoad(exports, ["VirtualMachineDataDiskAttachment"], () => require("./virtualMachineDataDiskAttachment"));

export { VirtualMachineExtensionArgs, VirtualMachineExtensionState } from "./virtualMachineExtension";
export type VirtualMachineExtension = import("./virtualMachineExtension").VirtualMachineExtension;
export const VirtualMachineExtension: typeof import("./virtualMachineExtension").VirtualMachineExtension = null as any;
utilities.lazyLoad(exports, ["VirtualMachineExtension"], () => require("./virtualMachineExtension"));

export { VirtualMachineScaleSetArgs, VirtualMachineScaleSetState } from "./virtualMachineScaleSet";
export type VirtualMachineScaleSet = import("./virtualMachineScaleSet").VirtualMachineScaleSet;
export const VirtualMachineScaleSet: typeof import("./virtualMachineScaleSet").VirtualMachineScaleSet = null as any;
utilities.lazyLoad(exports, ["VirtualMachineScaleSet"], () => require("./virtualMachineScaleSet"));

export { VirtualMachineScaleSetExtensionArgs, VirtualMachineScaleSetExtensionState } from "./virtualMachineScaleSetExtension";
export type VirtualMachineScaleSetExtension = import("./virtualMachineScaleSetExtension").VirtualMachineScaleSetExtension;
export const VirtualMachineScaleSetExtension: typeof import("./virtualMachineScaleSetExtension").VirtualMachineScaleSetExtension = null as any;
utilities.lazyLoad(exports, ["VirtualMachineScaleSetExtension"], () => require("./virtualMachineScaleSetExtension"));

export { VirtualNetworkArgs, VirtualNetworkState } from "./virtualNetwork";
export type VirtualNetwork = import("./virtualNetwork").VirtualNetwork;
export const VirtualNetwork: typeof import("./virtualNetwork").VirtualNetwork = null as any;
utilities.lazyLoad(exports, ["VirtualNetwork"], () => require("./virtualNetwork"));

export { VirtualNetworkGatewayArgs, VirtualNetworkGatewayState } from "./virtualNetworkGateway";
export type VirtualNetworkGateway = import("./virtualNetworkGateway").VirtualNetworkGateway;
export const VirtualNetworkGateway: typeof import("./virtualNetworkGateway").VirtualNetworkGateway = null as any;
utilities.lazyLoad(exports, ["VirtualNetworkGateway"], () => require("./virtualNetworkGateway"));

export { VirtualNetworkGatewayConnectionArgs, VirtualNetworkGatewayConnectionState } from "./virtualNetworkGatewayConnection";
export type VirtualNetworkGatewayConnection = import("./virtualNetworkGatewayConnection").VirtualNetworkGatewayConnection;
export const VirtualNetworkGatewayConnection: typeof import("./virtualNetworkGatewayConnection").VirtualNetworkGatewayConnection = null as any;
utilities.lazyLoad(exports, ["VirtualNetworkGatewayConnection"], () => require("./virtualNetworkGatewayConnection"));

export { VirtualNetworkPeeringArgs, VirtualNetworkPeeringState } from "./virtualNetworkPeering";
export type VirtualNetworkPeering = import("./virtualNetworkPeering").VirtualNetworkPeering;
export const VirtualNetworkPeering: typeof import("./virtualNetworkPeering").VirtualNetworkPeering = null as any;
utilities.lazyLoad(exports, ["VirtualNetworkPeering"], () => require("./virtualNetworkPeering"));

export { WindowsVirtualMachineArgs, WindowsVirtualMachineState } from "./windowsVirtualMachine";
export type WindowsVirtualMachine = import("./windowsVirtualMachine").WindowsVirtualMachine;
export const WindowsVirtualMachine: typeof import("./windowsVirtualMachine").WindowsVirtualMachine = null as any;
utilities.lazyLoad(exports, ["WindowsVirtualMachine"], () => require("./windowsVirtualMachine"));

export { WindowsVirtualMachineScaleSetArgs, WindowsVirtualMachineScaleSetState } from "./windowsVirtualMachineScaleSet";
export type WindowsVirtualMachineScaleSet = import("./windowsVirtualMachineScaleSet").WindowsVirtualMachineScaleSet;
export const WindowsVirtualMachineScaleSet: typeof import("./windowsVirtualMachineScaleSet").WindowsVirtualMachineScaleSet = null as any;
utilities.lazyLoad(exports, ["WindowsVirtualMachineScaleSet"], () => require("./windowsVirtualMachineScaleSet"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azurestack:index/availabilitySet:AvailabilitySet":
                return new AvailabilitySet(name, <any>undefined, { urn })
            case "azurestack:index/dnsARecord:DnsARecord":
                return new DnsARecord(name, <any>undefined, { urn })
            case "azurestack:index/dnsAaaaRecord:DnsAaaaRecord":
                return new DnsAaaaRecord(name, <any>undefined, { urn })
            case "azurestack:index/dnsCnameRecord:DnsCnameRecord":
                return new DnsCnameRecord(name, <any>undefined, { urn })
            case "azurestack:index/dnsMxRecord:DnsMxRecord":
                return new DnsMxRecord(name, <any>undefined, { urn })
            case "azurestack:index/dnsNsRecord:DnsNsRecord":
                return new DnsNsRecord(name, <any>undefined, { urn })
            case "azurestack:index/dnsPtrRecord:DnsPtrRecord":
                return new DnsPtrRecord(name, <any>undefined, { urn })
            case "azurestack:index/dnsSrvRecord:DnsSrvRecord":
                return new DnsSrvRecord(name, <any>undefined, { urn })
            case "azurestack:index/dnsTxtRecord:DnsTxtRecord":
                return new DnsTxtRecord(name, <any>undefined, { urn })
            case "azurestack:index/dnsZone:DnsZone":
                return new DnsZone(name, <any>undefined, { urn })
            case "azurestack:index/image:Image":
                return new Image(name, <any>undefined, { urn })
            case "azurestack:index/keyVault:KeyVault":
                return new KeyVault(name, <any>undefined, { urn })
            case "azurestack:index/keyVaultAccessPolicy:KeyVaultAccessPolicy":
                return new KeyVaultAccessPolicy(name, <any>undefined, { urn })
            case "azurestack:index/keyVaultKey:KeyVaultKey":
                return new KeyVaultKey(name, <any>undefined, { urn })
            case "azurestack:index/keyVaultSecret:KeyVaultSecret":
                return new KeyVaultSecret(name, <any>undefined, { urn })
            case "azurestack:index/lb:Lb":
                return new Lb(name, <any>undefined, { urn })
            case "azurestack:index/lbBackendAddressPool:LbBackendAddressPool":
                return new LbBackendAddressPool(name, <any>undefined, { urn })
            case "azurestack:index/lbNatPool:LbNatPool":
                return new LbNatPool(name, <any>undefined, { urn })
            case "azurestack:index/lbNatRule:LbNatRule":
                return new LbNatRule(name, <any>undefined, { urn })
            case "azurestack:index/lbProbe:LbProbe":
                return new LbProbe(name, <any>undefined, { urn })
            case "azurestack:index/lbRule:LbRule":
                return new LbRule(name, <any>undefined, { urn })
            case "azurestack:index/linuxVirtualMachine:LinuxVirtualMachine":
                return new LinuxVirtualMachine(name, <any>undefined, { urn })
            case "azurestack:index/linuxVirtualMachineScaleSet:LinuxVirtualMachineScaleSet":
                return new LinuxVirtualMachineScaleSet(name, <any>undefined, { urn })
            case "azurestack:index/localNetworkGateway:LocalNetworkGateway":
                return new LocalNetworkGateway(name, <any>undefined, { urn })
            case "azurestack:index/managedDisk:ManagedDisk":
                return new ManagedDisk(name, <any>undefined, { urn })
            case "azurestack:index/networkInterface:NetworkInterface":
                return new NetworkInterface(name, <any>undefined, { urn })
            case "azurestack:index/networkInterfaceBackendAddressPoolAssociation:NetworkInterfaceBackendAddressPoolAssociation":
                return new NetworkInterfaceBackendAddressPoolAssociation(name, <any>undefined, { urn })
            case "azurestack:index/networkSecurityGroup:NetworkSecurityGroup":
                return new NetworkSecurityGroup(name, <any>undefined, { urn })
            case "azurestack:index/networkSecurityRule:NetworkSecurityRule":
                return new NetworkSecurityRule(name, <any>undefined, { urn })
            case "azurestack:index/publicIp:PublicIp":
                return new PublicIp(name, <any>undefined, { urn })
            case "azurestack:index/resourceGroup:ResourceGroup":
                return new ResourceGroup(name, <any>undefined, { urn })
            case "azurestack:index/route:Route":
                return new Route(name, <any>undefined, { urn })
            case "azurestack:index/routeTable:RouteTable":
                return new RouteTable(name, <any>undefined, { urn })
            case "azurestack:index/storageAccount:StorageAccount":
                return new StorageAccount(name, <any>undefined, { urn })
            case "azurestack:index/storageBlob:StorageBlob":
                return new StorageBlob(name, <any>undefined, { urn })
            case "azurestack:index/storageContainer:StorageContainer":
                return new StorageContainer(name, <any>undefined, { urn })
            case "azurestack:index/subnet:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            case "azurestack:index/templateDeployment:TemplateDeployment":
                return new TemplateDeployment(name, <any>undefined, { urn })
            case "azurestack:index/virtualMachine:VirtualMachine":
                return new VirtualMachine(name, <any>undefined, { urn })
            case "azurestack:index/virtualMachineDataDiskAttachment:VirtualMachineDataDiskAttachment":
                return new VirtualMachineDataDiskAttachment(name, <any>undefined, { urn })
            case "azurestack:index/virtualMachineExtension:VirtualMachineExtension":
                return new VirtualMachineExtension(name, <any>undefined, { urn })
            case "azurestack:index/virtualMachineScaleSet:VirtualMachineScaleSet":
                return new VirtualMachineScaleSet(name, <any>undefined, { urn })
            case "azurestack:index/virtualMachineScaleSetExtension:VirtualMachineScaleSetExtension":
                return new VirtualMachineScaleSetExtension(name, <any>undefined, { urn })
            case "azurestack:index/virtualNetwork:VirtualNetwork":
                return new VirtualNetwork(name, <any>undefined, { urn })
            case "azurestack:index/virtualNetworkGateway:VirtualNetworkGateway":
                return new VirtualNetworkGateway(name, <any>undefined, { urn })
            case "azurestack:index/virtualNetworkGatewayConnection:VirtualNetworkGatewayConnection":
                return new VirtualNetworkGatewayConnection(name, <any>undefined, { urn })
            case "azurestack:index/virtualNetworkPeering:VirtualNetworkPeering":
                return new VirtualNetworkPeering(name, <any>undefined, { urn })
            case "azurestack:index/windowsVirtualMachine:WindowsVirtualMachine":
                return new WindowsVirtualMachine(name, <any>undefined, { urn })
            case "azurestack:index/windowsVirtualMachineScaleSet:WindowsVirtualMachineScaleSet":
                return new WindowsVirtualMachineScaleSet(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azurestack", "index/availabilitySet", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/dnsARecord", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/dnsAaaaRecord", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/dnsCnameRecord", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/dnsMxRecord", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/dnsNsRecord", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/dnsPtrRecord", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/dnsSrvRecord", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/dnsTxtRecord", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/dnsZone", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/image", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/keyVault", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/keyVaultAccessPolicy", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/keyVaultKey", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/keyVaultSecret", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/lb", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/lbBackendAddressPool", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/lbNatPool", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/lbNatRule", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/lbProbe", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/lbRule", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/linuxVirtualMachine", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/linuxVirtualMachineScaleSet", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/localNetworkGateway", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/managedDisk", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/networkInterface", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/networkInterfaceBackendAddressPoolAssociation", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/networkSecurityGroup", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/networkSecurityRule", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/publicIp", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/resourceGroup", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/route", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/routeTable", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/storageAccount", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/storageBlob", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/storageContainer", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/subnet", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/templateDeployment", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/virtualMachine", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/virtualMachineDataDiskAttachment", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/virtualMachineExtension", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/virtualMachineScaleSet", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/virtualMachineScaleSetExtension", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/virtualNetwork", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/virtualNetworkGateway", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/virtualNetworkGatewayConnection", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/virtualNetworkPeering", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/windowsVirtualMachine", _module)
pulumi.runtime.registerResourceModule("azurestack", "index/windowsVirtualMachineScaleSet", _module)
pulumi.runtime.registerResourcePackage("azurestack", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:azurestack") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
