// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Route extends pulumi.CustomResource {
    /**
     * Get an existing Route resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouteState, opts?: pulumi.CustomResourceOptions): Route {
        return new Route(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurestack:index/route:Route';

    /**
     * Returns true if the given object is an instance of Route.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Route {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Route.__pulumiType;
    }

    public readonly addressPrefix!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly nextHopInIpAddress!: pulumi.Output<string | undefined>;
    public readonly nextHopType!: pulumi.Output<string>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly routeTableName!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.RouteTimeouts | undefined>;

    /**
     * Create a Route resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouteArgs | RouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouteState | undefined;
            resourceInputs["addressPrefix"] = state ? state.addressPrefix : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nextHopInIpAddress"] = state ? state.nextHopInIpAddress : undefined;
            resourceInputs["nextHopType"] = state ? state.nextHopType : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["routeTableName"] = state ? state.routeTableName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as RouteArgs | undefined;
            if ((!args || args.addressPrefix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'addressPrefix'");
            }
            if ((!args || args.nextHopType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nextHopType'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.routeTableName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routeTableName'");
            }
            resourceInputs["addressPrefix"] = args ? args.addressPrefix : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nextHopInIpAddress"] = args ? args.nextHopInIpAddress : undefined;
            resourceInputs["nextHopType"] = args ? args.nextHopType : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["routeTableName"] = args ? args.routeTableName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Route.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Route resources.
 */
export interface RouteState {
    addressPrefix?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nextHopInIpAddress?: pulumi.Input<string>;
    nextHopType?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    routeTableName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.RouteTimeouts>;
}

/**
 * The set of arguments for constructing a Route resource.
 */
export interface RouteArgs {
    addressPrefix: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nextHopInIpAddress?: pulumi.Input<string>;
    nextHopType: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    routeTableName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.RouteTimeouts>;
}
