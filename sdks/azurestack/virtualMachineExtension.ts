// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VirtualMachineExtension extends pulumi.CustomResource {
    /**
     * Get an existing VirtualMachineExtension resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualMachineExtensionState, opts?: pulumi.CustomResourceOptions): VirtualMachineExtension {
        return new VirtualMachineExtension(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurestack:index/virtualMachineExtension:VirtualMachineExtension';

    /**
     * Returns true if the given object is an instance of VirtualMachineExtension.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualMachineExtension {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualMachineExtension.__pulumiType;
    }

    public readonly autoUpgradeMinorVersion!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly protectedSettings!: pulumi.Output<string | undefined>;
    public readonly publisher!: pulumi.Output<string>;
    public readonly settings!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.VirtualMachineExtensionTimeouts | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly typeHandlerVersion!: pulumi.Output<string>;
    public readonly virtualMachineId!: pulumi.Output<string>;

    /**
     * Create a VirtualMachineExtension resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualMachineExtensionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualMachineExtensionArgs | VirtualMachineExtensionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualMachineExtensionState | undefined;
            resourceInputs["autoUpgradeMinorVersion"] = state ? state.autoUpgradeMinorVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["protectedSettings"] = state ? state.protectedSettings : undefined;
            resourceInputs["publisher"] = state ? state.publisher : undefined;
            resourceInputs["settings"] = state ? state.settings : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["typeHandlerVersion"] = state ? state.typeHandlerVersion : undefined;
            resourceInputs["virtualMachineId"] = state ? state.virtualMachineId : undefined;
        } else {
            const args = argsOrState as VirtualMachineExtensionArgs | undefined;
            if ((!args || args.publisher === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publisher'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.typeHandlerVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'typeHandlerVersion'");
            }
            if ((!args || args.virtualMachineId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualMachineId'");
            }
            resourceInputs["autoUpgradeMinorVersion"] = args ? args.autoUpgradeMinorVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["protectedSettings"] = args?.protectedSettings ? pulumi.secret(args.protectedSettings) : undefined;
            resourceInputs["publisher"] = args ? args.publisher : undefined;
            resourceInputs["settings"] = args ? args.settings : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["typeHandlerVersion"] = args ? args.typeHandlerVersion : undefined;
            resourceInputs["virtualMachineId"] = args ? args.virtualMachineId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["protectedSettings"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(VirtualMachineExtension.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VirtualMachineExtension resources.
 */
export interface VirtualMachineExtensionState {
    autoUpgradeMinorVersion?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    protectedSettings?: pulumi.Input<string>;
    publisher?: pulumi.Input<string>;
    settings?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.VirtualMachineExtensionTimeouts>;
    type?: pulumi.Input<string>;
    typeHandlerVersion?: pulumi.Input<string>;
    virtualMachineId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VirtualMachineExtension resource.
 */
export interface VirtualMachineExtensionArgs {
    autoUpgradeMinorVersion?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    protectedSettings?: pulumi.Input<string>;
    publisher: pulumi.Input<string>;
    settings?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.VirtualMachineExtensionTimeouts>;
    type: pulumi.Input<string>;
    typeHandlerVersion: pulumi.Input<string>;
    virtualMachineId: pulumi.Input<string>;
}
