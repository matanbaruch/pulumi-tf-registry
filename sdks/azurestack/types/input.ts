// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AvailabilitySetTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface DnsARecordTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface DnsAaaaRecordTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface DnsCnameRecordTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface DnsMxRecordRecord {
    exchange: pulumi.Input<string>;
    preference: pulumi.Input<string>;
}

export interface DnsMxRecordTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface DnsNsRecordTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface DnsPtrRecordTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface DnsSrvRecordRecord {
    port: pulumi.Input<number>;
    priority: pulumi.Input<number>;
    target: pulumi.Input<string>;
    weight: pulumi.Input<number>;
}

export interface DnsSrvRecordTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface DnsTxtRecordRecord {
    value: pulumi.Input<string>;
}

export interface DnsTxtRecordTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface DnsZoneSoaRecord {
    email: pulumi.Input<string>;
    expireTime?: pulumi.Input<number>;
    fqdn?: pulumi.Input<string>;
    hostName: pulumi.Input<string>;
    minimumTtl?: pulumi.Input<number>;
    refreshTime?: pulumi.Input<number>;
    retryTime?: pulumi.Input<number>;
    serialNumber?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ttl?: pulumi.Input<number>;
}

export interface DnsZoneTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface GetAvailabilitySetTimeouts {
    read?: string;
}

export interface GetAvailabilitySetTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface GetClientConfigTimeouts {
    read?: string;
}

export interface GetClientConfigTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface GetDnsZoneTimeouts {
    read?: string;
}

export interface GetDnsZoneTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface GetImageTimeouts {
    read?: string;
}

export interface GetImageTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface GetKeyVaultAccessPolicyTimeouts {
    read?: string;
}

export interface GetKeyVaultAccessPolicyTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface GetKeyVaultKeyTimeouts {
    read?: string;
}

export interface GetKeyVaultKeyTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface GetKeyVaultSecretTimeouts {
    read?: string;
}

export interface GetKeyVaultSecretTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface GetKeyVaultTimeouts {
    read?: string;
}

export interface GetKeyVaultTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface GetLbBackendAddressPoolTimeouts {
    read?: string;
}

export interface GetLbBackendAddressPoolTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface GetLbRuleTimeouts {
    read?: string;
}

export interface GetLbRuleTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface GetLbTimeouts {
    read?: string;
}

export interface GetLbTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface GetLocalNetworkGatewayTimeouts {
    read?: string;
}

export interface GetLocalNetworkGatewayTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface GetManagedDiskTimeouts {
    read?: string;
}

export interface GetManagedDiskTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface GetNetworkInterfaceTimeouts {
    read?: string;
}

export interface GetNetworkInterfaceTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface GetNetworkSecurityGroupTimeouts {
    read?: string;
}

export interface GetNetworkSecurityGroupTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface GetPlatformImageTimeouts {
    read?: string;
}

export interface GetPlatformImageTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface GetPublicIpTimeouts {
    read?: string;
}

export interface GetPublicIpTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface GetPublicIpsTimeouts {
    read?: string;
}

export interface GetPublicIpsTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface GetResourceGroupTimeouts {
    read?: string;
}

export interface GetResourceGroupTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface GetResourcesTimeouts {
    read?: string;
}

export interface GetResourcesTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface GetRouteTableTimeouts {
    read?: string;
}

export interface GetRouteTableTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface GetStorageAccountTimeouts {
    read?: string;
}

export interface GetStorageAccountTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface GetStorageContainerTimeouts {
    read?: string;
}

export interface GetStorageContainerTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface GetSubnetTimeouts {
    read?: string;
}

export interface GetSubnetTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface GetVirtualNetworkGatewayConnectionTimeouts {
    read?: string;
}

export interface GetVirtualNetworkGatewayConnectionTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface GetVirtualNetworkGatewayTimeouts {
    read?: string;
}

export interface GetVirtualNetworkGatewayTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface GetVirtualNetworkTimeouts {
    read?: string;
}

export interface GetVirtualNetworkTimeoutsArgs {
    read?: pulumi.Input<string>;
}

export interface ImageDataDisk {
    blobUri?: pulumi.Input<string>;
    caching?: pulumi.Input<string>;
    lun?: pulumi.Input<number>;
    managedDiskId?: pulumi.Input<string>;
    sizeGb?: pulumi.Input<number>;
}

export interface ImageOsDisk {
    blobUri?: pulumi.Input<string>;
    caching?: pulumi.Input<string>;
    managedDiskId?: pulumi.Input<string>;
    osState?: pulumi.Input<string>;
    osType?: pulumi.Input<string>;
    sizeGb?: pulumi.Input<number>;
}

export interface ImageTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface KeyVaultAccessPolicy {
    applicationId: pulumi.Input<string>;
    certificatePermissions: pulumi.Input<pulumi.Input<string>[]>;
    keyPermissions: pulumi.Input<pulumi.Input<string>[]>;
    objectId: pulumi.Input<string>;
    secretPermissions: pulumi.Input<pulumi.Input<string>[]>;
    storagePermissions: pulumi.Input<pulumi.Input<string>[]>;
    tenantId: pulumi.Input<string>;
}

export interface KeyVaultAccessPolicyTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface KeyVaultKeyTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface KeyVaultNetworkAcls {
    bypass: pulumi.Input<string>;
    defaultAction: pulumi.Input<string>;
    ipRules?: pulumi.Input<pulumi.Input<string>[]>;
    virtualNetworkSubnetIds?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface KeyVaultSecretTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface KeyVaultTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface LbBackendAddressPoolTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface LbFrontendIpConfiguration {
    id?: pulumi.Input<string>;
    inboundNatRules?: pulumi.Input<pulumi.Input<string>[]>;
    loadBalancerRules?: pulumi.Input<pulumi.Input<string>[]>;
    name: pulumi.Input<string>;
    privateIpAddress?: pulumi.Input<string>;
    privateIpAddressAllocation?: pulumi.Input<string>;
    publicIpAddressId?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
}

export interface LbNatPoolTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface LbNatRuleTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface LbProbeTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface LbRuleTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface LbTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface LinuxVirtualMachineAdditionalCapabilities {
    ultraSsdEnabled?: pulumi.Input<boolean>;
}

export interface LinuxVirtualMachineAdminSshKey {
    publicKey: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface LinuxVirtualMachineBootDiagnostics {
    storageAccountUri: pulumi.Input<string>;
}

export interface LinuxVirtualMachineOsDisk {
    caching: pulumi.Input<string>;
    diffDiskSettings?: pulumi.Input<inputs.LinuxVirtualMachineOsDiskDiffDiskSettings>;
    diskEncryptionSetId?: pulumi.Input<string>;
    diskSizeGb?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    storageAccountType: pulumi.Input<string>;
    writeAcceleratorEnabled?: pulumi.Input<boolean>;
}

export interface LinuxVirtualMachineOsDiskDiffDiskSettings {
    option: pulumi.Input<string>;
}

export interface LinuxVirtualMachinePlan {
    name: pulumi.Input<string>;
    product: pulumi.Input<string>;
    publisher: pulumi.Input<string>;
}

export interface LinuxVirtualMachineScaleSetAdditionalCapabilities {
    ultraSsdEnabled?: pulumi.Input<boolean>;
}

export interface LinuxVirtualMachineScaleSetAdminSshKey {
    publicKey: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface LinuxVirtualMachineScaleSetAutomaticInstanceRepair {
    enabled: pulumi.Input<boolean>;
    gracePeriod?: pulumi.Input<string>;
}

export interface LinuxVirtualMachineScaleSetAutomaticOsUpgradePolicy {
    disableAutomaticRollback: pulumi.Input<boolean>;
    enableAutomaticOsUpgrade: pulumi.Input<boolean>;
}

export interface LinuxVirtualMachineScaleSetBootDiagnostics {
    storageAccountUri: pulumi.Input<string>;
}

export interface LinuxVirtualMachineScaleSetDataDisk {
    caching: pulumi.Input<string>;
    createOption?: pulumi.Input<string>;
    diskEncryptionSetId?: pulumi.Input<string>;
    diskSizeGb: pulumi.Input<number>;
    lun: pulumi.Input<number>;
    storageAccountType: pulumi.Input<string>;
    writeAcceleratorEnabled?: pulumi.Input<boolean>;
}

export interface LinuxVirtualMachineScaleSetExtension {
    autoUpgradeMinorVersion?: pulumi.Input<boolean>;
    automaticUpgradeEnabled?: pulumi.Input<boolean>;
    forceUpdateTag?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    protectedSettings?: pulumi.Input<string>;
    provisionAfterExtensions?: pulumi.Input<pulumi.Input<string>[]>;
    publisher: pulumi.Input<string>;
    settings?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    typeHandlerVersion: pulumi.Input<string>;
}

export interface LinuxVirtualMachineScaleSetNetworkInterface {
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    enableIpForwarding?: pulumi.Input<boolean>;
    ipConfigurations: pulumi.Input<pulumi.Input<inputs.LinuxVirtualMachineScaleSetNetworkInterfaceIpConfiguration>[]>;
    name: pulumi.Input<string>;
    networkSecurityGroupId?: pulumi.Input<string>;
    primary?: pulumi.Input<boolean>;
}

export interface LinuxVirtualMachineScaleSetNetworkInterfaceIpConfiguration {
    loadBalancerBackendAddressPoolIds?: pulumi.Input<pulumi.Input<string>[]>;
    loadBalancerInboundNatRulesIds?: pulumi.Input<pulumi.Input<string>[]>;
    name: pulumi.Input<string>;
    primary?: pulumi.Input<boolean>;
    subnetId?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

export interface LinuxVirtualMachineScaleSetOsDisk {
    caching: pulumi.Input<string>;
    diffDiskSettings?: pulumi.Input<inputs.LinuxVirtualMachineScaleSetOsDiskDiffDiskSettings>;
    diskEncryptionSetId?: pulumi.Input<string>;
    diskSizeGb?: pulumi.Input<number>;
    storageAccountType: pulumi.Input<string>;
    writeAcceleratorEnabled?: pulumi.Input<boolean>;
}

export interface LinuxVirtualMachineScaleSetOsDiskDiffDiskSettings {
    option: pulumi.Input<string>;
}

export interface LinuxVirtualMachineScaleSetPlan {
    name: pulumi.Input<string>;
    product: pulumi.Input<string>;
    publisher: pulumi.Input<string>;
}

export interface LinuxVirtualMachineScaleSetSecret {
    certificates: pulumi.Input<pulumi.Input<inputs.LinuxVirtualMachineScaleSetSecretCertificate>[]>;
    keyVaultId: pulumi.Input<string>;
}

export interface LinuxVirtualMachineScaleSetSecretCertificate {
}

export interface LinuxVirtualMachineScaleSetSourceImageReference {
    offer: pulumi.Input<string>;
    publisher: pulumi.Input<string>;
    sku: pulumi.Input<string>;
    version: pulumi.Input<string>;
}

export interface LinuxVirtualMachineScaleSetTerminateNotification {
    enabled: pulumi.Input<boolean>;
    timeout?: pulumi.Input<string>;
}

export interface LinuxVirtualMachineScaleSetTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface LinuxVirtualMachineSecret {
    certificates: pulumi.Input<pulumi.Input<inputs.LinuxVirtualMachineSecretCertificate>[]>;
    keyVaultId: pulumi.Input<string>;
}

export interface LinuxVirtualMachineSecretCertificate {
}

export interface LinuxVirtualMachineSourceImageReference {
    offer: pulumi.Input<string>;
    publisher: pulumi.Input<string>;
    sku: pulumi.Input<string>;
    version: pulumi.Input<string>;
}

export interface LinuxVirtualMachineTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface LocalNetworkGatewayBgpSettings {
    asn: pulumi.Input<number>;
    bgpPeeringAddress: pulumi.Input<string>;
    peerWeight?: pulumi.Input<number>;
}

export interface LocalNetworkGatewayTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ManagedDiskEncryption {
    diskEncryptionKey?: pulumi.Input<inputs.ManagedDiskEncryptionDiskEncryptionKey>;
    enabled: pulumi.Input<boolean>;
    keyEncryptionKey?: pulumi.Input<inputs.ManagedDiskEncryptionKeyEncryptionKey>;
}

export interface ManagedDiskEncryptionDiskEncryptionKey {
    secretUrl: pulumi.Input<string>;
    sourceVaultId: pulumi.Input<string>;
}

export interface ManagedDiskEncryptionKeyEncryptionKey {
    keyUrl: pulumi.Input<string>;
    sourceVaultId: pulumi.Input<string>;
}

export interface ManagedDiskTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface NetworkInterfaceBackendAddressPoolAssociationTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface NetworkInterfaceIpConfiguration {
    name: pulumi.Input<string>;
    primary?: pulumi.Input<boolean>;
    privateIpAddress?: pulumi.Input<string>;
    privateIpAddressAllocation: pulumi.Input<string>;
    privateIpAddressVersion?: pulumi.Input<string>;
    publicIpAddressId?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
}

export interface NetworkInterfaceTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface NetworkSecurityGroupSecurityRule {
    access: pulumi.Input<string>;
    description: pulumi.Input<string>;
    destinationAddressPrefix: pulumi.Input<string>;
    destinationAddressPrefixes: pulumi.Input<pulumi.Input<string>[]>;
    destinationPortRange: pulumi.Input<string>;
    destinationPortRanges: pulumi.Input<pulumi.Input<string>[]>;
    direction: pulumi.Input<string>;
    name: pulumi.Input<string>;
    priority: pulumi.Input<number>;
    protocol: pulumi.Input<string>;
    sourceAddressPrefix: pulumi.Input<string>;
    sourceAddressPrefixes: pulumi.Input<pulumi.Input<string>[]>;
    sourcePortRange: pulumi.Input<string>;
    sourcePortRanges: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkSecurityGroupTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface NetworkSecurityRuleTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ProviderFeatures {
    resourceGroup?: pulumi.Input<inputs.ProviderFeaturesResourceGroup>;
    virtualMachine?: pulumi.Input<inputs.ProviderFeaturesVirtualMachine>;
    virtualMachineScaleSet?: pulumi.Input<inputs.ProviderFeaturesVirtualMachineScaleSet>;
}

export interface ProviderFeaturesResourceGroup {
    preventDeletionIfContainsResources?: pulumi.Input<boolean>;
}

export interface ProviderFeaturesVirtualMachine {
    deleteOsDiskOnDeletion?: pulumi.Input<boolean>;
    gracefulShutdown?: pulumi.Input<boolean>;
    skipShutdownAndForceDelete?: pulumi.Input<boolean>;
}

export interface ProviderFeaturesVirtualMachineScaleSet {
    forceDelete?: pulumi.Input<boolean>;
    rollInstancesWhenRequired: pulumi.Input<boolean>;
    scaleToZeroBeforeDeletion?: pulumi.Input<boolean>;
}

export interface PublicIpTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ResourceGroupTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface RouteTableRoute {
    addressPrefix: pulumi.Input<string>;
    name: pulumi.Input<string>;
    nextHopInIpAddress: pulumi.Input<string>;
    nextHopType: pulumi.Input<string>;
}

export interface RouteTableTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface RouteTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface StorageAccountCustomDomain {
    name: pulumi.Input<string>;
    useSubdomain?: pulumi.Input<boolean>;
}

export interface StorageAccountTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface StorageBlobTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface StorageContainerTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface SubnetTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface TemplateDeploymentTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface VirtualMachineBootDiagnostics {
    enabled: pulumi.Input<boolean>;
    storageUri: pulumi.Input<string>;
}

export interface VirtualMachineDataDiskAttachmentTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface VirtualMachineExtensionTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface VirtualMachineIdentity {
    principalId?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualMachineOsProfile {
    adminPassword?: pulumi.Input<string>;
    adminUsername: pulumi.Input<string>;
    computerName: pulumi.Input<string>;
    customData?: pulumi.Input<string>;
}

export interface VirtualMachineOsProfileLinuxConfig {
    disablePasswordAuthentication: pulumi.Input<boolean>;
    sshKeys?: pulumi.Input<pulumi.Input<inputs.VirtualMachineOsProfileLinuxConfigSshKey>[]>;
}

export interface VirtualMachineOsProfileLinuxConfigSshKey {
    keyData: pulumi.Input<string>;
    path: pulumi.Input<string>;
}

export interface VirtualMachineOsProfileSecret {
    sourceVaultId: pulumi.Input<string>;
    vaultCertificates?: pulumi.Input<pulumi.Input<inputs.VirtualMachineOsProfileSecretVaultCertificate>[]>;
}

export interface VirtualMachineOsProfileSecretVaultCertificate {
    certificateStore?: pulumi.Input<string>;
    certificateUrl: pulumi.Input<string>;
}

export interface VirtualMachineOsProfileWindowsConfig {
    additionalUnattendConfigs?: pulumi.Input<pulumi.Input<inputs.VirtualMachineOsProfileWindowsConfigAdditionalUnattendConfig>[]>;
    enableAutomaticUpgrades?: pulumi.Input<boolean>;
    provisionVmAgent?: pulumi.Input<boolean>;
    timezone?: pulumi.Input<string>;
    winrms?: pulumi.Input<pulumi.Input<inputs.VirtualMachineOsProfileWindowsConfigWinrm>[]>;
}

export interface VirtualMachineOsProfileWindowsConfigAdditionalUnattendConfig {
    component: pulumi.Input<string>;
    content: pulumi.Input<string>;
    pass: pulumi.Input<string>;
    settingName: pulumi.Input<string>;
}

export interface VirtualMachineOsProfileWindowsConfigWinrm {
    certificateUrl?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
}

export interface VirtualMachinePlan {
    name: pulumi.Input<string>;
    product: pulumi.Input<string>;
    publisher: pulumi.Input<string>;
}

export interface VirtualMachineScaleSetBootDiagnostics {
    enabled?: pulumi.Input<boolean>;
    storageUri: pulumi.Input<string>;
}

export interface VirtualMachineScaleSetExtension {
    autoUpgradeMinorVersion?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    protectedSettings?: pulumi.Input<string>;
    publisher: pulumi.Input<string>;
    settings?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    typeHandlerVersion: pulumi.Input<string>;
}

export interface VirtualMachineScaleSetExtensionTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface VirtualMachineScaleSetIdentity {
    principalId?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface VirtualMachineScaleSetNetworkProfile {
    /**
     * @deprecated Deprecated
     */
    acceleratedNetworking?: pulumi.Input<boolean>;
    dnsSettings?: pulumi.Input<inputs.VirtualMachineScaleSetNetworkProfileDnsSettings>;
    ipConfigurations: pulumi.Input<pulumi.Input<inputs.VirtualMachineScaleSetNetworkProfileIpConfiguration>[]>;
    ipForwarding?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    networkSecurityGroupId?: pulumi.Input<string>;
    primary: pulumi.Input<boolean>;
}

export interface VirtualMachineScaleSetNetworkProfileDnsSettings {
    dnsServers: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VirtualMachineScaleSetNetworkProfileIpConfiguration {
    applicationGatewayBackendAddressPoolIds?: pulumi.Input<pulumi.Input<string>[]>;
    loadBalancerBackendAddressPoolIds?: pulumi.Input<pulumi.Input<string>[]>;
    loadBalancerInboundNatRulesIds?: pulumi.Input<pulumi.Input<string>[]>;
    name: pulumi.Input<string>;
    primary: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    publicIpAddressConfiguration?: pulumi.Input<inputs.VirtualMachineScaleSetNetworkProfileIpConfigurationPublicIpAddressConfiguration>;
    subnetId: pulumi.Input<string>;
}

export interface VirtualMachineScaleSetNetworkProfileIpConfigurationPublicIpAddressConfiguration {
    domainNameLabel: pulumi.Input<string>;
    idleTimeout: pulumi.Input<number>;
    name: pulumi.Input<string>;
}

export interface VirtualMachineScaleSetOsProfile {
    adminPassword?: pulumi.Input<string>;
    adminUsername: pulumi.Input<string>;
    computerNamePrefix: pulumi.Input<string>;
    customData?: pulumi.Input<string>;
}

export interface VirtualMachineScaleSetOsProfileLinuxConfig {
    disablePasswordAuthentication?: pulumi.Input<boolean>;
    sshKeys?: pulumi.Input<pulumi.Input<inputs.VirtualMachineScaleSetOsProfileLinuxConfigSshKey>[]>;
}

export interface VirtualMachineScaleSetOsProfileLinuxConfigSshKey {
    keyData?: pulumi.Input<string>;
    path: pulumi.Input<string>;
}

export interface VirtualMachineScaleSetOsProfileSecret {
    sourceVaultId: pulumi.Input<string>;
    vaultCertificates?: pulumi.Input<pulumi.Input<inputs.VirtualMachineScaleSetOsProfileSecretVaultCertificate>[]>;
}

export interface VirtualMachineScaleSetOsProfileSecretVaultCertificate {
    certificateStore?: pulumi.Input<string>;
    certificateUrl: pulumi.Input<string>;
}

export interface VirtualMachineScaleSetOsProfileWindowsConfig {
    additionalUnattendConfigs?: pulumi.Input<pulumi.Input<inputs.VirtualMachineScaleSetOsProfileWindowsConfigAdditionalUnattendConfig>[]>;
    enableAutomaticUpgrades?: pulumi.Input<boolean>;
    provisionVmAgent?: pulumi.Input<boolean>;
    winrms?: pulumi.Input<pulumi.Input<inputs.VirtualMachineScaleSetOsProfileWindowsConfigWinrm>[]>;
}

export interface VirtualMachineScaleSetOsProfileWindowsConfigAdditionalUnattendConfig {
    component: pulumi.Input<string>;
    content: pulumi.Input<string>;
    pass: pulumi.Input<string>;
    settingName: pulumi.Input<string>;
}

export interface VirtualMachineScaleSetOsProfileWindowsConfigWinrm {
    certificateUrl?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
}

export interface VirtualMachineScaleSetPlan {
    name: pulumi.Input<string>;
    product: pulumi.Input<string>;
    publisher: pulumi.Input<string>;
}

export interface VirtualMachineScaleSetRollingUpgradePolicy {
    maxBatchInstancePercent?: pulumi.Input<number>;
    maxUnhealthyInstancePercent?: pulumi.Input<number>;
    maxUnhealthyUpgradedInstancePercent?: pulumi.Input<number>;
    pauseTimeBetweenBatches?: pulumi.Input<string>;
}

export interface VirtualMachineScaleSetSku {
    capacity: pulumi.Input<number>;
    name: pulumi.Input<string>;
    tier?: pulumi.Input<string>;
}

export interface VirtualMachineScaleSetStorageProfileDataDisk {
    caching?: pulumi.Input<string>;
    createOption: pulumi.Input<string>;
    diskSizeGb?: pulumi.Input<number>;
    lun: pulumi.Input<number>;
    managedDiskType?: pulumi.Input<string>;
}

export interface VirtualMachineScaleSetStorageProfileImageReference {
    id?: pulumi.Input<string>;
    offer?: pulumi.Input<string>;
    publisher?: pulumi.Input<string>;
    sku?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

export interface VirtualMachineScaleSetStorageProfileOsDisk {
    caching?: pulumi.Input<string>;
    createOption: pulumi.Input<string>;
    image?: pulumi.Input<string>;
    managedDiskType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    osType?: pulumi.Input<string>;
    vhdContainers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VirtualMachineScaleSetTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface VirtualMachineStorageDataDisk {
    caching?: pulumi.Input<string>;
    createOption: pulumi.Input<string>;
    diskSizeGb?: pulumi.Input<number>;
    lun: pulumi.Input<number>;
    managedDiskId?: pulumi.Input<string>;
    managedDiskType?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    vhdUri?: pulumi.Input<string>;
    writeAcceleratorEnabled?: pulumi.Input<boolean>;
}

export interface VirtualMachineStorageImageReference {
    id?: pulumi.Input<string>;
    offer?: pulumi.Input<string>;
    publisher?: pulumi.Input<string>;
    sku?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

export interface VirtualMachineStorageOsDisk {
    caching?: pulumi.Input<string>;
    createOption: pulumi.Input<string>;
    diskSizeGb?: pulumi.Input<number>;
    imageUri?: pulumi.Input<string>;
    managedDiskId?: pulumi.Input<string>;
    managedDiskType?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    osType?: pulumi.Input<string>;
    vhdUri?: pulumi.Input<string>;
    writeAcceleratorEnabled?: pulumi.Input<boolean>;
}

export interface VirtualMachineTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface VirtualNetworkGatewayBgpSettings {
    asn?: pulumi.Input<number>;
    peerWeight?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    peeringAddress?: pulumi.Input<string>;
}

export interface VirtualNetworkGatewayConnectionIpsecPolicy {
    dhGroup: pulumi.Input<string>;
    ikeEncryption: pulumi.Input<string>;
    ikeIntegrity: pulumi.Input<string>;
    ipsecEncryption: pulumi.Input<string>;
    ipsecIntegrity: pulumi.Input<string>;
    pfsGroup: pulumi.Input<string>;
    saDatasize?: pulumi.Input<number>;
    saLifetime?: pulumi.Input<number>;
}

export interface VirtualNetworkGatewayConnectionTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface VirtualNetworkGatewayIpConfiguration {
    name?: pulumi.Input<string>;
    privateIpAddressAllocation?: pulumi.Input<string>;
    publicIpAddressId: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
}

export interface VirtualNetworkGatewayTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface VirtualNetworkGatewayVpnClientConfiguration {
    addressSpaces: pulumi.Input<pulumi.Input<string>[]>;
    radiusServerAddress?: pulumi.Input<string>;
    radiusServerSecret?: pulumi.Input<string>;
    revokedCertificates?: pulumi.Input<pulumi.Input<inputs.VirtualNetworkGatewayVpnClientConfigurationRevokedCertificate>[]>;
    rootCertificates?: pulumi.Input<pulumi.Input<inputs.VirtualNetworkGatewayVpnClientConfigurationRootCertificate>[]>;
    vpnClientProtocols?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VirtualNetworkGatewayVpnClientConfigurationRevokedCertificate {
    name: pulumi.Input<string>;
    thumbprint: pulumi.Input<string>;
}

export interface VirtualNetworkGatewayVpnClientConfigurationRootCertificate {
    name: pulumi.Input<string>;
    publicCertData: pulumi.Input<string>;
}

export interface VirtualNetworkPeeringTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface VirtualNetworkSubnet {
    addressPrefix: pulumi.Input<string>;
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
    securityGroup: pulumi.Input<string>;
}

export interface VirtualNetworkTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface WindowsVirtualMachineAdditionalCapabilities {
    ultraSsdEnabled?: pulumi.Input<boolean>;
}

export interface WindowsVirtualMachineAdditionalUnattendContent {
    content: pulumi.Input<string>;
    setting: pulumi.Input<string>;
}

export interface WindowsVirtualMachineBootDiagnostics {
    storageAccountUri: pulumi.Input<string>;
}

export interface WindowsVirtualMachineOsDisk {
    caching: pulumi.Input<string>;
    diffDiskSettings?: pulumi.Input<inputs.WindowsVirtualMachineOsDiskDiffDiskSettings>;
    diskEncryptionSetId?: pulumi.Input<string>;
    diskSizeGb?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    storageAccountType: pulumi.Input<string>;
    writeAcceleratorEnabled?: pulumi.Input<boolean>;
}

export interface WindowsVirtualMachineOsDiskDiffDiskSettings {
    option: pulumi.Input<string>;
}

export interface WindowsVirtualMachinePlan {
    name: pulumi.Input<string>;
    product: pulumi.Input<string>;
    publisher: pulumi.Input<string>;
}

export interface WindowsVirtualMachineScaleSetAdditionalCapabilities {
    ultraSsdEnabled?: pulumi.Input<boolean>;
}

export interface WindowsVirtualMachineScaleSetAdditionalUnattendContent {
    content: pulumi.Input<string>;
    setting: pulumi.Input<string>;
}

export interface WindowsVirtualMachineScaleSetAutomaticInstanceRepair {
    enabled: pulumi.Input<boolean>;
    gracePeriod?: pulumi.Input<string>;
}

export interface WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicy {
    disableAutomaticRollback: pulumi.Input<boolean>;
    enableAutomaticOsUpgrade: pulumi.Input<boolean>;
}

export interface WindowsVirtualMachineScaleSetBootDiagnostics {
    storageAccountUri: pulumi.Input<string>;
}

export interface WindowsVirtualMachineScaleSetDataDisk {
    caching: pulumi.Input<string>;
    createOption?: pulumi.Input<string>;
    diskEncryptionSetId?: pulumi.Input<string>;
    diskSizeGb: pulumi.Input<number>;
    lun: pulumi.Input<number>;
    storageAccountType: pulumi.Input<string>;
    writeAcceleratorEnabled?: pulumi.Input<boolean>;
}

export interface WindowsVirtualMachineScaleSetExtension {
    autoUpgradeMinorVersion?: pulumi.Input<boolean>;
    automaticUpgradeEnabled?: pulumi.Input<boolean>;
    forceUpdateTag?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    protectedSettings?: pulumi.Input<string>;
    provisionAfterExtensions?: pulumi.Input<pulumi.Input<string>[]>;
    publisher: pulumi.Input<string>;
    settings?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    typeHandlerVersion: pulumi.Input<string>;
}

export interface WindowsVirtualMachineScaleSetNetworkInterface {
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    enableIpForwarding?: pulumi.Input<boolean>;
    ipConfigurations: pulumi.Input<pulumi.Input<inputs.WindowsVirtualMachineScaleSetNetworkInterfaceIpConfiguration>[]>;
    name: pulumi.Input<string>;
    networkSecurityGroupId?: pulumi.Input<string>;
    primary?: pulumi.Input<boolean>;
}

export interface WindowsVirtualMachineScaleSetNetworkInterfaceIpConfiguration {
    loadBalancerBackendAddressPoolIds?: pulumi.Input<pulumi.Input<string>[]>;
    loadBalancerInboundNatRulesIds?: pulumi.Input<pulumi.Input<string>[]>;
    name: pulumi.Input<string>;
    primary?: pulumi.Input<boolean>;
    subnetId?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

export interface WindowsVirtualMachineScaleSetOsDisk {
    caching: pulumi.Input<string>;
    diffDiskSettings?: pulumi.Input<inputs.WindowsVirtualMachineScaleSetOsDiskDiffDiskSettings>;
    diskEncryptionSetId?: pulumi.Input<string>;
    diskSizeGb?: pulumi.Input<number>;
    storageAccountType: pulumi.Input<string>;
    writeAcceleratorEnabled?: pulumi.Input<boolean>;
}

export interface WindowsVirtualMachineScaleSetOsDiskDiffDiskSettings {
    option: pulumi.Input<string>;
}

export interface WindowsVirtualMachineScaleSetPlan {
    name: pulumi.Input<string>;
    product: pulumi.Input<string>;
    publisher: pulumi.Input<string>;
}

export interface WindowsVirtualMachineScaleSetSecret {
    certificates: pulumi.Input<pulumi.Input<inputs.WindowsVirtualMachineScaleSetSecretCertificate>[]>;
    keyVaultId: pulumi.Input<string>;
}

export interface WindowsVirtualMachineScaleSetSecretCertificate {
    store: pulumi.Input<string>;
}

export interface WindowsVirtualMachineScaleSetSourceImageReference {
    offer: pulumi.Input<string>;
    publisher: pulumi.Input<string>;
    sku: pulumi.Input<string>;
    version: pulumi.Input<string>;
}

export interface WindowsVirtualMachineScaleSetTerminateNotification {
    enabled: pulumi.Input<boolean>;
    timeout?: pulumi.Input<string>;
}

export interface WindowsVirtualMachineScaleSetTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface WindowsVirtualMachineScaleSetWinrmListener {
    protocol: pulumi.Input<string>;
}

export interface WindowsVirtualMachineSecret {
    certificates: pulumi.Input<pulumi.Input<inputs.WindowsVirtualMachineSecretCertificate>[]>;
    keyVaultId: pulumi.Input<string>;
}

export interface WindowsVirtualMachineSecretCertificate {
    store: pulumi.Input<string>;
}

export interface WindowsVirtualMachineSourceImageReference {
    offer: pulumi.Input<string>;
    publisher: pulumi.Input<string>;
    sku: pulumi.Input<string>;
    version: pulumi.Input<string>;
}

export interface WindowsVirtualMachineTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    read?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface WindowsVirtualMachineWinrmListener {
    protocol: pulumi.Input<string>;
}
export namespace config {
}
