// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AvailabilitySetTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface DnsARecordTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface DnsAaaaRecordTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface DnsCnameRecordTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface DnsMxRecordRecord {
    exchange: string;
    preference: string;
}

export interface DnsMxRecordTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface DnsNsRecordTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface DnsPtrRecordTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface DnsSrvRecordRecord {
    port: number;
    priority: number;
    target: string;
    weight: number;
}

export interface DnsSrvRecordTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface DnsTxtRecordRecord {
    value: string;
}

export interface DnsTxtRecordTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface DnsZoneSoaRecord {
    email: string;
    expireTime?: number;
    fqdn: string;
    hostName: string;
    minimumTtl?: number;
    refreshTime?: number;
    retryTime?: number;
    serialNumber?: number;
    tags?: {[key: string]: string};
    ttl?: number;
}

export interface DnsZoneTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface GetAvailabilitySetTimeouts {
    read?: string;
}

export interface GetClientConfigTimeouts {
    read?: string;
}

export interface GetDnsZoneTimeouts {
    read?: string;
}

export interface GetImageDataDisk {
    blobUri: string;
    caching: string;
    lun: number;
    managedDiskId: string;
    sizeGb: number;
}

export interface GetImageOsDisk {
    blobUri: string;
    caching: string;
    managedDiskId: string;
    osState: string;
    osType: string;
    sizeGb: number;
}

export interface GetImageTimeouts {
    read?: string;
}

export interface GetKeyVaultAccessPolicy {
    applicationId: string;
    certificatePermissions: string[];
    keyPermissions: string[];
    objectId: string;
    secretPermissions: string[];
    storagePermissions: string[];
    tenantId: string;
}

export interface GetKeyVaultAccessPolicyTimeouts {
    read?: string;
}

export interface GetKeyVaultKeyTimeouts {
    read?: string;
}

export interface GetKeyVaultNetworkAcl {
    bypass: string;
    defaultAction: string;
    ipRules: string[];
    virtualNetworkSubnetIds: string[];
}

export interface GetKeyVaultSecretTimeouts {
    read?: string;
}

export interface GetKeyVaultTimeouts {
    read?: string;
}

export interface GetLbBackendAddressPoolBackendIpConfiguration {
    id: string;
}

export interface GetLbBackendAddressPoolTimeouts {
    read?: string;
}

export interface GetLbFrontendIpConfiguration {
    id: string;
    name: string;
    privateIpAddress: string;
    privateIpAddressAllocation: string;
    publicIpAddressId: string;
    subnetId: string;
    zones: string;
}

export interface GetLbRuleTimeouts {
    read?: string;
}

export interface GetLbTimeouts {
    read?: string;
}

export interface GetLocalNetworkGatewayBgpSetting {
    asn: number;
    bgpPeeringAddress: string;
    peerWeight: number;
}

export interface GetLocalNetworkGatewayTimeouts {
    read?: string;
}

export interface GetManagedDiskTimeouts {
    read?: string;
}

export interface GetNetworkInterfaceIpConfiguration {
    applicationGatewayBackendAddressPoolsIds: string[];
    loadBalancerBackendAddressPoolsIds: string[];
    loadBalancerInboundNatRulesIds: string[];
    name: string;
    primary: boolean;
    privateIpAddress: string;
    privateIpAddressAllocation: string;
    privateIpAddressVersion: string;
    publicIpAddressId: string;
    subnetId: string;
}

export interface GetNetworkInterfaceTimeouts {
    read?: string;
}

export interface GetNetworkSecurityGroupSecurityRule {
    access: string;
    description: string;
    destinationAddressPrefix: string;
    destinationAddressPrefixes: string[];
    destinationPortRange: string;
    destinationPortRanges: string[];
    direction: string;
    name: string;
    priority: number;
    protocol: string;
    sourceAddressPrefix: string;
    sourceAddressPrefixes: string[];
    sourcePortRange: string;
    sourcePortRanges: string[];
}

export interface GetNetworkSecurityGroupTimeouts {
    read?: string;
}

export interface GetPlatformImageTimeouts {
    read?: string;
}

export interface GetPublicIpTimeouts {
    read?: string;
}

export interface GetPublicIpsPublicIp {
    domainNameLabel: string;
    fqdn: string;
    id: string;
    ipAddress: string;
    name: string;
}

export interface GetPublicIpsTimeouts {
    read?: string;
}

export interface GetResourceGroupTimeouts {
    read?: string;
}

export interface GetResourcesResource {
    id: string;
    location: string;
    name: string;
    tags: {[key: string]: string};
    type: string;
}

export interface GetResourcesTimeouts {
    read?: string;
}

export interface GetRouteTableRoute {
    addressPrefix: string;
    name: string;
    nextHopInIpAddress: string;
    nextHopType: string;
}

export interface GetRouteTableTimeouts {
    read?: string;
}

export interface GetStorageAccountCustomDomain {
    name: string;
}

export interface GetStorageAccountTimeouts {
    read?: string;
}

export interface GetStorageContainerTimeouts {
    read?: string;
}

export interface GetSubnetTimeouts {
    read?: string;
}

export interface GetVirtualNetworkGatewayBgpSetting {
    asn: number;
    peerWeight: number;
    peeringAddress: string;
}

export interface GetVirtualNetworkGatewayConnectionIpsecPolicy {
    dhGroup: string;
    ikeEncryption: string;
    ikeIntegrity: string;
    ipsecEncryption: string;
    ipsecIntegrity: string;
    pfsGroup: string;
    saDatasize: number;
    saLifetime: number;
}

export interface GetVirtualNetworkGatewayConnectionTimeouts {
    read?: string;
}

export interface GetVirtualNetworkGatewayIpConfiguration {
    name: string;
    privateIpAddressAllocation: string;
    publicIpAddressId: string;
    subnetId: string;
}

export interface GetVirtualNetworkGatewayTimeouts {
    read?: string;
}

export interface GetVirtualNetworkGatewayVpnClientConfiguration {
    addressSpaces: string[];
    radiusServerAddress: string;
    radiusServerSecret: string;
    revokedCertificates: outputs.GetVirtualNetworkGatewayVpnClientConfigurationRevokedCertificate[];
    rootCertificates: outputs.GetVirtualNetworkGatewayVpnClientConfigurationRootCertificate[];
    vpnClientProtocols: string[];
}

export interface GetVirtualNetworkGatewayVpnClientConfigurationRevokedCertificate {
    name: string;
    thumbprint: string;
}

export interface GetVirtualNetworkGatewayVpnClientConfigurationRootCertificate {
    name: string;
    publicCertData: string;
}

export interface GetVirtualNetworkTimeouts {
    read?: string;
}

export interface ImageDataDisk {
    blobUri: string;
    caching?: string;
    lun?: number;
    managedDiskId?: string;
    sizeGb: number;
}

export interface ImageOsDisk {
    blobUri: string;
    caching?: string;
    managedDiskId: string;
    osState?: string;
    osType?: string;
    sizeGb: number;
}

export interface ImageTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface KeyVaultAccessPolicy {
    applicationId: string;
    certificatePermissions: string[];
    keyPermissions: string[];
    objectId: string;
    secretPermissions: string[];
    storagePermissions: string[];
    tenantId: string;
}

export interface KeyVaultAccessPolicyTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface KeyVaultKeyTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface KeyVaultNetworkAcls {
    bypass: string;
    defaultAction: string;
    ipRules?: string[];
    virtualNetworkSubnetIds?: string[];
}

export interface KeyVaultSecretTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface KeyVaultTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface LbBackendAddressPoolTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface LbFrontendIpConfiguration {
    id: string;
    inboundNatRules: string[];
    loadBalancerRules: string[];
    name: string;
    privateIpAddress: string;
    privateIpAddressAllocation: string;
    publicIpAddressId: string;
    subnetId: string;
}

export interface LbNatPoolTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface LbNatRuleTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface LbProbeTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface LbRuleTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface LbTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface LinuxVirtualMachineAdditionalCapabilities {
    ultraSsdEnabled?: boolean;
}

export interface LinuxVirtualMachineAdminSshKey {
    publicKey: string;
    username: string;
}

export interface LinuxVirtualMachineBootDiagnostics {
    storageAccountUri: string;
}

export interface LinuxVirtualMachineOsDisk {
    caching: string;
    diffDiskSettings?: outputs.LinuxVirtualMachineOsDiskDiffDiskSettings;
    diskEncryptionSetId?: string;
    diskSizeGb: number;
    name: string;
    storageAccountType: string;
    writeAcceleratorEnabled?: boolean;
}

export interface LinuxVirtualMachineOsDiskDiffDiskSettings {
    option: string;
}

export interface LinuxVirtualMachinePlan {
    name: string;
    product: string;
    publisher: string;
}

export interface LinuxVirtualMachineScaleSetAdditionalCapabilities {
    ultraSsdEnabled?: boolean;
}

export interface LinuxVirtualMachineScaleSetAdminSshKey {
    publicKey: string;
    username: string;
}

export interface LinuxVirtualMachineScaleSetAutomaticInstanceRepair {
    enabled: boolean;
    gracePeriod?: string;
}

export interface LinuxVirtualMachineScaleSetAutomaticOsUpgradePolicy {
    disableAutomaticRollback: boolean;
    enableAutomaticOsUpgrade: boolean;
}

export interface LinuxVirtualMachineScaleSetBootDiagnostics {
    storageAccountUri: string;
}

export interface LinuxVirtualMachineScaleSetDataDisk {
    caching: string;
    createOption?: string;
    diskEncryptionSetId?: string;
    diskSizeGb: number;
    lun: number;
    storageAccountType: string;
    writeAcceleratorEnabled?: boolean;
}

export interface LinuxVirtualMachineScaleSetExtension {
    autoUpgradeMinorVersion?: boolean;
    automaticUpgradeEnabled?: boolean;
    forceUpdateTag?: string;
    name: string;
    protectedSettings?: string;
    provisionAfterExtensions?: string[];
    publisher: string;
    settings?: string;
    type: string;
    typeHandlerVersion: string;
}

export interface LinuxVirtualMachineScaleSetNetworkInterface {
    dnsServers?: string[];
    enableIpForwarding?: boolean;
    ipConfigurations: outputs.LinuxVirtualMachineScaleSetNetworkInterfaceIpConfiguration[];
    name: string;
    networkSecurityGroupId?: string;
    primary?: boolean;
}

export interface LinuxVirtualMachineScaleSetNetworkInterfaceIpConfiguration {
    loadBalancerBackendAddressPoolIds?: string[];
    loadBalancerInboundNatRulesIds?: string[];
    name: string;
    primary?: boolean;
    subnetId?: string;
    version?: string;
}

export interface LinuxVirtualMachineScaleSetOsDisk {
    caching: string;
    diffDiskSettings?: outputs.LinuxVirtualMachineScaleSetOsDiskDiffDiskSettings;
    diskEncryptionSetId?: string;
    diskSizeGb: number;
    storageAccountType: string;
    writeAcceleratorEnabled?: boolean;
}

export interface LinuxVirtualMachineScaleSetOsDiskDiffDiskSettings {
    option: string;
}

export interface LinuxVirtualMachineScaleSetPlan {
    name: string;
    product: string;
    publisher: string;
}

export interface LinuxVirtualMachineScaleSetSecret {
    certificates: outputs.LinuxVirtualMachineScaleSetSecretCertificate[];
    keyVaultId: string;
}

export interface LinuxVirtualMachineScaleSetSecretCertificate {
}

export interface LinuxVirtualMachineScaleSetSourceImageReference {
    offer: string;
    publisher: string;
    sku: string;
    version: string;
}

export interface LinuxVirtualMachineScaleSetTerminateNotification {
    enabled: boolean;
    timeout?: string;
}

export interface LinuxVirtualMachineScaleSetTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface LinuxVirtualMachineSecret {
    certificates: outputs.LinuxVirtualMachineSecretCertificate[];
    keyVaultId: string;
}

export interface LinuxVirtualMachineSecretCertificate {
}

export interface LinuxVirtualMachineSourceImageReference {
    offer: string;
    publisher: string;
    sku: string;
    version: string;
}

export interface LinuxVirtualMachineTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface LocalNetworkGatewayBgpSettings {
    asn: number;
    bgpPeeringAddress: string;
    peerWeight: number;
}

export interface LocalNetworkGatewayTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface ManagedDiskEncryption {
    diskEncryptionKey?: outputs.ManagedDiskEncryptionDiskEncryptionKey;
    enabled: boolean;
    keyEncryptionKey?: outputs.ManagedDiskEncryptionKeyEncryptionKey;
}

export interface ManagedDiskEncryptionDiskEncryptionKey {
    secretUrl: string;
    sourceVaultId: string;
}

export interface ManagedDiskEncryptionKeyEncryptionKey {
    keyUrl: string;
    sourceVaultId: string;
}

export interface ManagedDiskTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface NetworkInterfaceBackendAddressPoolAssociationTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface NetworkInterfaceIpConfiguration {
    name: string;
    primary: boolean;
    privateIpAddress: string;
    privateIpAddressAllocation: string;
    privateIpAddressVersion?: string;
    publicIpAddressId?: string;
    subnetId?: string;
}

export interface NetworkInterfaceTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface NetworkSecurityGroupSecurityRule {
    access: string;
    description: string;
    destinationAddressPrefix: string;
    destinationAddressPrefixes: string[];
    destinationPortRange: string;
    destinationPortRanges: string[];
    direction: string;
    name: string;
    priority: number;
    protocol: string;
    sourceAddressPrefix: string;
    sourceAddressPrefixes: string[];
    sourcePortRange: string;
    sourcePortRanges: string[];
}

export interface NetworkSecurityGroupTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface NetworkSecurityRuleTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface PublicIpTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface ResourceGroupTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface RouteTableRoute {
    addressPrefix: string;
    name: string;
    nextHopInIpAddress: string;
    nextHopType: string;
}

export interface RouteTableTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface RouteTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface StorageAccountCustomDomain {
    name: string;
    useSubdomain?: boolean;
}

export interface StorageAccountTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface StorageBlobTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface StorageContainerTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface SubnetTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface TemplateDeploymentTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface VirtualMachineBootDiagnostics {
    enabled: boolean;
    storageUri: string;
}

export interface VirtualMachineDataDiskAttachmentTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface VirtualMachineExtensionTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface VirtualMachineIdentity {
    principalId: string;
    type: string;
}

export interface VirtualMachineOsProfile {
    adminPassword?: string;
    adminUsername: string;
    computerName: string;
    customData: string;
}

export interface VirtualMachineOsProfileLinuxConfig {
    disablePasswordAuthentication: boolean;
    sshKeys?: outputs.VirtualMachineOsProfileLinuxConfigSshKey[];
}

export interface VirtualMachineOsProfileLinuxConfigSshKey {
    keyData: string;
    path: string;
}

export interface VirtualMachineOsProfileSecret {
    sourceVaultId: string;
    vaultCertificates?: outputs.VirtualMachineOsProfileSecretVaultCertificate[];
}

export interface VirtualMachineOsProfileSecretVaultCertificate {
    certificateStore?: string;
    certificateUrl: string;
}

export interface VirtualMachineOsProfileWindowsConfig {
    additionalUnattendConfigs?: outputs.VirtualMachineOsProfileWindowsConfigAdditionalUnattendConfig[];
    enableAutomaticUpgrades?: boolean;
    provisionVmAgent?: boolean;
    timezone?: string;
    winrms?: outputs.VirtualMachineOsProfileWindowsConfigWinrm[];
}

export interface VirtualMachineOsProfileWindowsConfigAdditionalUnattendConfig {
    component: string;
    content: string;
    pass: string;
    settingName: string;
}

export interface VirtualMachineOsProfileWindowsConfigWinrm {
    certificateUrl?: string;
    protocol: string;
}

export interface VirtualMachinePlan {
    name: string;
    product: string;
    publisher: string;
}

export interface VirtualMachineScaleSetBootDiagnostics {
    enabled?: boolean;
    storageUri: string;
}

export interface VirtualMachineScaleSetExtension {
    autoUpgradeMinorVersion?: boolean;
    name: string;
    protectedSettings?: string;
    publisher: string;
    settings?: string;
    type: string;
    typeHandlerVersion: string;
}

export interface VirtualMachineScaleSetExtensionTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface VirtualMachineScaleSetIdentity {
    principalId: string;
    type: string;
}

export interface VirtualMachineScaleSetNetworkProfile {
    /**
     * @deprecated Deprecated
     */
    acceleratedNetworking?: boolean;
    dnsSettings?: outputs.VirtualMachineScaleSetNetworkProfileDnsSettings;
    ipConfigurations: outputs.VirtualMachineScaleSetNetworkProfileIpConfiguration[];
    ipForwarding?: boolean;
    name: string;
    networkSecurityGroupId?: string;
    primary: boolean;
}

export interface VirtualMachineScaleSetNetworkProfileDnsSettings {
    dnsServers: string[];
}

export interface VirtualMachineScaleSetNetworkProfileIpConfiguration {
    applicationGatewayBackendAddressPoolIds?: string[];
    loadBalancerBackendAddressPoolIds?: string[];
    loadBalancerInboundNatRulesIds: string[];
    name: string;
    primary: boolean;
    /**
     * @deprecated Deprecated
     */
    publicIpAddressConfiguration?: outputs.VirtualMachineScaleSetNetworkProfileIpConfigurationPublicIpAddressConfiguration;
    subnetId: string;
}

export interface VirtualMachineScaleSetNetworkProfileIpConfigurationPublicIpAddressConfiguration {
    domainNameLabel: string;
    idleTimeout: number;
    name: string;
}

export interface VirtualMachineScaleSetOsProfile {
    adminPassword?: string;
    adminUsername: string;
    computerNamePrefix: string;
    customData?: string;
}

export interface VirtualMachineScaleSetOsProfileLinuxConfig {
    disablePasswordAuthentication?: boolean;
    sshKeys?: outputs.VirtualMachineScaleSetOsProfileLinuxConfigSshKey[];
}

export interface VirtualMachineScaleSetOsProfileLinuxConfigSshKey {
    keyData?: string;
    path: string;
}

export interface VirtualMachineScaleSetOsProfileSecret {
    sourceVaultId: string;
    vaultCertificates?: outputs.VirtualMachineScaleSetOsProfileSecretVaultCertificate[];
}

export interface VirtualMachineScaleSetOsProfileSecretVaultCertificate {
    certificateStore?: string;
    certificateUrl: string;
}

export interface VirtualMachineScaleSetOsProfileWindowsConfig {
    additionalUnattendConfigs?: outputs.VirtualMachineScaleSetOsProfileWindowsConfigAdditionalUnattendConfig[];
    enableAutomaticUpgrades?: boolean;
    provisionVmAgent?: boolean;
    winrms?: outputs.VirtualMachineScaleSetOsProfileWindowsConfigWinrm[];
}

export interface VirtualMachineScaleSetOsProfileWindowsConfigAdditionalUnattendConfig {
    component: string;
    content: string;
    pass: string;
    settingName: string;
}

export interface VirtualMachineScaleSetOsProfileWindowsConfigWinrm {
    certificateUrl?: string;
    protocol: string;
}

export interface VirtualMachineScaleSetPlan {
    name: string;
    product: string;
    publisher: string;
}

export interface VirtualMachineScaleSetRollingUpgradePolicy {
    maxBatchInstancePercent?: number;
    maxUnhealthyInstancePercent?: number;
    maxUnhealthyUpgradedInstancePercent?: number;
    pauseTimeBetweenBatches?: string;
}

export interface VirtualMachineScaleSetSku {
    capacity: number;
    name: string;
    tier: string;
}

export interface VirtualMachineScaleSetStorageProfileDataDisk {
    caching: string;
    createOption: string;
    diskSizeGb: number;
    lun: number;
    managedDiskType: string;
}

export interface VirtualMachineScaleSetStorageProfileImageReference {
    id?: string;
    offer?: string;
    publisher?: string;
    sku?: string;
    version?: string;
}

export interface VirtualMachineScaleSetStorageProfileOsDisk {
    caching: string;
    createOption: string;
    image?: string;
    managedDiskType: string;
    name?: string;
    osType?: string;
    vhdContainers?: string[];
}

export interface VirtualMachineScaleSetTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface VirtualMachineStorageDataDisk {
    caching: string;
    createOption: string;
    diskSizeGb: number;
    lun: number;
    managedDiskId: string;
    managedDiskType: string;
    name: string;
    vhdUri?: string;
    writeAcceleratorEnabled?: boolean;
}

export interface VirtualMachineStorageImageReference {
    id?: string;
    offer?: string;
    publisher?: string;
    sku?: string;
    version: string;
}

export interface VirtualMachineStorageOsDisk {
    caching: string;
    createOption: string;
    diskSizeGb: number;
    imageUri?: string;
    managedDiskId: string;
    managedDiskType: string;
    name: string;
    osType: string;
    vhdUri?: string;
    writeAcceleratorEnabled?: boolean;
}

export interface VirtualMachineTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface VirtualNetworkGatewayBgpSettings {
    asn?: number;
    peerWeight?: number;
    /**
     * @deprecated Deprecated
     */
    peeringAddress: string;
}

export interface VirtualNetworkGatewayConnectionIpsecPolicy {
    dhGroup: string;
    ikeEncryption: string;
    ikeIntegrity: string;
    ipsecEncryption: string;
    ipsecIntegrity: string;
    pfsGroup: string;
    saDatasize: number;
    saLifetime: number;
}

export interface VirtualNetworkGatewayConnectionTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface VirtualNetworkGatewayIpConfiguration {
    name?: string;
    privateIpAddressAllocation?: string;
    publicIpAddressId: string;
    subnetId: string;
}

export interface VirtualNetworkGatewayTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface VirtualNetworkGatewayVpnClientConfiguration {
    addressSpaces: string[];
    radiusServerAddress?: string;
    radiusServerSecret?: string;
    revokedCertificates?: outputs.VirtualNetworkGatewayVpnClientConfigurationRevokedCertificate[];
    rootCertificates?: outputs.VirtualNetworkGatewayVpnClientConfigurationRootCertificate[];
    vpnClientProtocols: string[];
}

export interface VirtualNetworkGatewayVpnClientConfigurationRevokedCertificate {
    name: string;
    thumbprint: string;
}

export interface VirtualNetworkGatewayVpnClientConfigurationRootCertificate {
    name: string;
    publicCertData: string;
}

export interface VirtualNetworkPeeringTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface VirtualNetworkSubnet {
    addressPrefix: string;
    id: string;
    name: string;
    securityGroup: string;
}

export interface VirtualNetworkTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface WindowsVirtualMachineAdditionalCapabilities {
    ultraSsdEnabled?: boolean;
}

export interface WindowsVirtualMachineAdditionalUnattendContent {
    content: string;
    setting: string;
}

export interface WindowsVirtualMachineBootDiagnostics {
    storageAccountUri: string;
}

export interface WindowsVirtualMachineOsDisk {
    caching: string;
    diffDiskSettings?: outputs.WindowsVirtualMachineOsDiskDiffDiskSettings;
    diskEncryptionSetId?: string;
    diskSizeGb: number;
    name: string;
    storageAccountType: string;
    writeAcceleratorEnabled?: boolean;
}

export interface WindowsVirtualMachineOsDiskDiffDiskSettings {
    option: string;
}

export interface WindowsVirtualMachinePlan {
    name: string;
    product: string;
    publisher: string;
}

export interface WindowsVirtualMachineScaleSetAdditionalCapabilities {
    ultraSsdEnabled?: boolean;
}

export interface WindowsVirtualMachineScaleSetAdditionalUnattendContent {
    content: string;
    setting: string;
}

export interface WindowsVirtualMachineScaleSetAutomaticInstanceRepair {
    enabled: boolean;
    gracePeriod?: string;
}

export interface WindowsVirtualMachineScaleSetAutomaticOsUpgradePolicy {
    disableAutomaticRollback: boolean;
    enableAutomaticOsUpgrade: boolean;
}

export interface WindowsVirtualMachineScaleSetBootDiagnostics {
    storageAccountUri: string;
}

export interface WindowsVirtualMachineScaleSetDataDisk {
    caching: string;
    createOption?: string;
    diskEncryptionSetId?: string;
    diskSizeGb: number;
    lun: number;
    storageAccountType: string;
    writeAcceleratorEnabled?: boolean;
}

export interface WindowsVirtualMachineScaleSetExtension {
    autoUpgradeMinorVersion?: boolean;
    automaticUpgradeEnabled?: boolean;
    forceUpdateTag?: string;
    name: string;
    protectedSettings?: string;
    provisionAfterExtensions?: string[];
    publisher: string;
    settings?: string;
    type: string;
    typeHandlerVersion: string;
}

export interface WindowsVirtualMachineScaleSetNetworkInterface {
    dnsServers?: string[];
    enableIpForwarding?: boolean;
    ipConfigurations: outputs.WindowsVirtualMachineScaleSetNetworkInterfaceIpConfiguration[];
    name: string;
    networkSecurityGroupId?: string;
    primary?: boolean;
}

export interface WindowsVirtualMachineScaleSetNetworkInterfaceIpConfiguration {
    loadBalancerBackendAddressPoolIds?: string[];
    loadBalancerInboundNatRulesIds?: string[];
    name: string;
    primary?: boolean;
    subnetId?: string;
    version?: string;
}

export interface WindowsVirtualMachineScaleSetOsDisk {
    caching: string;
    diffDiskSettings?: outputs.WindowsVirtualMachineScaleSetOsDiskDiffDiskSettings;
    diskEncryptionSetId?: string;
    diskSizeGb: number;
    storageAccountType: string;
    writeAcceleratorEnabled?: boolean;
}

export interface WindowsVirtualMachineScaleSetOsDiskDiffDiskSettings {
    option: string;
}

export interface WindowsVirtualMachineScaleSetPlan {
    name: string;
    product: string;
    publisher: string;
}

export interface WindowsVirtualMachineScaleSetSecret {
    certificates: outputs.WindowsVirtualMachineScaleSetSecretCertificate[];
    keyVaultId: string;
}

export interface WindowsVirtualMachineScaleSetSecretCertificate {
    store: string;
}

export interface WindowsVirtualMachineScaleSetSourceImageReference {
    offer: string;
    publisher: string;
    sku: string;
    version: string;
}

export interface WindowsVirtualMachineScaleSetTerminateNotification {
    enabled: boolean;
    timeout?: string;
}

export interface WindowsVirtualMachineScaleSetTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface WindowsVirtualMachineScaleSetWinrmListener {
    protocol: string;
}

export interface WindowsVirtualMachineSecret {
    certificates: outputs.WindowsVirtualMachineSecretCertificate[];
    keyVaultId: string;
}

export interface WindowsVirtualMachineSecretCertificate {
    store: string;
}

export interface WindowsVirtualMachineSourceImageReference {
    offer: string;
    publisher: string;
    sku: string;
    version: string;
}

export interface WindowsVirtualMachineTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface WindowsVirtualMachineWinrmListener {
    protocol: string;
}

export namespace config {
    export interface Features {
        resourceGroup?: outputs.config.FeaturesResourceGroup;
        virtualMachine?: outputs.config.FeaturesVirtualMachine;
        virtualMachineScaleSet?: outputs.config.FeaturesVirtualMachineScaleSet;
    }

    export interface FeaturesResourceGroup {
        preventDeletionIfContainsResources?: boolean;
    }

    export interface FeaturesVirtualMachine {
        deleteOsDiskOnDeletion?: boolean;
        gracefulShutdown?: boolean;
        skipShutdownAndForceDelete?: boolean;
    }

    export interface FeaturesVirtualMachineScaleSet {
        forceDelete?: boolean;
        rollInstancesWhenRequired: boolean;
        scaleToZeroBeforeDeletion?: boolean;
    }

}
