// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("azurestack");

/**
 * The Hostname which should be used for the Azure Metadata Service.
 */
export declare const armEndpoint: string | undefined;
Object.defineProperty(exports, "armEndpoint", {
    get() {
        return __config.get("armEndpoint");
    },
    enumerable: true,
});

export declare const auxiliaryTenantIds: string[] | undefined;
Object.defineProperty(exports, "auxiliaryTenantIds", {
    get() {
        return __config.getObject<string[]>("auxiliaryTenantIds");
    },
    enumerable: true,
});

/**
 * The password associated with the Client Certificate. For use when authenticating as a Service Principal using a Client
 * Certificate
 */
export declare const clientCertificatePassword: string | undefined;
Object.defineProperty(exports, "clientCertificatePassword", {
    get() {
        return __config.get("clientCertificatePassword");
    },
    enumerable: true,
});

/**
 * The path to the Client Certificate associated with the Service Principal for use when authenticating as a Service
 * Principal using a Client Certificate.
 */
export declare const clientCertificatePath: string | undefined;
Object.defineProperty(exports, "clientCertificatePath", {
    get() {
        return __config.get("clientCertificatePath");
    },
    enumerable: true,
});

/**
 * The Client ID which should be used.
 */
export declare const clientId: string | undefined;
Object.defineProperty(exports, "clientId", {
    get() {
        return __config.get("clientId");
    },
    enumerable: true,
});

/**
 * The Client Secret which should be used. For use When authenticating as a Service Principal using a Client Secret.
 */
export declare const clientSecret: string | undefined;
Object.defineProperty(exports, "clientSecret", {
    get() {
        return __config.get("clientSecret");
    },
    enumerable: true,
});

/**
 * This will disable the x-ms-correlation-request-id header.
 */
export declare const disableCorrelationRequestId: boolean | undefined;
Object.defineProperty(exports, "disableCorrelationRequestId", {
    get() {
        return __config.getObject<boolean>("disableCorrelationRequestId");
    },
    enumerable: true,
});

/**
 * The Cloud Environment which should be used.
 */
export declare const environment: string | undefined;
Object.defineProperty(exports, "environment", {
    get() {
        return __config.get("environment");
    },
    enumerable: true,
});

export declare const features: outputs.config.Features | undefined;
Object.defineProperty(exports, "features", {
    get() {
        return __config.getObject<outputs.config.Features>("features");
    },
    enumerable: true,
});

/**
 * The Hostname which should be used for the Azure Metadata Service.
 */
export declare const metadataHost: string | undefined;
Object.defineProperty(exports, "metadataHost", {
    get() {
        return __config.get("metadataHost");
    },
    enumerable: true,
});

/**
 * The path to a custom endpoint for Managed Service Identity - in most circumstances this should be detected
 * automatically.
 */
export declare const msiEndpoint: string | undefined;
Object.defineProperty(exports, "msiEndpoint", {
    get() {
        return __config.get("msiEndpoint");
    },
    enumerable: true,
});

/**
 * Should the AzureStack Provider skip registering all of the Resource Providers that it supports, if they're not already
 * registered?
 */
export declare const skipProviderRegistration: boolean | undefined;
Object.defineProperty(exports, "skipProviderRegistration", {
    get() {
        return __config.getObject<boolean>("skipProviderRegistration");
    },
    enumerable: true,
});

/**
 * The Subscription ID which should be used.
 */
export declare const subscriptionId: string | undefined;
Object.defineProperty(exports, "subscriptionId", {
    get() {
        return __config.get("subscriptionId");
    },
    enumerable: true,
});

/**
 * The Tenant ID which should be used.
 */
export declare const tenantId: string | undefined;
Object.defineProperty(exports, "tenantId", {
    get() {
        return __config.get("tenantId");
    },
    enumerable: true,
});

/**
 * Allowed Managed Service Identity be used for Authentication.
 */
export declare const useMsi: boolean | undefined;
Object.defineProperty(exports, "useMsi", {
    get() {
        return __config.getObject<boolean>("useMsi");
    },
    enumerable: true,
});

