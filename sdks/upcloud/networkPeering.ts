// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkPeering extends pulumi.CustomResource {
    /**
     * Get an existing NetworkPeering resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkPeeringState, opts?: pulumi.CustomResourceOptions): NetworkPeering {
        return new NetworkPeering(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'upcloud:index/networkPeering:NetworkPeering';

    /**
     * Returns true if the given object is an instance of NetworkPeering.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkPeering {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkPeering.__pulumiType;
    }

    /**
     * Configured status of the network peering.
     */
    public readonly configuredStatus!: pulumi.Output<string>;
    /**
     * User defined key-value pairs to classify the network peering.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Name of the network peering.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Local network of the network peering.
     */
    public readonly networks!: pulumi.Output<outputs.NetworkPeeringNetwork[] | undefined>;
    /**
     * Peer network of the network peering.
     */
    public readonly peerNetworks!: pulumi.Output<outputs.NetworkPeeringPeerNetwork[] | undefined>;

    /**
     * Create a NetworkPeering resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NetworkPeeringArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkPeeringArgs | NetworkPeeringState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkPeeringState | undefined;
            resourceInputs["configuredStatus"] = state ? state.configuredStatus : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["peerNetworks"] = state ? state.peerNetworks : undefined;
        } else {
            const args = argsOrState as NetworkPeeringArgs | undefined;
            resourceInputs["configuredStatus"] = args ? args.configuredStatus : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["peerNetworks"] = args ? args.peerNetworks : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkPeering.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkPeering resources.
 */
export interface NetworkPeeringState {
    /**
     * Configured status of the network peering.
     */
    configuredStatus?: pulumi.Input<string>;
    /**
     * User defined key-value pairs to classify the network peering.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the network peering.
     */
    name?: pulumi.Input<string>;
    /**
     * Local network of the network peering.
     */
    networks?: pulumi.Input<pulumi.Input<inputs.NetworkPeeringNetwork>[]>;
    /**
     * Peer network of the network peering.
     */
    peerNetworks?: pulumi.Input<pulumi.Input<inputs.NetworkPeeringPeerNetwork>[]>;
}

/**
 * The set of arguments for constructing a NetworkPeering resource.
 */
export interface NetworkPeeringArgs {
    /**
     * Configured status of the network peering.
     */
    configuredStatus?: pulumi.Input<string>;
    /**
     * User defined key-value pairs to classify the network peering.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the network peering.
     */
    name?: pulumi.Input<string>;
    /**
     * Local network of the network peering.
     */
    networks?: pulumi.Input<pulumi.Input<inputs.NetworkPeeringNetwork>[]>;
    /**
     * Peer network of the network peering.
     */
    peerNetworks?: pulumi.Input<pulumi.Input<inputs.NetworkPeeringPeerNetwork>[]>;
}
