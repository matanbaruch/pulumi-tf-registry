// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LoadbalancerStaticBackendMember extends pulumi.CustomResource {
    /**
     * Get an existing LoadbalancerStaticBackendMember resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadbalancerStaticBackendMemberState, opts?: pulumi.CustomResourceOptions): LoadbalancerStaticBackendMember {
        return new LoadbalancerStaticBackendMember(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'upcloud:index/loadbalancerStaticBackendMember:LoadbalancerStaticBackendMember';

    /**
     * Returns true if the given object is an instance of LoadbalancerStaticBackendMember.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadbalancerStaticBackendMember {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadbalancerStaticBackendMember.__pulumiType;
    }

    /**
     * ID of the load balancer backend to which the member is connected.
     */
    public readonly backend!: pulumi.Output<string>;
    /**
     * Indicates if the member is enabled. Disabled members are excluded from load balancing.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Server IP address in the customer private network.
     */
    public readonly ip!: pulumi.Output<string>;
    /**
     * Maximum number of sessions before queueing.
     */
    public readonly maxSessions!: pulumi.Output<number>;
    /**
     * The name of the member must be unique within the load balancer backend service.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Server port.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * Used to adjust the server's weight relative to other servers. All servers will receive a load proportional to their
     * weight relative to the sum of all weights, so the higher the weight, the higher the load. A value of 0 means the server
     * will not participate in load balancing but will still accept persistent connections.
     */
    public readonly weight!: pulumi.Output<number>;

    /**
     * Create a LoadbalancerStaticBackendMember resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadbalancerStaticBackendMemberArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadbalancerStaticBackendMemberArgs | LoadbalancerStaticBackendMemberState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadbalancerStaticBackendMemberState | undefined;
            resourceInputs["backend"] = state ? state.backend : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["maxSessions"] = state ? state.maxSessions : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as LoadbalancerStaticBackendMemberArgs | undefined;
            if ((!args || args.backend === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backend'");
            }
            if ((!args || args.ip === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ip'");
            }
            if ((!args || args.maxSessions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxSessions'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.weight === undefined) && !opts.urn) {
                throw new Error("Missing required property 'weight'");
            }
            resourceInputs["backend"] = args ? args.backend : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["maxSessions"] = args ? args.maxSessions : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadbalancerStaticBackendMember.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LoadbalancerStaticBackendMember resources.
 */
export interface LoadbalancerStaticBackendMemberState {
    /**
     * ID of the load balancer backend to which the member is connected.
     */
    backend?: pulumi.Input<string>;
    /**
     * Indicates if the member is enabled. Disabled members are excluded from load balancing.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Server IP address in the customer private network.
     */
    ip?: pulumi.Input<string>;
    /**
     * Maximum number of sessions before queueing.
     */
    maxSessions?: pulumi.Input<number>;
    /**
     * The name of the member must be unique within the load balancer backend service.
     */
    name?: pulumi.Input<string>;
    /**
     * Server port.
     */
    port?: pulumi.Input<number>;
    /**
     * Used to adjust the server's weight relative to other servers. All servers will receive a load proportional to their
     * weight relative to the sum of all weights, so the higher the weight, the higher the load. A value of 0 means the server
     * will not participate in load balancing but will still accept persistent connections.
     */
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a LoadbalancerStaticBackendMember resource.
 */
export interface LoadbalancerStaticBackendMemberArgs {
    /**
     * ID of the load balancer backend to which the member is connected.
     */
    backend: pulumi.Input<string>;
    /**
     * Indicates if the member is enabled. Disabled members are excluded from load balancing.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Server IP address in the customer private network.
     */
    ip: pulumi.Input<string>;
    /**
     * Maximum number of sessions before queueing.
     */
    maxSessions: pulumi.Input<number>;
    /**
     * The name of the member must be unique within the load balancer backend service.
     */
    name?: pulumi.Input<string>;
    /**
     * Server port.
     */
    port: pulumi.Input<number>;
    /**
     * Used to adjust the server's weight relative to other servers. All servers will receive a load proportional to their
     * weight relative to the sum of all weights, so the higher the weight, the higher the load. A value of 0 means the server
     * will not participate in load balancing but will still accept persistent connections.
     */
    weight: pulumi.Input<number>;
}
