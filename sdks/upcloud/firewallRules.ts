// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FirewallRules extends pulumi.CustomResource {
    /**
     * Get an existing FirewallRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallRulesState, opts?: pulumi.CustomResourceOptions): FirewallRules {
        return new FirewallRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'upcloud:index/firewallRules:FirewallRules';

    /**
     * Returns true if the given object is an instance of FirewallRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirewallRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallRules.__pulumiType;
    }

    /**
     * A single firewall rule. If used, IP address and port ranges must have both start and end values specified. These can be
     * the same value if only one IP address or port number is specified. Source and destination port numbers can only be set
     * if the protocol is TCP or UDP. The ICMP type may only be set if the protocol is ICMP. Typical firewall rule should have
     * "action", "direction", "protocol", "family" and at least one destination/source-address/port range. The default rule can
     * be created by providing only "action" and "direction" attributes. Default rule should be defined last.
     */
    public readonly firewallRules!: pulumi.Output<outputs.FirewallRulesFirewallRule[]>;
    /**
     * The unique id of the server to be protected the firewall rules
     */
    public readonly serverId!: pulumi.Output<string>;

    /**
     * Create a FirewallRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirewallRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallRulesArgs | FirewallRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallRulesState | undefined;
            resourceInputs["firewallRules"] = state ? state.firewallRules : undefined;
            resourceInputs["serverId"] = state ? state.serverId : undefined;
        } else {
            const args = argsOrState as FirewallRulesArgs | undefined;
            if ((!args || args.firewallRules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'firewallRules'");
            }
            if ((!args || args.serverId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverId'");
            }
            resourceInputs["firewallRules"] = args ? args.firewallRules : undefined;
            resourceInputs["serverId"] = args ? args.serverId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirewallRules.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FirewallRules resources.
 */
export interface FirewallRulesState {
    /**
     * A single firewall rule. If used, IP address and port ranges must have both start and end values specified. These can be
     * the same value if only one IP address or port number is specified. Source and destination port numbers can only be set
     * if the protocol is TCP or UDP. The ICMP type may only be set if the protocol is ICMP. Typical firewall rule should have
     * "action", "direction", "protocol", "family" and at least one destination/source-address/port range. The default rule can
     * be created by providing only "action" and "direction" attributes. Default rule should be defined last.
     */
    firewallRules?: pulumi.Input<pulumi.Input<inputs.FirewallRulesFirewallRule>[]>;
    /**
     * The unique id of the server to be protected the firewall rules
     */
    serverId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FirewallRules resource.
 */
export interface FirewallRulesArgs {
    /**
     * A single firewall rule. If used, IP address and port ranges must have both start and end values specified. These can be
     * the same value if only one IP address or port number is specified. Source and destination port numbers can only be set
     * if the protocol is TCP or UDP. The ICMP type may only be set if the protocol is ICMP. Typical firewall rule should have
     * "action", "direction", "protocol", "family" and at least one destination/source-address/port range. The default rule can
     * be created by providing only "action" and "direction" attributes. Default rule should be defined last.
     */
    firewallRules: pulumi.Input<pulumi.Input<inputs.FirewallRulesFirewallRule>[]>;
    /**
     * The unique id of the server to be protected the firewall rules
     */
    serverId: pulumi.Input<string>;
}
