// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DestinationClickhouseArgs, DestinationClickhouseState } from "./destinationClickhouse";
export type DestinationClickhouse = import("./destinationClickhouse").DestinationClickhouse;
export const DestinationClickhouse: typeof import("./destinationClickhouse").DestinationClickhouse = null as any;
utilities.lazyLoad(exports, ["DestinationClickhouse"], () => require("./destinationClickhouse"));

export { DestinationSnowflakeArgs, DestinationSnowflakeState } from "./destinationSnowflake";
export type DestinationSnowflake = import("./destinationSnowflake").DestinationSnowflake;
export const DestinationSnowflake: typeof import("./destinationSnowflake").DestinationSnowflake = null as any;
utilities.lazyLoad(exports, ["DestinationSnowflake"], () => require("./destinationSnowflake"));

export { GetTransformArgs, GetTransformResult, GetTransformOutputArgs } from "./getTransform";
export const getTransform: typeof import("./getTransform").getTransform = null as any;
export const getTransformOutput: typeof import("./getTransform").getTransformOutput = null as any;
utilities.lazyLoad(exports, ["getTransform","getTransformOutput"], () => require("./getTransform"));

export { PipelineArgs, PipelineState } from "./pipeline";
export type Pipeline = import("./pipeline").Pipeline;
export const Pipeline: typeof import("./pipeline").Pipeline = null as any;
utilities.lazyLoad(exports, ["Pipeline"], () => require("./pipeline"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SourceDynamodbArgs, SourceDynamodbState } from "./sourceDynamodb";
export type SourceDynamodb = import("./sourceDynamodb").SourceDynamodb;
export const SourceDynamodb: typeof import("./sourceDynamodb").SourceDynamodb = null as any;
utilities.lazyLoad(exports, ["SourceDynamodb"], () => require("./sourceDynamodb"));

export { SourcePostgresqlArgs, SourcePostgresqlState } from "./sourcePostgresql";
export type SourcePostgresql = import("./sourcePostgresql").SourcePostgresql;
export const SourcePostgresql: typeof import("./sourcePostgresql").SourcePostgresql = null as any;
utilities.lazyLoad(exports, ["SourcePostgresql"], () => require("./sourcePostgresql"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "streamkap:index/destinationClickhouse:DestinationClickhouse":
                return new DestinationClickhouse(name, <any>undefined, { urn })
            case "streamkap:index/destinationSnowflake:DestinationSnowflake":
                return new DestinationSnowflake(name, <any>undefined, { urn })
            case "streamkap:index/pipeline:Pipeline":
                return new Pipeline(name, <any>undefined, { urn })
            case "streamkap:index/sourceDynamodb:SourceDynamodb":
                return new SourceDynamodb(name, <any>undefined, { urn })
            case "streamkap:index/sourcePostgresql:SourcePostgresql":
                return new SourcePostgresql(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("streamkap", "index/destinationClickhouse", _module)
pulumi.runtime.registerResourceModule("streamkap", "index/destinationSnowflake", _module)
pulumi.runtime.registerResourceModule("streamkap", "index/pipeline", _module)
pulumi.runtime.registerResourceModule("streamkap", "index/sourceDynamodb", _module)
pulumi.runtime.registerResourceModule("streamkap", "index/sourcePostgresql", _module)
pulumi.runtime.registerResourcePackage("streamkap", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:streamkap") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
