// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SourceDynamodb extends pulumi.CustomResource {
    /**
     * Get an existing SourceDynamodb resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SourceDynamodbState, opts?: pulumi.CustomResourceOptions): SourceDynamodb {
        return new SourceDynamodb(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'streamkap:index/sourceDynamodb:SourceDynamodb';

    /**
     * Returns true if the given object is an instance of SourceDynamodb.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SourceDynamodb {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SourceDynamodb.__pulumiType;
    }

    /**
     * AWS Access Key ID
     */
    public readonly awsAccessKeyId!: pulumi.Output<string>;
    /**
     * AWS Region
     */
    public readonly awsRegion!: pulumi.Output<string>;
    /**
     * AWS Secret Key
     */
    public readonly awsSecretKey!: pulumi.Output<string>;
    /**
     * Batch size to fetch records.
     */
    public readonly batchSize!: pulumi.Output<number>;
    public /*out*/ readonly connector!: pulumi.Output<string>;
    /**
     * Dynamodb Service Endpoint (optional)
     */
    public readonly dynamodbServiceEndpoint!: pulumi.Output<string | undefined>;
    /**
     * Full Export Expiration Time (ms)
     */
    public readonly fullExportExpirationTimeMs!: pulumi.Output<number>;
    /**
     * Incremental snapshot chunk size
     */
    public readonly incrementalSnapshotChunkSize!: pulumi.Output<number>;
    /**
     * Incremental snapshot chunk size (ms)
     */
    public readonly incrementalSnapshotIntervalMs!: pulumi.Output<number>;
    /**
     * Incremental snapshot max threads
     */
    public readonly incrementalSnapshotMaxThreads!: pulumi.Output<number>;
    /**
     * Source name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Poll Timeout (ms)
     */
    public readonly pollTimeoutMs!: pulumi.Output<number>;
    /**
     * used for backfill (snapshot)
     */
    public readonly s3ExportBucketName!: pulumi.Output<string>;
    /**
     * Signal Kafka Poll Timeout (ms)
     */
    public readonly signalKafkaPollTimeoutMs!: pulumi.Output<number>;
    /**
     * Source tables to sync.
     */
    public readonly tableIncludeListUserDefined!: pulumi.Output<string>;

    /**
     * Create a SourceDynamodb resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SourceDynamodbArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SourceDynamodbArgs | SourceDynamodbState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SourceDynamodbState | undefined;
            resourceInputs["awsAccessKeyId"] = state ? state.awsAccessKeyId : undefined;
            resourceInputs["awsRegion"] = state ? state.awsRegion : undefined;
            resourceInputs["awsSecretKey"] = state ? state.awsSecretKey : undefined;
            resourceInputs["batchSize"] = state ? state.batchSize : undefined;
            resourceInputs["connector"] = state ? state.connector : undefined;
            resourceInputs["dynamodbServiceEndpoint"] = state ? state.dynamodbServiceEndpoint : undefined;
            resourceInputs["fullExportExpirationTimeMs"] = state ? state.fullExportExpirationTimeMs : undefined;
            resourceInputs["incrementalSnapshotChunkSize"] = state ? state.incrementalSnapshotChunkSize : undefined;
            resourceInputs["incrementalSnapshotIntervalMs"] = state ? state.incrementalSnapshotIntervalMs : undefined;
            resourceInputs["incrementalSnapshotMaxThreads"] = state ? state.incrementalSnapshotMaxThreads : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pollTimeoutMs"] = state ? state.pollTimeoutMs : undefined;
            resourceInputs["s3ExportBucketName"] = state ? state.s3ExportBucketName : undefined;
            resourceInputs["signalKafkaPollTimeoutMs"] = state ? state.signalKafkaPollTimeoutMs : undefined;
            resourceInputs["tableIncludeListUserDefined"] = state ? state.tableIncludeListUserDefined : undefined;
        } else {
            const args = argsOrState as SourceDynamodbArgs | undefined;
            if ((!args || args.awsAccessKeyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'awsAccessKeyId'");
            }
            if ((!args || args.awsRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'awsRegion'");
            }
            if ((!args || args.awsSecretKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'awsSecretKey'");
            }
            if ((!args || args.s3ExportBucketName === undefined) && !opts.urn) {
                throw new Error("Missing required property 's3ExportBucketName'");
            }
            if ((!args || args.tableIncludeListUserDefined === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tableIncludeListUserDefined'");
            }
            resourceInputs["awsAccessKeyId"] = args ? args.awsAccessKeyId : undefined;
            resourceInputs["awsRegion"] = args ? args.awsRegion : undefined;
            resourceInputs["awsSecretKey"] = args?.awsSecretKey ? pulumi.secret(args.awsSecretKey) : undefined;
            resourceInputs["batchSize"] = args ? args.batchSize : undefined;
            resourceInputs["dynamodbServiceEndpoint"] = args ? args.dynamodbServiceEndpoint : undefined;
            resourceInputs["fullExportExpirationTimeMs"] = args ? args.fullExportExpirationTimeMs : undefined;
            resourceInputs["incrementalSnapshotChunkSize"] = args ? args.incrementalSnapshotChunkSize : undefined;
            resourceInputs["incrementalSnapshotIntervalMs"] = args ? args.incrementalSnapshotIntervalMs : undefined;
            resourceInputs["incrementalSnapshotMaxThreads"] = args ? args.incrementalSnapshotMaxThreads : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pollTimeoutMs"] = args ? args.pollTimeoutMs : undefined;
            resourceInputs["s3ExportBucketName"] = args ? args.s3ExportBucketName : undefined;
            resourceInputs["signalKafkaPollTimeoutMs"] = args ? args.signalKafkaPollTimeoutMs : undefined;
            resourceInputs["tableIncludeListUserDefined"] = args ? args.tableIncludeListUserDefined : undefined;
            resourceInputs["connector"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["awsSecretKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SourceDynamodb.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SourceDynamodb resources.
 */
export interface SourceDynamodbState {
    /**
     * AWS Access Key ID
     */
    awsAccessKeyId?: pulumi.Input<string>;
    /**
     * AWS Region
     */
    awsRegion?: pulumi.Input<string>;
    /**
     * AWS Secret Key
     */
    awsSecretKey?: pulumi.Input<string>;
    /**
     * Batch size to fetch records.
     */
    batchSize?: pulumi.Input<number>;
    connector?: pulumi.Input<string>;
    /**
     * Dynamodb Service Endpoint (optional)
     */
    dynamodbServiceEndpoint?: pulumi.Input<string>;
    /**
     * Full Export Expiration Time (ms)
     */
    fullExportExpirationTimeMs?: pulumi.Input<number>;
    /**
     * Incremental snapshot chunk size
     */
    incrementalSnapshotChunkSize?: pulumi.Input<number>;
    /**
     * Incremental snapshot chunk size (ms)
     */
    incrementalSnapshotIntervalMs?: pulumi.Input<number>;
    /**
     * Incremental snapshot max threads
     */
    incrementalSnapshotMaxThreads?: pulumi.Input<number>;
    /**
     * Source name
     */
    name?: pulumi.Input<string>;
    /**
     * Poll Timeout (ms)
     */
    pollTimeoutMs?: pulumi.Input<number>;
    /**
     * used for backfill (snapshot)
     */
    s3ExportBucketName?: pulumi.Input<string>;
    /**
     * Signal Kafka Poll Timeout (ms)
     */
    signalKafkaPollTimeoutMs?: pulumi.Input<number>;
    /**
     * Source tables to sync.
     */
    tableIncludeListUserDefined?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SourceDynamodb resource.
 */
export interface SourceDynamodbArgs {
    /**
     * AWS Access Key ID
     */
    awsAccessKeyId: pulumi.Input<string>;
    /**
     * AWS Region
     */
    awsRegion: pulumi.Input<string>;
    /**
     * AWS Secret Key
     */
    awsSecretKey: pulumi.Input<string>;
    /**
     * Batch size to fetch records.
     */
    batchSize?: pulumi.Input<number>;
    /**
     * Dynamodb Service Endpoint (optional)
     */
    dynamodbServiceEndpoint?: pulumi.Input<string>;
    /**
     * Full Export Expiration Time (ms)
     */
    fullExportExpirationTimeMs?: pulumi.Input<number>;
    /**
     * Incremental snapshot chunk size
     */
    incrementalSnapshotChunkSize?: pulumi.Input<number>;
    /**
     * Incremental snapshot chunk size (ms)
     */
    incrementalSnapshotIntervalMs?: pulumi.Input<number>;
    /**
     * Incremental snapshot max threads
     */
    incrementalSnapshotMaxThreads?: pulumi.Input<number>;
    /**
     * Source name
     */
    name?: pulumi.Input<string>;
    /**
     * Poll Timeout (ms)
     */
    pollTimeoutMs?: pulumi.Input<number>;
    /**
     * used for backfill (snapshot)
     */
    s3ExportBucketName: pulumi.Input<string>;
    /**
     * Signal Kafka Poll Timeout (ms)
     */
    signalKafkaPollTimeoutMs?: pulumi.Input<number>;
    /**
     * Source tables to sync.
     */
    tableIncludeListUserDefined: pulumi.Input<string>;
}
