// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SourcePostgresql extends pulumi.CustomResource {
    /**
     * Get an existing SourcePostgresql resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SourcePostgresqlState, opts?: pulumi.CustomResourceOptions): SourcePostgresql {
        return new SourcePostgresql(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'streamkap:index/sourcePostgresql:SourcePostgresql';

    /**
     * Returns true if the given object is an instance of SourcePostgresql.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SourcePostgresql {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SourcePostgresql.__pulumiType;
    }

    /**
     * Representation of binary data for binary columns
     */
    public readonly binaryHandlingMode!: pulumi.Output<string>;
    /**
     * Comma separated list of columns whitelist regular expressions, format schema[.]table.
     */
    public readonly columnIncludeList!: pulumi.Output<string | undefined>;
    public /*out*/ readonly connector!: pulumi.Output<string>;
    /**
     * Database from which to stream data
     */
    public readonly databaseDbname!: pulumi.Output<string>;
    /**
     * PostgreSQL Hostname. For example, postgres.something.rds.amazonaws.com
     */
    public readonly databaseHostname!: pulumi.Output<string>;
    /**
     * Password to access the database
     */
    public readonly databasePassword!: pulumi.Output<string>;
    /**
     * PostgreSQL Port. For example, 5432
     */
    public readonly databasePort!: pulumi.Output<number>;
    /**
     * Whether to use an encrypted connection to the PostgreSQL server
     */
    public readonly databaseSslmode!: pulumi.Output<string>;
    /**
     * Username to access the database
     */
    public readonly databaseUser!: pulumi.Output<string>;
    /**
     * Schema for heartbeat data collection
     */
    public readonly heartbeatDataCollectionSchemaOrDatabase!: pulumi.Output<string | undefined>;
    /**
     * Enable heartbeat to keep the pipeline healthy during low data volume
     */
    public readonly heartbeatEnabled!: pulumi.Output<boolean>;
    /**
     * Prefix topics with the database name
     */
    public readonly includeSourceDbNameInTableName!: pulumi.Output<boolean>;
    /**
     * Source name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Publication name for the connector
     */
    public readonly publicationName!: pulumi.Output<string>;
    /**
     * Schemas to include
     */
    public readonly schemaIncludeList!: pulumi.Output<string>;
    /**
     * Schema for signal data collection
     */
    public readonly signalDataCollectionSchemaOrDatabase!: pulumi.Output<string>;
    /**
     * Replication slot name for the connector
     */
    public readonly slotName!: pulumi.Output<string>;
    /**
     * Connect via SSH tunnel
     */
    public readonly sshEnabled!: pulumi.Output<boolean>;
    /**
     * Hostname of the SSH server, only required if `ssh_enabled` is true
     */
    public readonly sshHost!: pulumi.Output<string | undefined>;
    /**
     * Port of the SSH server, only required if `ssh_enabled` is true
     */
    public readonly sshPort!: pulumi.Output<string>;
    /**
     * User for connecting to the SSH server, only required if `ssh_enabled` is true
     */
    public readonly sshUser!: pulumi.Output<string>;
    /**
     * Source tables to sync
     */
    public readonly tableIncludeList!: pulumi.Output<string>;

    /**
     * Create a SourcePostgresql resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SourcePostgresqlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SourcePostgresqlArgs | SourcePostgresqlState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SourcePostgresqlState | undefined;
            resourceInputs["binaryHandlingMode"] = state ? state.binaryHandlingMode : undefined;
            resourceInputs["columnIncludeList"] = state ? state.columnIncludeList : undefined;
            resourceInputs["connector"] = state ? state.connector : undefined;
            resourceInputs["databaseDbname"] = state ? state.databaseDbname : undefined;
            resourceInputs["databaseHostname"] = state ? state.databaseHostname : undefined;
            resourceInputs["databasePassword"] = state ? state.databasePassword : undefined;
            resourceInputs["databasePort"] = state ? state.databasePort : undefined;
            resourceInputs["databaseSslmode"] = state ? state.databaseSslmode : undefined;
            resourceInputs["databaseUser"] = state ? state.databaseUser : undefined;
            resourceInputs["heartbeatDataCollectionSchemaOrDatabase"] = state ? state.heartbeatDataCollectionSchemaOrDatabase : undefined;
            resourceInputs["heartbeatEnabled"] = state ? state.heartbeatEnabled : undefined;
            resourceInputs["includeSourceDbNameInTableName"] = state ? state.includeSourceDbNameInTableName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["publicationName"] = state ? state.publicationName : undefined;
            resourceInputs["schemaIncludeList"] = state ? state.schemaIncludeList : undefined;
            resourceInputs["signalDataCollectionSchemaOrDatabase"] = state ? state.signalDataCollectionSchemaOrDatabase : undefined;
            resourceInputs["slotName"] = state ? state.slotName : undefined;
            resourceInputs["sshEnabled"] = state ? state.sshEnabled : undefined;
            resourceInputs["sshHost"] = state ? state.sshHost : undefined;
            resourceInputs["sshPort"] = state ? state.sshPort : undefined;
            resourceInputs["sshUser"] = state ? state.sshUser : undefined;
            resourceInputs["tableIncludeList"] = state ? state.tableIncludeList : undefined;
        } else {
            const args = argsOrState as SourcePostgresqlArgs | undefined;
            if ((!args || args.databaseDbname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseDbname'");
            }
            if ((!args || args.databaseHostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseHostname'");
            }
            if ((!args || args.databasePassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databasePassword'");
            }
            if ((!args || args.databaseUser === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseUser'");
            }
            if ((!args || args.schemaIncludeList === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaIncludeList'");
            }
            if ((!args || args.tableIncludeList === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tableIncludeList'");
            }
            resourceInputs["binaryHandlingMode"] = args ? args.binaryHandlingMode : undefined;
            resourceInputs["columnIncludeList"] = args ? args.columnIncludeList : undefined;
            resourceInputs["databaseDbname"] = args ? args.databaseDbname : undefined;
            resourceInputs["databaseHostname"] = args ? args.databaseHostname : undefined;
            resourceInputs["databasePassword"] = args?.databasePassword ? pulumi.secret(args.databasePassword) : undefined;
            resourceInputs["databasePort"] = args ? args.databasePort : undefined;
            resourceInputs["databaseSslmode"] = args ? args.databaseSslmode : undefined;
            resourceInputs["databaseUser"] = args ? args.databaseUser : undefined;
            resourceInputs["heartbeatDataCollectionSchemaOrDatabase"] = args ? args.heartbeatDataCollectionSchemaOrDatabase : undefined;
            resourceInputs["heartbeatEnabled"] = args ? args.heartbeatEnabled : undefined;
            resourceInputs["includeSourceDbNameInTableName"] = args ? args.includeSourceDbNameInTableName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publicationName"] = args ? args.publicationName : undefined;
            resourceInputs["schemaIncludeList"] = args ? args.schemaIncludeList : undefined;
            resourceInputs["signalDataCollectionSchemaOrDatabase"] = args ? args.signalDataCollectionSchemaOrDatabase : undefined;
            resourceInputs["slotName"] = args ? args.slotName : undefined;
            resourceInputs["sshEnabled"] = args ? args.sshEnabled : undefined;
            resourceInputs["sshHost"] = args ? args.sshHost : undefined;
            resourceInputs["sshPort"] = args ? args.sshPort : undefined;
            resourceInputs["sshUser"] = args ? args.sshUser : undefined;
            resourceInputs["tableIncludeList"] = args ? args.tableIncludeList : undefined;
            resourceInputs["connector"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["databasePassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SourcePostgresql.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SourcePostgresql resources.
 */
export interface SourcePostgresqlState {
    /**
     * Representation of binary data for binary columns
     */
    binaryHandlingMode?: pulumi.Input<string>;
    /**
     * Comma separated list of columns whitelist regular expressions, format schema[.]table.
     */
    columnIncludeList?: pulumi.Input<string>;
    connector?: pulumi.Input<string>;
    /**
     * Database from which to stream data
     */
    databaseDbname?: pulumi.Input<string>;
    /**
     * PostgreSQL Hostname. For example, postgres.something.rds.amazonaws.com
     */
    databaseHostname?: pulumi.Input<string>;
    /**
     * Password to access the database
     */
    databasePassword?: pulumi.Input<string>;
    /**
     * PostgreSQL Port. For example, 5432
     */
    databasePort?: pulumi.Input<number>;
    /**
     * Whether to use an encrypted connection to the PostgreSQL server
     */
    databaseSslmode?: pulumi.Input<string>;
    /**
     * Username to access the database
     */
    databaseUser?: pulumi.Input<string>;
    /**
     * Schema for heartbeat data collection
     */
    heartbeatDataCollectionSchemaOrDatabase?: pulumi.Input<string>;
    /**
     * Enable heartbeat to keep the pipeline healthy during low data volume
     */
    heartbeatEnabled?: pulumi.Input<boolean>;
    /**
     * Prefix topics with the database name
     */
    includeSourceDbNameInTableName?: pulumi.Input<boolean>;
    /**
     * Source name
     */
    name?: pulumi.Input<string>;
    /**
     * Publication name for the connector
     */
    publicationName?: pulumi.Input<string>;
    /**
     * Schemas to include
     */
    schemaIncludeList?: pulumi.Input<string>;
    /**
     * Schema for signal data collection
     */
    signalDataCollectionSchemaOrDatabase?: pulumi.Input<string>;
    /**
     * Replication slot name for the connector
     */
    slotName?: pulumi.Input<string>;
    /**
     * Connect via SSH tunnel
     */
    sshEnabled?: pulumi.Input<boolean>;
    /**
     * Hostname of the SSH server, only required if `ssh_enabled` is true
     */
    sshHost?: pulumi.Input<string>;
    /**
     * Port of the SSH server, only required if `ssh_enabled` is true
     */
    sshPort?: pulumi.Input<string>;
    /**
     * User for connecting to the SSH server, only required if `ssh_enabled` is true
     */
    sshUser?: pulumi.Input<string>;
    /**
     * Source tables to sync
     */
    tableIncludeList?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SourcePostgresql resource.
 */
export interface SourcePostgresqlArgs {
    /**
     * Representation of binary data for binary columns
     */
    binaryHandlingMode?: pulumi.Input<string>;
    /**
     * Comma separated list of columns whitelist regular expressions, format schema[.]table.
     */
    columnIncludeList?: pulumi.Input<string>;
    /**
     * Database from which to stream data
     */
    databaseDbname: pulumi.Input<string>;
    /**
     * PostgreSQL Hostname. For example, postgres.something.rds.amazonaws.com
     */
    databaseHostname: pulumi.Input<string>;
    /**
     * Password to access the database
     */
    databasePassword: pulumi.Input<string>;
    /**
     * PostgreSQL Port. For example, 5432
     */
    databasePort?: pulumi.Input<number>;
    /**
     * Whether to use an encrypted connection to the PostgreSQL server
     */
    databaseSslmode?: pulumi.Input<string>;
    /**
     * Username to access the database
     */
    databaseUser: pulumi.Input<string>;
    /**
     * Schema for heartbeat data collection
     */
    heartbeatDataCollectionSchemaOrDatabase?: pulumi.Input<string>;
    /**
     * Enable heartbeat to keep the pipeline healthy during low data volume
     */
    heartbeatEnabled?: pulumi.Input<boolean>;
    /**
     * Prefix topics with the database name
     */
    includeSourceDbNameInTableName?: pulumi.Input<boolean>;
    /**
     * Source name
     */
    name?: pulumi.Input<string>;
    /**
     * Publication name for the connector
     */
    publicationName?: pulumi.Input<string>;
    /**
     * Schemas to include
     */
    schemaIncludeList: pulumi.Input<string>;
    /**
     * Schema for signal data collection
     */
    signalDataCollectionSchemaOrDatabase?: pulumi.Input<string>;
    /**
     * Replication slot name for the connector
     */
    slotName?: pulumi.Input<string>;
    /**
     * Connect via SSH tunnel
     */
    sshEnabled?: pulumi.Input<boolean>;
    /**
     * Hostname of the SSH server, only required if `ssh_enabled` is true
     */
    sshHost?: pulumi.Input<string>;
    /**
     * Port of the SSH server, only required if `ssh_enabled` is true
     */
    sshPort?: pulumi.Input<string>;
    /**
     * User for connecting to the SSH server, only required if `ssh_enabled` is true
     */
    sshUser?: pulumi.Input<string>;
    /**
     * Source tables to sync
     */
    tableIncludeList: pulumi.Input<string>;
}
