// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DestinationClickhouse extends pulumi.CustomResource {
    /**
     * Get an existing DestinationClickhouse resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DestinationClickhouseState, opts?: pulumi.CustomResourceOptions): DestinationClickhouse {
        return new DestinationClickhouse(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'streamkap:index/destinationClickhouse:DestinationClickhouse';

    /**
     * Returns true if the given object is an instance of DestinationClickhouse.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DestinationClickhouse {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DestinationClickhouse.__pulumiType;
    }

    /**
     * Password to access the ClickHouse
     */
    public readonly connectionPassword!: pulumi.Output<string>;
    /**
     * Username to access ClickHouse
     */
    public readonly connectionUsername!: pulumi.Output<string>;
    public /*out*/ readonly connector!: pulumi.Output<string>;
    /**
     * ClickHouse database
     */
    public readonly database!: pulumi.Output<string | undefined>;
    /**
     * ClickHouse Hostname Or IP address
     */
    public readonly hostname!: pulumi.Output<string>;
    /**
     * Upsert or append modes are available
     */
    public readonly ingestionMode!: pulumi.Output<string>;
    /**
     * Destination name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ClickHouse Port. For example, 8443
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * Enable TLS for network connections
     */
    public readonly ssl!: pulumi.Output<boolean>;
    /**
     * The maximum number of active task
     */
    public readonly tasksMax!: pulumi.Output<number>;
    /**
     * Per topic configuration in JSON format
     */
    public readonly topicsConfigMap!: pulumi.Output<{[key: string]: outputs.DestinationClickhouseTopicsConfigMap} | undefined>;

    /**
     * Create a DestinationClickhouse resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DestinationClickhouseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DestinationClickhouseArgs | DestinationClickhouseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DestinationClickhouseState | undefined;
            resourceInputs["connectionPassword"] = state ? state.connectionPassword : undefined;
            resourceInputs["connectionUsername"] = state ? state.connectionUsername : undefined;
            resourceInputs["connector"] = state ? state.connector : undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["ingestionMode"] = state ? state.ingestionMode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["ssl"] = state ? state.ssl : undefined;
            resourceInputs["tasksMax"] = state ? state.tasksMax : undefined;
            resourceInputs["topicsConfigMap"] = state ? state.topicsConfigMap : undefined;
        } else {
            const args = argsOrState as DestinationClickhouseArgs | undefined;
            if ((!args || args.connectionPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionPassword'");
            }
            if ((!args || args.connectionUsername === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionUsername'");
            }
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            resourceInputs["connectionPassword"] = args?.connectionPassword ? pulumi.secret(args.connectionPassword) : undefined;
            resourceInputs["connectionUsername"] = args ? args.connectionUsername : undefined;
            resourceInputs["database"] = args ? args.database : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["ingestionMode"] = args ? args.ingestionMode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["ssl"] = args ? args.ssl : undefined;
            resourceInputs["tasksMax"] = args ? args.tasksMax : undefined;
            resourceInputs["topicsConfigMap"] = args ? args.topicsConfigMap : undefined;
            resourceInputs["connector"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["connectionPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DestinationClickhouse.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DestinationClickhouse resources.
 */
export interface DestinationClickhouseState {
    /**
     * Password to access the ClickHouse
     */
    connectionPassword?: pulumi.Input<string>;
    /**
     * Username to access ClickHouse
     */
    connectionUsername?: pulumi.Input<string>;
    connector?: pulumi.Input<string>;
    /**
     * ClickHouse database
     */
    database?: pulumi.Input<string>;
    /**
     * ClickHouse Hostname Or IP address
     */
    hostname?: pulumi.Input<string>;
    /**
     * Upsert or append modes are available
     */
    ingestionMode?: pulumi.Input<string>;
    /**
     * Destination name
     */
    name?: pulumi.Input<string>;
    /**
     * ClickHouse Port. For example, 8443
     */
    port?: pulumi.Input<number>;
    /**
     * Enable TLS for network connections
     */
    ssl?: pulumi.Input<boolean>;
    /**
     * The maximum number of active task
     */
    tasksMax?: pulumi.Input<number>;
    /**
     * Per topic configuration in JSON format
     */
    topicsConfigMap?: pulumi.Input<{[key: string]: pulumi.Input<inputs.DestinationClickhouseTopicsConfigMap>}>;
}

/**
 * The set of arguments for constructing a DestinationClickhouse resource.
 */
export interface DestinationClickhouseArgs {
    /**
     * Password to access the ClickHouse
     */
    connectionPassword: pulumi.Input<string>;
    /**
     * Username to access ClickHouse
     */
    connectionUsername: pulumi.Input<string>;
    /**
     * ClickHouse database
     */
    database?: pulumi.Input<string>;
    /**
     * ClickHouse Hostname Or IP address
     */
    hostname: pulumi.Input<string>;
    /**
     * Upsert or append modes are available
     */
    ingestionMode?: pulumi.Input<string>;
    /**
     * Destination name
     */
    name?: pulumi.Input<string>;
    /**
     * ClickHouse Port. For example, 8443
     */
    port?: pulumi.Input<number>;
    /**
     * Enable TLS for network connections
     */
    ssl?: pulumi.Input<boolean>;
    /**
     * The maximum number of active task
     */
    tasksMax?: pulumi.Input<number>;
    /**
     * Per topic configuration in JSON format
     */
    topicsConfigMap?: pulumi.Input<{[key: string]: pulumi.Input<inputs.DestinationClickhouseTopicsConfigMap>}>;
}
