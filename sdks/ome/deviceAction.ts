// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DeviceAction extends pulumi.CustomResource {
    /**
     * Get an existing DeviceAction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeviceActionState, opts?: pulumi.CustomResourceOptions): DeviceAction {
        return new DeviceAction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ome:index/deviceAction:DeviceAction';

    /**
     * Returns true if the given object is an instance of DeviceAction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeviceAction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeviceAction.__pulumiType;
    }

    /**
     * Action to be performed on the devices. Accepted values are [`inventory_refresh`]. Default value is `inventory_refresh`.
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * Cron expression to schedule an action in the future. If not specified, the action runs immediately on apply. Conflicts
     * with `timeout`.
     */
    public readonly cron!: pulumi.Output<string | undefined>;
    /**
     * Current status of the job.
     */
    public /*out*/ readonly currentStatus!: pulumi.Output<string>;
    /**
     * List of id of devices on whom the action would be carried out.
     */
    public readonly deviceIds!: pulumi.Output<number[]>;
    /**
     * End time of the job.
     */
    public /*out*/ readonly endTime!: pulumi.Output<string>;
    /**
     * Description of the job to be created on the OME appliance that will run the action.
     */
    public readonly jobDescription!: pulumi.Output<string>;
    /**
     * Name of the job to be created on the OME appliance that will run the action.
     */
    public readonly jobName!: pulumi.Output<string>;
    /**
     * Last run status of the job.
     */
    public /*out*/ readonly lastRunStatus!: pulumi.Output<string>;
    /**
     * Last run time of the job.
     */
    public /*out*/ readonly lastRunTime!: pulumi.Output<string>;
    /**
     * Next run time of the job.
     */
    public /*out*/ readonly nextRunTime!: pulumi.Output<string>;
    /**
     * Start time of the job.
     */
    public /*out*/ readonly startTime!: pulumi.Output<string>;
    /**
     * Timeout, in minutes, for monitoring an immediately running action. Conflicts with `cron`. Default value is `10`.
     */
    public readonly timeout!: pulumi.Output<number | undefined>;

    /**
     * Create a DeviceAction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeviceActionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeviceActionArgs | DeviceActionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeviceActionState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["cron"] = state ? state.cron : undefined;
            resourceInputs["currentStatus"] = state ? state.currentStatus : undefined;
            resourceInputs["deviceIds"] = state ? state.deviceIds : undefined;
            resourceInputs["endTime"] = state ? state.endTime : undefined;
            resourceInputs["jobDescription"] = state ? state.jobDescription : undefined;
            resourceInputs["jobName"] = state ? state.jobName : undefined;
            resourceInputs["lastRunStatus"] = state ? state.lastRunStatus : undefined;
            resourceInputs["lastRunTime"] = state ? state.lastRunTime : undefined;
            resourceInputs["nextRunTime"] = state ? state.nextRunTime : undefined;
            resourceInputs["startTime"] = state ? state.startTime : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
        } else {
            const args = argsOrState as DeviceActionArgs | undefined;
            if ((!args || args.deviceIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deviceIds'");
            }
            if ((!args || args.jobName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'jobName'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["cron"] = args ? args.cron : undefined;
            resourceInputs["deviceIds"] = args ? args.deviceIds : undefined;
            resourceInputs["jobDescription"] = args ? args.jobDescription : undefined;
            resourceInputs["jobName"] = args ? args.jobName : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["currentStatus"] = undefined /*out*/;
            resourceInputs["endTime"] = undefined /*out*/;
            resourceInputs["lastRunStatus"] = undefined /*out*/;
            resourceInputs["lastRunTime"] = undefined /*out*/;
            resourceInputs["nextRunTime"] = undefined /*out*/;
            resourceInputs["startTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DeviceAction.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DeviceAction resources.
 */
export interface DeviceActionState {
    /**
     * Action to be performed on the devices. Accepted values are [`inventory_refresh`]. Default value is `inventory_refresh`.
     */
    action?: pulumi.Input<string>;
    /**
     * Cron expression to schedule an action in the future. If not specified, the action runs immediately on apply. Conflicts
     * with `timeout`.
     */
    cron?: pulumi.Input<string>;
    /**
     * Current status of the job.
     */
    currentStatus?: pulumi.Input<string>;
    /**
     * List of id of devices on whom the action would be carried out.
     */
    deviceIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * End time of the job.
     */
    endTime?: pulumi.Input<string>;
    /**
     * Description of the job to be created on the OME appliance that will run the action.
     */
    jobDescription?: pulumi.Input<string>;
    /**
     * Name of the job to be created on the OME appliance that will run the action.
     */
    jobName?: pulumi.Input<string>;
    /**
     * Last run status of the job.
     */
    lastRunStatus?: pulumi.Input<string>;
    /**
     * Last run time of the job.
     */
    lastRunTime?: pulumi.Input<string>;
    /**
     * Next run time of the job.
     */
    nextRunTime?: pulumi.Input<string>;
    /**
     * Start time of the job.
     */
    startTime?: pulumi.Input<string>;
    /**
     * Timeout, in minutes, for monitoring an immediately running action. Conflicts with `cron`. Default value is `10`.
     */
    timeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DeviceAction resource.
 */
export interface DeviceActionArgs {
    /**
     * Action to be performed on the devices. Accepted values are [`inventory_refresh`]. Default value is `inventory_refresh`.
     */
    action?: pulumi.Input<string>;
    /**
     * Cron expression to schedule an action in the future. If not specified, the action runs immediately on apply. Conflicts
     * with `timeout`.
     */
    cron?: pulumi.Input<string>;
    /**
     * List of id of devices on whom the action would be carried out.
     */
    deviceIds: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Description of the job to be created on the OME appliance that will run the action.
     */
    jobDescription?: pulumi.Input<string>;
    /**
     * Name of the job to be created on the OME appliance that will run the action.
     */
    jobName: pulumi.Input<string>;
    /**
     * Timeout, in minutes, for monitoring an immediately running action. Conflicts with `cron`. Default value is `10`.
     */
    timeout?: pulumi.Input<number>;
}
