// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FirmwareBaseline extends pulumi.CustomResource {
    /**
     * Get an existing FirmwareBaseline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirmwareBaselineState, opts?: pulumi.CustomResourceOptions): FirmwareBaseline {
        return new FirmwareBaseline(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ome:index/firmwareBaseline:FirmwareBaseline';

    /**
     * Returns true if the given object is an instance of FirmwareBaseline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirmwareBaseline {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirmwareBaseline.__pulumiType;
    }

    /**
     * ID of the catalog.
     */
    public /*out*/ readonly catalogId!: pulumi.Output<number>;
    /**
     * Name of the catalog
     */
    public readonly catalogName!: pulumi.Output<string>;
    /**
     * Compliance Summary
     */
    public /*out*/ readonly complianceSummary!: pulumi.Output<outputs.FirmwareBaselineComplianceSummary>;
    /**
     * Description of the firmware baseline
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Device names is the list of device names that you want to add to the firmware baseline being created. One of DeviceNames
     * or DeviceServiceTags or GroupNames is required
     */
    public readonly deviceNames!: pulumi.Output<string[] | undefined>;
    /**
     * Device service tags is the list of device service tags that you want to add to the firmware baseline being created.One
     * of DeviceNames or DeviceServiceTags or GroupNames is required
     */
    public readonly deviceServiceTags!: pulumi.Output<string[] | undefined>;
    /**
     * Indicates if the firmware can be downgraded
     */
    public /*out*/ readonly downgradeEnabled!: pulumi.Output<boolean>;
    /**
     * Filters applicable updates where no reboot is required during create baseline for firmware updates.
     */
    public readonly filterNoRebootRequired!: pulumi.Output<boolean>;
    /**
     * Group names is the list of group names that you want to add to the firmware baseline being created.One of DeviceNames or
     * DeviceServiceTags or GroupNames is required
     */
    public readonly groupNames!: pulumi.Output<string[] | undefined>;
    /**
     * This must always be set to true. The size of the DUP files used is 64 bits.
     */
    public readonly is64Bit!: pulumi.Output<boolean>;
    /**
     * Last Run Time for the firmware baseline
     */
    public readonly lastRun!: pulumi.Output<string>;
    /**
     * Name of the firmware baseline
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ID of the repository. Derived from the catalog response
     */
    public /*out*/ readonly repositoryId!: pulumi.Output<number>;
    /**
     * Name of the repository
     */
    public readonly repositoryName!: pulumi.Output<string>;
    /**
     * Type of the repository
     */
    public /*out*/ readonly repositoryType!: pulumi.Output<string>;
    /**
     * The DeviceID, if the baseline is being created for devices or, the GroupID, if the baseline is being created for a group
     * of devices.
     */
    public /*out*/ readonly targets!: pulumi.Output<outputs.FirmwareBaselineTarget[]>;
    /**
     * Identifier of task which created this baseline.
     */
    public /*out*/ readonly taskId!: pulumi.Output<number>;
    /**
     * Task status.
     */
    public /*out*/ readonly taskStatus!: pulumi.Output<string>;

    /**
     * Create a FirmwareBaseline resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirmwareBaselineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirmwareBaselineArgs | FirmwareBaselineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirmwareBaselineState | undefined;
            resourceInputs["catalogId"] = state ? state.catalogId : undefined;
            resourceInputs["catalogName"] = state ? state.catalogName : undefined;
            resourceInputs["complianceSummary"] = state ? state.complianceSummary : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceNames"] = state ? state.deviceNames : undefined;
            resourceInputs["deviceServiceTags"] = state ? state.deviceServiceTags : undefined;
            resourceInputs["downgradeEnabled"] = state ? state.downgradeEnabled : undefined;
            resourceInputs["filterNoRebootRequired"] = state ? state.filterNoRebootRequired : undefined;
            resourceInputs["groupNames"] = state ? state.groupNames : undefined;
            resourceInputs["is64Bit"] = state ? state.is64Bit : undefined;
            resourceInputs["lastRun"] = state ? state.lastRun : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["repositoryId"] = state ? state.repositoryId : undefined;
            resourceInputs["repositoryName"] = state ? state.repositoryName : undefined;
            resourceInputs["repositoryType"] = state ? state.repositoryType : undefined;
            resourceInputs["targets"] = state ? state.targets : undefined;
            resourceInputs["taskId"] = state ? state.taskId : undefined;
            resourceInputs["taskStatus"] = state ? state.taskStatus : undefined;
        } else {
            const args = argsOrState as FirmwareBaselineArgs | undefined;
            if ((!args || args.catalogName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'catalogName'");
            }
            resourceInputs["catalogName"] = args ? args.catalogName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["deviceNames"] = args ? args.deviceNames : undefined;
            resourceInputs["deviceServiceTags"] = args ? args.deviceServiceTags : undefined;
            resourceInputs["filterNoRebootRequired"] = args ? args.filterNoRebootRequired : undefined;
            resourceInputs["groupNames"] = args ? args.groupNames : undefined;
            resourceInputs["is64Bit"] = args ? args.is64Bit : undefined;
            resourceInputs["lastRun"] = args ? args.lastRun : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["repositoryName"] = args ? args.repositoryName : undefined;
            resourceInputs["catalogId"] = undefined /*out*/;
            resourceInputs["complianceSummary"] = undefined /*out*/;
            resourceInputs["downgradeEnabled"] = undefined /*out*/;
            resourceInputs["repositoryId"] = undefined /*out*/;
            resourceInputs["repositoryType"] = undefined /*out*/;
            resourceInputs["targets"] = undefined /*out*/;
            resourceInputs["taskId"] = undefined /*out*/;
            resourceInputs["taskStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirmwareBaseline.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FirmwareBaseline resources.
 */
export interface FirmwareBaselineState {
    /**
     * ID of the catalog.
     */
    catalogId?: pulumi.Input<number>;
    /**
     * Name of the catalog
     */
    catalogName?: pulumi.Input<string>;
    /**
     * Compliance Summary
     */
    complianceSummary?: pulumi.Input<inputs.FirmwareBaselineComplianceSummary>;
    /**
     * Description of the firmware baseline
     */
    description?: pulumi.Input<string>;
    /**
     * Device names is the list of device names that you want to add to the firmware baseline being created. One of DeviceNames
     * or DeviceServiceTags or GroupNames is required
     */
    deviceNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Device service tags is the list of device service tags that you want to add to the firmware baseline being created.One
     * of DeviceNames or DeviceServiceTags or GroupNames is required
     */
    deviceServiceTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates if the firmware can be downgraded
     */
    downgradeEnabled?: pulumi.Input<boolean>;
    /**
     * Filters applicable updates where no reboot is required during create baseline for firmware updates.
     */
    filterNoRebootRequired?: pulumi.Input<boolean>;
    /**
     * Group names is the list of group names that you want to add to the firmware baseline being created.One of DeviceNames or
     * DeviceServiceTags or GroupNames is required
     */
    groupNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This must always be set to true. The size of the DUP files used is 64 bits.
     */
    is64Bit?: pulumi.Input<boolean>;
    /**
     * Last Run Time for the firmware baseline
     */
    lastRun?: pulumi.Input<string>;
    /**
     * Name of the firmware baseline
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the repository. Derived from the catalog response
     */
    repositoryId?: pulumi.Input<number>;
    /**
     * Name of the repository
     */
    repositoryName?: pulumi.Input<string>;
    /**
     * Type of the repository
     */
    repositoryType?: pulumi.Input<string>;
    /**
     * The DeviceID, if the baseline is being created for devices or, the GroupID, if the baseline is being created for a group
     * of devices.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.FirmwareBaselineTarget>[]>;
    /**
     * Identifier of task which created this baseline.
     */
    taskId?: pulumi.Input<number>;
    /**
     * Task status.
     */
    taskStatus?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FirmwareBaseline resource.
 */
export interface FirmwareBaselineArgs {
    /**
     * Name of the catalog
     */
    catalogName: pulumi.Input<string>;
    /**
     * Description of the firmware baseline
     */
    description?: pulumi.Input<string>;
    /**
     * Device names is the list of device names that you want to add to the firmware baseline being created. One of DeviceNames
     * or DeviceServiceTags or GroupNames is required
     */
    deviceNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Device service tags is the list of device service tags that you want to add to the firmware baseline being created.One
     * of DeviceNames or DeviceServiceTags or GroupNames is required
     */
    deviceServiceTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Filters applicable updates where no reboot is required during create baseline for firmware updates.
     */
    filterNoRebootRequired?: pulumi.Input<boolean>;
    /**
     * Group names is the list of group names that you want to add to the firmware baseline being created.One of DeviceNames or
     * DeviceServiceTags or GroupNames is required
     */
    groupNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This must always be set to true. The size of the DUP files used is 64 bits.
     */
    is64Bit?: pulumi.Input<boolean>;
    /**
     * Last Run Time for the firmware baseline
     */
    lastRun?: pulumi.Input<string>;
    /**
     * Name of the firmware baseline
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the repository
     */
    repositoryName?: pulumi.Input<string>;
}
