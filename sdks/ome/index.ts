// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ApplianceNetworkArgs, ApplianceNetworkState } from "./applianceNetwork";
export type ApplianceNetwork = import("./applianceNetwork").ApplianceNetwork;
export const ApplianceNetwork: typeof import("./applianceNetwork").ApplianceNetwork = null as any;
utilities.lazyLoad(exports, ["ApplianceNetwork"], () => require("./applianceNetwork"));

export { ApplicationCertificateArgs, ApplicationCertificateState } from "./applicationCertificate";
export type ApplicationCertificate = import("./applicationCertificate").ApplicationCertificate;
export const ApplicationCertificate: typeof import("./applicationCertificate").ApplicationCertificate = null as any;
utilities.lazyLoad(exports, ["ApplicationCertificate"], () => require("./applicationCertificate"));

export { ApplicationCsrArgs, ApplicationCsrState } from "./applicationCsr";
export type ApplicationCsr = import("./applicationCsr").ApplicationCsr;
export const ApplicationCsr: typeof import("./applicationCsr").ApplicationCsr = null as any;
utilities.lazyLoad(exports, ["ApplicationCsr"], () => require("./applicationCsr"));

export { ConfigurationBaselineArgs, ConfigurationBaselineState } from "./configurationBaseline";
export type ConfigurationBaseline = import("./configurationBaseline").ConfigurationBaseline;
export const ConfigurationBaseline: typeof import("./configurationBaseline").ConfigurationBaseline = null as any;
utilities.lazyLoad(exports, ["ConfigurationBaseline"], () => require("./configurationBaseline"));

export { ConfigurationComplianceArgs, ConfigurationComplianceState } from "./configurationCompliance";
export type ConfigurationCompliance = import("./configurationCompliance").ConfigurationCompliance;
export const ConfigurationCompliance: typeof import("./configurationCompliance").ConfigurationCompliance = null as any;
utilities.lazyLoad(exports, ["ConfigurationCompliance"], () => require("./configurationCompliance"));

export { DeploymentArgs, DeploymentState } from "./deployment";
export type Deployment = import("./deployment").Deployment;
export const Deployment: typeof import("./deployment").Deployment = null as any;
utilities.lazyLoad(exports, ["Deployment"], () => require("./deployment"));

export { DeviceActionArgs, DeviceActionState } from "./deviceAction";
export type DeviceAction = import("./deviceAction").DeviceAction;
export const DeviceAction: typeof import("./deviceAction").DeviceAction = null as any;
utilities.lazyLoad(exports, ["DeviceAction"], () => require("./deviceAction"));

export { DevicesArgs, DevicesState } from "./devices";
export type Devices = import("./devices").Devices;
export const Devices: typeof import("./devices").Devices = null as any;
utilities.lazyLoad(exports, ["Devices"], () => require("./devices"));

export { DiscoveryArgs, DiscoveryState } from "./discovery";
export type Discovery = import("./discovery").Discovery;
export const Discovery: typeof import("./discovery").Discovery = null as any;
utilities.lazyLoad(exports, ["Discovery"], () => require("./discovery"));

export { FirmwareBaselineArgs, FirmwareBaselineState } from "./firmwareBaseline";
export type FirmwareBaseline = import("./firmwareBaseline").FirmwareBaseline;
export const FirmwareBaseline: typeof import("./firmwareBaseline").FirmwareBaseline = null as any;
utilities.lazyLoad(exports, ["FirmwareBaseline"], () => require("./firmwareBaseline"));

export { FirmwareCatalogArgs, FirmwareCatalogState } from "./firmwareCatalog";
export type FirmwareCatalog = import("./firmwareCatalog").FirmwareCatalog;
export const FirmwareCatalog: typeof import("./firmwareCatalog").FirmwareCatalog = null as any;
utilities.lazyLoad(exports, ["FirmwareCatalog"], () => require("./firmwareCatalog"));

export { GetApplicationCertificateResult } from "./getApplicationCertificate";
export const getApplicationCertificate: typeof import("./getApplicationCertificate").getApplicationCertificate = null as any;
export const getApplicationCertificateOutput: typeof import("./getApplicationCertificate").getApplicationCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationCertificate","getApplicationCertificateOutput"], () => require("./getApplicationCertificate"));

export { GetConfigurationReportInfoArgs, GetConfigurationReportInfoResult, GetConfigurationReportInfoOutputArgs } from "./getConfigurationReportInfo";
export const getConfigurationReportInfo: typeof import("./getConfigurationReportInfo").getConfigurationReportInfo = null as any;
export const getConfigurationReportInfoOutput: typeof import("./getConfigurationReportInfo").getConfigurationReportInfoOutput = null as any;
utilities.lazyLoad(exports, ["getConfigurationReportInfo","getConfigurationReportInfoOutput"], () => require("./getConfigurationReportInfo"));

export { GetDeviceArgs, GetDeviceResult, GetDeviceOutputArgs } from "./getDevice";
export const getDevice: typeof import("./getDevice").getDevice = null as any;
export const getDeviceOutput: typeof import("./getDevice").getDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getDevice","getDeviceOutput"], () => require("./getDevice"));

export { GetDeviceComplianceReportArgs, GetDeviceComplianceReportResult, GetDeviceComplianceReportOutputArgs } from "./getDeviceComplianceReport";
export const getDeviceComplianceReport: typeof import("./getDeviceComplianceReport").getDeviceComplianceReport = null as any;
export const getDeviceComplianceReportOutput: typeof import("./getDeviceComplianceReport").getDeviceComplianceReportOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceComplianceReport","getDeviceComplianceReportOutput"], () => require("./getDeviceComplianceReport"));

export { GetFirmwareBaselineComplianceReportArgs, GetFirmwareBaselineComplianceReportResult, GetFirmwareBaselineComplianceReportOutputArgs } from "./getFirmwareBaselineComplianceReport";
export const getFirmwareBaselineComplianceReport: typeof import("./getFirmwareBaselineComplianceReport").getFirmwareBaselineComplianceReport = null as any;
export const getFirmwareBaselineComplianceReportOutput: typeof import("./getFirmwareBaselineComplianceReport").getFirmwareBaselineComplianceReportOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareBaselineComplianceReport","getFirmwareBaselineComplianceReportOutput"], () => require("./getFirmwareBaselineComplianceReport"));

export { GetFirmwareCatalogArgs, GetFirmwareCatalogResult, GetFirmwareCatalogOutputArgs } from "./getFirmwareCatalog";
export const getFirmwareCatalog: typeof import("./getFirmwareCatalog").getFirmwareCatalog = null as any;
export const getFirmwareCatalogOutput: typeof import("./getFirmwareCatalog").getFirmwareCatalogOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareCatalog","getFirmwareCatalogOutput"], () => require("./getFirmwareCatalog"));

export { GetFirmwareRepositoryArgs, GetFirmwareRepositoryResult, GetFirmwareRepositoryOutputArgs } from "./getFirmwareRepository";
export const getFirmwareRepository: typeof import("./getFirmwareRepository").getFirmwareRepository = null as any;
export const getFirmwareRepositoryOutput: typeof import("./getFirmwareRepository").getFirmwareRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getFirmwareRepository","getFirmwareRepositoryOutput"], () => require("./getFirmwareRepository"));

export { GetGroupdevicesInfoArgs, GetGroupdevicesInfoResult, GetGroupdevicesInfoOutputArgs } from "./getGroupdevicesInfo";
export const getGroupdevicesInfo: typeof import("./getGroupdevicesInfo").getGroupdevicesInfo = null as any;
export const getGroupdevicesInfoOutput: typeof import("./getGroupdevicesInfo").getGroupdevicesInfoOutput = null as any;
utilities.lazyLoad(exports, ["getGroupdevicesInfo","getGroupdevicesInfoOutput"], () => require("./getGroupdevicesInfo"));

export { GetTemplateInfoArgs, GetTemplateInfoResult, GetTemplateInfoOutputArgs } from "./getTemplateInfo";
export const getTemplateInfo: typeof import("./getTemplateInfo").getTemplateInfo = null as any;
export const getTemplateInfoOutput: typeof import("./getTemplateInfo").getTemplateInfoOutput = null as any;
utilities.lazyLoad(exports, ["getTemplateInfo","getTemplateInfoOutput"], () => require("./getTemplateInfo"));

export { GetVlannetworksInfoResult } from "./getVlannetworksInfo";
export const getVlannetworksInfo: typeof import("./getVlannetworksInfo").getVlannetworksInfo = null as any;
export const getVlannetworksInfoOutput: typeof import("./getVlannetworksInfo").getVlannetworksInfoOutput = null as any;
utilities.lazyLoad(exports, ["getVlannetworksInfo","getVlannetworksInfoOutput"], () => require("./getVlannetworksInfo"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { StaticGroupArgs, StaticGroupState } from "./staticGroup";
export type StaticGroup = import("./staticGroup").StaticGroup;
export const StaticGroup: typeof import("./staticGroup").StaticGroup = null as any;
utilities.lazyLoad(exports, ["StaticGroup"], () => require("./staticGroup"));

export { TemplateArgs, TemplateState } from "./template";
export type Template = import("./template").Template;
export const Template: typeof import("./template").Template = null as any;
utilities.lazyLoad(exports, ["Template"], () => require("./template"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ome:index/applianceNetwork:ApplianceNetwork":
                return new ApplianceNetwork(name, <any>undefined, { urn })
            case "ome:index/applicationCertificate:ApplicationCertificate":
                return new ApplicationCertificate(name, <any>undefined, { urn })
            case "ome:index/applicationCsr:ApplicationCsr":
                return new ApplicationCsr(name, <any>undefined, { urn })
            case "ome:index/configurationBaseline:ConfigurationBaseline":
                return new ConfigurationBaseline(name, <any>undefined, { urn })
            case "ome:index/configurationCompliance:ConfigurationCompliance":
                return new ConfigurationCompliance(name, <any>undefined, { urn })
            case "ome:index/deployment:Deployment":
                return new Deployment(name, <any>undefined, { urn })
            case "ome:index/deviceAction:DeviceAction":
                return new DeviceAction(name, <any>undefined, { urn })
            case "ome:index/devices:Devices":
                return new Devices(name, <any>undefined, { urn })
            case "ome:index/discovery:Discovery":
                return new Discovery(name, <any>undefined, { urn })
            case "ome:index/firmwareBaseline:FirmwareBaseline":
                return new FirmwareBaseline(name, <any>undefined, { urn })
            case "ome:index/firmwareCatalog:FirmwareCatalog":
                return new FirmwareCatalog(name, <any>undefined, { urn })
            case "ome:index/staticGroup:StaticGroup":
                return new StaticGroup(name, <any>undefined, { urn })
            case "ome:index/template:Template":
                return new Template(name, <any>undefined, { urn })
            case "ome:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ome", "index/applianceNetwork", _module)
pulumi.runtime.registerResourceModule("ome", "index/applicationCertificate", _module)
pulumi.runtime.registerResourceModule("ome", "index/applicationCsr", _module)
pulumi.runtime.registerResourceModule("ome", "index/configurationBaseline", _module)
pulumi.runtime.registerResourceModule("ome", "index/configurationCompliance", _module)
pulumi.runtime.registerResourceModule("ome", "index/deployment", _module)
pulumi.runtime.registerResourceModule("ome", "index/deviceAction", _module)
pulumi.runtime.registerResourceModule("ome", "index/devices", _module)
pulumi.runtime.registerResourceModule("ome", "index/discovery", _module)
pulumi.runtime.registerResourceModule("ome", "index/firmwareBaseline", _module)
pulumi.runtime.registerResourceModule("ome", "index/firmwareCatalog", _module)
pulumi.runtime.registerResourceModule("ome", "index/staticGroup", _module)
pulumi.runtime.registerResourceModule("ome", "index/template", _module)
pulumi.runtime.registerResourceModule("ome", "index/user", _module)
pulumi.runtime.registerResourcePackage("ome", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:ome") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
