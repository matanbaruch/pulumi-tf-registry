// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ApplianceNetworkAdapterSetting {
    /**
     * Domain Name System(DNS) settings
     */
    dnsConfiguration?: outputs.ApplianceNetworkAdapterSettingDnsConfiguration;
    /**
     * Enable or disable Network Interface Card (NIC) configuration
     */
    enableNic: boolean;
    /**
     * If there are multiple interfaces, network configuration changes can be applied to a single interface using the `interface name` of the NIC.
     */
    interfaceName: string;
    /**
     * IPv4 network configuration. (Warning) Ensure that you have an alternate interface to access OpenManage Enterprise as these options can change the current IPv4 address
     */
    ipv4Configuration?: outputs.ApplianceNetworkAdapterSettingIpv4Configuration;
    /**
     * IPv6 network configuration. (Warning) Ensure that you have an alternate interface to access OpenManage Enterprise as these options can change the current IPv6 address
     */
    ipv6Configuration?: outputs.ApplianceNetworkAdapterSettingIpv6Configuration;
    /**
     * Job ID
     */
    jobId: number;
    /**
     * vLAN configuration. settings are applicable for OpenManage Enterprise Modular
     */
    managementVlan?: outputs.ApplianceNetworkAdapterSettingManagementVlan;
    /**
     * The time in seconds, after which settings are applied
     */
    rebootDelay: number;
}

export interface ApplianceNetworkAdapterSettingDnsConfiguration {
    /**
     * Static DNS domain name. This is applicable when "use_dhcp_for_dns_domain_name" is false.
     */
    dnsDomainName: string;
    /**
     * DNS name for "hostname". This is applicable when "register_with_dns" is true.
     */
    dnsName: string;
    /**
     * Register/Unregister I(dns_name) on the DNS Server.This option cannot be updated if vLAN configuration changes.
     */
    registerWithDns: boolean;
    /**
     * Get the "dns_domain_name" using a DHCP server.
     */
    useDhcpForDnsServerNames: boolean;
}

export interface ApplianceNetworkAdapterSettingIpv4Configuration {
    /**
     * Enable or disable the automatic request to get an IPv4 address from the IPv4 Dynamic Host Configuration Protocol (DHCP) server. If enable_dhcp option is true, OpenManage Enterprise retrieves the IP configurationâ€”IPv4 address, subnet mask, and gateway from a DHCP server on the existing network.
     */
    enableDhcp: boolean;
    /**
     * Enable or disable access to the network using IPv4.
     */
    enableIpv4: boolean;
    /**
     * Static IPv4 DNS alternate server. This option is applicable when "use_dhcp_for_dns_server_names" is false.
     */
    staticAlternateDnsServer: string;
    /**
     * Static IPv4 gateway address. This option is applicable when "enable_dhcp" is false.
     */
    staticGateway: string;
    /**
     * Static IPv4 address. This option is applicable when "enable_dhcp" is false.
     */
    staticIpAddress: string;
    /**
     * Static IPv4 DNS preferred server. This option is applicable when "use_dhcp_for_dns_server_names" is false.
     */
    staticPreferredDnsServer: string;
    /**
     * Static IPv4 subnet mask address. This option is applicable when "enable_dhcp" is false.
     */
    staticSubnetMask: string;
    /**
     * This option allows to automatically request and obtain a DNS server IPv4 address from the DHCP server. This option is applicable when "enable_dhcp" is true.
     */
    useDhcpForDnsServerNames: boolean;
}

export interface ApplianceNetworkAdapterSettingIpv6Configuration {
    /**
     * Enable or disable the automatic request to get an IPv6 address from the IPv6 DHCP server or router advertisements(RA). If "enable_auto_configuration" is true, OME retrieves IP configuration-IPv6 address, prefix, and gateway, from a DHCPv6 server on the existing network
     */
    enableAutoConfiguration: boolean;
    /**
     * Enable or disable access to the network using the IPv6.
     */
    enableIpv6: boolean;
    /**
     * Static IPv6 DNS alternate server. This option is applicable when "use_dhcp_for_dns_server_names" is false.
     */
    staticAlternateDnsServer: string;
    /**
     * Static IPv6 gateway address. This option is applicable when "enable_auto_configuration" is false.
     */
    staticGateway: string;
    /**
     * Static IPv6 address. This option is applicable when "enable_auto_configuration" is false.
     */
    staticIpAddress: string;
    /**
     * Static IPv6 DNS preferred server. This option is applicable when "use_dhcp_for_dns_server_names" is false.
     */
    staticPreferredDnsServer: string;
    /**
     * Static IPv6 prefix length. This option is applicable when "enable_auto_configuration" is false.
     */
    staticPrefixLength: number;
    /**
     * This option allows to automatically request and obtain a DNS server IPv6 address from the DHCP server. This option is applicable when "enable_auto_configuration" is true.
     */
    useDhcpForDnsServerNames: boolean;
}

export interface ApplianceNetworkAdapterSettingManagementVlan {
    /**
     * Enable or disable vLAN for management.The vLAN configuration cannot be updated if the "register_with_dns" field under "dns_configuration" is true. WARNING: Ensure that the network cable is plugged to the correct port after the vLAN configurationchanges have been made. If not, the configuration change may not be effective.
     */
    enableVlan: boolean;
    /**
     * vLAN ID. This option is applicable when "enable_vlan" is true.
     */
    id: number;
}

export interface ApplianceNetworkProxySetting {
    /**
     * Enable or disable proxy authentication. If "enable_authentication" is true, "proxy_username" and "proxy_password" must be provided. If "enable_authentication" is false, the proxy username and password are set to its default values.
     */
    enableAuthentication: boolean;
    /**
     * Enables or disables the HTTP proxy configuration. If "enable proxy" is false, then the HTTP proxy configuration is set to its default value.
     */
    enableProxy: boolean;
    /**
     * Proxy server address. This option is mandatory when "enable_proxy" is true.
     */
    ipAddress: string;
    /**
     * Proxy server password. This option is mandatory when "enable_authentication" is true.
     */
    password: string;
    /**
     * Proxy server's port number. This option is mandatory when "enable_proxy" is true.
     */
    proxyPort: number;
    /**
     * Proxy server username. This option is mandatory when "enable_authentication" is true.
     */
    username: string;
}

export interface ApplianceNetworkSessionSetting {
    /**
     * The maximum number of API sessions to be allowed.
     */
    apiSession: number;
    /**
     * Duration of inactivity in minutes after which the API session ends. This is mutually exclusive with "universal_timeout".
     */
    apiTimeout: number;
    /**
     * Enable or disable the universal inactivity timeout.
     */
    enableUniversalTimeout: boolean;
    /**
     * The maximum number of GUI sessions to be allowed.
     */
    guiSession: number;
    /**
     * Duration of inactivity in minutes after which the web interface of Graphical User Interface (GUI) session ends. This is mutually exclusive with "universal_timeout".
     */
    guiTimeout: number;
    /**
     * The maximum number of serial console sessions to be allowed. This is applicable only for OpenManage Enterprise Modular.
     */
    serialSession: number;
    /**
     * Duration of inactivity in minutes after which the serial console session ends.This is applicable only for OpenManage Enterprise Modular. This is mutually exclusive with "universal_timeout".
     */
    serialTimeout: number;
    /**
     * The maximum number of SSH sessions to be allowed. This is applicable to OME-M only.
     */
    sshSession: number;
    /**
     * Duration of inactivity in minutes after which the SSH session ends. This is applicable only for OpenManage Enterprise Modular. This is mutually exclusive with "universal_timeout".
     */
    sshTimeout: number;
    /**
     * Duration of inactivity in minutes after which all sessions end. This is applicable when "enable_universal_timeout" is true. This is mutually exclusive with "api_timeout", "gui_timeout", "ssh_timeout" and "serial_timeout".
     */
    universalTimeout: number;
}

export interface ApplianceNetworkTimeSetting {
    /**
     * Enables or disables Network Time Protocol(NTP).If "enable_ntp" is false, then the NTP addresses reset to their default values.
     */
    enableNtp: boolean;
    /**
     * The primary NTP address. This option is applicable when "enable_ntp" is true.
     */
    primaryNtpAddress: string;
    /**
     * The first secondary NTP address. This option is applicable when "enable_ntp" is true.
     */
    secondaryNtpAddress1: string;
    /**
     * The second secondary NTP address. This option is applicable when "enable_ntp" is true.
     */
    secondaryNtpAddress2: string;
    /**
     * Time in the current system. This option is only applicable when "enable_ntp" is false. This option must be provided in following format 'yyyy-mm-dd hh:mm:ss'.
     */
    systemTime: string;
    /**
     * The valid timezone ID to be used. This option is applicable for both system time and NTP time synchronization.
     */
    timeZone: string;
}

export interface ApplicationCsrSpecs {
    /**
     * Business Name.
     */
    businessName: string;
    /**
     * Country of the business.
     */
    country: string;
    /**
     * Department Name.
     */
    departmentName: string;
    /**
     * Distinguished Name.
     */
    distinguishedName: string;
    /**
     * Email address.
     */
    email: string;
    /**
     * Locality of the business.
     */
    locality: string;
    /**
     * State of the business.
     */
    state: string;
    /**
     * Subject Alternate names. Maximum 4.
     */
    subjectAlternateNames?: string[];
}

export interface ConfigurationComplianceTargetDevice {
    /**
     * End compliance status of the target device, used to check the drifts in the compliance status. Valid values are `Compliant`.
     */
    complianceStatus: string;
    /**
     * Target device servicetag to be remediated.
     */
    deviceServiceTag: string;
}

export interface DeploymentBootToNetworkIso {
    bootToNetwork: boolean;
    isoPath: string;
    isoTimeout: number;
    shareDetail: outputs.DeploymentBootToNetworkIsoShareDetail;
    shareType: string;
}

export interface DeploymentBootToNetworkIsoShareDetail {
    ipAddress: string;
    password: string;
    shareName: string;
    user: string;
    workGroup: string;
}

export interface DeploymentDeviceAttribute {
    attributes: outputs.DeploymentDeviceAttributeAttribute[];
    deviceServicetags: string[];
}

export interface DeploymentDeviceAttributeAttribute {
    attributeId: number;
    displayName: string;
    isIgnored: boolean;
    value: string;
}

export interface DevicesDevice {
    /**
     * ID of device.
     */
    id: number;
    /**
     * List of management IPs of device.
     */
    managementIps: string[];
    /**
     * Service tag of device.
     */
    serviceTag: string;
}

export interface DiscoveryDiscoveryConfigTarget {
    /**
     * - Provide the type of devices to be discovered.
     * 				- The accepted types are SERVER, CHASSIS, NETWORK SWITCH, and STORAGE.
     * 				- A combination or all of the above can be provided.
     * 				- "Supported protocols for each device type are:"
     * 				- SERVER - "redfish", "snmp", and "ssh".
     * 				- CHASSIS - "redfish".
     * 				- NETWORK SWITCH - "snmp".
     * 				- STORAGE - "snmp".
     */
    deviceTypes: string[];
    /**
     * - "Provide the list of IP addresses, host names, or the range of IP addresses of the devices to be discoveredor included."
     *          		- "Sample Valid IP Range Formats"
     *          		- "   192.35.0.0"
     *          		- "   192.36.0.0-10.36.0.255"
     *          		- "   192.37.0.0/24"
     *          		- "   2345:f2b1:f083:135::5500/118"
     *          		- "   2345:f2b1:f083:135::a500-2607:f2b1:f083:135::a600"
     *          		- "   hostname.domain.tld"
     *          		- "   hostname"
     *          		- "   2345:f2b1:f083:139::22a"
     *          		- "Sample Invalid IP Range Formats"
     *          		- "   192.35.0.*"
     *          		- "   192.36.0.0-255"
     *          		- "   192.35.0.0/255.255.255.0"
     *          		- NOTE: The range size for the number of IP addresses is limited to 16,385 (0x4001).
     *          		- NOTE: Both IPv6 and IPv6 CIDR formats are supported.
     */
    networkAddressDetails: string[];
    /**
     * REDFISH protocol
     */
    redfish?: outputs.DiscoveryDiscoveryConfigTargetRedfish;
    /**
     * Simple Network Management Protocol (SNMP)
     */
    snmp?: outputs.DiscoveryDiscoveryConfigTargetSnmp;
    /**
     * Secure Shell (SSH)
     */
    ssh?: outputs.DiscoveryDiscoveryConfigTargetSsh;
    /**
     * WSMAN protocol
     */
    wsman?: outputs.DiscoveryDiscoveryConfigTargetWsman;
}

export interface DiscoveryDiscoveryConfigTargetRedfish {
    /**
     * Enable the Certificate Authority (CA) check.
     */
    caCheck: boolean;
    /**
     * Enable the Common Name (CN) check.
     */
    cnCheck: boolean;
    /**
     * Provide a password for the protocol.
     */
    password: string;
    /**
     * Enter the port number that the job must use to discover the devices.
     */
    port: number;
    /**
     * Enter the number of repeated attempts required to discover a device
     */
    retries: number;
    /**
     * Enter the time in seconds after which a job must stop running.
     */
    timeout: number;
    /**
     * Provide a username for the protocol.
     */
    username: string;
}

export interface DiscoveryDiscoveryConfigTargetSnmp {
    /**
     * Community string for the SNMP protocol.
     */
    community: string;
    /**
     * Enter the port number that the job must use to discover the devices.
     */
    port: number;
    /**
     * Enter the number of repeated attempts required to discover a device.
     */
    retries: number;
    /**
     * Enter the time in seconds after which a job must stop running.
     */
    timeout: number;
}

export interface DiscoveryDiscoveryConfigTargetSsh {
    /**
     * Verify the known host key.
     */
    checkKnownHosts: boolean;
    /**
     * Use the SUDO option
     */
    isSudoUser: boolean;
    /**
     * Provide a password for the protocol.
     */
    password: string;
    /**
     * Enter the port number that the job must use to discover the devices.
     */
    port: number;
    /**
     * Enter the number of repeated attempts required to discover a device.
     */
    retries: number;
    /**
     * Enter the time in seconds after which a job must stop running.
     */
    timeout: number;
    /**
     * Provide a username for the protocol.
     */
    username: string;
}

export interface DiscoveryDiscoveryConfigTargetWsman {
    /**
     * Enable the Certificate Authority (CA) check.
     */
    caCheck: boolean;
    /**
     * Enable the Common Name (CN) check.
     */
    cnCheck: boolean;
    /**
     * Provide a password for the protocol.
     */
    password: string;
    /**
     * Enter the port number that the job must use to discover the devices.
     */
    port: number;
    /**
     * Enter the number of repeated attempts required to discover a device
     */
    retries: number;
    /**
     * Enter the time in seconds after which a job must stop running.
     */
    timeout: number;
    /**
     * Provide a username for the protocol.
     */
    username: string;
}

export interface DiscoveryJobTracking {
    /**
     * IPs discovered after tracking the job until it timeout.
     */
    discoveredIps: string[];
    /**
     * Provides information about job executions discovered after tracking the job until it timeout.
     */
    jobExecutionResults: string[];
    /**
     * IPs remains undiscovered after tracking the job until it timeout.
     */
    undiscoveredIps: string[];
}

export interface FirmwareBaselineComplianceSummary {
    complianceStatus: string;
    numberOfCritical: number;
    numberOfDowngrade: number;
    numberOfNormal: number;
    numberOfUnknown: number;
    numberOfWarning: number;
}

export interface FirmwareBaselineTarget {
    /**
     * ID of device associated with the firmware baseline.
     */
    id: number;
    /**
     * Type of device associated with the firmware baseline..
     */
    type: outputs.FirmwareBaselineTargetType;
}

export interface FirmwareBaselineTargetType {
    id: number;
    name: string;
}

export interface FirmwareCatalogAssociatedBaseline {
    /**
     * Baseline ID.
     */
    baselineId: number;
    /**
     * Baseline Name.
     */
    baselineName: string;
}

export interface FirmwareCatalogCatalogRefreshSchedule {
    /**
     * AM/PM for the schedule. Options are (AM, PM).
     */
    amPm: string;
    /**
     * Cadence. Options are(Weekly, Daily).
     */
    cadence: string;
    /**
     * Day of the Week, only useful for weekly schedules. Options are(Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday).
     */
    dayOfTheWeek: string;
    /**
     * Time of Day for the schedule in hour increments. Options are (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12).
     */
    timeOfDay: number;
}

export interface FirmwareCatalogRepository {
    backupExistingCatalog: boolean;
    checkCertificate: boolean;
    description: string;
    domainName: string;
    editable: boolean;
    id: number;
    name: string;
    repositoryType: string;
    source: string;
    username: string;
}

export interface GetApplicationCertificateIssuedBy {
    /**
     * Business Name.
     */
    businessName: string;
    /**
     * Country of the business.
     */
    country: string;
    /**
     * Department Name.
     */
    departmentName: string;
    /**
     * Distinguished Name.
     */
    distinguishedName: string;
    /**
     * Email address.
     */
    email: string;
    /**
     * Locality of the business.
     */
    locality: string;
    /**
     * State of the business.
     */
    state: string;
    /**
     * Subject Alternate names.
     */
    subjectAlternateNames: string[];
}

export interface GetApplicationCertificateIssuedTo {
    /**
     * Business Name.
     */
    businessName: string;
    /**
     * Country of the business.
     */
    country: string;
    /**
     * Department Name.
     */
    departmentName: string;
    /**
     * Distinguished Name.
     */
    distinguishedName: string;
    /**
     * Email address.
     */
    email: string;
    /**
     * Locality of the business.
     */
    locality: string;
    /**
     * State of the business.
     */
    state: string;
    /**
     * Subject Alternate names.
     */
    subjectAlternateNames: string[];
}

export interface GetConfigurationReportInfoComplianceReportDevice {
    /**
     * Device compliance status.
     */
    complianceStatus: string;
    /**
     * Device compliance details.
     */
    deviceComplianceDetails: string;
    /**
     * Device ID
     */
    deviceId: number;
    /**
     * Device Name.
     */
    deviceName: string;
    /**
     * Device servicetag.
     */
    deviceServicetag: string;
    /**
     * Device type
     */
    deviceType: number;
    /**
     * Inventory Time.
     */
    inventoryTime: string;
    /**
     * Device model.
     */
    model: string;
}

export interface GetDeviceComplianceReportDeviceComplianceReport {
    /**
     * Compliance Status
     */
    complianceStatus: string;
    /**
     * Component Compliance Reports
     */
    componentComplianceReports: outputs.GetDeviceComplianceReportDeviceComplianceReportComponentComplianceReport[];
    /**
     * Device Firmware Update Capable
     */
    deviceFirmwareUpdateCapable: boolean;
    /**
     * Device Id
     */
    deviceId: number;
    /**
     * Device Model
     */
    deviceModel: string;
    /**
     * Device Name
     */
    deviceName: string;
    /**
     * Device Type Id
     */
    deviceTypeId: number;
    /**
     * Device Type Name
     */
    deviceTypeName: string;
    /**
     * Device User Firmware Update Capable
     */
    deviceUserFirmwareUpdateCapable: boolean;
    /**
     * Firmware Status
     */
    firmwareStatus: string;
    /**
     * Id
     */
    id: number;
    /**
     * Reboot Required
     */
    rebootRequired: boolean;
    /**
     * Service Tag
     */
    serviceTag: string;
}

export interface GetDeviceComplianceReportDeviceComplianceReportComponentComplianceReport {
    /**
     * Compliance Dependencies
     */
    complianceDependencies: outputs.GetDeviceComplianceReportDeviceComplianceReportComponentComplianceReportComplianceDependency[];
    /**
     * Compliance Status
     */
    complianceStatus: string;
    /**
     * Component Type
     */
    componentType: string;
    /**
     * Criticality
     */
    criticality: string;
    /**
     * Current Version
     */
    currentVersion: string;
    /**
     * Dependency Upgrade Required
     */
    dependencyUpgradeRequired: boolean;
    /**
     * Id
     */
    id: number;
    /**
     * Impact Assessment
     */
    impactAssessment: string;
    /**
     * Name
     */
    name: string;
    /**
     * Path
     */
    path: string;
    /**
     * Prerequisite Info
     */
    prerequisiteInfo: string;
    /**
     * Reboot Required
     */
    rebootRequired: boolean;
    /**
     * Source Name
     */
    sourceName: string;
    /**
     * Target Identifer
     */
    targetIdentifier: string;
    /**
     * Unique Identifier
     */
    uniqueIdentifier: string;
    /**
     * Update Action
     */
    updateAction: string;
    /**
     * Uri
     */
    uri: string;
    /**
     * Version
     */
    version: string;
}

export interface GetDeviceComplianceReportDeviceComplianceReportComponentComplianceReportComplianceDependency {
    /**
     * Compliance Dependency Id
     */
    complianceDependencyId: number;
    /**
     * Is Hard Dependency
     */
    isHardDependency: boolean;
    /**
     * Name
     */
    name: string;
    /**
     * Path
     */
    path: string;
    /**
     * Reboot Required
     */
    rebootRequired: boolean;
    /**
     * Source Name
     */
    sourceName: string;
    /**
     * Unique Identifier
     */
    uniqueIdentifier: string;
    /**
     * Update Action
     */
    updateAction: string;
    /**
     * Uri
     */
    uri: string;
    /**
     * Version
     */
    version: string;
}

export interface GetDeviceDevice {
    /**
     * Asset Tag of the device.
     */
    assetTag: string;
    /**
     * Chassis IP of the device.
     */
    chassisIp: string;
    /**
     * Chassis Service Tag of the device.
     */
    chassisServiceTag: string;
    /**
     * Connection State of the device.
     */
    connectionState: boolean;
    /**
     * Connection State Reason of the device.
     */
    connectionStateReason: number;
    /**
     * Detailed inventory of the device. Detailed inventory is only fetched if only a single device is fetched by this datasource.
     */
    detailedInventory: outputs.GetDeviceDeviceDetailedInventory;
    /**
     * Device Capabilities of the device.
     */
    deviceCapabilities: number[];
    /**
     * Device Management of the device.
     */
    deviceManagements: outputs.GetDeviceDeviceDeviceManagement[];
    /**
     * Device Name of the device.
     */
    deviceName: string;
    /**
     * Device Service Tag of the device.
     */
    deviceServiceTag: string;
    /**
     * Device Subscription of the device.
     */
    deviceSubscription: string;
    /**
     * Discovery Configuration Job Info of the device.
     */
    discoveryConfigurationJobInformations: outputs.GetDeviceDeviceDiscoveryConfigurationJobInformation[];
    /**
     * Whether the device is enabled or not.
     */
    enabled: boolean;
    /**
     * ID of the device.
     */
    id: number;
    /**
     * Identifier of the device.
     */
    identifier: string;
    /**
     * Last Inventory Time of the device.
     */
    lastInventoryTime: string;
    /**
     * Last Status Time of the device.
     */
    lastStatusTime: string;
    /**
     * Managed State of the device.
     */
    managedState: number;
    /**
     * Model of the device.
     */
    model: string;
    /**
     * Power State of the device.
     */
    powerState: number;
    /**
     * Slot Configuration of the device.
     */
    slotConfiguration: outputs.GetDeviceDeviceSlotConfiguration;
    /**
     * Status of the device.
     */
    status: number;
    /**
     * System ID of the device.
     */
    systemId: number;
    /**
     * Type of the device.
     */
    type: number;
}

export interface GetDeviceDeviceDetailedInventory {
    /**
     * Device Capabilities
     */
    capabilities: outputs.GetDeviceDeviceDetailedInventoryCapability[];
    /**
     * CPU related Information.
     */
    cpuses: outputs.GetDeviceDeviceDetailedInventoryCpus[];
    /**
     * Disk related Information.
     */
    disks: outputs.GetDeviceDeviceDetailedInventoryDisk[];
    /**
     * FCI related Information.
     */
    fcis: outputs.GetDeviceDeviceDetailedInventoryFci[];
    /**
     * Device FRUs
     */
    fruses: outputs.GetDeviceDeviceDetailedInventoryFrus[];
    /**
     * Device Licenses
     */
    licenses: outputs.GetDeviceDeviceDetailedInventoryLicense[];
    /**
     * Device Locations
     */
    locations: outputs.GetDeviceDeviceDetailedInventoryLocation[];
    /**
     * Device Management
     */
    managementInfos: outputs.GetDeviceDeviceDetailedInventoryManagementInfo[];
    /**
     * Memory Information.
     */
    memories: outputs.GetDeviceDeviceDetailedInventoryMemory[];
    /**
     * NIC related Information.
     */
    nics: outputs.GetDeviceDeviceDetailedInventoryNic[];
    /**
     * OS related Information.
     */
    os: outputs.GetDeviceDeviceDetailedInventoryO[];
    /**
     * Server Power States
     */
    powerStates: outputs.GetDeviceDeviceDetailedInventoryPowerState[];
    /**
     * Power Supply related Information.
     */
    powerSupplies: outputs.GetDeviceDeviceDetailedInventoryPowerSupply[];
    /**
     * RAIDController Information.
     */
    raidControllers: outputs.GetDeviceDeviceDetailedInventoryRaidController[];
    /**
     * Server Device Cards.
     */
    serverDeviceCards: outputs.GetDeviceDeviceDetailedInventoryServerDeviceCard[];
    /**
     * Device Softwares
     */
    softwares: outputs.GetDeviceDeviceDetailedInventorySoftware[];
    /**
     * Storage Enclosure Information.
     */
    storageEnclosures: outputs.GetDeviceDeviceDetailedInventoryStorageEnclosure[];
    /**
     * Sub System Rollup Status
     */
    subsytemRollupStatuses: outputs.GetDeviceDeviceDetailedInventorySubsytemRollupStatus[];
}

export interface GetDeviceDeviceDetailedInventoryCapability {
    /**
     * Capability Type
     */
    capabilityType: outputs.GetDeviceDeviceDetailedInventoryCapabilityCapabilityType;
    /**
     * ID
     */
    id: number;
}

export interface GetDeviceDeviceDetailedInventoryCapabilityCapabilityType {
    /**
     * Capability ID
     */
    capabilityId: number;
    /**
     * Description
     */
    description: string;
    /**
     * IDOwner
     */
    idOwner: number;
    /**
     * Name
     */
    name: string;
}

export interface GetDeviceDeviceDetailedInventoryCpus {
    /**
     * Brand Name
     */
    brandName: string;
    /**
     * Current Speed
     */
    currentSpeed: number;
    /**
     * Family
     */
    family: string;
    /**
     * ID
     */
    id: number;
    /**
     * Instance ID
     */
    instanceId: string;
    /**
     * Max Speed
     */
    maxSpeed: number;
    /**
     * Model Name
     */
    modelName: string;
    /**
     * Number Of Cores
     */
    numberOfCores: number;
    /**
     * Number Of Enabled Cores
     */
    numberOfEnabledCores: number;
    /**
     * Slot Number
     */
    slotNumber: string;
    /**
     * Status
     */
    status: number;
    /**
     * Voltage
     */
    voltage: string;
}

export interface GetDeviceDeviceDetailedInventoryDisk {
    /**
     * Bus Type
     */
    busType: string;
    /**
     * Channel
     */
    channel: number;
    /**
     * Disk Number
     */
    diskNumber: string;
    /**
     * Enclosure ID
     */
    enclosureId: string;
    /**
     * Encryption Ability
     */
    encryptionAbility: boolean;
    /**
     * Form Factor
     */
    formFactor: string;
    /**
     * Free Space
     */
    freeSpace: string;
    /**
     * ID
     */
    id: number;
    /**
     * Manufactured Day
     */
    manufacturedDay: number;
    /**
     * Manufactured Week
     */
    manufacturedWeek: number;
    /**
     * Manufactured Year
     */
    manufacturedYear: number;
    /**
     * Media Type
     */
    mediaType: string;
    /**
     * Model Number
     */
    modelNumber: string;
    /**
     * Part Number
     */
    partNumber: string;
    /**
     * Predictive Failure State
     */
    predictiveFailureState: string;
    /**
     * Raid Status
     */
    raidStatus: string;
    /**
     * Remaining Read Write Endurance
     */
    remainingReadWriteEndurance: string;
    /**
     * Revision
     */
    revision: string;
    /**
     * Sas Address
     */
    sasAddress: string;
    /**
     * Security State
     */
    securityState: string;
    /**
     * Serial Number
     */
    serialNumber: string;
    /**
     * Size
     */
    size: string;
    /**
     * Slot Number
     */
    slotNumber: number;
    /**
     * Status
     */
    status: number;
    /**
     * Status String
     */
    statusString: string;
    /**
     * Used Space
     */
    usedSpace: string;
    /**
     * Vendor Name
     */
    vendorName: string;
}

export interface GetDeviceDeviceDetailedInventoryFci {
    /**
     * Device Description
     */
    deviceDescription: string;
    /**
     * Device Name
     */
    deviceName: string;
    /**
     * First Fctarget Lun
     */
    firstFctargetLun: string;
    /**
     * First Fctarget Wwpn
     */
    firstFctargetWwpn: string;
    /**
     * Fqdd
     */
    fqdd: string;
    /**
     * ID
     */
    id: number;
    /**
     * Link Status
     */
    linkStatus: string;
    /**
     * Port Number
     */
    portNumber: number;
    /**
     * Port Speed
     */
    portSpeed: string;
    /**
     * Second Fctarget Lun
     */
    secondFctargetLun: string;
    /**
     * Second Fctarget Wwpn
     */
    secondFctargetWwpn: string;
    /**
     * Vendor Name
     */
    vendorName: string;
    /**
     * Virtual Wwn
     */
    virtualWwn: string;
    /**
     * Virtual Wwpn
     */
    virtualWwpn: string;
    /**
     * Wwn
     */
    wwn: string;
    /**
     * Wwpn
     */
    wwpn: string;
}

export interface GetDeviceDeviceDetailedInventoryFrus {
    /**
     * ID
     */
    id: number;
    /**
     * Manufacturer
     */
    manufacturer: string;
    /**
     * Name
     */
    name: string;
    /**
     * Part Number
     */
    partNumber: string;
    /**
     * Revision
     */
    revision: string;
    /**
     * Serial Number
     */
    serialNumber: string;
}

export interface GetDeviceDeviceDetailedInventoryLicense {
    /**
     * Assigned Devices
     */
    assignedDevices: string;
    /**
     * Entitlement Id
     */
    entitlementId: string;
    /**
     * Eval Time Remaining
     */
    evalTimeRemaining: number;
    /**
     * License Bound
     */
    licenseBound: number;
    /**
     * License Description
     */
    licenseDescription: string;
    /**
     * License Status
     */
    licenseStatus: number;
    /**
     * License Type
     */
    licenseType: outputs.GetDeviceDeviceDetailedInventoryLicenseLicenseType;
    /**
     * Sold Date
     */
    soldDate: string;
}

export interface GetDeviceDeviceDetailedInventoryLicenseLicenseType {
    /**
     * License Id
     */
    licenseId: number;
    /**
     * Name
     */
    name: string;
}

export interface GetDeviceDeviceDetailedInventoryLocation {
    /**
     * Aisle
     */
    aisle: string;
    /**
     * Datacenter
     */
    datacenter: string;
    /**
     * ID
     */
    id: number;
    /**
     * Management System Unit
     */
    managementSystemUnit: number;
    /**
     * Rack
     */
    rack: string;
    /**
     * Rackslot
     */
    rackslot: string;
    /**
     * Room
     */
    room: string;
}

export interface GetDeviceDeviceDetailedInventoryManagementInfo {
    /**
     * DNSName
     */
    dnsName: string;
    /**
     * End Point Agents
     */
    endPointAgents: outputs.GetDeviceDeviceDetailedInventoryManagementInfoEndPointAgent[];
    /**
     * Instrumentation Name
     */
    instrumentationName: string;
    /**
     * IPAddress
     */
    ipAddress: string;
    /**
     * MACAddress
     */
    macAddress: string;
    /**
     * Management ID
     */
    managementId: number;
    /**
     * Management Type
     */
    managementType: outputs.GetDeviceDeviceDetailedInventoryManagementInfoManagementType;
}

export interface GetDeviceDeviceDetailedInventoryManagementInfoEndPointAgent {
    /**
     * Agent Name
     */
    agentName: string;
    /**
     * Has Creds
     */
    hasCreds: number;
    /**
     * Management Profile ID
     */
    managementProfileId: number;
    /**
     * Management URL
     */
    managementUrl: string;
    /**
     * Profile ID
     */
    profileId: string;
    /**
     * Status
     */
    status: number;
    /**
     * Status Date Time
     */
    statusDateTime: string;
    /**
     * Version
     */
    version: string;
}

export interface GetDeviceDeviceDetailedInventoryManagementInfoManagementType {
    /**
     * Description
     */
    description: string;
    /**
     * Management Type
     */
    managementType: number;
    /**
     * Name
     */
    name: string;
}

export interface GetDeviceDeviceDetailedInventoryMemory {
    /**
     * Bank Name
     */
    bankName: string;
    /**
     * Current Operating Speed
     */
    currentOperatingSpeed: number;
    /**
     * Device Description
     */
    deviceDescription: string;
    /**
     * ID
     */
    id: number;
    /**
     * Instance ID
     */
    instanceId: string;
    /**
     * Manufacturer
     */
    manufacturer: string;
    /**
     * Manufacturer Date
     */
    manufacturerDate: string;
    /**
     * Name
     */
    name: string;
    /**
     * Part Number
     */
    partNumber: string;
    /**
     * Rank
     */
    rank: string;
    /**
     * Serial Number
     */
    serialNumber: string;
    /**
     * Size
     */
    size: number;
    /**
     * Speed
     */
    speed: number;
    /**
     * Status
     */
    status: number;
    /**
     * Type Details
     */
    typeDetails: string;
}

export interface GetDeviceDeviceDetailedInventoryNic {
    /**
     * Nic ID
     */
    nicId: string;
    /**
     * Ports
     */
    ports: outputs.GetDeviceDeviceDetailedInventoryNicPort[];
    /**
     * Vendor Name
     */
    vendorName: string;
}

export interface GetDeviceDeviceDetailedInventoryNicPort {
    /**
     * Link Speed
     */
    linkSpeed: number;
    /**
     * Link Status
     */
    linkStatus: string;
    /**
     * Partitions
     */
    partitions: outputs.GetDeviceDeviceDetailedInventoryNicPortPartition[];
    /**
     * Port ID
     */
    portId: string;
    /**
     * Product Name
     */
    productName: string;
}

export interface GetDeviceDeviceDetailedInventoryNicPortPartition {
    /**
     * Current Mac Address
     */
    currentMacAddress: string;
    /**
     * Fcoe Mode
     */
    fcoeMode: string;
    /**
     * Fqdd
     */
    fqdd: string;
    /**
     * Iscsi Mode
     */
    iscsiMode: string;
    /**
     * Max Bandwidth
     */
    maxBandwidth: number;
    /**
     * Min Bandwidth
     */
    minBandwidth: number;
    /**
     * Nic Mode
     */
    nicMode: string;
    /**
     * Permanent Fcoe Mac Address
     */
    permanentFcoeMacAddress: string;
    /**
     * Permanent Iscsi Mac Address
     */
    permanentIscsiMacAddress: string;
    /**
     * Permanent Mac Address
     */
    permanentMacAddress: string;
    /**
     * Virtual Mac Address
     */
    virtualMacAddress: string;
    /**
     * Virtual Wwn
     */
    virtualWwn: string;
    /**
     * Virtual Wwpn
     */
    virtualWwpn: string;
    /**
     * Wwn
     */
    wwn: string;
    /**
     * Wwpn
     */
    wwpn: string;
}

export interface GetDeviceDeviceDetailedInventoryO {
    /**
     * Hostname
     */
    hostname: string;
    /**
     * ID
     */
    id: number;
    /**
     * Os Name
     */
    osName: string;
    /**
     * Os Version
     */
    osVersion: string;
}

export interface GetDeviceDeviceDetailedInventoryPowerState {
    /**
     * ID
     */
    id: number;
    /**
     * Power State
     */
    powerState: number;
}

export interface GetDeviceDeviceDetailedInventoryPowerSupply {
    /**
     * Ac Input
     */
    acInput: boolean;
    /**
     * Ac Output
     */
    acOutput: boolean;
    /**
     * Active Input Voltage
     */
    activeInputVoltage: string;
    /**
     * Firmware Version
     */
    firmwareVersion: string;
    /**
     * ID
     */
    id: number;
    /**
     * Input Power Units
     */
    inputPowerUnits: string;
    /**
     * Input Voltage
     */
    inputVoltage: number;
    /**
     * Location
     */
    location: string;
    /**
     * Manufacturer
     */
    manufacturer: string;
    /**
     * Model
     */
    model: string;
    /**
     * Name
     */
    name: string;
    /**
     * Operational Status
     */
    operationalStatus: string;
    /**
     * Output Watts
     */
    outputWatts: number;
    /**
     * Power Supply Type
     */
    powerSupplyType: number;
    /**
     * Range1Max Input Power Watts
     */
    range1MaxInputPowerWatts: number;
    /**
     * Range1Max Input Voltage High Milli Volts
     */
    range1MaxInputVoltageHighMilliVolts: number;
    /**
     * Rated Max Output Power
     */
    ratedMaxOutputPower: number;
    /**
     * Redundancy State
     */
    redundancyState: string;
    /**
     * Requested State
     */
    requestedState: number;
    /**
     * Serial Number
     */
    serialNumber: string;
    /**
     * State
     */
    state: string;
    /**
     * Status
     */
    status: number;
    /**
     * Switching Supply
     */
    switchingSupply: boolean;
}

export interface GetDeviceDeviceDetailedInventoryRaidController {
    /**
     * Cache Size In Mb
     */
    cacheSizeInMb: number;
    /**
     * Device Description
     */
    deviceDescription: string;
    /**
     * Driver Version
     */
    driverVersion: string;
    /**
     * Firmware Version
     */
    firmwareVersion: string;
    /**
     * Fqdd
     */
    fqdd: string;
    /**
     * ID
     */
    id: number;
    /**
     * Name
     */
    name: string;
    /**
     * Pci Slot
     */
    pciSlot: string;
    /**
     * Rollup Status
     */
    rollupStatus: number;
    /**
     * Rollup Status String
     */
    rollupStatusString: string;
    /**
     * Server Virtual Disks
     */
    serverVirtualDisks: outputs.GetDeviceDeviceDetailedInventoryRaidControllerServerVirtualDisk[];
    /**
     * Status
     */
    status: number;
    /**
     * Status Type
     */
    statusType: string;
    /**
     * Storage Assignment Allowed
     */
    storageAssignmentAllowed: string;
}

export interface GetDeviceDeviceDetailedInventoryRaidControllerServerVirtualDisk {
    /**
     * Cache Policy
     */
    cachePolicy: string;
    /**
     * Device ID
     */
    deviceId: number;
    /**
     * Fqdd
     */
    fqdd: string;
    /**
     * ID
     */
    id: number;
    /**
     * Layout
     */
    layout: string;
    /**
     * Lock Status
     */
    lockStatus: string;
    /**
     * Media Type
     */
    mediaType: string;
    /**
     * Name
     */
    name: string;
    /**
     * Raid Controller ID
     */
    raidControllerId: number;
    /**
     * Read Policy
     */
    readPolicy: string;
    /**
     * Rollup Status
     */
    rollupStatus: number;
    /**
     * Size
     */
    size: string;
    /**
     * State
     */
    state: string;
    /**
     * Status
     */
    status: number;
    /**
     * Stripe Size
     */
    stripeSize: string;
    /**
     * Target ID
     */
    targetId: number;
    /**
     * Write Policy
     */
    writePolicy: string;
}

export interface GetDeviceDeviceDetailedInventoryServerDeviceCard {
    /**
     * Databus Width
     */
    databusWidth: string;
    /**
     * Description
     */
    description: string;
    /**
     * ID
     */
    id: number;
    /**
     * Manufacturer
     */
    manufacturer: string;
    /**
     * Slot Length
     */
    slotLength: string;
    /**
     * Slot Number
     */
    slotNumber: string;
    /**
     * Slot Type
     */
    slotType: string;
}

export interface GetDeviceDeviceDetailedInventorySoftware {
    /**
     * Component ID
     */
    componentId: string;
    /**
     * Device Description
     */
    deviceDescription: string;
    /**
     * Installation Date
     */
    installationDate: string;
    /**
     * Instance ID
     */
    instanceId: string;
    /**
     * Pci Device ID
     */
    pciDeviceId: string;
    /**
     * Software Type
     */
    softwareType: string;
    /**
     * Status
     */
    status: string;
    /**
     * Sub Device ID
     */
    subDeviceId: string;
    /**
     * Sub Vendor ID
     */
    subVendorId: string;
    /**
     * Vendor ID
     */
    vendorId: string;
    /**
     * Version
     */
    version: string;
}

export interface GetDeviceDeviceDetailedInventoryStorageEnclosure {
    /**
     * Backplane Part Num
     */
    backplanePartNum: string;
    /**
     * Channel Number
     */
    channelNumber: string;
    /**
     * ID
     */
    id: number;
    /**
     * Name
     */
    name: string;
    /**
     * Number Of Fan Packs
     */
    numberOfFanPacks: number;
    /**
     * Rollup Status
     */
    rollupStatus: number;
    /**
     * Slot Count
     */
    slotCount: number;
    /**
     * Status
     */
    status: number;
    /**
     * Status Type String
     */
    statusType: string;
    /**
     * Version
     */
    version: string;
}

export interface GetDeviceDeviceDetailedInventorySubsytemRollupStatus {
    /**
     * ID
     */
    id: number;
    /**
     * Status
     */
    status: number;
    /**
     * Subsystem Name
     */
    subsystemName: string;
}

export interface GetDeviceDeviceDeviceManagement {
    /**
     * DNSName
     */
    dnsName: string;
    /**
     * Instrumentation Name
     */
    instrumentationName: string;
    /**
     * Mac Address
     */
    macAddress: string;
    /**
     * Management ID
     */
    managementId: number;
    /**
     * Management Profile
     */
    managementProfiles: outputs.GetDeviceDeviceDeviceManagementManagementProfile[];
    /**
     * Management Type
     */
    managementType: number;
    /**
     * Network Address
     */
    networkAddress: string;
}

export interface GetDeviceDeviceDeviceManagementManagementProfile {
    /**
     * Agent Name
     */
    agentName: string;
    /**
     * Has Creds
     */
    hasCreds: number;
    /**
     * Management ID
     */
    managementId: number;
    /**
     * Management Profile ID
     */
    managementProfileId: number;
    /**
     * Management URL
     */
    managementUrl: string;
    /**
     * Profile ID
     */
    profileId: string;
    /**
     * Status
     */
    status: number;
    /**
     * Status Date Time
     */
    statusDateTime: string;
    /**
     * Version
     */
    version: string;
}

export interface GetDeviceDeviceDiscoveryConfigurationJobInformation {
    /**
     * Created By
     */
    createdBy: string;
    /**
     * Discovery Job Name
     */
    discoveryJobName: string;
    /**
     * Group ID
     */
    groupId: string;
}

export interface GetDeviceDeviceSlotConfiguration {
    /**
     * Chassis Name
     */
    chassisName: string;
}

export interface GetDeviceFilters {
    /**
     * Service tags of the devices to fetch.
     */
    deviceServiceTags?: string[];
    /**
     * OData `$filter` compatible expression to be used for querying devices.
     */
    filterExpression?: string;
    /**
     * IDs of the devices to fetch.
     */
    ids?: number[];
    /**
     * IP expressions of the devices to fetch. Supported expressions are IPv4, IPv6, CIDRs and IP ranges.
     */
    ipExpressions?: string[];
}

export interface GetFirmwareBaselineComplianceReportFilter {
    /**
     * Firmware Baseline Compliance Reports with filter key and value pair. Supported filter keys are: DeviceName, DeviceModel, ServiceTag
     */
    key?: string;
    /**
     * The value for the filter key
     */
    value?: string;
}

export interface GetFirmwareBaselineComplianceReportFirmwareComplianceReport {
    /**
     * Compliance Status
     */
    complianceStatus: string;
    /**
     * Component Compliance Reports
     */
    componentComplianceReports: outputs.GetFirmwareBaselineComplianceReportFirmwareComplianceReportComponentComplianceReport[];
    /**
     * Device Firmware Update Capable
     */
    deviceFirmwareUpdateCapable: boolean;
    /**
     * Device ID
     */
    deviceId: number;
    /**
     * Device Model
     */
    deviceModel: string;
    /**
     * Device Name
     */
    deviceName: string;
    /**
     * Device Type ID
     */
    deviceTypeId: number;
    /**
     * Device Type Name
     */
    deviceTypeName: string;
    /**
     * Device User Firmware Update Capable
     */
    deviceUserFirmwareUpdateCapable: boolean;
    /**
     * Firmware Status
     */
    firmwareStatus: string;
    /**
     * ID
     */
    id: number;
    /**
     * Reboot Required
     */
    rebootRequired: boolean;
    /**
     * Service Tag
     */
    serviceTag: string;
}

export interface GetFirmwareBaselineComplianceReportFirmwareComplianceReportComponentComplianceReport {
    /**
     * Compliance Dependencies
     */
    complianceDependencies: outputs.GetFirmwareBaselineComplianceReportFirmwareComplianceReportComponentComplianceReportComplianceDependency[];
    /**
     * Compliance Status
     */
    complianceStatus: string;
    /**
     * Component Type
     */
    componentType: string;
    /**
     * Criticality
     */
    criticality: string;
    /**
     * Current Version
     */
    currentVersion: string;
    /**
     * Dependency Upgrade Required
     */
    dependencyUpgradeRequired: boolean;
    /**
     * ID
     */
    id: number;
    /**
     * Impact Assessment
     */
    impactAssessment: string;
    /**
     * Name
     */
    name: string;
    /**
     * Path
     */
    path: string;
    /**
     * Prerequisite Info
     */
    prerequisiteInfo: string;
    /**
     * Reboot Required
     */
    rebootRequired: boolean;
    /**
     * Source Name
     */
    sourceName: string;
    /**
     * Target Identifier
     */
    targetIdentifier: string;
    /**
     * Unique Identifier
     */
    uniqueIdentifier: string;
    /**
     * Update Action
     */
    updateAction: string;
    /**
     * URI
     */
    uri: string;
    /**
     * Version
     */
    version: string;
}

export interface GetFirmwareBaselineComplianceReportFirmwareComplianceReportComponentComplianceReportComplianceDependency {
    /**
     * Compliance Dependency Id
     */
    complianceDependencyId: string;
    /**
     * Is Hard Dependency
     */
    isHardDependency: boolean;
    /**
     * Name
     */
    name: string;
    /**
     * Path
     */
    path: string;
    /**
     * Reboot Required
     */
    rebootRequired: boolean;
    /**
     * Source Name
     */
    sourceName: string;
    /**
     * Unique Identifier
     */
    uniqueIdentifier: string;
    /**
     * Update Action
     */
    updateAction: string;
    /**
     * Uri
     */
    uri: string;
    /**
     * Version
     */
    version: string;
}

export interface GetFirmwareCatalogFirmwareCatalog {
    /**
     * Associated Baselines.
     */
    associatedBaselines: outputs.GetFirmwareCatalogFirmwareCatalogAssociatedBaseline[];
    /**
     * Baseline Location.
     */
    baselineLocation: string;
    /**
     * Bundles Count.
     */
    bundlesCount: number;
    /**
     * Create Date.
     */
    createDate: string;
    /**
     * Filename.
     */
    filename: string;
    /**
     * id.
     */
    id: number;
    /**
     * Last Update.
     */
    lastUpdate: string;
    /**
     * Manifest Identifier.
     */
    manifestIdentifier: string;
    /**
     * Manifest Version.
     */
    manifestVersion: string;
    /**
     * Next Update.
     */
    nextUpdate: string;
    /**
     * Owner ID.
     */
    ownerId: number;
    /**
     * Predcessor Identifier.
     */
    predcessorIdentifier: string;
    /**
     * Release Identifier.
     */
    releaseIdentifier: string;
    /**
     * Repository.
     */
    repository: outputs.GetFirmwareCatalogFirmwareCatalogRepository;
    /**
     * Schedule.
     */
    schedule: outputs.GetFirmwareCatalogFirmwareCatalogSchedule;
    /**
     * Source path.
     */
    sourcePath: string;
    /**
     * Status.
     */
    status: string;
    /**
     * Task ID.
     */
    taskId: number;
}

export interface GetFirmwareCatalogFirmwareCatalogAssociatedBaseline {
    /**
     * Baseline ID.
     */
    baselineId: number;
    /**
     * Baseline Name.
     */
    baselineName: string;
}

export interface GetFirmwareCatalogFirmwareCatalogRepository {
    /**
     * Backup Existing Catalog.
     */
    backupExistingCatalog: boolean;
    /**
     * Check Certificate.
     */
    checkCertificate: boolean;
    /**
     * Description.
     */
    description: string;
    /**
     * Domain Name.
     */
    domainName: string;
    /**
     * Editable.
     */
    editable: boolean;
    /**
     * ID.
     */
    id: number;
    /**
     * Name.
     */
    name: string;
    /**
     * Repository Type.
     */
    repositoryType: string;
    /**
     * Source.
     */
    source: string;
    /**
     * Username.
     */
    username: string;
}

export interface GetFirmwareCatalogFirmwareCatalogSchedule {
    /**
     * Cron.
     */
    cron: string;
    /**
     * End Time.
     */
    endTime: string;
    /**
     * Run later.
     */
    runLater: boolean;
    /**
     * Run Now.
     */
    runNow: boolean;
    /**
     * Start Time.
     */
    startTime: string;
}

export interface GetFirmwareRepositoryFbcRepository {
    /**
     * Catalog will take backup automatically if it is true.
     */
    backupExistingCatalog: boolean;
    /**
     * If certificate check must be done for HTTPS repository.
     */
    checkCertificate: boolean;
    /**
     * Description of the repository.
     */
    description: string;
    /**
     * Domain Name for user credentials.
     */
    domainName: string;
    /**
     * True, if the catalog can be editable.
     */
    editable: boolean;
    /**
     * ID of the repository.
     */
    id: number;
    /**
     * Unique name of the repository.
     */
    name: string;
    /**
     * Source of the repository.
     */
    repositoryType: string;
    /**
     * URL or IP or FQDN of the repository host.
     */
    source: string;
    /**
     * Username to access the share containing the catalog (CIFS/HTTPS).
     */
    username: string;
}

export interface GetGroupdevicesInfoDeviceGroups {
    /**
     * The user who created the group.
     */
    createdBy: string;
    /**
     * Creation time of the group.
     */
    creationTime: string;
    /**
     * Definition description of the group.
     */
    definitionDescription: string;
    /**
     * Definition ID of the group.
     */
    definitionId: number;
    /**
     * Description of the group.
     */
    description: string;
    /**
     * Devices of the group.
     */
    devices: outputs.GetGroupdevicesInfoDeviceGroupsDevice[];
    /**
     * global_status of the group.
     */
    globalStatus: number;
    /**
     * If the group has attributes.
     */
    hasAttributes: boolean;
    /**
     * ID of the group.
     */
    id: number;
    /**
     * ID Owner of the group.
     */
    idOwner: number;
    /**
     * If access of this group is allowed.
     */
    isAccessAllowed: boolean;
    /**
     * Membership Type ID of the group.
     */
    membershipTypeId: number;
    /**
     * Name of the group.
     */
    name: string;
    /**
     * Parent ID of the group.
     */
    parentId: number;
    /**
     * Sub Groups of the group.
     */
    subGroups: outputs.GetGroupdevicesInfoDeviceGroupsSubGroup[];
    /**
     * Type ID of the group.
     */
    typeId: number;
    /**
     * The user who updated the group.
     */
    updatedBy: string;
    /**
     * Last updation time of the group.
     */
    updatedTime: string;
    /**
     * If the group is visible or not.
     */
    visible: boolean;
}

export interface GetGroupdevicesInfoDeviceGroupsDevice {
    /**
     * ID of the device.
     */
    id: number;
    /**
     * Service Tag of the device
     */
    servicetag: string;
}

export interface GetGroupdevicesInfoDeviceGroupsSubGroup {
    /**
     * ID of the sub group.
     */
    id: number;
    /**
     * Name of the sub group.
     */
    name: string;
}

export interface GetTemplateInfoAttribute {
    attributeId: number;
    displayName: string;
    isIgnored: boolean;
    value: string;
}

export interface GetTemplateInfoVlan {
    bondingTechnology: string;
    propogateVlan: boolean;
    vlanAttributes: outputs.GetTemplateInfoVlanVlanAttribute[];
}

export interface GetTemplateInfoVlanVlanAttribute {
    isNicBonded: boolean;
    nicIdentifier: string;
    port: number;
    taggedNetworks: number[];
    untaggedNetwork: number;
}

export interface GetVlannetworksInfoVlanNetwork {
    /**
     * Description of the vlan network.
     */
    description: string;
    /**
     * Reference ID for a vlan.
     */
    internalRefNwuuId: string;
    /**
     * Name of the vlan network.
     */
    name: string;
    /**
     * Type of vlan.
     */
    type: number;
    /**
     * Unique ID for the vlan network.
     */
    vlanId: number;
    /**
     * Vlan maximum.
     */
    vlanMaximum: number;
    /**
     * Vlan minimum.
     */
    vlanMinimum: number;
}

export interface TemplateAttribute {
    attributeId: number;
    displayName: string;
    isIgnored: boolean;
    value: string;
}

export interface TemplateVlan {
    bondingTechnology: string;
    propogateVlan: boolean;
    vlanAttributes: outputs.TemplateVlanVlanAttribute[];
}

export interface TemplateVlanVlanAttribute {
    isNicBonded: boolean;
    nicIdentifier: string;
    port: number;
    taggedNetworks: number[];
    untaggedNetwork: number;
}

