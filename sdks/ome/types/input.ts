// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ApplianceNetworkAdapterSetting {
    /**
     * Domain Name System(DNS) settings
     */
    dnsConfiguration?: pulumi.Input<inputs.ApplianceNetworkAdapterSettingDnsConfiguration>;
    /**
     * Enable or disable Network Interface Card (NIC) configuration
     */
    enableNic: pulumi.Input<boolean>;
    /**
     * If there are multiple interfaces, network configuration changes can be applied to a single interface using the `interface name` of the NIC.
     */
    interfaceName: pulumi.Input<string>;
    /**
     * IPv4 network configuration. (Warning) Ensure that you have an alternate interface to access OpenManage Enterprise as these options can change the current IPv4 address
     */
    ipv4Configuration?: pulumi.Input<inputs.ApplianceNetworkAdapterSettingIpv4Configuration>;
    /**
     * IPv6 network configuration. (Warning) Ensure that you have an alternate interface to access OpenManage Enterprise as these options can change the current IPv6 address
     */
    ipv6Configuration?: pulumi.Input<inputs.ApplianceNetworkAdapterSettingIpv6Configuration>;
    /**
     * Job ID
     */
    jobId?: pulumi.Input<number>;
    /**
     * vLAN configuration. settings are applicable for OpenManage Enterprise Modular
     */
    managementVlan?: pulumi.Input<inputs.ApplianceNetworkAdapterSettingManagementVlan>;
    /**
     * The time in seconds, after which settings are applied
     */
    rebootDelay?: pulumi.Input<number>;
}

export interface ApplianceNetworkAdapterSettingDnsConfiguration {
    /**
     * Static DNS domain name. This is applicable when "use_dhcp_for_dns_domain_name" is false.
     */
    dnsDomainName?: pulumi.Input<string>;
    /**
     * DNS name for "hostname". This is applicable when "register_with_dns" is true.
     */
    dnsName?: pulumi.Input<string>;
    /**
     * Register/Unregister I(dns_name) on the DNS Server.This option cannot be updated if vLAN configuration changes.
     */
    registerWithDns?: pulumi.Input<boolean>;
    /**
     * Get the "dns_domain_name" using a DHCP server.
     */
    useDhcpForDnsServerNames?: pulumi.Input<boolean>;
}

export interface ApplianceNetworkAdapterSettingIpv4Configuration {
    /**
     * Enable or disable the automatic request to get an IPv4 address from the IPv4 Dynamic Host Configuration Protocol (DHCP) server. If enable_dhcp option is true, OpenManage Enterprise retrieves the IP configurationâ€”IPv4 address, subnet mask, and gateway from a DHCP server on the existing network.
     */
    enableDhcp?: pulumi.Input<boolean>;
    /**
     * Enable or disable access to the network using IPv4.
     */
    enableIpv4: pulumi.Input<boolean>;
    /**
     * Static IPv4 DNS alternate server. This option is applicable when "use_dhcp_for_dns_server_names" is false.
     */
    staticAlternateDnsServer?: pulumi.Input<string>;
    /**
     * Static IPv4 gateway address. This option is applicable when "enable_dhcp" is false.
     */
    staticGateway?: pulumi.Input<string>;
    /**
     * Static IPv4 address. This option is applicable when "enable_dhcp" is false.
     */
    staticIpAddress?: pulumi.Input<string>;
    /**
     * Static IPv4 DNS preferred server. This option is applicable when "use_dhcp_for_dns_server_names" is false.
     */
    staticPreferredDnsServer?: pulumi.Input<string>;
    /**
     * Static IPv4 subnet mask address. This option is applicable when "enable_dhcp" is false.
     */
    staticSubnetMask?: pulumi.Input<string>;
    /**
     * This option allows to automatically request and obtain a DNS server IPv4 address from the DHCP server. This option is applicable when "enable_dhcp" is true.
     */
    useDhcpForDnsServerNames?: pulumi.Input<boolean>;
}

export interface ApplianceNetworkAdapterSettingIpv6Configuration {
    /**
     * Enable or disable the automatic request to get an IPv6 address from the IPv6 DHCP server or router advertisements(RA). If "enable_auto_configuration" is true, OME retrieves IP configuration-IPv6 address, prefix, and gateway, from a DHCPv6 server on the existing network
     */
    enableAutoConfiguration?: pulumi.Input<boolean>;
    /**
     * Enable or disable access to the network using the IPv6.
     */
    enableIpv6: pulumi.Input<boolean>;
    /**
     * Static IPv6 DNS alternate server. This option is applicable when "use_dhcp_for_dns_server_names" is false.
     */
    staticAlternateDnsServer?: pulumi.Input<string>;
    /**
     * Static IPv6 gateway address. This option is applicable when "enable_auto_configuration" is false.
     */
    staticGateway?: pulumi.Input<string>;
    /**
     * Static IPv6 address. This option is applicable when "enable_auto_configuration" is false.
     */
    staticIpAddress?: pulumi.Input<string>;
    /**
     * Static IPv6 DNS preferred server. This option is applicable when "use_dhcp_for_dns_server_names" is false.
     */
    staticPreferredDnsServer?: pulumi.Input<string>;
    /**
     * Static IPv6 prefix length. This option is applicable when "enable_auto_configuration" is false.
     */
    staticPrefixLength?: pulumi.Input<number>;
    /**
     * This option allows to automatically request and obtain a DNS server IPv6 address from the DHCP server. This option is applicable when "enable_auto_configuration" is true.
     */
    useDhcpForDnsServerNames?: pulumi.Input<boolean>;
}

export interface ApplianceNetworkAdapterSettingManagementVlan {
    /**
     * Enable or disable vLAN for management.The vLAN configuration cannot be updated if the "register_with_dns" field under "dns_configuration" is true. WARNING: Ensure that the network cable is plugged to the correct port after the vLAN configurationchanges have been made. If not, the configuration change may not be effective.
     */
    enableVlan: pulumi.Input<boolean>;
    /**
     * vLAN ID. This option is applicable when "enable_vlan" is true.
     */
    id?: pulumi.Input<number>;
}

export interface ApplianceNetworkProxySetting {
    /**
     * Enable or disable proxy authentication. If "enable_authentication" is true, "proxy_username" and "proxy_password" must be provided. If "enable_authentication" is false, the proxy username and password are set to its default values.
     */
    enableAuthentication?: pulumi.Input<boolean>;
    /**
     * Enables or disables the HTTP proxy configuration. If "enable proxy" is false, then the HTTP proxy configuration is set to its default value.
     */
    enableProxy: pulumi.Input<boolean>;
    /**
     * Proxy server address. This option is mandatory when "enable_proxy" is true.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Proxy server password. This option is mandatory when "enable_authentication" is true.
     */
    password?: pulumi.Input<string>;
    /**
     * Proxy server's port number. This option is mandatory when "enable_proxy" is true.
     */
    proxyPort?: pulumi.Input<number>;
    /**
     * Proxy server username. This option is mandatory when "enable_authentication" is true.
     */
    username?: pulumi.Input<string>;
}

export interface ApplianceNetworkSessionSetting {
    /**
     * The maximum number of API sessions to be allowed.
     */
    apiSession?: pulumi.Input<number>;
    /**
     * Duration of inactivity in minutes after which the API session ends. This is mutually exclusive with "universal_timeout".
     */
    apiTimeout?: pulumi.Input<number>;
    /**
     * Enable or disable the universal inactivity timeout.
     */
    enableUniversalTimeout?: pulumi.Input<boolean>;
    /**
     * The maximum number of GUI sessions to be allowed.
     */
    guiSession?: pulumi.Input<number>;
    /**
     * Duration of inactivity in minutes after which the web interface of Graphical User Interface (GUI) session ends. This is mutually exclusive with "universal_timeout".
     */
    guiTimeout?: pulumi.Input<number>;
    /**
     * The maximum number of serial console sessions to be allowed. This is applicable only for OpenManage Enterprise Modular.
     */
    serialSession?: pulumi.Input<number>;
    /**
     * Duration of inactivity in minutes after which the serial console session ends.This is applicable only for OpenManage Enterprise Modular. This is mutually exclusive with "universal_timeout".
     */
    serialTimeout?: pulumi.Input<number>;
    /**
     * The maximum number of SSH sessions to be allowed. This is applicable to OME-M only.
     */
    sshSession?: pulumi.Input<number>;
    /**
     * Duration of inactivity in minutes after which the SSH session ends. This is applicable only for OpenManage Enterprise Modular. This is mutually exclusive with "universal_timeout".
     */
    sshTimeout?: pulumi.Input<number>;
    /**
     * Duration of inactivity in minutes after which all sessions end. This is applicable when "enable_universal_timeout" is true. This is mutually exclusive with "api_timeout", "gui_timeout", "ssh_timeout" and "serial_timeout".
     */
    universalTimeout?: pulumi.Input<number>;
}

export interface ApplianceNetworkTimeSetting {
    /**
     * Enables or disables Network Time Protocol(NTP).If "enable_ntp" is false, then the NTP addresses reset to their default values.
     */
    enableNtp?: pulumi.Input<boolean>;
    /**
     * The primary NTP address. This option is applicable when "enable_ntp" is true.
     */
    primaryNtpAddress?: pulumi.Input<string>;
    /**
     * The first secondary NTP address. This option is applicable when "enable_ntp" is true.
     */
    secondaryNtpAddress1?: pulumi.Input<string>;
    /**
     * The second secondary NTP address. This option is applicable when "enable_ntp" is true.
     */
    secondaryNtpAddress2?: pulumi.Input<string>;
    /**
     * Time in the current system. This option is only applicable when "enable_ntp" is false. This option must be provided in following format 'yyyy-mm-dd hh:mm:ss'.
     */
    systemTime?: pulumi.Input<string>;
    /**
     * The valid timezone ID to be used. This option is applicable for both system time and NTP time synchronization.
     */
    timeZone: pulumi.Input<string>;
}

export interface ApplicationCsrSpecs {
    /**
     * Business Name.
     */
    businessName: pulumi.Input<string>;
    /**
     * Country of the business.
     */
    country: pulumi.Input<string>;
    /**
     * Department Name.
     */
    departmentName: pulumi.Input<string>;
    /**
     * Distinguished Name.
     */
    distinguishedName: pulumi.Input<string>;
    /**
     * Email address.
     */
    email: pulumi.Input<string>;
    /**
     * Locality of the business.
     */
    locality: pulumi.Input<string>;
    /**
     * State of the business.
     */
    state: pulumi.Input<string>;
    /**
     * Subject Alternate names. Maximum 4.
     */
    subjectAlternateNames?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ConfigurationComplianceTargetDevice {
    /**
     * End compliance status of the target device, used to check the drifts in the compliance status. Valid values are `Compliant`.
     */
    complianceStatus: pulumi.Input<string>;
    /**
     * Target device servicetag to be remediated.
     */
    deviceServiceTag: pulumi.Input<string>;
}

export interface DeploymentBootToNetworkIso {
    bootToNetwork: pulumi.Input<boolean>;
    isoPath: pulumi.Input<string>;
    isoTimeout: pulumi.Input<number>;
    shareDetail: pulumi.Input<inputs.DeploymentBootToNetworkIsoShareDetail>;
    shareType: pulumi.Input<string>;
}

export interface DeploymentBootToNetworkIsoShareDetail {
    ipAddress: pulumi.Input<string>;
    password: pulumi.Input<string>;
    shareName: pulumi.Input<string>;
    user: pulumi.Input<string>;
    workGroup: pulumi.Input<string>;
}

export interface DeploymentDeviceAttribute {
    attributes: pulumi.Input<pulumi.Input<inputs.DeploymentDeviceAttributeAttribute>[]>;
    deviceServicetags: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DeploymentDeviceAttributeAttribute {
    attributeId: pulumi.Input<number>;
    displayName: pulumi.Input<string>;
    isIgnored: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface DevicesDevice {
    /**
     * ID of device.
     */
    id?: pulumi.Input<number>;
    /**
     * List of management IPs of device.
     */
    managementIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Service tag of device.
     */
    serviceTag?: pulumi.Input<string>;
}

export interface DiscoveryDiscoveryConfigTarget {
    /**
     * - Provide the type of devices to be discovered.
     * 				- The accepted types are SERVER, CHASSIS, NETWORK SWITCH, and STORAGE.
     * 				- A combination or all of the above can be provided.
     * 				- "Supported protocols for each device type are:"
     * 				- SERVER - "redfish", "snmp", and "ssh".
     * 				- CHASSIS - "redfish".
     * 				- NETWORK SWITCH - "snmp".
     * 				- STORAGE - "snmp".
     */
    deviceTypes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * - "Provide the list of IP addresses, host names, or the range of IP addresses of the devices to be discoveredor included."
     *          		- "Sample Valid IP Range Formats"
     *          		- "   192.35.0.0"
     *          		- "   192.36.0.0-10.36.0.255"
     *          		- "   192.37.0.0/24"
     *          		- "   2345:f2b1:f083:135::5500/118"
     *          		- "   2345:f2b1:f083:135::a500-2607:f2b1:f083:135::a600"
     *          		- "   hostname.domain.tld"
     *          		- "   hostname"
     *          		- "   2345:f2b1:f083:139::22a"
     *          		- "Sample Invalid IP Range Formats"
     *          		- "   192.35.0.*"
     *          		- "   192.36.0.0-255"
     *          		- "   192.35.0.0/255.255.255.0"
     *          		- NOTE: The range size for the number of IP addresses is limited to 16,385 (0x4001).
     *          		- NOTE: Both IPv6 and IPv6 CIDR formats are supported.
     */
    networkAddressDetails: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * REDFISH protocol
     */
    redfish?: pulumi.Input<inputs.DiscoveryDiscoveryConfigTargetRedfish>;
    /**
     * Simple Network Management Protocol (SNMP)
     */
    snmp?: pulumi.Input<inputs.DiscoveryDiscoveryConfigTargetSnmp>;
    /**
     * Secure Shell (SSH)
     */
    ssh?: pulumi.Input<inputs.DiscoveryDiscoveryConfigTargetSsh>;
    /**
     * WSMAN protocol
     */
    wsman?: pulumi.Input<inputs.DiscoveryDiscoveryConfigTargetWsman>;
}

export interface DiscoveryDiscoveryConfigTargetRedfish {
    /**
     * Enable the Certificate Authority (CA) check.
     */
    caCheck?: pulumi.Input<boolean>;
    /**
     * Enable the Common Name (CN) check.
     */
    cnCheck?: pulumi.Input<boolean>;
    /**
     * Provide a password for the protocol.
     */
    password: pulumi.Input<string>;
    /**
     * Enter the port number that the job must use to discover the devices.
     */
    port?: pulumi.Input<number>;
    /**
     * Enter the number of repeated attempts required to discover a device
     */
    retries?: pulumi.Input<number>;
    /**
     * Enter the time in seconds after which a job must stop running.
     */
    timeout?: pulumi.Input<number>;
    /**
     * Provide a username for the protocol.
     */
    username: pulumi.Input<string>;
}

export interface DiscoveryDiscoveryConfigTargetSnmp {
    /**
     * Community string for the SNMP protocol.
     */
    community: pulumi.Input<string>;
    /**
     * Enter the port number that the job must use to discover the devices.
     */
    port?: pulumi.Input<number>;
    /**
     * Enter the number of repeated attempts required to discover a device.
     */
    retries?: pulumi.Input<number>;
    /**
     * Enter the time in seconds after which a job must stop running.
     */
    timeout?: pulumi.Input<number>;
}

export interface DiscoveryDiscoveryConfigTargetSsh {
    /**
     * Verify the known host key.
     */
    checkKnownHosts?: pulumi.Input<boolean>;
    /**
     * Use the SUDO option
     */
    isSudoUser?: pulumi.Input<boolean>;
    /**
     * Provide a password for the protocol.
     */
    password: pulumi.Input<string>;
    /**
     * Enter the port number that the job must use to discover the devices.
     */
    port?: pulumi.Input<number>;
    /**
     * Enter the number of repeated attempts required to discover a device.
     */
    retries?: pulumi.Input<number>;
    /**
     * Enter the time in seconds after which a job must stop running.
     */
    timeout?: pulumi.Input<number>;
    /**
     * Provide a username for the protocol.
     */
    username: pulumi.Input<string>;
}

export interface DiscoveryDiscoveryConfigTargetWsman {
    /**
     * Enable the Certificate Authority (CA) check.
     */
    caCheck?: pulumi.Input<boolean>;
    /**
     * Enable the Common Name (CN) check.
     */
    cnCheck?: pulumi.Input<boolean>;
    /**
     * Provide a password for the protocol.
     */
    password: pulumi.Input<string>;
    /**
     * Enter the port number that the job must use to discover the devices.
     */
    port?: pulumi.Input<number>;
    /**
     * Enter the number of repeated attempts required to discover a device
     */
    retries?: pulumi.Input<number>;
    /**
     * Enter the time in seconds after which a job must stop running.
     */
    timeout?: pulumi.Input<number>;
    /**
     * Provide a username for the protocol.
     */
    username: pulumi.Input<string>;
}

export interface DiscoveryJobTracking {
    /**
     * IPs discovered after tracking the job until it timeout.
     */
    discoveredIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Provides information about job executions discovered after tracking the job until it timeout.
     */
    jobExecutionResults?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IPs remains undiscovered after tracking the job until it timeout.
     */
    undiscoveredIps?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FirmwareBaselineComplianceSummary {
    complianceStatus: pulumi.Input<string>;
    numberOfCritical: pulumi.Input<number>;
    numberOfDowngrade: pulumi.Input<number>;
    numberOfNormal: pulumi.Input<number>;
    numberOfUnknown: pulumi.Input<number>;
    numberOfWarning: pulumi.Input<number>;
}

export interface FirmwareBaselineTarget {
    /**
     * ID of device associated with the firmware baseline.
     */
    id: pulumi.Input<number>;
    /**
     * Type of device associated with the firmware baseline..
     */
    type: pulumi.Input<inputs.FirmwareBaselineTargetType>;
}

export interface FirmwareBaselineTargetType {
    id: pulumi.Input<number>;
    name: pulumi.Input<string>;
}

export interface FirmwareCatalogAssociatedBaseline {
    /**
     * Baseline ID.
     */
    baselineId?: pulumi.Input<number>;
    /**
     * Baseline Name.
     */
    baselineName?: pulumi.Input<string>;
}

export interface FirmwareCatalogCatalogRefreshSchedule {
    /**
     * AM/PM for the schedule. Options are (AM, PM).
     */
    amPm?: pulumi.Input<string>;
    /**
     * Cadence. Options are(Weekly, Daily).
     */
    cadence?: pulumi.Input<string>;
    /**
     * Day of the Week, only useful for weekly schedules. Options are(Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday).
     */
    dayOfTheWeek?: pulumi.Input<string>;
    /**
     * Time of Day for the schedule in hour increments. Options are (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12).
     */
    timeOfDay?: pulumi.Input<number>;
}

export interface FirmwareCatalogRepository {
    backupExistingCatalog: pulumi.Input<boolean>;
    checkCertificate: pulumi.Input<boolean>;
    description: pulumi.Input<string>;
    domainName: pulumi.Input<string>;
    editable: pulumi.Input<boolean>;
    id: pulumi.Input<number>;
    name: pulumi.Input<string>;
    repositoryType: pulumi.Input<string>;
    source: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface GetDeviceFilters {
    /**
     * Service tags of the devices to fetch.
     */
    deviceServiceTags?: string[];
    /**
     * OData `$filter` compatible expression to be used for querying devices.
     */
    filterExpression?: string;
    /**
     * IDs of the devices to fetch.
     */
    ids?: number[];
    /**
     * IP expressions of the devices to fetch. Supported expressions are IPv4, IPv6, CIDRs and IP ranges.
     */
    ipExpressions?: string[];
}

export interface GetDeviceFiltersArgs {
    /**
     * Service tags of the devices to fetch.
     */
    deviceServiceTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * OData `$filter` compatible expression to be used for querying devices.
     */
    filterExpression?: pulumi.Input<string>;
    /**
     * IDs of the devices to fetch.
     */
    ids?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * IP expressions of the devices to fetch. Supported expressions are IPv4, IPv6, CIDRs and IP ranges.
     */
    ipExpressions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetFirmwareBaselineComplianceReportFilter {
    /**
     * Firmware Baseline Compliance Reports with filter key and value pair. Supported filter keys are: DeviceName, DeviceModel, ServiceTag
     */
    key?: string;
    /**
     * The value for the filter key
     */
    value?: string;
}

export interface GetFirmwareBaselineComplianceReportFilterArgs {
    /**
     * Firmware Baseline Compliance Reports with filter key and value pair. Supported filter keys are: DeviceName, DeviceModel, ServiceTag
     */
    key?: pulumi.Input<string>;
    /**
     * The value for the filter key
     */
    value?: pulumi.Input<string>;
}

export interface GetTemplateInfoAttribute {
    attributeId: number;
    displayName: string;
    isIgnored: boolean;
    value: string;
}

export interface GetTemplateInfoAttributeArgs {
    attributeId: pulumi.Input<number>;
    displayName: pulumi.Input<string>;
    isIgnored: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface GetTemplateInfoVlan {
    bondingTechnology: string;
    propogateVlan: boolean;
    vlanAttributes: inputs.GetTemplateInfoVlanVlanAttribute[];
}

export interface GetTemplateInfoVlanArgs {
    bondingTechnology: pulumi.Input<string>;
    propogateVlan: pulumi.Input<boolean>;
    vlanAttributes: pulumi.Input<pulumi.Input<inputs.GetTemplateInfoVlanVlanAttributeArgs>[]>;
}

export interface GetTemplateInfoVlanVlanAttribute {
    isNicBonded: boolean;
    nicIdentifier: string;
    port: number;
    taggedNetworks: number[];
    untaggedNetwork: number;
}

export interface GetTemplateInfoVlanVlanAttributeArgs {
    isNicBonded: pulumi.Input<boolean>;
    nicIdentifier: pulumi.Input<string>;
    port: pulumi.Input<number>;
    taggedNetworks: pulumi.Input<pulumi.Input<number>[]>;
    untaggedNetwork: pulumi.Input<number>;
}

export interface TemplateAttribute {
    attributeId: pulumi.Input<number>;
    displayName: pulumi.Input<string>;
    isIgnored: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface TemplateVlan {
    bondingTechnology: pulumi.Input<string>;
    propogateVlan: pulumi.Input<boolean>;
    vlanAttributes: pulumi.Input<pulumi.Input<inputs.TemplateVlanVlanAttribute>[]>;
}

export interface TemplateVlanVlanAttribute {
    isNicBonded: pulumi.Input<boolean>;
    nicIdentifier: pulumi.Input<string>;
    port: pulumi.Input<number>;
    taggedNetworks: pulumi.Input<pulumi.Input<number>[]>;
    untaggedNetwork: pulumi.Input<number>;
}
