// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AgentToAgentArgs, AgentToAgentState } from "./agentToAgent";
export type AgentToAgent = import("./agentToAgent").AgentToAgent;
export const AgentToAgent: typeof import("./agentToAgent").AgentToAgent = null as any;
utilities.lazyLoad(exports, ["AgentToAgent"], () => require("./agentToAgent"));

export { AgentToServerArgs, AgentToServerState } from "./agentToServer";
export type AgentToServer = import("./agentToServer").AgentToServer;
export const AgentToServer: typeof import("./agentToServer").AgentToServer = null as any;
utilities.lazyLoad(exports, ["AgentToServer"], () => require("./agentToServer"));

export { AlertRuleArgs, AlertRuleState } from "./alertRule";
export type AlertRule = import("./alertRule").AlertRule;
export const AlertRule: typeof import("./alertRule").AlertRule = null as any;
utilities.lazyLoad(exports, ["AlertRule"], () => require("./alertRule"));

export { BgpArgs, BgpState } from "./bgp";
export type Bgp = import("./bgp").Bgp;
export const Bgp: typeof import("./bgp").Bgp = null as any;
utilities.lazyLoad(exports, ["Bgp"], () => require("./bgp"));

export { DnsServerArgs, DnsServerState } from "./dnsServer";
export type DnsServer = import("./dnsServer").DnsServer;
export const DnsServer: typeof import("./dnsServer").DnsServer = null as any;
utilities.lazyLoad(exports, ["DnsServer"], () => require("./dnsServer"));

export { DnsTraceArgs, DnsTraceState } from "./dnsTrace";
export type DnsTrace = import("./dnsTrace").DnsTrace;
export const DnsTrace: typeof import("./dnsTrace").DnsTrace = null as any;
utilities.lazyLoad(exports, ["DnsTrace"], () => require("./dnsTrace"));

export { DnssecArgs, DnssecState } from "./dnssec";
export type Dnssec = import("./dnssec").Dnssec;
export const Dnssec: typeof import("./dnssec").Dnssec = null as any;
utilities.lazyLoad(exports, ["Dnssec"], () => require("./dnssec"));

export { FtpServerArgs, FtpServerState } from "./ftpServer";
export type FtpServer = import("./ftpServer").FtpServer;
export const FtpServer: typeof import("./ftpServer").FtpServer = null as any;
utilities.lazyLoad(exports, ["FtpServer"], () => require("./ftpServer"));

export { GetAccountGroupArgs, GetAccountGroupResult, GetAccountGroupOutputArgs } from "./getAccountGroup";
export const getAccountGroup: typeof import("./getAccountGroup").getAccountGroup = null as any;
export const getAccountGroupOutput: typeof import("./getAccountGroup").getAccountGroupOutput = null as any;
utilities.lazyLoad(exports, ["getAccountGroup","getAccountGroupOutput"], () => require("./getAccountGroup"));

export { GetAgentArgs, GetAgentResult, GetAgentOutputArgs } from "./getAgent";
export const getAgent: typeof import("./getAgent").getAgent = null as any;
export const getAgentOutput: typeof import("./getAgent").getAgentOutput = null as any;
utilities.lazyLoad(exports, ["getAgent","getAgentOutput"], () => require("./getAgent"));

export { GetBgpMonitorArgs, GetBgpMonitorResult, GetBgpMonitorOutputArgs } from "./getBgpMonitor";
export const getBgpMonitor: typeof import("./getBgpMonitor").getBgpMonitor = null as any;
export const getBgpMonitorOutput: typeof import("./getBgpMonitor").getBgpMonitorOutput = null as any;
utilities.lazyLoad(exports, ["getBgpMonitor","getBgpMonitorOutput"], () => require("./getBgpMonitor"));

export { GetIntegrationArgs, GetIntegrationResult, GetIntegrationOutputArgs } from "./getIntegration";
export const getIntegration: typeof import("./getIntegration").getIntegration = null as any;
export const getIntegrationOutput: typeof import("./getIntegration").getIntegrationOutput = null as any;
utilities.lazyLoad(exports, ["getIntegration","getIntegrationOutput"], () => require("./getIntegration"));

export { HttpServerArgs, HttpServerState } from "./httpServer";
export type HttpServer = import("./httpServer").HttpServer;
export const HttpServer: typeof import("./httpServer").HttpServer = null as any;
utilities.lazyLoad(exports, ["HttpServer"], () => require("./httpServer"));

export { LabelArgs, LabelState } from "./label";
export type Label = import("./label").Label;
export const Label: typeof import("./label").Label = null as any;
utilities.lazyLoad(exports, ["Label"], () => require("./label"));

export { PageLoadArgs, PageLoadState } from "./pageLoad";
export type PageLoad = import("./pageLoad").PageLoad;
export const PageLoad: typeof import("./pageLoad").PageLoad = null as any;
utilities.lazyLoad(exports, ["PageLoad"], () => require("./pageLoad"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SipServerArgs, SipServerState } from "./sipServer";
export type SipServer = import("./sipServer").SipServer;
export const SipServer: typeof import("./sipServer").SipServer = null as any;
utilities.lazyLoad(exports, ["SipServer"], () => require("./sipServer"));

export { VoiceArgs, VoiceState } from "./voice";
export type Voice = import("./voice").Voice;
export const Voice: typeof import("./voice").Voice = null as any;
utilities.lazyLoad(exports, ["Voice"], () => require("./voice"));

export { WebTransactionArgs, WebTransactionState } from "./webTransaction";
export type WebTransaction = import("./webTransaction").WebTransaction;
export const WebTransaction: typeof import("./webTransaction").WebTransaction = null as any;
utilities.lazyLoad(exports, ["WebTransaction"], () => require("./webTransaction"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "thousandeyes:index/agentToAgent:AgentToAgent":
                return new AgentToAgent(name, <any>undefined, { urn })
            case "thousandeyes:index/agentToServer:AgentToServer":
                return new AgentToServer(name, <any>undefined, { urn })
            case "thousandeyes:index/alertRule:AlertRule":
                return new AlertRule(name, <any>undefined, { urn })
            case "thousandeyes:index/bgp:Bgp":
                return new Bgp(name, <any>undefined, { urn })
            case "thousandeyes:index/dnsServer:DnsServer":
                return new DnsServer(name, <any>undefined, { urn })
            case "thousandeyes:index/dnsTrace:DnsTrace":
                return new DnsTrace(name, <any>undefined, { urn })
            case "thousandeyes:index/dnssec:Dnssec":
                return new Dnssec(name, <any>undefined, { urn })
            case "thousandeyes:index/ftpServer:FtpServer":
                return new FtpServer(name, <any>undefined, { urn })
            case "thousandeyes:index/httpServer:HttpServer":
                return new HttpServer(name, <any>undefined, { urn })
            case "thousandeyes:index/label:Label":
                return new Label(name, <any>undefined, { urn })
            case "thousandeyes:index/pageLoad:PageLoad":
                return new PageLoad(name, <any>undefined, { urn })
            case "thousandeyes:index/sipServer:SipServer":
                return new SipServer(name, <any>undefined, { urn })
            case "thousandeyes:index/voice:Voice":
                return new Voice(name, <any>undefined, { urn })
            case "thousandeyes:index/webTransaction:WebTransaction":
                return new WebTransaction(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("thousandeyes", "index/agentToAgent", _module)
pulumi.runtime.registerResourceModule("thousandeyes", "index/agentToServer", _module)
pulumi.runtime.registerResourceModule("thousandeyes", "index/alertRule", _module)
pulumi.runtime.registerResourceModule("thousandeyes", "index/bgp", _module)
pulumi.runtime.registerResourceModule("thousandeyes", "index/dnsServer", _module)
pulumi.runtime.registerResourceModule("thousandeyes", "index/dnsTrace", _module)
pulumi.runtime.registerResourceModule("thousandeyes", "index/dnssec", _module)
pulumi.runtime.registerResourceModule("thousandeyes", "index/ftpServer", _module)
pulumi.runtime.registerResourceModule("thousandeyes", "index/httpServer", _module)
pulumi.runtime.registerResourceModule("thousandeyes", "index/label", _module)
pulumi.runtime.registerResourceModule("thousandeyes", "index/pageLoad", _module)
pulumi.runtime.registerResourceModule("thousandeyes", "index/sipServer", _module)
pulumi.runtime.registerResourceModule("thousandeyes", "index/voice", _module)
pulumi.runtime.registerResourceModule("thousandeyes", "index/webTransaction", _module)
pulumi.runtime.registerResourcePackage("thousandeyes", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:thousandeyes") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
