// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SipServer extends pulumi.CustomResource {
    /**
     * Get an existing SipServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SipServerState, opts?: pulumi.CustomResourceOptions): SipServer {
        return new SipServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thousandeyes:index/sipServer:SipServer';

    /**
     * Returns true if the given object is an instance of SipServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SipServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SipServer.__pulumiType;
    }

    /**
     * The list of ThousandEyes agents to use.
     */
    public readonly agents!: pulumi.Output<outputs.SipServerAgent[]>;
    /**
     * Gets the ruleId from the /alert-rules endpoint. If alertsEnabled is set to 'true' and alertRules is not included in a
     * creation/update query, the applicable defaults will be used.
     */
    public readonly alertRules!: pulumi.Output<outputs.SipServerAlertRule[] | undefined>;
    /**
     * Set to 'true' to enable alerts, or 'false' to disable alerts. The default value is 'true'.
     */
    public readonly alertsEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Self links to the endpoint to pull test metadata, and data links to the endpoint for test data. Read-only, and shows rel
     * and href elements.
     */
    public /*out*/ readonly apiLinks!: pulumi.Output<outputs.SipServerApiLink[]>;
    /**
     * Set to 1 to measure bandwidth. This only applies to Enterprise Agents assigned to the test, and requires that
     * networkMeasurements is set. Defaults to 'false'.
     */
    public readonly bandwidthMeasurements!: pulumi.Output<boolean | undefined>;
    /**
     * Enable BGP measurements. Set to true for enabled, false for disabled.
     */
    public readonly bgpMeasurements!: pulumi.Output<boolean | undefined>;
    /**
     * Created by user.
     */
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    /**
     * The date of creation.
     */
    public /*out*/ readonly createdDate!: pulumi.Output<string>;
    /**
     * A description of the alert rule. Defaults to an empty string.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Enables or disables the test.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The array of label objects.
     */
    public /*out*/ readonly groups!: pulumi.Output<outputs.SipServerGroup[]>;
    /**
     * The interval to run the test on, in seconds.
     */
    public readonly interval!: pulumi.Output<number>;
    /**
     * Set to 'true' for a test shared with your account group, or to 'false' for a normal test.
     */
    public /*out*/ readonly liveShare!: pulumi.Output<boolean>;
    /**
     * Last modified by this user.
     */
    public /*out*/ readonly modifiedBy!: pulumi.Output<string>;
    /**
     * The date the test was last modified. Shown in UTC.
     */
    public /*out*/ readonly modifiedDate!: pulumi.Output<string>;
    /**
     * Measure MTU sizes on the network from agents to the target.
     */
    public readonly mtuMeasurements!: pulumi.Output<boolean | undefined>;
    /**
     * Set to 'true' to enable network measurements.
     */
    public readonly networkMeasurements!: pulumi.Output<boolean | undefined>;
    /**
     * The number of path traces.
     */
    public readonly numPathTraces!: pulumi.Output<number | undefined>;
    /**
     * A regex string of options. This field does not require escaping.
     */
    public readonly optionsRegex!: pulumi.Output<string | undefined>;
    /**
     * [classic or inSession] Choose 'inSession' to perform the path trace within a TCP session. Default value is 'classic'.
     */
    public readonly pathTraceMode!: pulumi.Output<string | undefined>;
    /**
     * [AUTO, SACk, or SYN] The probe mode used by end-to-end network tests. This is only valid if the protocol is set to TCP.
     * The default value is AUTO.
     */
    public readonly probeMode!: pulumi.Output<string | undefined>;
    /**
     * Configure whether to perform SIP registration on the test target with the SIP REGISTER command. Default value is
     * 'false'.
     */
    public readonly registerEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Set to 'true' for a saved event, or to 'false' for a normal test.
     */
    public /*out*/ readonly savedEvent!: pulumi.Output<boolean>;
    /**
     * [“serverName”: “fqdn of server”] The array of DNS Server objects.
     */
    public readonly sharedWithAccounts!: pulumi.Output<outputs.SipServerSharedWithAccount[] | undefined>;
    /**
     * The target time for test completion, specified in milliseconds.
     */
    public readonly sipTargetTime!: pulumi.Output<number | undefined>;
    /**
     * The test time limit. Can be between 5 and 10 seconds, and defaults to 5 seconds.
     */
    public readonly sipTimeLimit!: pulumi.Output<number | undefined>;
    /**
     * The Target SIP server credentials.
     */
    public readonly targetSipCredentials!: pulumi.Output<outputs.SipServerTargetSipCredentials>;
    /**
     * The unique ID of the test.
     */
    public /*out*/ readonly testId!: pulumi.Output<number>;
    /**
     * The name of the test.
     */
    public readonly testName!: pulumi.Output<string>;
    /**
     * The type of test.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Enable to automatically add all available Public BGP Monitors to the test.
     */
    public readonly usePublicBgp!: pulumi.Output<boolean | undefined>;

    /**
     * Create a SipServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SipServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SipServerArgs | SipServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SipServerState | undefined;
            resourceInputs["agents"] = state ? state.agents : undefined;
            resourceInputs["alertRules"] = state ? state.alertRules : undefined;
            resourceInputs["alertsEnabled"] = state ? state.alertsEnabled : undefined;
            resourceInputs["apiLinks"] = state ? state.apiLinks : undefined;
            resourceInputs["bandwidthMeasurements"] = state ? state.bandwidthMeasurements : undefined;
            resourceInputs["bgpMeasurements"] = state ? state.bgpMeasurements : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["createdDate"] = state ? state.createdDate : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["liveShare"] = state ? state.liveShare : undefined;
            resourceInputs["modifiedBy"] = state ? state.modifiedBy : undefined;
            resourceInputs["modifiedDate"] = state ? state.modifiedDate : undefined;
            resourceInputs["mtuMeasurements"] = state ? state.mtuMeasurements : undefined;
            resourceInputs["networkMeasurements"] = state ? state.networkMeasurements : undefined;
            resourceInputs["numPathTraces"] = state ? state.numPathTraces : undefined;
            resourceInputs["optionsRegex"] = state ? state.optionsRegex : undefined;
            resourceInputs["pathTraceMode"] = state ? state.pathTraceMode : undefined;
            resourceInputs["probeMode"] = state ? state.probeMode : undefined;
            resourceInputs["registerEnabled"] = state ? state.registerEnabled : undefined;
            resourceInputs["savedEvent"] = state ? state.savedEvent : undefined;
            resourceInputs["sharedWithAccounts"] = state ? state.sharedWithAccounts : undefined;
            resourceInputs["sipTargetTime"] = state ? state.sipTargetTime : undefined;
            resourceInputs["sipTimeLimit"] = state ? state.sipTimeLimit : undefined;
            resourceInputs["targetSipCredentials"] = state ? state.targetSipCredentials : undefined;
            resourceInputs["testId"] = state ? state.testId : undefined;
            resourceInputs["testName"] = state ? state.testName : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["usePublicBgp"] = state ? state.usePublicBgp : undefined;
        } else {
            const args = argsOrState as SipServerArgs | undefined;
            if ((!args || args.agents === undefined) && !opts.urn) {
                throw new Error("Missing required property 'agents'");
            }
            if ((!args || args.interval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interval'");
            }
            if ((!args || args.targetSipCredentials === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetSipCredentials'");
            }
            if ((!args || args.testName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'testName'");
            }
            resourceInputs["agents"] = args ? args.agents : undefined;
            resourceInputs["alertRules"] = args ? args.alertRules : undefined;
            resourceInputs["alertsEnabled"] = args ? args.alertsEnabled : undefined;
            resourceInputs["bandwidthMeasurements"] = args ? args.bandwidthMeasurements : undefined;
            resourceInputs["bgpMeasurements"] = args ? args.bgpMeasurements : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["mtuMeasurements"] = args ? args.mtuMeasurements : undefined;
            resourceInputs["networkMeasurements"] = args ? args.networkMeasurements : undefined;
            resourceInputs["numPathTraces"] = args ? args.numPathTraces : undefined;
            resourceInputs["optionsRegex"] = args ? args.optionsRegex : undefined;
            resourceInputs["pathTraceMode"] = args ? args.pathTraceMode : undefined;
            resourceInputs["probeMode"] = args ? args.probeMode : undefined;
            resourceInputs["registerEnabled"] = args ? args.registerEnabled : undefined;
            resourceInputs["sharedWithAccounts"] = args ? args.sharedWithAccounts : undefined;
            resourceInputs["sipTargetTime"] = args ? args.sipTargetTime : undefined;
            resourceInputs["sipTimeLimit"] = args ? args.sipTimeLimit : undefined;
            resourceInputs["targetSipCredentials"] = args ? args.targetSipCredentials : undefined;
            resourceInputs["testName"] = args ? args.testName : undefined;
            resourceInputs["usePublicBgp"] = args ? args.usePublicBgp : undefined;
            resourceInputs["apiLinks"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["createdDate"] = undefined /*out*/;
            resourceInputs["groups"] = undefined /*out*/;
            resourceInputs["liveShare"] = undefined /*out*/;
            resourceInputs["modifiedBy"] = undefined /*out*/;
            resourceInputs["modifiedDate"] = undefined /*out*/;
            resourceInputs["savedEvent"] = undefined /*out*/;
            resourceInputs["testId"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SipServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SipServer resources.
 */
export interface SipServerState {
    /**
     * The list of ThousandEyes agents to use.
     */
    agents?: pulumi.Input<pulumi.Input<inputs.SipServerAgent>[]>;
    /**
     * Gets the ruleId from the /alert-rules endpoint. If alertsEnabled is set to 'true' and alertRules is not included in a
     * creation/update query, the applicable defaults will be used.
     */
    alertRules?: pulumi.Input<pulumi.Input<inputs.SipServerAlertRule>[]>;
    /**
     * Set to 'true' to enable alerts, or 'false' to disable alerts. The default value is 'true'.
     */
    alertsEnabled?: pulumi.Input<boolean>;
    /**
     * Self links to the endpoint to pull test metadata, and data links to the endpoint for test data. Read-only, and shows rel
     * and href elements.
     */
    apiLinks?: pulumi.Input<pulumi.Input<inputs.SipServerApiLink>[]>;
    /**
     * Set to 1 to measure bandwidth. This only applies to Enterprise Agents assigned to the test, and requires that
     * networkMeasurements is set. Defaults to 'false'.
     */
    bandwidthMeasurements?: pulumi.Input<boolean>;
    /**
     * Enable BGP measurements. Set to true for enabled, false for disabled.
     */
    bgpMeasurements?: pulumi.Input<boolean>;
    /**
     * Created by user.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * The date of creation.
     */
    createdDate?: pulumi.Input<string>;
    /**
     * A description of the alert rule. Defaults to an empty string.
     */
    description?: pulumi.Input<string>;
    /**
     * Enables or disables the test.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The array of label objects.
     */
    groups?: pulumi.Input<pulumi.Input<inputs.SipServerGroup>[]>;
    /**
     * The interval to run the test on, in seconds.
     */
    interval?: pulumi.Input<number>;
    /**
     * Set to 'true' for a test shared with your account group, or to 'false' for a normal test.
     */
    liveShare?: pulumi.Input<boolean>;
    /**
     * Last modified by this user.
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * The date the test was last modified. Shown in UTC.
     */
    modifiedDate?: pulumi.Input<string>;
    /**
     * Measure MTU sizes on the network from agents to the target.
     */
    mtuMeasurements?: pulumi.Input<boolean>;
    /**
     * Set to 'true' to enable network measurements.
     */
    networkMeasurements?: pulumi.Input<boolean>;
    /**
     * The number of path traces.
     */
    numPathTraces?: pulumi.Input<number>;
    /**
     * A regex string of options. This field does not require escaping.
     */
    optionsRegex?: pulumi.Input<string>;
    /**
     * [classic or inSession] Choose 'inSession' to perform the path trace within a TCP session. Default value is 'classic'.
     */
    pathTraceMode?: pulumi.Input<string>;
    /**
     * [AUTO, SACk, or SYN] The probe mode used by end-to-end network tests. This is only valid if the protocol is set to TCP.
     * The default value is AUTO.
     */
    probeMode?: pulumi.Input<string>;
    /**
     * Configure whether to perform SIP registration on the test target with the SIP REGISTER command. Default value is
     * 'false'.
     */
    registerEnabled?: pulumi.Input<boolean>;
    /**
     * Set to 'true' for a saved event, or to 'false' for a normal test.
     */
    savedEvent?: pulumi.Input<boolean>;
    /**
     * [“serverName”: “fqdn of server”] The array of DNS Server objects.
     */
    sharedWithAccounts?: pulumi.Input<pulumi.Input<inputs.SipServerSharedWithAccount>[]>;
    /**
     * The target time for test completion, specified in milliseconds.
     */
    sipTargetTime?: pulumi.Input<number>;
    /**
     * The test time limit. Can be between 5 and 10 seconds, and defaults to 5 seconds.
     */
    sipTimeLimit?: pulumi.Input<number>;
    /**
     * The Target SIP server credentials.
     */
    targetSipCredentials?: pulumi.Input<inputs.SipServerTargetSipCredentials>;
    /**
     * The unique ID of the test.
     */
    testId?: pulumi.Input<number>;
    /**
     * The name of the test.
     */
    testName?: pulumi.Input<string>;
    /**
     * The type of test.
     */
    type?: pulumi.Input<string>;
    /**
     * Enable to automatically add all available Public BGP Monitors to the test.
     */
    usePublicBgp?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SipServer resource.
 */
export interface SipServerArgs {
    /**
     * The list of ThousandEyes agents to use.
     */
    agents: pulumi.Input<pulumi.Input<inputs.SipServerAgent>[]>;
    /**
     * Gets the ruleId from the /alert-rules endpoint. If alertsEnabled is set to 'true' and alertRules is not included in a
     * creation/update query, the applicable defaults will be used.
     */
    alertRules?: pulumi.Input<pulumi.Input<inputs.SipServerAlertRule>[]>;
    /**
     * Set to 'true' to enable alerts, or 'false' to disable alerts. The default value is 'true'.
     */
    alertsEnabled?: pulumi.Input<boolean>;
    /**
     * Set to 1 to measure bandwidth. This only applies to Enterprise Agents assigned to the test, and requires that
     * networkMeasurements is set. Defaults to 'false'.
     */
    bandwidthMeasurements?: pulumi.Input<boolean>;
    /**
     * Enable BGP measurements. Set to true for enabled, false for disabled.
     */
    bgpMeasurements?: pulumi.Input<boolean>;
    /**
     * A description of the alert rule. Defaults to an empty string.
     */
    description?: pulumi.Input<string>;
    /**
     * Enables or disables the test.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The interval to run the test on, in seconds.
     */
    interval: pulumi.Input<number>;
    /**
     * Measure MTU sizes on the network from agents to the target.
     */
    mtuMeasurements?: pulumi.Input<boolean>;
    /**
     * Set to 'true' to enable network measurements.
     */
    networkMeasurements?: pulumi.Input<boolean>;
    /**
     * The number of path traces.
     */
    numPathTraces?: pulumi.Input<number>;
    /**
     * A regex string of options. This field does not require escaping.
     */
    optionsRegex?: pulumi.Input<string>;
    /**
     * [classic or inSession] Choose 'inSession' to perform the path trace within a TCP session. Default value is 'classic'.
     */
    pathTraceMode?: pulumi.Input<string>;
    /**
     * [AUTO, SACk, or SYN] The probe mode used by end-to-end network tests. This is only valid if the protocol is set to TCP.
     * The default value is AUTO.
     */
    probeMode?: pulumi.Input<string>;
    /**
     * Configure whether to perform SIP registration on the test target with the SIP REGISTER command. Default value is
     * 'false'.
     */
    registerEnabled?: pulumi.Input<boolean>;
    /**
     * [“serverName”: “fqdn of server”] The array of DNS Server objects.
     */
    sharedWithAccounts?: pulumi.Input<pulumi.Input<inputs.SipServerSharedWithAccount>[]>;
    /**
     * The target time for test completion, specified in milliseconds.
     */
    sipTargetTime?: pulumi.Input<number>;
    /**
     * The test time limit. Can be between 5 and 10 seconds, and defaults to 5 seconds.
     */
    sipTimeLimit?: pulumi.Input<number>;
    /**
     * The Target SIP server credentials.
     */
    targetSipCredentials: pulumi.Input<inputs.SipServerTargetSipCredentials>;
    /**
     * The name of the test.
     */
    testName: pulumi.Input<string>;
    /**
     * Enable to automatically add all available Public BGP Monitors to the test.
     */
    usePublicBgp?: pulumi.Input<boolean>;
}
