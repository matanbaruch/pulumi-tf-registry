// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AgentToAgentAgent {
    /**
     * The unique ID for the ThousandEyes agent.
     */
    agentId: pulumi.Input<number>;
}

export interface AgentToAgentAlertRule {
    /**
     * The unique ID of the alert rule.
     */
    ruleId?: pulumi.Input<number>;
}

export interface AgentToAgentApiLink {
    href: pulumi.Input<string>;
    rel: pulumi.Input<string>;
}

export interface AgentToAgentBgpMonitor {
    /**
     * The IP address of the BGP monitor.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * The unique ID of the BGP monitor.
     */
    monitorId: pulumi.Input<number>;
    /**
     * The name of the BGP monitor.
     */
    monitorName?: pulumi.Input<string>;
    /**
     * [Public or Private] Shows the type of BGP monitor.
     */
    monitorType?: pulumi.Input<string>;
    /**
     * The name of the autonomous system in which the BGP monitor is found.
     */
    network?: pulumi.Input<string>;
}

export interface AgentToAgentGroup {
    agents: pulumi.Input<pulumi.Input<inputs.AgentToAgentGroupAgent>[]>;
    builtin: pulumi.Input<boolean>;
    groupId: pulumi.Input<number>;
    name: pulumi.Input<string>;
    tests: pulumi.Input<pulumi.Input<inputs.AgentToAgentGroupTest>[]>;
    type: pulumi.Input<string>;
}

export interface AgentToAgentGroupAgent {
    agentId: pulumi.Input<number>;
}

export interface AgentToAgentGroupTest {
    testId: pulumi.Input<number>;
}

export interface AgentToAgentSharedWithAccount {
    /**
     * The account group ID.
     */
    aid: pulumi.Input<number>;
    /**
     * Account name.
     */
    name?: pulumi.Input<string>;
}

export interface AgentToServerAgent {
    /**
     * The unique ID for the ThousandEyes agent.
     */
    agentId: pulumi.Input<number>;
}

export interface AgentToServerAlertRule {
    /**
     * The unique ID of the alert rule.
     */
    ruleId?: pulumi.Input<number>;
}

export interface AgentToServerApiLink {
    href: pulumi.Input<string>;
    rel: pulumi.Input<string>;
}

export interface AgentToServerBgpMonitor {
    /**
     * The IP address of the BGP monitor.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * The unique ID of the BGP monitor.
     */
    monitorId: pulumi.Input<number>;
    /**
     * The name of the BGP monitor.
     */
    monitorName?: pulumi.Input<string>;
    /**
     * [Public or Private] Shows the type of BGP monitor.
     */
    monitorType?: pulumi.Input<string>;
    /**
     * The name of the autonomous system in which the BGP monitor is found.
     */
    network?: pulumi.Input<string>;
}

export interface AgentToServerGroup {
    agents: pulumi.Input<pulumi.Input<inputs.AgentToServerGroupAgent>[]>;
    builtin: pulumi.Input<boolean>;
    groupId: pulumi.Input<number>;
    name: pulumi.Input<string>;
    tests: pulumi.Input<pulumi.Input<inputs.AgentToServerGroupTest>[]>;
    type: pulumi.Input<string>;
}

export interface AgentToServerGroupAgent {
    agentId: pulumi.Input<number>;
}

export interface AgentToServerGroupTest {
    testId: pulumi.Input<number>;
}

export interface AgentToServerSharedWithAccount {
    /**
     * The account group ID.
     */
    aid: pulumi.Input<number>;
    /**
     * Account name.
     */
    name?: pulumi.Input<string>;
}

export interface AlertRuleNotification {
    /**
     * The email notification.
     */
    emails?: pulumi.Input<pulumi.Input<inputs.AlertRuleNotificationEmail>[]>;
    /**
     * Third party notification.
     */
    thirdParties?: pulumi.Input<pulumi.Input<inputs.AlertRuleNotificationThirdParty>[]>;
    /**
     * Webhook notification.
     */
    webhooks?: pulumi.Input<pulumi.Input<inputs.AlertRuleNotificationWebhook>[]>;
}

export interface AlertRuleNotificationEmail {
    /**
     * The contents of the email, as a string.
     */
    message?: pulumi.Input<string>;
    /**
     * The email addresses to send the notification to.
     */
    recipients?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AlertRuleNotificationThirdParty {
    /**
     * The integration ID, as a string.
     */
    integrationId: pulumi.Input<string>;
    /**
     * The integration type, as a string.
     */
    integrationType: pulumi.Input<string>;
}

export interface AlertRuleNotificationWebhook {
    /**
     * The integration ID, as a string.
     */
    integrationId: pulumi.Input<string>;
    /**
     * The integration type, as a string.
     */
    integrationType: pulumi.Input<string>;
}

export interface AlertRuleTest {
    /**
     * The list of unique test IDs.
     */
    testId?: pulumi.Input<number>;
}

export interface BgpAlertRule {
    /**
     * The unique ID of the alert rule.
     */
    ruleId?: pulumi.Input<number>;
}

export interface BgpApiLink {
    href: pulumi.Input<string>;
    rel: pulumi.Input<string>;
}

export interface BgpBgpMonitor {
    /**
     * The IP address of the BGP monitor.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * The unique ID of the BGP monitor.
     */
    monitorId: pulumi.Input<number>;
    /**
     * The name of the BGP monitor.
     */
    monitorName?: pulumi.Input<string>;
    /**
     * [Public or Private] Shows the type of BGP monitor.
     */
    monitorType?: pulumi.Input<string>;
    /**
     * The name of the autonomous system in which the BGP monitor is found.
     */
    network?: pulumi.Input<string>;
}

export interface BgpGroup {
    agents: pulumi.Input<pulumi.Input<inputs.BgpGroupAgent>[]>;
    builtin: pulumi.Input<boolean>;
    groupId: pulumi.Input<number>;
    name: pulumi.Input<string>;
    tests: pulumi.Input<pulumi.Input<inputs.BgpGroupTest>[]>;
    type: pulumi.Input<string>;
}

export interface BgpGroupAgent {
    agentId: pulumi.Input<number>;
}

export interface BgpGroupTest {
    testId: pulumi.Input<number>;
}

export interface BgpSharedWithAccount {
    /**
     * The account group ID.
     */
    aid: pulumi.Input<number>;
    /**
     * Account name.
     */
    name?: pulumi.Input<string>;
}

export interface DnsServerAgent {
    /**
     * The unique ID for the ThousandEyes agent.
     */
    agentId: pulumi.Input<number>;
}

export interface DnsServerAlertRule {
    /**
     * The unique ID of the alert rule.
     */
    ruleId?: pulumi.Input<number>;
}

export interface DnsServerApiLink {
    href: pulumi.Input<string>;
    rel: pulumi.Input<string>;
}

export interface DnsServerBgpMonitor {
    /**
     * The IP address of the BGP monitor.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * The unique ID of the BGP monitor.
     */
    monitorId: pulumi.Input<number>;
    /**
     * The name of the BGP monitor.
     */
    monitorName?: pulumi.Input<string>;
    /**
     * [Public or Private] Shows the type of BGP monitor.
     */
    monitorType?: pulumi.Input<string>;
    /**
     * The name of the autonomous system in which the BGP monitor is found.
     */
    network?: pulumi.Input<string>;
}

export interface DnsServerDnsServer {
    /**
     * The unique ID of the DNS server.
     */
    serverId?: pulumi.Input<number>;
    /**
     * The DNS server name.
     */
    serverName?: pulumi.Input<string>;
}

export interface DnsServerGroup {
    agents: pulumi.Input<pulumi.Input<inputs.DnsServerGroupAgent>[]>;
    builtin: pulumi.Input<boolean>;
    groupId: pulumi.Input<number>;
    name: pulumi.Input<string>;
    tests: pulumi.Input<pulumi.Input<inputs.DnsServerGroupTest>[]>;
    type: pulumi.Input<string>;
}

export interface DnsServerGroupAgent {
    agentId: pulumi.Input<number>;
}

export interface DnsServerGroupTest {
    testId: pulumi.Input<number>;
}

export interface DnsServerSharedWithAccount {
    /**
     * The account group ID.
     */
    aid: pulumi.Input<number>;
    /**
     * Account name.
     */
    name?: pulumi.Input<string>;
}

export interface DnsTraceAgent {
    /**
     * The unique ID for the ThousandEyes agent.
     */
    agentId: pulumi.Input<number>;
}

export interface DnsTraceAlertRule {
    /**
     * The unique ID of the alert rule.
     */
    ruleId?: pulumi.Input<number>;
}

export interface DnsTraceApiLink {
    href: pulumi.Input<string>;
    rel: pulumi.Input<string>;
}

export interface DnsTraceGroup {
    agents: pulumi.Input<pulumi.Input<inputs.DnsTraceGroupAgent>[]>;
    builtin: pulumi.Input<boolean>;
    groupId: pulumi.Input<number>;
    name: pulumi.Input<string>;
    tests: pulumi.Input<pulumi.Input<inputs.DnsTraceGroupTest>[]>;
    type: pulumi.Input<string>;
}

export interface DnsTraceGroupAgent {
    agentId: pulumi.Input<number>;
}

export interface DnsTraceGroupTest {
    testId: pulumi.Input<number>;
}

export interface DnsTraceSharedWithAccount {
    /**
     * The account group ID.
     */
    aid: pulumi.Input<number>;
    /**
     * Account name.
     */
    name?: pulumi.Input<string>;
}

export interface DnssecAgent {
    /**
     * The unique ID for the ThousandEyes agent.
     */
    agentId: pulumi.Input<number>;
}

export interface DnssecAlertRule {
    /**
     * The unique ID of the alert rule.
     */
    ruleId?: pulumi.Input<number>;
}

export interface DnssecApiLink {
    href: pulumi.Input<string>;
    rel: pulumi.Input<string>;
}

export interface DnssecGroup {
    agents: pulumi.Input<pulumi.Input<inputs.DnssecGroupAgent>[]>;
    builtin: pulumi.Input<boolean>;
    groupId: pulumi.Input<number>;
    name: pulumi.Input<string>;
    tests: pulumi.Input<pulumi.Input<inputs.DnssecGroupTest>[]>;
    type: pulumi.Input<string>;
}

export interface DnssecGroupAgent {
    agentId: pulumi.Input<number>;
}

export interface DnssecGroupTest {
    testId: pulumi.Input<number>;
}

export interface DnssecSharedWithAccount {
    /**
     * The account group ID.
     */
    aid: pulumi.Input<number>;
    /**
     * Account name.
     */
    name?: pulumi.Input<string>;
}

export interface FtpServerAgent {
    /**
     * The unique ID for the ThousandEyes agent.
     */
    agentId: pulumi.Input<number>;
}

export interface FtpServerAlertRule {
    /**
     * The unique ID of the alert rule.
     */
    ruleId?: pulumi.Input<number>;
}

export interface FtpServerApiLink {
    href: pulumi.Input<string>;
    rel: pulumi.Input<string>;
}

export interface FtpServerGroup {
    agents: pulumi.Input<pulumi.Input<inputs.FtpServerGroupAgent>[]>;
    builtin: pulumi.Input<boolean>;
    groupId: pulumi.Input<number>;
    name: pulumi.Input<string>;
    tests: pulumi.Input<pulumi.Input<inputs.FtpServerGroupTest>[]>;
    type: pulumi.Input<string>;
}

export interface FtpServerGroupAgent {
    agentId: pulumi.Input<number>;
}

export interface FtpServerGroupTest {
    testId: pulumi.Input<number>;
}

export interface FtpServerSharedWithAccount {
    /**
     * The account group ID.
     */
    aid: pulumi.Input<number>;
    /**
     * Account name.
     */
    name?: pulumi.Input<string>;
}

export interface HttpServerAgent {
    /**
     * The unique ID for the ThousandEyes agent.
     */
    agentId: pulumi.Input<number>;
}

export interface HttpServerAlertRule {
    /**
     * The unique ID of the alert rule.
     */
    ruleId?: pulumi.Input<number>;
}

export interface HttpServerApiLink {
    href: pulumi.Input<string>;
    rel: pulumi.Input<string>;
}

export interface HttpServerBgpMonitor {
    /**
     * The IP address of the BGP monitor.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * The unique ID of the BGP monitor.
     */
    monitorId: pulumi.Input<number>;
    /**
     * The name of the BGP monitor.
     */
    monitorName?: pulumi.Input<string>;
    /**
     * [Public or Private] Shows the type of BGP monitor.
     */
    monitorType?: pulumi.Input<string>;
    /**
     * The name of the autonomous system in which the BGP monitor is found.
     */
    network?: pulumi.Input<string>;
}

export interface HttpServerGroup {
    agents: pulumi.Input<pulumi.Input<inputs.HttpServerGroupAgent>[]>;
    builtin: pulumi.Input<boolean>;
    groupId: pulumi.Input<number>;
    name: pulumi.Input<string>;
    tests: pulumi.Input<pulumi.Input<inputs.HttpServerGroupTest>[]>;
    type: pulumi.Input<string>;
}

export interface HttpServerGroupAgent {
    agentId: pulumi.Input<number>;
}

export interface HttpServerGroupTest {
    testId: pulumi.Input<number>;
}

export interface HttpServerSharedWithAccount {
    /**
     * The account group ID.
     */
    aid: pulumi.Input<number>;
    /**
     * Account name.
     */
    name?: pulumi.Input<string>;
}

export interface LabelAgent {
    /**
     * The list of unique agent IDs that the label is applied to.
     */
    agentId: pulumi.Input<number>;
}

export interface LabelTest {
    /**
     * The list of unique test IDs.
     */
    testId: pulumi.Input<number>;
}

export interface PageLoadAgent {
    /**
     * The unique ID for the ThousandEyes agent.
     */
    agentId: pulumi.Input<number>;
}

export interface PageLoadAlertRule {
    /**
     * The unique ID of the alert rule.
     */
    ruleId?: pulumi.Input<number>;
}

export interface PageLoadApiLink {
    href: pulumi.Input<string>;
    rel: pulumi.Input<string>;
}

export interface PageLoadBgpMonitor {
    /**
     * The IP address of the BGP monitor.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * The unique ID of the BGP monitor.
     */
    monitorId: pulumi.Input<number>;
    /**
     * The name of the BGP monitor.
     */
    monitorName?: pulumi.Input<string>;
    /**
     * [Public or Private] Shows the type of BGP monitor.
     */
    monitorType?: pulumi.Input<string>;
    /**
     * The name of the autonomous system in which the BGP monitor is found.
     */
    network?: pulumi.Input<string>;
}

export interface PageLoadGroup {
    agents: pulumi.Input<pulumi.Input<inputs.PageLoadGroupAgent>[]>;
    builtin: pulumi.Input<boolean>;
    groupId: pulumi.Input<number>;
    name: pulumi.Input<string>;
    tests: pulumi.Input<pulumi.Input<inputs.PageLoadGroupTest>[]>;
    type: pulumi.Input<string>;
}

export interface PageLoadGroupAgent {
    agentId: pulumi.Input<number>;
}

export interface PageLoadGroupTest {
    testId: pulumi.Input<number>;
}

export interface PageLoadSharedWithAccount {
    /**
     * The account group ID.
     */
    aid: pulumi.Input<number>;
    /**
     * Account name.
     */
    name?: pulumi.Input<string>;
}

export interface SipServerAgent {
    /**
     * The unique ID for the ThousandEyes agent.
     */
    agentId: pulumi.Input<number>;
}

export interface SipServerAlertRule {
    /**
     * The unique ID of the alert rule.
     */
    ruleId?: pulumi.Input<number>;
}

export interface SipServerApiLink {
    href: pulumi.Input<string>;
    rel: pulumi.Input<string>;
}

export interface SipServerGroup {
    agents: pulumi.Input<pulumi.Input<inputs.SipServerGroupAgent>[]>;
    builtin: pulumi.Input<boolean>;
    groupId: pulumi.Input<number>;
    name: pulumi.Input<string>;
    tests: pulumi.Input<pulumi.Input<inputs.SipServerGroupTest>[]>;
    type: pulumi.Input<string>;
}

export interface SipServerGroupAgent {
    agentId: pulumi.Input<number>;
}

export interface SipServerGroupTest {
    testId: pulumi.Input<number>;
}

export interface SipServerSharedWithAccount {
    /**
     * The account group ID.
     */
    aid: pulumi.Input<number>;
    /**
     * Account name.
     */
    name?: pulumi.Input<string>;
}

export interface SipServerTargetSipCredentials {
    /**
     * The username for authentication with the SIP server.
     */
    authUser: pulumi.Input<string>;
    /**
     * The password to be used to authenticate with the destination server.
     */
    password?: pulumi.Input<string>;
    /**
     * The target port.
     */
    port?: pulumi.Input<number>;
    /**
     * [TCP, TLS, or UDP] The transport layer for SIP communication. Can be either TCP, TLS (TLS over TCP), or UDP, and defaults to TCP.
     */
    protocol: pulumi.Input<string>;
    /**
     * The SIP proxy. This is distinct from the SIP server, and is specified as a domain name or IP address.
     */
    sipProxy?: pulumi.Input<string>;
    /**
     * The SIP server to be tested, specified by domain name or IP address.
     */
    sipRegistrar: pulumi.Input<string>;
    /**
     * The username for SIP registration. This should be unique within a ThousandEyes account group.
     */
    user?: pulumi.Input<string>;
}

export interface VoiceAgent {
    /**
     * The unique ID for the ThousandEyes agent.
     */
    agentId: pulumi.Input<number>;
}

export interface VoiceAlertRule {
    /**
     * The unique ID of the alert rule.
     */
    ruleId?: pulumi.Input<number>;
}

export interface VoiceApiLink {
    href: pulumi.Input<string>;
    rel: pulumi.Input<string>;
}

export interface VoiceBgpMonitor {
    /**
     * The IP address of the BGP monitor.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * The unique ID of the BGP monitor.
     */
    monitorId: pulumi.Input<number>;
    /**
     * The name of the BGP monitor.
     */
    monitorName?: pulumi.Input<string>;
    /**
     * [Public or Private] Shows the type of BGP monitor.
     */
    monitorType?: pulumi.Input<string>;
    /**
     * The name of the autonomous system in which the BGP monitor is found.
     */
    network?: pulumi.Input<string>;
}

export interface VoiceGroup {
    agents: pulumi.Input<pulumi.Input<inputs.VoiceGroupAgent>[]>;
    builtin: pulumi.Input<boolean>;
    groupId: pulumi.Input<number>;
    name: pulumi.Input<string>;
    tests: pulumi.Input<pulumi.Input<inputs.VoiceGroupTest>[]>;
    type: pulumi.Input<string>;
}

export interface VoiceGroupAgent {
    agentId: pulumi.Input<number>;
}

export interface VoiceGroupTest {
    testId: pulumi.Input<number>;
}

export interface VoiceSharedWithAccount {
    /**
     * The account group ID.
     */
    aid: pulumi.Input<number>;
    /**
     * Account name.
     */
    name?: pulumi.Input<string>;
}

export interface WebTransactionAgent {
    /**
     * The unique ID for the ThousandEyes agent.
     */
    agentId: pulumi.Input<number>;
}

export interface WebTransactionAlertRule {
    /**
     * The unique ID of the alert rule.
     */
    ruleId?: pulumi.Input<number>;
}

export interface WebTransactionApiLink {
    href: pulumi.Input<string>;
    rel: pulumi.Input<string>;
}

export interface WebTransactionGroup {
    agents: pulumi.Input<pulumi.Input<inputs.WebTransactionGroupAgent>[]>;
    builtin: pulumi.Input<boolean>;
    groupId: pulumi.Input<number>;
    name: pulumi.Input<string>;
    tests: pulumi.Input<pulumi.Input<inputs.WebTransactionGroupTest>[]>;
    type: pulumi.Input<string>;
}

export interface WebTransactionGroupAgent {
    agentId: pulumi.Input<number>;
}

export interface WebTransactionGroupTest {
    testId: pulumi.Input<number>;
}

export interface WebTransactionSharedWithAccount {
    /**
     * The account group ID.
     */
    aid: pulumi.Input<number>;
    /**
     * Account name.
     */
    name?: pulumi.Input<string>;
}
