// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AlertRule extends pulumi.CustomResource {
    /**
     * Get an existing AlertRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertRuleState, opts?: pulumi.CustomResourceOptions): AlertRule {
        return new AlertRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thousandeyes:index/alertRule:AlertRule';

    /**
     * Returns true if the given object is an instance of AlertRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlertRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlertRule.__pulumiType;
    }

    /**
     * The unique ID of the alert rule.
     */
    public /*out*/ readonly alertRuleId!: pulumi.Output<number>;
    /**
     * [Page Load, HTTP Server, End-to-End (Server), End-to-End (Agent), DNS Server, DNS Trace, DNSSEC, Transactions, Web
     * Transactions, BGP, Path Trace, FTP, SIP Server] The type of alert rule. Acceptable values include the verbose names of
     * supported tests.
     */
    public readonly alertType!: pulumi.Output<string>;
    /**
     * Alert rules allow up to 1 alert rule to be selected as a default for each type. By marking an alert rule as default, the
     * rule will be automatically included in subsequently created tests that test a metric used in the alert rule.
     */
    public readonly default!: pulumi.Output<boolean | undefined>;
    /**
     * [TO_TARGET, FROM_TARGET, BIDIRECTIONAL] The direction of the test (affects how results are shown).
     */
    public readonly direction!: pulumi.Output<string | undefined>;
    /**
     * The alert rule evaluation expression.
     */
    public readonly expression!: pulumi.Output<string>;
    /**
     * Include queries for subprefixes detected under this prefix.
     */
    public readonly includeCoveredPrefixes!: pulumi.Output<boolean | undefined>;
    /**
     * The minimum number of agents or monitors that must meet the specified criteria in order to trigger an alert. This option
     * is mutually exclusive with 'minimum_sources_pct'.
     */
    public readonly minimumSources!: pulumi.Output<number | undefined>;
    /**
     * The minimum percentage of agents or monitors that must meet the specified criteria in order to trigger an alert. This
     * option is mutually exclusive with 'minimum_sources'.
     */
    public readonly minimumSourcesPct!: pulumi.Output<number | undefined>;
    /**
     * The list of notifications for the alert rule.
     */
    public readonly notifications!: pulumi.Output<outputs.AlertRuleNotification[] | undefined>;
    /**
     * Set to 'true' to trigger the notification when the alert clears.
     */
    public readonly notifyOnClear!: pulumi.Output<boolean | undefined>;
    /**
     * [ANY or EXACT] Defines whether the same agent(s) must meet the EXACT same threshold in consecutive rounds or not. The
     * default value is ANY.
     */
    public readonly roundsViolatingMode!: pulumi.Output<string | undefined>;
    /**
     * Specifies the divisor (Y value) of the “X of Y times” condition in an alert rule. Minimum value is 1, maximum value
     * is 10.
     */
    public readonly roundsViolatingOutOf!: pulumi.Output<number>;
    /**
     * Specifies the numerator (X value) of the “X of Y times” condition in an alert rule. Minimum value is 1, maximum
     * value is 10. Must be less than or equal to 'roundsViolatingOutOf'.
     */
    public readonly roundsViolatingRequired!: pulumi.Output<number>;
    /**
     * The unique ID of the alert rule.
     */
    public /*out*/ readonly ruleId!: pulumi.Output<number>;
    /**
     * The name of the alert rule.
     */
    public readonly ruleName!: pulumi.Output<string>;
    /**
     * [INFO, MINOR, MAJOR or CRITICAL] The severity level of the alert rule. The default value is INFO.
     */
    public readonly severity!: pulumi.Output<string | undefined>;
    /**
     * The valid test IDs.
     */
    public /*out*/ readonly testIds!: pulumi.Output<number[]>;
    /**
     * The list of included tests.
     */
    public readonly tests!: pulumi.Output<outputs.AlertRuleTest[] | undefined>;

    /**
     * Create a AlertRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlertRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertRuleArgs | AlertRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlertRuleState | undefined;
            resourceInputs["alertRuleId"] = state ? state.alertRuleId : undefined;
            resourceInputs["alertType"] = state ? state.alertType : undefined;
            resourceInputs["default"] = state ? state.default : undefined;
            resourceInputs["direction"] = state ? state.direction : undefined;
            resourceInputs["expression"] = state ? state.expression : undefined;
            resourceInputs["includeCoveredPrefixes"] = state ? state.includeCoveredPrefixes : undefined;
            resourceInputs["minimumSources"] = state ? state.minimumSources : undefined;
            resourceInputs["minimumSourcesPct"] = state ? state.minimumSourcesPct : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["notifyOnClear"] = state ? state.notifyOnClear : undefined;
            resourceInputs["roundsViolatingMode"] = state ? state.roundsViolatingMode : undefined;
            resourceInputs["roundsViolatingOutOf"] = state ? state.roundsViolatingOutOf : undefined;
            resourceInputs["roundsViolatingRequired"] = state ? state.roundsViolatingRequired : undefined;
            resourceInputs["ruleId"] = state ? state.ruleId : undefined;
            resourceInputs["ruleName"] = state ? state.ruleName : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["testIds"] = state ? state.testIds : undefined;
            resourceInputs["tests"] = state ? state.tests : undefined;
        } else {
            const args = argsOrState as AlertRuleArgs | undefined;
            if ((!args || args.alertType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alertType'");
            }
            if ((!args || args.expression === undefined) && !opts.urn) {
                throw new Error("Missing required property 'expression'");
            }
            if ((!args || args.roundsViolatingOutOf === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roundsViolatingOutOf'");
            }
            if ((!args || args.roundsViolatingRequired === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roundsViolatingRequired'");
            }
            if ((!args || args.ruleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleName'");
            }
            resourceInputs["alertType"] = args ? args.alertType : undefined;
            resourceInputs["default"] = args ? args.default : undefined;
            resourceInputs["direction"] = args ? args.direction : undefined;
            resourceInputs["expression"] = args ? args.expression : undefined;
            resourceInputs["includeCoveredPrefixes"] = args ? args.includeCoveredPrefixes : undefined;
            resourceInputs["minimumSources"] = args ? args.minimumSources : undefined;
            resourceInputs["minimumSourcesPct"] = args ? args.minimumSourcesPct : undefined;
            resourceInputs["notifications"] = args ? args.notifications : undefined;
            resourceInputs["notifyOnClear"] = args ? args.notifyOnClear : undefined;
            resourceInputs["roundsViolatingMode"] = args ? args.roundsViolatingMode : undefined;
            resourceInputs["roundsViolatingOutOf"] = args ? args.roundsViolatingOutOf : undefined;
            resourceInputs["roundsViolatingRequired"] = args ? args.roundsViolatingRequired : undefined;
            resourceInputs["ruleName"] = args ? args.ruleName : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["tests"] = args ? args.tests : undefined;
            resourceInputs["alertRuleId"] = undefined /*out*/;
            resourceInputs["ruleId"] = undefined /*out*/;
            resourceInputs["testIds"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlertRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AlertRule resources.
 */
export interface AlertRuleState {
    /**
     * The unique ID of the alert rule.
     */
    alertRuleId?: pulumi.Input<number>;
    /**
     * [Page Load, HTTP Server, End-to-End (Server), End-to-End (Agent), DNS Server, DNS Trace, DNSSEC, Transactions, Web
     * Transactions, BGP, Path Trace, FTP, SIP Server] The type of alert rule. Acceptable values include the verbose names of
     * supported tests.
     */
    alertType?: pulumi.Input<string>;
    /**
     * Alert rules allow up to 1 alert rule to be selected as a default for each type. By marking an alert rule as default, the
     * rule will be automatically included in subsequently created tests that test a metric used in the alert rule.
     */
    default?: pulumi.Input<boolean>;
    /**
     * [TO_TARGET, FROM_TARGET, BIDIRECTIONAL] The direction of the test (affects how results are shown).
     */
    direction?: pulumi.Input<string>;
    /**
     * The alert rule evaluation expression.
     */
    expression?: pulumi.Input<string>;
    /**
     * Include queries for subprefixes detected under this prefix.
     */
    includeCoveredPrefixes?: pulumi.Input<boolean>;
    /**
     * The minimum number of agents or monitors that must meet the specified criteria in order to trigger an alert. This option
     * is mutually exclusive with 'minimum_sources_pct'.
     */
    minimumSources?: pulumi.Input<number>;
    /**
     * The minimum percentage of agents or monitors that must meet the specified criteria in order to trigger an alert. This
     * option is mutually exclusive with 'minimum_sources'.
     */
    minimumSourcesPct?: pulumi.Input<number>;
    /**
     * The list of notifications for the alert rule.
     */
    notifications?: pulumi.Input<pulumi.Input<inputs.AlertRuleNotification>[]>;
    /**
     * Set to 'true' to trigger the notification when the alert clears.
     */
    notifyOnClear?: pulumi.Input<boolean>;
    /**
     * [ANY or EXACT] Defines whether the same agent(s) must meet the EXACT same threshold in consecutive rounds or not. The
     * default value is ANY.
     */
    roundsViolatingMode?: pulumi.Input<string>;
    /**
     * Specifies the divisor (Y value) of the “X of Y times” condition in an alert rule. Minimum value is 1, maximum value
     * is 10.
     */
    roundsViolatingOutOf?: pulumi.Input<number>;
    /**
     * Specifies the numerator (X value) of the “X of Y times” condition in an alert rule. Minimum value is 1, maximum
     * value is 10. Must be less than or equal to 'roundsViolatingOutOf'.
     */
    roundsViolatingRequired?: pulumi.Input<number>;
    /**
     * The unique ID of the alert rule.
     */
    ruleId?: pulumi.Input<number>;
    /**
     * The name of the alert rule.
     */
    ruleName?: pulumi.Input<string>;
    /**
     * [INFO, MINOR, MAJOR or CRITICAL] The severity level of the alert rule. The default value is INFO.
     */
    severity?: pulumi.Input<string>;
    /**
     * The valid test IDs.
     */
    testIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The list of included tests.
     */
    tests?: pulumi.Input<pulumi.Input<inputs.AlertRuleTest>[]>;
}

/**
 * The set of arguments for constructing a AlertRule resource.
 */
export interface AlertRuleArgs {
    /**
     * [Page Load, HTTP Server, End-to-End (Server), End-to-End (Agent), DNS Server, DNS Trace, DNSSEC, Transactions, Web
     * Transactions, BGP, Path Trace, FTP, SIP Server] The type of alert rule. Acceptable values include the verbose names of
     * supported tests.
     */
    alertType: pulumi.Input<string>;
    /**
     * Alert rules allow up to 1 alert rule to be selected as a default for each type. By marking an alert rule as default, the
     * rule will be automatically included in subsequently created tests that test a metric used in the alert rule.
     */
    default?: pulumi.Input<boolean>;
    /**
     * [TO_TARGET, FROM_TARGET, BIDIRECTIONAL] The direction of the test (affects how results are shown).
     */
    direction?: pulumi.Input<string>;
    /**
     * The alert rule evaluation expression.
     */
    expression: pulumi.Input<string>;
    /**
     * Include queries for subprefixes detected under this prefix.
     */
    includeCoveredPrefixes?: pulumi.Input<boolean>;
    /**
     * The minimum number of agents or monitors that must meet the specified criteria in order to trigger an alert. This option
     * is mutually exclusive with 'minimum_sources_pct'.
     */
    minimumSources?: pulumi.Input<number>;
    /**
     * The minimum percentage of agents or monitors that must meet the specified criteria in order to trigger an alert. This
     * option is mutually exclusive with 'minimum_sources'.
     */
    minimumSourcesPct?: pulumi.Input<number>;
    /**
     * The list of notifications for the alert rule.
     */
    notifications?: pulumi.Input<pulumi.Input<inputs.AlertRuleNotification>[]>;
    /**
     * Set to 'true' to trigger the notification when the alert clears.
     */
    notifyOnClear?: pulumi.Input<boolean>;
    /**
     * [ANY or EXACT] Defines whether the same agent(s) must meet the EXACT same threshold in consecutive rounds or not. The
     * default value is ANY.
     */
    roundsViolatingMode?: pulumi.Input<string>;
    /**
     * Specifies the divisor (Y value) of the “X of Y times” condition in an alert rule. Minimum value is 1, maximum value
     * is 10.
     */
    roundsViolatingOutOf: pulumi.Input<number>;
    /**
     * Specifies the numerator (X value) of the “X of Y times” condition in an alert rule. Minimum value is 1, maximum
     * value is 10. Must be less than or equal to 'roundsViolatingOutOf'.
     */
    roundsViolatingRequired: pulumi.Input<number>;
    /**
     * The name of the alert rule.
     */
    ruleName: pulumi.Input<string>;
    /**
     * [INFO, MINOR, MAJOR or CRITICAL] The severity level of the alert rule. The default value is INFO.
     */
    severity?: pulumi.Input<string>;
    /**
     * The list of included tests.
     */
    tests?: pulumi.Input<pulumi.Input<inputs.AlertRuleTest>[]>;
}
