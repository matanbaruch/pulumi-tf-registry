// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Bgp extends pulumi.CustomResource {
    /**
     * Get an existing Bgp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BgpState, opts?: pulumi.CustomResourceOptions): Bgp {
        return new Bgp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thousandeyes:index/bgp:Bgp';

    /**
     * Returns true if the given object is an instance of Bgp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Bgp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Bgp.__pulumiType;
    }

    /**
     * Gets the ruleId from the /alert-rules endpoint. If alertsEnabled is set to 'true' and alertRules is not included in a
     * creation/update query, the applicable defaults will be used.
     */
    public readonly alertRules!: pulumi.Output<outputs.BgpAlertRule[] | undefined>;
    /**
     * Set to 'true' to enable alerts, or 'false' to disable alerts. The default value is 'true'.
     */
    public readonly alertsEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Self links to the endpoint to pull test metadata, and data links to the endpoint for test data. Read-only, and shows rel
     * and href elements.
     */
    public /*out*/ readonly apiLinks!: pulumi.Output<outputs.BgpApiLink[]>;
    /**
     * The array of BGP monitor object IDs. The monitorIDs can be sourced from the /bgp-monitors endpoint.
     */
    public readonly bgpMonitors!: pulumi.Output<outputs.BgpBgpMonitor[] | undefined>;
    /**
     * Created by user.
     */
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    /**
     * The date of creation.
     */
    public /*out*/ readonly createdDate!: pulumi.Output<string>;
    /**
     * A description of the alert rule. Defaults to an empty string.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Enables or disables the test.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The array of label objects.
     */
    public /*out*/ readonly groups!: pulumi.Output<outputs.BgpGroup[]>;
    /**
     * Include queries for subprefixes detected under this prefix.
     */
    public readonly includeCoveredPrefixes!: pulumi.Output<boolean | undefined>;
    /**
     * Set to 'true' for a test shared with your account group, or to 'false' for a normal test.
     */
    public /*out*/ readonly liveShare!: pulumi.Output<boolean>;
    /**
     * Last modified by this user.
     */
    public /*out*/ readonly modifiedBy!: pulumi.Output<string>;
    /**
     * The date the test was last modified. Shown in UTC.
     */
    public /*out*/ readonly modifiedDate!: pulumi.Output<string>;
    /**
     * The BGP network address prefix.
     */
    public readonly prefix!: pulumi.Output<string>;
    /**
     * Set to 'true' for a saved event, or to 'false' for a normal test.
     */
    public /*out*/ readonly savedEvent!: pulumi.Output<boolean>;
    /**
     * [“serverName”: “fqdn of server”] The array of DNS Server objects.
     */
    public readonly sharedWithAccounts!: pulumi.Output<outputs.BgpSharedWithAccount[] | undefined>;
    /**
     * The unique ID of the test.
     */
    public /*out*/ readonly testId!: pulumi.Output<number>;
    /**
     * The name of the test.
     */
    public readonly testName!: pulumi.Output<string>;
    /**
     * The type of test.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Enable to automatically add all available Public BGP Monitors to the test.
     */
    public readonly usePublicBgp!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Bgp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BgpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BgpArgs | BgpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BgpState | undefined;
            resourceInputs["alertRules"] = state ? state.alertRules : undefined;
            resourceInputs["alertsEnabled"] = state ? state.alertsEnabled : undefined;
            resourceInputs["apiLinks"] = state ? state.apiLinks : undefined;
            resourceInputs["bgpMonitors"] = state ? state.bgpMonitors : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["createdDate"] = state ? state.createdDate : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["includeCoveredPrefixes"] = state ? state.includeCoveredPrefixes : undefined;
            resourceInputs["liveShare"] = state ? state.liveShare : undefined;
            resourceInputs["modifiedBy"] = state ? state.modifiedBy : undefined;
            resourceInputs["modifiedDate"] = state ? state.modifiedDate : undefined;
            resourceInputs["prefix"] = state ? state.prefix : undefined;
            resourceInputs["savedEvent"] = state ? state.savedEvent : undefined;
            resourceInputs["sharedWithAccounts"] = state ? state.sharedWithAccounts : undefined;
            resourceInputs["testId"] = state ? state.testId : undefined;
            resourceInputs["testName"] = state ? state.testName : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["usePublicBgp"] = state ? state.usePublicBgp : undefined;
        } else {
            const args = argsOrState as BgpArgs | undefined;
            if ((!args || args.prefix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'prefix'");
            }
            if ((!args || args.testName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'testName'");
            }
            resourceInputs["alertRules"] = args ? args.alertRules : undefined;
            resourceInputs["alertsEnabled"] = args ? args.alertsEnabled : undefined;
            resourceInputs["bgpMonitors"] = args ? args.bgpMonitors : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["includeCoveredPrefixes"] = args ? args.includeCoveredPrefixes : undefined;
            resourceInputs["prefix"] = args ? args.prefix : undefined;
            resourceInputs["sharedWithAccounts"] = args ? args.sharedWithAccounts : undefined;
            resourceInputs["testName"] = args ? args.testName : undefined;
            resourceInputs["usePublicBgp"] = args ? args.usePublicBgp : undefined;
            resourceInputs["apiLinks"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["createdDate"] = undefined /*out*/;
            resourceInputs["groups"] = undefined /*out*/;
            resourceInputs["liveShare"] = undefined /*out*/;
            resourceInputs["modifiedBy"] = undefined /*out*/;
            resourceInputs["modifiedDate"] = undefined /*out*/;
            resourceInputs["savedEvent"] = undefined /*out*/;
            resourceInputs["testId"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Bgp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Bgp resources.
 */
export interface BgpState {
    /**
     * Gets the ruleId from the /alert-rules endpoint. If alertsEnabled is set to 'true' and alertRules is not included in a
     * creation/update query, the applicable defaults will be used.
     */
    alertRules?: pulumi.Input<pulumi.Input<inputs.BgpAlertRule>[]>;
    /**
     * Set to 'true' to enable alerts, or 'false' to disable alerts. The default value is 'true'.
     */
    alertsEnabled?: pulumi.Input<boolean>;
    /**
     * Self links to the endpoint to pull test metadata, and data links to the endpoint for test data. Read-only, and shows rel
     * and href elements.
     */
    apiLinks?: pulumi.Input<pulumi.Input<inputs.BgpApiLink>[]>;
    /**
     * The array of BGP monitor object IDs. The monitorIDs can be sourced from the /bgp-monitors endpoint.
     */
    bgpMonitors?: pulumi.Input<pulumi.Input<inputs.BgpBgpMonitor>[]>;
    /**
     * Created by user.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * The date of creation.
     */
    createdDate?: pulumi.Input<string>;
    /**
     * A description of the alert rule. Defaults to an empty string.
     */
    description?: pulumi.Input<string>;
    /**
     * Enables or disables the test.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The array of label objects.
     */
    groups?: pulumi.Input<pulumi.Input<inputs.BgpGroup>[]>;
    /**
     * Include queries for subprefixes detected under this prefix.
     */
    includeCoveredPrefixes?: pulumi.Input<boolean>;
    /**
     * Set to 'true' for a test shared with your account group, or to 'false' for a normal test.
     */
    liveShare?: pulumi.Input<boolean>;
    /**
     * Last modified by this user.
     */
    modifiedBy?: pulumi.Input<string>;
    /**
     * The date the test was last modified. Shown in UTC.
     */
    modifiedDate?: pulumi.Input<string>;
    /**
     * The BGP network address prefix.
     */
    prefix?: pulumi.Input<string>;
    /**
     * Set to 'true' for a saved event, or to 'false' for a normal test.
     */
    savedEvent?: pulumi.Input<boolean>;
    /**
     * [“serverName”: “fqdn of server”] The array of DNS Server objects.
     */
    sharedWithAccounts?: pulumi.Input<pulumi.Input<inputs.BgpSharedWithAccount>[]>;
    /**
     * The unique ID of the test.
     */
    testId?: pulumi.Input<number>;
    /**
     * The name of the test.
     */
    testName?: pulumi.Input<string>;
    /**
     * The type of test.
     */
    type?: pulumi.Input<string>;
    /**
     * Enable to automatically add all available Public BGP Monitors to the test.
     */
    usePublicBgp?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Bgp resource.
 */
export interface BgpArgs {
    /**
     * Gets the ruleId from the /alert-rules endpoint. If alertsEnabled is set to 'true' and alertRules is not included in a
     * creation/update query, the applicable defaults will be used.
     */
    alertRules?: pulumi.Input<pulumi.Input<inputs.BgpAlertRule>[]>;
    /**
     * Set to 'true' to enable alerts, or 'false' to disable alerts. The default value is 'true'.
     */
    alertsEnabled?: pulumi.Input<boolean>;
    /**
     * The array of BGP monitor object IDs. The monitorIDs can be sourced from the /bgp-monitors endpoint.
     */
    bgpMonitors?: pulumi.Input<pulumi.Input<inputs.BgpBgpMonitor>[]>;
    /**
     * A description of the alert rule. Defaults to an empty string.
     */
    description?: pulumi.Input<string>;
    /**
     * Enables or disables the test.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Include queries for subprefixes detected under this prefix.
     */
    includeCoveredPrefixes?: pulumi.Input<boolean>;
    /**
     * The BGP network address prefix.
     */
    prefix: pulumi.Input<string>;
    /**
     * [“serverName”: “fqdn of server”] The array of DNS Server objects.
     */
    sharedWithAccounts?: pulumi.Input<pulumi.Input<inputs.BgpSharedWithAccount>[]>;
    /**
     * The name of the test.
     */
    testName: pulumi.Input<string>;
    /**
     * Enable to automatically add all available Public BGP Monitors to the test.
     */
    usePublicBgp?: pulumi.Input<boolean>;
}
