// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface FabricCloudRouterAccount {
    /**
     * Account Number
     */
    accountNumber: number;
}

export interface FabricCloudRouterChangeLog {
    createdBy: string;
    createdByEmail: string;
    createdByFullName: string;
    createdDateTime: string;
    deletedBy: string;
    deletedByEmail: string;
    deletedByFullName: string;
    deletedDateTime: string;
    updatedBy: string;
    updatedByEmail: string;
    updatedByFullName: string;
    updatedDateTime: string;
}

export interface FabricCloudRouterLocation {
    /**
     * IBX Code
     */
    ibx: string;
    /**
     * Access point metro code
     */
    metroCode: string;
    /**
     * Access point metro name
     */
    metroName: string;
    /**
     * Access point region
     */
    region: string;
}

export interface FabricCloudRouterNotification {
    /**
     * Array of contact emails
     */
    emails: string[];
    /**
     * Send interval
     */
    sendInterval?: string;
    /**
     * Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
     */
    type: string;
}

export interface FabricCloudRouterOrder {
    /**
     * Billing tier for connection bandwidth
     */
    billingTier: string;
    /**
     * Order Identification
     */
    orderId: string;
    /**
     * Order Reference Number
     */
    orderNumber: string;
    /**
     * Purchase order number
     */
    purchaseOrderNumber: string;
}

export interface FabricCloudRouterPackage {
    /**
     * Fabric Cloud Router package code
     */
    code: string;
}

export interface FabricCloudRouterProject {
    /**
     * Unique Resource URL
     */
    href: string;
    /**
     * Project Id
     */
    projectId: string;
}

export interface FabricCloudRouterTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface FabricConnectionASide {
    /**
     * Point of access details
     */
    accessPoint?: outputs.FabricConnectionASideAccessPoint;
    /**
     * Connection side additional information
     */
    additionalInfos?: outputs.FabricConnectionASideAdditionalInfo[];
    /**
     * For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
     */
    serviceToken?: outputs.FabricConnectionASideServiceToken;
}

export interface FabricConnectionASideAccessPoint {
    /**
     * Account
     */
    accounts?: outputs.FabricConnectionASideAccessPointAccount[];
    /**
     * Authentication key for provider based connections or Metal-Fabric Integration connections
     */
    authenticationKey?: string;
    /**
     * **Deprecated** `gateway` Use `router` attribute instead
     *
     * @deprecated Deprecated
     */
    gateway?: outputs.FabricConnectionASideAccessPointGateway;
    /**
     * Virtual device interface
     */
    interface?: outputs.FabricConnectionASideAccessPointInterface;
    /**
     * Connection link protocol
     */
    linkProtocol?: outputs.FabricConnectionASideAccessPointLinkProtocol;
    /**
     * Access point location
     */
    location?: outputs.FabricConnectionASideAccessPointLocation;
    /**
     * network access point information
     */
    network?: outputs.FabricConnectionASideAccessPointNetwork;
    /**
     * Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
     */
    peeringType?: string;
    /**
     * Port access point information
     */
    port?: outputs.FabricConnectionASideAccessPointPort;
    /**
     * Service Profile
     */
    profile?: outputs.FabricConnectionASideAccessPointProfile;
    /**
     * Provider assigned Connection Id
     */
    providerConnectionId: string;
    /**
     * Cloud Router access point information that replaces `gateway`
     */
    router?: outputs.FabricConnectionASideAccessPointRouter;
    /**
     * Access point seller region
     */
    sellerRegion?: string;
    /**
     * Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD_ROUTER, NETWORK, METAL_NETWORK
     */
    type?: string;
    /**
     * Virtual device
     */
    virtualDevice?: outputs.FabricConnectionASideAccessPointVirtualDevice;
}

export interface FabricConnectionASideAccessPointAccount {
    /**
     * Legal name of the accountholder.
     */
    accountName: string;
    /**
     * Equinix-assigned account number.
     */
    accountNumber: number;
    /**
     * Equinix-assigned ID of the subscriber's parent organization.
     */
    globalCustId: string;
    /**
     * Equinix-assigned ID of the subscriber's parent organization.
     */
    globalOrgId: string;
    /**
     * Equinix-assigned name of the subscriber's parent organization.
     */
    globalOrganizationName: string;
    /**
     * Equinix-assigned ID of the subscriber's organization.
     */
    orgId: number;
    /**
     * Equinix-assigned name of the subscriber's organization.
     */
    organizationName: string;
    /**
     * Enterprise datastore id
     */
    ucmId: string;
}

export interface FabricConnectionASideAccessPointGateway {
    /**
     * Unique Resource Identifier
     */
    href: string;
    /**
     * Equinix-assigned virtual gateway identifier
     */
    uuid?: string;
}

export interface FabricConnectionASideAccessPointInterface {
    /**
     * id
     */
    id: number;
    /**
     * Interface type
     */
    type?: string;
    /**
     * Equinix-assigned interface identifier
     */
    uuid?: string;
}

export interface FabricConnectionASideAccessPointLinkProtocol {
    /**
     * Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
     */
    type?: string;
    /**
     * Vlan Customer Tag information, vlanCTag value specified for QINQ connections
     */
    vlanCTag: number;
    /**
     * Vlan Provider Tag information, vlanSTag value specified for QINQ connections
     */
    vlanSTag: number;
    /**
     * Vlan Tag information, vlanTag value specified for DOT1Q connections
     */
    vlanTag: number;
}

export interface FabricConnectionASideAccessPointLocation {
    /**
     * IBX Code
     */
    ibx: string;
    /**
     * Access point metro code
     */
    metroCode: string;
    /**
     * Access point metro name
     */
    metroName: string;
    /**
     * Access point region
     */
    region: string;
}

export interface FabricConnectionASideAccessPointNetwork {
    /**
     * Unique Resource Identifier
     */
    href: string;
    /**
     * Equinix-assigned Network identifier
     */
    uuid?: string;
}

export interface FabricConnectionASideAccessPointPort {
    /**
     * Unique Resource Identifier
     */
    href: string;
    /**
     * Port name
     */
    name: string;
    /**
     * Redundancy Information
     */
    redundancies: outputs.FabricConnectionASideAccessPointPortRedundancy[];
    /**
     * Equinix-assigned Port identifier
     */
    uuid: string;
}

export interface FabricConnectionASideAccessPointPortRedundancy {
    enabled: boolean;
    group: string;
    priority: string;
}

export interface FabricConnectionASideAccessPointProfile {
    /**
     * Access point config information
     */
    accessPointTypeConfigs: outputs.FabricConnectionASideAccessPointProfileAccessPointTypeConfig[];
    /**
     * User-provided service description
     */
    description: string;
    /**
     * Service Profile URI response attribute
     */
    href: string;
    /**
     * Customer-assigned service profile name
     */
    name: string;
    /**
     * Service profile type - L2_PROFILE, L3_PROFILE, ECIA_PROFILE, ECMC_PROFILE, IA_PROFILE
     */
    type: string;
    /**
     * Equinix assigned service profile identifier
     */
    uuid: string;
}

export interface FabricConnectionASideAccessPointProfileAccessPointTypeConfig {
    type: string;
    uuid: string;
}

export interface FabricConnectionASideAccessPointRouter {
    /**
     * Unique Resource Identifier
     */
    href: string;
    /**
     * Equinix-assigned virtual gateway identifier
     */
    uuid?: string;
}

export interface FabricConnectionASideAccessPointVirtualDevice {
    /**
     * Unique Resource Identifier
     */
    href: string;
    /**
     * Customer-assigned Virtual Device Name
     */
    name?: string;
    /**
     * Virtual Device type
     */
    type?: string;
    /**
     * Equinix-assigned Virtual Device identifier
     */
    uuid?: string;
}

export interface FabricConnectionASideAdditionalInfo {
    /**
     * Additional information key
     */
    key?: string;
    /**
     * Additional information value
     */
    value?: string;
}

export interface FabricConnectionASideServiceToken {
    /**
     * Service token description
     */
    description: string;
    /**
     * An absolute URL that is the subject of the link's context
     */
    href: string;
    /**
     * Token type - VC_TOKEN
     */
    type?: string;
    /**
     * Equinix-assigned service token identifier
     */
    uuid?: string;
}

export interface FabricConnectionAccount {
    accountName: string;
    accountNumber: number;
    globalCustId: string;
    globalOrgId: string;
    globalOrganizationName: string;
    orgId: number;
    organizationName: string;
    ucmId: string;
}

export interface FabricConnectionChangeLog {
    createdBy: string;
    createdByEmail: string;
    createdByFullName: string;
    createdDateTime: string;
    deletedBy: string;
    deletedByEmail: string;
    deletedByFullName: string;
    deletedDateTime: string;
    updatedBy: string;
    updatedByEmail: string;
    updatedByFullName: string;
    updatedDateTime: string;
}

export interface FabricConnectionNotification {
    /**
     * Array of contact emails
     */
    emails: string[];
    /**
     * Send interval
     */
    sendInterval?: string;
    /**
     * Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
     */
    type: string;
}

export interface FabricConnectionOperation {
    equinixStatus: string;
    errors: outputs.FabricConnectionOperationError[];
    providerStatus: string;
}

export interface FabricConnectionOperationError {
    additionalInfos: outputs.FabricConnectionOperationErrorAdditionalInfo[];
    correlationId: string;
    details: string;
    errorCode: string;
    errorMessage: string;
    help: string;
}

export interface FabricConnectionOperationErrorAdditionalInfo {
    property: string;
    reason: string;
}

export interface FabricConnectionOrder {
    /**
     * Billing tier for connection bandwidth
     */
    billingTier: string;
    /**
     * Order Identification
     */
    orderId: string;
    /**
     * Order Reference Number
     */
    orderNumber: string;
    /**
     * Purchase order number
     */
    purchaseOrderNumber: string;
}

export interface FabricConnectionProject {
    /**
     * Unique Resource URL
     */
    href: string;
    /**
     * Project Id
     */
    projectId: string;
}

export interface FabricConnectionRedundancy {
    /**
     * Redundancy group identifier (Use the redundancy.0.group UUID of primary connection; e.g. one(equinix_fabric_connection.primary_port_connection.redundancy).group or equinix_fabric_connection.primary_port_connection.redundancy.0.group)
     */
    group: string;
    /**
     * Connection priority in redundancy group - PRIMARY, SECONDARY
     */
    priority: string;
}

export interface FabricConnectionTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface FabricConnectionZSide {
    /**
     * Point of access details
     */
    accessPoint?: outputs.FabricConnectionZSideAccessPoint;
    /**
     * Connection side additional information
     */
    additionalInfos?: outputs.FabricConnectionZSideAdditionalInfo[];
    /**
     * For service token based connections, Service tokens authorize users to access protected resources and services. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets
     */
    serviceToken?: outputs.FabricConnectionZSideServiceToken;
}

export interface FabricConnectionZSideAccessPoint {
    /**
     * Account
     */
    accounts?: outputs.FabricConnectionZSideAccessPointAccount[];
    /**
     * Authentication key for provider based connections or Metal-Fabric Integration connections
     */
    authenticationKey?: string;
    /**
     * **Deprecated** `gateway` Use `router` attribute instead
     *
     * @deprecated Deprecated
     */
    gateway?: outputs.FabricConnectionZSideAccessPointGateway;
    /**
     * Virtual device interface
     */
    interface?: outputs.FabricConnectionZSideAccessPointInterface;
    /**
     * Connection link protocol
     */
    linkProtocol?: outputs.FabricConnectionZSideAccessPointLinkProtocol;
    /**
     * Access point location
     */
    location?: outputs.FabricConnectionZSideAccessPointLocation;
    /**
     * network access point information
     */
    network?: outputs.FabricConnectionZSideAccessPointNetwork;
    /**
     * Peering Type- PRIVATE,MICROSOFT,PUBLIC, MANUAL
     */
    peeringType?: string;
    /**
     * Port access point information
     */
    port?: outputs.FabricConnectionZSideAccessPointPort;
    /**
     * Service Profile
     */
    profile?: outputs.FabricConnectionZSideAccessPointProfile;
    /**
     * Provider assigned Connection Id
     */
    providerConnectionId: string;
    /**
     * Cloud Router access point information that replaces `gateway`
     */
    router?: outputs.FabricConnectionZSideAccessPointRouter;
    /**
     * Access point seller region
     */
    sellerRegion?: string;
    /**
     * Access point type - COLO, VD, VG, SP, IGW, SUBNET, CLOUD_ROUTER, NETWORK, METAL_NETWORK
     */
    type?: string;
    /**
     * Virtual device
     */
    virtualDevice?: outputs.FabricConnectionZSideAccessPointVirtualDevice;
}

export interface FabricConnectionZSideAccessPointAccount {
    /**
     * Legal name of the accountholder.
     */
    accountName: string;
    /**
     * Equinix-assigned account number.
     */
    accountNumber: number;
    /**
     * Equinix-assigned ID of the subscriber's parent organization.
     */
    globalCustId: string;
    /**
     * Equinix-assigned ID of the subscriber's parent organization.
     */
    globalOrgId: string;
    /**
     * Equinix-assigned name of the subscriber's parent organization.
     */
    globalOrganizationName: string;
    /**
     * Equinix-assigned ID of the subscriber's organization.
     */
    orgId: number;
    /**
     * Equinix-assigned name of the subscriber's organization.
     */
    organizationName: string;
    /**
     * Enterprise datastore id
     */
    ucmId: string;
}

export interface FabricConnectionZSideAccessPointGateway {
    /**
     * Unique Resource Identifier
     */
    href: string;
    /**
     * Equinix-assigned virtual gateway identifier
     */
    uuid?: string;
}

export interface FabricConnectionZSideAccessPointInterface {
    /**
     * id
     */
    id: number;
    /**
     * Interface type
     */
    type?: string;
    /**
     * Equinix-assigned interface identifier
     */
    uuid?: string;
}

export interface FabricConnectionZSideAccessPointLinkProtocol {
    /**
     * Type of the link protocol - UNTAGGED, DOT1Q, QINQ, EVPN_VXLAN
     */
    type?: string;
    /**
     * Vlan Customer Tag information, vlanCTag value specified for QINQ connections
     */
    vlanCTag: number;
    /**
     * Vlan Provider Tag information, vlanSTag value specified for QINQ connections
     */
    vlanSTag: number;
    /**
     * Vlan Tag information, vlanTag value specified for DOT1Q connections
     */
    vlanTag: number;
}

export interface FabricConnectionZSideAccessPointLocation {
    /**
     * IBX Code
     */
    ibx: string;
    /**
     * Access point metro code
     */
    metroCode: string;
    /**
     * Access point metro name
     */
    metroName: string;
    /**
     * Access point region
     */
    region: string;
}

export interface FabricConnectionZSideAccessPointNetwork {
    /**
     * Unique Resource Identifier
     */
    href: string;
    /**
     * Equinix-assigned Network identifier
     */
    uuid?: string;
}

export interface FabricConnectionZSideAccessPointPort {
    /**
     * Unique Resource Identifier
     */
    href: string;
    /**
     * Port name
     */
    name: string;
    /**
     * Redundancy Information
     */
    redundancies: outputs.FabricConnectionZSideAccessPointPortRedundancy[];
    /**
     * Equinix-assigned Port identifier
     */
    uuid: string;
}

export interface FabricConnectionZSideAccessPointPortRedundancy {
    enabled: boolean;
    group: string;
    priority: string;
}

export interface FabricConnectionZSideAccessPointProfile {
    /**
     * Access point config information
     */
    accessPointTypeConfigs: outputs.FabricConnectionZSideAccessPointProfileAccessPointTypeConfig[];
    /**
     * User-provided service description
     */
    description: string;
    /**
     * Service Profile URI response attribute
     */
    href: string;
    /**
     * Customer-assigned service profile name
     */
    name: string;
    /**
     * Service profile type - L2_PROFILE, L3_PROFILE, ECIA_PROFILE, ECMC_PROFILE, IA_PROFILE
     */
    type: string;
    /**
     * Equinix assigned service profile identifier
     */
    uuid: string;
}

export interface FabricConnectionZSideAccessPointProfileAccessPointTypeConfig {
    type: string;
    uuid: string;
}

export interface FabricConnectionZSideAccessPointRouter {
    /**
     * Unique Resource Identifier
     */
    href: string;
    /**
     * Equinix-assigned virtual gateway identifier
     */
    uuid?: string;
}

export interface FabricConnectionZSideAccessPointVirtualDevice {
    /**
     * Unique Resource Identifier
     */
    href: string;
    /**
     * Customer-assigned Virtual Device Name
     */
    name?: string;
    /**
     * Virtual Device type
     */
    type?: string;
    /**
     * Equinix-assigned Virtual Device identifier
     */
    uuid?: string;
}

export interface FabricConnectionZSideAdditionalInfo {
    /**
     * Additional information key
     */
    key?: string;
    /**
     * Additional information value
     */
    value?: string;
}

export interface FabricConnectionZSideServiceToken {
    /**
     * Service token description
     */
    description: string;
    /**
     * An absolute URL that is the subject of the link's context
     */
    href: string;
    /**
     * Token type - VC_TOKEN
     */
    type?: string;
    /**
     * Equinix-assigned service token identifier
     */
    uuid?: string;
}

export interface FabricNetworkChange {
    href: string;
    type: string;
    uuid: string;
}

export interface FabricNetworkChangeLog {
    createdBy: string;
    createdByEmail: string;
    createdByFullName: string;
    createdDateTime: string;
    deletedBy: string;
    deletedByEmail: string;
    deletedByFullName: string;
    deletedDateTime: string;
    updatedBy: string;
    updatedByEmail: string;
    updatedByFullName: string;
    updatedDateTime: string;
}

export interface FabricNetworkLocation {
    /**
     * IBX Code
     */
    ibx: string;
    /**
     * Access point metro code
     */
    metroCode: string;
    /**
     * Access point metro name
     */
    metroName: string;
    /**
     * Access point region
     */
    region: string;
}

export interface FabricNetworkNotification {
    /**
     * Array of contact emails
     */
    emails: string[];
    /**
     * Send interval
     */
    sendInterval?: string;
    /**
     * Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
     */
    type: string;
}

export interface FabricNetworkOperation {
    equinixStatus: string;
}

export interface FabricNetworkProject {
    /**
     * Customer project identifier
     */
    projectId: string;
}

export interface FabricNetworkTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface FabricRoutingProtocolBfd {
    /**
     * Bidirectional Forwarding Detection enablement
     */
    enabled: boolean;
    /**
     * Interval range between the received BFD control packets
     */
    interval?: string;
}

export interface FabricRoutingProtocolBgpIpv4 {
    /**
     * Customer side peering ip
     */
    customerPeerIp: string;
    /**
     * Admin status for the BGP session
     */
    enabled?: boolean;
    /**
     * Equinix side peering ip
     */
    equinixPeerIp: string;
}

export interface FabricRoutingProtocolBgpIpv6 {
    /**
     * Customer side peering ip
     */
    customerPeerIp: string;
    /**
     * Admin status for the BGP session
     */
    enabled?: boolean;
    /**
     * Equinix side peering ip
     */
    equinixPeerIp: string;
}

export interface FabricRoutingProtocolChange {
    href: string;
    type: string;
    uuid: string;
}

export interface FabricRoutingProtocolChangeLog {
    createdBy: string;
    createdByEmail: string;
    createdByFullName: string;
    createdDateTime: string;
    deletedBy: string;
    deletedByEmail: string;
    deletedByFullName: string;
    deletedDateTime: string;
    updatedBy: string;
    updatedByEmail: string;
    updatedByFullName: string;
    updatedDateTime: string;
}

export interface FabricRoutingProtocolDirectIpv4 {
    /**
     * Equinix side Interface IP address
     */
    equinixIfaceIp: string;
}

export interface FabricRoutingProtocolDirectIpv6 {
    /**
     * Equinix side Interface IP address
     */
    equinixIfaceIp?: string;
}

export interface FabricRoutingProtocolOperation {
    errors: outputs.FabricRoutingProtocolOperationError[];
}

export interface FabricRoutingProtocolOperationError {
    additionalInfos: outputs.FabricRoutingProtocolOperationErrorAdditionalInfo[];
    correlationId: string;
    details: string;
    errorCode: string;
    errorMessage: string;
    help: string;
}

export interface FabricRoutingProtocolOperationErrorAdditionalInfo {
    property: string;
    reason: string;
}

export interface FabricRoutingProtocolTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface FabricServiceProfileAccessPointTypeConfig {
    /**
     * Setting to enable or disable the ability of the buyer to change connection bandwidth without approval of the seller
     */
    allowBandwidthAutoApproval?: boolean;
    /**
     * Availability of a bandwidth upgrade. The default is false
     */
    allowBandwidthUpgrade?: boolean;
    /**
     * Setting to enable or disable the ability of the buyer to customize the bandwidth
     */
    allowCustomBandwidth?: boolean;
    /**
     * Setting to allow or prohibit remote connections to the service profile
     */
    allowRemoteConnections?: boolean;
    /**
     * Api configuration details
     */
    apiConfig?: outputs.FabricServiceProfileAccessPointTypeConfigApiConfig;
    /**
     * Authentication key details
     */
    authenticationKey?: outputs.FabricServiceProfileAccessPointTypeConfigAuthenticationKey;
    /**
     * Percentage of port bandwidth at which an allocation alert is generated
     */
    bandwidthAlertThreshold?: number;
    /**
     * Custom name for Connection
     */
    connectionLabel?: string;
    /**
     * Mandate redundant connections
     */
    connectionRedundancyRequired?: boolean;
    /**
     * Enable auto generate service key
     */
    enableAutoGenerateServiceKey?: boolean;
    /**
     * Link protocol configuration details
     */
    linkProtocolConfig?: outputs.FabricServiceProfileAccessPointTypeConfigLinkProtocolConfig;
    /**
     * Supported bandwidths
     */
    supportedBandwidths?: number[];
    /**
     * Type of access point type config - VD, COLO
     */
    type: string;
    /**
     * Colo/Port Uuid
     */
    uuid: string;
}

export interface FabricServiceProfileAccessPointTypeConfigApiConfig {
    /**
     * Setting showing that oversubscription support is available (true) or not (false). The default is false
     */
    allowOverSubscription?: boolean;
    /**
     * Indicates if it's possible to establish connections based on the given service profile using the Equinix Fabric API.
     */
    apiAvailable?: boolean;
    /**
     * Indicates if the connection bandwidth can be obtained directly from the cloud service provider.
     */
    bandwidthFromApi?: boolean;
    /**
     * Setting indicating that the port is managed by Equinix (true) or not (false)
     */
    equinixManagedPort?: boolean;
    /**
     * Setting indicating that the VLAN is managed by Equinix (true) or not (false)
     */
    equinixManagedVlan?: boolean;
    /**
     * A unique identifier issued during onboarding and used to integrate the customer's service profile with the Equinix Fabric API.
     */
    integrationId?: string;
    /**
     * Port bandwidth multiplier that determines the total bandwidth that can be allocated to users creating connections to your services. For example, a 10 Gbps port combined with an overSubscriptionLimit parameter value of 10 allows your subscribers to create connections with a total bandwidth of 100 Gbps.
     */
    overSubscriptionLimit?: number;
}

export interface FabricServiceProfileAccessPointTypeConfigAuthenticationKey {
    /**
     * Description of authorization key
     */
    description?: string;
    /**
     * Name of the parameter that must be provided to authorize the connection.
     */
    label?: string;
    /**
     * Requirement to configure an authentication key.
     */
    required?: boolean;
}

export interface FabricServiceProfileAccessPointTypeConfigLinkProtocolConfig {
    /**
     * Data frames encapsulation standard.UNTAGGED - Untagged encapsulation for EPL connections. DOT1Q - DOT1Q encapsulation standard. QINQ - QINQ encapsulation standard.
     */
    encapsulation?: string;
    /**
     * Additional tagging information required by the seller profile.
     */
    encapsulationStrategy?: string;
    /**
     * Automatically accept subsequent DOT1Q to QINQ connections that use the same authentication key. These connections will have the same VLAN S-tag assigned as the initial connection.
     */
    reuseVlanSTag?: boolean;
}

export interface FabricServiceProfileAccount {
    accountName: string;
    accountNumber: number;
    globalCustId: string;
    globalOrgId: string;
    globalOrganizationName: string;
    orgId: number;
    organizationName: string;
    ucmId: string;
}

export interface FabricServiceProfileChangeLog {
    createdBy: string;
    createdByEmail: string;
    createdByFullName: string;
    createdDateTime: string;
    deletedBy: string;
    deletedByEmail: string;
    deletedByFullName: string;
    deletedDateTime: string;
    updatedBy: string;
    updatedByEmail: string;
    updatedByFullName: string;
    updatedDateTime: string;
}

export interface FabricServiceProfileCustomField {
    /**
     * Required field
     */
    captureInEmail?: boolean;
    /**
     * Data type
     */
    dataType: string;
    /**
     * Description
     */
    description?: string;
    /**
     * Label
     */
    label: string;
    /**
     * Options
     */
    options?: string[];
    /**
     * Required field
     */
    required: boolean;
}

export interface FabricServiceProfileMarketingInfo {
    /**
     * Logo
     */
    logo?: string;
    /**
     * Process Step
     */
    processSteps?: outputs.FabricServiceProfileMarketingInfoProcessStep[];
    /**
     * Promotion
     */
    promotion?: boolean;
}

export interface FabricServiceProfileMarketingInfoProcessStep {
    /**
     * Description
     */
    description?: string;
    /**
     * Sub Title
     */
    subTitle?: string;
    /**
     * Title
     */
    title?: string;
}

export interface FabricServiceProfileMetro {
    /**
     * Metro Code - Example SV
     */
    code?: string;
    /**
     * Display Name
     */
    displayName?: string;
    /**
     * IBX- Equinix International Business Exchange list
     */
    ibxs?: string[];
    /**
     * In Trail
     */
    inTrail?: boolean;
    /**
     * Metro Name
     */
    name?: string;
    /**
     * Seller Regions
     */
    sellerRegions?: {[key: string]: string};
}

export interface FabricServiceProfileNotification {
    /**
     * Array of contact emails
     */
    emails: string[];
    /**
     * Send interval
     */
    sendInterval?: string;
    /**
     * Notification Type - ALL,CONNECTION_APPROVAL,SALES_REP_NOTIFICATIONS, NOTIFICATIONS
     */
    type: string;
}

export interface FabricServiceProfilePort {
    /**
     * Cross Connect Id
     */
    crossConnectId?: string;
    /**
     * Colo/Port Location
     */
    location?: outputs.FabricServiceProfilePortLocation;
    /**
     * Seller Region
     */
    sellerRegion?: string;
    /**
     * Seller Region details
     */
    sellerRegionDescription?: string;
    /**
     * Colo/Port Type
     */
    type: string;
    /**
     * Colo/Port Uuid
     */
    uuid: string;
}

export interface FabricServiceProfilePortLocation {
    /**
     * IBX Code
     */
    ibx: string;
    /**
     * Access point metro code
     */
    metroCode: string;
    /**
     * Access point metro name
     */
    metroName: string;
    /**
     * Access point region
     */
    region: string;
}

export interface FabricServiceProfileProject {
    /**
     * Unique Resource URL
     */
    href: string;
    /**
     * Project Id
     */
    projectId: string;
}

export interface FabricServiceProfileTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface FabricServiceProfileVirtualDevice {
    /**
     * Device Interface Uuid
     */
    interfaceUuid?: string;
    /**
     * Device Location
     */
    location?: outputs.FabricServiceProfileVirtualDeviceLocation;
    /**
     * Virtual Device Type
     */
    type: string;
    /**
     * Virtual Device Uuid
     */
    uuid: string;
}

export interface FabricServiceProfileVirtualDeviceLocation {
    /**
     * IBX Code
     */
    ibx: string;
    /**
     * Access point metro code
     */
    metroCode: string;
    /**
     * Access point metro name
     */
    metroName: string;
    /**
     * Access point region
     */
    region: string;
}

export interface GetFabricCloudRouterAccount {
    accountNumber: number;
}

export interface GetFabricCloudRouterChangeLog {
    createdBy: string;
    createdByEmail: string;
    createdByFullName: string;
    createdDateTime: string;
    deletedBy: string;
    deletedByEmail: string;
    deletedByFullName: string;
    deletedDateTime: string;
    updatedBy: string;
    updatedByEmail: string;
    updatedByFullName: string;
    updatedDateTime: string;
}

export interface GetFabricCloudRouterLocation {
    ibx: string;
    metroCode: string;
    metroName: string;
    region: string;
}

export interface GetFabricCloudRouterNotification {
    emails: string[];
    sendInterval: string;
    type: string;
}

export interface GetFabricCloudRouterOrder {
    billingTier: string;
    orderId: string;
    orderNumber: string;
    purchaseOrderNumber: string;
}

export interface GetFabricCloudRouterPackage {
    code: string;
}

export interface GetFabricCloudRouterProject {
    href: string;
    projectId: string;
}

export interface GetFabricCloudRoutersData {
    accounts: outputs.GetFabricCloudRoutersDataAccount[];
    bgpIpv4RoutesCount: number;
    bgpIpv6RoutesCount: number;
    changeLogs: outputs.GetFabricCloudRoutersDataChangeLog[];
    connectionsCount: number;
    description: string;
    distinctIpv4PrefixesCount: number;
    distinctIpv6PrefixesCount: number;
    equinixAsn: number;
    href: string;
    locations: outputs.GetFabricCloudRoutersDataLocation[];
    name: string;
    notifications: outputs.GetFabricCloudRoutersDataNotification[];
    orders: outputs.GetFabricCloudRoutersDataOrder[];
    packages: outputs.GetFabricCloudRoutersDataPackage[];
    projects: outputs.GetFabricCloudRoutersDataProject[];
    state: string;
    type: string;
    uuid: string;
}

export interface GetFabricCloudRoutersDataAccount {
    accountNumber: number;
}

export interface GetFabricCloudRoutersDataChangeLog {
    createdBy: string;
    createdByEmail: string;
    createdByFullName: string;
    createdDateTime: string;
    deletedBy: string;
    deletedByEmail: string;
    deletedByFullName: string;
    deletedDateTime: string;
    updatedBy: string;
    updatedByEmail: string;
    updatedByFullName: string;
    updatedDateTime: string;
}

export interface GetFabricCloudRoutersDataLocation {
    ibx: string;
    metroCode: string;
    metroName: string;
    region: string;
}

export interface GetFabricCloudRoutersDataNotification {
    emails: string[];
    sendInterval: string;
    type: string;
}

export interface GetFabricCloudRoutersDataOrder {
    billingTier: string;
    orderId: string;
    orderNumber: string;
    purchaseOrderNumber: string;
}

export interface GetFabricCloudRoutersDataPackage {
    code: string;
}

export interface GetFabricCloudRoutersDataProject {
    href: string;
    projectId: string;
}

export interface GetFabricCloudRoutersFilter {
    /**
     * Possible operators to use on the filter property. Can be one of the following: [= - equal, != - not equal, > - greater than, >= - greater than or equal to, < - less than, <= - less than or equal to, [NOT] BETWEEN - (not) between, [NOT] LIKE - (not) like, [NOT] IN - (not) in
     */
    operator: string;
    /**
     * Boolean flag indicating whether this filter is included in the OR group. There can only be one OR group and it can have a maximum of 3 filters. The OR group only counts as 1 of the 8 possible filters
     */
    or?: boolean;
    /**
     * The API response property which you want to filter your request on. Can be one of the following: "/project/projectId", "/name", "/uuid", "/state", "/location/metroCode", "/location/metroName", "/package/code", "/*"
     */
    property: string;
    /**
     * The values that you want to apply the property+operator combination to in order to filter your data search
     */
    values: string[];
}

export interface GetFabricCloudRoutersPagination {
    /**
     * Number of elements to be requested per page. Number must be between 1 and 100. Default is 20
     */
    limit?: number;
    /**
     * The page offset for the pagination request. Index of the first element. Default is 0.
     */
    offset?: number;
}

export interface GetFabricCloudRoutersSort {
    /**
     * The sorting direction. Can be one of: [DESC, ASC], Defaults to DESC
     */
    direction?: string;
    /**
     * The property name to use in sorting. Can be one of the following: [/name, /uuid, /state, /location/metroCode, /location/metroName, /package/code, /changeLog/createdDateTime, /changeLog/updatedDateTime], Defaults to /changeLog/updatedDateTime
     */
    property?: string;
}

export interface GetFabricConnectionASide {
    accessPoints: outputs.GetFabricConnectionASideAccessPoint[];
    additionalInfos: outputs.GetFabricConnectionASideAdditionalInfo[];
    serviceTokens: outputs.GetFabricConnectionASideServiceToken[];
}

export interface GetFabricConnectionASideAccessPoint {
    accounts: outputs.GetFabricConnectionASideAccessPointAccount[];
    authenticationKey: string;
    gateways: outputs.GetFabricConnectionASideAccessPointGateway[];
    interfaces: outputs.GetFabricConnectionASideAccessPointInterface[];
    linkProtocols: outputs.GetFabricConnectionASideAccessPointLinkProtocol[];
    locations: outputs.GetFabricConnectionASideAccessPointLocation[];
    networks: outputs.GetFabricConnectionASideAccessPointNetwork[];
    peeringType: string;
    ports: outputs.GetFabricConnectionASideAccessPointPort[];
    profiles: outputs.GetFabricConnectionASideAccessPointProfile[];
    providerConnectionId: string;
    routers: outputs.GetFabricConnectionASideAccessPointRouter[];
    sellerRegion: string;
    type: string;
    virtualDevices: outputs.GetFabricConnectionASideAccessPointVirtualDevice[];
}

export interface GetFabricConnectionASideAccessPointAccount {
    accountName: string;
    accountNumber: number;
    globalCustId: string;
    globalOrgId: string;
    globalOrganizationName: string;
    orgId: number;
    organizationName: string;
    ucmId: string;
}

export interface GetFabricConnectionASideAccessPointGateway {
    href: string;
    uuid: string;
}

export interface GetFabricConnectionASideAccessPointInterface {
    id: number;
    type: string;
    uuid: string;
}

export interface GetFabricConnectionASideAccessPointLinkProtocol {
    type: string;
    vlanCTag: number;
    vlanSTag: number;
    vlanTag: number;
}

export interface GetFabricConnectionASideAccessPointLocation {
    ibx: string;
    metroCode: string;
    metroName: string;
    region: string;
}

export interface GetFabricConnectionASideAccessPointNetwork {
    href: string;
    uuid: string;
}

export interface GetFabricConnectionASideAccessPointPort {
    href: string;
    name: string;
    redundancies: outputs.GetFabricConnectionASideAccessPointPortRedundancy[];
    uuid: string;
}

export interface GetFabricConnectionASideAccessPointPortRedundancy {
    enabled: boolean;
    group: string;
    priority: string;
}

export interface GetFabricConnectionASideAccessPointProfile {
    accessPointTypeConfigs: outputs.GetFabricConnectionASideAccessPointProfileAccessPointTypeConfig[];
    description: string;
    href: string;
    name: string;
    type: string;
    uuid: string;
}

export interface GetFabricConnectionASideAccessPointProfileAccessPointTypeConfig {
    type: string;
    uuid: string;
}

export interface GetFabricConnectionASideAccessPointRouter {
    href: string;
    uuid: string;
}

export interface GetFabricConnectionASideAccessPointVirtualDevice {
    href: string;
    name: string;
    type: string;
    uuid: string;
}

export interface GetFabricConnectionASideAdditionalInfo {
    key: string;
    value: string;
}

export interface GetFabricConnectionASideServiceToken {
    description: string;
    href: string;
    type: string;
    uuid: string;
}

export interface GetFabricConnectionAccount {
    accountName: string;
    accountNumber: number;
    globalCustId: string;
    globalOrgId: string;
    globalOrganizationName: string;
    orgId: number;
    organizationName: string;
    ucmId: string;
}

export interface GetFabricConnectionChangeLog {
    createdBy: string;
    createdByEmail: string;
    createdByFullName: string;
    createdDateTime: string;
    deletedBy: string;
    deletedByEmail: string;
    deletedByFullName: string;
    deletedDateTime: string;
    updatedBy: string;
    updatedByEmail: string;
    updatedByFullName: string;
    updatedDateTime: string;
}

export interface GetFabricConnectionNotification {
    emails: string[];
    sendInterval: string;
    type: string;
}

export interface GetFabricConnectionOperation {
    equinixStatus: string;
    errors: outputs.GetFabricConnectionOperationError[];
    providerStatus: string;
}

export interface GetFabricConnectionOperationError {
    additionalInfos: outputs.GetFabricConnectionOperationErrorAdditionalInfo[];
    correlationId: string;
    details: string;
    errorCode: string;
    errorMessage: string;
    help: string;
}

export interface GetFabricConnectionOperationErrorAdditionalInfo {
    property: string;
    reason: string;
}

export interface GetFabricConnectionOrder {
    billingTier: string;
    orderId: string;
    orderNumber: string;
    purchaseOrderNumber: string;
}

export interface GetFabricConnectionProject {
    href: string;
    projectId: string;
}

export interface GetFabricConnectionRedundancy {
    group: string;
    priority: string;
}

export interface GetFabricConnectionZSide {
    accessPoints: outputs.GetFabricConnectionZSideAccessPoint[];
    additionalInfos: outputs.GetFabricConnectionZSideAdditionalInfo[];
    serviceTokens: outputs.GetFabricConnectionZSideServiceToken[];
}

export interface GetFabricConnectionZSideAccessPoint {
    accounts: outputs.GetFabricConnectionZSideAccessPointAccount[];
    authenticationKey: string;
    gateways: outputs.GetFabricConnectionZSideAccessPointGateway[];
    interfaces: outputs.GetFabricConnectionZSideAccessPointInterface[];
    linkProtocols: outputs.GetFabricConnectionZSideAccessPointLinkProtocol[];
    locations: outputs.GetFabricConnectionZSideAccessPointLocation[];
    networks: outputs.GetFabricConnectionZSideAccessPointNetwork[];
    peeringType: string;
    ports: outputs.GetFabricConnectionZSideAccessPointPort[];
    profiles: outputs.GetFabricConnectionZSideAccessPointProfile[];
    providerConnectionId: string;
    routers: outputs.GetFabricConnectionZSideAccessPointRouter[];
    sellerRegion: string;
    type: string;
    virtualDevices: outputs.GetFabricConnectionZSideAccessPointVirtualDevice[];
}

export interface GetFabricConnectionZSideAccessPointAccount {
    accountName: string;
    accountNumber: number;
    globalCustId: string;
    globalOrgId: string;
    globalOrganizationName: string;
    orgId: number;
    organizationName: string;
    ucmId: string;
}

export interface GetFabricConnectionZSideAccessPointGateway {
    href: string;
    uuid: string;
}

export interface GetFabricConnectionZSideAccessPointInterface {
    id: number;
    type: string;
    uuid: string;
}

export interface GetFabricConnectionZSideAccessPointLinkProtocol {
    type: string;
    vlanCTag: number;
    vlanSTag: number;
    vlanTag: number;
}

export interface GetFabricConnectionZSideAccessPointLocation {
    ibx: string;
    metroCode: string;
    metroName: string;
    region: string;
}

export interface GetFabricConnectionZSideAccessPointNetwork {
    href: string;
    uuid: string;
}

export interface GetFabricConnectionZSideAccessPointPort {
    href: string;
    name: string;
    redundancies: outputs.GetFabricConnectionZSideAccessPointPortRedundancy[];
    uuid: string;
}

export interface GetFabricConnectionZSideAccessPointPortRedundancy {
    enabled: boolean;
    group: string;
    priority: string;
}

export interface GetFabricConnectionZSideAccessPointProfile {
    accessPointTypeConfigs: outputs.GetFabricConnectionZSideAccessPointProfileAccessPointTypeConfig[];
    description: string;
    href: string;
    name: string;
    type: string;
    uuid: string;
}

export interface GetFabricConnectionZSideAccessPointProfileAccessPointTypeConfig {
    type: string;
    uuid: string;
}

export interface GetFabricConnectionZSideAccessPointRouter {
    href: string;
    uuid: string;
}

export interface GetFabricConnectionZSideAccessPointVirtualDevice {
    href: string;
    name: string;
    type: string;
    uuid: string;
}

export interface GetFabricConnectionZSideAdditionalInfo {
    key: string;
    value: string;
}

export interface GetFabricConnectionZSideServiceToken {
    description: string;
    href: string;
    type: string;
    uuid: string;
}

export interface GetFabricConnectionsData {
    aSides: outputs.GetFabricConnectionsDataASide[];
    accounts: outputs.GetFabricConnectionsDataAccount[];
    additionalInfos: {[key: string]: string}[];
    bandwidth: number;
    changeLogs: outputs.GetFabricConnectionsDataChangeLog[];
    description: string;
    direction: string;
    href: string;
    isRemote: boolean;
    name: string;
    notifications: outputs.GetFabricConnectionsDataNotification[];
    operations: outputs.GetFabricConnectionsDataOperation[];
    orders: outputs.GetFabricConnectionsDataOrder[];
    projects: outputs.GetFabricConnectionsDataProject[];
    redundancies: outputs.GetFabricConnectionsDataRedundancy[];
    state: string;
    type: string;
    uuid: string;
    zSides: outputs.GetFabricConnectionsDataZSide[];
}

export interface GetFabricConnectionsDataASide {
    accessPoints: outputs.GetFabricConnectionsDataASideAccessPoint[];
    additionalInfos: outputs.GetFabricConnectionsDataASideAdditionalInfo[];
    serviceTokens: outputs.GetFabricConnectionsDataASideServiceToken[];
}

export interface GetFabricConnectionsDataASideAccessPoint {
    accounts: outputs.GetFabricConnectionsDataASideAccessPointAccount[];
    authenticationKey: string;
    gateways: outputs.GetFabricConnectionsDataASideAccessPointGateway[];
    interfaces: outputs.GetFabricConnectionsDataASideAccessPointInterface[];
    linkProtocols: outputs.GetFabricConnectionsDataASideAccessPointLinkProtocol[];
    locations: outputs.GetFabricConnectionsDataASideAccessPointLocation[];
    networks: outputs.GetFabricConnectionsDataASideAccessPointNetwork[];
    peeringType: string;
    ports: outputs.GetFabricConnectionsDataASideAccessPointPort[];
    profiles: outputs.GetFabricConnectionsDataASideAccessPointProfile[];
    providerConnectionId: string;
    routers: outputs.GetFabricConnectionsDataASideAccessPointRouter[];
    sellerRegion: string;
    type: string;
    virtualDevices: outputs.GetFabricConnectionsDataASideAccessPointVirtualDevice[];
}

export interface GetFabricConnectionsDataASideAccessPointAccount {
    accountName: string;
    accountNumber: number;
    globalCustId: string;
    globalOrgId: string;
    globalOrganizationName: string;
    orgId: number;
    organizationName: string;
    ucmId: string;
}

export interface GetFabricConnectionsDataASideAccessPointGateway {
    href: string;
    uuid: string;
}

export interface GetFabricConnectionsDataASideAccessPointInterface {
    id: number;
    type: string;
    uuid: string;
}

export interface GetFabricConnectionsDataASideAccessPointLinkProtocol {
    type: string;
    vlanCTag: number;
    vlanSTag: number;
    vlanTag: number;
}

export interface GetFabricConnectionsDataASideAccessPointLocation {
    ibx: string;
    metroCode: string;
    metroName: string;
    region: string;
}

export interface GetFabricConnectionsDataASideAccessPointNetwork {
    href: string;
    uuid: string;
}

export interface GetFabricConnectionsDataASideAccessPointPort {
    href: string;
    name: string;
    redundancies: outputs.GetFabricConnectionsDataASideAccessPointPortRedundancy[];
    uuid: string;
}

export interface GetFabricConnectionsDataASideAccessPointPortRedundancy {
    enabled: boolean;
    group: string;
    priority: string;
}

export interface GetFabricConnectionsDataASideAccessPointProfile {
    accessPointTypeConfigs: outputs.GetFabricConnectionsDataASideAccessPointProfileAccessPointTypeConfig[];
    description: string;
    href: string;
    name: string;
    type: string;
    uuid: string;
}

export interface GetFabricConnectionsDataASideAccessPointProfileAccessPointTypeConfig {
    type: string;
    uuid: string;
}

export interface GetFabricConnectionsDataASideAccessPointRouter {
    href: string;
    uuid: string;
}

export interface GetFabricConnectionsDataASideAccessPointVirtualDevice {
    href: string;
    name: string;
    type: string;
    uuid: string;
}

export interface GetFabricConnectionsDataASideAdditionalInfo {
    key: string;
    value: string;
}

export interface GetFabricConnectionsDataASideServiceToken {
    description: string;
    href: string;
    type: string;
    uuid: string;
}

export interface GetFabricConnectionsDataAccount {
    accountName: string;
    accountNumber: number;
    globalCustId: string;
    globalOrgId: string;
    globalOrganizationName: string;
    orgId: number;
    organizationName: string;
    ucmId: string;
}

export interface GetFabricConnectionsDataChangeLog {
    createdBy: string;
    createdByEmail: string;
    createdByFullName: string;
    createdDateTime: string;
    deletedBy: string;
    deletedByEmail: string;
    deletedByFullName: string;
    deletedDateTime: string;
    updatedBy: string;
    updatedByEmail: string;
    updatedByFullName: string;
    updatedDateTime: string;
}

export interface GetFabricConnectionsDataNotification {
    emails: string[];
    sendInterval: string;
    type: string;
}

export interface GetFabricConnectionsDataOperation {
    equinixStatus: string;
    errors: outputs.GetFabricConnectionsDataOperationError[];
    providerStatus: string;
}

export interface GetFabricConnectionsDataOperationError {
    additionalInfos: outputs.GetFabricConnectionsDataOperationErrorAdditionalInfo[];
    correlationId: string;
    details: string;
    errorCode: string;
    errorMessage: string;
    help: string;
}

export interface GetFabricConnectionsDataOperationErrorAdditionalInfo {
    property: string;
    reason: string;
}

export interface GetFabricConnectionsDataOrder {
    billingTier: string;
    orderId: string;
    orderNumber: string;
    purchaseOrderNumber: string;
}

export interface GetFabricConnectionsDataProject {
    href: string;
    projectId: string;
}

export interface GetFabricConnectionsDataRedundancy {
    group: string;
    priority: string;
}

export interface GetFabricConnectionsDataZSide {
    accessPoints: outputs.GetFabricConnectionsDataZSideAccessPoint[];
    additionalInfos: outputs.GetFabricConnectionsDataZSideAdditionalInfo[];
    serviceTokens: outputs.GetFabricConnectionsDataZSideServiceToken[];
}

export interface GetFabricConnectionsDataZSideAccessPoint {
    accounts: outputs.GetFabricConnectionsDataZSideAccessPointAccount[];
    authenticationKey: string;
    gateways: outputs.GetFabricConnectionsDataZSideAccessPointGateway[];
    interfaces: outputs.GetFabricConnectionsDataZSideAccessPointInterface[];
    linkProtocols: outputs.GetFabricConnectionsDataZSideAccessPointLinkProtocol[];
    locations: outputs.GetFabricConnectionsDataZSideAccessPointLocation[];
    networks: outputs.GetFabricConnectionsDataZSideAccessPointNetwork[];
    peeringType: string;
    ports: outputs.GetFabricConnectionsDataZSideAccessPointPort[];
    profiles: outputs.GetFabricConnectionsDataZSideAccessPointProfile[];
    providerConnectionId: string;
    routers: outputs.GetFabricConnectionsDataZSideAccessPointRouter[];
    sellerRegion: string;
    type: string;
    virtualDevices: outputs.GetFabricConnectionsDataZSideAccessPointVirtualDevice[];
}

export interface GetFabricConnectionsDataZSideAccessPointAccount {
    accountName: string;
    accountNumber: number;
    globalCustId: string;
    globalOrgId: string;
    globalOrganizationName: string;
    orgId: number;
    organizationName: string;
    ucmId: string;
}

export interface GetFabricConnectionsDataZSideAccessPointGateway {
    href: string;
    uuid: string;
}

export interface GetFabricConnectionsDataZSideAccessPointInterface {
    id: number;
    type: string;
    uuid: string;
}

export interface GetFabricConnectionsDataZSideAccessPointLinkProtocol {
    type: string;
    vlanCTag: number;
    vlanSTag: number;
    vlanTag: number;
}

export interface GetFabricConnectionsDataZSideAccessPointLocation {
    ibx: string;
    metroCode: string;
    metroName: string;
    region: string;
}

export interface GetFabricConnectionsDataZSideAccessPointNetwork {
    href: string;
    uuid: string;
}

export interface GetFabricConnectionsDataZSideAccessPointPort {
    href: string;
    name: string;
    redundancies: outputs.GetFabricConnectionsDataZSideAccessPointPortRedundancy[];
    uuid: string;
}

export interface GetFabricConnectionsDataZSideAccessPointPortRedundancy {
    enabled: boolean;
    group: string;
    priority: string;
}

export interface GetFabricConnectionsDataZSideAccessPointProfile {
    accessPointTypeConfigs: outputs.GetFabricConnectionsDataZSideAccessPointProfileAccessPointTypeConfig[];
    description: string;
    href: string;
    name: string;
    type: string;
    uuid: string;
}

export interface GetFabricConnectionsDataZSideAccessPointProfileAccessPointTypeConfig {
    type: string;
    uuid: string;
}

export interface GetFabricConnectionsDataZSideAccessPointRouter {
    href: string;
    uuid: string;
}

export interface GetFabricConnectionsDataZSideAccessPointVirtualDevice {
    href: string;
    name: string;
    type: string;
    uuid: string;
}

export interface GetFabricConnectionsDataZSideAdditionalInfo {
    key: string;
    value: string;
}

export interface GetFabricConnectionsDataZSideServiceToken {
    description: string;
    href: string;
    type: string;
    uuid: string;
}

export interface GetFabricConnectionsFilter {
    /**
     * Optional custom id parameter to assign this filter to an inner AND or OR group. Group id must be prefixed with AND_ or OR_. Ensure intended grouped elements have the same given id. Ungrouped filters will be placed in the filter list group by themselves.
     */
    group?: string;
    /**
     * Operators to use on your filtered field with the values given. One of [ =, !=, >, >=, <, <=, BETWEEN, NOT BETWEEN, LIKE, NOT LIKE, IN, NOT IN, IS NOT NULL, IS NULL]
     */
    operator: string;
    /**
     * Possible field names to use on filters. One of [/isRemote /name /uuid /type /geoScope /account/orgId /aSide/accessPoint/account/accountName /aSide/accessPoint/account/accountNumber /aSide/accessPoint/router/uuid /aSide/accessPoint/linkProtocol/vlanCTag /aSide/accessPoint/linkProtocol/vlanSTag /aSide/accessPoint/linkProtocol/vlanTagMin /aSide/accessPoint/linkProtocol/vlanTagMax /aSide/accessPoint/location/metroCode /aSide/accessPoint/location/metroName /aSide/accessPoint/name /aSide/accessPoint/port/uuid /aSide/accessPoint/port/name /aSide/accessPoint/type /aSide/accessPoint/virtualDevice/name /aSide/accessPoint/virtualDevice/uuid /aSide/serviceToken/uuid /change/status /operation/equinixStatus /operation/providerStatus /project/projectId /redundancy/group /redundancy/priority /zSide/accessPoint/account/accountName /zSide/accessPoint/authenticationKey /zSide/accessPoint/linkProtocol/vlanCTag /zSide/accessPoint/linkProtocol/vlanSTag /zSide/accessPoint/linkProtocol/vlanTagMin /zSide/accessPoint/linkProtocol/vlanTagMax /zSide/accessPoint/location/metroCode /zSide/accessPoint/location/metroName /zSide/accessPoint/name /zSide/accessPoint/port/uuid /zSide/accessPoint/network/uuid /zSide/accessPoint/port/name /zSide/accessPoint/profile/uuid /zSide/accessPoint/type /zSide/accessPoint/virtualDevice/name /zSide/accessPoint/virtualDevice/uuid /zSide/serviceToken/uuid /zSide/internetAccess/uuid *]
     */
    property: string;
    /**
     * The values that you want to apply the property+operator combination to in order to filter your data search
     */
    values: string[];
}

export interface GetFabricConnectionsPagination {
    /**
     * Number of elements to be requested per page. Number must be between 1 and 100. Default is 20
     */
    limit?: number;
    /**
     * The page offset for the pagination request. Index of the first element. Default is 0.
     */
    offset?: number;
}

export interface GetFabricConnectionsSort {
    /**
     * The sorting direction. Can be one of: [DESC, ASC], Defaults to DESC
     */
    direction?: string;
    /**
     * The property name to use in sorting. One of [/name /direction /aSide/accessPoint/name /aSide/accessPoint/type /aSide/accessPoint/account/accountName /aSide/accessPoint/location/metroName /aSide/accessPoint/location/metroCode /aSide/accessPoint/linkProtocol/vlanCTag /aSide/accessPoint/linkProtocol/vlanSTag /zSide/accessPoint/name /zSide/accessPoint/type /zSide/accessPoint/account/accountName /zSide/accessPoint/location/metroName /zSide/accessPoint/location/metroCode /zSide/accessPoint/linkProtocol/vlanCTag /zSide/accessPoint/linkProtocol/vlanSTag /zSide/accessPoint/authenticationKey /bandwidth /geoScope /uuid /changeLog/createdDateTime /changeLog/updatedDateTime /operation/equinixStatus /operation/providerStatus /redundancy/priority]. Defaults to /changeLog/updatedDateTime
     */
    property?: string;
}

export interface GetFabricNetworkChange {
    href: string;
    type: string;
    uuid: string;
}

export interface GetFabricNetworkChangeLog {
    createdBy: string;
    createdByEmail: string;
    createdByFullName: string;
    createdDateTime: string;
    deletedBy: string;
    deletedByEmail: string;
    deletedByFullName: string;
    deletedDateTime: string;
    updatedBy: string;
    updatedByEmail: string;
    updatedByFullName: string;
    updatedDateTime: string;
}

export interface GetFabricNetworkLocation {
    ibx: string;
    metroCode: string;
    metroName: string;
    region: string;
}

export interface GetFabricNetworkNotification {
    emails: string[];
    sendInterval: string;
    type: string;
}

export interface GetFabricNetworkOperation {
    equinixStatus: string;
}

export interface GetFabricNetworkProject {
    projectId: string;
}

export interface GetFabricNetworksData {
    changeLogs: outputs.GetFabricNetworksDataChangeLog[];
    changes: outputs.GetFabricNetworksDataChange[];
    connectionsCount: number;
    href: string;
    locations: outputs.GetFabricNetworksDataLocation[];
    name: string;
    notifications: outputs.GetFabricNetworksDataNotification[];
    operations: outputs.GetFabricNetworksDataOperation[];
    projects: outputs.GetFabricNetworksDataProject[];
    scope: string;
    state: string;
    type: string;
    uuid: string;
}

export interface GetFabricNetworksDataChange {
    href: string;
    type: string;
    uuid: string;
}

export interface GetFabricNetworksDataChangeLog {
    createdBy: string;
    createdByEmail: string;
    createdByFullName: string;
    createdDateTime: string;
    deletedBy: string;
    deletedByEmail: string;
    deletedByFullName: string;
    deletedDateTime: string;
    updatedBy: string;
    updatedByEmail: string;
    updatedByFullName: string;
    updatedDateTime: string;
}

export interface GetFabricNetworksDataLocation {
    ibx: string;
    metroCode: string;
    metroName: string;
    region: string;
}

export interface GetFabricNetworksDataNotification {
    emails: string[];
    sendInterval: string;
    type: string;
}

export interface GetFabricNetworksDataOperation {
    equinixStatus: string;
}

export interface GetFabricNetworksDataProject {
    projectId: string;
}

export interface GetFabricNetworksFilter {
    /**
     * Optional custom id parameter to assign this filter to an inner AND or OR group. Group id must be prefixed with AND_ or OR_. Ensure intended grouped elements have the same given id. Ungrouped filters will be placed in the filter list group by themselves.
     */
    group?: string;
    /**
     * Operators to use on your filtered field with the values given. One of [ =, !=, >, >=, <, <=, BETWEEN, NOT BETWEEN, LIKE, NOT LIKE, ILIKE, NOT ILIKE, IN, NOT IN]
     */
    operator: string;
    /**
     * Possible field names to use on filters. One of [/name /uuid /scope /type /operation/equinixStatus /location/region /project/projectId /account/globalCustId /account/orgId /deletedDate /_*]
     */
    property: string;
    /**
     * The values that you want to apply the property+operator combination to in order to filter your data search
     */
    values: string[];
}

export interface GetFabricNetworksPagination {
    /**
     * Number of elements to be requested per page. Number must be between 1 and 100. Default is 20
     */
    limit?: number;
    /**
     * The page offset for the pagination request. Index of the first element. Default is 0.
     */
    offset?: number;
}

export interface GetFabricNetworksSort {
    /**
     * The sorting direction. Can be one of: [DESC, ASC], Defaults to DESC
     */
    direction?: string;
    /**
     * The property name to use in sorting. One of [/name /uuid /scope /operation/equinixStatus /location/region /changeLog/createdDateTime /changeLog/updatedDateTime]. Defaults to /changeLog/updatedDateTime
     */
    property?: string;
}

export interface GetFabricPortAccount {
    accountName: string;
    accountNumber: number;
    globalCustId: string;
    globalOrgId: string;
    globalOrganizationName: string;
    orgId: number;
    organizationName: string;
    ucmId: string;
}

export interface GetFabricPortChangeLog {
    createdBy: string;
    createdByEmail: string;
    createdByFullName: string;
    createdDateTime: string;
    deletedBy: string;
    deletedByEmail: string;
    deletedByFullName: string;
    deletedDateTime: string;
    updatedBy: string;
    updatedByEmail: string;
    updatedByFullName: string;
    updatedDateTime: string;
}

export interface GetFabricPortDevice {
    name: string;
    redundancies: outputs.GetFabricPortDeviceRedundancy[];
}

export interface GetFabricPortDeviceRedundancy {
    enabled: boolean;
    group: string;
    priority: string;
}

export interface GetFabricPortEncapsulation {
    tagProtocolId: string;
    type: string;
}

export interface GetFabricPortLocation {
    ibx: string;
    metroCode: string;
    metroName: string;
    region: string;
}

export interface GetFabricPortOperation {
    connectionCount: number;
    opStatusChangedAt: string;
    operationalStatus: string;
}

export interface GetFabricPortRedundancy {
    enabled: boolean;
    group: string;
    priority: string;
}

export interface GetFabricPortsData {
    accounts: outputs.GetFabricPortsDataAccount[];
    availableBandwidth: number;
    bandwidth: number;
    changeLogs: outputs.GetFabricPortsDataChangeLog[];
    description: string;
    devices: outputs.GetFabricPortsDataDevice[];
    encapsulations: outputs.GetFabricPortsDataEncapsulation[];
    href: string;
    lagEnabled: boolean;
    locations: outputs.GetFabricPortsDataLocation[];
    name: string;
    operations: outputs.GetFabricPortsDataOperation[];
    redundancies: outputs.GetFabricPortsDataRedundancy[];
    serviceType: string;
    state: string;
    type: string;
    usedBandwidth: number;
    uuid: string;
}

export interface GetFabricPortsDataAccount {
    accountName: string;
    accountNumber: number;
    globalCustId: string;
    globalOrgId: string;
    globalOrganizationName: string;
    orgId: number;
    organizationName: string;
    ucmId: string;
}

export interface GetFabricPortsDataChangeLog {
    createdBy: string;
    createdByEmail: string;
    createdByFullName: string;
    createdDateTime: string;
    deletedBy: string;
    deletedByEmail: string;
    deletedByFullName: string;
    deletedDateTime: string;
    updatedBy: string;
    updatedByEmail: string;
    updatedByFullName: string;
    updatedDateTime: string;
}

export interface GetFabricPortsDataDevice {
    name: string;
    redundancies: outputs.GetFabricPortsDataDeviceRedundancy[];
}

export interface GetFabricPortsDataDeviceRedundancy {
    enabled: boolean;
    group: string;
    priority: string;
}

export interface GetFabricPortsDataEncapsulation {
    tagProtocolId: string;
    type: string;
}

export interface GetFabricPortsDataLocation {
    ibx: string;
    metroCode: string;
    metroName: string;
    region: string;
}

export interface GetFabricPortsDataOperation {
    connectionCount: number;
    opStatusChangedAt: string;
    operationalStatus: string;
}

export interface GetFabricPortsDataRedundancy {
    enabled: boolean;
    group: string;
    priority: string;
}

export interface GetFabricPortsFilters {
    /**
     * Query Parameter to Get Ports By Name
     */
    name: string;
}

export interface GetFabricRoutingProtocolBfd {
    enabled: boolean;
    interval: string;
}

export interface GetFabricRoutingProtocolBgpIpv4 {
    customerPeerIp: string;
    enabled: boolean;
    equinixPeerIp: string;
}

export interface GetFabricRoutingProtocolBgpIpv6 {
    customerPeerIp: string;
    enabled: boolean;
    equinixPeerIp: string;
}

export interface GetFabricRoutingProtocolChange {
    href: string;
    type: string;
    uuid: string;
}

export interface GetFabricRoutingProtocolChangeLog {
    createdBy: string;
    createdByEmail: string;
    createdByFullName: string;
    createdDateTime: string;
    deletedBy: string;
    deletedByEmail: string;
    deletedByFullName: string;
    deletedDateTime: string;
    updatedBy: string;
    updatedByEmail: string;
    updatedByFullName: string;
    updatedDateTime: string;
}

export interface GetFabricRoutingProtocolDirectIpv4 {
    equinixIfaceIp: string;
}

export interface GetFabricRoutingProtocolDirectIpv6 {
    equinixIfaceIp: string;
}

export interface GetFabricRoutingProtocolOperation {
    errors: outputs.GetFabricRoutingProtocolOperationError[];
}

export interface GetFabricRoutingProtocolOperationError {
    additionalInfos: outputs.GetFabricRoutingProtocolOperationErrorAdditionalInfo[];
    correlationId: string;
    details: string;
    errorCode: string;
    errorMessage: string;
    help: string;
}

export interface GetFabricRoutingProtocolOperationErrorAdditionalInfo {
    property: string;
    reason: string;
}

export interface GetFabricServiceProfileAccessPointTypeConfig {
    allowBandwidthAutoApproval: boolean;
    allowBandwidthUpgrade: boolean;
    allowCustomBandwidth: boolean;
    allowRemoteConnections: boolean;
    apiConfigs: outputs.GetFabricServiceProfileAccessPointTypeConfigApiConfig[];
    authenticationKeys: outputs.GetFabricServiceProfileAccessPointTypeConfigAuthenticationKey[];
    bandwidthAlertThreshold: number;
    connectionLabel: string;
    connectionRedundancyRequired: boolean;
    enableAutoGenerateServiceKey: boolean;
    linkProtocolConfigs: outputs.GetFabricServiceProfileAccessPointTypeConfigLinkProtocolConfig[];
    supportedBandwidths: number[];
    type: string;
    uuid: string;
}

export interface GetFabricServiceProfileAccessPointTypeConfigApiConfig {
    allowOverSubscription: boolean;
    apiAvailable: boolean;
    bandwidthFromApi: boolean;
    equinixManagedPort: boolean;
    equinixManagedVlan: boolean;
    integrationId: string;
    overSubscriptionLimit: number;
}

export interface GetFabricServiceProfileAccessPointTypeConfigAuthenticationKey {
    description: string;
    label: string;
    required: boolean;
}

export interface GetFabricServiceProfileAccessPointTypeConfigLinkProtocolConfig {
    encapsulation: string;
    encapsulationStrategy: string;
    reuseVlanSTag: boolean;
}

export interface GetFabricServiceProfileAccount {
    accountName: string;
    accountNumber: number;
    globalCustId: string;
    globalOrgId: string;
    globalOrganizationName: string;
    orgId: number;
    organizationName: string;
    ucmId: string;
}

export interface GetFabricServiceProfileChangeLog {
    createdBy: string;
    createdByEmail: string;
    createdByFullName: string;
    createdDateTime: string;
    deletedBy: string;
    deletedByEmail: string;
    deletedByFullName: string;
    deletedDateTime: string;
    updatedBy: string;
    updatedByEmail: string;
    updatedByFullName: string;
    updatedDateTime: string;
}

export interface GetFabricServiceProfileCustomField {
    captureInEmail: boolean;
    dataType: string;
    description: string;
    label: string;
    options: string[];
    required: boolean;
}

export interface GetFabricServiceProfileMarketingInfo {
    logo: string;
    processSteps: outputs.GetFabricServiceProfileMarketingInfoProcessStep[];
    promotion: boolean;
}

export interface GetFabricServiceProfileMarketingInfoProcessStep {
    description: string;
    subTitle: string;
    title: string;
}

export interface GetFabricServiceProfileMetro {
    code: string;
    displayName: string;
    ibxs: string[];
    inTrail: boolean;
    name: string;
    sellerRegions: {[key: string]: string};
}

export interface GetFabricServiceProfileNotification {
    emails: string[];
    sendInterval: string;
    type: string;
}

export interface GetFabricServiceProfilePort {
    crossConnectId: string;
    locations: outputs.GetFabricServiceProfilePortLocation[];
    sellerRegion: string;
    sellerRegionDescription: string;
    type: string;
    uuid: string;
}

export interface GetFabricServiceProfilePortLocation {
    ibx: string;
    metroCode: string;
    metroName: string;
    region: string;
}

export interface GetFabricServiceProfileProject {
    href: string;
    projectId: string;
}

export interface GetFabricServiceProfileVirtualDevice {
    interfaceUuid: string;
    locations: outputs.GetFabricServiceProfileVirtualDeviceLocation[];
    type: string;
    uuid: string;
}

export interface GetFabricServiceProfileVirtualDeviceLocation {
    ibx: string;
    metroCode: string;
    metroName: string;
    region: string;
}

export interface GetFabricServiceProfilesData {
    accessPointTypeConfigs: outputs.GetFabricServiceProfilesDataAccessPointTypeConfig[];
    accounts: outputs.GetFabricServiceProfilesDataAccount[];
    allowedEmails: string[];
    changeLogs: outputs.GetFabricServiceProfilesDataChangeLog[];
    customFields: outputs.GetFabricServiceProfilesDataCustomField[];
    description: string;
    href: string;
    marketingInfos: outputs.GetFabricServiceProfilesDataMarketingInfo[];
    metros: outputs.GetFabricServiceProfilesDataMetro[];
    name: string;
    notifications: outputs.GetFabricServiceProfilesDataNotification[];
    ports: outputs.GetFabricServiceProfilesDataPort[];
    projects: outputs.GetFabricServiceProfilesDataProject[];
    selfProfile: boolean;
    state: string;
    tags: string[];
    type: string;
    uuid: string;
    viewPoint: string;
    virtualDevices: outputs.GetFabricServiceProfilesDataVirtualDevice[];
    visibility: string;
}

export interface GetFabricServiceProfilesDataAccessPointTypeConfig {
    allowBandwidthAutoApproval: boolean;
    allowBandwidthUpgrade: boolean;
    allowCustomBandwidth: boolean;
    allowRemoteConnections: boolean;
    apiConfigs: outputs.GetFabricServiceProfilesDataAccessPointTypeConfigApiConfig[];
    authenticationKeys: outputs.GetFabricServiceProfilesDataAccessPointTypeConfigAuthenticationKey[];
    bandwidthAlertThreshold: number;
    connectionLabel: string;
    connectionRedundancyRequired: boolean;
    enableAutoGenerateServiceKey: boolean;
    linkProtocolConfigs: outputs.GetFabricServiceProfilesDataAccessPointTypeConfigLinkProtocolConfig[];
    supportedBandwidths: number[];
    type: string;
    uuid: string;
}

export interface GetFabricServiceProfilesDataAccessPointTypeConfigApiConfig {
    allowOverSubscription: boolean;
    apiAvailable: boolean;
    bandwidthFromApi: boolean;
    equinixManagedPort: boolean;
    equinixManagedVlan: boolean;
    integrationId: string;
    overSubscriptionLimit: number;
}

export interface GetFabricServiceProfilesDataAccessPointTypeConfigAuthenticationKey {
    description: string;
    label: string;
    required: boolean;
}

export interface GetFabricServiceProfilesDataAccessPointTypeConfigLinkProtocolConfig {
    encapsulation: string;
    encapsulationStrategy: string;
    reuseVlanSTag: boolean;
}

export interface GetFabricServiceProfilesDataAccount {
    accountName: string;
    accountNumber: number;
    globalCustId: string;
    globalOrgId: string;
    globalOrganizationName: string;
    orgId: number;
    organizationName: string;
    ucmId: string;
}

export interface GetFabricServiceProfilesDataChangeLog {
    createdBy: string;
    createdByEmail: string;
    createdByFullName: string;
    createdDateTime: string;
    deletedBy: string;
    deletedByEmail: string;
    deletedByFullName: string;
    deletedDateTime: string;
    updatedBy: string;
    updatedByEmail: string;
    updatedByFullName: string;
    updatedDateTime: string;
}

export interface GetFabricServiceProfilesDataCustomField {
    captureInEmail: boolean;
    dataType: string;
    description: string;
    label: string;
    options: string[];
    required: boolean;
}

export interface GetFabricServiceProfilesDataMarketingInfo {
    logo: string;
    processSteps: outputs.GetFabricServiceProfilesDataMarketingInfoProcessStep[];
    promotion: boolean;
}

export interface GetFabricServiceProfilesDataMarketingInfoProcessStep {
    description: string;
    subTitle: string;
    title: string;
}

export interface GetFabricServiceProfilesDataMetro {
    code: string;
    displayName: string;
    ibxs: string[];
    inTrail: boolean;
    name: string;
    sellerRegions: {[key: string]: string};
}

export interface GetFabricServiceProfilesDataNotification {
    emails: string[];
    sendInterval: string;
    type: string;
}

export interface GetFabricServiceProfilesDataPort {
    crossConnectId: string;
    locations: outputs.GetFabricServiceProfilesDataPortLocation[];
    sellerRegion: string;
    sellerRegionDescription: string;
    type: string;
    uuid: string;
}

export interface GetFabricServiceProfilesDataPortLocation {
    ibx: string;
    metroCode: string;
    metroName: string;
    region: string;
}

export interface GetFabricServiceProfilesDataProject {
    href: string;
    projectId: string;
}

export interface GetFabricServiceProfilesDataVirtualDevice {
    interfaceUuid: string;
    locations: outputs.GetFabricServiceProfilesDataVirtualDeviceLocation[];
    type: string;
    uuid: string;
}

export interface GetFabricServiceProfilesDataVirtualDeviceLocation {
    ibx: string;
    metroCode: string;
    metroName: string;
    region: string;
}

export interface GetFabricServiceProfilesFilter {
    /**
     * Operators to use on your filtered field with the values given. One of [=]
     */
    operator: string;
    /**
     * Property to apply operator and values to. One of [/name /uuid /state /metros/code /visibility /type /project/projectId]
     */
    property: string;
    /**
     * The values that you want to apply the property+operator combination to in order to filter your data search
     */
    values: string[];
}

export interface GetFabricServiceProfilesPagination {
    /**
     * Number of elements to be requested per page. Number must be between 1 and 100. Default is 20
     */
    limit?: number;
    /**
     * The page offset for the pagination request. Index of the first element. Default is 0.
     */
    offset?: number;
}

export interface GetFabricServiceProfilesSort {
    /**
     * The sorting direction. Can be one of: [DESC, ASC], Defaults to DESC
     */
    direction?: string;
    /**
     * The property name to use in sorting. One of [/name /uuid /state /location/metroCode /location/metroName /package/code /changeLog/createdDateTime /changeLog/updatedDateTime]. Defaults to /changeLog/updatedDateTime
     */
    property?: string;
}

export interface GetMetalConnectionPort {
    id: string;
    linkStatus: string;
    name: string;
    role: string;
    speed: number;
    status: string;
    virtualCircuitIds: string[];
}

export interface GetMetalConnectionServiceToken {
    expiresAt: string;
    id: string;
    maxAllowedSpeed: string;
    role: string;
    state: string;
    type: string;
}

export interface GetMetalDeviceBgpNeighborsBgpNeighbor {
    addressFamily: number;
    customerAs: number;
    customerIp: string;
    md5Enabled: boolean;
    md5Password: string;
    multihop: boolean;
    peerAs: number;
    peerIps: string[];
    routesIns: outputs.GetMetalDeviceBgpNeighborsBgpNeighborRoutesIn[];
    routesOuts: outputs.GetMetalDeviceBgpNeighborsBgpNeighborRoutesOut[];
}

export interface GetMetalDeviceBgpNeighborsBgpNeighborRoutesIn {
    exact: boolean;
    route: string;
}

export interface GetMetalDeviceBgpNeighborsBgpNeighborRoutesOut {
    exact: boolean;
    route: string;
}

export interface GetMetalDeviceNetwork {
    address: string;
    cidr: number;
    family: number;
    gateway: string;
    public: boolean;
}

export interface GetMetalDevicePort {
    bonded: boolean;
    id: string;
    mac: string;
    name: string;
    type: string;
}

export interface GetMetalDevicesDevice {
    accessPrivateIpv4: string;
    accessPublicIpv4: string;
    accessPublicIpv6: string;
    alwaysPxe: boolean;
    billingCycle: string;
    description: string;
    deviceId: string;
    facility: string;
    hardwareReservationId: string;
    hostname: string;
    ipxeScriptUrl: string;
    metro: string;
    networkType: string;
    networks: outputs.GetMetalDevicesDeviceNetwork[];
    operatingSystem: string;
    plan: string;
    ports: outputs.GetMetalDevicesDevicePort[];
    projectId: string;
    rootPassword: string;
    sosHostname: string;
    sshKeyIds: string[];
    state: string;
    storage: string;
    tags: string[];
}

export interface GetMetalDevicesDeviceNetwork {
    address: string;
    cidr: number;
    family: number;
    gateway: string;
    public: boolean;
}

export interface GetMetalDevicesDevicePort {
    bonded: boolean;
    id: string;
    mac: string;
    name: string;
    type: string;
}

export interface GetMetalDevicesFilter {
    /**
     * If is set to true, the values are joined with an AND, and the requests returns only the results that match all specified values
     */
    all?: boolean;
    /**
     * The attribute used to filter. Filter attributes are case-sensitive
     */
    attribute: string;
    /**
     * The type of comparison to apply. One of: in (default), re, substring, less_than, less_than_or_equal, greater_than, greater_than_or_equal
     */
    matchBy?: string;
    /**
     * The filter values. Filter values are case-sensitive. If you specify multiple values for a filter, the values are joined with an OR by default, and the request returns all results that match any of the specified values
     */
    values: string[];
}

export interface GetMetalDevicesSort {
    /**
     * The attribute used to sort the results. Sort attributes are case-sensitive
     */
    attribute: string;
    /**
     * Sort results in ascending or descending order. Strings are sorted in alphabetical order. One of: asc, desc
     */
    direction?: string;
}

export interface GetMetalFacilityCapacity {
    /**
     * Plan which has to be available in selected location
     */
    plan: string;
    quantity?: number;
}

export interface GetMetalMetroCapacity {
    /**
     * Plan which has to be available in selected location
     */
    plan: string;
    quantity?: number;
}

export interface GetMetalOrganizationAddress {
    address: string;
    city: string;
    country: string;
    state: string;
    zipCode: string;
}

export interface GetMetalPlansFilter {
    /**
     * If is set to true, the values are joined with an AND, and the requests returns only the results that match all specified values
     */
    all?: boolean;
    /**
     * The attribute used to filter. Filter attributes are case-sensitive
     */
    attribute: string;
    /**
     * The type of comparison to apply. One of: in (default), re, substring, less_than, less_than_or_equal, greater_than, greater_than_or_equal
     */
    matchBy?: string;
    /**
     * The filter values. Filter values are case-sensitive. If you specify multiple values for a filter, the values are joined with an OR by default, and the request returns all results that match any of the specified values
     */
    values: string[];
}

export interface GetMetalPlansPlan {
    availableInMetros: string[];
    availableIns: string[];
    class: string;
    deploymentTypes: string[];
    description: string;
    id: string;
    legacy: boolean;
    line: string;
    name: string;
    pricingHour: number;
    pricingMonth: number;
    slug: string;
}

export interface GetMetalPlansSort {
    /**
     * The attribute used to sort the results. Sort attributes are case-sensitive
     */
    attribute: string;
    /**
     * Sort results in ascending or descending order. Strings are sorted in alphabetical order. One of: asc, desc
     */
    direction?: string;
}

export interface GetMetalProjectBgpConfig {
    asn: number;
    deploymentType: string;
    maxPrefix: number;
    md5: string;
    status: string;
}

export interface GetMetalSpotMarketRequestTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    update?: string;
}

export interface GetNetworkDeviceClusterDetail {
    clusterId: string;
    clusterName: string;
    node0s: outputs.GetNetworkDeviceClusterDetailNode0[];
    node1s: outputs.GetNetworkDeviceClusterDetailNode1[];
    numOfNodes: number;
}

export interface GetNetworkDeviceClusterDetailNode0 {
    licenseFileId: string;
    licenseToken: string;
    name: string;
    uuid: string;
    vendorConfigurations: outputs.GetNetworkDeviceClusterDetailNode0VendorConfiguration[];
}

export interface GetNetworkDeviceClusterDetailNode0VendorConfiguration {
    activationKey: string;
    adminPassword: string;
    controller1: string;
    controllerFqdn: string;
    hostname: string;
    licenseId: string;
    licenseKey: string;
    panoramaAuthKey: string;
    panoramaIpAddress: string;
    privateAddress: string;
    privateCidrMask: string;
    privateGateway: string;
    rootPassword: string;
}

export interface GetNetworkDeviceClusterDetailNode1 {
    licenseFileId: string;
    licenseToken: string;
    name: string;
    uuid: string;
    vendorConfigurations: outputs.GetNetworkDeviceClusterDetailNode1VendorConfiguration[];
}

export interface GetNetworkDeviceClusterDetailNode1VendorConfiguration {
    activationKey: string;
    adminPassword: string;
    controller1: string;
    controllerFqdn: string;
    hostname: string;
    licenseId: string;
    licenseKey: string;
    panoramaAuthKey: string;
    panoramaIpAddress: string;
    privateAddress: string;
    privateCidrMask: string;
    privateGateway: string;
    rootPassword: string;
}

export interface GetNetworkDeviceInterface {
    assignedType: string;
    id: number;
    ipAddress: string;
    macAddress: string;
    name: string;
    operationalStatus: string;
    status: string;
    type: string;
}

export interface GetNetworkDeviceSecondaryDevice {
    accountNumber: string;
    aclTemplateId: string;
    additionalBandwidth: number;
    asn: number;
    cloudInitFileId: string;
    hostname: string;
    ibx: string;
    interfaces: outputs.GetNetworkDeviceSecondaryDeviceInterface[];
    licenseFile: string;
    licenseFileId: string;
    licenseStatus: string;
    licenseToken: string;
    metroCode: string;
    mgmtAclTemplateUuid: string;
    name: string;
    notifications: string[];
    projectId: string;
    redundancyType: string;
    redundantId: string;
    region: string;
    sshIpAddress: string;
    sshIpFqdn: string;
    sshKeys: outputs.GetNetworkDeviceSecondaryDeviceSshKey[];
    status: string;
    uuid: string;
    vendorConfiguration: {[key: string]: string};
    wanInterfaceId: string;
    zoneCode: string;
}

export interface GetNetworkDeviceSecondaryDeviceInterface {
    assignedType: string;
    id: number;
    ipAddress: string;
    macAddress: string;
    name: string;
    operationalStatus: string;
    status: string;
    type: string;
}

export interface GetNetworkDeviceSecondaryDeviceSshKey {
    keyName: string;
    username: string;
}

export interface GetNetworkDeviceSshKey {
    keyName: string;
    username: string;
}

export interface MetalConnectionPort {
    id: string;
    linkStatus: string;
    name: string;
    role: string;
    speed: number;
    status: string;
    virtualCircuitIds: string[];
}

export interface MetalConnectionServiceToken {
    expiresAt: string;
    id: string;
    maxAllowedSpeed: string;
    role: string;
    state: string;
    type: string;
}

export interface MetalDeviceBehavior {
    /**
     * List of attributes that are allowed to change without recreating the instance. Supported attributes: `custom_data`, `user_data`
     */
    allowChanges?: string[];
}

export interface MetalDeviceIpAddress {
    /**
     * CIDR suffix for IP block assigned to this device
     */
    cidr?: number;
    /**
     * IDs of reservations to pick the blocks from
     */
    reservationIds?: string[];
    /**
     * one of public_ipv4,private_ipv4,public_ipv6
     */
    type: string;
}

export interface MetalDeviceNetwork {
    address: string;
    cidr: number;
    family: number;
    gateway: string;
    public: boolean;
}

export interface MetalDevicePort {
    bonded: boolean;
    id: string;
    mac: string;
    name: string;
    type: string;
}

export interface MetalDeviceReinstall {
    /**
     * Whether the OS disk should be filled with `00h` bytes before reinstall
     */
    deprovisionFast?: boolean;
    /**
     * Whether the device should be reinstalled instead of destroyed
     */
    enabled?: boolean;
    /**
     * Whether the non-OS disks should be kept or wiped during reinstall
     */
    preserveData?: boolean;
}

export interface MetalDeviceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface MetalGatewayTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
     */
    delete?: string;
}

export interface MetalOrganizationAddress {
    /**
     * Postal address
     */
    address: string;
    /**
     * City name
     */
    city: string;
    /**
     * Two letter country code (ISO 3166-1 alpha-2), e.g. US
     */
    country: string;
    /**
     * State name
     */
    state: string;
    /**
     * Zip Code
     */
    zipCode: string;
}

export interface MetalPortTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface MetalProjectBgpConfig {
    /**
     * Autonomous System Number for local BGP deployment
     */
    asn: number;
    /**
     * The BGP deployment type, either 'local' or 'global'. The local is likely to be usable immediately, the global will need to be review by Equinix Metal engineers
     */
    deploymentType: string;
    /**
     * The maximum number of route filters allowed per server
     */
    maxPrefix: number;
    /**
     * Password for BGP session in plaintext (not a checksum)
     */
    md5?: string;
    /**
     * Status of BGP configuration in the project
     */
    status: string;
}

export interface MetalReservedIpBlockTimeouts {
    create?: string;
}

export interface MetalSpotMarketRequestInstanceParameters {
    alwaysPxe?: boolean;
    billingCycle: string;
    customdata?: string;
    description?: string;
    features?: string[];
    hostname: string;
    ipxeScriptUrl?: string;
    locked?: boolean;
    operatingSystem: string;
    plan: string;
    projectSshKeys?: string[];
    tags?: string[];
    terminationTime: string;
    /**
     * @deprecated Deprecated
     */
    termintationTime: string;
    userSshKeys?: string[];
    userdata?: string;
}

export interface MetalSpotMarketRequestTimeouts {
    create?: string;
    delete?: string;
}

export interface NetworkAclTemplateDeviceDetail {
    aclStatus: string;
    name: string;
    uuid: string;
}

export interface NetworkAclTemplateInboundRule {
    /**
     * Inbound rule description, up to 200 characters
     */
    description?: string;
    /**
     * Inbound traffic destination ports. Either up to 10, comma separated ports or port range or any word
     */
    dstPort: string;
    /**
     * Inbound traffic protocol. One of: `IP`, `TCP`, `UDP`
     */
    protocol: string;
    /**
     * Inbound rule sequence number
     */
    sequenceNumber: number;
    /**
     * Type of traffic source used in a given inbound rule
     *
     * @deprecated Deprecated
     */
    sourceType: string;
    /**
     * Inbound traffic source ports. Either up to 10, comma separated ports or port range or any word
     */
    srcPort: string;
    /**
     * Inbound traffic source IP subnet in CIDR format
     */
    subnet?: string;
    /**
     * Inbound traffic source IP subnets in CIDR format
     *
     * @deprecated Deprecated
     */
    subnets?: string[];
}

export interface NetworkBgpTimeouts {
    create?: string;
}

export interface NetworkDeviceClusterDetails {
    /**
     * The id of the cluster
     */
    clusterId: string;
    /**
     * The name of the cluster device
     */
    clusterName: string;
    /**
     * An object that has node0 details
     */
    node0: outputs.NetworkDeviceClusterDetailsNode0;
    /**
     * An object that has node1 details
     */
    node1: outputs.NetworkDeviceClusterDetailsNode1;
    /**
     * The number of nodes in the cluster
     */
    numOfNodes: number;
}

export interface NetworkDeviceClusterDetailsNode0 {
    /**
     * License file id. This is necessary for Fortinet and Juniper clusters
     */
    licenseFileId?: string;
    /**
     * License token. This is necessary for Palo Alto clusters
     */
    licenseToken?: string;
    /**
     * The name of the node
     */
    name: string;
    /**
     * The unique id of the node
     */
    uuid: string;
    /**
     * An object that has fields relevant to the vendor of the cluster device
     */
    vendorConfiguration?: outputs.NetworkDeviceClusterDetailsNode0VendorConfiguration;
}

export interface NetworkDeviceClusterDetailsNode0VendorConfiguration {
    /**
     * Activation key. This is required for Velocloud clusters
     */
    activationKey?: string;
    /**
     * The administrative password of the device. You can use it to log in to the console. This field is not available for all device types
     */
    adminPassword: string;
    /**
     * System IP Address. Mandatory for the Fortinet SDWAN cluster device
     */
    controller1?: string;
    /**
     * Controller fqdn. This is required for Velocloud clusters
     */
    controllerFqdn?: string;
    /**
     * Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters
     */
    hostname?: string;
    /**
     * License id. This field is relevant only for the BlueCat DNS and DHCP Server
     */
    licenseId?: string;
    /**
     * License key. This field is relevant only for the BlueCat DNS and DHCP Server
     */
    licenseKey?: string;
    /**
     * Panorama Server Auth Key. This field is relevant only for Palo Alto Networks Firewall devices
     */
    panoramaAuthKey?: string;
    /**
     * Panorama Server IP Address. This field is relevant only for Palo Alto Networks Firewall devices
     */
    panoramaIpAddress?: string;
    /**
     * Private address. This field is relevant only for the BlueCat DNS and DHCP Server
     */
    privateAddress?: string;
    /**
     * Private CIDR Mask. This field is relevant only for the BlueCat DNS and DHCP Server
     */
    privateCidrMask?: string;
    /**
     * Private gateway. This field is relevant only for the BlueCat DNS and DHCP Server
     */
    privateGateway?: string;
    /**
     * The CLI password of the device. This field is relevant only for the Velocloud SDWAN cluster
     */
    rootPassword?: string;
}

export interface NetworkDeviceClusterDetailsNode1 {
    /**
     * License file id. This is necessary for Fortinet and Juniper clusters
     */
    licenseFileId?: string;
    /**
     * License token. This is necessary for Palo Alto clusters
     */
    licenseToken?: string;
    /**
     * The name of the node
     */
    name: string;
    /**
     * The unique id of the node
     */
    uuid: string;
    /**
     * An object that has fields relevant to the vendor of the cluster device
     */
    vendorConfiguration?: outputs.NetworkDeviceClusterDetailsNode1VendorConfiguration;
}

export interface NetworkDeviceClusterDetailsNode1VendorConfiguration {
    /**
     * Activation key. This is required for Velocloud clusters
     */
    activationKey?: string;
    /**
     * The administrative password of the device. You can use it to log in to the console. This field is not available for all device types
     */
    adminPassword: string;
    /**
     * System IP Address. Mandatory for the Fortinet SDWAN cluster device
     */
    controller1?: string;
    /**
     * Controller fqdn. This is required for Velocloud clusters
     */
    controllerFqdn?: string;
    /**
     * Hostname. This is necessary for Palo Alto, Juniper, and Fortinet clusters
     */
    hostname?: string;
    /**
     * License id. This field is relevant only for the BlueCat DNS and DHCP Server
     */
    licenseId?: string;
    /**
     * License key. This field is relevant only for the BlueCat DNS and DHCP Server
     */
    licenseKey?: string;
    /**
     * Panorama Server Auth Key. This field is relevant only for Palo Alto Networks Firewall devices
     */
    panoramaAuthKey?: string;
    /**
     * Panorama Server IP Address. This field is relevant only for Palo Alto Networks Firewall devices
     */
    panoramaIpAddress?: string;
    /**
     * Private address. This field is relevant only for the BlueCat DNS and DHCP Server
     */
    privateAddress?: string;
    /**
     * Private CIDR Mask. This field is relevant only for the BlueCat DNS and DHCP Server
     */
    privateCidrMask?: string;
    /**
     * Private gateway. This field is relevant only for the BlueCat DNS and DHCP Server
     */
    privateGateway?: string;
    /**
     * The CLI password of the device. This field is relevant only for the Velocloud SDWAN cluster
     */
    rootPassword?: string;
}

export interface NetworkDeviceInterface {
    assignedType: string;
    id: number;
    ipAddress: string;
    macAddress: string;
    name: string;
    operationalStatus: string;
    status: string;
    type: string;
}

export interface NetworkDeviceLinkDevice {
    /**
     * Device ASN number
     */
    asn?: number;
    /**
     * Device identifier
     */
    id: string;
    /**
     * Device network interface identifier to use for device link connection
     */
    interfaceId?: number;
    /**
     * Assigned IP address from device link subnet
     */
    ipAddress: string;
    /**
     * Device link connection provisioning status
     */
    status: string;
}

export interface NetworkDeviceLinkLink {
    /**
     * Billing account number to be used for connection charges
     */
    accountNumber: string;
    /**
     * Connection destination metro code
     */
    dstMetroCode: string;
    /**
     * Connection destination zone code
     *
     * @deprecated Deprecated
     */
    dstZoneCode?: string;
    /**
     * Connection source metro code
     */
    srcMetroCode: string;
    /**
     * Connection source zone code
     *
     * @deprecated Deprecated
     */
    srcZoneCode?: string;
    /**
     * Connection throughput
     */
    throughput: string;
    /**
     * Connection throughput unit
     */
    throughputUnit: string;
}

export interface NetworkDeviceLinkMetroLink {
    /**
     * Billing account number to be used for connection charges
     */
    accountNumber: string;
    metroCode: string;
    /**
     * Connection throughput
     */
    throughput: string;
    /**
     * Connection throughput unit
     */
    throughputUnit: string;
}

export interface NetworkDeviceLinkTimeouts {
    create?: string;
    delete?: string;
}

export interface NetworkDeviceSecondaryDevice {
    /**
     * Device billing account number
     */
    accountNumber: string;
    /**
     * Unique identifier of applied ACL template
     */
    aclTemplateId?: string;
    /**
     * Additional Internet bandwidth, in Mbps, that will be allocated to the device
     */
    additionalBandwidth: number;
    /**
     * Autonomous system number
     */
    asn: number;
    /**
     * Unique identifier of applied cloud init file
     */
    cloudInitFileId?: string;
    /**
     * Device hostname prefix
     */
    hostname?: string;
    /**
     * Device location Equinix Business Exchange name
     */
    ibx: string;
    /**
     * List of device interfaces
     */
    interfaces: outputs.NetworkDeviceSecondaryDeviceInterface[];
    /**
     * Path to the license file that will be uploaded and applied on a device, applicable for some device types in BYOL licensing mode
     */
    licenseFile?: string;
    /**
     * Unique identifier of applied license file
     */
    licenseFileId: string;
    /**
     * Device license registration status
     */
    licenseStatus: string;
    /**
     * License Token applicable for some device types in BYOL licensing mode
     */
    licenseToken?: string;
    /**
     * Device location metro code
     */
    metroCode: string;
    /**
     * Unique identifier of applied MGMT ACL template
     */
    mgmtAclTemplateUuid?: string;
    /**
     * Device name
     */
    name: string;
    /**
     * List of email addresses that will receive device status notifications
     */
    notifications: string[];
    /**
     * The unique identifier of Project Resource to which device is scoped to
     */
    projectId: string;
    /**
     * Device redundancy type applicable for HA devices, either primary or secondary
     */
    redundancyType: string;
    /**
     * Unique identifier for a redundant device, applicable for HA device
     */
    redundantId: string;
    /**
     * Device location region
     */
    region: string;
    /**
     * IP address of SSH enabled interface on the device
     */
    sshIpAddress: string;
    /**
     * FQDN of SSH enabled interface on the device
     */
    sshIpFqdn: string;
    /**
     * Definition of SSH key that will be provisioned on a device
     */
    sshKey?: outputs.NetworkDeviceSecondaryDeviceSshKey;
    /**
     * Device provisioning status
     */
    status: string;
    /**
     * Device unique identifier
     */
    uuid: string;
    /**
     * Map of vendor specific configuration parameters for a device (controller1, activationKey, managementType, siteId, systemIpAddress)
     */
    vendorConfiguration: {[key: string]: string};
    /**
     * device interface id picked for WAN
     */
    wanInterfaceId?: string;
    /**
     * Device location zone code
     */
    zoneCode: string;
}

export interface NetworkDeviceSecondaryDeviceInterface {
    assignedType: string;
    id: number;
    ipAddress: string;
    macAddress: string;
    name: string;
    operationalStatus: string;
    status: string;
    type: string;
}

export interface NetworkDeviceSecondaryDeviceSshKey {
    /**
     * Reference by name to previously provisioned public SSH key
     */
    keyName: string;
    /**
     * Username associated with given key
     */
    username: string;
}

export interface NetworkDeviceSshKey {
    /**
     * Reference by name to previously provisioned public SSH key
     */
    keyName: string;
    /**
     * Username associated with given key
     */
    username: string;
}

export interface NetworkDeviceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NetworkSshKeyTimeouts {
    create?: string;
}

