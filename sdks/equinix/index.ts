// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { FabricCloudRouterArgs, FabricCloudRouterState } from "./fabricCloudRouter";
export type FabricCloudRouter = import("./fabricCloudRouter").FabricCloudRouter;
export const FabricCloudRouter: typeof import("./fabricCloudRouter").FabricCloudRouter = null as any;
utilities.lazyLoad(exports, ["FabricCloudRouter"], () => require("./fabricCloudRouter"));

export { FabricConnectionArgs, FabricConnectionState } from "./fabricConnection";
export type FabricConnection = import("./fabricConnection").FabricConnection;
export const FabricConnection: typeof import("./fabricConnection").FabricConnection = null as any;
utilities.lazyLoad(exports, ["FabricConnection"], () => require("./fabricConnection"));

export { FabricNetworkArgs, FabricNetworkState } from "./fabricNetwork";
export type FabricNetwork = import("./fabricNetwork").FabricNetwork;
export const FabricNetwork: typeof import("./fabricNetwork").FabricNetwork = null as any;
utilities.lazyLoad(exports, ["FabricNetwork"], () => require("./fabricNetwork"));

export { FabricRoutingProtocolArgs, FabricRoutingProtocolState } from "./fabricRoutingProtocol";
export type FabricRoutingProtocol = import("./fabricRoutingProtocol").FabricRoutingProtocol;
export const FabricRoutingProtocol: typeof import("./fabricRoutingProtocol").FabricRoutingProtocol = null as any;
utilities.lazyLoad(exports, ["FabricRoutingProtocol"], () => require("./fabricRoutingProtocol"));

export { FabricServiceProfileArgs, FabricServiceProfileState } from "./fabricServiceProfile";
export type FabricServiceProfile = import("./fabricServiceProfile").FabricServiceProfile;
export const FabricServiceProfile: typeof import("./fabricServiceProfile").FabricServiceProfile = null as any;
utilities.lazyLoad(exports, ["FabricServiceProfile"], () => require("./fabricServiceProfile"));

export { GetFabricCloudRouterArgs, GetFabricCloudRouterResult, GetFabricCloudRouterOutputArgs } from "./getFabricCloudRouter";
export const getFabricCloudRouter: typeof import("./getFabricCloudRouter").getFabricCloudRouter = null as any;
export const getFabricCloudRouterOutput: typeof import("./getFabricCloudRouter").getFabricCloudRouterOutput = null as any;
utilities.lazyLoad(exports, ["getFabricCloudRouter","getFabricCloudRouterOutput"], () => require("./getFabricCloudRouter"));

export { GetFabricCloudRoutersArgs, GetFabricCloudRoutersResult, GetFabricCloudRoutersOutputArgs } from "./getFabricCloudRouters";
export const getFabricCloudRouters: typeof import("./getFabricCloudRouters").getFabricCloudRouters = null as any;
export const getFabricCloudRoutersOutput: typeof import("./getFabricCloudRouters").getFabricCloudRoutersOutput = null as any;
utilities.lazyLoad(exports, ["getFabricCloudRouters","getFabricCloudRoutersOutput"], () => require("./getFabricCloudRouters"));

export { GetFabricConnectionArgs, GetFabricConnectionResult, GetFabricConnectionOutputArgs } from "./getFabricConnection";
export const getFabricConnection: typeof import("./getFabricConnection").getFabricConnection = null as any;
export const getFabricConnectionOutput: typeof import("./getFabricConnection").getFabricConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getFabricConnection","getFabricConnectionOutput"], () => require("./getFabricConnection"));

export { GetFabricConnectionsArgs, GetFabricConnectionsResult, GetFabricConnectionsOutputArgs } from "./getFabricConnections";
export const getFabricConnections: typeof import("./getFabricConnections").getFabricConnections = null as any;
export const getFabricConnectionsOutput: typeof import("./getFabricConnections").getFabricConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getFabricConnections","getFabricConnectionsOutput"], () => require("./getFabricConnections"));

export { GetFabricNetworkArgs, GetFabricNetworkResult, GetFabricNetworkOutputArgs } from "./getFabricNetwork";
export const getFabricNetwork: typeof import("./getFabricNetwork").getFabricNetwork = null as any;
export const getFabricNetworkOutput: typeof import("./getFabricNetwork").getFabricNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getFabricNetwork","getFabricNetworkOutput"], () => require("./getFabricNetwork"));

export { GetFabricNetworksArgs, GetFabricNetworksResult, GetFabricNetworksOutputArgs } from "./getFabricNetworks";
export const getFabricNetworks: typeof import("./getFabricNetworks").getFabricNetworks = null as any;
export const getFabricNetworksOutput: typeof import("./getFabricNetworks").getFabricNetworksOutput = null as any;
utilities.lazyLoad(exports, ["getFabricNetworks","getFabricNetworksOutput"], () => require("./getFabricNetworks"));

export { GetFabricPortArgs, GetFabricPortResult, GetFabricPortOutputArgs } from "./getFabricPort";
export const getFabricPort: typeof import("./getFabricPort").getFabricPort = null as any;
export const getFabricPortOutput: typeof import("./getFabricPort").getFabricPortOutput = null as any;
utilities.lazyLoad(exports, ["getFabricPort","getFabricPortOutput"], () => require("./getFabricPort"));

export { GetFabricPortsArgs, GetFabricPortsResult, GetFabricPortsOutputArgs } from "./getFabricPorts";
export const getFabricPorts: typeof import("./getFabricPorts").getFabricPorts = null as any;
export const getFabricPortsOutput: typeof import("./getFabricPorts").getFabricPortsOutput = null as any;
utilities.lazyLoad(exports, ["getFabricPorts","getFabricPortsOutput"], () => require("./getFabricPorts"));

export { GetFabricRoutingProtocolArgs, GetFabricRoutingProtocolResult, GetFabricRoutingProtocolOutputArgs } from "./getFabricRoutingProtocol";
export const getFabricRoutingProtocol: typeof import("./getFabricRoutingProtocol").getFabricRoutingProtocol = null as any;
export const getFabricRoutingProtocolOutput: typeof import("./getFabricRoutingProtocol").getFabricRoutingProtocolOutput = null as any;
utilities.lazyLoad(exports, ["getFabricRoutingProtocol","getFabricRoutingProtocolOutput"], () => require("./getFabricRoutingProtocol"));

export { GetFabricServiceProfileArgs, GetFabricServiceProfileResult, GetFabricServiceProfileOutputArgs } from "./getFabricServiceProfile";
export const getFabricServiceProfile: typeof import("./getFabricServiceProfile").getFabricServiceProfile = null as any;
export const getFabricServiceProfileOutput: typeof import("./getFabricServiceProfile").getFabricServiceProfileOutput = null as any;
utilities.lazyLoad(exports, ["getFabricServiceProfile","getFabricServiceProfileOutput"], () => require("./getFabricServiceProfile"));

export { GetFabricServiceProfilesArgs, GetFabricServiceProfilesResult, GetFabricServiceProfilesOutputArgs } from "./getFabricServiceProfiles";
export const getFabricServiceProfiles: typeof import("./getFabricServiceProfiles").getFabricServiceProfiles = null as any;
export const getFabricServiceProfilesOutput: typeof import("./getFabricServiceProfiles").getFabricServiceProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getFabricServiceProfiles","getFabricServiceProfilesOutput"], () => require("./getFabricServiceProfiles"));

export { GetMetalConnectionArgs, GetMetalConnectionResult, GetMetalConnectionOutputArgs } from "./getMetalConnection";
export const getMetalConnection: typeof import("./getMetalConnection").getMetalConnection = null as any;
export const getMetalConnectionOutput: typeof import("./getMetalConnection").getMetalConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getMetalConnection","getMetalConnectionOutput"], () => require("./getMetalConnection"));

export { GetMetalDeviceArgs, GetMetalDeviceResult, GetMetalDeviceOutputArgs } from "./getMetalDevice";
export const getMetalDevice: typeof import("./getMetalDevice").getMetalDevice = null as any;
export const getMetalDeviceOutput: typeof import("./getMetalDevice").getMetalDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getMetalDevice","getMetalDeviceOutput"], () => require("./getMetalDevice"));

export { GetMetalDeviceBgpNeighborsArgs, GetMetalDeviceBgpNeighborsResult, GetMetalDeviceBgpNeighborsOutputArgs } from "./getMetalDeviceBgpNeighbors";
export const getMetalDeviceBgpNeighbors: typeof import("./getMetalDeviceBgpNeighbors").getMetalDeviceBgpNeighbors = null as any;
export const getMetalDeviceBgpNeighborsOutput: typeof import("./getMetalDeviceBgpNeighbors").getMetalDeviceBgpNeighborsOutput = null as any;
utilities.lazyLoad(exports, ["getMetalDeviceBgpNeighbors","getMetalDeviceBgpNeighborsOutput"], () => require("./getMetalDeviceBgpNeighbors"));

export { GetMetalDevicesArgs, GetMetalDevicesResult, GetMetalDevicesOutputArgs } from "./getMetalDevices";
export const getMetalDevices: typeof import("./getMetalDevices").getMetalDevices = null as any;
export const getMetalDevicesOutput: typeof import("./getMetalDevices").getMetalDevicesOutput = null as any;
utilities.lazyLoad(exports, ["getMetalDevices","getMetalDevicesOutput"], () => require("./getMetalDevices"));

export { GetMetalFacilityArgs, GetMetalFacilityResult, GetMetalFacilityOutputArgs } from "./getMetalFacility";
export const getMetalFacility: typeof import("./getMetalFacility").getMetalFacility = null as any;
export const getMetalFacilityOutput: typeof import("./getMetalFacility").getMetalFacilityOutput = null as any;
utilities.lazyLoad(exports, ["getMetalFacility","getMetalFacilityOutput"], () => require("./getMetalFacility"));

export { GetMetalGatewayArgs, GetMetalGatewayResult, GetMetalGatewayOutputArgs } from "./getMetalGateway";
export const getMetalGateway: typeof import("./getMetalGateway").getMetalGateway = null as any;
export const getMetalGatewayOutput: typeof import("./getMetalGateway").getMetalGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getMetalGateway","getMetalGatewayOutput"], () => require("./getMetalGateway"));

export { GetMetalHardwareReservationArgs, GetMetalHardwareReservationResult, GetMetalHardwareReservationOutputArgs } from "./getMetalHardwareReservation";
export const getMetalHardwareReservation: typeof import("./getMetalHardwareReservation").getMetalHardwareReservation = null as any;
export const getMetalHardwareReservationOutput: typeof import("./getMetalHardwareReservation").getMetalHardwareReservationOutput = null as any;
utilities.lazyLoad(exports, ["getMetalHardwareReservation","getMetalHardwareReservationOutput"], () => require("./getMetalHardwareReservation"));

export { GetMetalIpBlockRangesArgs, GetMetalIpBlockRangesResult, GetMetalIpBlockRangesOutputArgs } from "./getMetalIpBlockRanges";
export const getMetalIpBlockRanges: typeof import("./getMetalIpBlockRanges").getMetalIpBlockRanges = null as any;
export const getMetalIpBlockRangesOutput: typeof import("./getMetalIpBlockRanges").getMetalIpBlockRangesOutput = null as any;
utilities.lazyLoad(exports, ["getMetalIpBlockRanges","getMetalIpBlockRangesOutput"], () => require("./getMetalIpBlockRanges"));

export { GetMetalMetroArgs, GetMetalMetroResult, GetMetalMetroOutputArgs } from "./getMetalMetro";
export const getMetalMetro: typeof import("./getMetalMetro").getMetalMetro = null as any;
export const getMetalMetroOutput: typeof import("./getMetalMetro").getMetalMetroOutput = null as any;
utilities.lazyLoad(exports, ["getMetalMetro","getMetalMetroOutput"], () => require("./getMetalMetro"));

export { GetMetalOperatingSystemArgs, GetMetalOperatingSystemResult, GetMetalOperatingSystemOutputArgs } from "./getMetalOperatingSystem";
export const getMetalOperatingSystem: typeof import("./getMetalOperatingSystem").getMetalOperatingSystem = null as any;
export const getMetalOperatingSystemOutput: typeof import("./getMetalOperatingSystem").getMetalOperatingSystemOutput = null as any;
utilities.lazyLoad(exports, ["getMetalOperatingSystem","getMetalOperatingSystemOutput"], () => require("./getMetalOperatingSystem"));

export { GetMetalOrganizationArgs, GetMetalOrganizationResult, GetMetalOrganizationOutputArgs } from "./getMetalOrganization";
export const getMetalOrganization: typeof import("./getMetalOrganization").getMetalOrganization = null as any;
export const getMetalOrganizationOutput: typeof import("./getMetalOrganization").getMetalOrganizationOutput = null as any;
utilities.lazyLoad(exports, ["getMetalOrganization","getMetalOrganizationOutput"], () => require("./getMetalOrganization"));

export { GetMetalPlansArgs, GetMetalPlansResult, GetMetalPlansOutputArgs } from "./getMetalPlans";
export const getMetalPlans: typeof import("./getMetalPlans").getMetalPlans = null as any;
export const getMetalPlansOutput: typeof import("./getMetalPlans").getMetalPlansOutput = null as any;
utilities.lazyLoad(exports, ["getMetalPlans","getMetalPlansOutput"], () => require("./getMetalPlans"));

export { GetMetalPortArgs, GetMetalPortResult, GetMetalPortOutputArgs } from "./getMetalPort";
export const getMetalPort: typeof import("./getMetalPort").getMetalPort = null as any;
export const getMetalPortOutput: typeof import("./getMetalPort").getMetalPortOutput = null as any;
utilities.lazyLoad(exports, ["getMetalPort","getMetalPortOutput"], () => require("./getMetalPort"));

export { GetMetalPrecreatedIpBlockArgs, GetMetalPrecreatedIpBlockResult, GetMetalPrecreatedIpBlockOutputArgs } from "./getMetalPrecreatedIpBlock";
export const getMetalPrecreatedIpBlock: typeof import("./getMetalPrecreatedIpBlock").getMetalPrecreatedIpBlock = null as any;
export const getMetalPrecreatedIpBlockOutput: typeof import("./getMetalPrecreatedIpBlock").getMetalPrecreatedIpBlockOutput = null as any;
utilities.lazyLoad(exports, ["getMetalPrecreatedIpBlock","getMetalPrecreatedIpBlockOutput"], () => require("./getMetalPrecreatedIpBlock"));

export { GetMetalProjectArgs, GetMetalProjectResult, GetMetalProjectOutputArgs } from "./getMetalProject";
export const getMetalProject: typeof import("./getMetalProject").getMetalProject = null as any;
export const getMetalProjectOutput: typeof import("./getMetalProject").getMetalProjectOutput = null as any;
utilities.lazyLoad(exports, ["getMetalProject","getMetalProjectOutput"], () => require("./getMetalProject"));

export { GetMetalProjectSshKeyArgs, GetMetalProjectSshKeyResult, GetMetalProjectSshKeyOutputArgs } from "./getMetalProjectSshKey";
export const getMetalProjectSshKey: typeof import("./getMetalProjectSshKey").getMetalProjectSshKey = null as any;
export const getMetalProjectSshKeyOutput: typeof import("./getMetalProjectSshKey").getMetalProjectSshKeyOutput = null as any;
utilities.lazyLoad(exports, ["getMetalProjectSshKey","getMetalProjectSshKeyOutput"], () => require("./getMetalProjectSshKey"));

export { GetMetalReservedIpBlockArgs, GetMetalReservedIpBlockResult, GetMetalReservedIpBlockOutputArgs } from "./getMetalReservedIpBlock";
export const getMetalReservedIpBlock: typeof import("./getMetalReservedIpBlock").getMetalReservedIpBlock = null as any;
export const getMetalReservedIpBlockOutput: typeof import("./getMetalReservedIpBlock").getMetalReservedIpBlockOutput = null as any;
utilities.lazyLoad(exports, ["getMetalReservedIpBlock","getMetalReservedIpBlockOutput"], () => require("./getMetalReservedIpBlock"));

export { GetMetalSpotMarketPriceArgs, GetMetalSpotMarketPriceResult, GetMetalSpotMarketPriceOutputArgs } from "./getMetalSpotMarketPrice";
export const getMetalSpotMarketPrice: typeof import("./getMetalSpotMarketPrice").getMetalSpotMarketPrice = null as any;
export const getMetalSpotMarketPriceOutput: typeof import("./getMetalSpotMarketPrice").getMetalSpotMarketPriceOutput = null as any;
utilities.lazyLoad(exports, ["getMetalSpotMarketPrice","getMetalSpotMarketPriceOutput"], () => require("./getMetalSpotMarketPrice"));

export { GetMetalSpotMarketRequestArgs, GetMetalSpotMarketRequestResult, GetMetalSpotMarketRequestOutputArgs } from "./getMetalSpotMarketRequest";
export const getMetalSpotMarketRequest: typeof import("./getMetalSpotMarketRequest").getMetalSpotMarketRequest = null as any;
export const getMetalSpotMarketRequestOutput: typeof import("./getMetalSpotMarketRequest").getMetalSpotMarketRequestOutput = null as any;
utilities.lazyLoad(exports, ["getMetalSpotMarketRequest","getMetalSpotMarketRequestOutput"], () => require("./getMetalSpotMarketRequest"));

export { GetMetalVirtualCircuitArgs, GetMetalVirtualCircuitResult, GetMetalVirtualCircuitOutputArgs } from "./getMetalVirtualCircuit";
export const getMetalVirtualCircuit: typeof import("./getMetalVirtualCircuit").getMetalVirtualCircuit = null as any;
export const getMetalVirtualCircuitOutput: typeof import("./getMetalVirtualCircuit").getMetalVirtualCircuitOutput = null as any;
utilities.lazyLoad(exports, ["getMetalVirtualCircuit","getMetalVirtualCircuitOutput"], () => require("./getMetalVirtualCircuit"));

export { GetMetalVlanArgs, GetMetalVlanResult, GetMetalVlanOutputArgs } from "./getMetalVlan";
export const getMetalVlan: typeof import("./getMetalVlan").getMetalVlan = null as any;
export const getMetalVlanOutput: typeof import("./getMetalVlan").getMetalVlanOutput = null as any;
utilities.lazyLoad(exports, ["getMetalVlan","getMetalVlanOutput"], () => require("./getMetalVlan"));

export { GetMetalVrfArgs, GetMetalVrfResult, GetMetalVrfOutputArgs } from "./getMetalVrf";
export const getMetalVrf: typeof import("./getMetalVrf").getMetalVrf = null as any;
export const getMetalVrfOutput: typeof import("./getMetalVrf").getMetalVrfOutput = null as any;
utilities.lazyLoad(exports, ["getMetalVrf","getMetalVrfOutput"], () => require("./getMetalVrf"));

export { GetNetworkAccountArgs, GetNetworkAccountResult, GetNetworkAccountOutputArgs } from "./getNetworkAccount";
export const getNetworkAccount: typeof import("./getNetworkAccount").getNetworkAccount = null as any;
export const getNetworkAccountOutput: typeof import("./getNetworkAccount").getNetworkAccountOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkAccount","getNetworkAccountOutput"], () => require("./getNetworkAccount"));

export { GetNetworkDeviceArgs, GetNetworkDeviceResult, GetNetworkDeviceOutputArgs } from "./getNetworkDevice";
export const getNetworkDevice: typeof import("./getNetworkDevice").getNetworkDevice = null as any;
export const getNetworkDeviceOutput: typeof import("./getNetworkDevice").getNetworkDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkDevice","getNetworkDeviceOutput"], () => require("./getNetworkDevice"));

export { GetNetworkDevicePlatformArgs, GetNetworkDevicePlatformResult, GetNetworkDevicePlatformOutputArgs } from "./getNetworkDevicePlatform";
export const getNetworkDevicePlatform: typeof import("./getNetworkDevicePlatform").getNetworkDevicePlatform = null as any;
export const getNetworkDevicePlatformOutput: typeof import("./getNetworkDevicePlatform").getNetworkDevicePlatformOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkDevicePlatform","getNetworkDevicePlatformOutput"], () => require("./getNetworkDevicePlatform"));

export { GetNetworkDeviceSoftwareArgs, GetNetworkDeviceSoftwareResult, GetNetworkDeviceSoftwareOutputArgs } from "./getNetworkDeviceSoftware";
export const getNetworkDeviceSoftware: typeof import("./getNetworkDeviceSoftware").getNetworkDeviceSoftware = null as any;
export const getNetworkDeviceSoftwareOutput: typeof import("./getNetworkDeviceSoftware").getNetworkDeviceSoftwareOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkDeviceSoftware","getNetworkDeviceSoftwareOutput"], () => require("./getNetworkDeviceSoftware"));

export { GetNetworkDeviceTypeArgs, GetNetworkDeviceTypeResult, GetNetworkDeviceTypeOutputArgs } from "./getNetworkDeviceType";
export const getNetworkDeviceType: typeof import("./getNetworkDeviceType").getNetworkDeviceType = null as any;
export const getNetworkDeviceTypeOutput: typeof import("./getNetworkDeviceType").getNetworkDeviceTypeOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkDeviceType","getNetworkDeviceTypeOutput"], () => require("./getNetworkDeviceType"));

export { MetalBgpSessionArgs, MetalBgpSessionState } from "./metalBgpSession";
export type MetalBgpSession = import("./metalBgpSession").MetalBgpSession;
export const MetalBgpSession: typeof import("./metalBgpSession").MetalBgpSession = null as any;
utilities.lazyLoad(exports, ["MetalBgpSession"], () => require("./metalBgpSession"));

export { MetalConnectionArgs, MetalConnectionState } from "./metalConnection";
export type MetalConnection = import("./metalConnection").MetalConnection;
export const MetalConnection: typeof import("./metalConnection").MetalConnection = null as any;
utilities.lazyLoad(exports, ["MetalConnection"], () => require("./metalConnection"));

export { MetalDeviceArgs, MetalDeviceState } from "./metalDevice";
export type MetalDevice = import("./metalDevice").MetalDevice;
export const MetalDevice: typeof import("./metalDevice").MetalDevice = null as any;
utilities.lazyLoad(exports, ["MetalDevice"], () => require("./metalDevice"));

export { MetalDeviceNetworkTypeArgs, MetalDeviceNetworkTypeState } from "./metalDeviceNetworkType";
export type MetalDeviceNetworkType = import("./metalDeviceNetworkType").MetalDeviceNetworkType;
export const MetalDeviceNetworkType: typeof import("./metalDeviceNetworkType").MetalDeviceNetworkType = null as any;
utilities.lazyLoad(exports, ["MetalDeviceNetworkType"], () => require("./metalDeviceNetworkType"));

export { MetalGatewayArgs, MetalGatewayState } from "./metalGateway";
export type MetalGateway = import("./metalGateway").MetalGateway;
export const MetalGateway: typeof import("./metalGateway").MetalGateway = null as any;
utilities.lazyLoad(exports, ["MetalGateway"], () => require("./metalGateway"));

export { MetalIpAttachmentArgs, MetalIpAttachmentState } from "./metalIpAttachment";
export type MetalIpAttachment = import("./metalIpAttachment").MetalIpAttachment;
export const MetalIpAttachment: typeof import("./metalIpAttachment").MetalIpAttachment = null as any;
utilities.lazyLoad(exports, ["MetalIpAttachment"], () => require("./metalIpAttachment"));

export { MetalOrganizationArgs, MetalOrganizationState } from "./metalOrganization";
export type MetalOrganization = import("./metalOrganization").MetalOrganization;
export const MetalOrganization: typeof import("./metalOrganization").MetalOrganization = null as any;
utilities.lazyLoad(exports, ["MetalOrganization"], () => require("./metalOrganization"));

export { MetalOrganizationMemberArgs, MetalOrganizationMemberState } from "./metalOrganizationMember";
export type MetalOrganizationMember = import("./metalOrganizationMember").MetalOrganizationMember;
export const MetalOrganizationMember: typeof import("./metalOrganizationMember").MetalOrganizationMember = null as any;
utilities.lazyLoad(exports, ["MetalOrganizationMember"], () => require("./metalOrganizationMember"));

export { MetalPortArgs, MetalPortState } from "./metalPort";
export type MetalPort = import("./metalPort").MetalPort;
export const MetalPort: typeof import("./metalPort").MetalPort = null as any;
utilities.lazyLoad(exports, ["MetalPort"], () => require("./metalPort"));

export { MetalPortVlanAttachmentArgs, MetalPortVlanAttachmentState } from "./metalPortVlanAttachment";
export type MetalPortVlanAttachment = import("./metalPortVlanAttachment").MetalPortVlanAttachment;
export const MetalPortVlanAttachment: typeof import("./metalPortVlanAttachment").MetalPortVlanAttachment = null as any;
utilities.lazyLoad(exports, ["MetalPortVlanAttachment"], () => require("./metalPortVlanAttachment"));

export { MetalProjectArgs, MetalProjectState } from "./metalProject";
export type MetalProject = import("./metalProject").MetalProject;
export const MetalProject: typeof import("./metalProject").MetalProject = null as any;
utilities.lazyLoad(exports, ["MetalProject"], () => require("./metalProject"));

export { MetalProjectApiKeyArgs, MetalProjectApiKeyState } from "./metalProjectApiKey";
export type MetalProjectApiKey = import("./metalProjectApiKey").MetalProjectApiKey;
export const MetalProjectApiKey: typeof import("./metalProjectApiKey").MetalProjectApiKey = null as any;
utilities.lazyLoad(exports, ["MetalProjectApiKey"], () => require("./metalProjectApiKey"));

export { MetalProjectSshKeyArgs, MetalProjectSshKeyState } from "./metalProjectSshKey";
export type MetalProjectSshKey = import("./metalProjectSshKey").MetalProjectSshKey;
export const MetalProjectSshKey: typeof import("./metalProjectSshKey").MetalProjectSshKey = null as any;
utilities.lazyLoad(exports, ["MetalProjectSshKey"], () => require("./metalProjectSshKey"));

export { MetalReservedIpBlockArgs, MetalReservedIpBlockState } from "./metalReservedIpBlock";
export type MetalReservedIpBlock = import("./metalReservedIpBlock").MetalReservedIpBlock;
export const MetalReservedIpBlock: typeof import("./metalReservedIpBlock").MetalReservedIpBlock = null as any;
utilities.lazyLoad(exports, ["MetalReservedIpBlock"], () => require("./metalReservedIpBlock"));

export { MetalSpotMarketRequestArgs, MetalSpotMarketRequestState } from "./metalSpotMarketRequest";
export type MetalSpotMarketRequest = import("./metalSpotMarketRequest").MetalSpotMarketRequest;
export const MetalSpotMarketRequest: typeof import("./metalSpotMarketRequest").MetalSpotMarketRequest = null as any;
utilities.lazyLoad(exports, ["MetalSpotMarketRequest"], () => require("./metalSpotMarketRequest"));

export { MetalSshKeyArgs, MetalSshKeyState } from "./metalSshKey";
export type MetalSshKey = import("./metalSshKey").MetalSshKey;
export const MetalSshKey: typeof import("./metalSshKey").MetalSshKey = null as any;
utilities.lazyLoad(exports, ["MetalSshKey"], () => require("./metalSshKey"));

export { MetalUserApiKeyArgs, MetalUserApiKeyState } from "./metalUserApiKey";
export type MetalUserApiKey = import("./metalUserApiKey").MetalUserApiKey;
export const MetalUserApiKey: typeof import("./metalUserApiKey").MetalUserApiKey = null as any;
utilities.lazyLoad(exports, ["MetalUserApiKey"], () => require("./metalUserApiKey"));

export { MetalVirtualCircuitArgs, MetalVirtualCircuitState } from "./metalVirtualCircuit";
export type MetalVirtualCircuit = import("./metalVirtualCircuit").MetalVirtualCircuit;
export const MetalVirtualCircuit: typeof import("./metalVirtualCircuit").MetalVirtualCircuit = null as any;
utilities.lazyLoad(exports, ["MetalVirtualCircuit"], () => require("./metalVirtualCircuit"));

export { MetalVlanArgs, MetalVlanState } from "./metalVlan";
export type MetalVlan = import("./metalVlan").MetalVlan;
export const MetalVlan: typeof import("./metalVlan").MetalVlan = null as any;
utilities.lazyLoad(exports, ["MetalVlan"], () => require("./metalVlan"));

export { MetalVrfArgs, MetalVrfState } from "./metalVrf";
export type MetalVrf = import("./metalVrf").MetalVrf;
export const MetalVrf: typeof import("./metalVrf").MetalVrf = null as any;
utilities.lazyLoad(exports, ["MetalVrf"], () => require("./metalVrf"));

export { NetworkAclTemplateArgs, NetworkAclTemplateState } from "./networkAclTemplate";
export type NetworkAclTemplate = import("./networkAclTemplate").NetworkAclTemplate;
export const NetworkAclTemplate: typeof import("./networkAclTemplate").NetworkAclTemplate = null as any;
utilities.lazyLoad(exports, ["NetworkAclTemplate"], () => require("./networkAclTemplate"));

export { NetworkBgpArgs, NetworkBgpState } from "./networkBgp";
export type NetworkBgp = import("./networkBgp").NetworkBgp;
export const NetworkBgp: typeof import("./networkBgp").NetworkBgp = null as any;
utilities.lazyLoad(exports, ["NetworkBgp"], () => require("./networkBgp"));

export { NetworkDeviceArgs, NetworkDeviceState } from "./networkDevice";
export type NetworkDevice = import("./networkDevice").NetworkDevice;
export const NetworkDevice: typeof import("./networkDevice").NetworkDevice = null as any;
utilities.lazyLoad(exports, ["NetworkDevice"], () => require("./networkDevice"));

export { NetworkDeviceLinkArgs, NetworkDeviceLinkState } from "./networkDeviceLink";
export type NetworkDeviceLink = import("./networkDeviceLink").NetworkDeviceLink;
export const NetworkDeviceLink: typeof import("./networkDeviceLink").NetworkDeviceLink = null as any;
utilities.lazyLoad(exports, ["NetworkDeviceLink"], () => require("./networkDeviceLink"));

export { NetworkFileArgs, NetworkFileState } from "./networkFile";
export type NetworkFile = import("./networkFile").NetworkFile;
export const NetworkFile: typeof import("./networkFile").NetworkFile = null as any;
utilities.lazyLoad(exports, ["NetworkFile"], () => require("./networkFile"));

export { NetworkSshKeyArgs, NetworkSshKeyState } from "./networkSshKey";
export type NetworkSshKey = import("./networkSshKey").NetworkSshKey;
export const NetworkSshKey: typeof import("./networkSshKey").NetworkSshKey = null as any;
utilities.lazyLoad(exports, ["NetworkSshKey"], () => require("./networkSshKey"));

export { NetworkSshUserArgs, NetworkSshUserState } from "./networkSshUser";
export type NetworkSshUser = import("./networkSshUser").NetworkSshUser;
export const NetworkSshUser: typeof import("./networkSshUser").NetworkSshUser = null as any;
utilities.lazyLoad(exports, ["NetworkSshUser"], () => require("./networkSshUser"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "equinix:index/fabricCloudRouter:FabricCloudRouter":
                return new FabricCloudRouter(name, <any>undefined, { urn })
            case "equinix:index/fabricConnection:FabricConnection":
                return new FabricConnection(name, <any>undefined, { urn })
            case "equinix:index/fabricNetwork:FabricNetwork":
                return new FabricNetwork(name, <any>undefined, { urn })
            case "equinix:index/fabricRoutingProtocol:FabricRoutingProtocol":
                return new FabricRoutingProtocol(name, <any>undefined, { urn })
            case "equinix:index/fabricServiceProfile:FabricServiceProfile":
                return new FabricServiceProfile(name, <any>undefined, { urn })
            case "equinix:index/metalBgpSession:MetalBgpSession":
                return new MetalBgpSession(name, <any>undefined, { urn })
            case "equinix:index/metalConnection:MetalConnection":
                return new MetalConnection(name, <any>undefined, { urn })
            case "equinix:index/metalDevice:MetalDevice":
                return new MetalDevice(name, <any>undefined, { urn })
            case "equinix:index/metalDeviceNetworkType:MetalDeviceNetworkType":
                return new MetalDeviceNetworkType(name, <any>undefined, { urn })
            case "equinix:index/metalGateway:MetalGateway":
                return new MetalGateway(name, <any>undefined, { urn })
            case "equinix:index/metalIpAttachment:MetalIpAttachment":
                return new MetalIpAttachment(name, <any>undefined, { urn })
            case "equinix:index/metalOrganization:MetalOrganization":
                return new MetalOrganization(name, <any>undefined, { urn })
            case "equinix:index/metalOrganizationMember:MetalOrganizationMember":
                return new MetalOrganizationMember(name, <any>undefined, { urn })
            case "equinix:index/metalPort:MetalPort":
                return new MetalPort(name, <any>undefined, { urn })
            case "equinix:index/metalPortVlanAttachment:MetalPortVlanAttachment":
                return new MetalPortVlanAttachment(name, <any>undefined, { urn })
            case "equinix:index/metalProject:MetalProject":
                return new MetalProject(name, <any>undefined, { urn })
            case "equinix:index/metalProjectApiKey:MetalProjectApiKey":
                return new MetalProjectApiKey(name, <any>undefined, { urn })
            case "equinix:index/metalProjectSshKey:MetalProjectSshKey":
                return new MetalProjectSshKey(name, <any>undefined, { urn })
            case "equinix:index/metalReservedIpBlock:MetalReservedIpBlock":
                return new MetalReservedIpBlock(name, <any>undefined, { urn })
            case "equinix:index/metalSpotMarketRequest:MetalSpotMarketRequest":
                return new MetalSpotMarketRequest(name, <any>undefined, { urn })
            case "equinix:index/metalSshKey:MetalSshKey":
                return new MetalSshKey(name, <any>undefined, { urn })
            case "equinix:index/metalUserApiKey:MetalUserApiKey":
                return new MetalUserApiKey(name, <any>undefined, { urn })
            case "equinix:index/metalVirtualCircuit:MetalVirtualCircuit":
                return new MetalVirtualCircuit(name, <any>undefined, { urn })
            case "equinix:index/metalVlan:MetalVlan":
                return new MetalVlan(name, <any>undefined, { urn })
            case "equinix:index/metalVrf:MetalVrf":
                return new MetalVrf(name, <any>undefined, { urn })
            case "equinix:index/networkAclTemplate:NetworkAclTemplate":
                return new NetworkAclTemplate(name, <any>undefined, { urn })
            case "equinix:index/networkBgp:NetworkBgp":
                return new NetworkBgp(name, <any>undefined, { urn })
            case "equinix:index/networkDevice:NetworkDevice":
                return new NetworkDevice(name, <any>undefined, { urn })
            case "equinix:index/networkDeviceLink:NetworkDeviceLink":
                return new NetworkDeviceLink(name, <any>undefined, { urn })
            case "equinix:index/networkFile:NetworkFile":
                return new NetworkFile(name, <any>undefined, { urn })
            case "equinix:index/networkSshKey:NetworkSshKey":
                return new NetworkSshKey(name, <any>undefined, { urn })
            case "equinix:index/networkSshUser:NetworkSshUser":
                return new NetworkSshUser(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("equinix", "index/fabricCloudRouter", _module)
pulumi.runtime.registerResourceModule("equinix", "index/fabricConnection", _module)
pulumi.runtime.registerResourceModule("equinix", "index/fabricNetwork", _module)
pulumi.runtime.registerResourceModule("equinix", "index/fabricRoutingProtocol", _module)
pulumi.runtime.registerResourceModule("equinix", "index/fabricServiceProfile", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalBgpSession", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalConnection", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalDevice", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalDeviceNetworkType", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalGateway", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalIpAttachment", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalOrganization", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalOrganizationMember", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalPort", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalPortVlanAttachment", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalProject", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalProjectApiKey", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalProjectSshKey", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalReservedIpBlock", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalSpotMarketRequest", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalSshKey", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalUserApiKey", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalVirtualCircuit", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalVlan", _module)
pulumi.runtime.registerResourceModule("equinix", "index/metalVrf", _module)
pulumi.runtime.registerResourceModule("equinix", "index/networkAclTemplate", _module)
pulumi.runtime.registerResourceModule("equinix", "index/networkBgp", _module)
pulumi.runtime.registerResourceModule("equinix", "index/networkDevice", _module)
pulumi.runtime.registerResourceModule("equinix", "index/networkDeviceLink", _module)
pulumi.runtime.registerResourceModule("equinix", "index/networkFile", _module)
pulumi.runtime.registerResourceModule("equinix", "index/networkSshKey", _module)
pulumi.runtime.registerResourceModule("equinix", "index/networkSshUser", _module)
pulumi.runtime.registerResourcePackage("equinix", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:equinix") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
