// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getNetworkDevicePlatform(args: GetNetworkDevicePlatformArgs, opts?: pulumi.InvokeOptions): Promise<GetNetworkDevicePlatformResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("equinix:index/getNetworkDevicePlatform:getNetworkDevicePlatform", {
        "coreCount": args.coreCount,
        "deviceType": args.deviceType,
        "flavor": args.flavor,
        "id": args.id,
        "licenseOptions": args.licenseOptions,
        "managementTypes": args.managementTypes,
        "packages": args.packages,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNetworkDevicePlatform.
 */
export interface GetNetworkDevicePlatformArgs {
    coreCount?: number;
    deviceType: string;
    flavor?: string;
    id?: string;
    licenseOptions?: string[];
    managementTypes?: string[];
    packages?: string[];
}

/**
 * A collection of values returned by getNetworkDevicePlatform.
 */
export interface GetNetworkDevicePlatformResult {
    readonly coreCount: number;
    readonly deviceType: string;
    readonly flavor: string;
    readonly id: string;
    readonly licenseOptions: string[];
    readonly managementTypes: string[];
    readonly memory: number;
    readonly memoryUnit: string;
    readonly packages: string[];
}
export function getNetworkDevicePlatformOutput(args: GetNetworkDevicePlatformOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetworkDevicePlatformResult> {
    return pulumi.output(args).apply((a: any) => getNetworkDevicePlatform(a, opts))
}

/**
 * A collection of arguments for invoking getNetworkDevicePlatform.
 */
export interface GetNetworkDevicePlatformOutputArgs {
    coreCount?: pulumi.Input<number>;
    deviceType: pulumi.Input<string>;
    flavor?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    licenseOptions?: pulumi.Input<pulumi.Input<string>[]>;
    managementTypes?: pulumi.Input<pulumi.Input<string>[]>;
    packages?: pulumi.Input<pulumi.Input<string>[]>;
}
