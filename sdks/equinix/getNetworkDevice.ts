// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNetworkDevice(args?: GetNetworkDeviceArgs, opts?: pulumi.InvokeOptions): Promise<GetNetworkDeviceResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("equinix:index/getNetworkDevice:getNetworkDevice", {
        "id": args.id,
        "name": args.name,
        "uuid": args.uuid,
        "validStatusList": args.validStatusList,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNetworkDevice.
 */
export interface GetNetworkDeviceArgs {
    id?: string;
    name?: string;
    uuid?: string;
    validStatusList?: string;
}

/**
 * A collection of values returned by getNetworkDevice.
 */
export interface GetNetworkDeviceResult {
    readonly accountNumber: string;
    readonly aclTemplateId: string;
    readonly additionalBandwidth: number;
    readonly asn: number;
    readonly byol: boolean;
    readonly clusterDetails: outputs.GetNetworkDeviceClusterDetail[];
    readonly connectivity: string;
    readonly coreCount: number;
    readonly diverseDeviceId: string;
    readonly diverseDeviceName: string;
    readonly hostname: string;
    readonly ibx: string;
    readonly id: string;
    readonly interfaceCount: number;
    readonly interfaces: outputs.GetNetworkDeviceInterface[];
    readonly licenseFile: string;
    readonly licenseFileId: string;
    readonly licenseStatus: string;
    readonly licenseToken: string;
    readonly metroCode: string;
    readonly mgmtAclTemplateUuid: string;
    readonly name: string;
    readonly notifications: string[];
    readonly orderReference: string;
    readonly packageCode: string;
    readonly projectId: string;
    readonly purchaseOrderNumber: string;
    readonly redundancyType: string;
    readonly redundantId: string;
    readonly region: string;
    readonly secondaryDevices: outputs.GetNetworkDeviceSecondaryDevice[];
    readonly selfManaged: boolean;
    readonly sshIpAddress: string;
    readonly sshIpFqdn: string;
    readonly sshKeys: outputs.GetNetworkDeviceSshKey[];
    readonly status: string;
    readonly termLength: number;
    readonly throughput: number;
    readonly throughputUnit: string;
    readonly typeCode: string;
    readonly uuid: string;
    readonly validStatusList?: string;
    readonly vendorConfiguration: {[key: string]: string};
    readonly version: string;
    readonly wanInterfaceId: string;
    readonly zoneCode: string;
}
export function getNetworkDeviceOutput(args?: GetNetworkDeviceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetworkDeviceResult> {
    return pulumi.output(args).apply((a: any) => getNetworkDevice(a, opts))
}

/**
 * A collection of arguments for invoking getNetworkDevice.
 */
export interface GetNetworkDeviceOutputArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    validStatusList?: pulumi.Input<string>;
}
