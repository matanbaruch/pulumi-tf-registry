// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getMetalVirtualCircuit(args: GetMetalVirtualCircuitArgs, opts?: pulumi.InvokeOptions): Promise<GetMetalVirtualCircuitResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("equinix:index/getMetalVirtualCircuit:getMetalVirtualCircuit", {
        "customerIpv6": args.customerIpv6,
        "id": args.id,
        "metalIpv6": args.metalIpv6,
        "subnetIpv6": args.subnetIpv6,
        "virtualCircuitId": args.virtualCircuitId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMetalVirtualCircuit.
 */
export interface GetMetalVirtualCircuitArgs {
    customerIpv6?: string;
    id?: string;
    metalIpv6?: string;
    subnetIpv6?: string;
    virtualCircuitId: string;
}

/**
 * A collection of values returned by getMetalVirtualCircuit.
 */
export interface GetMetalVirtualCircuitResult {
    readonly connectionId: string;
    readonly customerIp: string;
    readonly customerIpv6?: string;
    readonly description: string;
    readonly id: string;
    readonly md5: string;
    readonly metalIp: string;
    readonly metalIpv6?: string;
    readonly name: string;
    readonly nniVlan: number;
    readonly nniVnid: number;
    readonly peerAsn: number;
    readonly portId: string;
    readonly projectId: string;
    readonly speed: string;
    readonly status: string;
    readonly subnet: string;
    readonly subnetIpv6?: string;
    readonly tags: string[];
    readonly virtualCircuitId: string;
    readonly vlanId: string;
    readonly vnid: number;
    readonly vrfId: string;
}
export function getMetalVirtualCircuitOutput(args: GetMetalVirtualCircuitOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMetalVirtualCircuitResult> {
    return pulumi.output(args).apply((a: any) => getMetalVirtualCircuit(a, opts))
}

/**
 * A collection of arguments for invoking getMetalVirtualCircuit.
 */
export interface GetMetalVirtualCircuitOutputArgs {
    customerIpv6?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    metalIpv6?: pulumi.Input<string>;
    subnetIpv6?: pulumi.Input<string>;
    virtualCircuitId: pulumi.Input<string>;
}
