// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MetalReservedIpBlock extends pulumi.CustomResource {
    /**
     * Get an existing MetalReservedIpBlock resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MetalReservedIpBlockState, opts?: pulumi.CustomResourceOptions): MetalReservedIpBlock {
        return new MetalReservedIpBlock(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'equinix:index/metalReservedIpBlock:MetalReservedIpBlock';

    /**
     * Returns true if the given object is an instance of MetalReservedIpBlock.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MetalReservedIpBlock {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MetalReservedIpBlock.__pulumiType;
    }

    public /*out*/ readonly address!: pulumi.Output<string>;
    /**
     * Address family as integer (4 or 6)
     */
    public /*out*/ readonly addressFamily!: pulumi.Output<number>;
    /**
     * the size of the network to reserve from an existing vrf ip_range. `cidr` can only be specified with `vrf_id`. Minimum
     * range is 22-29, with 30-31 supported and necessary for virtual-circuits
     */
    public readonly cidr!: pulumi.Output<number>;
    public /*out*/ readonly cidrNotation!: pulumi.Output<string>;
    public readonly customData!: pulumi.Output<string | undefined>;
    /**
     * Arbitrary description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Facility where to allocate the public IP address block, makes sense only for type==public_ipv4, must be empty for
     * type==global_ipv4, conflicts with metro
     */
    public readonly facility!: pulumi.Output<string | undefined>;
    public /*out*/ readonly gateway!: pulumi.Output<string>;
    /**
     * Flag indicating whether IP block is global, i.e. assignable in any location
     */
    public /*out*/ readonly global!: pulumi.Output<boolean>;
    public /*out*/ readonly manageable!: pulumi.Output<boolean>;
    public /*out*/ readonly management!: pulumi.Output<boolean>;
    /**
     * Metro where to allocate the public IP address block, makes sense only for type==public_ipv4, must be empty for
     * type==global_ipv4, conflicts with facility
     */
    public readonly metro!: pulumi.Output<string | undefined>;
    /**
     * Mask in decimal notation, e.g. 255.255.255.0
     */
    public /*out*/ readonly netmask!: pulumi.Output<string>;
    /**
     * an unreserved network address from an existing vrf ip_range. `network` can only be specified with vrf_id
     */
    public readonly network!: pulumi.Output<string>;
    /**
     * The metal project ID where to allocate the address block
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Flag indicating whether IP block is addressable from the Internet
     */
    public /*out*/ readonly public!: pulumi.Output<boolean>;
    /**
     * The number of allocated /32 addresses, a power of 2
     */
    public readonly quantity!: pulumi.Output<number>;
    /**
     * Tags attached to the reserved block
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.MetalReservedIpBlockTimeouts | undefined>;
    /**
     * Either global_ipv4, public_ipv4, or vrf. Defaults to public_ipv4.
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * VRF ID for type=vrf reservations
     */
    public readonly vrfId!: pulumi.Output<string | undefined>;
    /**
     * Wait for the IP reservation block to reach a desired state on resource creation. One of: `pending`, `created`. The
     * `created` state is default and recommended if the addresses are needed within the configuration. An error will be
     * returned if a timeout or the `denied` state is encountered.
     */
    public readonly waitForState!: pulumi.Output<string | undefined>;

    /**
     * Create a MetalReservedIpBlock resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetalReservedIpBlockArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MetalReservedIpBlockArgs | MetalReservedIpBlockState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MetalReservedIpBlockState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["addressFamily"] = state ? state.addressFamily : undefined;
            resourceInputs["cidr"] = state ? state.cidr : undefined;
            resourceInputs["cidrNotation"] = state ? state.cidrNotation : undefined;
            resourceInputs["customData"] = state ? state.customData : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["facility"] = state ? state.facility : undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["global"] = state ? state.global : undefined;
            resourceInputs["manageable"] = state ? state.manageable : undefined;
            resourceInputs["management"] = state ? state.management : undefined;
            resourceInputs["metro"] = state ? state.metro : undefined;
            resourceInputs["netmask"] = state ? state.netmask : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["public"] = state ? state.public : undefined;
            resourceInputs["quantity"] = state ? state.quantity : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vrfId"] = state ? state.vrfId : undefined;
            resourceInputs["waitForState"] = state ? state.waitForState : undefined;
        } else {
            const args = argsOrState as MetalReservedIpBlockArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["cidr"] = args ? args.cidr : undefined;
            resourceInputs["customData"] = args ? args.customData : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["facility"] = args ? args.facility : undefined;
            resourceInputs["metro"] = args ? args.metro : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["quantity"] = args ? args.quantity : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vrfId"] = args ? args.vrfId : undefined;
            resourceInputs["waitForState"] = args ? args.waitForState : undefined;
            resourceInputs["address"] = undefined /*out*/;
            resourceInputs["addressFamily"] = undefined /*out*/;
            resourceInputs["cidrNotation"] = undefined /*out*/;
            resourceInputs["gateway"] = undefined /*out*/;
            resourceInputs["global"] = undefined /*out*/;
            resourceInputs["manageable"] = undefined /*out*/;
            resourceInputs["management"] = undefined /*out*/;
            resourceInputs["netmask"] = undefined /*out*/;
            resourceInputs["public"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MetalReservedIpBlock.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MetalReservedIpBlock resources.
 */
export interface MetalReservedIpBlockState {
    address?: pulumi.Input<string>;
    /**
     * Address family as integer (4 or 6)
     */
    addressFamily?: pulumi.Input<number>;
    /**
     * the size of the network to reserve from an existing vrf ip_range. `cidr` can only be specified with `vrf_id`. Minimum
     * range is 22-29, with 30-31 supported and necessary for virtual-circuits
     */
    cidr?: pulumi.Input<number>;
    cidrNotation?: pulumi.Input<string>;
    customData?: pulumi.Input<string>;
    /**
     * Arbitrary description
     */
    description?: pulumi.Input<string>;
    /**
     * Facility where to allocate the public IP address block, makes sense only for type==public_ipv4, must be empty for
     * type==global_ipv4, conflicts with metro
     */
    facility?: pulumi.Input<string>;
    gateway?: pulumi.Input<string>;
    /**
     * Flag indicating whether IP block is global, i.e. assignable in any location
     */
    global?: pulumi.Input<boolean>;
    manageable?: pulumi.Input<boolean>;
    management?: pulumi.Input<boolean>;
    /**
     * Metro where to allocate the public IP address block, makes sense only for type==public_ipv4, must be empty for
     * type==global_ipv4, conflicts with facility
     */
    metro?: pulumi.Input<string>;
    /**
     * Mask in decimal notation, e.g. 255.255.255.0
     */
    netmask?: pulumi.Input<string>;
    /**
     * an unreserved network address from an existing vrf ip_range. `network` can only be specified with vrf_id
     */
    network?: pulumi.Input<string>;
    /**
     * The metal project ID where to allocate the address block
     */
    projectId?: pulumi.Input<string>;
    /**
     * Flag indicating whether IP block is addressable from the Internet
     */
    public?: pulumi.Input<boolean>;
    /**
     * The number of allocated /32 addresses, a power of 2
     */
    quantity?: pulumi.Input<number>;
    /**
     * Tags attached to the reserved block
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.MetalReservedIpBlockTimeouts>;
    /**
     * Either global_ipv4, public_ipv4, or vrf. Defaults to public_ipv4.
     */
    type?: pulumi.Input<string>;
    /**
     * VRF ID for type=vrf reservations
     */
    vrfId?: pulumi.Input<string>;
    /**
     * Wait for the IP reservation block to reach a desired state on resource creation. One of: `pending`, `created`. The
     * `created` state is default and recommended if the addresses are needed within the configuration. An error will be
     * returned if a timeout or the `denied` state is encountered.
     */
    waitForState?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MetalReservedIpBlock resource.
 */
export interface MetalReservedIpBlockArgs {
    /**
     * the size of the network to reserve from an existing vrf ip_range. `cidr` can only be specified with `vrf_id`. Minimum
     * range is 22-29, with 30-31 supported and necessary for virtual-circuits
     */
    cidr?: pulumi.Input<number>;
    customData?: pulumi.Input<string>;
    /**
     * Arbitrary description
     */
    description?: pulumi.Input<string>;
    /**
     * Facility where to allocate the public IP address block, makes sense only for type==public_ipv4, must be empty for
     * type==global_ipv4, conflicts with metro
     */
    facility?: pulumi.Input<string>;
    /**
     * Metro where to allocate the public IP address block, makes sense only for type==public_ipv4, must be empty for
     * type==global_ipv4, conflicts with facility
     */
    metro?: pulumi.Input<string>;
    /**
     * an unreserved network address from an existing vrf ip_range. `network` can only be specified with vrf_id
     */
    network?: pulumi.Input<string>;
    /**
     * The metal project ID where to allocate the address block
     */
    projectId: pulumi.Input<string>;
    /**
     * The number of allocated /32 addresses, a power of 2
     */
    quantity?: pulumi.Input<number>;
    /**
     * Tags attached to the reserved block
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.MetalReservedIpBlockTimeouts>;
    /**
     * Either global_ipv4, public_ipv4, or vrf. Defaults to public_ipv4.
     */
    type?: pulumi.Input<string>;
    /**
     * VRF ID for type=vrf reservations
     */
    vrfId?: pulumi.Input<string>;
    /**
     * Wait for the IP reservation block to reach a desired state on resource creation. One of: `pending`, `created`. The
     * `created` state is default and recommended if the addresses are needed within the configuration. An error will be
     * returned if a timeout or the `denied` state is encountered.
     */
    waitForState?: pulumi.Input<string>;
}
