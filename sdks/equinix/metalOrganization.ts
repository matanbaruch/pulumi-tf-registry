// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MetalOrganization extends pulumi.CustomResource {
    /**
     * Get an existing MetalOrganization resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MetalOrganizationState, opts?: pulumi.CustomResourceOptions): MetalOrganization {
        return new MetalOrganization(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'equinix:index/metalOrganization:MetalOrganization';

    /**
     * Returns true if the given object is an instance of MetalOrganization.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MetalOrganization {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MetalOrganization.__pulumiType;
    }

    /**
     * Address information block
     */
    public readonly addresses!: pulumi.Output<outputs.MetalOrganizationAddress[] | undefined>;
    public /*out*/ readonly created!: pulumi.Output<string>;
    /**
     * Description string
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * **Deprecated** Logo URL
     *
     * @deprecated Deprecated
     */
    public readonly logo!: pulumi.Output<string>;
    /**
     * The name of the Organization
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Twitter handle
     */
    public readonly twitter!: pulumi.Output<string>;
    public /*out*/ readonly updated!: pulumi.Output<string>;
    /**
     * Website link
     */
    public readonly website!: pulumi.Output<string>;

    /**
     * Create a MetalOrganization resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: MetalOrganizationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MetalOrganizationArgs | MetalOrganizationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MetalOrganizationState | undefined;
            resourceInputs["addresses"] = state ? state.addresses : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["logo"] = state ? state.logo : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["twitter"] = state ? state.twitter : undefined;
            resourceInputs["updated"] = state ? state.updated : undefined;
            resourceInputs["website"] = state ? state.website : undefined;
        } else {
            const args = argsOrState as MetalOrganizationArgs | undefined;
            resourceInputs["addresses"] = args ? args.addresses : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["logo"] = args ? args.logo : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["twitter"] = args ? args.twitter : undefined;
            resourceInputs["website"] = args ? args.website : undefined;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["updated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MetalOrganization.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MetalOrganization resources.
 */
export interface MetalOrganizationState {
    /**
     * Address information block
     */
    addresses?: pulumi.Input<pulumi.Input<inputs.MetalOrganizationAddress>[]>;
    created?: pulumi.Input<string>;
    /**
     * Description string
     */
    description?: pulumi.Input<string>;
    /**
     * **Deprecated** Logo URL
     *
     * @deprecated Deprecated
     */
    logo?: pulumi.Input<string>;
    /**
     * The name of the Organization
     */
    name?: pulumi.Input<string>;
    /**
     * Twitter handle
     */
    twitter?: pulumi.Input<string>;
    updated?: pulumi.Input<string>;
    /**
     * Website link
     */
    website?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MetalOrganization resource.
 */
export interface MetalOrganizationArgs {
    /**
     * Address information block
     */
    addresses?: pulumi.Input<pulumi.Input<inputs.MetalOrganizationAddress>[]>;
    /**
     * Description string
     */
    description?: pulumi.Input<string>;
    /**
     * **Deprecated** Logo URL
     *
     * @deprecated Deprecated
     */
    logo?: pulumi.Input<string>;
    /**
     * The name of the Organization
     */
    name?: pulumi.Input<string>;
    /**
     * Twitter handle
     */
    twitter?: pulumi.Input<string>;
    /**
     * Website link
     */
    website?: pulumi.Input<string>;
}
