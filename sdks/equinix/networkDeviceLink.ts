// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkDeviceLink extends pulumi.CustomResource {
    /**
     * Get an existing NetworkDeviceLink resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkDeviceLinkState, opts?: pulumi.CustomResourceOptions): NetworkDeviceLink {
        return new NetworkDeviceLink(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'equinix:index/networkDeviceLink:NetworkDeviceLink';

    /**
     * Returns true if the given object is an instance of NetworkDeviceLink.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkDeviceLink {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkDeviceLink.__pulumiType;
    }

    public readonly devices!: pulumi.Output<outputs.NetworkDeviceLinkDevice[]>;
    /**
     * Definition of one or more, inter metro connections belonging to the device link
     *
     * @deprecated Deprecated
     */
    public readonly links!: pulumi.Output<outputs.NetworkDeviceLinkLink[] | undefined>;
    /**
     * Definition of one or more, inter or intra metro connections belonging to the device link
     */
    public readonly metroLinks!: pulumi.Output<outputs.NetworkDeviceLinkMetroLink[] | undefined>;
    /**
     * Device link name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * project_id
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * (Optional) Whether the connection should be created through Fabric's primary or secondary port. Supported values:
     * `PRIMARY` (Default), `SECONDARY`, `HYBRID`
     */
    public readonly redundancyType!: pulumi.Output<string | undefined>;
    /**
     * Device link provisioning status
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Device link subnet CIDR.
     */
    public readonly subnet!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.NetworkDeviceLinkTimeouts | undefined>;
    /**
     * Device link unique identifier
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;

    /**
     * Create a NetworkDeviceLink resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkDeviceLinkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkDeviceLinkArgs | NetworkDeviceLinkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkDeviceLinkState | undefined;
            resourceInputs["devices"] = state ? state.devices : undefined;
            resourceInputs["links"] = state ? state.links : undefined;
            resourceInputs["metroLinks"] = state ? state.metroLinks : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["redundancyType"] = state ? state.redundancyType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnet"] = state ? state.subnet : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as NetworkDeviceLinkArgs | undefined;
            if ((!args || args.devices === undefined) && !opts.urn) {
                throw new Error("Missing required property 'devices'");
            }
            resourceInputs["devices"] = args ? args.devices : undefined;
            resourceInputs["links"] = args ? args.links : undefined;
            resourceInputs["metroLinks"] = args ? args.metroLinks : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["redundancyType"] = args ? args.redundancyType : undefined;
            resourceInputs["subnet"] = args ? args.subnet : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkDeviceLink.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkDeviceLink resources.
 */
export interface NetworkDeviceLinkState {
    devices?: pulumi.Input<pulumi.Input<inputs.NetworkDeviceLinkDevice>[]>;
    /**
     * Definition of one or more, inter metro connections belonging to the device link
     *
     * @deprecated Deprecated
     */
    links?: pulumi.Input<pulumi.Input<inputs.NetworkDeviceLinkLink>[]>;
    /**
     * Definition of one or more, inter or intra metro connections belonging to the device link
     */
    metroLinks?: pulumi.Input<pulumi.Input<inputs.NetworkDeviceLinkMetroLink>[]>;
    /**
     * Device link name
     */
    name?: pulumi.Input<string>;
    /**
     * project_id
     */
    projectId?: pulumi.Input<string>;
    /**
     * (Optional) Whether the connection should be created through Fabric's primary or secondary port. Supported values:
     * `PRIMARY` (Default), `SECONDARY`, `HYBRID`
     */
    redundancyType?: pulumi.Input<string>;
    /**
     * Device link provisioning status
     */
    status?: pulumi.Input<string>;
    /**
     * Device link subnet CIDR.
     */
    subnet?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetworkDeviceLinkTimeouts>;
    /**
     * Device link unique identifier
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkDeviceLink resource.
 */
export interface NetworkDeviceLinkArgs {
    devices: pulumi.Input<pulumi.Input<inputs.NetworkDeviceLinkDevice>[]>;
    /**
     * Definition of one or more, inter metro connections belonging to the device link
     *
     * @deprecated Deprecated
     */
    links?: pulumi.Input<pulumi.Input<inputs.NetworkDeviceLinkLink>[]>;
    /**
     * Definition of one or more, inter or intra metro connections belonging to the device link
     */
    metroLinks?: pulumi.Input<pulumi.Input<inputs.NetworkDeviceLinkMetroLink>[]>;
    /**
     * Device link name
     */
    name?: pulumi.Input<string>;
    /**
     * project_id
     */
    projectId?: pulumi.Input<string>;
    /**
     * (Optional) Whether the connection should be created through Fabric's primary or secondary port. Supported values:
     * `PRIMARY` (Default), `SECONDARY`, `HYBRID`
     */
    redundancyType?: pulumi.Input<string>;
    /**
     * Device link subnet CIDR.
     */
    subnet?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetworkDeviceLinkTimeouts>;
}
