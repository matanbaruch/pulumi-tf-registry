// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FabricConnection extends pulumi.CustomResource {
    /**
     * Get an existing FabricConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FabricConnectionState, opts?: pulumi.CustomResourceOptions): FabricConnection {
        return new FabricConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'equinix:index/fabricConnection:FabricConnection';

    /**
     * Returns true if the given object is an instance of FabricConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FabricConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FabricConnection.__pulumiType;
    }

    /**
     * Requester or Customer side connection configuration object of the multi-segment connection
     */
    public readonly aSide!: pulumi.Output<outputs.FabricConnectionASide>;
    /**
     * Customer account information that is associated with this connection
     */
    public /*out*/ readonly accounts!: pulumi.Output<outputs.FabricConnectionAccount[]>;
    /**
     * Connection additional information
     */
    public readonly additionalInfos!: pulumi.Output<{[key: string]: string}[] | undefined>;
    /**
     * Connection bandwidth in Mbps
     */
    public readonly bandwidth!: pulumi.Output<number>;
    /**
     * Captures connection lifecycle change information
     */
    public /*out*/ readonly changeLogs!: pulumi.Output<outputs.FabricConnectionChangeLog[]>;
    /**
     * Customer-provided connection description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Connection directionality from the requester point of view
     */
    public /*out*/ readonly direction!: pulumi.Output<string>;
    /**
     * Connection URI information
     */
    public /*out*/ readonly href!: pulumi.Output<string>;
    /**
     * Connection property derived from access point locations
     */
    public /*out*/ readonly isRemote!: pulumi.Output<boolean>;
    /**
     * Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Preferences for notifications on connection configuration or status changes
     */
    public readonly notifications!: pulumi.Output<outputs.FabricConnectionNotification[]>;
    /**
     * Connection type-specific operational data
     */
    public /*out*/ readonly operations!: pulumi.Output<outputs.FabricConnectionOperation[]>;
    /**
     * Order details
     */
    public readonly order!: pulumi.Output<outputs.FabricConnectionOrder | undefined>;
    /**
     * Project information
     */
    public readonly project!: pulumi.Output<outputs.FabricConnectionProject | undefined>;
    /**
     * Connection Redundancy Configuration
     */
    public readonly redundancy!: pulumi.Output<outputs.FabricConnectionRedundancy | undefined>;
    /**
     * Connection overall state
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.FabricConnectionTimeouts | undefined>;
    /**
     * Defines the connection type like EVPL_VC, EPL_VC, IPWAN_VC, IP_VC, ACCESS_EPL_VC, EVPLAN_VC, EPLAN_VC, EIA_VC, IA_VC,
     * EC_VC
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Equinix-assigned connection identifier
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;
    /**
     * Destination or Provider side connection configuration object of the multi-segment connection
     */
    public readonly zSide!: pulumi.Output<outputs.FabricConnectionZSide>;

    /**
     * Create a FabricConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FabricConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FabricConnectionArgs | FabricConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FabricConnectionState | undefined;
            resourceInputs["aSide"] = state ? state.aSide : undefined;
            resourceInputs["accounts"] = state ? state.accounts : undefined;
            resourceInputs["additionalInfos"] = state ? state.additionalInfos : undefined;
            resourceInputs["bandwidth"] = state ? state.bandwidth : undefined;
            resourceInputs["changeLogs"] = state ? state.changeLogs : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["direction"] = state ? state.direction : undefined;
            resourceInputs["href"] = state ? state.href : undefined;
            resourceInputs["isRemote"] = state ? state.isRemote : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["operations"] = state ? state.operations : undefined;
            resourceInputs["order"] = state ? state.order : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["redundancy"] = state ? state.redundancy : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["zSide"] = state ? state.zSide : undefined;
        } else {
            const args = argsOrState as FabricConnectionArgs | undefined;
            if ((!args || args.aSide === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aSide'");
            }
            if ((!args || args.bandwidth === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bandwidth'");
            }
            if ((!args || args.notifications === undefined) && !opts.urn) {
                throw new Error("Missing required property 'notifications'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.zSide === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zSide'");
            }
            resourceInputs["aSide"] = args ? args.aSide : undefined;
            resourceInputs["additionalInfos"] = args ? args.additionalInfos : undefined;
            resourceInputs["bandwidth"] = args ? args.bandwidth : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notifications"] = args ? args.notifications : undefined;
            resourceInputs["order"] = args ? args.order : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["redundancy"] = args ? args.redundancy : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["zSide"] = args ? args.zSide : undefined;
            resourceInputs["accounts"] = undefined /*out*/;
            resourceInputs["changeLogs"] = undefined /*out*/;
            resourceInputs["direction"] = undefined /*out*/;
            resourceInputs["href"] = undefined /*out*/;
            resourceInputs["isRemote"] = undefined /*out*/;
            resourceInputs["operations"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FabricConnection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FabricConnection resources.
 */
export interface FabricConnectionState {
    /**
     * Requester or Customer side connection configuration object of the multi-segment connection
     */
    aSide?: pulumi.Input<inputs.FabricConnectionASide>;
    /**
     * Customer account information that is associated with this connection
     */
    accounts?: pulumi.Input<pulumi.Input<inputs.FabricConnectionAccount>[]>;
    /**
     * Connection additional information
     */
    additionalInfos?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    /**
     * Connection bandwidth in Mbps
     */
    bandwidth?: pulumi.Input<number>;
    /**
     * Captures connection lifecycle change information
     */
    changeLogs?: pulumi.Input<pulumi.Input<inputs.FabricConnectionChangeLog>[]>;
    /**
     * Customer-provided connection description
     */
    description?: pulumi.Input<string>;
    /**
     * Connection directionality from the requester point of view
     */
    direction?: pulumi.Input<string>;
    /**
     * Connection URI information
     */
    href?: pulumi.Input<string>;
    /**
     * Connection property derived from access point locations
     */
    isRemote?: pulumi.Input<boolean>;
    /**
     * Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
     */
    name?: pulumi.Input<string>;
    /**
     * Preferences for notifications on connection configuration or status changes
     */
    notifications?: pulumi.Input<pulumi.Input<inputs.FabricConnectionNotification>[]>;
    /**
     * Connection type-specific operational data
     */
    operations?: pulumi.Input<pulumi.Input<inputs.FabricConnectionOperation>[]>;
    /**
     * Order details
     */
    order?: pulumi.Input<inputs.FabricConnectionOrder>;
    /**
     * Project information
     */
    project?: pulumi.Input<inputs.FabricConnectionProject>;
    /**
     * Connection Redundancy Configuration
     */
    redundancy?: pulumi.Input<inputs.FabricConnectionRedundancy>;
    /**
     * Connection overall state
     */
    state?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FabricConnectionTimeouts>;
    /**
     * Defines the connection type like EVPL_VC, EPL_VC, IPWAN_VC, IP_VC, ACCESS_EPL_VC, EVPLAN_VC, EPLAN_VC, EIA_VC, IA_VC,
     * EC_VC
     */
    type?: pulumi.Input<string>;
    /**
     * Equinix-assigned connection identifier
     */
    uuid?: pulumi.Input<string>;
    /**
     * Destination or Provider side connection configuration object of the multi-segment connection
     */
    zSide?: pulumi.Input<inputs.FabricConnectionZSide>;
}

/**
 * The set of arguments for constructing a FabricConnection resource.
 */
export interface FabricConnectionArgs {
    /**
     * Requester or Customer side connection configuration object of the multi-segment connection
     */
    aSide: pulumi.Input<inputs.FabricConnectionASide>;
    /**
     * Connection additional information
     */
    additionalInfos?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    /**
     * Connection bandwidth in Mbps
     */
    bandwidth: pulumi.Input<number>;
    /**
     * Customer-provided connection description
     */
    description?: pulumi.Input<string>;
    /**
     * Connection name. An alpha-numeric 24 characters string which can include only hyphens and underscores
     */
    name?: pulumi.Input<string>;
    /**
     * Preferences for notifications on connection configuration or status changes
     */
    notifications: pulumi.Input<pulumi.Input<inputs.FabricConnectionNotification>[]>;
    /**
     * Order details
     */
    order?: pulumi.Input<inputs.FabricConnectionOrder>;
    /**
     * Project information
     */
    project?: pulumi.Input<inputs.FabricConnectionProject>;
    /**
     * Connection Redundancy Configuration
     */
    redundancy?: pulumi.Input<inputs.FabricConnectionRedundancy>;
    timeouts?: pulumi.Input<inputs.FabricConnectionTimeouts>;
    /**
     * Defines the connection type like EVPL_VC, EPL_VC, IPWAN_VC, IP_VC, ACCESS_EPL_VC, EVPLAN_VC, EPLAN_VC, EIA_VC, IA_VC,
     * EC_VC
     */
    type: pulumi.Input<string>;
    /**
     * Destination or Provider side connection configuration object of the multi-segment connection
     */
    zSide: pulumi.Input<inputs.FabricConnectionZSide>;
}
