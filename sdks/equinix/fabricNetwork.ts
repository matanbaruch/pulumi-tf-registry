// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FabricNetwork extends pulumi.CustomResource {
    /**
     * Get an existing FabricNetwork resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FabricNetworkState, opts?: pulumi.CustomResourceOptions): FabricNetwork {
        return new FabricNetwork(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'equinix:index/fabricNetwork:FabricNetwork';

    /**
     * Returns true if the given object is an instance of FabricNetwork.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FabricNetwork {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FabricNetwork.__pulumiType;
    }

    /**
     * A permanent record of asset creation, modification, or deletion
     */
    public /*out*/ readonly changeLogs!: pulumi.Output<outputs.FabricNetworkChangeLog[]>;
    /**
     * Information on asset change operation
     */
    public /*out*/ readonly changes!: pulumi.Output<outputs.FabricNetworkChange[]>;
    /**
     * Number of connections associated with this network
     */
    public /*out*/ readonly connectionsCount!: pulumi.Output<number>;
    /**
     * Fabric Network URI information
     */
    public /*out*/ readonly href!: pulumi.Output<string>;
    /**
     * Fabric Network location
     */
    public readonly location!: pulumi.Output<outputs.FabricNetworkLocation | undefined>;
    /**
     * Fabric Network name. An alpha-numeric 24 characters string which can include only hyphens and underscores
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Preferences for notifications on Fabric Network configuration or status changes
     */
    public readonly notifications!: pulumi.Output<outputs.FabricNetworkNotification[]>;
    /**
     * Network operation information that is associated with this Fabric Network
     */
    public /*out*/ readonly operations!: pulumi.Output<outputs.FabricNetworkOperation[]>;
    /**
     * Fabric Network project
     */
    public readonly projects!: pulumi.Output<outputs.FabricNetworkProject[]>;
    /**
     * Fabric Network scope
     */
    public readonly scope!: pulumi.Output<string>;
    /**
     * Fabric Network overall state
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.FabricNetworkTimeouts | undefined>;
    /**
     * Supported Network types - EVPLAN, EPLAN, IPWAN
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Equinix-assigned network identifier
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;

    /**
     * Create a FabricNetwork resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FabricNetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FabricNetworkArgs | FabricNetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FabricNetworkState | undefined;
            resourceInputs["changeLogs"] = state ? state.changeLogs : undefined;
            resourceInputs["changes"] = state ? state.changes : undefined;
            resourceInputs["connectionsCount"] = state ? state.connectionsCount : undefined;
            resourceInputs["href"] = state ? state.href : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["operations"] = state ? state.operations : undefined;
            resourceInputs["projects"] = state ? state.projects : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as FabricNetworkArgs | undefined;
            if ((!args || args.notifications === undefined) && !opts.urn) {
                throw new Error("Missing required property 'notifications'");
            }
            if ((!args || args.projects === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projects'");
            }
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notifications"] = args ? args.notifications : undefined;
            resourceInputs["projects"] = args ? args.projects : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["changeLogs"] = undefined /*out*/;
            resourceInputs["changes"] = undefined /*out*/;
            resourceInputs["connectionsCount"] = undefined /*out*/;
            resourceInputs["href"] = undefined /*out*/;
            resourceInputs["operations"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FabricNetwork.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FabricNetwork resources.
 */
export interface FabricNetworkState {
    /**
     * A permanent record of asset creation, modification, or deletion
     */
    changeLogs?: pulumi.Input<pulumi.Input<inputs.FabricNetworkChangeLog>[]>;
    /**
     * Information on asset change operation
     */
    changes?: pulumi.Input<pulumi.Input<inputs.FabricNetworkChange>[]>;
    /**
     * Number of connections associated with this network
     */
    connectionsCount?: pulumi.Input<number>;
    /**
     * Fabric Network URI information
     */
    href?: pulumi.Input<string>;
    /**
     * Fabric Network location
     */
    location?: pulumi.Input<inputs.FabricNetworkLocation>;
    /**
     * Fabric Network name. An alpha-numeric 24 characters string which can include only hyphens and underscores
     */
    name?: pulumi.Input<string>;
    /**
     * Preferences for notifications on Fabric Network configuration or status changes
     */
    notifications?: pulumi.Input<pulumi.Input<inputs.FabricNetworkNotification>[]>;
    /**
     * Network operation information that is associated with this Fabric Network
     */
    operations?: pulumi.Input<pulumi.Input<inputs.FabricNetworkOperation>[]>;
    /**
     * Fabric Network project
     */
    projects?: pulumi.Input<pulumi.Input<inputs.FabricNetworkProject>[]>;
    /**
     * Fabric Network scope
     */
    scope?: pulumi.Input<string>;
    /**
     * Fabric Network overall state
     */
    state?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FabricNetworkTimeouts>;
    /**
     * Supported Network types - EVPLAN, EPLAN, IPWAN
     */
    type?: pulumi.Input<string>;
    /**
     * Equinix-assigned network identifier
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FabricNetwork resource.
 */
export interface FabricNetworkArgs {
    /**
     * Fabric Network location
     */
    location?: pulumi.Input<inputs.FabricNetworkLocation>;
    /**
     * Fabric Network name. An alpha-numeric 24 characters string which can include only hyphens and underscores
     */
    name?: pulumi.Input<string>;
    /**
     * Preferences for notifications on Fabric Network configuration or status changes
     */
    notifications: pulumi.Input<pulumi.Input<inputs.FabricNetworkNotification>[]>;
    /**
     * Fabric Network project
     */
    projects: pulumi.Input<pulumi.Input<inputs.FabricNetworkProject>[]>;
    /**
     * Fabric Network scope
     */
    scope: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FabricNetworkTimeouts>;
    /**
     * Supported Network types - EVPLAN, EPLAN, IPWAN
     */
    type: pulumi.Input<string>;
}
