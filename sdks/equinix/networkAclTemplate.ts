// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkAclTemplate extends pulumi.CustomResource {
    /**
     * Get an existing NetworkAclTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkAclTemplateState, opts?: pulumi.CustomResourceOptions): NetworkAclTemplate {
        return new NetworkAclTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'equinix:index/networkAclTemplate:NetworkAclTemplate';

    /**
     * Returns true if the given object is an instance of NetworkAclTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkAclTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkAclTemplate.__pulumiType;
    }

    /**
     * ACL template description, up to 200 characters
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Status of ACL template provisioning process on a device, where template was applied
     */
    public /*out*/ readonly deviceAclStatus!: pulumi.Output<string>;
    /**
     * Device Details to which ACL template is assigned to.
     */
    public /*out*/ readonly deviceDetails!: pulumi.Output<outputs.NetworkAclTemplateDeviceDetail[]>;
    /**
     * Identifier of a network device where template was applied
     *
     * @deprecated Deprecated
     */
    public /*out*/ readonly deviceId!: pulumi.Output<string>;
    /**
     * One or more rules to specify allowed inbound traffic. Rules are ordered, matching traffic rule stops processing
     * subsequent ones.
     */
    public readonly inboundRules!: pulumi.Output<outputs.NetworkAclTemplateInboundRule[]>;
    /**
     * ACL template location metro code
     *
     * @deprecated Deprecated
     */
    public readonly metroCode!: pulumi.Output<string | undefined>;
    /**
     * ACL template name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The unique identifier of Project Resource to which ACL template is scoped to
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Unique identifier of ACL template resource
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;

    /**
     * Create a NetworkAclTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkAclTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkAclTemplateArgs | NetworkAclTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkAclTemplateState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceAclStatus"] = state ? state.deviceAclStatus : undefined;
            resourceInputs["deviceDetails"] = state ? state.deviceDetails : undefined;
            resourceInputs["deviceId"] = state ? state.deviceId : undefined;
            resourceInputs["inboundRules"] = state ? state.inboundRules : undefined;
            resourceInputs["metroCode"] = state ? state.metroCode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as NetworkAclTemplateArgs | undefined;
            if ((!args || args.inboundRules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inboundRules'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["inboundRules"] = args ? args.inboundRules : undefined;
            resourceInputs["metroCode"] = args ? args.metroCode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["deviceAclStatus"] = undefined /*out*/;
            resourceInputs["deviceDetails"] = undefined /*out*/;
            resourceInputs["deviceId"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkAclTemplate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkAclTemplate resources.
 */
export interface NetworkAclTemplateState {
    /**
     * ACL template description, up to 200 characters
     */
    description?: pulumi.Input<string>;
    /**
     * Status of ACL template provisioning process on a device, where template was applied
     */
    deviceAclStatus?: pulumi.Input<string>;
    /**
     * Device Details to which ACL template is assigned to.
     */
    deviceDetails?: pulumi.Input<pulumi.Input<inputs.NetworkAclTemplateDeviceDetail>[]>;
    /**
     * Identifier of a network device where template was applied
     *
     * @deprecated Deprecated
     */
    deviceId?: pulumi.Input<string>;
    /**
     * One or more rules to specify allowed inbound traffic. Rules are ordered, matching traffic rule stops processing
     * subsequent ones.
     */
    inboundRules?: pulumi.Input<pulumi.Input<inputs.NetworkAclTemplateInboundRule>[]>;
    /**
     * ACL template location metro code
     *
     * @deprecated Deprecated
     */
    metroCode?: pulumi.Input<string>;
    /**
     * ACL template name
     */
    name?: pulumi.Input<string>;
    /**
     * The unique identifier of Project Resource to which ACL template is scoped to
     */
    projectId?: pulumi.Input<string>;
    /**
     * Unique identifier of ACL template resource
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkAclTemplate resource.
 */
export interface NetworkAclTemplateArgs {
    /**
     * ACL template description, up to 200 characters
     */
    description?: pulumi.Input<string>;
    /**
     * One or more rules to specify allowed inbound traffic. Rules are ordered, matching traffic rule stops processing
     * subsequent ones.
     */
    inboundRules: pulumi.Input<pulumi.Input<inputs.NetworkAclTemplateInboundRule>[]>;
    /**
     * ACL template location metro code
     *
     * @deprecated Deprecated
     */
    metroCode?: pulumi.Input<string>;
    /**
     * ACL template name
     */
    name?: pulumi.Input<string>;
    /**
     * The unique identifier of Project Resource to which ACL template is scoped to
     */
    projectId?: pulumi.Input<string>;
}
