// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpcDhcpV4StaticBindingConfig extends pulumi.CustomResource {
    /**
     * Get an existing VpcDhcpV4StaticBindingConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcDhcpV4StaticBindingConfigState, opts?: pulumi.CustomResourceOptions): VpcDhcpV4StaticBindingConfig {
        return new VpcDhcpV4StaticBindingConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nsxt-virtual-private-cloud:index/vpcDhcpV4StaticBindingConfig:VpcDhcpV4StaticBindingConfig';

    /**
     * Returns true if the given object is an instance of VpcDhcpV4StaticBindingConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcDhcpV4StaticBindingConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcDhcpV4StaticBindingConfig.__pulumiType;
    }

    public /*out*/ readonly _revision!: pulumi.Output<number>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly gatewayAddress!: pulumi.Output<string | undefined>;
    public readonly hostName!: pulumi.Output<string | undefined>;
    public readonly ipAddress!: pulumi.Output<string>;
    public readonly leaseTime!: pulumi.Output<number | undefined>;
    public readonly macAddress!: pulumi.Output<string>;
    public readonly nsxId!: pulumi.Output<string>;
    public readonly options!: pulumi.Output<outputs.VpcDhcpV4StaticBindingConfigOptions | undefined>;
    public readonly parentPath!: pulumi.Output<string>;
    public /*out*/ readonly path!: pulumi.Output<string>;
    public readonly resourceType!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.VpcDhcpV4StaticBindingConfigTag[] | undefined>;

    /**
     * Create a VpcDhcpV4StaticBindingConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcDhcpV4StaticBindingConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcDhcpV4StaticBindingConfigArgs | VpcDhcpV4StaticBindingConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcDhcpV4StaticBindingConfigState | undefined;
            resourceInputs["_revision"] = state ? state._revision : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["gatewayAddress"] = state ? state.gatewayAddress : undefined;
            resourceInputs["hostName"] = state ? state.hostName : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["leaseTime"] = state ? state.leaseTime : undefined;
            resourceInputs["macAddress"] = state ? state.macAddress : undefined;
            resourceInputs["nsxId"] = state ? state.nsxId : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["parentPath"] = state ? state.parentPath : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as VpcDhcpV4StaticBindingConfigArgs | undefined;
            if ((!args || args.ipAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipAddress'");
            }
            if ((!args || args.macAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'macAddress'");
            }
            if ((!args || args.nsxId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nsxId'");
            }
            if ((!args || args.parentPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentPath'");
            }
            if ((!args || args.resourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["gatewayAddress"] = args ? args.gatewayAddress : undefined;
            resourceInputs["hostName"] = args ? args.hostName : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["leaseTime"] = args ? args.leaseTime : undefined;
            resourceInputs["macAddress"] = args ? args.macAddress : undefined;
            resourceInputs["nsxId"] = args ? args.nsxId : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["parentPath"] = args ? args.parentPath : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["_revision"] = undefined /*out*/;
            resourceInputs["path"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcDhcpV4StaticBindingConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpcDhcpV4StaticBindingConfig resources.
 */
export interface VpcDhcpV4StaticBindingConfigState {
    _revision?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    gatewayAddress?: pulumi.Input<string>;
    hostName?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    leaseTime?: pulumi.Input<number>;
    macAddress?: pulumi.Input<string>;
    nsxId?: pulumi.Input<string>;
    options?: pulumi.Input<inputs.VpcDhcpV4StaticBindingConfigOptions>;
    parentPath?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    resourceType?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.VpcDhcpV4StaticBindingConfigTag>[]>;
}

/**
 * The set of arguments for constructing a VpcDhcpV4StaticBindingConfig resource.
 */
export interface VpcDhcpV4StaticBindingConfigArgs {
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    gatewayAddress?: pulumi.Input<string>;
    hostName?: pulumi.Input<string>;
    ipAddress: pulumi.Input<string>;
    leaseTime?: pulumi.Input<number>;
    macAddress: pulumi.Input<string>;
    nsxId: pulumi.Input<string>;
    options?: pulumi.Input<inputs.VpcDhcpV4StaticBindingConfigOptions>;
    parentPath: pulumi.Input<string>;
    resourceType: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.VpcDhcpV4StaticBindingConfigTag>[]>;
}
