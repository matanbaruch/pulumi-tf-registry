// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpcSubnet extends pulumi.CustomResource {
    /**
     * Get an existing VpcSubnet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcSubnetState, opts?: pulumi.CustomResourceOptions): VpcSubnet {
        return new VpcSubnet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nsxt-virtual-private-cloud:index/vpcSubnet:VpcSubnet';

    /**
     * Returns true if the given object is an instance of VpcSubnet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcSubnet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcSubnet.__pulumiType;
    }

    public /*out*/ readonly _revision!: pulumi.Output<number>;
    public readonly accessMode!: pulumi.Output<string | undefined>;
    public readonly advancedConfig!: pulumi.Output<outputs.VpcSubnetAdvancedConfig | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly dhcpConfig!: pulumi.Output<outputs.VpcSubnetDhcpConfig | undefined>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly ipAddresses!: pulumi.Output<string[] | undefined>;
    public readonly ipv4SubnetSize!: pulumi.Output<number>;
    public readonly nsxId!: pulumi.Output<string>;
    public /*out*/ readonly path!: pulumi.Output<string>;
    public readonly resourceType!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.VpcSubnetTag[] | undefined>;

    /**
     * Create a VpcSubnet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcSubnetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcSubnetArgs | VpcSubnetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcSubnetState | undefined;
            resourceInputs["_revision"] = state ? state._revision : undefined;
            resourceInputs["accessMode"] = state ? state.accessMode : undefined;
            resourceInputs["advancedConfig"] = state ? state.advancedConfig : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dhcpConfig"] = state ? state.dhcpConfig : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["ipAddresses"] = state ? state.ipAddresses : undefined;
            resourceInputs["ipv4SubnetSize"] = state ? state.ipv4SubnetSize : undefined;
            resourceInputs["nsxId"] = state ? state.nsxId : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as VpcSubnetArgs | undefined;
            if ((!args || args.nsxId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nsxId'");
            }
            resourceInputs["accessMode"] = args ? args.accessMode : undefined;
            resourceInputs["advancedConfig"] = args ? args.advancedConfig : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dhcpConfig"] = args ? args.dhcpConfig : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["ipAddresses"] = args ? args.ipAddresses : undefined;
            resourceInputs["ipv4SubnetSize"] = args ? args.ipv4SubnetSize : undefined;
            resourceInputs["nsxId"] = args ? args.nsxId : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["_revision"] = undefined /*out*/;
            resourceInputs["path"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcSubnet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpcSubnet resources.
 */
export interface VpcSubnetState {
    _revision?: pulumi.Input<number>;
    accessMode?: pulumi.Input<string>;
    advancedConfig?: pulumi.Input<inputs.VpcSubnetAdvancedConfig>;
    description?: pulumi.Input<string>;
    dhcpConfig?: pulumi.Input<inputs.VpcSubnetDhcpConfig>;
    displayName?: pulumi.Input<string>;
    ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    ipv4SubnetSize?: pulumi.Input<number>;
    nsxId?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    resourceType?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.VpcSubnetTag>[]>;
}

/**
 * The set of arguments for constructing a VpcSubnet resource.
 */
export interface VpcSubnetArgs {
    accessMode?: pulumi.Input<string>;
    advancedConfig?: pulumi.Input<inputs.VpcSubnetAdvancedConfig>;
    description?: pulumi.Input<string>;
    dhcpConfig?: pulumi.Input<inputs.VpcSubnetDhcpConfig>;
    displayName?: pulumi.Input<string>;
    ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    ipv4SubnetSize?: pulumi.Input<number>;
    nsxId: pulumi.Input<string>;
    resourceType?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.VpcSubnetTag>[]>;
}
