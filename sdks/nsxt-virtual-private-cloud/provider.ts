// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The provider type for the nsxt-virtual-private-cloud package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'nsxt-virtual-private-cloud';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    /**
     * CA certificate passed as string
     */
    public readonly ca!: pulumi.Output<string | undefined>;
    public readonly caFile!: pulumi.Output<string | undefined>;
    /**
     * Client certificate passed as string
     */
    public readonly clientAuthCert!: pulumi.Output<string | undefined>;
    public readonly clientAuthCertFile!: pulumi.Output<string | undefined>;
    /**
     * Client certificate key passed as string
     */
    public readonly clientAuthKey!: pulumi.Output<string | undefined>;
    public readonly clientAuthKeyFile!: pulumi.Output<string | undefined>;
    /**
     * Enforcement Point for NSXT Policy
     */
    public readonly enforcementPoint!: pulumi.Output<string | undefined>;
    /**
     * The hostname or IP address of the NSX manager.
     */
    public readonly host!: pulumi.Output<string | undefined>;
    /**
     * Organisation identifier
     */
    public readonly org!: pulumi.Output<string | undefined>;
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Identifier for the project under the organisation
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Site for NSXT Policy
     */
    public readonly site!: pulumi.Output<string | undefined>;
    public readonly username!: pulumi.Output<string | undefined>;
    /**
     * Identifier for the VPC under the project of an organisation
     */
    public readonly vpc!: pulumi.Output<string>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.vpc === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpc'");
            }
            resourceInputs["allowUnverifiedSsl"] = pulumi.output(args ? args.allowUnverifiedSsl : undefined).apply(JSON.stringify);
            resourceInputs["ca"] = args ? args.ca : undefined;
            resourceInputs["caFile"] = args ? args.caFile : undefined;
            resourceInputs["clientAuthCert"] = args ? args.clientAuthCert : undefined;
            resourceInputs["clientAuthCertFile"] = args ? args.clientAuthCertFile : undefined;
            resourceInputs["clientAuthKey"] = args ? args.clientAuthKey : undefined;
            resourceInputs["clientAuthKeyFile"] = args ? args.clientAuthKeyFile : undefined;
            resourceInputs["connectionTimeout"] = pulumi.output(args ? args.connectionTimeout : undefined).apply(JSON.stringify);
            resourceInputs["enforcementPoint"] = args ? args.enforcementPoint : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["maxRetries"] = pulumi.output(args ? args.maxRetries : undefined).apply(JSON.stringify);
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["remoteAuth"] = pulumi.output(args ? args.remoteAuth : undefined).apply(JSON.stringify);
            resourceInputs["retryInterval"] = pulumi.output(args ? args.retryInterval : undefined).apply(JSON.stringify);
            resourceInputs["retryOnStatusCodes"] = pulumi.output(args ? args.retryOnStatusCodes : undefined).apply(JSON.stringify);
            resourceInputs["site"] = args ? args.site : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["vpc"] = args ? args.vpc : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Provider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    allowUnverifiedSsl?: pulumi.Input<boolean>;
    /**
     * CA certificate passed as string
     */
    ca?: pulumi.Input<string>;
    caFile?: pulumi.Input<string>;
    /**
     * Client certificate passed as string
     */
    clientAuthCert?: pulumi.Input<string>;
    clientAuthCertFile?: pulumi.Input<string>;
    /**
     * Client certificate key passed as string
     */
    clientAuthKey?: pulumi.Input<string>;
    clientAuthKeyFile?: pulumi.Input<string>;
    /**
     * Maximum time in milliseconds for connection to wait for a TLS handshake. Zero means no timeout
     */
    connectionTimeout?: pulumi.Input<number>;
    /**
     * Enforcement Point for NSXT Policy
     */
    enforcementPoint?: pulumi.Input<string>;
    /**
     * The hostname or IP address of the NSX manager.
     */
    host?: pulumi.Input<string>;
    /**
     * Maximum number of HTTP client retries
     */
    maxRetries?: pulumi.Input<number>;
    /**
     * Organisation identifier
     */
    org?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    /**
     * Identifier for the project under the organisation
     */
    project: pulumi.Input<string>;
    remoteAuth?: pulumi.Input<boolean>;
    /**
     * Delay interval in milliseconds between retries of a request
     */
    retryInterval?: pulumi.Input<number>;
    /**
     * HTTP replies status codes to retry on
     */
    retryOnStatusCodes?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Site for NSXT Policy
     */
    site?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    /**
     * Identifier for the VPC under the project of an organisation
     */
    vpc: pulumi.Input<string>;
}
