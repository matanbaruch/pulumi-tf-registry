// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetPolicyVpcNatRuleArgs, GetPolicyVpcNatRuleResult, GetPolicyVpcNatRuleOutputArgs } from "./getPolicyVpcNatRule";
export const getPolicyVpcNatRule: typeof import("./getPolicyVpcNatRule").getPolicyVpcNatRule = null as any;
export const getPolicyVpcNatRuleOutput: typeof import("./getPolicyVpcNatRule").getPolicyVpcNatRuleOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyVpcNatRule","getPolicyVpcNatRuleOutput"], () => require("./getPolicyVpcNatRule"));

export { GetVpcDhcpV4StaticBindingConfigArgs, GetVpcDhcpV4StaticBindingConfigResult, GetVpcDhcpV4StaticBindingConfigOutputArgs } from "./getVpcDhcpV4StaticBindingConfig";
export const getVpcDhcpV4StaticBindingConfig: typeof import("./getVpcDhcpV4StaticBindingConfig").getVpcDhcpV4StaticBindingConfig = null as any;
export const getVpcDhcpV4StaticBindingConfigOutput: typeof import("./getVpcDhcpV4StaticBindingConfig").getVpcDhcpV4StaticBindingConfigOutput = null as any;
utilities.lazyLoad(exports, ["getVpcDhcpV4StaticBindingConfig","getVpcDhcpV4StaticBindingConfigOutput"], () => require("./getVpcDhcpV4StaticBindingConfig"));

export { GetVpcGatewayPolicyArgs, GetVpcGatewayPolicyResult, GetVpcGatewayPolicyOutputArgs } from "./getVpcGatewayPolicy";
export const getVpcGatewayPolicy: typeof import("./getVpcGatewayPolicy").getVpcGatewayPolicy = null as any;
export const getVpcGatewayPolicyOutput: typeof import("./getVpcGatewayPolicy").getVpcGatewayPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getVpcGatewayPolicy","getVpcGatewayPolicyOutput"], () => require("./getVpcGatewayPolicy"));

export { GetVpcGatewayPolicyRuleArgs, GetVpcGatewayPolicyRuleResult, GetVpcGatewayPolicyRuleOutputArgs } from "./getVpcGatewayPolicyRule";
export const getVpcGatewayPolicyRule: typeof import("./getVpcGatewayPolicyRule").getVpcGatewayPolicyRule = null as any;
export const getVpcGatewayPolicyRuleOutput: typeof import("./getVpcGatewayPolicyRule").getVpcGatewayPolicyRuleOutput = null as any;
utilities.lazyLoad(exports, ["getVpcGatewayPolicyRule","getVpcGatewayPolicyRuleOutput"], () => require("./getVpcGatewayPolicyRule"));

export { GetVpcGroupArgs, GetVpcGroupResult, GetVpcGroupOutputArgs } from "./getVpcGroup";
export const getVpcGroup: typeof import("./getVpcGroup").getVpcGroup = null as any;
export const getVpcGroupOutput: typeof import("./getVpcGroup").getVpcGroupOutput = null as any;
utilities.lazyLoad(exports, ["getVpcGroup","getVpcGroupOutput"], () => require("./getVpcGroup"));

export { GetVpcIpAddressAllocationArgs, GetVpcIpAddressAllocationResult, GetVpcIpAddressAllocationOutputArgs } from "./getVpcIpAddressAllocation";
export const getVpcIpAddressAllocation: typeof import("./getVpcIpAddressAllocation").getVpcIpAddressAllocation = null as any;
export const getVpcIpAddressAllocationOutput: typeof import("./getVpcIpAddressAllocation").getVpcIpAddressAllocationOutput = null as any;
utilities.lazyLoad(exports, ["getVpcIpAddressAllocation","getVpcIpAddressAllocationOutput"], () => require("./getVpcIpAddressAllocation"));

export { GetVpcIpAddressBlockArgs, GetVpcIpAddressBlockResult, GetVpcIpAddressBlockOutputArgs } from "./getVpcIpAddressBlock";
export const getVpcIpAddressBlock: typeof import("./getVpcIpAddressBlock").getVpcIpAddressBlock = null as any;
export const getVpcIpAddressBlockOutput: typeof import("./getVpcIpAddressBlock").getVpcIpAddressBlockOutput = null as any;
utilities.lazyLoad(exports, ["getVpcIpAddressBlock","getVpcIpAddressBlockOutput"], () => require("./getVpcIpAddressBlock"));

export { GetVpcIpAddressPoolArgs, GetVpcIpAddressPoolResult, GetVpcIpAddressPoolOutputArgs } from "./getVpcIpAddressPool";
export const getVpcIpAddressPool: typeof import("./getVpcIpAddressPool").getVpcIpAddressPool = null as any;
export const getVpcIpAddressPoolOutput: typeof import("./getVpcIpAddressPool").getVpcIpAddressPoolOutput = null as any;
utilities.lazyLoad(exports, ["getVpcIpAddressPool","getVpcIpAddressPoolOutput"], () => require("./getVpcIpAddressPool"));

export { GetVpcPolicyContextProfileArgs, GetVpcPolicyContextProfileResult, GetVpcPolicyContextProfileOutputArgs } from "./getVpcPolicyContextProfile";
export const getVpcPolicyContextProfile: typeof import("./getVpcPolicyContextProfile").getVpcPolicyContextProfile = null as any;
export const getVpcPolicyContextProfileOutput: typeof import("./getVpcPolicyContextProfile").getVpcPolicyContextProfileOutput = null as any;
utilities.lazyLoad(exports, ["getVpcPolicyContextProfile","getVpcPolicyContextProfileOutput"], () => require("./getVpcPolicyContextProfile"));

export { GetVpcSecurityPolicyArgs, GetVpcSecurityPolicyResult, GetVpcSecurityPolicyOutputArgs } from "./getVpcSecurityPolicy";
export const getVpcSecurityPolicy: typeof import("./getVpcSecurityPolicy").getVpcSecurityPolicy = null as any;
export const getVpcSecurityPolicyOutput: typeof import("./getVpcSecurityPolicy").getVpcSecurityPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getVpcSecurityPolicy","getVpcSecurityPolicyOutput"], () => require("./getVpcSecurityPolicy"));

export { GetVpcSecurityPolicyRuleArgs, GetVpcSecurityPolicyRuleResult, GetVpcSecurityPolicyRuleOutputArgs } from "./getVpcSecurityPolicyRule";
export const getVpcSecurityPolicyRule: typeof import("./getVpcSecurityPolicyRule").getVpcSecurityPolicyRule = null as any;
export const getVpcSecurityPolicyRuleOutput: typeof import("./getVpcSecurityPolicyRule").getVpcSecurityPolicyRuleOutput = null as any;
utilities.lazyLoad(exports, ["getVpcSecurityPolicyRule","getVpcSecurityPolicyRuleOutput"], () => require("./getVpcSecurityPolicyRule"));

export { GetVpcServiceArgs, GetVpcServiceResult, GetVpcServiceOutputArgs } from "./getVpcService";
export const getVpcService: typeof import("./getVpcService").getVpcService = null as any;
export const getVpcServiceOutput: typeof import("./getVpcService").getVpcServiceOutput = null as any;
utilities.lazyLoad(exports, ["getVpcService","getVpcServiceOutput"], () => require("./getVpcService"));

export { GetVpcStaticRoutesArgs, GetVpcStaticRoutesResult, GetVpcStaticRoutesOutputArgs } from "./getVpcStaticRoutes";
export const getVpcStaticRoutes: typeof import("./getVpcStaticRoutes").getVpcStaticRoutes = null as any;
export const getVpcStaticRoutesOutput: typeof import("./getVpcStaticRoutes").getVpcStaticRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getVpcStaticRoutes","getVpcStaticRoutesOutput"], () => require("./getVpcStaticRoutes"));

export { GetVpcSubnetArgs, GetVpcSubnetResult, GetVpcSubnetOutputArgs } from "./getVpcSubnet";
export const getVpcSubnet: typeof import("./getVpcSubnet").getVpcSubnet = null as any;
export const getVpcSubnetOutput: typeof import("./getVpcSubnet").getVpcSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getVpcSubnet","getVpcSubnetOutput"], () => require("./getVpcSubnet"));

export { GetVpcSubnetIpAddressAllocationArgs, GetVpcSubnetIpAddressAllocationResult, GetVpcSubnetIpAddressAllocationOutputArgs } from "./getVpcSubnetIpAddressAllocation";
export const getVpcSubnetIpAddressAllocation: typeof import("./getVpcSubnetIpAddressAllocation").getVpcSubnetIpAddressAllocation = null as any;
export const getVpcSubnetIpAddressAllocationOutput: typeof import("./getVpcSubnetIpAddressAllocation").getVpcSubnetIpAddressAllocationOutput = null as any;
utilities.lazyLoad(exports, ["getVpcSubnetIpAddressAllocation","getVpcSubnetIpAddressAllocationOutput"], () => require("./getVpcSubnetIpAddressAllocation"));

export { GetVpcSubnetPortArgs, GetVpcSubnetPortResult, GetVpcSubnetPortOutputArgs } from "./getVpcSubnetPort";
export const getVpcSubnetPort: typeof import("./getVpcSubnetPort").getVpcSubnetPort = null as any;
export const getVpcSubnetPortOutput: typeof import("./getVpcSubnetPort").getVpcSubnetPortOutput = null as any;
utilities.lazyLoad(exports, ["getVpcSubnetPort","getVpcSubnetPortOutput"], () => require("./getVpcSubnetPort"));

export { GetVpcVmArgs, GetVpcVmResult, GetVpcVmOutputArgs } from "./getVpcVm";
export const getVpcVm: typeof import("./getVpcVm").getVpcVm = null as any;
export const getVpcVmOutput: typeof import("./getVpcVm").getVpcVmOutput = null as any;
utilities.lazyLoad(exports, ["getVpcVm","getVpcVmOutput"], () => require("./getVpcVm"));

export { PolicyVpcNatRuleArgs, PolicyVpcNatRuleState } from "./policyVpcNatRule";
export type PolicyVpcNatRule = import("./policyVpcNatRule").PolicyVpcNatRule;
export const PolicyVpcNatRule: typeof import("./policyVpcNatRule").PolicyVpcNatRule = null as any;
utilities.lazyLoad(exports, ["PolicyVpcNatRule"], () => require("./policyVpcNatRule"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { VpcDhcpV4StaticBindingConfigArgs, VpcDhcpV4StaticBindingConfigState } from "./vpcDhcpV4StaticBindingConfig";
export type VpcDhcpV4StaticBindingConfig = import("./vpcDhcpV4StaticBindingConfig").VpcDhcpV4StaticBindingConfig;
export const VpcDhcpV4StaticBindingConfig: typeof import("./vpcDhcpV4StaticBindingConfig").VpcDhcpV4StaticBindingConfig = null as any;
utilities.lazyLoad(exports, ["VpcDhcpV4StaticBindingConfig"], () => require("./vpcDhcpV4StaticBindingConfig"));

export { VpcGatewayPolicyArgs, VpcGatewayPolicyState } from "./vpcGatewayPolicy";
export type VpcGatewayPolicy = import("./vpcGatewayPolicy").VpcGatewayPolicy;
export const VpcGatewayPolicy: typeof import("./vpcGatewayPolicy").VpcGatewayPolicy = null as any;
utilities.lazyLoad(exports, ["VpcGatewayPolicy"], () => require("./vpcGatewayPolicy"));

export { VpcGatewayPolicyRuleArgs, VpcGatewayPolicyRuleState } from "./vpcGatewayPolicyRule";
export type VpcGatewayPolicyRule = import("./vpcGatewayPolicyRule").VpcGatewayPolicyRule;
export const VpcGatewayPolicyRule: typeof import("./vpcGatewayPolicyRule").VpcGatewayPolicyRule = null as any;
utilities.lazyLoad(exports, ["VpcGatewayPolicyRule"], () => require("./vpcGatewayPolicyRule"));

export { VpcGroupArgs, VpcGroupState } from "./vpcGroup";
export type VpcGroup = import("./vpcGroup").VpcGroup;
export const VpcGroup: typeof import("./vpcGroup").VpcGroup = null as any;
utilities.lazyLoad(exports, ["VpcGroup"], () => require("./vpcGroup"));

export { VpcIpAddressAllocationArgs, VpcIpAddressAllocationState } from "./vpcIpAddressAllocation";
export type VpcIpAddressAllocation = import("./vpcIpAddressAllocation").VpcIpAddressAllocation;
export const VpcIpAddressAllocation: typeof import("./vpcIpAddressAllocation").VpcIpAddressAllocation = null as any;
utilities.lazyLoad(exports, ["VpcIpAddressAllocation"], () => require("./vpcIpAddressAllocation"));

export { VpcSecurityPolicyArgs, VpcSecurityPolicyState } from "./vpcSecurityPolicy";
export type VpcSecurityPolicy = import("./vpcSecurityPolicy").VpcSecurityPolicy;
export const VpcSecurityPolicy: typeof import("./vpcSecurityPolicy").VpcSecurityPolicy = null as any;
utilities.lazyLoad(exports, ["VpcSecurityPolicy"], () => require("./vpcSecurityPolicy"));

export { VpcSecurityPolicyRuleArgs, VpcSecurityPolicyRuleState } from "./vpcSecurityPolicyRule";
export type VpcSecurityPolicyRule = import("./vpcSecurityPolicyRule").VpcSecurityPolicyRule;
export const VpcSecurityPolicyRule: typeof import("./vpcSecurityPolicyRule").VpcSecurityPolicyRule = null as any;
utilities.lazyLoad(exports, ["VpcSecurityPolicyRule"], () => require("./vpcSecurityPolicyRule"));

export { VpcStaticRoutesArgs, VpcStaticRoutesState } from "./vpcStaticRoutes";
export type VpcStaticRoutes = import("./vpcStaticRoutes").VpcStaticRoutes;
export const VpcStaticRoutes: typeof import("./vpcStaticRoutes").VpcStaticRoutes = null as any;
utilities.lazyLoad(exports, ["VpcStaticRoutes"], () => require("./vpcStaticRoutes"));

export { VpcSubnetArgs, VpcSubnetState } from "./vpcSubnet";
export type VpcSubnet = import("./vpcSubnet").VpcSubnet;
export const VpcSubnet: typeof import("./vpcSubnet").VpcSubnet = null as any;
utilities.lazyLoad(exports, ["VpcSubnet"], () => require("./vpcSubnet"));

export { VpcSubnetIpAddressAllocationArgs, VpcSubnetIpAddressAllocationState } from "./vpcSubnetIpAddressAllocation";
export type VpcSubnetIpAddressAllocation = import("./vpcSubnetIpAddressAllocation").VpcSubnetIpAddressAllocation;
export const VpcSubnetIpAddressAllocation: typeof import("./vpcSubnetIpAddressAllocation").VpcSubnetIpAddressAllocation = null as any;
utilities.lazyLoad(exports, ["VpcSubnetIpAddressAllocation"], () => require("./vpcSubnetIpAddressAllocation"));

export { VpcSubnetPortArgs, VpcSubnetPortState } from "./vpcSubnetPort";
export type VpcSubnetPort = import("./vpcSubnetPort").VpcSubnetPort;
export const VpcSubnetPort: typeof import("./vpcSubnetPort").VpcSubnetPort = null as any;
utilities.lazyLoad(exports, ["VpcSubnetPort"], () => require("./vpcSubnetPort"));

export { VpcVmTagsArgs, VpcVmTagsState } from "./vpcVmTags";
export type VpcVmTags = import("./vpcVmTags").VpcVmTags;
export const VpcVmTags: typeof import("./vpcVmTags").VpcVmTags = null as any;
utilities.lazyLoad(exports, ["VpcVmTags"], () => require("./vpcVmTags"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "nsxt-virtual-private-cloud:index/policyVpcNatRule:PolicyVpcNatRule":
                return new PolicyVpcNatRule(name, <any>undefined, { urn })
            case "nsxt-virtual-private-cloud:index/vpcDhcpV4StaticBindingConfig:VpcDhcpV4StaticBindingConfig":
                return new VpcDhcpV4StaticBindingConfig(name, <any>undefined, { urn })
            case "nsxt-virtual-private-cloud:index/vpcGatewayPolicy:VpcGatewayPolicy":
                return new VpcGatewayPolicy(name, <any>undefined, { urn })
            case "nsxt-virtual-private-cloud:index/vpcGatewayPolicyRule:VpcGatewayPolicyRule":
                return new VpcGatewayPolicyRule(name, <any>undefined, { urn })
            case "nsxt-virtual-private-cloud:index/vpcGroup:VpcGroup":
                return new VpcGroup(name, <any>undefined, { urn })
            case "nsxt-virtual-private-cloud:index/vpcIpAddressAllocation:VpcIpAddressAllocation":
                return new VpcIpAddressAllocation(name, <any>undefined, { urn })
            case "nsxt-virtual-private-cloud:index/vpcSecurityPolicy:VpcSecurityPolicy":
                return new VpcSecurityPolicy(name, <any>undefined, { urn })
            case "nsxt-virtual-private-cloud:index/vpcSecurityPolicyRule:VpcSecurityPolicyRule":
                return new VpcSecurityPolicyRule(name, <any>undefined, { urn })
            case "nsxt-virtual-private-cloud:index/vpcStaticRoutes:VpcStaticRoutes":
                return new VpcStaticRoutes(name, <any>undefined, { urn })
            case "nsxt-virtual-private-cloud:index/vpcSubnet:VpcSubnet":
                return new VpcSubnet(name, <any>undefined, { urn })
            case "nsxt-virtual-private-cloud:index/vpcSubnetIpAddressAllocation:VpcSubnetIpAddressAllocation":
                return new VpcSubnetIpAddressAllocation(name, <any>undefined, { urn })
            case "nsxt-virtual-private-cloud:index/vpcSubnetPort:VpcSubnetPort":
                return new VpcSubnetPort(name, <any>undefined, { urn })
            case "nsxt-virtual-private-cloud:index/vpcVmTags:VpcVmTags":
                return new VpcVmTags(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("nsxt-virtual-private-cloud", "index/policyVpcNatRule", _module)
pulumi.runtime.registerResourceModule("nsxt-virtual-private-cloud", "index/vpcDhcpV4StaticBindingConfig", _module)
pulumi.runtime.registerResourceModule("nsxt-virtual-private-cloud", "index/vpcGatewayPolicy", _module)
pulumi.runtime.registerResourceModule("nsxt-virtual-private-cloud", "index/vpcGatewayPolicyRule", _module)
pulumi.runtime.registerResourceModule("nsxt-virtual-private-cloud", "index/vpcGroup", _module)
pulumi.runtime.registerResourceModule("nsxt-virtual-private-cloud", "index/vpcIpAddressAllocation", _module)
pulumi.runtime.registerResourceModule("nsxt-virtual-private-cloud", "index/vpcSecurityPolicy", _module)
pulumi.runtime.registerResourceModule("nsxt-virtual-private-cloud", "index/vpcSecurityPolicyRule", _module)
pulumi.runtime.registerResourceModule("nsxt-virtual-private-cloud", "index/vpcStaticRoutes", _module)
pulumi.runtime.registerResourceModule("nsxt-virtual-private-cloud", "index/vpcSubnet", _module)
pulumi.runtime.registerResourceModule("nsxt-virtual-private-cloud", "index/vpcSubnetIpAddressAllocation", _module)
pulumi.runtime.registerResourceModule("nsxt-virtual-private-cloud", "index/vpcSubnetPort", _module)
pulumi.runtime.registerResourceModule("nsxt-virtual-private-cloud", "index/vpcVmTags", _module)
pulumi.runtime.registerResourcePackage("nsxt-virtual-private-cloud", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:nsxt-virtual-private-cloud") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
