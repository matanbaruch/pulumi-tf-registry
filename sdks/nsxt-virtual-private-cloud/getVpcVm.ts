// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getVpcVm(args?: GetVpcVmArgs, opts?: pulumi.InvokeOptions): Promise<GetVpcVmResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nsxt-virtual-private-cloud:index/getVpcVm:getVpcVm", {
        "displayName": args.displayName,
        "externalId": args.externalId,
        "id": args.id,
        "powerState": args.powerState,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVpcVm.
 */
export interface GetVpcVmArgs {
    displayName?: string;
    externalId?: string;
    id?: string;
    powerState?: string;
}

/**
 * A collection of values returned by getVpcVm.
 */
export interface GetVpcVmResult {
    readonly displayName: string;
    readonly externalId: string;
    readonly id: string;
    readonly powerState: string;
}
export function getVpcVmOutput(args?: GetVpcVmOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVpcVmResult> {
    return pulumi.output(args).apply((a: any) => getVpcVm(a, opts))
}

/**
 * A collection of arguments for invoking getVpcVm.
 */
export interface GetVpcVmOutputArgs {
    displayName?: pulumi.Input<string>;
    externalId?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    powerState?: pulumi.Input<string>;
}
