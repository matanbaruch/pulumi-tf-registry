// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetPolicyVpcNatRuleContext {
    /**
     * The domain ID of the object. Applicable for groups.
     */
    domain?: string;
    /**
     * The scope in which the object exists or spans out of. It can be any one of vpc, project or infra.
     */
    scope: string;
}

export interface GetVpcDhcpV4StaticBindingConfigContext {
    /**
     * The domain ID of the object. Applicable for groups.
     */
    domain?: string;
    /**
     * The scope in which the object exists or spans out of. It can be any one of vpc, project or infra.
     */
    scope: string;
}

export interface GetVpcGatewayPolicyContext {
    /**
     * The domain ID of the object. Applicable for groups.
     */
    domain?: string;
    /**
     * The scope in which the object exists or spans out of. It can be any one of vpc, project or infra.
     */
    scope: string;
}

export interface GetVpcGatewayPolicyRuleContext {
    /**
     * The domain ID of the object. Applicable for groups.
     */
    domain?: string;
    /**
     * The scope in which the object exists or spans out of. It can be any one of vpc, project or infra.
     */
    scope: string;
}

export interface GetVpcGroupContext {
    /**
     * The domain ID of the object. Applicable for groups.
     */
    domain?: string;
    /**
     * The scope in which the object exists or spans out of. It can be any one of vpc, project or infra.
     */
    scope: string;
}

export interface GetVpcIpAddressAllocationContext {
    /**
     * The domain ID of the object. Applicable for groups.
     */
    domain?: string;
    /**
     * The scope in which the object exists or spans out of. It can be any one of vpc, project or infra.
     */
    scope: string;
}

export interface GetVpcIpAddressBlockContext {
    /**
     * The domain ID of the object. Applicable for groups.
     */
    domain?: string;
    /**
     * The scope in which the object exists or spans out of. It can be any one of vpc, project or infra.
     */
    scope: string;
}

export interface GetVpcIpAddressPoolContext {
    /**
     * The domain ID of the object. Applicable for groups.
     */
    domain?: string;
    /**
     * The scope in which the object exists or spans out of. It can be any one of vpc, project or infra.
     */
    scope: string;
}

export interface GetVpcPolicyContextProfileContext {
    /**
     * The domain ID of the object. Applicable for groups.
     */
    domain?: string;
    /**
     * The scope in which the object exists or spans out of. It can be any one of vpc, project or infra.
     */
    scope: string;
}

export interface GetVpcSecurityPolicyContext {
    /**
     * The domain ID of the object. Applicable for groups.
     */
    domain?: string;
    /**
     * The scope in which the object exists or spans out of. It can be any one of vpc, project or infra.
     */
    scope: string;
}

export interface GetVpcSecurityPolicyRuleContext {
    /**
     * The domain ID of the object. Applicable for groups.
     */
    domain?: string;
    /**
     * The scope in which the object exists or spans out of. It can be any one of vpc, project or infra.
     */
    scope: string;
}

export interface GetVpcServiceContext {
    /**
     * The domain ID of the object. Applicable for groups.
     */
    domain?: string;
    /**
     * The scope in which the object exists or spans out of. It can be any one of vpc, project or infra.
     */
    scope: string;
}

export interface GetVpcStaticRoutesContext {
    /**
     * The domain ID of the object. Applicable for groups.
     */
    domain?: string;
    /**
     * The scope in which the object exists or spans out of. It can be any one of vpc, project or infra.
     */
    scope: string;
}

export interface GetVpcSubnetContext {
    /**
     * The domain ID of the object. Applicable for groups.
     */
    domain?: string;
    /**
     * The scope in which the object exists or spans out of. It can be any one of vpc, project or infra.
     */
    scope: string;
}

export interface GetVpcSubnetIpAddressAllocationContext {
    /**
     * The domain ID of the object. Applicable for groups.
     */
    domain?: string;
    /**
     * The scope in which the object exists or spans out of. It can be any one of vpc, project or infra.
     */
    scope: string;
}

export interface GetVpcSubnetPortContext {
    /**
     * The domain ID of the object. Applicable for groups.
     */
    domain?: string;
    /**
     * The scope in which the object exists or spans out of. It can be any one of vpc, project or infra.
     */
    scope: string;
}

export interface PolicyVpcNatRuleTag {
    path: string;
    scope?: string;
    tag?: string;
}

export interface VpcDhcpV4StaticBindingConfigOptions {
    option121?: outputs.VpcDhcpV4StaticBindingConfigOptionsOption121;
    others?: outputs.VpcDhcpV4StaticBindingConfigOptionsOther[];
    path: string;
}

export interface VpcDhcpV4StaticBindingConfigOptionsOption121 {
    path: string;
    staticRoutes: outputs.VpcDhcpV4StaticBindingConfigOptionsOption121StaticRoute[];
}

export interface VpcDhcpV4StaticBindingConfigOptionsOption121StaticRoute {
    network: string;
    nextHop: string;
    path: string;
}

export interface VpcDhcpV4StaticBindingConfigOptionsOther {
    code: number;
    path: string;
    values: string[];
}

export interface VpcDhcpV4StaticBindingConfigTag {
    path: string;
    scope?: string;
    tag?: string;
}

export interface VpcGatewayPolicyRuleServiceEntry {
    _revision: string;
    alg: string;
    description?: string;
    destinationPorts: string[];
    displayName: string;
    etherType: number;
    icmpCode: number;
    icmpType: number;
    l4Protocol: string;
    nestedServicePath: string;
    nsxId: string;
    path: string;
    protocol: string;
    protocolNumber: number;
    resourceType: string;
    sourcePorts: string[];
    tags?: outputs.VpcGatewayPolicyRuleServiceEntryTag[];
}

export interface VpcGatewayPolicyRuleServiceEntryTag {
    path: string;
    scope?: string;
    tag?: string;
}

export interface VpcGatewayPolicyRuleTag {
    path: string;
    scope?: string;
    tag?: string;
}

export interface VpcGatewayPolicyTag {
    path: string;
    scope?: string;
    tag?: string;
}

export interface VpcGroupExpression {
    conjunctionOperator?: string;
    excludes?: outputs.VpcGroupExpressionExclude[];
    expressions?: outputs.VpcGroupExpressionExpression[];
    externalIds?: string[];
    ipAddresses?: string[];
    key?: string;
    markedForDelete?: boolean;
    memberType?: string;
    operator?: string;
    paths?: string[];
    resourceType: string;
    scopeOperator?: string;
    tags?: outputs.VpcGroupExpressionTag[];
    value?: string;
}

export interface VpcGroupExpressionExclude {
    ipAddressExpression?: outputs.VpcGroupExpressionExcludeIpAddressExpression;
    path: string;
    pathExpression?: outputs.VpcGroupExpressionExcludePathExpression;
}

export interface VpcGroupExpressionExcludeIpAddressExpression {
    _revision: number;
    description?: string;
    displayName: string;
    ipAddresses: string[];
    path: string;
    resourceType: string;
    tags?: outputs.VpcGroupExpressionExcludeIpAddressExpressionTag[];
}

export interface VpcGroupExpressionExcludeIpAddressExpressionTag {
    path: string;
    scope?: string;
    tag?: string;
}

export interface VpcGroupExpressionExcludePathExpression {
    _revision: number;
    description?: string;
    displayName: string;
    path: string;
    paths: string[];
    resourceType: string;
    tags?: outputs.VpcGroupExpressionExcludePathExpressionTag[];
}

export interface VpcGroupExpressionExcludePathExpressionTag {
    path: string;
    scope?: string;
    tag?: string;
}

export interface VpcGroupExpressionExpression {
    conjunctionOperator: string;
    excludes?: outputs.VpcGroupExpressionExpressionExclude[];
    key: string;
    markedForDelete?: boolean;
    memberType: string;
    operator: string;
    resourceType: string;
    scopeOperator: string;
    tags?: outputs.VpcGroupExpressionExpressionTag[];
    value: string;
}

export interface VpcGroupExpressionExpressionExclude {
    ipAddressExpression?: outputs.VpcGroupExpressionExpressionExcludeIpAddressExpression;
    path: string;
    pathExpression?: outputs.VpcGroupExpressionExpressionExcludePathExpression;
}

export interface VpcGroupExpressionExpressionExcludeIpAddressExpression {
    _revision: number;
    description?: string;
    displayName: string;
    ipAddresses: string[];
    path: string;
    resourceType: string;
    tags?: outputs.VpcGroupExpressionExpressionExcludeIpAddressExpressionTag[];
}

export interface VpcGroupExpressionExpressionExcludeIpAddressExpressionTag {
    path: string;
    scope?: string;
    tag?: string;
}

export interface VpcGroupExpressionExpressionExcludePathExpression {
    _revision: number;
    description?: string;
    displayName: string;
    path: string;
    paths: string[];
    resourceType: string;
    tags?: outputs.VpcGroupExpressionExpressionExcludePathExpressionTag[];
}

export interface VpcGroupExpressionExpressionExcludePathExpressionTag {
    path: string;
    scope?: string;
    tag?: string;
}

export interface VpcGroupExpressionExpressionTag {
    path: string;
    scope?: string;
    tag?: string;
}

export interface VpcGroupExpressionTag {
    path: string;
    scope?: string;
    tag?: string;
}

export interface VpcGroupTag {
    path: string;
    scope?: string;
    tag?: string;
}

export interface VpcIpAddressAllocationTag {
    path: string;
    scope?: string;
    tag?: string;
}

export interface VpcSecurityPolicyApplicationConnectivityStrategy {
    applicationConnectivityStrategy: string;
    loggingEnabled?: boolean;
    path: string;
}

export interface VpcSecurityPolicyRuleServiceEntry {
    _revision: string;
    alg: string;
    description?: string;
    destinationPorts: string[];
    displayName: string;
    etherType: number;
    icmpCode: number;
    icmpType: number;
    l4Protocol: string;
    nestedServicePath: string;
    nsxId: string;
    path: string;
    protocol: string;
    protocolNumber: number;
    resourceType: string;
    sourcePorts: string[];
    tags?: outputs.VpcSecurityPolicyRuleServiceEntryTag[];
}

export interface VpcSecurityPolicyRuleServiceEntryTag {
    path: string;
    scope?: string;
    tag?: string;
}

export interface VpcSecurityPolicyRuleTag {
    path: string;
    scope?: string;
    tag?: string;
}

export interface VpcSecurityPolicyTag {
    path: string;
    scope?: string;
    tag?: string;
}

export interface VpcStaticRoutesNextHop {
    adminDistance?: number;
    ipAddress: string;
    path: string;
    scopes: string[];
}

export interface VpcStaticRoutesTag {
    path: string;
    scope?: string;
    tag?: string;
}

export interface VpcSubnetAdvancedConfig {
    path: string;
    staticIpAllocation?: outputs.VpcSubnetAdvancedConfigStaticIpAllocation;
}

export interface VpcSubnetAdvancedConfigStaticIpAllocation {
    enabled?: boolean;
    path: string;
}

export interface VpcSubnetDhcpConfig {
    dhcpRelayConfigPath: string;
    dnsClientConfig?: outputs.VpcSubnetDhcpConfigDnsClientConfig;
    enableDhcp: boolean;
    path: string;
    staticPoolConfig?: outputs.VpcSubnetDhcpConfigStaticPoolConfig;
}

export interface VpcSubnetDhcpConfigDnsClientConfig {
    dnsServerIps: string[];
    path: string;
}

export interface VpcSubnetDhcpConfigStaticPoolConfig {
    ipv4PoolSize?: number;
    path: string;
}

export interface VpcSubnetIpAddressAllocationTag {
    path: string;
    scope?: string;
    tag?: string;
}

export interface VpcSubnetPortAddressBinding {
    ipAddress: string;
    macAddress: string;
    path: string;
    vlanId: number;
}

export interface VpcSubnetPortAttachment {
    allocateAddresses: string;
    appId: string;
    bmsInterfaceConfig?: outputs.VpcSubnetPortAttachmentBmsInterfaceConfig;
    contextId: string;
    evpnVlans: string[];
    hyperbusMode?: string;
    path: string;
    trafficTag: number;
    type: string;
}

export interface VpcSubnetPortAttachmentBmsInterfaceConfig {
    appIntfName: string;
    defaultGateway: string;
    migrateIntf: string;
    path: string;
    routingTables: string[];
}

export interface VpcSubnetPortExtraConfig {
    configPair: outputs.VpcSubnetPortExtraConfigConfigPair;
    path: string;
}

export interface VpcSubnetPortExtraConfigConfigPair {
    key: string;
    path: string;
    value: string;
}

export interface VpcSubnetPortIgnoredAddressBinding {
    ipAddress: string;
    macAddress: string;
    path: string;
    vlanId: number;
}

export interface VpcSubnetPortTag {
    path: string;
    scope?: string;
    tag?: string;
}

export interface VpcSubnetTag {
    path: string;
    scope?: string;
    tag?: string;
}

export interface VpcVmTagsTag {
    path: string;
    scope?: string;
    tag?: string;
}

