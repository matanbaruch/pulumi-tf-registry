// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpcSubnetPort extends pulumi.CustomResource {
    /**
     * Get an existing VpcSubnetPort resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcSubnetPortState, opts?: pulumi.CustomResourceOptions): VpcSubnetPort {
        return new VpcSubnetPort(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nsxt-virtual-private-cloud:index/vpcSubnetPort:VpcSubnetPort';

    /**
     * Returns true if the given object is an instance of VpcSubnetPort.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcSubnetPort {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcSubnetPort.__pulumiType;
    }

    public /*out*/ readonly _revision!: pulumi.Output<number>;
    public readonly addressBindings!: pulumi.Output<outputs.VpcSubnetPortAddressBinding[] | undefined>;
    public readonly adminState!: pulumi.Output<string | undefined>;
    public readonly attachment!: pulumi.Output<outputs.VpcSubnetPortAttachment | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly displayName!: pulumi.Output<string>;
    public readonly extraConfigs!: pulumi.Output<outputs.VpcSubnetPortExtraConfig[] | undefined>;
    public readonly ignoredAddressBindings!: pulumi.Output<outputs.VpcSubnetPortIgnoredAddressBinding[] | undefined>;
    public readonly initState!: pulumi.Output<string | undefined>;
    public readonly nsxId!: pulumi.Output<string>;
    public readonly parentPath!: pulumi.Output<string>;
    public /*out*/ readonly path!: pulumi.Output<string>;
    public readonly resourceType!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.VpcSubnetPortTag[] | undefined>;

    /**
     * Create a VpcSubnetPort resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcSubnetPortArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcSubnetPortArgs | VpcSubnetPortState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcSubnetPortState | undefined;
            resourceInputs["_revision"] = state ? state._revision : undefined;
            resourceInputs["addressBindings"] = state ? state.addressBindings : undefined;
            resourceInputs["adminState"] = state ? state.adminState : undefined;
            resourceInputs["attachment"] = state ? state.attachment : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["extraConfigs"] = state ? state.extraConfigs : undefined;
            resourceInputs["ignoredAddressBindings"] = state ? state.ignoredAddressBindings : undefined;
            resourceInputs["initState"] = state ? state.initState : undefined;
            resourceInputs["nsxId"] = state ? state.nsxId : undefined;
            resourceInputs["parentPath"] = state ? state.parentPath : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as VpcSubnetPortArgs | undefined;
            if ((!args || args.nsxId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nsxId'");
            }
            if ((!args || args.parentPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentPath'");
            }
            resourceInputs["addressBindings"] = args ? args.addressBindings : undefined;
            resourceInputs["adminState"] = args ? args.adminState : undefined;
            resourceInputs["attachment"] = args ? args.attachment : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["extraConfigs"] = args ? args.extraConfigs : undefined;
            resourceInputs["ignoredAddressBindings"] = args ? args.ignoredAddressBindings : undefined;
            resourceInputs["initState"] = args ? args.initState : undefined;
            resourceInputs["nsxId"] = args ? args.nsxId : undefined;
            resourceInputs["parentPath"] = args ? args.parentPath : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["_revision"] = undefined /*out*/;
            resourceInputs["path"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcSubnetPort.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpcSubnetPort resources.
 */
export interface VpcSubnetPortState {
    _revision?: pulumi.Input<number>;
    addressBindings?: pulumi.Input<pulumi.Input<inputs.VpcSubnetPortAddressBinding>[]>;
    adminState?: pulumi.Input<string>;
    attachment?: pulumi.Input<inputs.VpcSubnetPortAttachment>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    extraConfigs?: pulumi.Input<pulumi.Input<inputs.VpcSubnetPortExtraConfig>[]>;
    ignoredAddressBindings?: pulumi.Input<pulumi.Input<inputs.VpcSubnetPortIgnoredAddressBinding>[]>;
    initState?: pulumi.Input<string>;
    nsxId?: pulumi.Input<string>;
    parentPath?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    resourceType?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.VpcSubnetPortTag>[]>;
}

/**
 * The set of arguments for constructing a VpcSubnetPort resource.
 */
export interface VpcSubnetPortArgs {
    addressBindings?: pulumi.Input<pulumi.Input<inputs.VpcSubnetPortAddressBinding>[]>;
    adminState?: pulumi.Input<string>;
    attachment?: pulumi.Input<inputs.VpcSubnetPortAttachment>;
    description?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    extraConfigs?: pulumi.Input<pulumi.Input<inputs.VpcSubnetPortExtraConfig>[]>;
    ignoredAddressBindings?: pulumi.Input<pulumi.Input<inputs.VpcSubnetPortIgnoredAddressBinding>[]>;
    initState?: pulumi.Input<string>;
    nsxId: pulumi.Input<string>;
    parentPath: pulumi.Input<string>;
    resourceType?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.VpcSubnetPortTag>[]>;
}
