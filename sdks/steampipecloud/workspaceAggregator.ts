// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class WorkspaceAggregator extends pulumi.CustomResource {
    /**
     * Get an existing WorkspaceAggregator resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkspaceAggregatorState, opts?: pulumi.CustomResourceOptions): WorkspaceAggregator {
        return new WorkspaceAggregator(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'steampipecloud:index/workspaceAggregator:WorkspaceAggregator';

    /**
     * Returns true if the given object is an instance of WorkspaceAggregator.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WorkspaceAggregator {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkspaceAggregator.__pulumiType;
    }

    public readonly connections!: pulumi.Output<string[]>;
    public readonly createdAt!: pulumi.Output<string>;
    public readonly createdBy!: pulumi.Output<string>;
    public readonly handle!: pulumi.Output<string>;
    public readonly organization!: pulumi.Output<string>;
    public readonly plugin!: pulumi.Output<string>;
    public /*out*/ readonly type!: pulumi.Output<string>;
    public readonly updatedAt!: pulumi.Output<string>;
    public readonly updatedBy!: pulumi.Output<string>;
    public /*out*/ readonly versionId!: pulumi.Output<number>;
    public readonly workspace!: pulumi.Output<string>;
    public /*out*/ readonly workspaceAggregatorId!: pulumi.Output<string>;
    public /*out*/ readonly workspaceId!: pulumi.Output<string>;

    /**
     * Create a WorkspaceAggregator resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkspaceAggregatorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkspaceAggregatorArgs | WorkspaceAggregatorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkspaceAggregatorState | undefined;
            resourceInputs["connections"] = state ? state.connections : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["handle"] = state ? state.handle : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["plugin"] = state ? state.plugin : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["updatedBy"] = state ? state.updatedBy : undefined;
            resourceInputs["versionId"] = state ? state.versionId : undefined;
            resourceInputs["workspace"] = state ? state.workspace : undefined;
            resourceInputs["workspaceAggregatorId"] = state ? state.workspaceAggregatorId : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        } else {
            const args = argsOrState as WorkspaceAggregatorArgs | undefined;
            if ((!args || args.connections === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connections'");
            }
            if ((!args || args.handle === undefined) && !opts.urn) {
                throw new Error("Missing required property 'handle'");
            }
            if ((!args || args.plugin === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plugin'");
            }
            if ((!args || args.workspace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspace'");
            }
            resourceInputs["connections"] = args ? args.connections : undefined;
            resourceInputs["createdAt"] = args ? args.createdAt : undefined;
            resourceInputs["createdBy"] = args ? args.createdBy : undefined;
            resourceInputs["handle"] = args ? args.handle : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["plugin"] = args ? args.plugin : undefined;
            resourceInputs["updatedAt"] = args ? args.updatedAt : undefined;
            resourceInputs["updatedBy"] = args ? args.updatedBy : undefined;
            resourceInputs["workspace"] = args ? args.workspace : undefined;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["versionId"] = undefined /*out*/;
            resourceInputs["workspaceAggregatorId"] = undefined /*out*/;
            resourceInputs["workspaceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WorkspaceAggregator.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WorkspaceAggregator resources.
 */
export interface WorkspaceAggregatorState {
    connections?: pulumi.Input<pulumi.Input<string>[]>;
    createdAt?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    handle?: pulumi.Input<string>;
    organization?: pulumi.Input<string>;
    plugin?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
    updatedBy?: pulumi.Input<string>;
    versionId?: pulumi.Input<number>;
    workspace?: pulumi.Input<string>;
    workspaceAggregatorId?: pulumi.Input<string>;
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WorkspaceAggregator resource.
 */
export interface WorkspaceAggregatorArgs {
    connections: pulumi.Input<pulumi.Input<string>[]>;
    createdAt?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    handle: pulumi.Input<string>;
    organization?: pulumi.Input<string>;
    plugin: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
    updatedBy?: pulumi.Input<string>;
    workspace: pulumi.Input<string>;
}
