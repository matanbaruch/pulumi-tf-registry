// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ConnectionArgs, ConnectionState } from "./connection";
export type Connection = import("./connection").Connection;
export const Connection: typeof import("./connection").Connection = null as any;
utilities.lazyLoad(exports, ["Connection"], () => require("./connection"));

export { GetOrganizationArgs, GetOrganizationResult, GetOrganizationOutputArgs } from "./getOrganization";
export const getOrganization: typeof import("./getOrganization").getOrganization = null as any;
export const getOrganizationOutput: typeof import("./getOrganization").getOrganizationOutput = null as any;
utilities.lazyLoad(exports, ["getOrganization","getOrganizationOutput"], () => require("./getOrganization"));

export { GetProcessArgs, GetProcessResult, GetProcessOutputArgs } from "./getProcess";
export const getProcess: typeof import("./getProcess").getProcess = null as any;
export const getProcessOutput: typeof import("./getProcess").getProcessOutput = null as any;
utilities.lazyLoad(exports, ["getProcess","getProcessOutput"], () => require("./getProcess"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { OrganizationArgs, OrganizationState } from "./organization";
export type Organization = import("./organization").Organization;
export const Organization: typeof import("./organization").Organization = null as any;
utilities.lazyLoad(exports, ["Organization"], () => require("./organization"));

export { OrganizationMemberArgs, OrganizationMemberState } from "./organizationMember";
export type OrganizationMember = import("./organizationMember").OrganizationMember;
export const OrganizationMember: typeof import("./organizationMember").OrganizationMember = null as any;
utilities.lazyLoad(exports, ["OrganizationMember"], () => require("./organizationMember"));

export { OrganizationWorkspaceMemberArgs, OrganizationWorkspaceMemberState } from "./organizationWorkspaceMember";
export type OrganizationWorkspaceMember = import("./organizationWorkspaceMember").OrganizationWorkspaceMember;
export const OrganizationWorkspaceMember: typeof import("./organizationWorkspaceMember").OrganizationWorkspaceMember = null as any;
utilities.lazyLoad(exports, ["OrganizationWorkspaceMember"], () => require("./organizationWorkspaceMember"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { UserPreferencesArgs, UserPreferencesState } from "./userPreferences";
export type UserPreferences = import("./userPreferences").UserPreferences;
export const UserPreferences: typeof import("./userPreferences").UserPreferences = null as any;
utilities.lazyLoad(exports, ["UserPreferences"], () => require("./userPreferences"));

export { WorkspaceArgs, WorkspaceState } from "./workspace";
export type Workspace = import("./workspace").Workspace;
export const Workspace: typeof import("./workspace").Workspace = null as any;
utilities.lazyLoad(exports, ["Workspace"], () => require("./workspace"));

export { WorkspaceAggregatorArgs, WorkspaceAggregatorState } from "./workspaceAggregator";
export type WorkspaceAggregator = import("./workspaceAggregator").WorkspaceAggregator;
export const WorkspaceAggregator: typeof import("./workspaceAggregator").WorkspaceAggregator = null as any;
utilities.lazyLoad(exports, ["WorkspaceAggregator"], () => require("./workspaceAggregator"));

export { WorkspaceConnectionArgs, WorkspaceConnectionState } from "./workspaceConnection";
export type WorkspaceConnection = import("./workspaceConnection").WorkspaceConnection;
export const WorkspaceConnection: typeof import("./workspaceConnection").WorkspaceConnection = null as any;
utilities.lazyLoad(exports, ["WorkspaceConnection"], () => require("./workspaceConnection"));

export { WorkspaceModArgs, WorkspaceModState } from "./workspaceMod";
export type WorkspaceMod = import("./workspaceMod").WorkspaceMod;
export const WorkspaceMod: typeof import("./workspaceMod").WorkspaceMod = null as any;
utilities.lazyLoad(exports, ["WorkspaceMod"], () => require("./workspaceMod"));

export { WorkspaceModVariableArgs, WorkspaceModVariableState } from "./workspaceModVariable";
export type WorkspaceModVariable = import("./workspaceModVariable").WorkspaceModVariable;
export const WorkspaceModVariable: typeof import("./workspaceModVariable").WorkspaceModVariable = null as any;
utilities.lazyLoad(exports, ["WorkspaceModVariable"], () => require("./workspaceModVariable"));

export { WorkspacePipelineArgs, WorkspacePipelineState } from "./workspacePipeline";
export type WorkspacePipeline = import("./workspacePipeline").WorkspacePipeline;
export const WorkspacePipeline: typeof import("./workspacePipeline").WorkspacePipeline = null as any;
utilities.lazyLoad(exports, ["WorkspacePipeline"], () => require("./workspacePipeline"));

export { WorkspaceSnapshotArgs, WorkspaceSnapshotState } from "./workspaceSnapshot";
export type WorkspaceSnapshot = import("./workspaceSnapshot").WorkspaceSnapshot;
export const WorkspaceSnapshot: typeof import("./workspaceSnapshot").WorkspaceSnapshot = null as any;
utilities.lazyLoad(exports, ["WorkspaceSnapshot"], () => require("./workspaceSnapshot"));


// Export sub-modules:
import * as config from "./config";

export {
    config,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "steampipecloud:index/connection:Connection":
                return new Connection(name, <any>undefined, { urn })
            case "steampipecloud:index/organization:Organization":
                return new Organization(name, <any>undefined, { urn })
            case "steampipecloud:index/organizationMember:OrganizationMember":
                return new OrganizationMember(name, <any>undefined, { urn })
            case "steampipecloud:index/organizationWorkspaceMember:OrganizationWorkspaceMember":
                return new OrganizationWorkspaceMember(name, <any>undefined, { urn })
            case "steampipecloud:index/userPreferences:UserPreferences":
                return new UserPreferences(name, <any>undefined, { urn })
            case "steampipecloud:index/workspace:Workspace":
                return new Workspace(name, <any>undefined, { urn })
            case "steampipecloud:index/workspaceAggregator:WorkspaceAggregator":
                return new WorkspaceAggregator(name, <any>undefined, { urn })
            case "steampipecloud:index/workspaceConnection:WorkspaceConnection":
                return new WorkspaceConnection(name, <any>undefined, { urn })
            case "steampipecloud:index/workspaceMod:WorkspaceMod":
                return new WorkspaceMod(name, <any>undefined, { urn })
            case "steampipecloud:index/workspaceModVariable:WorkspaceModVariable":
                return new WorkspaceModVariable(name, <any>undefined, { urn })
            case "steampipecloud:index/workspacePipeline:WorkspacePipeline":
                return new WorkspacePipeline(name, <any>undefined, { urn })
            case "steampipecloud:index/workspaceSnapshot:WorkspaceSnapshot":
                return new WorkspaceSnapshot(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("steampipecloud", "index/connection", _module)
pulumi.runtime.registerResourceModule("steampipecloud", "index/organization", _module)
pulumi.runtime.registerResourceModule("steampipecloud", "index/organizationMember", _module)
pulumi.runtime.registerResourceModule("steampipecloud", "index/organizationWorkspaceMember", _module)
pulumi.runtime.registerResourceModule("steampipecloud", "index/userPreferences", _module)
pulumi.runtime.registerResourceModule("steampipecloud", "index/workspace", _module)
pulumi.runtime.registerResourceModule("steampipecloud", "index/workspaceAggregator", _module)
pulumi.runtime.registerResourceModule("steampipecloud", "index/workspaceConnection", _module)
pulumi.runtime.registerResourceModule("steampipecloud", "index/workspaceMod", _module)
pulumi.runtime.registerResourceModule("steampipecloud", "index/workspaceModVariable", _module)
pulumi.runtime.registerResourceModule("steampipecloud", "index/workspacePipeline", _module)
pulumi.runtime.registerResourceModule("steampipecloud", "index/workspaceSnapshot", _module)
pulumi.runtime.registerResourcePackage("steampipecloud", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:steampipecloud") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
