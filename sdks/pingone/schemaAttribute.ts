// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SchemaAttribute extends pulumi.CustomResource {
    /**
     * Get an existing SchemaAttribute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SchemaAttributeState, opts?: pulumi.CustomResourceOptions): SchemaAttribute {
        return new SchemaAttribute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingone:index/schemaAttribute:SchemaAttribute';

    /**
     * Returns true if the given object is an instance of SchemaAttribute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SchemaAttribute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SchemaAttribute.__pulumiType;
    }

    /**
     * A description of the attribute. If provided, it must not be an empty string. Valid characters consists of any Unicode
     * letter, mark (for example, accent or umlaut), numeric character, punctuation character, or space.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The display name of the attribute such as 'T-shirt size'. If provided, it must not be an empty string. Valid characters
     * consist of any Unicode letter, mark (for example, accent or umlaut), numeric character, forward slash, dot, apostrophe,
     * underscore, space, or hyphen.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * Indicates whether or not the attribute is enabled. Defaults to `true`.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * A set of one or more enumerated values for the attribute. If provided, it must not be an empty set. Can only be set
     * where the attribute type is `STRING` and cannot be set alongside `regex_validation`. If the attribute has been created
     * without enumerated values and this parameter is added later, this will trigger a replacement plan of the attribute
     * resource. If the attribute has been created with enumerated values that are subsequently removed, this will update
     * without needing to replace the attribute resource.
     */
    public readonly enumeratedValues!: pulumi.Output<outputs.SchemaAttributeEnumeratedValue[] | undefined>;
    /**
     * The ID of the environment to create the schema attribute in. Must be a valid PingOne resource ID. This field is
     * immutable and will trigger a replace plan if changed.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * The unique identifier for the LDAP attribute.
     */
    public /*out*/ readonly ldapAttribute!: pulumi.Output<string>;
    public readonly multivalued!: pulumi.Output<boolean>;
    /**
     * The system name of the schema attribute.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A single object representation of the optional regular expression representation of this attribute. Can only be set
     * where the attribute type is `STRING` and cannot be set alongside `enumerated_values`.
     */
    public readonly regexValidation!: pulumi.Output<outputs.SchemaAttributeRegexValidation | undefined>;
    /**
     * Indicates whether or not the attribute is required.
     */
    public /*out*/ readonly required!: pulumi.Output<boolean>;
    /**
     * The ID of the schema the schema attribute is applied to.
     */
    public /*out*/ readonly schemaId!: pulumi.Output<string>;
    /**
     * The schema type of the attribute. Options are `CORE`, `CUSTOM`, `STANDARD`. `CORE` and `STANDARD` attributes are
     * supplied by default. `CORE` attributes cannot be updated or deleted. `STANDARD` attributes cannot be deleted, but their
     * mutable properties can be updated. `CUSTOM` attributes can be deleted, and their mutable properties can be updated. New
     * attributes are created with a schema type of `CUSTOM`.
     */
    public /*out*/ readonly schemaType!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public readonly unique!: pulumi.Output<boolean>;

    /**
     * Create a SchemaAttribute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SchemaAttributeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SchemaAttributeArgs | SchemaAttributeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SchemaAttributeState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["enumeratedValues"] = state ? state.enumeratedValues : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["ldapAttribute"] = state ? state.ldapAttribute : undefined;
            resourceInputs["multivalued"] = state ? state.multivalued : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["regexValidation"] = state ? state.regexValidation : undefined;
            resourceInputs["required"] = state ? state.required : undefined;
            resourceInputs["schemaId"] = state ? state.schemaId : undefined;
            resourceInputs["schemaType"] = state ? state.schemaType : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["unique"] = state ? state.unique : undefined;
        } else {
            const args = argsOrState as SchemaAttributeArgs | undefined;
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["enumeratedValues"] = args ? args.enumeratedValues : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["multivalued"] = args ? args.multivalued : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["regexValidation"] = args ? args.regexValidation : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["unique"] = args ? args.unique : undefined;
            resourceInputs["ldapAttribute"] = undefined /*out*/;
            resourceInputs["required"] = undefined /*out*/;
            resourceInputs["schemaId"] = undefined /*out*/;
            resourceInputs["schemaType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SchemaAttribute.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SchemaAttribute resources.
 */
export interface SchemaAttributeState {
    /**
     * A description of the attribute. If provided, it must not be an empty string. Valid characters consists of any Unicode
     * letter, mark (for example, accent or umlaut), numeric character, punctuation character, or space.
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of the attribute such as 'T-shirt size'. If provided, it must not be an empty string. Valid characters
     * consist of any Unicode letter, mark (for example, accent or umlaut), numeric character, forward slash, dot, apostrophe,
     * underscore, space, or hyphen.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Indicates whether or not the attribute is enabled. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * A set of one or more enumerated values for the attribute. If provided, it must not be an empty set. Can only be set
     * where the attribute type is `STRING` and cannot be set alongside `regex_validation`. If the attribute has been created
     * without enumerated values and this parameter is added later, this will trigger a replacement plan of the attribute
     * resource. If the attribute has been created with enumerated values that are subsequently removed, this will update
     * without needing to replace the attribute resource.
     */
    enumeratedValues?: pulumi.Input<pulumi.Input<inputs.SchemaAttributeEnumeratedValue>[]>;
    /**
     * The ID of the environment to create the schema attribute in. Must be a valid PingOne resource ID. This field is
     * immutable and will trigger a replace plan if changed.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * The unique identifier for the LDAP attribute.
     */
    ldapAttribute?: pulumi.Input<string>;
    multivalued?: pulumi.Input<boolean>;
    /**
     * The system name of the schema attribute.
     */
    name?: pulumi.Input<string>;
    /**
     * A single object representation of the optional regular expression representation of this attribute. Can only be set
     * where the attribute type is `STRING` and cannot be set alongside `enumerated_values`.
     */
    regexValidation?: pulumi.Input<inputs.SchemaAttributeRegexValidation>;
    /**
     * Indicates whether or not the attribute is required.
     */
    required?: pulumi.Input<boolean>;
    /**
     * The ID of the schema the schema attribute is applied to.
     */
    schemaId?: pulumi.Input<string>;
    /**
     * The schema type of the attribute. Options are `CORE`, `CUSTOM`, `STANDARD`. `CORE` and `STANDARD` attributes are
     * supplied by default. `CORE` attributes cannot be updated or deleted. `STANDARD` attributes cannot be deleted, but their
     * mutable properties can be updated. `CUSTOM` attributes can be deleted, and their mutable properties can be updated. New
     * attributes are created with a schema type of `CUSTOM`.
     */
    schemaType?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    unique?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SchemaAttribute resource.
 */
export interface SchemaAttributeArgs {
    /**
     * A description of the attribute. If provided, it must not be an empty string. Valid characters consists of any Unicode
     * letter, mark (for example, accent or umlaut), numeric character, punctuation character, or space.
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of the attribute such as 'T-shirt size'. If provided, it must not be an empty string. Valid characters
     * consist of any Unicode letter, mark (for example, accent or umlaut), numeric character, forward slash, dot, apostrophe,
     * underscore, space, or hyphen.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Indicates whether or not the attribute is enabled. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * A set of one or more enumerated values for the attribute. If provided, it must not be an empty set. Can only be set
     * where the attribute type is `STRING` and cannot be set alongside `regex_validation`. If the attribute has been created
     * without enumerated values and this parameter is added later, this will trigger a replacement plan of the attribute
     * resource. If the attribute has been created with enumerated values that are subsequently removed, this will update
     * without needing to replace the attribute resource.
     */
    enumeratedValues?: pulumi.Input<pulumi.Input<inputs.SchemaAttributeEnumeratedValue>[]>;
    /**
     * The ID of the environment to create the schema attribute in. Must be a valid PingOne resource ID. This field is
     * immutable and will trigger a replace plan if changed.
     */
    environmentId: pulumi.Input<string>;
    multivalued?: pulumi.Input<boolean>;
    /**
     * The system name of the schema attribute.
     */
    name?: pulumi.Input<string>;
    /**
     * A single object representation of the optional regular expression representation of this attribute. Can only be set
     * where the attribute type is `STRING` and cannot be set alongside `enumerated_values`.
     */
    regexValidation?: pulumi.Input<inputs.SchemaAttributeRegexValidation>;
    type?: pulumi.Input<string>;
    unique?: pulumi.Input<boolean>;
}
