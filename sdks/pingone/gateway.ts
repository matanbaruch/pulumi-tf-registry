// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Gateway extends pulumi.CustomResource {
    /**
     * Get an existing Gateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GatewayState, opts?: pulumi.CustomResourceOptions): Gateway {
        return new Gateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingone:index/gateway:Gateway';

    /**
     * Returns true if the given object is an instance of Gateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Gateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Gateway.__pulumiType;
    }

    /**
     * For LDAP gateways only: A string that specifies the distinguished name information to bind to the LDAP directory (for
     * example, `uid=pingone,dc=bxretail,dc=org`).
     */
    public readonly bindDn!: pulumi.Output<string | undefined>;
    /**
     * For LDAP gateways only: A string that specifies the bind password for the LDAP directory.
     */
    public readonly bindPassword!: pulumi.Output<string | undefined>;
    /**
     * For LDAP gateways only: A string that specifies the connection security type. Options are `None`, `StartTLS`, `TLS`.
     * Defaults to `None`.
     */
    public readonly connectionSecurity!: pulumi.Output<string>;
    /**
     * A string that specifies a description to apply to the gateway resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A boolean that specifies whether the gateway is enabled in the environment.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The ID of the environment to manage the gateway in. Must be a valid PingOne resource ID. This field is immutable and
     * will trigger a replace plan if changed.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * For LDAP gateways only: A boolean that, when set to true, PingOne sends LDAP queries per referrals it receives from the
     * LDAP servers. Defaults to `false`.
     */
    public readonly followReferrals!: pulumi.Output<boolean>;
    /**
     * For LDAP gateways only: A single object that specifies Kerberos connection details.
     */
    public readonly kerberos!: pulumi.Output<outputs.GatewayKerberos | undefined>;
    /**
     * A string that specifies the name of the gateway resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * For RADIUS gateways only: A set of objects describing RADIUS client connections.
     */
    public readonly radiusClients!: pulumi.Output<outputs.GatewayRadiusClient[] | undefined>;
    /**
     * For RADIUS gateways only: A string that specifies the ID of the DaVinci flow policy to use. Must be a valid PingOne
     * resource ID.
     */
    public readonly radiusDavinciPolicyId!: pulumi.Output<string | undefined>;
    /**
     * For RADIUS gateways only: A string that specifies the value to use for the shared secret if the shared secret is not
     * provided for one or more of the RADIUS clients specified.
     */
    public readonly radiusDefaultSharedSecret!: pulumi.Output<string | undefined>;
    /**
     * For RADIUS gateways only: A single object that allows configuration of the RADIUS gateway to authenticate using the
     * MS-CHAP v2 protocol.
     */
    public readonly radiusNetworkPolicyServer!: pulumi.Output<outputs.GatewayRadiusNetworkPolicyServer | undefined>;
    /**
     * For LDAP gateways only: A set of LDAP server host name and port number combinations (for example,
     * [`ds1.bxretail.org:636`, `ds2.bxretail.org:636`]).
     */
    public readonly servers!: pulumi.Output<string[] | undefined>;
    /**
     * A string that specifies the type of gateway. Options are `API_GATEWAY_INTEGRATION`, `LDAP`, `PING_FEDERATE`,
     * `PING_INTELLIGENCE`, `RADIUS`. This field is immutable and will trigger a replace plan if changed.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * For LDAP gateways only: A map of objects that define how users should be provisioned in PingOne, where the map key is
     * the name to apply to the user type configuration. The `user_types` map of objects specifies which user properties in
     * PingOne correspond to the user properties in an external LDAP directory. You can use an LDAP browser to view the user
     * properties in the external LDAP directory.
     */
    public readonly userTypes!: pulumi.Output<{[key: string]: outputs.GatewayUserTypes} | undefined>;
    /**
     * For LDAP gateways only: A boolean that specifies whether or not to trust all SSL certificates, including self-signed. If
     * this value is `false`, TLS certificates are not validated. When the value is set to `true`, only certificates that are
     * signed by the default JVM CAs, or the CA certs that the customer has uploaded to the certificate service are trusted.
     * Defaults to `true`.
     */
    public readonly validateTlsCertificates!: pulumi.Output<boolean>;
    /**
     * For LDAP gateways only: A string that specifies the LDAP vendor. Options are `CA Directory`, `IBM (Tivoli) Security
     * Directory Server`, `LDAPv3-compliant Directory Server`, `Microsoft Active Directory`, `OpenDJ Directory Server`, `Oracle
     * Directory Server Enterprise Edition`, `Oracle Unified Directory`, `PingDirectory`. This field is immutable and will
     * trigger a replace plan if changed.
     */
    public readonly vendor!: pulumi.Output<string | undefined>;

    /**
     * Create a Gateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GatewayArgs | GatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GatewayState | undefined;
            resourceInputs["bindDn"] = state ? state.bindDn : undefined;
            resourceInputs["bindPassword"] = state ? state.bindPassword : undefined;
            resourceInputs["connectionSecurity"] = state ? state.connectionSecurity : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["followReferrals"] = state ? state.followReferrals : undefined;
            resourceInputs["kerberos"] = state ? state.kerberos : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["radiusClients"] = state ? state.radiusClients : undefined;
            resourceInputs["radiusDavinciPolicyId"] = state ? state.radiusDavinciPolicyId : undefined;
            resourceInputs["radiusDefaultSharedSecret"] = state ? state.radiusDefaultSharedSecret : undefined;
            resourceInputs["radiusNetworkPolicyServer"] = state ? state.radiusNetworkPolicyServer : undefined;
            resourceInputs["servers"] = state ? state.servers : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["userTypes"] = state ? state.userTypes : undefined;
            resourceInputs["validateTlsCertificates"] = state ? state.validateTlsCertificates : undefined;
            resourceInputs["vendor"] = state ? state.vendor : undefined;
        } else {
            const args = argsOrState as GatewayArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["bindDn"] = args ? args.bindDn : undefined;
            resourceInputs["bindPassword"] = args?.bindPassword ? pulumi.secret(args.bindPassword) : undefined;
            resourceInputs["connectionSecurity"] = args ? args.connectionSecurity : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["followReferrals"] = args ? args.followReferrals : undefined;
            resourceInputs["kerberos"] = args ? args.kerberos : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["radiusClients"] = args ? args.radiusClients : undefined;
            resourceInputs["radiusDavinciPolicyId"] = args ? args.radiusDavinciPolicyId : undefined;
            resourceInputs["radiusDefaultSharedSecret"] = args?.radiusDefaultSharedSecret ? pulumi.secret(args.radiusDefaultSharedSecret) : undefined;
            resourceInputs["radiusNetworkPolicyServer"] = args ? args.radiusNetworkPolicyServer : undefined;
            resourceInputs["servers"] = args ? args.servers : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["userTypes"] = args ? args.userTypes : undefined;
            resourceInputs["validateTlsCertificates"] = args ? args.validateTlsCertificates : undefined;
            resourceInputs["vendor"] = args ? args.vendor : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["bindPassword", "radiusDefaultSharedSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Gateway.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Gateway resources.
 */
export interface GatewayState {
    /**
     * For LDAP gateways only: A string that specifies the distinguished name information to bind to the LDAP directory (for
     * example, `uid=pingone,dc=bxretail,dc=org`).
     */
    bindDn?: pulumi.Input<string>;
    /**
     * For LDAP gateways only: A string that specifies the bind password for the LDAP directory.
     */
    bindPassword?: pulumi.Input<string>;
    /**
     * For LDAP gateways only: A string that specifies the connection security type. Options are `None`, `StartTLS`, `TLS`.
     * Defaults to `None`.
     */
    connectionSecurity?: pulumi.Input<string>;
    /**
     * A string that specifies a description to apply to the gateway resource.
     */
    description?: pulumi.Input<string>;
    /**
     * A boolean that specifies whether the gateway is enabled in the environment.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The ID of the environment to manage the gateway in. Must be a valid PingOne resource ID. This field is immutable and
     * will trigger a replace plan if changed.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * For LDAP gateways only: A boolean that, when set to true, PingOne sends LDAP queries per referrals it receives from the
     * LDAP servers. Defaults to `false`.
     */
    followReferrals?: pulumi.Input<boolean>;
    /**
     * For LDAP gateways only: A single object that specifies Kerberos connection details.
     */
    kerberos?: pulumi.Input<inputs.GatewayKerberos>;
    /**
     * A string that specifies the name of the gateway resource.
     */
    name?: pulumi.Input<string>;
    /**
     * For RADIUS gateways only: A set of objects describing RADIUS client connections.
     */
    radiusClients?: pulumi.Input<pulumi.Input<inputs.GatewayRadiusClient>[]>;
    /**
     * For RADIUS gateways only: A string that specifies the ID of the DaVinci flow policy to use. Must be a valid PingOne
     * resource ID.
     */
    radiusDavinciPolicyId?: pulumi.Input<string>;
    /**
     * For RADIUS gateways only: A string that specifies the value to use for the shared secret if the shared secret is not
     * provided for one or more of the RADIUS clients specified.
     */
    radiusDefaultSharedSecret?: pulumi.Input<string>;
    /**
     * For RADIUS gateways only: A single object that allows configuration of the RADIUS gateway to authenticate using the
     * MS-CHAP v2 protocol.
     */
    radiusNetworkPolicyServer?: pulumi.Input<inputs.GatewayRadiusNetworkPolicyServer>;
    /**
     * For LDAP gateways only: A set of LDAP server host name and port number combinations (for example,
     * [`ds1.bxretail.org:636`, `ds2.bxretail.org:636`]).
     */
    servers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A string that specifies the type of gateway. Options are `API_GATEWAY_INTEGRATION`, `LDAP`, `PING_FEDERATE`,
     * `PING_INTELLIGENCE`, `RADIUS`. This field is immutable and will trigger a replace plan if changed.
     */
    type?: pulumi.Input<string>;
    /**
     * For LDAP gateways only: A map of objects that define how users should be provisioned in PingOne, where the map key is
     * the name to apply to the user type configuration. The `user_types` map of objects specifies which user properties in
     * PingOne correspond to the user properties in an external LDAP directory. You can use an LDAP browser to view the user
     * properties in the external LDAP directory.
     */
    userTypes?: pulumi.Input<{[key: string]: pulumi.Input<inputs.GatewayUserTypes>}>;
    /**
     * For LDAP gateways only: A boolean that specifies whether or not to trust all SSL certificates, including self-signed. If
     * this value is `false`, TLS certificates are not validated. When the value is set to `true`, only certificates that are
     * signed by the default JVM CAs, or the CA certs that the customer has uploaded to the certificate service are trusted.
     * Defaults to `true`.
     */
    validateTlsCertificates?: pulumi.Input<boolean>;
    /**
     * For LDAP gateways only: A string that specifies the LDAP vendor. Options are `CA Directory`, `IBM (Tivoli) Security
     * Directory Server`, `LDAPv3-compliant Directory Server`, `Microsoft Active Directory`, `OpenDJ Directory Server`, `Oracle
     * Directory Server Enterprise Edition`, `Oracle Unified Directory`, `PingDirectory`. This field is immutable and will
     * trigger a replace plan if changed.
     */
    vendor?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Gateway resource.
 */
export interface GatewayArgs {
    /**
     * For LDAP gateways only: A string that specifies the distinguished name information to bind to the LDAP directory (for
     * example, `uid=pingone,dc=bxretail,dc=org`).
     */
    bindDn?: pulumi.Input<string>;
    /**
     * For LDAP gateways only: A string that specifies the bind password for the LDAP directory.
     */
    bindPassword?: pulumi.Input<string>;
    /**
     * For LDAP gateways only: A string that specifies the connection security type. Options are `None`, `StartTLS`, `TLS`.
     * Defaults to `None`.
     */
    connectionSecurity?: pulumi.Input<string>;
    /**
     * A string that specifies a description to apply to the gateway resource.
     */
    description?: pulumi.Input<string>;
    /**
     * A boolean that specifies whether the gateway is enabled in the environment.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The ID of the environment to manage the gateway in. Must be a valid PingOne resource ID. This field is immutable and
     * will trigger a replace plan if changed.
     */
    environmentId: pulumi.Input<string>;
    /**
     * For LDAP gateways only: A boolean that, when set to true, PingOne sends LDAP queries per referrals it receives from the
     * LDAP servers. Defaults to `false`.
     */
    followReferrals?: pulumi.Input<boolean>;
    /**
     * For LDAP gateways only: A single object that specifies Kerberos connection details.
     */
    kerberos?: pulumi.Input<inputs.GatewayKerberos>;
    /**
     * A string that specifies the name of the gateway resource.
     */
    name?: pulumi.Input<string>;
    /**
     * For RADIUS gateways only: A set of objects describing RADIUS client connections.
     */
    radiusClients?: pulumi.Input<pulumi.Input<inputs.GatewayRadiusClient>[]>;
    /**
     * For RADIUS gateways only: A string that specifies the ID of the DaVinci flow policy to use. Must be a valid PingOne
     * resource ID.
     */
    radiusDavinciPolicyId?: pulumi.Input<string>;
    /**
     * For RADIUS gateways only: A string that specifies the value to use for the shared secret if the shared secret is not
     * provided for one or more of the RADIUS clients specified.
     */
    radiusDefaultSharedSecret?: pulumi.Input<string>;
    /**
     * For RADIUS gateways only: A single object that allows configuration of the RADIUS gateway to authenticate using the
     * MS-CHAP v2 protocol.
     */
    radiusNetworkPolicyServer?: pulumi.Input<inputs.GatewayRadiusNetworkPolicyServer>;
    /**
     * For LDAP gateways only: A set of LDAP server host name and port number combinations (for example,
     * [`ds1.bxretail.org:636`, `ds2.bxretail.org:636`]).
     */
    servers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A string that specifies the type of gateway. Options are `API_GATEWAY_INTEGRATION`, `LDAP`, `PING_FEDERATE`,
     * `PING_INTELLIGENCE`, `RADIUS`. This field is immutable and will trigger a replace plan if changed.
     */
    type: pulumi.Input<string>;
    /**
     * For LDAP gateways only: A map of objects that define how users should be provisioned in PingOne, where the map key is
     * the name to apply to the user type configuration. The `user_types` map of objects specifies which user properties in
     * PingOne correspond to the user properties in an external LDAP directory. You can use an LDAP browser to view the user
     * properties in the external LDAP directory.
     */
    userTypes?: pulumi.Input<{[key: string]: pulumi.Input<inputs.GatewayUserTypes>}>;
    /**
     * For LDAP gateways only: A boolean that specifies whether or not to trust all SSL certificates, including self-signed. If
     * this value is `false`, TLS certificates are not validated. When the value is set to `true`, only certificates that are
     * signed by the default JVM CAs, or the CA certs that the customer has uploaded to the certificate service are trusted.
     * Defaults to `true`.
     */
    validateTlsCertificates?: pulumi.Input<boolean>;
    /**
     * For LDAP gateways only: A string that specifies the LDAP vendor. Options are `CA Directory`, `IBM (Tivoli) Security
     * Directory Server`, `LDAPv3-compliant Directory Server`, `Microsoft Active Directory`, `OpenDJ Directory Server`, `Oracle
     * Directory Server Enterprise Edition`, `Oracle Unified Directory`, `PingDirectory`. This field is immutable and will
     * trigger a replace plan if changed.
     */
    vendor?: pulumi.Input<string>;
}
