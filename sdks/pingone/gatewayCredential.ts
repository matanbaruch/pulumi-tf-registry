// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class GatewayCredential extends pulumi.CustomResource {
    /**
     * Get an existing GatewayCredential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GatewayCredentialState, opts?: pulumi.CustomResourceOptions): GatewayCredential {
        return new GatewayCredential(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingone:index/gatewayCredential:GatewayCredential';

    /**
     * Returns true if the given object is an instance of GatewayCredential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GatewayCredential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GatewayCredential.__pulumiType;
    }

    /**
     * A date that specifies the date the credential was created in Coordinated Universal Time (UTC).
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * A string that specifies the signed JWT for the gateway credential.
     */
    public /*out*/ readonly credential!: pulumi.Output<string>;
    /**
     * The ID of the environment to create the gateway credential in.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * The ID of the gateway to associate the credential with.
     */
    public readonly gatewayId!: pulumi.Output<string>;
    /**
     * A date that specifies the date the credential was last used in UTC.
     */
    public /*out*/ readonly lastUsedAt!: pulumi.Output<string>;

    /**
     * Create a GatewayCredential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayCredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GatewayCredentialArgs | GatewayCredentialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GatewayCredentialState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["credential"] = state ? state.credential : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["gatewayId"] = state ? state.gatewayId : undefined;
            resourceInputs["lastUsedAt"] = state ? state.lastUsedAt : undefined;
        } else {
            const args = argsOrState as GatewayCredentialArgs | undefined;
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.gatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayId'");
            }
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["gatewayId"] = args ? args.gatewayId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["credential"] = undefined /*out*/;
            resourceInputs["lastUsedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["credential"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(GatewayCredential.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GatewayCredential resources.
 */
export interface GatewayCredentialState {
    /**
     * A date that specifies the date the credential was created in Coordinated Universal Time (UTC).
     */
    createdAt?: pulumi.Input<string>;
    /**
     * A string that specifies the signed JWT for the gateway credential.
     */
    credential?: pulumi.Input<string>;
    /**
     * The ID of the environment to create the gateway credential in.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * The ID of the gateway to associate the credential with.
     */
    gatewayId?: pulumi.Input<string>;
    /**
     * A date that specifies the date the credential was last used in UTC.
     */
    lastUsedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GatewayCredential resource.
 */
export interface GatewayCredentialArgs {
    /**
     * The ID of the environment to create the gateway credential in.
     */
    environmentId: pulumi.Input<string>;
    /**
     * The ID of the gateway to associate the credential with.
     */
    gatewayId: pulumi.Input<string>;
}
