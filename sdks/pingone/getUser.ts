// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getUser(args: GetUserArgs, opts?: pulumi.InvokeOptions): Promise<GetUserResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pingone:index/getUser:getUser", {
        "email": args.email,
        "environmentId": args.environmentId,
        "userId": args.userId,
        "username": args.username,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserArgs {
    email?: string;
    environmentId: string;
    userId?: string;
    username?: string;
}

/**
 * A collection of values returned by getUser.
 */
export interface GetUserResult {
    readonly account: outputs.GetUserAccount;
    readonly address: outputs.GetUserAddress;
    readonly email: string;
    readonly emailVerified: boolean;
    readonly enabled: boolean;
    readonly environmentId: string;
    readonly externalId: string;
    readonly id: string;
    readonly identityProvider: outputs.GetUserIdentityProvider;
    readonly locale: string;
    readonly mfaEnabled: boolean;
    readonly mobilePhone: string;
    readonly name: outputs.GetUserName;
    readonly nickname: string;
    readonly password: outputs.GetUserPassword;
    readonly photo: outputs.GetUserPhoto;
    readonly populationId: string;
    readonly preferredLanguage: string;
    readonly primaryPhone: string;
    readonly timezone: string;
    readonly title: string;
    readonly type: string;
    readonly userId: string;
    readonly userLifecycle: outputs.GetUserUserLifecycle;
    readonly username: string;
    readonly verifyStatus: string;
}
export function getUserOutput(args: GetUserOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUserResult> {
    return pulumi.output(args).apply((a: any) => getUser(a, opts))
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserOutputArgs {
    email?: pulumi.Input<string>;
    environmentId: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}
