// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FormsRecaptchaV2 extends pulumi.CustomResource {
    /**
     * Get an existing FormsRecaptchaV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FormsRecaptchaV2State, opts?: pulumi.CustomResourceOptions): FormsRecaptchaV2 {
        return new FormsRecaptchaV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingone:index/formsRecaptchaV2:FormsRecaptchaV2';

    /**
     * Returns true if the given object is an instance of FormsRecaptchaV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FormsRecaptchaV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FormsRecaptchaV2.__pulumiType;
    }

    /**
     * The ID of the environment to manage the reCAPTCHA v2 configuration in. Must be a valid PingOne resource ID. This field
     * is immutable and will trigger a replace plan if changed.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * A string that specifies the confidential secret key for the Recaptcha configuration provided by Google. This is a
     * required property.
     */
    public readonly secretKey!: pulumi.Output<string>;
    /**
     * A string that specifies the public site key for the Recaptcha configuration provided by Google. This is a required
     * property.
     */
    public readonly siteKey!: pulumi.Output<string>;

    /**
     * Create a FormsRecaptchaV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FormsRecaptchaV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FormsRecaptchaV2Args | FormsRecaptchaV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FormsRecaptchaV2State | undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["secretKey"] = state ? state.secretKey : undefined;
            resourceInputs["siteKey"] = state ? state.siteKey : undefined;
        } else {
            const args = argsOrState as FormsRecaptchaV2Args | undefined;
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.secretKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretKey'");
            }
            if ((!args || args.siteKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteKey'");
            }
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["secretKey"] = args?.secretKey ? pulumi.secret(args.secretKey) : undefined;
            resourceInputs["siteKey"] = args ? args.siteKey : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secretKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(FormsRecaptchaV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FormsRecaptchaV2 resources.
 */
export interface FormsRecaptchaV2State {
    /**
     * The ID of the environment to manage the reCAPTCHA v2 configuration in. Must be a valid PingOne resource ID. This field
     * is immutable and will trigger a replace plan if changed.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * A string that specifies the confidential secret key for the Recaptcha configuration provided by Google. This is a
     * required property.
     */
    secretKey?: pulumi.Input<string>;
    /**
     * A string that specifies the public site key for the Recaptcha configuration provided by Google. This is a required
     * property.
     */
    siteKey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FormsRecaptchaV2 resource.
 */
export interface FormsRecaptchaV2Args {
    /**
     * The ID of the environment to manage the reCAPTCHA v2 configuration in. Must be a valid PingOne resource ID. This field
     * is immutable and will trigger a replace plan if changed.
     */
    environmentId: pulumi.Input<string>;
    /**
     * A string that specifies the confidential secret key for the Recaptcha configuration provided by Google. This is a
     * required property.
     */
    secretKey: pulumi.Input<string>;
    /**
     * A string that specifies the public site key for the Recaptcha configuration provided by Google. This is a required
     * property.
     */
    siteKey: pulumi.Input<string>;
}
