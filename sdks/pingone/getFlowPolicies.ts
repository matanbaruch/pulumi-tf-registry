// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getFlowPolicies(args: GetFlowPoliciesArgs, opts?: pulumi.InvokeOptions): Promise<GetFlowPoliciesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pingone:index/getFlowPolicies:getFlowPolicies", {
        "dataFilters": args.dataFilters,
        "environmentId": args.environmentId,
        "scimFilter": args.scimFilter,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFlowPolicies.
 */
export interface GetFlowPoliciesArgs {
    dataFilters?: inputs.GetFlowPoliciesDataFilter[];
    environmentId: string;
    scimFilter?: string;
}

/**
 * A collection of values returned by getFlowPolicies.
 */
export interface GetFlowPoliciesResult {
    readonly dataFilters?: outputs.GetFlowPoliciesDataFilter[];
    readonly environmentId: string;
    readonly id: string;
    readonly ids: string[];
    readonly scimFilter?: string;
}
export function getFlowPoliciesOutput(args: GetFlowPoliciesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFlowPoliciesResult> {
    return pulumi.output(args).apply((a: any) => getFlowPolicies(a, opts))
}

/**
 * A collection of arguments for invoking getFlowPolicies.
 */
export interface GetFlowPoliciesOutputArgs {
    dataFilters?: pulumi.Input<pulumi.Input<inputs.GetFlowPoliciesDataFilterArgs>[]>;
    environmentId: pulumi.Input<string>;
    scimFilter?: pulumi.Input<string>;
}
