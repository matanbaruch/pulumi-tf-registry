// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AuthorizeApiServiceDeployment extends pulumi.CustomResource {
    /**
     * Get an existing AuthorizeApiServiceDeployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthorizeApiServiceDeploymentState, opts?: pulumi.CustomResourceOptions): AuthorizeApiServiceDeployment {
        return new AuthorizeApiServiceDeployment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingone:index/authorizeApiServiceDeployment:AuthorizeApiServiceDeployment';

    /**
     * Returns true if the given object is an instance of AuthorizeApiServiceDeployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthorizeApiServiceDeployment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthorizeApiServiceDeployment.__pulumiType;
    }

    /**
     * The ID of the API service to deploy. Must be a valid PingOne resource ID. This field is immutable and will trigger a
     * replace plan if changed.
     */
    public readonly apiServiceId!: pulumi.Output<string>;
    /**
     * A single object that describes properties related to the authorization version that relates to the API service that has
     * been deployed.
     */
    public /*out*/ readonly authorizationVersion!: pulumi.Output<outputs.AuthorizeApiServiceDeploymentAuthorizationVersion>;
    /**
     * A single object that describes properties related to the decision endpoint that relates to the API service that has been
     * deployed.
     */
    public /*out*/ readonly decisionEndpoint!: pulumi.Output<outputs.AuthorizeApiServiceDeploymentDecisionEndpoint>;
    /**
     * An RFC3339 compliant date/time string that specifies the time of the most recent successful deployment. The field will
     * be null if the API service has never been successfully deployed.
     */
    public /*out*/ readonly deployedAt!: pulumi.Output<string>;
    /**
     * The ID of the environment to deploy the API Service in. Must be a valid PingOne resource ID. This field is immutable and
     * will trigger a replace plan if changed.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * A single object that describes properties related to the root policy that relates to the API service that has been
     * deployed.
     */
    public /*out*/ readonly policy!: pulumi.Output<outputs.AuthorizeApiServiceDeploymentPolicy>;
    /**
     * A meta-argument map of values that, if any values are changed, will force redeployment. Adding values to and removing
     * values from the map will not trigger a deployment.
     */
    public readonly redeploymentTriggerValues!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A single object that describes properties related to the status of the API service deployment.
     */
    public /*out*/ readonly status!: pulumi.Output<outputs.AuthorizeApiServiceDeploymentStatus>;

    /**
     * Create a AuthorizeApiServiceDeployment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthorizeApiServiceDeploymentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthorizeApiServiceDeploymentArgs | AuthorizeApiServiceDeploymentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthorizeApiServiceDeploymentState | undefined;
            resourceInputs["apiServiceId"] = state ? state.apiServiceId : undefined;
            resourceInputs["authorizationVersion"] = state ? state.authorizationVersion : undefined;
            resourceInputs["decisionEndpoint"] = state ? state.decisionEndpoint : undefined;
            resourceInputs["deployedAt"] = state ? state.deployedAt : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["redeploymentTriggerValues"] = state ? state.redeploymentTriggerValues : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as AuthorizeApiServiceDeploymentArgs | undefined;
            if ((!args || args.apiServiceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiServiceId'");
            }
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            resourceInputs["apiServiceId"] = args ? args.apiServiceId : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["redeploymentTriggerValues"] = args ? args.redeploymentTriggerValues : undefined;
            resourceInputs["authorizationVersion"] = undefined /*out*/;
            resourceInputs["decisionEndpoint"] = undefined /*out*/;
            resourceInputs["deployedAt"] = undefined /*out*/;
            resourceInputs["policy"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AuthorizeApiServiceDeployment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AuthorizeApiServiceDeployment resources.
 */
export interface AuthorizeApiServiceDeploymentState {
    /**
     * The ID of the API service to deploy. Must be a valid PingOne resource ID. This field is immutable and will trigger a
     * replace plan if changed.
     */
    apiServiceId?: pulumi.Input<string>;
    /**
     * A single object that describes properties related to the authorization version that relates to the API service that has
     * been deployed.
     */
    authorizationVersion?: pulumi.Input<inputs.AuthorizeApiServiceDeploymentAuthorizationVersion>;
    /**
     * A single object that describes properties related to the decision endpoint that relates to the API service that has been
     * deployed.
     */
    decisionEndpoint?: pulumi.Input<inputs.AuthorizeApiServiceDeploymentDecisionEndpoint>;
    /**
     * An RFC3339 compliant date/time string that specifies the time of the most recent successful deployment. The field will
     * be null if the API service has never been successfully deployed.
     */
    deployedAt?: pulumi.Input<string>;
    /**
     * The ID of the environment to deploy the API Service in. Must be a valid PingOne resource ID. This field is immutable and
     * will trigger a replace plan if changed.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * A single object that describes properties related to the root policy that relates to the API service that has been
     * deployed.
     */
    policy?: pulumi.Input<inputs.AuthorizeApiServiceDeploymentPolicy>;
    /**
     * A meta-argument map of values that, if any values are changed, will force redeployment. Adding values to and removing
     * values from the map will not trigger a deployment.
     */
    redeploymentTriggerValues?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A single object that describes properties related to the status of the API service deployment.
     */
    status?: pulumi.Input<inputs.AuthorizeApiServiceDeploymentStatus>;
}

/**
 * The set of arguments for constructing a AuthorizeApiServiceDeployment resource.
 */
export interface AuthorizeApiServiceDeploymentArgs {
    /**
     * The ID of the API service to deploy. Must be a valid PingOne resource ID. This field is immutable and will trigger a
     * replace plan if changed.
     */
    apiServiceId: pulumi.Input<string>;
    /**
     * The ID of the environment to deploy the API Service in. Must be a valid PingOne resource ID. This field is immutable and
     * will trigger a replace plan if changed.
     */
    environmentId: pulumi.Input<string>;
    /**
     * A meta-argument map of values that, if any values are changed, will force redeployment. Adding values to and removing
     * values from the map will not trigger a deployment.
     */
    redeploymentTriggerValues?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
