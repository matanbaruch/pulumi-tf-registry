// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CertificateSigningResponse extends pulumi.CustomResource {
    /**
     * Get an existing CertificateSigningResponse resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateSigningResponseState, opts?: pulumi.CustomResourceOptions): CertificateSigningResponse {
        return new CertificateSigningResponse(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingone:index/certificateSigningResponse:CertificateSigningResponse';

    /**
     * Returns true if the given object is an instance of CertificateSigningResponse.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CertificateSigningResponse {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CertificateSigningResponse.__pulumiType;
    }

    /**
     * Specifies the key algorithm. Options are `RSA`, `EC`, and `UNKNOWN`.
     */
    public /*out*/ readonly algorithm!: pulumi.Output<string>;
    /**
     * A boolean that specifies whether this is the default key for the specified environment.
     */
    public /*out*/ readonly default!: pulumi.Output<boolean>;
    /**
     * The ID of the environment that contains the key to which the CSR corresponds.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * The time the key resource expires.
     */
    public /*out*/ readonly expiresAt!: pulumi.Output<string>;
    /**
     * A string that specifies the distinguished name of the certificate issuer.
     */
    public /*out*/ readonly issuerDn!: pulumi.Output<string>;
    /**
     * The system name of the key.
     */
    public readonly keyId!: pulumi.Output<string>;
    /**
     * An integer that specifies the key length. For RSA keys, options are `2048`, `3072`, `4096` and `7680`. For elliptical
     * curve (EC) keys, options are `224`, `256`, `384` and `521`.
     */
    public /*out*/ readonly keyLength!: pulumi.Output<number>;
    /**
     * The system name of the key.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * A PEM encoded file that has been provided by the signing authority in response to the key's CSR.
     */
    public readonly pemCaResponseFile!: pulumi.Output<string>;
    /**
     * An integer (in string data type) that specifies the serial number of the key or certificate.
     */
    public /*out*/ readonly serialNumber!: pulumi.Output<string>;
    /**
     * Specifies the signature algorithm of the key. For RSA keys, options are `SHA256withRSA`, `SHA384withRSA` and
     * `SHA512withRSA`. For elliptical curve (EC) keys, options are `SHA256withECDSA`, `SHA384withECDSA` and `SHA512withECDSA`.
     */
    public /*out*/ readonly signatureAlgorithm!: pulumi.Output<string>;
    /**
     * The time the validity period starts.
     */
    public /*out*/ readonly startsAt!: pulumi.Output<string>;
    /**
     * A string that specifies the status of the key. Options are `VALID`, `EXPIRING`, `EXPIRED`, `NOT_YET_VALID`, and
     * `REVOKED`.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * A string that specifies the distinguished name of the subject being secured.
     */
    public /*out*/ readonly subjectDn!: pulumi.Output<string>;
    /**
     * A string that specifies how the certificate is used. Options are `ENCRYPTION`, `SIGNING`, `SSL/TLS` and `ISSUANCE`.
     */
    public /*out*/ readonly usageType!: pulumi.Output<string>;
    /**
     * An integer that specifies the number of days the key is valid.
     */
    public /*out*/ readonly validityPeriod!: pulumi.Output<number>;

    /**
     * Create a CertificateSigningResponse resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateSigningResponseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateSigningResponseArgs | CertificateSigningResponseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateSigningResponseState | undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["default"] = state ? state.default : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["expiresAt"] = state ? state.expiresAt : undefined;
            resourceInputs["issuerDn"] = state ? state.issuerDn : undefined;
            resourceInputs["keyId"] = state ? state.keyId : undefined;
            resourceInputs["keyLength"] = state ? state.keyLength : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pemCaResponseFile"] = state ? state.pemCaResponseFile : undefined;
            resourceInputs["serialNumber"] = state ? state.serialNumber : undefined;
            resourceInputs["signatureAlgorithm"] = state ? state.signatureAlgorithm : undefined;
            resourceInputs["startsAt"] = state ? state.startsAt : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subjectDn"] = state ? state.subjectDn : undefined;
            resourceInputs["usageType"] = state ? state.usageType : undefined;
            resourceInputs["validityPeriod"] = state ? state.validityPeriod : undefined;
        } else {
            const args = argsOrState as CertificateSigningResponseArgs | undefined;
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.keyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyId'");
            }
            if ((!args || args.pemCaResponseFile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pemCaResponseFile'");
            }
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["keyId"] = args ? args.keyId : undefined;
            resourceInputs["pemCaResponseFile"] = args ? args.pemCaResponseFile : undefined;
            resourceInputs["algorithm"] = undefined /*out*/;
            resourceInputs["default"] = undefined /*out*/;
            resourceInputs["expiresAt"] = undefined /*out*/;
            resourceInputs["issuerDn"] = undefined /*out*/;
            resourceInputs["keyLength"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["serialNumber"] = undefined /*out*/;
            resourceInputs["signatureAlgorithm"] = undefined /*out*/;
            resourceInputs["startsAt"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["subjectDn"] = undefined /*out*/;
            resourceInputs["usageType"] = undefined /*out*/;
            resourceInputs["validityPeriod"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CertificateSigningResponse.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CertificateSigningResponse resources.
 */
export interface CertificateSigningResponseState {
    /**
     * Specifies the key algorithm. Options are `RSA`, `EC`, and `UNKNOWN`.
     */
    algorithm?: pulumi.Input<string>;
    /**
     * A boolean that specifies whether this is the default key for the specified environment.
     */
    default?: pulumi.Input<boolean>;
    /**
     * The ID of the environment that contains the key to which the CSR corresponds.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * The time the key resource expires.
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * A string that specifies the distinguished name of the certificate issuer.
     */
    issuerDn?: pulumi.Input<string>;
    /**
     * The system name of the key.
     */
    keyId?: pulumi.Input<string>;
    /**
     * An integer that specifies the key length. For RSA keys, options are `2048`, `3072`, `4096` and `7680`. For elliptical
     * curve (EC) keys, options are `224`, `256`, `384` and `521`.
     */
    keyLength?: pulumi.Input<number>;
    /**
     * The system name of the key.
     */
    name?: pulumi.Input<string>;
    /**
     * A PEM encoded file that has been provided by the signing authority in response to the key's CSR.
     */
    pemCaResponseFile?: pulumi.Input<string>;
    /**
     * An integer (in string data type) that specifies the serial number of the key or certificate.
     */
    serialNumber?: pulumi.Input<string>;
    /**
     * Specifies the signature algorithm of the key. For RSA keys, options are `SHA256withRSA`, `SHA384withRSA` and
     * `SHA512withRSA`. For elliptical curve (EC) keys, options are `SHA256withECDSA`, `SHA384withECDSA` and `SHA512withECDSA`.
     */
    signatureAlgorithm?: pulumi.Input<string>;
    /**
     * The time the validity period starts.
     */
    startsAt?: pulumi.Input<string>;
    /**
     * A string that specifies the status of the key. Options are `VALID`, `EXPIRING`, `EXPIRED`, `NOT_YET_VALID`, and
     * `REVOKED`.
     */
    status?: pulumi.Input<string>;
    /**
     * A string that specifies the distinguished name of the subject being secured.
     */
    subjectDn?: pulumi.Input<string>;
    /**
     * A string that specifies how the certificate is used. Options are `ENCRYPTION`, `SIGNING`, `SSL/TLS` and `ISSUANCE`.
     */
    usageType?: pulumi.Input<string>;
    /**
     * An integer that specifies the number of days the key is valid.
     */
    validityPeriod?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a CertificateSigningResponse resource.
 */
export interface CertificateSigningResponseArgs {
    /**
     * The ID of the environment that contains the key to which the CSR corresponds.
     */
    environmentId: pulumi.Input<string>;
    /**
     * The system name of the key.
     */
    keyId: pulumi.Input<string>;
    /**
     * A PEM encoded file that has been provided by the signing authority in response to the key's CSR.
     */
    pemCaResponseFile: pulumi.Input<string>;
}
