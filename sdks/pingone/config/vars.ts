// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("pingone");

/**
 * The access token used for provider resource management against the PingOne management API. Default value can be set with
 * the `PINGONE_API_ACCESS_TOKEN` environment variable. Must provide only one of `api_access_token` (when obtaining the
 * worker token outside of the provider) and `client_id` (when the provider should fetch the worker token during
 * operations).
 */
export declare const apiAccessToken: string | undefined;
Object.defineProperty(exports, "apiAccessToken", {
    get() {
        return __config.get("apiAccessToken");
    },
    enumerable: true,
});

/**
 * A custom string value to append to the end of the `User-Agent` header when making API requests to the PingOne service.
 * Default value can be set with the `PINGONE_TF_APPEND_USER_AGENT` environment variable.
 */
export declare const appendUserAgent: string | undefined;
Object.defineProperty(exports, "appendUserAgent", {
    get() {
        return __config.get("appendUserAgent");
    },
    enumerable: true,
});

/**
 * Client ID for the worker app client. Default value can be set with the `PINGONE_CLIENT_ID` environment variable. Must
 * provide only one of `api_access_token` (when obtaining the worker token outside of the provider) and `client_id` (when
 * the provider should fetch the worker token during operations). Must be configured with `client_secret` and
 * `environment_id`.
 */
export declare const clientId: string | undefined;
Object.defineProperty(exports, "clientId", {
    get() {
        return __config.get("clientId");
    },
    enumerable: true,
});

/**
 * Client secret for the worker app client. Default value can be set with the `PINGONE_CLIENT_SECRET` environment variable.
 * Must be configured with `client_id` and `environment_id`.
 */
export declare const clientSecret: string | undefined;
Object.defineProperty(exports, "clientSecret", {
    get() {
        return __config.get("clientSecret");
    },
    enumerable: true,
});

/**
 * Environment ID for the worker app client. Default value can be set with the `PINGONE_ENVIRONMENT_ID` environment
 * variable. Must be configured with `client_id` and `client_secret`.
 */
export declare const environmentId: string | undefined;
Object.defineProperty(exports, "environmentId", {
    get() {
        return __config.get("environmentId");
    },
    enumerable: true,
});

/**
 * A single block containing configuration items to override API behaviours in PingOne.
 */
export declare const globalOptions: outputs.config.GlobalOptions[] | undefined;
Object.defineProperty(exports, "globalOptions", {
    get() {
        return __config.getObject<outputs.config.GlobalOptions[]>("globalOptions");
    },
    enumerable: true,
});

/**
 * Full URL for the http/https proxy service, for example `http://127.0.0.1:8090`. Default value can be set with the
 * `HTTP_PROXY` or `HTTPS_PROXY` environment variables.
 */
export declare const httpProxy: string | undefined;
Object.defineProperty(exports, "httpProxy", {
    get() {
        return __config.get("httpProxy");
    },
    enumerable: true,
});

/**
 * The PingOne region to use, which selects the appropriate service endpoints. Options are `AP` (for Asia-Pacific `.asia`
 * tenants), `AU` (for Asia-Pacific `.com.au` tenants), `CA` (for Canada `.ca` tenants), `EU` (for Europe `.eu` tenants)
 * and `NA` (for North America `.com` tenants). Default value can be set with the `PINGONE_REGION_CODE` environment
 * variable.
 */
export declare const regionCode: string | undefined;
Object.defineProperty(exports, "regionCode", {
    get() {
        return __config.get("regionCode");
    },
    enumerable: true,
});

/**
 * A single block containing configuration items to override the service API endpoints of PingOne.
 */
export declare const serviceEndpoints: outputs.config.ServiceEndpoints[] | undefined;
Object.defineProperty(exports, "serviceEndpoints", {
    get() {
        return __config.getObject<outputs.config.ServiceEndpoints[]>("serviceEndpoints");
    },
    enumerable: true,
});

