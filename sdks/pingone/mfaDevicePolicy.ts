// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MfaDevicePolicy extends pulumi.CustomResource {
    /**
     * Get an existing MfaDevicePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MfaDevicePolicyState, opts?: pulumi.CustomResourceOptions): MfaDevicePolicy {
        return new MfaDevicePolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingone:index/mfaDevicePolicy:MfaDevicePolicy';

    /**
     * Returns true if the given object is an instance of MfaDevicePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MfaDevicePolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MfaDevicePolicy.__pulumiType;
    }

    /**
     * A single object that allows configuration of authentication settings in the device policy.
     */
    public readonly authentication!: pulumi.Output<outputs.MfaDevicePolicyAuthentication>;
    /**
     * A boolean that specifies whether this MFA device policy is enforced as the default within the environment. When set to
     * `true`, all other MFA device policies are `false`. Defaults to `false`.
     */
    public /*out*/ readonly default!: pulumi.Output<boolean>;
    /**
     * A single object that allows configuration of email OTP device authentication policy settings.
     */
    public readonly email!: pulumi.Output<outputs.MfaDevicePolicyEmail>;
    /**
     * The ID of the environment that contains the MFA device policy to manage. Must be a valid PingOne resource ID. This field
     * is immutable and will trigger a replace plan if changed.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * A single object that allows configuration of FIDO2 device authentication policy settings.
     */
    public readonly fido2!: pulumi.Output<outputs.MfaDevicePolicyFido2 | undefined>;
    /**
     * A single object that allows configuration of mobile push/OTP device authentication policy settings. This factor requires
     * embedding the PingOne MFA SDK into a customer facing mobile application, and configuring as a Native application using
     * the `pingone.Application` resource.
     */
    public readonly mobile!: pulumi.Output<outputs.MfaDevicePolicyMobile>;
    /**
     * A string that specifies the MFA policy's unique name within the environment.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A string that defines whether a user should be notified if a new authentication method has been added to their account.
     * Options are `EMAIL_THEN_SMS`, `NONE`, `SMS_THEN_EMAIL`. Defaults to `NONE`.
     */
    public readonly newDeviceNotification!: pulumi.Output<string>;
    /**
     * A single object that allows configuration of SMS OTP device authentication policy settings.
     */
    public readonly sms!: pulumi.Output<outputs.MfaDevicePolicySms>;
    public readonly totp!: pulumi.Output<outputs.MfaDevicePolicyTotp>;
    /**
     * A single object that allows configuration of voice OTP device authentication policy settings.
     */
    public readonly voice!: pulumi.Output<outputs.MfaDevicePolicyVoice>;

    /**
     * Create a MfaDevicePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MfaDevicePolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MfaDevicePolicyArgs | MfaDevicePolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MfaDevicePolicyState | undefined;
            resourceInputs["authentication"] = state ? state.authentication : undefined;
            resourceInputs["default"] = state ? state.default : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["fido2"] = state ? state.fido2 : undefined;
            resourceInputs["mobile"] = state ? state.mobile : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["newDeviceNotification"] = state ? state.newDeviceNotification : undefined;
            resourceInputs["sms"] = state ? state.sms : undefined;
            resourceInputs["totp"] = state ? state.totp : undefined;
            resourceInputs["voice"] = state ? state.voice : undefined;
        } else {
            const args = argsOrState as MfaDevicePolicyArgs | undefined;
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.mobile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mobile'");
            }
            if ((!args || args.sms === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sms'");
            }
            if ((!args || args.totp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'totp'");
            }
            if ((!args || args.voice === undefined) && !opts.urn) {
                throw new Error("Missing required property 'voice'");
            }
            resourceInputs["authentication"] = args ? args.authentication : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["fido2"] = args ? args.fido2 : undefined;
            resourceInputs["mobile"] = args ? args.mobile : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["newDeviceNotification"] = args ? args.newDeviceNotification : undefined;
            resourceInputs["sms"] = args ? args.sms : undefined;
            resourceInputs["totp"] = args ? args.totp : undefined;
            resourceInputs["voice"] = args ? args.voice : undefined;
            resourceInputs["default"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MfaDevicePolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MfaDevicePolicy resources.
 */
export interface MfaDevicePolicyState {
    /**
     * A single object that allows configuration of authentication settings in the device policy.
     */
    authentication?: pulumi.Input<inputs.MfaDevicePolicyAuthentication>;
    /**
     * A boolean that specifies whether this MFA device policy is enforced as the default within the environment. When set to
     * `true`, all other MFA device policies are `false`. Defaults to `false`.
     */
    default?: pulumi.Input<boolean>;
    /**
     * A single object that allows configuration of email OTP device authentication policy settings.
     */
    email?: pulumi.Input<inputs.MfaDevicePolicyEmail>;
    /**
     * The ID of the environment that contains the MFA device policy to manage. Must be a valid PingOne resource ID. This field
     * is immutable and will trigger a replace plan if changed.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * A single object that allows configuration of FIDO2 device authentication policy settings.
     */
    fido2?: pulumi.Input<inputs.MfaDevicePolicyFido2>;
    /**
     * A single object that allows configuration of mobile push/OTP device authentication policy settings. This factor requires
     * embedding the PingOne MFA SDK into a customer facing mobile application, and configuring as a Native application using
     * the `pingone.Application` resource.
     */
    mobile?: pulumi.Input<inputs.MfaDevicePolicyMobile>;
    /**
     * A string that specifies the MFA policy's unique name within the environment.
     */
    name?: pulumi.Input<string>;
    /**
     * A string that defines whether a user should be notified if a new authentication method has been added to their account.
     * Options are `EMAIL_THEN_SMS`, `NONE`, `SMS_THEN_EMAIL`. Defaults to `NONE`.
     */
    newDeviceNotification?: pulumi.Input<string>;
    /**
     * A single object that allows configuration of SMS OTP device authentication policy settings.
     */
    sms?: pulumi.Input<inputs.MfaDevicePolicySms>;
    totp?: pulumi.Input<inputs.MfaDevicePolicyTotp>;
    /**
     * A single object that allows configuration of voice OTP device authentication policy settings.
     */
    voice?: pulumi.Input<inputs.MfaDevicePolicyVoice>;
}

/**
 * The set of arguments for constructing a MfaDevicePolicy resource.
 */
export interface MfaDevicePolicyArgs {
    /**
     * A single object that allows configuration of authentication settings in the device policy.
     */
    authentication?: pulumi.Input<inputs.MfaDevicePolicyAuthentication>;
    /**
     * A single object that allows configuration of email OTP device authentication policy settings.
     */
    email: pulumi.Input<inputs.MfaDevicePolicyEmail>;
    /**
     * The ID of the environment that contains the MFA device policy to manage. Must be a valid PingOne resource ID. This field
     * is immutable and will trigger a replace plan if changed.
     */
    environmentId: pulumi.Input<string>;
    /**
     * A single object that allows configuration of FIDO2 device authentication policy settings.
     */
    fido2?: pulumi.Input<inputs.MfaDevicePolicyFido2>;
    /**
     * A single object that allows configuration of mobile push/OTP device authentication policy settings. This factor requires
     * embedding the PingOne MFA SDK into a customer facing mobile application, and configuring as a Native application using
     * the `pingone.Application` resource.
     */
    mobile: pulumi.Input<inputs.MfaDevicePolicyMobile>;
    /**
     * A string that specifies the MFA policy's unique name within the environment.
     */
    name?: pulumi.Input<string>;
    /**
     * A string that defines whether a user should be notified if a new authentication method has been added to their account.
     * Options are `EMAIL_THEN_SMS`, `NONE`, `SMS_THEN_EMAIL`. Defaults to `NONE`.
     */
    newDeviceNotification?: pulumi.Input<string>;
    /**
     * A single object that allows configuration of SMS OTP device authentication policy settings.
     */
    sms: pulumi.Input<inputs.MfaDevicePolicySms>;
    totp: pulumi.Input<inputs.MfaDevicePolicyTotp>;
    /**
     * A single object that allows configuration of voice OTP device authentication policy settings.
     */
    voice: pulumi.Input<inputs.MfaDevicePolicyVoice>;
}
