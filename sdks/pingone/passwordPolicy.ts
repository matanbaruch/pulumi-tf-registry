// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PasswordPolicy extends pulumi.CustomResource {
    /**
     * Get an existing PasswordPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PasswordPolicyState, opts?: pulumi.CustomResourceOptions): PasswordPolicy {
        return new PasswordPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingone:index/passwordPolicy:PasswordPolicy';

    /**
     * Returns true if the given object is an instance of PasswordPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PasswordPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PasswordPolicy.__pulumiType;
    }

    /**
     * A boolean that specifies whether this password policy is enforced as the default within the environment. When set to
     * `true`, all other password policies are set to `false`. Defaults to `false`.
     */
    public readonly default!: pulumi.Output<boolean>;
    /**
     * A string that specifies the description to apply to the password policy.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The ID of the environment to manage the password policy in. Must be a valid PingOne resource ID. This field is immutable
     * and will trigger a replace plan if changed.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * A boolean that specifies whether to ensure the password is not one of the commonly used passwords. Defaults to `false`.
     */
    public readonly excludesCommonlyUsedPasswords!: pulumi.Output<boolean>;
    /**
     * A boolean that specifies whether to ensure the password is not an exact match for the value of any attribute in the
     * user's profile, such as name, phone number, or address. Defaults to `false`.
     */
    public readonly excludesProfileData!: pulumi.Output<boolean>;
    /**
     * A single object that specifies settings to control the user's password history.
     */
    public readonly history!: pulumi.Output<outputs.PasswordPolicyHistory | undefined>;
    /**
     * A single object that specifies settings to control the user's password length.
     */
    public readonly length!: pulumi.Output<outputs.PasswordPolicyLength | undefined>;
    /**
     * A single object that specifies settings to control the user's lockout on unsuccessful authentication attempts.
     */
    public readonly lockout!: pulumi.Output<outputs.PasswordPolicyLockout | undefined>;
    /**
     * An integer that specifies the maximum number of repeated characters allowed. This property is not enforced when not
     * present. Fixed value of `2`.
     */
    public readonly maxRepeatedCharacters!: pulumi.Output<number | undefined>;
    /**
     * A single object that specifies sets of characters that can be included, and the value is the minimum number of times one
     * of the characters must appear in the user's password. The only allowed key values are `ABCDEFGHIJKLMNOPQRSTUVWXYZ`,
     * `abcdefghijklmnopqrstuvwxyz`, `0123456789`, and `~!@#$%^&*()-_=+[]{}\|;:,.<>/?`. This property is not enforced when not
     * present.
     */
    public readonly minCharacters!: pulumi.Output<outputs.PasswordPolicyMinCharacters | undefined>;
    /**
     * An integer that specifies the minimum complexity of the password based on the concept of password haystacks. The value
     * is the number of days required to exhaust the entire search space during a brute force attack. This property is not
     * enforced when not present. Fixed value of `7`.
     */
    public readonly minComplexity!: pulumi.Output<number | undefined>;
    /**
     * An integer that specifies the minimum number of unique characters required. This property is not enforced when not
     * present. Fixed value of `5`.
     */
    public readonly minUniqueCharacters!: pulumi.Output<number | undefined>;
    /**
     * A string that specifies the name of the password policy.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A boolean that, when set to `true`, ensures that the proposed password is not too similar to the user's current password
     * based on the Levenshtein distance algorithm. The value of this parameter is evaluated only for password change actions
     * in which the user enters both the current and the new password. By design, PingOne does not know the user's current
     * password. Defaults to `false`.
     */
    public readonly notSimilarToCurrent!: pulumi.Output<boolean>;
    /**
     * An integer that specifies the maximum number of days the same password can be used before it must be changed. The value
     * must be a positive, non-zero integer. The value must be greater than the sum of `min` (if set) + 21 (the expiration
     * warning interval for passwords).
     */
    public readonly passwordAgeMax!: pulumi.Output<number | undefined>;
    /**
     * An integer that specifies the minimum number of days a password must be used before changing. The value must be a
     * positive, non-zero integer. This property is not enforced when not present.
     */
    public readonly passwordAgeMin!: pulumi.Output<number | undefined>;
    /**
     * An integer that specifies the number of populations associated with the password policy.
     */
    public /*out*/ readonly populationCount!: pulumi.Output<number>;

    /**
     * Create a PasswordPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PasswordPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PasswordPolicyArgs | PasswordPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PasswordPolicyState | undefined;
            resourceInputs["default"] = state ? state.default : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["excludesCommonlyUsedPasswords"] = state ? state.excludesCommonlyUsedPasswords : undefined;
            resourceInputs["excludesProfileData"] = state ? state.excludesProfileData : undefined;
            resourceInputs["history"] = state ? state.history : undefined;
            resourceInputs["length"] = state ? state.length : undefined;
            resourceInputs["lockout"] = state ? state.lockout : undefined;
            resourceInputs["maxRepeatedCharacters"] = state ? state.maxRepeatedCharacters : undefined;
            resourceInputs["minCharacters"] = state ? state.minCharacters : undefined;
            resourceInputs["minComplexity"] = state ? state.minComplexity : undefined;
            resourceInputs["minUniqueCharacters"] = state ? state.minUniqueCharacters : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notSimilarToCurrent"] = state ? state.notSimilarToCurrent : undefined;
            resourceInputs["passwordAgeMax"] = state ? state.passwordAgeMax : undefined;
            resourceInputs["passwordAgeMin"] = state ? state.passwordAgeMin : undefined;
            resourceInputs["populationCount"] = state ? state.populationCount : undefined;
        } else {
            const args = argsOrState as PasswordPolicyArgs | undefined;
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            resourceInputs["default"] = args ? args.default : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["excludesCommonlyUsedPasswords"] = args ? args.excludesCommonlyUsedPasswords : undefined;
            resourceInputs["excludesProfileData"] = args ? args.excludesProfileData : undefined;
            resourceInputs["history"] = args ? args.history : undefined;
            resourceInputs["length"] = args ? args.length : undefined;
            resourceInputs["lockout"] = args ? args.lockout : undefined;
            resourceInputs["maxRepeatedCharacters"] = args ? args.maxRepeatedCharacters : undefined;
            resourceInputs["minCharacters"] = args ? args.minCharacters : undefined;
            resourceInputs["minComplexity"] = args ? args.minComplexity : undefined;
            resourceInputs["minUniqueCharacters"] = args ? args.minUniqueCharacters : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notSimilarToCurrent"] = args ? args.notSimilarToCurrent : undefined;
            resourceInputs["passwordAgeMax"] = args ? args.passwordAgeMax : undefined;
            resourceInputs["passwordAgeMin"] = args ? args.passwordAgeMin : undefined;
            resourceInputs["populationCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PasswordPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PasswordPolicy resources.
 */
export interface PasswordPolicyState {
    /**
     * A boolean that specifies whether this password policy is enforced as the default within the environment. When set to
     * `true`, all other password policies are set to `false`. Defaults to `false`.
     */
    default?: pulumi.Input<boolean>;
    /**
     * A string that specifies the description to apply to the password policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the environment to manage the password policy in. Must be a valid PingOne resource ID. This field is immutable
     * and will trigger a replace plan if changed.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * A boolean that specifies whether to ensure the password is not one of the commonly used passwords. Defaults to `false`.
     */
    excludesCommonlyUsedPasswords?: pulumi.Input<boolean>;
    /**
     * A boolean that specifies whether to ensure the password is not an exact match for the value of any attribute in the
     * user's profile, such as name, phone number, or address. Defaults to `false`.
     */
    excludesProfileData?: pulumi.Input<boolean>;
    /**
     * A single object that specifies settings to control the user's password history.
     */
    history?: pulumi.Input<inputs.PasswordPolicyHistory>;
    /**
     * A single object that specifies settings to control the user's password length.
     */
    length?: pulumi.Input<inputs.PasswordPolicyLength>;
    /**
     * A single object that specifies settings to control the user's lockout on unsuccessful authentication attempts.
     */
    lockout?: pulumi.Input<inputs.PasswordPolicyLockout>;
    /**
     * An integer that specifies the maximum number of repeated characters allowed. This property is not enforced when not
     * present. Fixed value of `2`.
     */
    maxRepeatedCharacters?: pulumi.Input<number>;
    /**
     * A single object that specifies sets of characters that can be included, and the value is the minimum number of times one
     * of the characters must appear in the user's password. The only allowed key values are `ABCDEFGHIJKLMNOPQRSTUVWXYZ`,
     * `abcdefghijklmnopqrstuvwxyz`, `0123456789`, and `~!@#$%^&*()-_=+[]{}\|;:,.<>/?`. This property is not enforced when not
     * present.
     */
    minCharacters?: pulumi.Input<inputs.PasswordPolicyMinCharacters>;
    /**
     * An integer that specifies the minimum complexity of the password based on the concept of password haystacks. The value
     * is the number of days required to exhaust the entire search space during a brute force attack. This property is not
     * enforced when not present. Fixed value of `7`.
     */
    minComplexity?: pulumi.Input<number>;
    /**
     * An integer that specifies the minimum number of unique characters required. This property is not enforced when not
     * present. Fixed value of `5`.
     */
    minUniqueCharacters?: pulumi.Input<number>;
    /**
     * A string that specifies the name of the password policy.
     */
    name?: pulumi.Input<string>;
    /**
     * A boolean that, when set to `true`, ensures that the proposed password is not too similar to the user's current password
     * based on the Levenshtein distance algorithm. The value of this parameter is evaluated only for password change actions
     * in which the user enters both the current and the new password. By design, PingOne does not know the user's current
     * password. Defaults to `false`.
     */
    notSimilarToCurrent?: pulumi.Input<boolean>;
    /**
     * An integer that specifies the maximum number of days the same password can be used before it must be changed. The value
     * must be a positive, non-zero integer. The value must be greater than the sum of `min` (if set) + 21 (the expiration
     * warning interval for passwords).
     */
    passwordAgeMax?: pulumi.Input<number>;
    /**
     * An integer that specifies the minimum number of days a password must be used before changing. The value must be a
     * positive, non-zero integer. This property is not enforced when not present.
     */
    passwordAgeMin?: pulumi.Input<number>;
    /**
     * An integer that specifies the number of populations associated with the password policy.
     */
    populationCount?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a PasswordPolicy resource.
 */
export interface PasswordPolicyArgs {
    /**
     * A boolean that specifies whether this password policy is enforced as the default within the environment. When set to
     * `true`, all other password policies are set to `false`. Defaults to `false`.
     */
    default?: pulumi.Input<boolean>;
    /**
     * A string that specifies the description to apply to the password policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the environment to manage the password policy in. Must be a valid PingOne resource ID. This field is immutable
     * and will trigger a replace plan if changed.
     */
    environmentId: pulumi.Input<string>;
    /**
     * A boolean that specifies whether to ensure the password is not one of the commonly used passwords. Defaults to `false`.
     */
    excludesCommonlyUsedPasswords?: pulumi.Input<boolean>;
    /**
     * A boolean that specifies whether to ensure the password is not an exact match for the value of any attribute in the
     * user's profile, such as name, phone number, or address. Defaults to `false`.
     */
    excludesProfileData?: pulumi.Input<boolean>;
    /**
     * A single object that specifies settings to control the user's password history.
     */
    history?: pulumi.Input<inputs.PasswordPolicyHistory>;
    /**
     * A single object that specifies settings to control the user's password length.
     */
    length?: pulumi.Input<inputs.PasswordPolicyLength>;
    /**
     * A single object that specifies settings to control the user's lockout on unsuccessful authentication attempts.
     */
    lockout?: pulumi.Input<inputs.PasswordPolicyLockout>;
    /**
     * An integer that specifies the maximum number of repeated characters allowed. This property is not enforced when not
     * present. Fixed value of `2`.
     */
    maxRepeatedCharacters?: pulumi.Input<number>;
    /**
     * A single object that specifies sets of characters that can be included, and the value is the minimum number of times one
     * of the characters must appear in the user's password. The only allowed key values are `ABCDEFGHIJKLMNOPQRSTUVWXYZ`,
     * `abcdefghijklmnopqrstuvwxyz`, `0123456789`, and `~!@#$%^&*()-_=+[]{}\|;:,.<>/?`. This property is not enforced when not
     * present.
     */
    minCharacters?: pulumi.Input<inputs.PasswordPolicyMinCharacters>;
    /**
     * An integer that specifies the minimum complexity of the password based on the concept of password haystacks. The value
     * is the number of days required to exhaust the entire search space during a brute force attack. This property is not
     * enforced when not present. Fixed value of `7`.
     */
    minComplexity?: pulumi.Input<number>;
    /**
     * An integer that specifies the minimum number of unique characters required. This property is not enforced when not
     * present. Fixed value of `5`.
     */
    minUniqueCharacters?: pulumi.Input<number>;
    /**
     * A string that specifies the name of the password policy.
     */
    name?: pulumi.Input<string>;
    /**
     * A boolean that, when set to `true`, ensures that the proposed password is not too similar to the user's current password
     * based on the Levenshtein distance algorithm. The value of this parameter is evaluated only for password change actions
     * in which the user enters both the current and the new password. By design, PingOne does not know the user's current
     * password. Defaults to `false`.
     */
    notSimilarToCurrent?: pulumi.Input<boolean>;
    /**
     * An integer that specifies the maximum number of days the same password can be used before it must be changed. The value
     * must be a positive, non-zero integer. The value must be greater than the sum of `min` (if set) + 21 (the expiration
     * warning interval for passwords).
     */
    passwordAgeMax?: pulumi.Input<number>;
    /**
     * An integer that specifies the minimum number of days a password must be used before changing. The value must be a
     * positive, non-zero integer. This property is not enforced when not present.
     */
    passwordAgeMin?: pulumi.Input<number>;
}
