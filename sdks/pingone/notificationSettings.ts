// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NotificationSettings extends pulumi.CustomResource {
    /**
     * Get an existing NotificationSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotificationSettingsState, opts?: pulumi.CustomResourceOptions): NotificationSettings {
        return new NotificationSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingone:index/notificationSettings:NotificationSettings';

    /**
     * Returns true if the given object is an instance of NotificationSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NotificationSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NotificationSettings.__pulumiType;
    }

    /**
     * A set of objects that represent actors that are exempt from any delivery restrictions.
     */
    public readonly allowedLists!: pulumi.Output<outputs.NotificationSettingsAllowedList[] | undefined>;
    /**
     * A string that specifies the delivery mode that the settings apply for. Options are `ALL`. Defaults to `ALL`.
     */
    public readonly deliveryMode!: pulumi.Output<string>;
    /**
     * The ID of the environment to configure notifications settings in. Must be a valid PingOne resource ID. This field is
     * immutable and will trigger a replace plan if changed.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * A required single block that specifies the email sender's "from" name and email address.
     */
    public readonly from!: pulumi.Output<outputs.NotificationSettingsFrom>;
    /**
     * An ordered list of strings that which represents the execution order of different SMS/Voice providers configured for the
     * environment. The providers and their accounts’ configurations are represented in the list by the ID of the
     * corresponding `pingone.PhoneDeliverySettings` resource. The only provider which is not represented by the
     * `pingone_phone_delivery_settings.id` value is the PingOne Twilio provider. The PingOne Twilio provider is represented by
     * the `PINGONE_TWILIO` string. If this parameter's list is empty, an SMS or voice message will be sent using the default
     * Ping Twilio account. Otherwise, an SMS or voice message will be sent using the first provider in the list. If the server
     * fails to queue the message using that provider, it will use the next provider in the list to try to send the message.
     * This process will go on until there are no more providers in the list. If the server failed to send the message using
     * all providers, the notification status is set to `FAILED`.
     */
    public readonly providerFallbackChains!: pulumi.Output<string[]>;
    /**
     * A required single block that specifies the email sender's "reply to" name and email address.
     */
    public readonly replyTo!: pulumi.Output<outputs.NotificationSettingsReplyTo | undefined>;
    /**
     * A string that specifies the time the resource was last updated in RFC3339 format.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a NotificationSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotificationSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NotificationSettingsArgs | NotificationSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NotificationSettingsState | undefined;
            resourceInputs["allowedLists"] = state ? state.allowedLists : undefined;
            resourceInputs["deliveryMode"] = state ? state.deliveryMode : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["from"] = state ? state.from : undefined;
            resourceInputs["providerFallbackChains"] = state ? state.providerFallbackChains : undefined;
            resourceInputs["replyTo"] = state ? state.replyTo : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as NotificationSettingsArgs | undefined;
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            resourceInputs["allowedLists"] = args ? args.allowedLists : undefined;
            resourceInputs["deliveryMode"] = args ? args.deliveryMode : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["from"] = args ? args.from : undefined;
            resourceInputs["providerFallbackChains"] = args ? args.providerFallbackChains : undefined;
            resourceInputs["replyTo"] = args ? args.replyTo : undefined;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NotificationSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NotificationSettings resources.
 */
export interface NotificationSettingsState {
    /**
     * A set of objects that represent actors that are exempt from any delivery restrictions.
     */
    allowedLists?: pulumi.Input<pulumi.Input<inputs.NotificationSettingsAllowedList>[]>;
    /**
     * A string that specifies the delivery mode that the settings apply for. Options are `ALL`. Defaults to `ALL`.
     */
    deliveryMode?: pulumi.Input<string>;
    /**
     * The ID of the environment to configure notifications settings in. Must be a valid PingOne resource ID. This field is
     * immutable and will trigger a replace plan if changed.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * A required single block that specifies the email sender's "from" name and email address.
     */
    from?: pulumi.Input<inputs.NotificationSettingsFrom>;
    /**
     * An ordered list of strings that which represents the execution order of different SMS/Voice providers configured for the
     * environment. The providers and their accounts’ configurations are represented in the list by the ID of the
     * corresponding `pingone.PhoneDeliverySettings` resource. The only provider which is not represented by the
     * `pingone_phone_delivery_settings.id` value is the PingOne Twilio provider. The PingOne Twilio provider is represented by
     * the `PINGONE_TWILIO` string. If this parameter's list is empty, an SMS or voice message will be sent using the default
     * Ping Twilio account. Otherwise, an SMS or voice message will be sent using the first provider in the list. If the server
     * fails to queue the message using that provider, it will use the next provider in the list to try to send the message.
     * This process will go on until there are no more providers in the list. If the server failed to send the message using
     * all providers, the notification status is set to `FAILED`.
     */
    providerFallbackChains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A required single block that specifies the email sender's "reply to" name and email address.
     */
    replyTo?: pulumi.Input<inputs.NotificationSettingsReplyTo>;
    /**
     * A string that specifies the time the resource was last updated in RFC3339 format.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NotificationSettings resource.
 */
export interface NotificationSettingsArgs {
    /**
     * A set of objects that represent actors that are exempt from any delivery restrictions.
     */
    allowedLists?: pulumi.Input<pulumi.Input<inputs.NotificationSettingsAllowedList>[]>;
    /**
     * A string that specifies the delivery mode that the settings apply for. Options are `ALL`. Defaults to `ALL`.
     */
    deliveryMode?: pulumi.Input<string>;
    /**
     * The ID of the environment to configure notifications settings in. Must be a valid PingOne resource ID. This field is
     * immutable and will trigger a replace plan if changed.
     */
    environmentId: pulumi.Input<string>;
    /**
     * A required single block that specifies the email sender's "from" name and email address.
     */
    from?: pulumi.Input<inputs.NotificationSettingsFrom>;
    /**
     * An ordered list of strings that which represents the execution order of different SMS/Voice providers configured for the
     * environment. The providers and their accounts’ configurations are represented in the list by the ID of the
     * corresponding `pingone.PhoneDeliverySettings` resource. The only provider which is not represented by the
     * `pingone_phone_delivery_settings.id` value is the PingOne Twilio provider. The PingOne Twilio provider is represented by
     * the `PINGONE_TWILIO` string. If this parameter's list is empty, an SMS or voice message will be sent using the default
     * Ping Twilio account. Otherwise, an SMS or voice message will be sent using the first provider in the list. If the server
     * fails to queue the message using that provider, it will use the next provider in the list to try to send the message.
     * This process will go on until there are no more providers in the list. If the server failed to send the message using
     * all providers, the notification status is set to `FAILED`.
     */
    providerFallbackChains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A required single block that specifies the email sender's "reply to" name and email address.
     */
    replyTo?: pulumi.Input<inputs.NotificationSettingsReplyTo>;
}
