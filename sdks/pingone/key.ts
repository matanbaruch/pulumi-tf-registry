// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Key extends pulumi.CustomResource {
    /**
     * Get an existing Key resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeyState, opts?: pulumi.CustomResourceOptions): Key {
        return new Key(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingone:index/key:Key';

    /**
     * Returns true if the given object is an instance of Key.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Key {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Key.__pulumiType;
    }

    /**
     * A string that specifies the key algorithm. Options are `EC`, `RSA`, `UNKNOWN`. Conflicts with `pkcs12_file_base64`. This
     * field is immutable and will trigger a replace plan if changed.
     */
    public readonly algorithm!: pulumi.Output<string>;
    /**
     * A URL string of a custom Certificate Revokation List endpoint. Used for certificates of type `ISSUANCE`.
     */
    public readonly customCrl!: pulumi.Output<string | undefined>;
    /**
     * A boolean that specifies whether this is the default key for the specified environment. Defaults to `false`.
     */
    public readonly default!: pulumi.Output<boolean>;
    /**
     * The ID of the environment to manage the key in. Must be a valid PingOne resource ID. This field is immutable and will
     * trigger a replace plan if changed.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * A string that specifies the date and time the key resource expires.
     */
    public /*out*/ readonly expiresAt!: pulumi.Output<string>;
    /**
     * A string that specifies the distinguished name of the certificate issuer. Conflicts with `pkcs12_file_base64`,
     * `pkcs12_file_password`. This field is immutable and will trigger a replace plan if changed.
     */
    public readonly issuerDn!: pulumi.Output<string>;
    /**
     * An integer that specifies the key length. For RSA keys, options are `2048`, `3072`, `4096` and `7680`. For elliptical
     * curve (EC) keys, options are `224`, `256`, `384` and `521`. Conflicts with `pkcs12_file_base64`, `pkcs12_file_password`.
     * This field is immutable and will trigger a replace plan if changed.
     */
    public readonly keyLength!: pulumi.Output<number>;
    /**
     * A string that specifies the system name of the key. Conflicts with `pkcs12_file_base64`, `pkcs12_file_password`. This
     * field is immutable and will trigger a replace plan if changed.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A base64 encoded PKCS12 file to import. Conflicts with `name`, `algorithm`, `issuer_dn`, `key_length`, `serial_number`,
     * `signature_algorithm`, `subject_dn`, `validity_period`, `custom_crl`. This field is immutable and will trigger a replace
     * plan if changed.
     */
    public readonly pkcs12FileBase64!: pulumi.Output<string | undefined>;
    /**
     * A string that specifies the password to decrypt the PKCS12 file, if it is encrypted. Optional if `pkcs12_file_base64` is
     * defined. Conflicts with `name`, `algorithm`, `issuer_dn`, `key_length`, `serial_number`, `signature_algorithm`,
     * `subject_dn`, `validity_period`, `custom_crl`. This field is immutable and will trigger a replace plan if changed.
     */
    public readonly pkcs12FilePassword!: pulumi.Output<string | undefined>;
    /**
     * An integer (in string data type) that specifies the serial number of the key or certificate. Conflicts with
     * `pkcs12_file_base64`, `pkcs12_file_password`. This field is immutable and will trigger a replace plan if changed.
     */
    public readonly serialNumber!: pulumi.Output<string>;
    /**
     * A string that specifies the signature algorithm of the key. For RSA keys, options are `SHA256withRSA`, `SHA384withRSA`
     * and `SHA512withRSA`. For elliptical curve (EC) keys, options are `SHA256withECDSA`, `SHA384withECDSA` and
     * `SHA512withECDSA`. Conflicts with `pkcs12_file_base64`, `pkcs12_file_password`. This field is immutable and will trigger
     * a replace plan if changed.
     */
    public readonly signatureAlgorithm!: pulumi.Output<string>;
    /**
     * A string that specifies the date and time the validity period starts.
     */
    public /*out*/ readonly startsAt!: pulumi.Output<string>;
    /**
     * A string that specifies the status of the key. Options are `EXPIRED`, `EXPIRING`, `NOT_YET_VALID`, `REVOKED`, `VALID`.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * A string that specifies the distinguished name of the subject being secured. Conflicts with `pkcs12_file_base64`,
     * `pkcs12_file_password`. This field is immutable and will trigger a replace plan if changed.
     */
    public readonly subjectDn!: pulumi.Output<string>;
    /**
     * A string that specifies how the certificate is used. Options are `ENCRYPTION`, `ISSUANCE`, `OUTBOUND_MTLS`, `SIGNING`,
     * `SSL/TLS`.
     */
    public readonly usageType!: pulumi.Output<string>;
    /**
     * An integer that specifies the number of days the key is valid. Conflicts with `pkcs12_file_base64`,
     * `pkcs12_file_password`. This field is immutable and will trigger a replace plan if changed.
     */
    public readonly validityPeriod!: pulumi.Output<number>;

    /**
     * Create a Key resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeyArgs | KeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeyState | undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["customCrl"] = state ? state.customCrl : undefined;
            resourceInputs["default"] = state ? state.default : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["expiresAt"] = state ? state.expiresAt : undefined;
            resourceInputs["issuerDn"] = state ? state.issuerDn : undefined;
            resourceInputs["keyLength"] = state ? state.keyLength : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pkcs12FileBase64"] = state ? state.pkcs12FileBase64 : undefined;
            resourceInputs["pkcs12FilePassword"] = state ? state.pkcs12FilePassword : undefined;
            resourceInputs["serialNumber"] = state ? state.serialNumber : undefined;
            resourceInputs["signatureAlgorithm"] = state ? state.signatureAlgorithm : undefined;
            resourceInputs["startsAt"] = state ? state.startsAt : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subjectDn"] = state ? state.subjectDn : undefined;
            resourceInputs["usageType"] = state ? state.usageType : undefined;
            resourceInputs["validityPeriod"] = state ? state.validityPeriod : undefined;
        } else {
            const args = argsOrState as KeyArgs | undefined;
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.usageType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'usageType'");
            }
            resourceInputs["algorithm"] = args ? args.algorithm : undefined;
            resourceInputs["customCrl"] = args ? args.customCrl : undefined;
            resourceInputs["default"] = args ? args.default : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["issuerDn"] = args ? args.issuerDn : undefined;
            resourceInputs["keyLength"] = args ? args.keyLength : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pkcs12FileBase64"] = args?.pkcs12FileBase64 ? pulumi.secret(args.pkcs12FileBase64) : undefined;
            resourceInputs["pkcs12FilePassword"] = args?.pkcs12FilePassword ? pulumi.secret(args.pkcs12FilePassword) : undefined;
            resourceInputs["serialNumber"] = args ? args.serialNumber : undefined;
            resourceInputs["signatureAlgorithm"] = args ? args.signatureAlgorithm : undefined;
            resourceInputs["subjectDn"] = args ? args.subjectDn : undefined;
            resourceInputs["usageType"] = args ? args.usageType : undefined;
            resourceInputs["validityPeriod"] = args ? args.validityPeriod : undefined;
            resourceInputs["expiresAt"] = undefined /*out*/;
            resourceInputs["startsAt"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["pkcs12FileBase64", "pkcs12FilePassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Key.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Key resources.
 */
export interface KeyState {
    /**
     * A string that specifies the key algorithm. Options are `EC`, `RSA`, `UNKNOWN`. Conflicts with `pkcs12_file_base64`. This
     * field is immutable and will trigger a replace plan if changed.
     */
    algorithm?: pulumi.Input<string>;
    /**
     * A URL string of a custom Certificate Revokation List endpoint. Used for certificates of type `ISSUANCE`.
     */
    customCrl?: pulumi.Input<string>;
    /**
     * A boolean that specifies whether this is the default key for the specified environment. Defaults to `false`.
     */
    default?: pulumi.Input<boolean>;
    /**
     * The ID of the environment to manage the key in. Must be a valid PingOne resource ID. This field is immutable and will
     * trigger a replace plan if changed.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * A string that specifies the date and time the key resource expires.
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * A string that specifies the distinguished name of the certificate issuer. Conflicts with `pkcs12_file_base64`,
     * `pkcs12_file_password`. This field is immutable and will trigger a replace plan if changed.
     */
    issuerDn?: pulumi.Input<string>;
    /**
     * An integer that specifies the key length. For RSA keys, options are `2048`, `3072`, `4096` and `7680`. For elliptical
     * curve (EC) keys, options are `224`, `256`, `384` and `521`. Conflicts with `pkcs12_file_base64`, `pkcs12_file_password`.
     * This field is immutable and will trigger a replace plan if changed.
     */
    keyLength?: pulumi.Input<number>;
    /**
     * A string that specifies the system name of the key. Conflicts with `pkcs12_file_base64`, `pkcs12_file_password`. This
     * field is immutable and will trigger a replace plan if changed.
     */
    name?: pulumi.Input<string>;
    /**
     * A base64 encoded PKCS12 file to import. Conflicts with `name`, `algorithm`, `issuer_dn`, `key_length`, `serial_number`,
     * `signature_algorithm`, `subject_dn`, `validity_period`, `custom_crl`. This field is immutable and will trigger a replace
     * plan if changed.
     */
    pkcs12FileBase64?: pulumi.Input<string>;
    /**
     * A string that specifies the password to decrypt the PKCS12 file, if it is encrypted. Optional if `pkcs12_file_base64` is
     * defined. Conflicts with `name`, `algorithm`, `issuer_dn`, `key_length`, `serial_number`, `signature_algorithm`,
     * `subject_dn`, `validity_period`, `custom_crl`. This field is immutable and will trigger a replace plan if changed.
     */
    pkcs12FilePassword?: pulumi.Input<string>;
    /**
     * An integer (in string data type) that specifies the serial number of the key or certificate. Conflicts with
     * `pkcs12_file_base64`, `pkcs12_file_password`. This field is immutable and will trigger a replace plan if changed.
     */
    serialNumber?: pulumi.Input<string>;
    /**
     * A string that specifies the signature algorithm of the key. For RSA keys, options are `SHA256withRSA`, `SHA384withRSA`
     * and `SHA512withRSA`. For elliptical curve (EC) keys, options are `SHA256withECDSA`, `SHA384withECDSA` and
     * `SHA512withECDSA`. Conflicts with `pkcs12_file_base64`, `pkcs12_file_password`. This field is immutable and will trigger
     * a replace plan if changed.
     */
    signatureAlgorithm?: pulumi.Input<string>;
    /**
     * A string that specifies the date and time the validity period starts.
     */
    startsAt?: pulumi.Input<string>;
    /**
     * A string that specifies the status of the key. Options are `EXPIRED`, `EXPIRING`, `NOT_YET_VALID`, `REVOKED`, `VALID`.
     */
    status?: pulumi.Input<string>;
    /**
     * A string that specifies the distinguished name of the subject being secured. Conflicts with `pkcs12_file_base64`,
     * `pkcs12_file_password`. This field is immutable and will trigger a replace plan if changed.
     */
    subjectDn?: pulumi.Input<string>;
    /**
     * A string that specifies how the certificate is used. Options are `ENCRYPTION`, `ISSUANCE`, `OUTBOUND_MTLS`, `SIGNING`,
     * `SSL/TLS`.
     */
    usageType?: pulumi.Input<string>;
    /**
     * An integer that specifies the number of days the key is valid. Conflicts with `pkcs12_file_base64`,
     * `pkcs12_file_password`. This field is immutable and will trigger a replace plan if changed.
     */
    validityPeriod?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Key resource.
 */
export interface KeyArgs {
    /**
     * A string that specifies the key algorithm. Options are `EC`, `RSA`, `UNKNOWN`. Conflicts with `pkcs12_file_base64`. This
     * field is immutable and will trigger a replace plan if changed.
     */
    algorithm?: pulumi.Input<string>;
    /**
     * A URL string of a custom Certificate Revokation List endpoint. Used for certificates of type `ISSUANCE`.
     */
    customCrl?: pulumi.Input<string>;
    /**
     * A boolean that specifies whether this is the default key for the specified environment. Defaults to `false`.
     */
    default?: pulumi.Input<boolean>;
    /**
     * The ID of the environment to manage the key in. Must be a valid PingOne resource ID. This field is immutable and will
     * trigger a replace plan if changed.
     */
    environmentId: pulumi.Input<string>;
    /**
     * A string that specifies the distinguished name of the certificate issuer. Conflicts with `pkcs12_file_base64`,
     * `pkcs12_file_password`. This field is immutable and will trigger a replace plan if changed.
     */
    issuerDn?: pulumi.Input<string>;
    /**
     * An integer that specifies the key length. For RSA keys, options are `2048`, `3072`, `4096` and `7680`. For elliptical
     * curve (EC) keys, options are `224`, `256`, `384` and `521`. Conflicts with `pkcs12_file_base64`, `pkcs12_file_password`.
     * This field is immutable and will trigger a replace plan if changed.
     */
    keyLength?: pulumi.Input<number>;
    /**
     * A string that specifies the system name of the key. Conflicts with `pkcs12_file_base64`, `pkcs12_file_password`. This
     * field is immutable and will trigger a replace plan if changed.
     */
    name?: pulumi.Input<string>;
    /**
     * A base64 encoded PKCS12 file to import. Conflicts with `name`, `algorithm`, `issuer_dn`, `key_length`, `serial_number`,
     * `signature_algorithm`, `subject_dn`, `validity_period`, `custom_crl`. This field is immutable and will trigger a replace
     * plan if changed.
     */
    pkcs12FileBase64?: pulumi.Input<string>;
    /**
     * A string that specifies the password to decrypt the PKCS12 file, if it is encrypted. Optional if `pkcs12_file_base64` is
     * defined. Conflicts with `name`, `algorithm`, `issuer_dn`, `key_length`, `serial_number`, `signature_algorithm`,
     * `subject_dn`, `validity_period`, `custom_crl`. This field is immutable and will trigger a replace plan if changed.
     */
    pkcs12FilePassword?: pulumi.Input<string>;
    /**
     * An integer (in string data type) that specifies the serial number of the key or certificate. Conflicts with
     * `pkcs12_file_base64`, `pkcs12_file_password`. This field is immutable and will trigger a replace plan if changed.
     */
    serialNumber?: pulumi.Input<string>;
    /**
     * A string that specifies the signature algorithm of the key. For RSA keys, options are `SHA256withRSA`, `SHA384withRSA`
     * and `SHA512withRSA`. For elliptical curve (EC) keys, options are `SHA256withECDSA`, `SHA384withECDSA` and
     * `SHA512withECDSA`. Conflicts with `pkcs12_file_base64`, `pkcs12_file_password`. This field is immutable and will trigger
     * a replace plan if changed.
     */
    signatureAlgorithm?: pulumi.Input<string>;
    /**
     * A string that specifies the distinguished name of the subject being secured. Conflicts with `pkcs12_file_base64`,
     * `pkcs12_file_password`. This field is immutable and will trigger a replace plan if changed.
     */
    subjectDn?: pulumi.Input<string>;
    /**
     * A string that specifies how the certificate is used. Options are `ENCRYPTION`, `ISSUANCE`, `OUTBOUND_MTLS`, `SIGNING`,
     * `SSL/TLS`.
     */
    usageType: pulumi.Input<string>;
    /**
     * An integer that specifies the number of days the key is valid. Conflicts with `pkcs12_file_base64`,
     * `pkcs12_file_password`. This field is immutable and will trigger a replace plan if changed.
     */
    validityPeriod?: pulumi.Input<number>;
}
