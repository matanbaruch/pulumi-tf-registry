// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Webhook extends pulumi.CustomResource {
    /**
     * Get an existing Webhook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebhookState, opts?: pulumi.CustomResourceOptions): Webhook {
        return new Webhook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingone:index/webhook:Webhook';

    /**
     * Returns true if the given object is an instance of Webhook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Webhook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Webhook.__pulumiType;
    }

    /**
     * A boolean that specifies whether a created or updated webhook should be active or suspended. A suspended state
     * (`"enabled":false`) accumulates all matched events, but these events are not delivered until the webhook becomes active
     * again (`"enabled":true`). For suspended webhooks, events accumulate for a maximum of two weeks. Events older than two
     * weeks are deleted. Restarted webhooks receive the saved events (up to two weeks from the restart date). Defaults to
     * `false`.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The ID of the environment to create the webhook in. Must be a valid PingOne resource ID. This field is immutable and
     * will trigger a replace plan if changed.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * A single object that specifies the PingOne platform event filters to be included to trigger this webhook.
     */
    public readonly filterOptions!: pulumi.Output<outputs.WebhookFilterOptions>;
    /**
     * A string that specifies one of the supported webhook formats. Options are `ACTIVITY`, `NEWRELIC`, `SPLUNK`.
     */
    public readonly format!: pulumi.Output<string>;
    /**
     * A map that specifies the headers applied to the outbound request (for example, `Authorization` `Basic usernamepassword`.
     * The purpose of these headers is for the HTTPS endpoint to authenticate the PingOne service, ensuring that the
     * information from PingOne is from a trusted source.
     */
    public readonly httpEndpointHeaders!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A string that specifies a valid HTTPS URL to which event messages are sent.
     */
    public readonly httpEndpointUrl!: pulumi.Output<string>;
    /**
     * A string that specifies the webhook name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A string that specifies the PingOne resource ID of a key to be used for outbound mutual TLS (mTLS) authentication. This
     * key is used as a client credential to authenticate the webhook. When using the `pingone.Key` resource, the key must have
     * a `usage_type` of `OUTBOUND_MTLS`. If this property is set, `verify_tls_certificates` must be set to `true`. Value must
     * be a valid PingOne resource ID.
     */
    public readonly tlsClientAuthKeyPairId!: pulumi.Output<string | undefined>;
    /**
     * A boolean that specifies whether a certificates should be verified. If this property's value is set to `false`, then all
     * certificates are trusted. (Setting this property's value to false introduces a security risk.). Defaults to `true`.
     */
    public readonly verifyTlsCertificates!: pulumi.Output<boolean>;

    /**
     * Create a Webhook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebhookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebhookArgs | WebhookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebhookState | undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["filterOptions"] = state ? state.filterOptions : undefined;
            resourceInputs["format"] = state ? state.format : undefined;
            resourceInputs["httpEndpointHeaders"] = state ? state.httpEndpointHeaders : undefined;
            resourceInputs["httpEndpointUrl"] = state ? state.httpEndpointUrl : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tlsClientAuthKeyPairId"] = state ? state.tlsClientAuthKeyPairId : undefined;
            resourceInputs["verifyTlsCertificates"] = state ? state.verifyTlsCertificates : undefined;
        } else {
            const args = argsOrState as WebhookArgs | undefined;
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.filterOptions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filterOptions'");
            }
            if ((!args || args.format === undefined) && !opts.urn) {
                throw new Error("Missing required property 'format'");
            }
            if ((!args || args.httpEndpointUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'httpEndpointUrl'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["filterOptions"] = args ? args.filterOptions : undefined;
            resourceInputs["format"] = args ? args.format : undefined;
            resourceInputs["httpEndpointHeaders"] = args ? args.httpEndpointHeaders : undefined;
            resourceInputs["httpEndpointUrl"] = args ? args.httpEndpointUrl : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tlsClientAuthKeyPairId"] = args ? args.tlsClientAuthKeyPairId : undefined;
            resourceInputs["verifyTlsCertificates"] = args ? args.verifyTlsCertificates : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Webhook.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Webhook resources.
 */
export interface WebhookState {
    /**
     * A boolean that specifies whether a created or updated webhook should be active or suspended. A suspended state
     * (`"enabled":false`) accumulates all matched events, but these events are not delivered until the webhook becomes active
     * again (`"enabled":true`). For suspended webhooks, events accumulate for a maximum of two weeks. Events older than two
     * weeks are deleted. Restarted webhooks receive the saved events (up to two weeks from the restart date). Defaults to
     * `false`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The ID of the environment to create the webhook in. Must be a valid PingOne resource ID. This field is immutable and
     * will trigger a replace plan if changed.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * A single object that specifies the PingOne platform event filters to be included to trigger this webhook.
     */
    filterOptions?: pulumi.Input<inputs.WebhookFilterOptions>;
    /**
     * A string that specifies one of the supported webhook formats. Options are `ACTIVITY`, `NEWRELIC`, `SPLUNK`.
     */
    format?: pulumi.Input<string>;
    /**
     * A map that specifies the headers applied to the outbound request (for example, `Authorization` `Basic usernamepassword`.
     * The purpose of these headers is for the HTTPS endpoint to authenticate the PingOne service, ensuring that the
     * information from PingOne is from a trusted source.
     */
    httpEndpointHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A string that specifies a valid HTTPS URL to which event messages are sent.
     */
    httpEndpointUrl?: pulumi.Input<string>;
    /**
     * A string that specifies the webhook name.
     */
    name?: pulumi.Input<string>;
    /**
     * A string that specifies the PingOne resource ID of a key to be used for outbound mutual TLS (mTLS) authentication. This
     * key is used as a client credential to authenticate the webhook. When using the `pingone.Key` resource, the key must have
     * a `usage_type` of `OUTBOUND_MTLS`. If this property is set, `verify_tls_certificates` must be set to `true`. Value must
     * be a valid PingOne resource ID.
     */
    tlsClientAuthKeyPairId?: pulumi.Input<string>;
    /**
     * A boolean that specifies whether a certificates should be verified. If this property's value is set to `false`, then all
     * certificates are trusted. (Setting this property's value to false introduces a security risk.). Defaults to `true`.
     */
    verifyTlsCertificates?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Webhook resource.
 */
export interface WebhookArgs {
    /**
     * A boolean that specifies whether a created or updated webhook should be active or suspended. A suspended state
     * (`"enabled":false`) accumulates all matched events, but these events are not delivered until the webhook becomes active
     * again (`"enabled":true`). For suspended webhooks, events accumulate for a maximum of two weeks. Events older than two
     * weeks are deleted. Restarted webhooks receive the saved events (up to two weeks from the restart date). Defaults to
     * `false`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The ID of the environment to create the webhook in. Must be a valid PingOne resource ID. This field is immutable and
     * will trigger a replace plan if changed.
     */
    environmentId: pulumi.Input<string>;
    /**
     * A single object that specifies the PingOne platform event filters to be included to trigger this webhook.
     */
    filterOptions: pulumi.Input<inputs.WebhookFilterOptions>;
    /**
     * A string that specifies one of the supported webhook formats. Options are `ACTIVITY`, `NEWRELIC`, `SPLUNK`.
     */
    format: pulumi.Input<string>;
    /**
     * A map that specifies the headers applied to the outbound request (for example, `Authorization` `Basic usernamepassword`.
     * The purpose of these headers is for the HTTPS endpoint to authenticate the PingOne service, ensuring that the
     * information from PingOne is from a trusted source.
     */
    httpEndpointHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A string that specifies a valid HTTPS URL to which event messages are sent.
     */
    httpEndpointUrl: pulumi.Input<string>;
    /**
     * A string that specifies the webhook name.
     */
    name?: pulumi.Input<string>;
    /**
     * A string that specifies the PingOne resource ID of a key to be used for outbound mutual TLS (mTLS) authentication. This
     * key is used as a client credential to authenticate the webhook. When using the `pingone.Key` resource, the key must have
     * a `usage_type` of `OUTBOUND_MTLS`. If this property is set, `verify_tls_certificates` must be set to `true`. Value must
     * be a valid PingOne resource ID.
     */
    tlsClientAuthKeyPairId?: pulumi.Input<string>;
    /**
     * A boolean that specifies whether a certificates should be verified. If this property's value is set to `false`, then all
     * certificates are trusted. (Setting this property's value to false introduces a security risk.). Defaults to `true`.
     */
    verifyTlsCertificates?: pulumi.Input<boolean>;
}
