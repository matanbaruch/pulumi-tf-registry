// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IdentityProviderAttribute extends pulumi.CustomResource {
    /**
     * Get an existing IdentityProviderAttribute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdentityProviderAttributeState, opts?: pulumi.CustomResourceOptions): IdentityProviderAttribute {
        return new IdentityProviderAttribute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingone:index/identityProviderAttribute:IdentityProviderAttribute';

    /**
     * Returns true if the given object is an instance of IdentityProviderAttribute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdentityProviderAttribute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdentityProviderAttribute.__pulumiType;
    }

    /**
     * The ID of the environment to create the identity provider attribute in. Must be a valid PingOne resource ID. This field
     * is immutable and will trigger a replace plan if changed.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * The ID of the identity provider to create the attribute mapping for. Must be a valid PingOne resource ID. This field is
     * immutable and will trigger a replace plan if changed.
     */
    public readonly identityProviderId!: pulumi.Output<string>;
    /**
     * The mapping type. Options are `CORE` (This attribute is required by the schema and cannot be removed. The name and
     * update properties cannot be changed.) or `CUSTOM` (All user-created attributes are of this type.)
     */
    public /*out*/ readonly mappingType!: pulumi.Output<string>;
    /**
     * A string that specifies the name of the PingOne directory attribute to map the Identity Provider attribute value to. The
     * attribute must not be defined as read only from the user schema or of type `COMPLEX` based on the user schema. Examples
     * are `email`, `name.given`. The following attributes may not be used: `account`, `id`, `created`, `updated`, `lifecycle`,
     * `mfaEnabled`, `enabled`.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Indicates whether to update the user attribute in the directory with the non-empty mapped value from the IdP. Options
     * are `EMPTY_ONLY` (only update the user attribute if it has an empty value); `ALWAYS` (always update the user attribute
     * value). Defaults to `EMPTY_ONLY`.
     */
    public readonly update!: pulumi.Output<string>;
    /**
     * A placeholder referring to the attribute (or attributes) from the provider. Placeholders must be valid for the
     * attributes returned by the IdP type and use the `${}` syntax (for example, `${email}`). For SAML, any placeholder is
     * acceptable, and it is mapped against the attributes available in the SAML assertion after authentication. The
     * `${samlAssertion.subject}` placeholder is a special reserved placeholder used to refer to the subject name ID in the
     * SAML assertion response. For a full list of social providers and their configurable attribute mappings, see the Social
     * Provider and External Identity Provider Attribute Reference below.
     */
    public readonly value!: pulumi.Output<string>;

    /**
     * Create a IdentityProviderAttribute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdentityProviderAttributeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdentityProviderAttributeArgs | IdentityProviderAttributeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdentityProviderAttributeState | undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["identityProviderId"] = state ? state.identityProviderId : undefined;
            resourceInputs["mappingType"] = state ? state.mappingType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["update"] = state ? state.update : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as IdentityProviderAttributeArgs | undefined;
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.identityProviderId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identityProviderId'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["identityProviderId"] = args ? args.identityProviderId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["update"] = args ? args.update : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["mappingType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IdentityProviderAttribute.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IdentityProviderAttribute resources.
 */
export interface IdentityProviderAttributeState {
    /**
     * The ID of the environment to create the identity provider attribute in. Must be a valid PingOne resource ID. This field
     * is immutable and will trigger a replace plan if changed.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * The ID of the identity provider to create the attribute mapping for. Must be a valid PingOne resource ID. This field is
     * immutable and will trigger a replace plan if changed.
     */
    identityProviderId?: pulumi.Input<string>;
    /**
     * The mapping type. Options are `CORE` (This attribute is required by the schema and cannot be removed. The name and
     * update properties cannot be changed.) or `CUSTOM` (All user-created attributes are of this type.)
     */
    mappingType?: pulumi.Input<string>;
    /**
     * A string that specifies the name of the PingOne directory attribute to map the Identity Provider attribute value to. The
     * attribute must not be defined as read only from the user schema or of type `COMPLEX` based on the user schema. Examples
     * are `email`, `name.given`. The following attributes may not be used: `account`, `id`, `created`, `updated`, `lifecycle`,
     * `mfaEnabled`, `enabled`.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates whether to update the user attribute in the directory with the non-empty mapped value from the IdP. Options
     * are `EMPTY_ONLY` (only update the user attribute if it has an empty value); `ALWAYS` (always update the user attribute
     * value). Defaults to `EMPTY_ONLY`.
     */
    update?: pulumi.Input<string>;
    /**
     * A placeholder referring to the attribute (or attributes) from the provider. Placeholders must be valid for the
     * attributes returned by the IdP type and use the `${}` syntax (for example, `${email}`). For SAML, any placeholder is
     * acceptable, and it is mapped against the attributes available in the SAML assertion after authentication. The
     * `${samlAssertion.subject}` placeholder is a special reserved placeholder used to refer to the subject name ID in the
     * SAML assertion response. For a full list of social providers and their configurable attribute mappings, see the Social
     * Provider and External Identity Provider Attribute Reference below.
     */
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IdentityProviderAttribute resource.
 */
export interface IdentityProviderAttributeArgs {
    /**
     * The ID of the environment to create the identity provider attribute in. Must be a valid PingOne resource ID. This field
     * is immutable and will trigger a replace plan if changed.
     */
    environmentId: pulumi.Input<string>;
    /**
     * The ID of the identity provider to create the attribute mapping for. Must be a valid PingOne resource ID. This field is
     * immutable and will trigger a replace plan if changed.
     */
    identityProviderId: pulumi.Input<string>;
    /**
     * A string that specifies the name of the PingOne directory attribute to map the Identity Provider attribute value to. The
     * attribute must not be defined as read only from the user schema or of type `COMPLEX` based on the user schema. Examples
     * are `email`, `name.given`. The following attributes may not be used: `account`, `id`, `created`, `updated`, `lifecycle`,
     * `mfaEnabled`, `enabled`.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates whether to update the user attribute in the directory with the non-empty mapped value from the IdP. Options
     * are `EMPTY_ONLY` (only update the user attribute if it has an empty value); `ALWAYS` (always update the user attribute
     * value). Defaults to `EMPTY_ONLY`.
     */
    update?: pulumi.Input<string>;
    /**
     * A placeholder referring to the attribute (or attributes) from the provider. Placeholders must be valid for the
     * attributes returned by the IdP type and use the `${}` syntax (for example, `${email}`). For SAML, any placeholder is
     * acceptable, and it is mapped against the attributes available in the SAML assertion after authentication. The
     * `${samlAssertion.subject}` placeholder is a special reserved placeholder used to refer to the subject name ID in the
     * SAML assertion response. For a full list of social providers and their configurable attribute mappings, see the Social
     * Provider and External Identity Provider Attribute Reference below.
     */
    value: pulumi.Input<string>;
}
