// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ApplicationAttributeMapping extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationAttributeMapping resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationAttributeMappingState, opts?: pulumi.CustomResourceOptions): ApplicationAttributeMapping {
        return new ApplicationAttributeMapping(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingone:index/applicationAttributeMapping:ApplicationAttributeMapping';

    /**
     * Returns true if the given object is an instance of ApplicationAttributeMapping.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationAttributeMapping {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationAttributeMapping.__pulumiType;
    }

    /**
     * The ID of the application to create the attribute mapping for. Must be a valid PingOne resource ID. This field is
     * immutable and will trigger a replace plan if changed.
     */
    public readonly applicationId!: pulumi.Output<string>;
    /**
     * The ID of the environment to create the application attribute mapping in. Must be a valid PingOne resource ID. This
     * field is immutable and will trigger a replace plan if changed.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * A string that specifies the mapping type of the attribute. Options are `CORE`, `SCOPE`, and `CUSTOM`.
     */
    public /*out*/ readonly mappingType!: pulumi.Output<string>;
    /**
     * A string that specifies the name of attribute and must be unique within an application. For SAML applications, the
     * `saml_subject` name is a case-insensitive name which indicates the mapping to be used for the subject in an assertion
     * and can be overridden. For OpenID Connect applications, the `sub` name indicates the mapping to be used for the subject
     * in the token and can be overridden. The following OpenID Connect names are reserved and cannot be used: `acr`, `amr`,
     * `at_hash`, `aud`, `auth_time`, `azp`, `client_id`, `exp`, `iat`, `iss`, `jti`, `nbf`, `nonce`, `org`, `scope`, `sid`.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Whether the attribute mapping should be available in the ID Token. This property is applicable only when the
     * application's `protocol` property is `OPENID_CONNECT`. If omitted, the default is `true`. Note that the
     * `id_token_enabled` and `userinfo_enabled` properties cannot both be set to `false`. At least one of these properties
     * must have a value of `true`.
     */
    public readonly oidcIdTokenEnabled!: pulumi.Output<boolean>;
    /**
     * OIDC resource scope IDs that this attribute mapping is available for exclusively. This setting overrides any global OIDC
     * resource scopes that contain an attribute mapping with the same name. The list can contain only scope IDs that have been
     * granted for the application through the `/grants` endpoint. At least one scope ID is expected.
     */
    public readonly oidcScopes!: pulumi.Output<string[]>;
    /**
     * Whether the attribute mapping should be available through the `/as/userinfo` endpoint. This property is applicable only
     * when the application's protocol property is `OPENID_CONNECT`. If omitted, the default is `true`. Note that the
     * `id_token_enabled` and `userinfo_enabled` properties cannot both be set to `false`. At least one of these properties
     * must have a value of `true`.
     */
    public readonly oidcUserinfoEnabled!: pulumi.Output<boolean>;
    /**
     * A boolean to specify whether a mapping value is required for this attribute. If `true`, a value must be set and a
     * non-empty value must be available in the SAML assertion or ID token. If overriding a core attribute mapping
     * (`saml_subject` for SAML applications and `sub` for OpenID Connect applications), then this value must be set to `true`.
     * Defaults to `false`.
     */
    public readonly required!: pulumi.Output<boolean>;
    /**
     * A URI reference representing the classification of the attribute, which helps the service provider interpret the
     * attribute format. This property is applicable only when the application's protocol property is `SAML` and the name is
     * the `saml_subject` core attribute. Examples include `urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified`,
     * `urn:oasis:names:tc:SAML:2.0:attrname-format:uri`, `urn:oasis:names:tc:SAML:2.0:attrname-format:basic`.
     */
    public readonly samlSubjectNameformat!: pulumi.Output<string | undefined>;
    public readonly value!: pulumi.Output<string>;

    /**
     * Create a ApplicationAttributeMapping resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationAttributeMappingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationAttributeMappingArgs | ApplicationAttributeMappingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationAttributeMappingState | undefined;
            resourceInputs["applicationId"] = state ? state.applicationId : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["mappingType"] = state ? state.mappingType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["oidcIdTokenEnabled"] = state ? state.oidcIdTokenEnabled : undefined;
            resourceInputs["oidcScopes"] = state ? state.oidcScopes : undefined;
            resourceInputs["oidcUserinfoEnabled"] = state ? state.oidcUserinfoEnabled : undefined;
            resourceInputs["required"] = state ? state.required : undefined;
            resourceInputs["samlSubjectNameformat"] = state ? state.samlSubjectNameformat : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as ApplicationAttributeMappingArgs | undefined;
            if ((!args || args.applicationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationId'");
            }
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["applicationId"] = args ? args.applicationId : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["oidcIdTokenEnabled"] = args ? args.oidcIdTokenEnabled : undefined;
            resourceInputs["oidcScopes"] = args ? args.oidcScopes : undefined;
            resourceInputs["oidcUserinfoEnabled"] = args ? args.oidcUserinfoEnabled : undefined;
            resourceInputs["required"] = args ? args.required : undefined;
            resourceInputs["samlSubjectNameformat"] = args ? args.samlSubjectNameformat : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["mappingType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplicationAttributeMapping.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApplicationAttributeMapping resources.
 */
export interface ApplicationAttributeMappingState {
    /**
     * The ID of the application to create the attribute mapping for. Must be a valid PingOne resource ID. This field is
     * immutable and will trigger a replace plan if changed.
     */
    applicationId?: pulumi.Input<string>;
    /**
     * The ID of the environment to create the application attribute mapping in. Must be a valid PingOne resource ID. This
     * field is immutable and will trigger a replace plan if changed.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * A string that specifies the mapping type of the attribute. Options are `CORE`, `SCOPE`, and `CUSTOM`.
     */
    mappingType?: pulumi.Input<string>;
    /**
     * A string that specifies the name of attribute and must be unique within an application. For SAML applications, the
     * `saml_subject` name is a case-insensitive name which indicates the mapping to be used for the subject in an assertion
     * and can be overridden. For OpenID Connect applications, the `sub` name indicates the mapping to be used for the subject
     * in the token and can be overridden. The following OpenID Connect names are reserved and cannot be used: `acr`, `amr`,
     * `at_hash`, `aud`, `auth_time`, `azp`, `client_id`, `exp`, `iat`, `iss`, `jti`, `nbf`, `nonce`, `org`, `scope`, `sid`.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether the attribute mapping should be available in the ID Token. This property is applicable only when the
     * application's `protocol` property is `OPENID_CONNECT`. If omitted, the default is `true`. Note that the
     * `id_token_enabled` and `userinfo_enabled` properties cannot both be set to `false`. At least one of these properties
     * must have a value of `true`.
     */
    oidcIdTokenEnabled?: pulumi.Input<boolean>;
    /**
     * OIDC resource scope IDs that this attribute mapping is available for exclusively. This setting overrides any global OIDC
     * resource scopes that contain an attribute mapping with the same name. The list can contain only scope IDs that have been
     * granted for the application through the `/grants` endpoint. At least one scope ID is expected.
     */
    oidcScopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether the attribute mapping should be available through the `/as/userinfo` endpoint. This property is applicable only
     * when the application's protocol property is `OPENID_CONNECT`. If omitted, the default is `true`. Note that the
     * `id_token_enabled` and `userinfo_enabled` properties cannot both be set to `false`. At least one of these properties
     * must have a value of `true`.
     */
    oidcUserinfoEnabled?: pulumi.Input<boolean>;
    /**
     * A boolean to specify whether a mapping value is required for this attribute. If `true`, a value must be set and a
     * non-empty value must be available in the SAML assertion or ID token. If overriding a core attribute mapping
     * (`saml_subject` for SAML applications and `sub` for OpenID Connect applications), then this value must be set to `true`.
     * Defaults to `false`.
     */
    required?: pulumi.Input<boolean>;
    /**
     * A URI reference representing the classification of the attribute, which helps the service provider interpret the
     * attribute format. This property is applicable only when the application's protocol property is `SAML` and the name is
     * the `saml_subject` core attribute. Examples include `urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified`,
     * `urn:oasis:names:tc:SAML:2.0:attrname-format:uri`, `urn:oasis:names:tc:SAML:2.0:attrname-format:basic`.
     */
    samlSubjectNameformat?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApplicationAttributeMapping resource.
 */
export interface ApplicationAttributeMappingArgs {
    /**
     * The ID of the application to create the attribute mapping for. Must be a valid PingOne resource ID. This field is
     * immutable and will trigger a replace plan if changed.
     */
    applicationId: pulumi.Input<string>;
    /**
     * The ID of the environment to create the application attribute mapping in. Must be a valid PingOne resource ID. This
     * field is immutable and will trigger a replace plan if changed.
     */
    environmentId: pulumi.Input<string>;
    /**
     * A string that specifies the name of attribute and must be unique within an application. For SAML applications, the
     * `saml_subject` name is a case-insensitive name which indicates the mapping to be used for the subject in an assertion
     * and can be overridden. For OpenID Connect applications, the `sub` name indicates the mapping to be used for the subject
     * in the token and can be overridden. The following OpenID Connect names are reserved and cannot be used: `acr`, `amr`,
     * `at_hash`, `aud`, `auth_time`, `azp`, `client_id`, `exp`, `iat`, `iss`, `jti`, `nbf`, `nonce`, `org`, `scope`, `sid`.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether the attribute mapping should be available in the ID Token. This property is applicable only when the
     * application's `protocol` property is `OPENID_CONNECT`. If omitted, the default is `true`. Note that the
     * `id_token_enabled` and `userinfo_enabled` properties cannot both be set to `false`. At least one of these properties
     * must have a value of `true`.
     */
    oidcIdTokenEnabled?: pulumi.Input<boolean>;
    /**
     * OIDC resource scope IDs that this attribute mapping is available for exclusively. This setting overrides any global OIDC
     * resource scopes that contain an attribute mapping with the same name. The list can contain only scope IDs that have been
     * granted for the application through the `/grants` endpoint. At least one scope ID is expected.
     */
    oidcScopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether the attribute mapping should be available through the `/as/userinfo` endpoint. This property is applicable only
     * when the application's protocol property is `OPENID_CONNECT`. If omitted, the default is `true`. Note that the
     * `id_token_enabled` and `userinfo_enabled` properties cannot both be set to `false`. At least one of these properties
     * must have a value of `true`.
     */
    oidcUserinfoEnabled?: pulumi.Input<boolean>;
    /**
     * A boolean to specify whether a mapping value is required for this attribute. If `true`, a value must be set and a
     * non-empty value must be available in the SAML assertion or ID token. If overriding a core attribute mapping
     * (`saml_subject` for SAML applications and `sub` for OpenID Connect applications), then this value must be set to `true`.
     * Defaults to `false`.
     */
    required?: pulumi.Input<boolean>;
    /**
     * A URI reference representing the classification of the attribute, which helps the service provider interpret the
     * attribute format. This property is applicable only when the application's protocol property is `SAML` and the name is
     * the `saml_subject` core attribute. Examples include `urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified`,
     * `urn:oasis:names:tc:SAML:2.0:attrname-format:uri`, `urn:oasis:names:tc:SAML:2.0:attrname-format:basic`.
     */
    samlSubjectNameformat?: pulumi.Input<string>;
    value: pulumi.Input<string>;
}
