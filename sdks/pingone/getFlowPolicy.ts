// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getFlowPolicy(args: GetFlowPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetFlowPolicyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pingone:index/getFlowPolicy:getFlowPolicy", {
        "environmentId": args.environmentId,
        "flowPolicyId": args.flowPolicyId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFlowPolicy.
 */
export interface GetFlowPolicyArgs {
    environmentId: string;
    flowPolicyId?: string;
}

/**
 * A collection of values returned by getFlowPolicy.
 */
export interface GetFlowPolicyResult {
    readonly davinciApplication: outputs.GetFlowPolicyDavinciApplication;
    readonly enabled: boolean;
    readonly environmentId: string;
    readonly flowPolicyId?: string;
    readonly id: string;
    readonly name: string;
    readonly trigger: outputs.GetFlowPolicyTrigger;
}
export function getFlowPolicyOutput(args: GetFlowPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFlowPolicyResult> {
    return pulumi.output(args).apply((a: any) => getFlowPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getFlowPolicy.
 */
export interface GetFlowPolicyOutputArgs {
    environmentId: pulumi.Input<string>;
    flowPolicyId?: pulumi.Input<string>;
}
