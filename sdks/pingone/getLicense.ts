// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLicense(args: GetLicenseArgs, opts?: pulumi.InvokeOptions): Promise<GetLicenseResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pingone:index/getLicense:getLicense", {
        "licenseId": args.licenseId,
        "organizationId": args.organizationId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLicense.
 */
export interface GetLicenseArgs {
    licenseId: string;
    organizationId: string;
}

/**
 * A collection of values returned by getLicense.
 */
export interface GetLicenseResult {
    readonly advancedServices: outputs.GetLicenseAdvancedServices;
    readonly assignedEnvironmentsCount: number;
    readonly authorize: outputs.GetLicenseAuthorize;
    readonly beginsAt: string;
    readonly credentials: outputs.GetLicenseCredentials;
    readonly environments: outputs.GetLicenseEnvironments;
    readonly expiresAt: string;
    readonly fraud: outputs.GetLicenseFraud;
    readonly gateways: outputs.GetLicenseGateways;
    readonly id: string;
    readonly intelligence: outputs.GetLicenseIntelligence;
    readonly licenseId: string;
    readonly mfa: outputs.GetLicenseMfa;
    readonly name: string;
    readonly orchestrate: outputs.GetLicenseOrchestrate;
    readonly organizationId: string;
    readonly package: string;
    readonly replacedByLicenseId: string;
    readonly replacesLicenseId: string;
    readonly status: string;
    readonly terminatesAt: string;
    readonly users: outputs.GetLicenseUsers;
    readonly verify: outputs.GetLicenseVerify;
}
export function getLicenseOutput(args: GetLicenseOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLicenseResult> {
    return pulumi.output(args).apply((a: any) => getLicense(a, opts))
}

/**
 * A collection of arguments for invoking getLicense.
 */
export interface GetLicenseOutputArgs {
    licenseId: pulumi.Input<string>;
    organizationId: pulumi.Input<string>;
}
