// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ResourceScopePingoneApi extends pulumi.CustomResource {
    /**
     * Get an existing ResourceScopePingoneApi resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourceScopePingoneApiState, opts?: pulumi.CustomResourceOptions): ResourceScopePingoneApi {
        return new ResourceScopePingoneApi(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingone:index/resourceScopePingoneApi:ResourceScopePingoneApi';

    /**
     * Returns true if the given object is an instance of ResourceScopePingoneApi.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourceScopePingoneApi {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourceScopePingoneApi.__pulumiType;
    }

    /**
     * A description to apply to the resource scope. The description can only be set when defining new scopes.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The ID of the environment to create the resource scope in. Must be a valid PingOne resource ID. This field is immutable
     * and will trigger a replace plan if changed.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * The name of the resource scope. Predefined scopes of `p1:read:user` and `p1:update:user` can be overridden, and new
     * scopes can be defined as subscopes in the format `p1:read:user:{suffix}` or `p1:update:user:{suffix}`. E.g.
     * `p1:read:user:newscope` or `p1:update:user:newscope`
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the PingOne API resource.
     */
    public /*out*/ readonly resourceId!: pulumi.Output<string>;
    /**
     * A list that specifies the user schema attributes that can be read or updated for the specified PingOne access control
     * scope. The value is an array of schema attribute paths (such as `username`, `name.given`, `shirtSize`) that the scope
     * controls. This property is supported only for the `p1:read:user`, `p1:update:user` and `p1:read:user:{suffix}` and
     * `p1:update:user:{suffix}` scopes. No other PingOne platform scopes allow this behavior. Any attributes not listed in the
     * attribute array are excluded from the read or update action. The wildcard path (`*`) in the array includes all
     * attributes and cannot be used in conjunction with any other user schema attribute paths.
     */
    public readonly schemaAttributes!: pulumi.Output<string[] | undefined>;

    /**
     * Create a ResourceScopePingoneApi resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResourceScopePingoneApiArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourceScopePingoneApiArgs | ResourceScopePingoneApiState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourceScopePingoneApiState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["schemaAttributes"] = state ? state.schemaAttributes : undefined;
        } else {
            const args = argsOrState as ResourceScopePingoneApiArgs | undefined;
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["schemaAttributes"] = args ? args.schemaAttributes : undefined;
            resourceInputs["resourceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourceScopePingoneApi.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ResourceScopePingoneApi resources.
 */
export interface ResourceScopePingoneApiState {
    /**
     * A description to apply to the resource scope. The description can only be set when defining new scopes.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the environment to create the resource scope in. Must be a valid PingOne resource ID. This field is immutable
     * and will trigger a replace plan if changed.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * The name of the resource scope. Predefined scopes of `p1:read:user` and `p1:update:user` can be overridden, and new
     * scopes can be defined as subscopes in the format `p1:read:user:{suffix}` or `p1:update:user:{suffix}`. E.g.
     * `p1:read:user:newscope` or `p1:update:user:newscope`
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the PingOne API resource.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * A list that specifies the user schema attributes that can be read or updated for the specified PingOne access control
     * scope. The value is an array of schema attribute paths (such as `username`, `name.given`, `shirtSize`) that the scope
     * controls. This property is supported only for the `p1:read:user`, `p1:update:user` and `p1:read:user:{suffix}` and
     * `p1:update:user:{suffix}` scopes. No other PingOne platform scopes allow this behavior. Any attributes not listed in the
     * attribute array are excluded from the read or update action. The wildcard path (`*`) in the array includes all
     * attributes and cannot be used in conjunction with any other user schema attribute paths.
     */
    schemaAttributes?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ResourceScopePingoneApi resource.
 */
export interface ResourceScopePingoneApiArgs {
    /**
     * A description to apply to the resource scope. The description can only be set when defining new scopes.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the environment to create the resource scope in. Must be a valid PingOne resource ID. This field is immutable
     * and will trigger a replace plan if changed.
     */
    environmentId: pulumi.Input<string>;
    /**
     * The name of the resource scope. Predefined scopes of `p1:read:user` and `p1:update:user` can be overridden, and new
     * scopes can be defined as subscopes in the format `p1:read:user:{suffix}` or `p1:update:user:{suffix}`. E.g.
     * `p1:read:user:newscope` or `p1:update:user:newscope`
     */
    name?: pulumi.Input<string>;
    /**
     * A list that specifies the user schema attributes that can be read or updated for the specified PingOne access control
     * scope. The value is an array of schema attribute paths (such as `username`, `name.given`, `shirtSize`) that the scope
     * controls. This property is supported only for the `p1:read:user`, `p1:update:user` and `p1:read:user:{suffix}` and
     * `p1:update:user:{suffix}` scopes. No other PingOne platform scopes allow this behavior. Any attributes not listed in the
     * attribute array are excluded from the read or update action. The wildcard path (`*`) in the array includes all
     * attributes and cannot be used in conjunction with any other user schema attribute paths.
     */
    schemaAttributes?: pulumi.Input<pulumi.Input<string>[]>;
}
