// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class KeyRotationPolicy extends pulumi.CustomResource {
    /**
     * Get an existing KeyRotationPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeyRotationPolicyState, opts?: pulumi.CustomResourceOptions): KeyRotationPolicy {
        return new KeyRotationPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingone:index/keyRotationPolicy:KeyRotationPolicy';

    /**
     * Returns true if the given object is an instance of KeyRotationPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KeyRotationPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KeyRotationPolicy.__pulumiType;
    }

    /**
     * The algorithm this key rotation policy applies to generated key rotation policy keys. Options are `RSA`.
     */
    public readonly algorithm!: pulumi.Output<string>;
    /**
     * The `kid` (key identifier) of the key rotation policy key designated as `CURRENT`.
     */
    public /*out*/ readonly currentKeyId!: pulumi.Output<string>;
    /**
     * The ID of the environment to configure a key rotation policy for. Must be a valid PingOne resource ID. This field is
     * immutable and will trigger a replace plan if changed.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * The number of bytes of a cryptographic key this key rotation policy will apply to generated key rotation policy keys.
     * Options are `2048`, `3072`, `4096`, `7680`.
     */
    public readonly keyLength!: pulumi.Output<number>;
    /**
     * Human-readable name displayed in the admin console.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The `kid` (key identifier) of the key rotation policy key designated as `NEXT`.
     */
    public /*out*/ readonly nextKeyId!: pulumi.Output<string>;
    /**
     * The last time the key rotation policy was rotated.
     */
    public /*out*/ readonly rotatedAt!: pulumi.Output<string>;
    /**
     * The number of days between key rotations. The minimum value allowed is `30` days, while the maximum value allowed is 1
     * day less than the value set in the `validity_period` parameter. Defaults to `90`.
     */
    public readonly rotationPeriod!: pulumi.Output<number>;
    /**
     * The signature algorithm this key rotation policy will apply to generated key rotation policy keys. Options are
     * `SHA256withRSA`.
     */
    public readonly signatureAlgorithm!: pulumi.Output<string>;
    /**
     * The DN this key rotation policy will apply to generated key rotation policy keys. The value will be applied as both
     * issuerDN and subjectDN because generated keys are self-signed.
     */
    public readonly subjectDn!: pulumi.Output<string>;
    /**
     * How the key rotation policy will be used, pertaining to what operations the key rotation policy supports. Options are
     * `SIGNING`.
     */
    public readonly usageType!: pulumi.Output<string>;
    /**
     * Controls the "Starts At" and "Expires At" fields this key rotation policy will apply to generated key rotation policy
     * keys. Defaults to `365`.
     */
    public readonly validityPeriod!: pulumi.Output<number>;

    /**
     * Create a KeyRotationPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeyRotationPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeyRotationPolicyArgs | KeyRotationPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeyRotationPolicyState | undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["currentKeyId"] = state ? state.currentKeyId : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["keyLength"] = state ? state.keyLength : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nextKeyId"] = state ? state.nextKeyId : undefined;
            resourceInputs["rotatedAt"] = state ? state.rotatedAt : undefined;
            resourceInputs["rotationPeriod"] = state ? state.rotationPeriod : undefined;
            resourceInputs["signatureAlgorithm"] = state ? state.signatureAlgorithm : undefined;
            resourceInputs["subjectDn"] = state ? state.subjectDn : undefined;
            resourceInputs["usageType"] = state ? state.usageType : undefined;
            resourceInputs["validityPeriod"] = state ? state.validityPeriod : undefined;
        } else {
            const args = argsOrState as KeyRotationPolicyArgs | undefined;
            if ((!args || args.algorithm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'algorithm'");
            }
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.keyLength === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyLength'");
            }
            if ((!args || args.signatureAlgorithm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'signatureAlgorithm'");
            }
            if ((!args || args.subjectDn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subjectDn'");
            }
            if ((!args || args.usageType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'usageType'");
            }
            resourceInputs["algorithm"] = args ? args.algorithm : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["keyLength"] = args ? args.keyLength : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rotationPeriod"] = args ? args.rotationPeriod : undefined;
            resourceInputs["signatureAlgorithm"] = args ? args.signatureAlgorithm : undefined;
            resourceInputs["subjectDn"] = args ? args.subjectDn : undefined;
            resourceInputs["usageType"] = args ? args.usageType : undefined;
            resourceInputs["validityPeriod"] = args ? args.validityPeriod : undefined;
            resourceInputs["currentKeyId"] = undefined /*out*/;
            resourceInputs["nextKeyId"] = undefined /*out*/;
            resourceInputs["rotatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KeyRotationPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KeyRotationPolicy resources.
 */
export interface KeyRotationPolicyState {
    /**
     * The algorithm this key rotation policy applies to generated key rotation policy keys. Options are `RSA`.
     */
    algorithm?: pulumi.Input<string>;
    /**
     * The `kid` (key identifier) of the key rotation policy key designated as `CURRENT`.
     */
    currentKeyId?: pulumi.Input<string>;
    /**
     * The ID of the environment to configure a key rotation policy for. Must be a valid PingOne resource ID. This field is
     * immutable and will trigger a replace plan if changed.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * The number of bytes of a cryptographic key this key rotation policy will apply to generated key rotation policy keys.
     * Options are `2048`, `3072`, `4096`, `7680`.
     */
    keyLength?: pulumi.Input<number>;
    /**
     * Human-readable name displayed in the admin console.
     */
    name?: pulumi.Input<string>;
    /**
     * The `kid` (key identifier) of the key rotation policy key designated as `NEXT`.
     */
    nextKeyId?: pulumi.Input<string>;
    /**
     * The last time the key rotation policy was rotated.
     */
    rotatedAt?: pulumi.Input<string>;
    /**
     * The number of days between key rotations. The minimum value allowed is `30` days, while the maximum value allowed is 1
     * day less than the value set in the `validity_period` parameter. Defaults to `90`.
     */
    rotationPeriod?: pulumi.Input<number>;
    /**
     * The signature algorithm this key rotation policy will apply to generated key rotation policy keys. Options are
     * `SHA256withRSA`.
     */
    signatureAlgorithm?: pulumi.Input<string>;
    /**
     * The DN this key rotation policy will apply to generated key rotation policy keys. The value will be applied as both
     * issuerDN and subjectDN because generated keys are self-signed.
     */
    subjectDn?: pulumi.Input<string>;
    /**
     * How the key rotation policy will be used, pertaining to what operations the key rotation policy supports. Options are
     * `SIGNING`.
     */
    usageType?: pulumi.Input<string>;
    /**
     * Controls the "Starts At" and "Expires At" fields this key rotation policy will apply to generated key rotation policy
     * keys. Defaults to `365`.
     */
    validityPeriod?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a KeyRotationPolicy resource.
 */
export interface KeyRotationPolicyArgs {
    /**
     * The algorithm this key rotation policy applies to generated key rotation policy keys. Options are `RSA`.
     */
    algorithm: pulumi.Input<string>;
    /**
     * The ID of the environment to configure a key rotation policy for. Must be a valid PingOne resource ID. This field is
     * immutable and will trigger a replace plan if changed.
     */
    environmentId: pulumi.Input<string>;
    /**
     * The number of bytes of a cryptographic key this key rotation policy will apply to generated key rotation policy keys.
     * Options are `2048`, `3072`, `4096`, `7680`.
     */
    keyLength: pulumi.Input<number>;
    /**
     * Human-readable name displayed in the admin console.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of days between key rotations. The minimum value allowed is `30` days, while the maximum value allowed is 1
     * day less than the value set in the `validity_period` parameter. Defaults to `90`.
     */
    rotationPeriod?: pulumi.Input<number>;
    /**
     * The signature algorithm this key rotation policy will apply to generated key rotation policy keys. Options are
     * `SHA256withRSA`.
     */
    signatureAlgorithm: pulumi.Input<string>;
    /**
     * The DN this key rotation policy will apply to generated key rotation policy keys. The value will be applied as both
     * issuerDN and subjectDN because generated keys are self-signed.
     */
    subjectDn: pulumi.Input<string>;
    /**
     * How the key rotation policy will be used, pertaining to what operations the key rotation policy supports. Options are
     * `SIGNING`.
     */
    usageType: pulumi.Input<string>;
    /**
     * Controls the "Starts At" and "Expires At" fields this key rotation policy will apply to generated key rotation policy
     * keys. Defaults to `365`.
     */
    validityPeriod?: pulumi.Input<number>;
}
