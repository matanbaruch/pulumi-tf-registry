// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Language extends pulumi.CustomResource {
    /**
     * Get an existing Language resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LanguageState, opts?: pulumi.CustomResourceOptions): Language {
        return new Language(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingone:index/language:Language';

    /**
     * Returns true if the given object is an instance of Language.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Language {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Language.__pulumiType;
    }

    /**
     * Specifies whether this language was added by a customer administrator.
     */
    public /*out*/ readonly customerAdded!: pulumi.Output<boolean>;
    /**
     * Specifies whether this language is the default for the environment. This property value must be set to `false` when
     * creating a language resource. It can be set to `true` only after the language is enabled and after the localization of
     * an agreement resource is complete when agreements are used for the environment.
     */
    public /*out*/ readonly default!: pulumi.Output<boolean>;
    /**
     * Specifies whether this language is enabled for the environment. This property value must be set to false when creating a
     * language.
     */
    public /*out*/ readonly enabled!: pulumi.Output<boolean>;
    /**
     * The ID of the environment to create the language in.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * An ISO standard language code. For more information about standard language codes, see [ISO Language Code
     * Table](http://www.lingoes.net/en/translator/langcode.htm). The following language codes are reserved as they are created
     * automatically in the environment: `cs`, `de`, `en`, `es`, `fr`, `fr-CA`, `hu`, `it`, `ja`, `ko`, `nl`, `pl`, `pt`, `ru`,
     * `th`, `tr`, `zh`.
     */
    public readonly locale!: pulumi.Output<string>;
    /**
     * The language name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;

    /**
     * Create a Language resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LanguageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LanguageArgs | LanguageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LanguageState | undefined;
            resourceInputs["customerAdded"] = state ? state.customerAdded : undefined;
            resourceInputs["default"] = state ? state.default : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["locale"] = state ? state.locale : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as LanguageArgs | undefined;
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.locale === undefined) && !opts.urn) {
                throw new Error("Missing required property 'locale'");
            }
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["locale"] = args ? args.locale : undefined;
            resourceInputs["customerAdded"] = undefined /*out*/;
            resourceInputs["default"] = undefined /*out*/;
            resourceInputs["enabled"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Language.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Language resources.
 */
export interface LanguageState {
    /**
     * Specifies whether this language was added by a customer administrator.
     */
    customerAdded?: pulumi.Input<boolean>;
    /**
     * Specifies whether this language is the default for the environment. This property value must be set to `false` when
     * creating a language resource. It can be set to `true` only after the language is enabled and after the localization of
     * an agreement resource is complete when agreements are used for the environment.
     */
    default?: pulumi.Input<boolean>;
    /**
     * Specifies whether this language is enabled for the environment. This property value must be set to false when creating a
     * language.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The ID of the environment to create the language in.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * An ISO standard language code. For more information about standard language codes, see [ISO Language Code
     * Table](http://www.lingoes.net/en/translator/langcode.htm). The following language codes are reserved as they are created
     * automatically in the environment: `cs`, `de`, `en`, `es`, `fr`, `fr-CA`, `hu`, `it`, `ja`, `ko`, `nl`, `pl`, `pt`, `ru`,
     * `th`, `tr`, `zh`.
     */
    locale?: pulumi.Input<string>;
    /**
     * The language name.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Language resource.
 */
export interface LanguageArgs {
    /**
     * The ID of the environment to create the language in.
     */
    environmentId: pulumi.Input<string>;
    /**
     * An ISO standard language code. For more information about standard language codes, see [ISO Language Code
     * Table](http://www.lingoes.net/en/translator/langcode.htm). The following language codes are reserved as they are created
     * automatically in the environment: `cs`, `de`, `en`, `es`, `fr`, `fr-CA`, `hu`, `it`, `ja`, `ko`, `nl`, `pl`, `pt`, `ru`,
     * `th`, `tr`, `zh`.
     */
    locale: pulumi.Input<string>;
}
