// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ResourceAttribute extends pulumi.CustomResource {
    /**
     * Get an existing ResourceAttribute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourceAttributeState, opts?: pulumi.CustomResourceOptions): ResourceAttribute {
        return new ResourceAttribute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingone:index/resourceAttribute:ResourceAttribute';

    /**
     * Returns true if the given object is an instance of ResourceAttribute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourceAttribute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourceAttribute.__pulumiType;
    }

    /**
     * A string that specifies the ID of the custom resource to create the attribute for. Must be a valid PingOne resource ID.
     * Required if `resource_type` is set to `CUSTOM`, but cannot be set if `resource_type` is set to `OPENID_CONNECT`.
     */
    public readonly customResourceId!: pulumi.Output<string | undefined>;
    /**
     * The ID of the environment to create the resource attribute in. Must be a valid PingOne resource ID. This field is
     * immutable and will trigger a replace plan if changed.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * A boolean that specifies whether the attribute mapping should be available in the ID Token. Only applies to resources
     * that are of type `OPENID_CONNECT` and the `id_token_enabled` and `userinfo_enabled` properties cannot both be set to
     * false. Defaults to `true`.
     */
    public readonly idTokenEnabled!: pulumi.Output<boolean>;
    /**
     * A string that specifies the name of the resource attribute to map a value for. When the resource's type property is
     * `OPENID_CONNECT`, the following are reserved names and cannot be used: `acr`, `amr`, `aud`, `auth_time`, `client_id`,
     * `env`, `exp`, `iat`, `iss`, `jti`, `org`, `p1.*`, `scope`, `sid`, `sub`. The resource will also override the default
     * configured values for a resource, rather than creating new attributes. For resources of type `CUSTOM`, the `sub` name is
     * overridden. For resources of type `OPENID_CONNECT`, the following names are overridden: `address.country`,
     * `address.formatted`, `address.locality`, `address.postal_code`, `address.region`, `address.street_address`, `birthdate`,
     * `email`, `email_verified`, `family_name`, `gender`, `given_name`, `locale`, `middle_name`, `name`, `nickname`,
     * `phone_number`, `phone_number_verified`, `picture`, `preferred_username`, `profile`, `updated_at`, `website`,
     * `zoneinfo`.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the resource that the attribute is assigned to.
     */
    public /*out*/ readonly resourceId!: pulumi.Output<string>;
    /**
     * The type of the resource to create the attribute for. When the value is set to `CUSTOM`, `custom_resource_id` must be
     * specified. Options are `CUSTOM`, `OPENID_CONNECT`.
     */
    public readonly resourceType!: pulumi.Output<string>;
    /**
     * A string that specifies the type of resource attribute. Options are: `CORE` (The claim is required and cannot not be
     * removed), `CUSTOM` (The claim is not a CORE attribute. All created attributes are of this type), `PREDEFINED` (A
     * designation for predefined OIDC resource attributes such as given_name. These attributes cannot be removed; however,
     * they can be modified).
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * A boolean that specifies whether the attribute mapping should be available through the /as/userinfo endpoint. Only
     * applies to resources that are of type `OPENID_CONNECT` and the `id_token_enabled` and `userinfo_enabled` properties
     * cannot both be set to false. Defaults to `true`.
     */
    public readonly userinfoEnabled!: pulumi.Output<boolean>;
    /**
     * A string that specifies the value of the custom resource attribute. This value can be a placeholder that references an
     * attribute in the user schema, expressed as `${user.path.to.value}`, or it can be an expression, or a static string.
     * Placeholders must be valid, enabled attributes in the environmentâ€™s user schema. Examples of valid values are:
     * `${user.email}`, `${user.name.family}`, and `myClaimValueString`. Note that definition in HCL requires escaping with the
     * `$` character when defining attribute paths, for example `value = "$${user.email}"`.
     */
    public readonly value!: pulumi.Output<string>;

    /**
     * Create a ResourceAttribute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResourceAttributeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourceAttributeArgs | ResourceAttributeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourceAttributeState | undefined;
            resourceInputs["customResourceId"] = state ? state.customResourceId : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["idTokenEnabled"] = state ? state.idTokenEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["userinfoEnabled"] = state ? state.userinfoEnabled : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as ResourceAttributeArgs | undefined;
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.resourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["customResourceId"] = args ? args.customResourceId : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["idTokenEnabled"] = args ? args.idTokenEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["userinfoEnabled"] = args ? args.userinfoEnabled : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["resourceId"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourceAttribute.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ResourceAttribute resources.
 */
export interface ResourceAttributeState {
    /**
     * A string that specifies the ID of the custom resource to create the attribute for. Must be a valid PingOne resource ID.
     * Required if `resource_type` is set to `CUSTOM`, but cannot be set if `resource_type` is set to `OPENID_CONNECT`.
     */
    customResourceId?: pulumi.Input<string>;
    /**
     * The ID of the environment to create the resource attribute in. Must be a valid PingOne resource ID. This field is
     * immutable and will trigger a replace plan if changed.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * A boolean that specifies whether the attribute mapping should be available in the ID Token. Only applies to resources
     * that are of type `OPENID_CONNECT` and the `id_token_enabled` and `userinfo_enabled` properties cannot both be set to
     * false. Defaults to `true`.
     */
    idTokenEnabled?: pulumi.Input<boolean>;
    /**
     * A string that specifies the name of the resource attribute to map a value for. When the resource's type property is
     * `OPENID_CONNECT`, the following are reserved names and cannot be used: `acr`, `amr`, `aud`, `auth_time`, `client_id`,
     * `env`, `exp`, `iat`, `iss`, `jti`, `org`, `p1.*`, `scope`, `sid`, `sub`. The resource will also override the default
     * configured values for a resource, rather than creating new attributes. For resources of type `CUSTOM`, the `sub` name is
     * overridden. For resources of type `OPENID_CONNECT`, the following names are overridden: `address.country`,
     * `address.formatted`, `address.locality`, `address.postal_code`, `address.region`, `address.street_address`, `birthdate`,
     * `email`, `email_verified`, `family_name`, `gender`, `given_name`, `locale`, `middle_name`, `name`, `nickname`,
     * `phone_number`, `phone_number_verified`, `picture`, `preferred_username`, `profile`, `updated_at`, `website`,
     * `zoneinfo`.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the resource that the attribute is assigned to.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * The type of the resource to create the attribute for. When the value is set to `CUSTOM`, `custom_resource_id` must be
     * specified. Options are `CUSTOM`, `OPENID_CONNECT`.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * A string that specifies the type of resource attribute. Options are: `CORE` (The claim is required and cannot not be
     * removed), `CUSTOM` (The claim is not a CORE attribute. All created attributes are of this type), `PREDEFINED` (A
     * designation for predefined OIDC resource attributes such as given_name. These attributes cannot be removed; however,
     * they can be modified).
     */
    type?: pulumi.Input<string>;
    /**
     * A boolean that specifies whether the attribute mapping should be available through the /as/userinfo endpoint. Only
     * applies to resources that are of type `OPENID_CONNECT` and the `id_token_enabled` and `userinfo_enabled` properties
     * cannot both be set to false. Defaults to `true`.
     */
    userinfoEnabled?: pulumi.Input<boolean>;
    /**
     * A string that specifies the value of the custom resource attribute. This value can be a placeholder that references an
     * attribute in the user schema, expressed as `${user.path.to.value}`, or it can be an expression, or a static string.
     * Placeholders must be valid, enabled attributes in the environmentâ€™s user schema. Examples of valid values are:
     * `${user.email}`, `${user.name.family}`, and `myClaimValueString`. Note that definition in HCL requires escaping with the
     * `$` character when defining attribute paths, for example `value = "$${user.email}"`.
     */
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ResourceAttribute resource.
 */
export interface ResourceAttributeArgs {
    /**
     * A string that specifies the ID of the custom resource to create the attribute for. Must be a valid PingOne resource ID.
     * Required if `resource_type` is set to `CUSTOM`, but cannot be set if `resource_type` is set to `OPENID_CONNECT`.
     */
    customResourceId?: pulumi.Input<string>;
    /**
     * The ID of the environment to create the resource attribute in. Must be a valid PingOne resource ID. This field is
     * immutable and will trigger a replace plan if changed.
     */
    environmentId: pulumi.Input<string>;
    /**
     * A boolean that specifies whether the attribute mapping should be available in the ID Token. Only applies to resources
     * that are of type `OPENID_CONNECT` and the `id_token_enabled` and `userinfo_enabled` properties cannot both be set to
     * false. Defaults to `true`.
     */
    idTokenEnabled?: pulumi.Input<boolean>;
    /**
     * A string that specifies the name of the resource attribute to map a value for. When the resource's type property is
     * `OPENID_CONNECT`, the following are reserved names and cannot be used: `acr`, `amr`, `aud`, `auth_time`, `client_id`,
     * `env`, `exp`, `iat`, `iss`, `jti`, `org`, `p1.*`, `scope`, `sid`, `sub`. The resource will also override the default
     * configured values for a resource, rather than creating new attributes. For resources of type `CUSTOM`, the `sub` name is
     * overridden. For resources of type `OPENID_CONNECT`, the following names are overridden: `address.country`,
     * `address.formatted`, `address.locality`, `address.postal_code`, `address.region`, `address.street_address`, `birthdate`,
     * `email`, `email_verified`, `family_name`, `gender`, `given_name`, `locale`, `middle_name`, `name`, `nickname`,
     * `phone_number`, `phone_number_verified`, `picture`, `preferred_username`, `profile`, `updated_at`, `website`,
     * `zoneinfo`.
     */
    name?: pulumi.Input<string>;
    /**
     * The type of the resource to create the attribute for. When the value is set to `CUSTOM`, `custom_resource_id` must be
     * specified. Options are `CUSTOM`, `OPENID_CONNECT`.
     */
    resourceType: pulumi.Input<string>;
    /**
     * A boolean that specifies whether the attribute mapping should be available through the /as/userinfo endpoint. Only
     * applies to resources that are of type `OPENID_CONNECT` and the `id_token_enabled` and `userinfo_enabled` properties
     * cannot both be set to false. Defaults to `true`.
     */
    userinfoEnabled?: pulumi.Input<boolean>;
    /**
     * A string that specifies the value of the custom resource attribute. This value can be a placeholder that references an
     * attribute in the user schema, expressed as `${user.path.to.value}`, or it can be an expression, or a static string.
     * Placeholders must be valid, enabled attributes in the environmentâ€™s user schema. Examples of valid values are:
     * `${user.email}`, `${user.name.family}`, and `myClaimValueString`. Note that definition in HCL requires escaping with the
     * `$` character when defining attribute paths, for example `value = "$${user.email}"`.
     */
    value: pulumi.Input<string>;
}
