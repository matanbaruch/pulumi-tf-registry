// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AgreementArgs, AgreementState } from "./agreement";
export type Agreement = import("./agreement").Agreement;
export const Agreement: typeof import("./agreement").Agreement = null as any;
utilities.lazyLoad(exports, ["Agreement"], () => require("./agreement"));

export { AgreementEnableArgs, AgreementEnableState } from "./agreementEnable";
export type AgreementEnable = import("./agreementEnable").AgreementEnable;
export const AgreementEnable: typeof import("./agreementEnable").AgreementEnable = null as any;
utilities.lazyLoad(exports, ["AgreementEnable"], () => require("./agreementEnable"));

export { AgreementLocalizationArgs, AgreementLocalizationState } from "./agreementLocalization";
export type AgreementLocalization = import("./agreementLocalization").AgreementLocalization;
export const AgreementLocalization: typeof import("./agreementLocalization").AgreementLocalization = null as any;
utilities.lazyLoad(exports, ["AgreementLocalization"], () => require("./agreementLocalization"));

export { AgreementLocalizationEnableArgs, AgreementLocalizationEnableState } from "./agreementLocalizationEnable";
export type AgreementLocalizationEnable = import("./agreementLocalizationEnable").AgreementLocalizationEnable;
export const AgreementLocalizationEnable: typeof import("./agreementLocalizationEnable").AgreementLocalizationEnable = null as any;
utilities.lazyLoad(exports, ["AgreementLocalizationEnable"], () => require("./agreementLocalizationEnable"));

export { AgreementLocalizationRevisionArgs, AgreementLocalizationRevisionState } from "./agreementLocalizationRevision";
export type AgreementLocalizationRevision = import("./agreementLocalizationRevision").AgreementLocalizationRevision;
export const AgreementLocalizationRevision: typeof import("./agreementLocalizationRevision").AgreementLocalizationRevision = null as any;
utilities.lazyLoad(exports, ["AgreementLocalizationRevision"], () => require("./agreementLocalizationRevision"));

export { AlertChannelArgs, AlertChannelState } from "./alertChannel";
export type AlertChannel = import("./alertChannel").AlertChannel;
export const AlertChannel: typeof import("./alertChannel").AlertChannel = null as any;
utilities.lazyLoad(exports, ["AlertChannel"], () => require("./alertChannel"));

export { ApplicationArgs, ApplicationState } from "./application";
export type Application = import("./application").Application;
export const Application: typeof import("./application").Application = null as any;
utilities.lazyLoad(exports, ["Application"], () => require("./application"));

export { ApplicationAttributeMappingArgs, ApplicationAttributeMappingState } from "./applicationAttributeMapping";
export type ApplicationAttributeMapping = import("./applicationAttributeMapping").ApplicationAttributeMapping;
export const ApplicationAttributeMapping: typeof import("./applicationAttributeMapping").ApplicationAttributeMapping = null as any;
utilities.lazyLoad(exports, ["ApplicationAttributeMapping"], () => require("./applicationAttributeMapping"));

export { ApplicationFlowPolicyAssignmentArgs, ApplicationFlowPolicyAssignmentState } from "./applicationFlowPolicyAssignment";
export type ApplicationFlowPolicyAssignment = import("./applicationFlowPolicyAssignment").ApplicationFlowPolicyAssignment;
export const ApplicationFlowPolicyAssignment: typeof import("./applicationFlowPolicyAssignment").ApplicationFlowPolicyAssignment = null as any;
utilities.lazyLoad(exports, ["ApplicationFlowPolicyAssignment"], () => require("./applicationFlowPolicyAssignment"));

export { ApplicationResourceArgs, ApplicationResourceState } from "./applicationResource";
export type ApplicationResource = import("./applicationResource").ApplicationResource;
export const ApplicationResource: typeof import("./applicationResource").ApplicationResource = null as any;
utilities.lazyLoad(exports, ["ApplicationResource"], () => require("./applicationResource"));

export { ApplicationResourceGrantArgs, ApplicationResourceGrantState } from "./applicationResourceGrant";
export type ApplicationResourceGrant = import("./applicationResourceGrant").ApplicationResourceGrant;
export const ApplicationResourceGrant: typeof import("./applicationResourceGrant").ApplicationResourceGrant = null as any;
utilities.lazyLoad(exports, ["ApplicationResourceGrant"], () => require("./applicationResourceGrant"));

export { ApplicationResourcePermissionArgs, ApplicationResourcePermissionState } from "./applicationResourcePermission";
export type ApplicationResourcePermission = import("./applicationResourcePermission").ApplicationResourcePermission;
export const ApplicationResourcePermission: typeof import("./applicationResourcePermission").ApplicationResourcePermission = null as any;
utilities.lazyLoad(exports, ["ApplicationResourcePermission"], () => require("./applicationResourcePermission"));

export { ApplicationRoleAssignmentArgs, ApplicationRoleAssignmentState } from "./applicationRoleAssignment";
export type ApplicationRoleAssignment = import("./applicationRoleAssignment").ApplicationRoleAssignment;
export const ApplicationRoleAssignment: typeof import("./applicationRoleAssignment").ApplicationRoleAssignment = null as any;
utilities.lazyLoad(exports, ["ApplicationRoleAssignment"], () => require("./applicationRoleAssignment"));

export { ApplicationSecretArgs, ApplicationSecretState } from "./applicationSecret";
export type ApplicationSecret = import("./applicationSecret").ApplicationSecret;
export const ApplicationSecret: typeof import("./applicationSecret").ApplicationSecret = null as any;
utilities.lazyLoad(exports, ["ApplicationSecret"], () => require("./applicationSecret"));

export { ApplicationSignOnPolicyAssignmentArgs, ApplicationSignOnPolicyAssignmentState } from "./applicationSignOnPolicyAssignment";
export type ApplicationSignOnPolicyAssignment = import("./applicationSignOnPolicyAssignment").ApplicationSignOnPolicyAssignment;
export const ApplicationSignOnPolicyAssignment: typeof import("./applicationSignOnPolicyAssignment").ApplicationSignOnPolicyAssignment = null as any;
utilities.lazyLoad(exports, ["ApplicationSignOnPolicyAssignment"], () => require("./applicationSignOnPolicyAssignment"));

export { AuthorizeApiServiceArgs, AuthorizeApiServiceState } from "./authorizeApiService";
export type AuthorizeApiService = import("./authorizeApiService").AuthorizeApiService;
export const AuthorizeApiService: typeof import("./authorizeApiService").AuthorizeApiService = null as any;
utilities.lazyLoad(exports, ["AuthorizeApiService"], () => require("./authorizeApiService"));

export { AuthorizeApiServiceDeploymentArgs, AuthorizeApiServiceDeploymentState } from "./authorizeApiServiceDeployment";
export type AuthorizeApiServiceDeployment = import("./authorizeApiServiceDeployment").AuthorizeApiServiceDeployment;
export const AuthorizeApiServiceDeployment: typeof import("./authorizeApiServiceDeployment").AuthorizeApiServiceDeployment = null as any;
utilities.lazyLoad(exports, ["AuthorizeApiServiceDeployment"], () => require("./authorizeApiServiceDeployment"));

export { AuthorizeApiServiceOperationArgs, AuthorizeApiServiceOperationState } from "./authorizeApiServiceOperation";
export type AuthorizeApiServiceOperation = import("./authorizeApiServiceOperation").AuthorizeApiServiceOperation;
export const AuthorizeApiServiceOperation: typeof import("./authorizeApiServiceOperation").AuthorizeApiServiceOperation = null as any;
utilities.lazyLoad(exports, ["AuthorizeApiServiceOperation"], () => require("./authorizeApiServiceOperation"));

export { AuthorizeApplicationRoleArgs, AuthorizeApplicationRoleState } from "./authorizeApplicationRole";
export type AuthorizeApplicationRole = import("./authorizeApplicationRole").AuthorizeApplicationRole;
export const AuthorizeApplicationRole: typeof import("./authorizeApplicationRole").AuthorizeApplicationRole = null as any;
utilities.lazyLoad(exports, ["AuthorizeApplicationRole"], () => require("./authorizeApplicationRole"));

export { AuthorizeApplicationRolePermissionArgs, AuthorizeApplicationRolePermissionState } from "./authorizeApplicationRolePermission";
export type AuthorizeApplicationRolePermission = import("./authorizeApplicationRolePermission").AuthorizeApplicationRolePermission;
export const AuthorizeApplicationRolePermission: typeof import("./authorizeApplicationRolePermission").AuthorizeApplicationRolePermission = null as any;
utilities.lazyLoad(exports, ["AuthorizeApplicationRolePermission"], () => require("./authorizeApplicationRolePermission"));

export { AuthorizeDecisionEndpointArgs, AuthorizeDecisionEndpointState } from "./authorizeDecisionEndpoint";
export type AuthorizeDecisionEndpoint = import("./authorizeDecisionEndpoint").AuthorizeDecisionEndpoint;
export const AuthorizeDecisionEndpoint: typeof import("./authorizeDecisionEndpoint").AuthorizeDecisionEndpoint = null as any;
utilities.lazyLoad(exports, ["AuthorizeDecisionEndpoint"], () => require("./authorizeDecisionEndpoint"));

export { BrandingSettingsArgs, BrandingSettingsState } from "./brandingSettings";
export type BrandingSettings = import("./brandingSettings").BrandingSettings;
export const BrandingSettings: typeof import("./brandingSettings").BrandingSettings = null as any;
utilities.lazyLoad(exports, ["BrandingSettings"], () => require("./brandingSettings"));

export { BrandingThemeArgs, BrandingThemeState } from "./brandingTheme";
export type BrandingTheme = import("./brandingTheme").BrandingTheme;
export const BrandingTheme: typeof import("./brandingTheme").BrandingTheme = null as any;
utilities.lazyLoad(exports, ["BrandingTheme"], () => require("./brandingTheme"));

export { BrandingThemeDefaultArgs, BrandingThemeDefaultState } from "./brandingThemeDefault";
export type BrandingThemeDefault = import("./brandingThemeDefault").BrandingThemeDefault;
export const BrandingThemeDefault: typeof import("./brandingThemeDefault").BrandingThemeDefault = null as any;
utilities.lazyLoad(exports, ["BrandingThemeDefault"], () => require("./brandingThemeDefault"));

export { CertificateArgs, CertificateState } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { CertificateSigningResponseArgs, CertificateSigningResponseState } from "./certificateSigningResponse";
export type CertificateSigningResponse = import("./certificateSigningResponse").CertificateSigningResponse;
export const CertificateSigningResponse: typeof import("./certificateSigningResponse").CertificateSigningResponse = null as any;
utilities.lazyLoad(exports, ["CertificateSigningResponse"], () => require("./certificateSigningResponse"));

export { CredentialIssuanceRuleArgs, CredentialIssuanceRuleState } from "./credentialIssuanceRule";
export type CredentialIssuanceRule = import("./credentialIssuanceRule").CredentialIssuanceRule;
export const CredentialIssuanceRule: typeof import("./credentialIssuanceRule").CredentialIssuanceRule = null as any;
utilities.lazyLoad(exports, ["CredentialIssuanceRule"], () => require("./credentialIssuanceRule"));

export { CredentialIssuerProfileArgs, CredentialIssuerProfileState } from "./credentialIssuerProfile";
export type CredentialIssuerProfile = import("./credentialIssuerProfile").CredentialIssuerProfile;
export const CredentialIssuerProfile: typeof import("./credentialIssuerProfile").CredentialIssuerProfile = null as any;
utilities.lazyLoad(exports, ["CredentialIssuerProfile"], () => require("./credentialIssuerProfile"));

export { CredentialTypeArgs, CredentialTypeState } from "./credentialType";
export type CredentialType = import("./credentialType").CredentialType;
export const CredentialType: typeof import("./credentialType").CredentialType = null as any;
utilities.lazyLoad(exports, ["CredentialType"], () => require("./credentialType"));

export { CustomDomainArgs, CustomDomainState } from "./customDomain";
export type CustomDomain = import("./customDomain").CustomDomain;
export const CustomDomain: typeof import("./customDomain").CustomDomain = null as any;
utilities.lazyLoad(exports, ["CustomDomain"], () => require("./customDomain"));

export { CustomDomainSslArgs, CustomDomainSslState } from "./customDomainSsl";
export type CustomDomainSsl = import("./customDomainSsl").CustomDomainSsl;
export const CustomDomainSsl: typeof import("./customDomainSsl").CustomDomainSsl = null as any;
utilities.lazyLoad(exports, ["CustomDomainSsl"], () => require("./customDomainSsl"));

export { CustomDomainVerifyArgs, CustomDomainVerifyState } from "./customDomainVerify";
export type CustomDomainVerify = import("./customDomainVerify").CustomDomainVerify;
export const CustomDomainVerify: typeof import("./customDomainVerify").CustomDomainVerify = null as any;
utilities.lazyLoad(exports, ["CustomDomainVerify"], () => require("./customDomainVerify"));

export { DigitalWalletApplicationArgs, DigitalWalletApplicationState } from "./digitalWalletApplication";
export type DigitalWalletApplication = import("./digitalWalletApplication").DigitalWalletApplication;
export const DigitalWalletApplication: typeof import("./digitalWalletApplication").DigitalWalletApplication = null as any;
utilities.lazyLoad(exports, ["DigitalWalletApplication"], () => require("./digitalWalletApplication"));

export { EnvironmentArgs, EnvironmentState } from "./environment";
export type Environment = import("./environment").Environment;
export const Environment: typeof import("./environment").Environment = null as any;
utilities.lazyLoad(exports, ["Environment"], () => require("./environment"));

export { FormArgs, FormState } from "./form";
export type Form = import("./form").Form;
export const Form: typeof import("./form").Form = null as any;
utilities.lazyLoad(exports, ["Form"], () => require("./form"));

export { FormsRecaptchaV2Args, FormsRecaptchaV2State } from "./formsRecaptchaV2";
export type FormsRecaptchaV2 = import("./formsRecaptchaV2").FormsRecaptchaV2;
export const FormsRecaptchaV2: typeof import("./formsRecaptchaV2").FormsRecaptchaV2 = null as any;
utilities.lazyLoad(exports, ["FormsRecaptchaV2"], () => require("./formsRecaptchaV2"));

export { GatewayArgs, GatewayState } from "./gateway";
export type Gateway = import("./gateway").Gateway;
export const Gateway: typeof import("./gateway").Gateway = null as any;
utilities.lazyLoad(exports, ["Gateway"], () => require("./gateway"));

export { GatewayCredentialArgs, GatewayCredentialState } from "./gatewayCredential";
export type GatewayCredential = import("./gatewayCredential").GatewayCredential;
export const GatewayCredential: typeof import("./gatewayCredential").GatewayCredential = null as any;
utilities.lazyLoad(exports, ["GatewayCredential"], () => require("./gatewayCredential"));

export { GatewayRoleAssignmentArgs, GatewayRoleAssignmentState } from "./gatewayRoleAssignment";
export type GatewayRoleAssignment = import("./gatewayRoleAssignment").GatewayRoleAssignment;
export const GatewayRoleAssignment: typeof import("./gatewayRoleAssignment").GatewayRoleAssignment = null as any;
utilities.lazyLoad(exports, ["GatewayRoleAssignment"], () => require("./gatewayRoleAssignment"));

export { GetAgreementArgs, GetAgreementResult, GetAgreementOutputArgs } from "./getAgreement";
export const getAgreement: typeof import("./getAgreement").getAgreement = null as any;
export const getAgreementOutput: typeof import("./getAgreement").getAgreementOutput = null as any;
utilities.lazyLoad(exports, ["getAgreement","getAgreementOutput"], () => require("./getAgreement"));

export { GetAgreementLocalizationArgs, GetAgreementLocalizationResult, GetAgreementLocalizationOutputArgs } from "./getAgreementLocalization";
export const getAgreementLocalization: typeof import("./getAgreementLocalization").getAgreementLocalization = null as any;
export const getAgreementLocalizationOutput: typeof import("./getAgreementLocalization").getAgreementLocalizationOutput = null as any;
utilities.lazyLoad(exports, ["getAgreementLocalization","getAgreementLocalizationOutput"], () => require("./getAgreementLocalization"));

export { GetApplicationArgs, GetApplicationResult, GetApplicationOutputArgs } from "./getApplication";
export const getApplication: typeof import("./getApplication").getApplication = null as any;
export const getApplicationOutput: typeof import("./getApplication").getApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getApplication","getApplicationOutput"], () => require("./getApplication"));

export { GetApplicationFlowPolicyAssignmentsArgs, GetApplicationFlowPolicyAssignmentsResult, GetApplicationFlowPolicyAssignmentsOutputArgs } from "./getApplicationFlowPolicyAssignments";
export const getApplicationFlowPolicyAssignments: typeof import("./getApplicationFlowPolicyAssignments").getApplicationFlowPolicyAssignments = null as any;
export const getApplicationFlowPolicyAssignmentsOutput: typeof import("./getApplicationFlowPolicyAssignments").getApplicationFlowPolicyAssignmentsOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationFlowPolicyAssignments","getApplicationFlowPolicyAssignmentsOutput"], () => require("./getApplicationFlowPolicyAssignments"));

export { GetApplicationSecretArgs, GetApplicationSecretResult, GetApplicationSecretOutputArgs } from "./getApplicationSecret";
export const getApplicationSecret: typeof import("./getApplicationSecret").getApplicationSecret = null as any;
export const getApplicationSecretOutput: typeof import("./getApplicationSecret").getApplicationSecretOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationSecret","getApplicationSecretOutput"], () => require("./getApplicationSecret"));

export { GetApplicationSignOnPolicyAssignmentsArgs, GetApplicationSignOnPolicyAssignmentsResult, GetApplicationSignOnPolicyAssignmentsOutputArgs } from "./getApplicationSignOnPolicyAssignments";
export const getApplicationSignOnPolicyAssignments: typeof import("./getApplicationSignOnPolicyAssignments").getApplicationSignOnPolicyAssignments = null as any;
export const getApplicationSignOnPolicyAssignmentsOutput: typeof import("./getApplicationSignOnPolicyAssignments").getApplicationSignOnPolicyAssignmentsOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationSignOnPolicyAssignments","getApplicationSignOnPolicyAssignmentsOutput"], () => require("./getApplicationSignOnPolicyAssignments"));

export { GetCertificateArgs, GetCertificateResult, GetCertificateOutputArgs } from "./getCertificate";
export const getCertificate: typeof import("./getCertificate").getCertificate = null as any;
export const getCertificateOutput: typeof import("./getCertificate").getCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getCertificate","getCertificateOutput"], () => require("./getCertificate"));

export { GetCertificateExportArgs, GetCertificateExportResult, GetCertificateExportOutputArgs } from "./getCertificateExport";
export const getCertificateExport: typeof import("./getCertificateExport").getCertificateExport = null as any;
export const getCertificateExportOutput: typeof import("./getCertificateExport").getCertificateExportOutput = null as any;
utilities.lazyLoad(exports, ["getCertificateExport","getCertificateExportOutput"], () => require("./getCertificateExport"));

export { GetCertificateSigningRequestArgs, GetCertificateSigningRequestResult, GetCertificateSigningRequestOutputArgs } from "./getCertificateSigningRequest";
export const getCertificateSigningRequest: typeof import("./getCertificateSigningRequest").getCertificateSigningRequest = null as any;
export const getCertificateSigningRequestOutput: typeof import("./getCertificateSigningRequest").getCertificateSigningRequestOutput = null as any;
utilities.lazyLoad(exports, ["getCertificateSigningRequest","getCertificateSigningRequestOutput"], () => require("./getCertificateSigningRequest"));

export { GetCredentialIssuanceRuleArgs, GetCredentialIssuanceRuleResult, GetCredentialIssuanceRuleOutputArgs } from "./getCredentialIssuanceRule";
export const getCredentialIssuanceRule: typeof import("./getCredentialIssuanceRule").getCredentialIssuanceRule = null as any;
export const getCredentialIssuanceRuleOutput: typeof import("./getCredentialIssuanceRule").getCredentialIssuanceRuleOutput = null as any;
utilities.lazyLoad(exports, ["getCredentialIssuanceRule","getCredentialIssuanceRuleOutput"], () => require("./getCredentialIssuanceRule"));

export { GetCredentialIssuerProfileArgs, GetCredentialIssuerProfileResult, GetCredentialIssuerProfileOutputArgs } from "./getCredentialIssuerProfile";
export const getCredentialIssuerProfile: typeof import("./getCredentialIssuerProfile").getCredentialIssuerProfile = null as any;
export const getCredentialIssuerProfileOutput: typeof import("./getCredentialIssuerProfile").getCredentialIssuerProfileOutput = null as any;
utilities.lazyLoad(exports, ["getCredentialIssuerProfile","getCredentialIssuerProfileOutput"], () => require("./getCredentialIssuerProfile"));

export { GetCredentialTypeArgs, GetCredentialTypeResult, GetCredentialTypeOutputArgs } from "./getCredentialType";
export const getCredentialType: typeof import("./getCredentialType").getCredentialType = null as any;
export const getCredentialTypeOutput: typeof import("./getCredentialType").getCredentialTypeOutput = null as any;
utilities.lazyLoad(exports, ["getCredentialType","getCredentialTypeOutput"], () => require("./getCredentialType"));

export { GetCredentialTypesArgs, GetCredentialTypesResult, GetCredentialTypesOutputArgs } from "./getCredentialTypes";
export const getCredentialTypes: typeof import("./getCredentialTypes").getCredentialTypes = null as any;
export const getCredentialTypesOutput: typeof import("./getCredentialTypes").getCredentialTypesOutput = null as any;
utilities.lazyLoad(exports, ["getCredentialTypes","getCredentialTypesOutput"], () => require("./getCredentialTypes"));

export { GetDigitalWalletApplicationArgs, GetDigitalWalletApplicationResult, GetDigitalWalletApplicationOutputArgs } from "./getDigitalWalletApplication";
export const getDigitalWalletApplication: typeof import("./getDigitalWalletApplication").getDigitalWalletApplication = null as any;
export const getDigitalWalletApplicationOutput: typeof import("./getDigitalWalletApplication").getDigitalWalletApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getDigitalWalletApplication","getDigitalWalletApplicationOutput"], () => require("./getDigitalWalletApplication"));

export { GetDigitalWalletApplicationsArgs, GetDigitalWalletApplicationsResult, GetDigitalWalletApplicationsOutputArgs } from "./getDigitalWalletApplications";
export const getDigitalWalletApplications: typeof import("./getDigitalWalletApplications").getDigitalWalletApplications = null as any;
export const getDigitalWalletApplicationsOutput: typeof import("./getDigitalWalletApplications").getDigitalWalletApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getDigitalWalletApplications","getDigitalWalletApplicationsOutput"], () => require("./getDigitalWalletApplications"));

export { GetEnvironmentArgs, GetEnvironmentResult, GetEnvironmentOutputArgs } from "./getEnvironment";
export const getEnvironment: typeof import("./getEnvironment").getEnvironment = null as any;
export const getEnvironmentOutput: typeof import("./getEnvironment").getEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironment","getEnvironmentOutput"], () => require("./getEnvironment"));

export { GetEnvironmentsArgs, GetEnvironmentsResult, GetEnvironmentsOutputArgs } from "./getEnvironments";
export const getEnvironments: typeof import("./getEnvironments").getEnvironments = null as any;
export const getEnvironmentsOutput: typeof import("./getEnvironments").getEnvironmentsOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironments","getEnvironmentsOutput"], () => require("./getEnvironments"));

export { GetFlowPoliciesArgs, GetFlowPoliciesResult, GetFlowPoliciesOutputArgs } from "./getFlowPolicies";
export const getFlowPolicies: typeof import("./getFlowPolicies").getFlowPolicies = null as any;
export const getFlowPoliciesOutput: typeof import("./getFlowPolicies").getFlowPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getFlowPolicies","getFlowPoliciesOutput"], () => require("./getFlowPolicies"));

export { GetFlowPolicyArgs, GetFlowPolicyResult, GetFlowPolicyOutputArgs } from "./getFlowPolicy";
export const getFlowPolicy: typeof import("./getFlowPolicy").getFlowPolicy = null as any;
export const getFlowPolicyOutput: typeof import("./getFlowPolicy").getFlowPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getFlowPolicy","getFlowPolicyOutput"], () => require("./getFlowPolicy"));

export { GetGatewayArgs, GetGatewayResult, GetGatewayOutputArgs } from "./getGateway";
export const getGateway: typeof import("./getGateway").getGateway = null as any;
export const getGatewayOutput: typeof import("./getGateway").getGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getGateway","getGatewayOutput"], () => require("./getGateway"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetGroupsArgs, GetGroupsResult, GetGroupsOutputArgs } from "./getGroups";
export const getGroups: typeof import("./getGroups").getGroups = null as any;
export const getGroupsOutput: typeof import("./getGroups").getGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGroups","getGroupsOutput"], () => require("./getGroups"));

export { GetLanguageArgs, GetLanguageResult, GetLanguageOutputArgs } from "./getLanguage";
export const getLanguage: typeof import("./getLanguage").getLanguage = null as any;
export const getLanguageOutput: typeof import("./getLanguage").getLanguageOutput = null as any;
utilities.lazyLoad(exports, ["getLanguage","getLanguageOutput"], () => require("./getLanguage"));

export { GetLicenseArgs, GetLicenseResult, GetLicenseOutputArgs } from "./getLicense";
export const getLicense: typeof import("./getLicense").getLicense = null as any;
export const getLicenseOutput: typeof import("./getLicense").getLicenseOutput = null as any;
utilities.lazyLoad(exports, ["getLicense","getLicenseOutput"], () => require("./getLicense"));

export { GetLicensesArgs, GetLicensesResult, GetLicensesOutputArgs } from "./getLicenses";
export const getLicenses: typeof import("./getLicenses").getLicenses = null as any;
export const getLicensesOutput: typeof import("./getLicenses").getLicensesOutput = null as any;
utilities.lazyLoad(exports, ["getLicenses","getLicensesOutput"], () => require("./getLicenses"));

export { GetMfaDevicePoliciesArgs, GetMfaDevicePoliciesResult, GetMfaDevicePoliciesOutputArgs } from "./getMfaDevicePolicies";
export const getMfaDevicePolicies: typeof import("./getMfaDevicePolicies").getMfaDevicePolicies = null as any;
export const getMfaDevicePoliciesOutput: typeof import("./getMfaDevicePolicies").getMfaDevicePoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getMfaDevicePolicies","getMfaDevicePoliciesOutput"], () => require("./getMfaDevicePolicies"));

export { GetOrganizationArgs, GetOrganizationResult, GetOrganizationOutputArgs } from "./getOrganization";
export const getOrganization: typeof import("./getOrganization").getOrganization = null as any;
export const getOrganizationOutput: typeof import("./getOrganization").getOrganizationOutput = null as any;
utilities.lazyLoad(exports, ["getOrganization","getOrganizationOutput"], () => require("./getOrganization"));

export { GetPasswordPolicyArgs, GetPasswordPolicyResult, GetPasswordPolicyOutputArgs } from "./getPasswordPolicy";
export const getPasswordPolicy: typeof import("./getPasswordPolicy").getPasswordPolicy = null as any;
export const getPasswordPolicyOutput: typeof import("./getPasswordPolicy").getPasswordPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPasswordPolicy","getPasswordPolicyOutput"], () => require("./getPasswordPolicy"));

export { GetPhoneDeliverySettingsListArgs, GetPhoneDeliverySettingsListResult, GetPhoneDeliverySettingsListOutputArgs } from "./getPhoneDeliverySettingsList";
export const getPhoneDeliverySettingsList: typeof import("./getPhoneDeliverySettingsList").getPhoneDeliverySettingsList = null as any;
export const getPhoneDeliverySettingsListOutput: typeof import("./getPhoneDeliverySettingsList").getPhoneDeliverySettingsListOutput = null as any;
utilities.lazyLoad(exports, ["getPhoneDeliverySettingsList","getPhoneDeliverySettingsListOutput"], () => require("./getPhoneDeliverySettingsList"));

export { GetPopulationArgs, GetPopulationResult, GetPopulationOutputArgs } from "./getPopulation";
export const getPopulation: typeof import("./getPopulation").getPopulation = null as any;
export const getPopulationOutput: typeof import("./getPopulation").getPopulationOutput = null as any;
utilities.lazyLoad(exports, ["getPopulation","getPopulationOutput"], () => require("./getPopulation"));

export { GetPopulationsArgs, GetPopulationsResult, GetPopulationsOutputArgs } from "./getPopulations";
export const getPopulations: typeof import("./getPopulations").getPopulations = null as any;
export const getPopulationsOutput: typeof import("./getPopulations").getPopulationsOutput = null as any;
utilities.lazyLoad(exports, ["getPopulations","getPopulationsOutput"], () => require("./getPopulations"));

export { GetResourceArgs, GetResourceResult, GetResourceOutputArgs } from "./getResource";
export const getResource: typeof import("./getResource").getResource = null as any;
export const getResourceOutput: typeof import("./getResource").getResourceOutput = null as any;
utilities.lazyLoad(exports, ["getResource","getResourceOutput"], () => require("./getResource"));

export { GetResourceAttributeArgs, GetResourceAttributeResult, GetResourceAttributeOutputArgs } from "./getResourceAttribute";
export const getResourceAttribute: typeof import("./getResourceAttribute").getResourceAttribute = null as any;
export const getResourceAttributeOutput: typeof import("./getResourceAttribute").getResourceAttributeOutput = null as any;
utilities.lazyLoad(exports, ["getResourceAttribute","getResourceAttributeOutput"], () => require("./getResourceAttribute"));

export { GetResourceScopeArgs, GetResourceScopeResult, GetResourceScopeOutputArgs } from "./getResourceScope";
export const getResourceScope: typeof import("./getResourceScope").getResourceScope = null as any;
export const getResourceScopeOutput: typeof import("./getResourceScope").getResourceScopeOutput = null as any;
utilities.lazyLoad(exports, ["getResourceScope","getResourceScopeOutput"], () => require("./getResourceScope"));

export { GetResourceSecretArgs, GetResourceSecretResult, GetResourceSecretOutputArgs } from "./getResourceSecret";
export const getResourceSecret: typeof import("./getResourceSecret").getResourceSecret = null as any;
export const getResourceSecretOutput: typeof import("./getResourceSecret").getResourceSecretOutput = null as any;
utilities.lazyLoad(exports, ["getResourceSecret","getResourceSecretOutput"], () => require("./getResourceSecret"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { GetRolesResult } from "./getRoles";
export const getRoles: typeof import("./getRoles").getRoles = null as any;
export const getRolesOutput: typeof import("./getRoles").getRolesOutput = null as any;
utilities.lazyLoad(exports, ["getRoles","getRolesOutput"], () => require("./getRoles"));

export { GetSchemaArgs, GetSchemaResult, GetSchemaOutputArgs } from "./getSchema";
export const getSchema: typeof import("./getSchema").getSchema = null as any;
export const getSchemaOutput: typeof import("./getSchema").getSchemaOutput = null as any;
utilities.lazyLoad(exports, ["getSchema","getSchemaOutput"], () => require("./getSchema"));

export { GetTrustedEmailDomainArgs, GetTrustedEmailDomainResult, GetTrustedEmailDomainOutputArgs } from "./getTrustedEmailDomain";
export const getTrustedEmailDomain: typeof import("./getTrustedEmailDomain").getTrustedEmailDomain = null as any;
export const getTrustedEmailDomainOutput: typeof import("./getTrustedEmailDomain").getTrustedEmailDomainOutput = null as any;
utilities.lazyLoad(exports, ["getTrustedEmailDomain","getTrustedEmailDomainOutput"], () => require("./getTrustedEmailDomain"));

export { GetTrustedEmailDomainDkimArgs, GetTrustedEmailDomainDkimResult, GetTrustedEmailDomainDkimOutputArgs } from "./getTrustedEmailDomainDkim";
export const getTrustedEmailDomainDkim: typeof import("./getTrustedEmailDomainDkim").getTrustedEmailDomainDkim = null as any;
export const getTrustedEmailDomainDkimOutput: typeof import("./getTrustedEmailDomainDkim").getTrustedEmailDomainDkimOutput = null as any;
utilities.lazyLoad(exports, ["getTrustedEmailDomainDkim","getTrustedEmailDomainDkimOutput"], () => require("./getTrustedEmailDomainDkim"));

export { GetTrustedEmailDomainOwnershipArgs, GetTrustedEmailDomainOwnershipResult, GetTrustedEmailDomainOwnershipOutputArgs } from "./getTrustedEmailDomainOwnership";
export const getTrustedEmailDomainOwnership: typeof import("./getTrustedEmailDomainOwnership").getTrustedEmailDomainOwnership = null as any;
export const getTrustedEmailDomainOwnershipOutput: typeof import("./getTrustedEmailDomainOwnership").getTrustedEmailDomainOwnershipOutput = null as any;
utilities.lazyLoad(exports, ["getTrustedEmailDomainOwnership","getTrustedEmailDomainOwnershipOutput"], () => require("./getTrustedEmailDomainOwnership"));

export { GetTrustedEmailDomainSpfArgs, GetTrustedEmailDomainSpfResult, GetTrustedEmailDomainSpfOutputArgs } from "./getTrustedEmailDomainSpf";
export const getTrustedEmailDomainSpf: typeof import("./getTrustedEmailDomainSpf").getTrustedEmailDomainSpf = null as any;
export const getTrustedEmailDomainSpfOutput: typeof import("./getTrustedEmailDomainSpf").getTrustedEmailDomainSpfOutput = null as any;
utilities.lazyLoad(exports, ["getTrustedEmailDomainSpf","getTrustedEmailDomainSpfOutput"], () => require("./getTrustedEmailDomainSpf"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUserRoleAssignmentsArgs, GetUserRoleAssignmentsResult, GetUserRoleAssignmentsOutputArgs } from "./getUserRoleAssignments";
export const getUserRoleAssignments: typeof import("./getUserRoleAssignments").getUserRoleAssignments = null as any;
export const getUserRoleAssignmentsOutput: typeof import("./getUserRoleAssignments").getUserRoleAssignmentsOutput = null as any;
utilities.lazyLoad(exports, ["getUserRoleAssignments","getUserRoleAssignmentsOutput"], () => require("./getUserRoleAssignments"));

export { GetUsersArgs, GetUsersResult, GetUsersOutputArgs } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { GetVerifyPoliciesArgs, GetVerifyPoliciesResult, GetVerifyPoliciesOutputArgs } from "./getVerifyPolicies";
export const getVerifyPolicies: typeof import("./getVerifyPolicies").getVerifyPolicies = null as any;
export const getVerifyPoliciesOutput: typeof import("./getVerifyPolicies").getVerifyPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getVerifyPolicies","getVerifyPoliciesOutput"], () => require("./getVerifyPolicies"));

export { GetVerifyPolicyArgs, GetVerifyPolicyResult, GetVerifyPolicyOutputArgs } from "./getVerifyPolicy";
export const getVerifyPolicy: typeof import("./getVerifyPolicy").getVerifyPolicy = null as any;
export const getVerifyPolicyOutput: typeof import("./getVerifyPolicy").getVerifyPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getVerifyPolicy","getVerifyPolicyOutput"], () => require("./getVerifyPolicy"));

export { GetVerifyVoicePhraseArgs, GetVerifyVoicePhraseResult, GetVerifyVoicePhraseOutputArgs } from "./getVerifyVoicePhrase";
export const getVerifyVoicePhrase: typeof import("./getVerifyVoicePhrase").getVerifyVoicePhrase = null as any;
export const getVerifyVoicePhraseOutput: typeof import("./getVerifyVoicePhrase").getVerifyVoicePhraseOutput = null as any;
utilities.lazyLoad(exports, ["getVerifyVoicePhrase","getVerifyVoicePhraseOutput"], () => require("./getVerifyVoicePhrase"));

export { GetVerifyVoicePhraseContentArgs, GetVerifyVoicePhraseContentResult, GetVerifyVoicePhraseContentOutputArgs } from "./getVerifyVoicePhraseContent";
export const getVerifyVoicePhraseContent: typeof import("./getVerifyVoicePhraseContent").getVerifyVoicePhraseContent = null as any;
export const getVerifyVoicePhraseContentOutput: typeof import("./getVerifyVoicePhraseContent").getVerifyVoicePhraseContentOutput = null as any;
utilities.lazyLoad(exports, ["getVerifyVoicePhraseContent","getVerifyVoicePhraseContentOutput"], () => require("./getVerifyVoicePhraseContent"));

export { GetVerifyVoicePhraseContentsArgs, GetVerifyVoicePhraseContentsResult, GetVerifyVoicePhraseContentsOutputArgs } from "./getVerifyVoicePhraseContents";
export const getVerifyVoicePhraseContents: typeof import("./getVerifyVoicePhraseContents").getVerifyVoicePhraseContents = null as any;
export const getVerifyVoicePhraseContentsOutput: typeof import("./getVerifyVoicePhraseContents").getVerifyVoicePhraseContentsOutput = null as any;
utilities.lazyLoad(exports, ["getVerifyVoicePhraseContents","getVerifyVoicePhraseContentsOutput"], () => require("./getVerifyVoicePhraseContents"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { GroupNestingArgs, GroupNestingState } from "./groupNesting";
export type GroupNesting = import("./groupNesting").GroupNesting;
export const GroupNesting: typeof import("./groupNesting").GroupNesting = null as any;
utilities.lazyLoad(exports, ["GroupNesting"], () => require("./groupNesting"));

export { GroupRoleAssignmentArgs, GroupRoleAssignmentState } from "./groupRoleAssignment";
export type GroupRoleAssignment = import("./groupRoleAssignment").GroupRoleAssignment;
export const GroupRoleAssignment: typeof import("./groupRoleAssignment").GroupRoleAssignment = null as any;
utilities.lazyLoad(exports, ["GroupRoleAssignment"], () => require("./groupRoleAssignment"));

export { IdentityPropagationPlanArgs, IdentityPropagationPlanState } from "./identityPropagationPlan";
export type IdentityPropagationPlan = import("./identityPropagationPlan").IdentityPropagationPlan;
export const IdentityPropagationPlan: typeof import("./identityPropagationPlan").IdentityPropagationPlan = null as any;
utilities.lazyLoad(exports, ["IdentityPropagationPlan"], () => require("./identityPropagationPlan"));

export { IdentityProviderArgs, IdentityProviderState } from "./identityProvider";
export type IdentityProvider = import("./identityProvider").IdentityProvider;
export const IdentityProvider: typeof import("./identityProvider").IdentityProvider = null as any;
utilities.lazyLoad(exports, ["IdentityProvider"], () => require("./identityProvider"));

export { IdentityProviderAttributeArgs, IdentityProviderAttributeState } from "./identityProviderAttribute";
export type IdentityProviderAttribute = import("./identityProviderAttribute").IdentityProviderAttribute;
export const IdentityProviderAttribute: typeof import("./identityProviderAttribute").IdentityProviderAttribute = null as any;
utilities.lazyLoad(exports, ["IdentityProviderAttribute"], () => require("./identityProviderAttribute"));

export { ImageArgs, ImageState } from "./image";
export type Image = import("./image").Image;
export const Image: typeof import("./image").Image = null as any;
utilities.lazyLoad(exports, ["Image"], () => require("./image"));

export { KeyArgs, KeyState } from "./key";
export type Key = import("./key").Key;
export const Key: typeof import("./key").Key = null as any;
utilities.lazyLoad(exports, ["Key"], () => require("./key"));

export { KeyRotationPolicyArgs, KeyRotationPolicyState } from "./keyRotationPolicy";
export type KeyRotationPolicy = import("./keyRotationPolicy").KeyRotationPolicy;
export const KeyRotationPolicy: typeof import("./keyRotationPolicy").KeyRotationPolicy = null as any;
utilities.lazyLoad(exports, ["KeyRotationPolicy"], () => require("./keyRotationPolicy"));

export { LanguageArgs, LanguageState } from "./language";
export type Language = import("./language").Language;
export const Language: typeof import("./language").Language = null as any;
utilities.lazyLoad(exports, ["Language"], () => require("./language"));

export { LanguageUpdateArgs, LanguageUpdateState } from "./languageUpdate";
export type LanguageUpdate = import("./languageUpdate").LanguageUpdate;
export const LanguageUpdate: typeof import("./languageUpdate").LanguageUpdate = null as any;
utilities.lazyLoad(exports, ["LanguageUpdate"], () => require("./languageUpdate"));

export { MfaApplicationPushCredentialArgs, MfaApplicationPushCredentialState } from "./mfaApplicationPushCredential";
export type MfaApplicationPushCredential = import("./mfaApplicationPushCredential").MfaApplicationPushCredential;
export const MfaApplicationPushCredential: typeof import("./mfaApplicationPushCredential").MfaApplicationPushCredential = null as any;
utilities.lazyLoad(exports, ["MfaApplicationPushCredential"], () => require("./mfaApplicationPushCredential"));

export { MfaDevicePolicyArgs, MfaDevicePolicyState } from "./mfaDevicePolicy";
export type MfaDevicePolicy = import("./mfaDevicePolicy").MfaDevicePolicy;
export const MfaDevicePolicy: typeof import("./mfaDevicePolicy").MfaDevicePolicy = null as any;
utilities.lazyLoad(exports, ["MfaDevicePolicy"], () => require("./mfaDevicePolicy"));

export { MfaFido2PolicyArgs, MfaFido2PolicyState } from "./mfaFido2Policy";
export type MfaFido2Policy = import("./mfaFido2Policy").MfaFido2Policy;
export const MfaFido2Policy: typeof import("./mfaFido2Policy").MfaFido2Policy = null as any;
utilities.lazyLoad(exports, ["MfaFido2Policy"], () => require("./mfaFido2Policy"));

export { MfaPolicyArgs, MfaPolicyState } from "./mfaPolicy";
export type MfaPolicy = import("./mfaPolicy").MfaPolicy;
export const MfaPolicy: typeof import("./mfaPolicy").MfaPolicy = null as any;
utilities.lazyLoad(exports, ["MfaPolicy"], () => require("./mfaPolicy"));

export { MfaSettingsArgs, MfaSettingsState } from "./mfaSettings";
export type MfaSettings = import("./mfaSettings").MfaSettings;
export const MfaSettings: typeof import("./mfaSettings").MfaSettings = null as any;
utilities.lazyLoad(exports, ["MfaSettings"], () => require("./mfaSettings"));

export { NotificationPolicyArgs, NotificationPolicyState } from "./notificationPolicy";
export type NotificationPolicy = import("./notificationPolicy").NotificationPolicy;
export const NotificationPolicy: typeof import("./notificationPolicy").NotificationPolicy = null as any;
utilities.lazyLoad(exports, ["NotificationPolicy"], () => require("./notificationPolicy"));

export { NotificationSettingsArgs, NotificationSettingsState } from "./notificationSettings";
export type NotificationSettings = import("./notificationSettings").NotificationSettings;
export const NotificationSettings: typeof import("./notificationSettings").NotificationSettings = null as any;
utilities.lazyLoad(exports, ["NotificationSettings"], () => require("./notificationSettings"));

export { NotificationSettingsEmailArgs, NotificationSettingsEmailState } from "./notificationSettingsEmail";
export type NotificationSettingsEmail = import("./notificationSettingsEmail").NotificationSettingsEmail;
export const NotificationSettingsEmail: typeof import("./notificationSettingsEmail").NotificationSettingsEmail = null as any;
utilities.lazyLoad(exports, ["NotificationSettingsEmail"], () => require("./notificationSettingsEmail"));

export { NotificationTemplateContentArgs, NotificationTemplateContentState } from "./notificationTemplateContent";
export type NotificationTemplateContent = import("./notificationTemplateContent").NotificationTemplateContent;
export const NotificationTemplateContent: typeof import("./notificationTemplateContent").NotificationTemplateContent = null as any;
utilities.lazyLoad(exports, ["NotificationTemplateContent"], () => require("./notificationTemplateContent"));

export { PasswordPolicyArgs, PasswordPolicyState } from "./passwordPolicy";
export type PasswordPolicy = import("./passwordPolicy").PasswordPolicy;
export const PasswordPolicy: typeof import("./passwordPolicy").PasswordPolicy = null as any;
utilities.lazyLoad(exports, ["PasswordPolicy"], () => require("./passwordPolicy"));

export { PhoneDeliverySettingsArgs, PhoneDeliverySettingsState } from "./phoneDeliverySettings";
export type PhoneDeliverySettings = import("./phoneDeliverySettings").PhoneDeliverySettings;
export const PhoneDeliverySettings: typeof import("./phoneDeliverySettings").PhoneDeliverySettings = null as any;
utilities.lazyLoad(exports, ["PhoneDeliverySettings"], () => require("./phoneDeliverySettings"));

export { PopulationArgs, PopulationState } from "./population";
export type Population = import("./population").Population;
export const Population: typeof import("./population").Population = null as any;
utilities.lazyLoad(exports, ["Population"], () => require("./population"));

export { PopulationDefaultArgs, PopulationDefaultState } from "./populationDefault";
export type PopulationDefault = import("./populationDefault").PopulationDefault;
export const PopulationDefault: typeof import("./populationDefault").PopulationDefault = null as any;
utilities.lazyLoad(exports, ["PopulationDefault"], () => require("./populationDefault"));

export { PopulationDefaultIdentityProviderArgs, PopulationDefaultIdentityProviderState } from "./populationDefaultIdentityProvider";
export type PopulationDefaultIdentityProvider = import("./populationDefaultIdentityProvider").PopulationDefaultIdentityProvider;
export const PopulationDefaultIdentityProvider: typeof import("./populationDefaultIdentityProvider").PopulationDefaultIdentityProvider = null as any;
utilities.lazyLoad(exports, ["PopulationDefaultIdentityProvider"], () => require("./populationDefaultIdentityProvider"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ResourceArgs, ResourceState } from "./resource";
export type Resource = import("./resource").Resource;
export const Resource: typeof import("./resource").Resource = null as any;
utilities.lazyLoad(exports, ["Resource"], () => require("./resource"));

export { ResourceAttributeArgs, ResourceAttributeState } from "./resourceAttribute";
export type ResourceAttribute = import("./resourceAttribute").ResourceAttribute;
export const ResourceAttribute: typeof import("./resourceAttribute").ResourceAttribute = null as any;
utilities.lazyLoad(exports, ["ResourceAttribute"], () => require("./resourceAttribute"));

export { ResourceScopeArgs, ResourceScopeState } from "./resourceScope";
export type ResourceScope = import("./resourceScope").ResourceScope;
export const ResourceScope: typeof import("./resourceScope").ResourceScope = null as any;
utilities.lazyLoad(exports, ["ResourceScope"], () => require("./resourceScope"));

export { ResourceScopeOpenidArgs, ResourceScopeOpenidState } from "./resourceScopeOpenid";
export type ResourceScopeOpenid = import("./resourceScopeOpenid").ResourceScopeOpenid;
export const ResourceScopeOpenid: typeof import("./resourceScopeOpenid").ResourceScopeOpenid = null as any;
utilities.lazyLoad(exports, ["ResourceScopeOpenid"], () => require("./resourceScopeOpenid"));

export { ResourceScopePingoneApiArgs, ResourceScopePingoneApiState } from "./resourceScopePingoneApi";
export type ResourceScopePingoneApi = import("./resourceScopePingoneApi").ResourceScopePingoneApi;
export const ResourceScopePingoneApi: typeof import("./resourceScopePingoneApi").ResourceScopePingoneApi = null as any;
utilities.lazyLoad(exports, ["ResourceScopePingoneApi"], () => require("./resourceScopePingoneApi"));

export { ResourceSecretArgs, ResourceSecretState } from "./resourceSecret";
export type ResourceSecret = import("./resourceSecret").ResourceSecret;
export const ResourceSecret: typeof import("./resourceSecret").ResourceSecret = null as any;
utilities.lazyLoad(exports, ["ResourceSecret"], () => require("./resourceSecret"));

export { RiskPolicyArgs, RiskPolicyState } from "./riskPolicy";
export type RiskPolicy = import("./riskPolicy").RiskPolicy;
export const RiskPolicy: typeof import("./riskPolicy").RiskPolicy = null as any;
utilities.lazyLoad(exports, ["RiskPolicy"], () => require("./riskPolicy"));

export { RiskPredictorArgs, RiskPredictorState } from "./riskPredictor";
export type RiskPredictor = import("./riskPredictor").RiskPredictor;
export const RiskPredictor: typeof import("./riskPredictor").RiskPredictor = null as any;
utilities.lazyLoad(exports, ["RiskPredictor"], () => require("./riskPredictor"));

export { RoleAssignmentUserArgs, RoleAssignmentUserState } from "./roleAssignmentUser";
export type RoleAssignmentUser = import("./roleAssignmentUser").RoleAssignmentUser;
export const RoleAssignmentUser: typeof import("./roleAssignmentUser").RoleAssignmentUser = null as any;
utilities.lazyLoad(exports, ["RoleAssignmentUser"], () => require("./roleAssignmentUser"));

export { SchemaAttributeArgs, SchemaAttributeState } from "./schemaAttribute";
export type SchemaAttribute = import("./schemaAttribute").SchemaAttribute;
export const SchemaAttribute: typeof import("./schemaAttribute").SchemaAttribute = null as any;
utilities.lazyLoad(exports, ["SchemaAttribute"], () => require("./schemaAttribute"));

export { SignOnPolicyArgs, SignOnPolicyState } from "./signOnPolicy";
export type SignOnPolicy = import("./signOnPolicy").SignOnPolicy;
export const SignOnPolicy: typeof import("./signOnPolicy").SignOnPolicy = null as any;
utilities.lazyLoad(exports, ["SignOnPolicy"], () => require("./signOnPolicy"));

export { SignOnPolicyActionArgs, SignOnPolicyActionState } from "./signOnPolicyAction";
export type SignOnPolicyAction = import("./signOnPolicyAction").SignOnPolicyAction;
export const SignOnPolicyAction: typeof import("./signOnPolicyAction").SignOnPolicyAction = null as any;
utilities.lazyLoad(exports, ["SignOnPolicyAction"], () => require("./signOnPolicyAction"));

export { SystemApplicationArgs, SystemApplicationState } from "./systemApplication";
export type SystemApplication = import("./systemApplication").SystemApplication;
export const SystemApplication: typeof import("./systemApplication").SystemApplication = null as any;
utilities.lazyLoad(exports, ["SystemApplication"], () => require("./systemApplication"));

export { TrustedEmailAddressArgs, TrustedEmailAddressState } from "./trustedEmailAddress";
export type TrustedEmailAddress = import("./trustedEmailAddress").TrustedEmailAddress;
export const TrustedEmailAddress: typeof import("./trustedEmailAddress").TrustedEmailAddress = null as any;
utilities.lazyLoad(exports, ["TrustedEmailAddress"], () => require("./trustedEmailAddress"));

export { TrustedEmailDomainArgs, TrustedEmailDomainState } from "./trustedEmailDomain";
export type TrustedEmailDomain = import("./trustedEmailDomain").TrustedEmailDomain;
export const TrustedEmailDomain: typeof import("./trustedEmailDomain").TrustedEmailDomain = null as any;
utilities.lazyLoad(exports, ["TrustedEmailDomain"], () => require("./trustedEmailDomain"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserApplicationRoleAssignmentArgs, UserApplicationRoleAssignmentState } from "./userApplicationRoleAssignment";
export type UserApplicationRoleAssignment = import("./userApplicationRoleAssignment").UserApplicationRoleAssignment;
export const UserApplicationRoleAssignment: typeof import("./userApplicationRoleAssignment").UserApplicationRoleAssignment = null as any;
utilities.lazyLoad(exports, ["UserApplicationRoleAssignment"], () => require("./userApplicationRoleAssignment"));

export { UserGroupAssignmentArgs, UserGroupAssignmentState } from "./userGroupAssignment";
export type UserGroupAssignment = import("./userGroupAssignment").UserGroupAssignment;
export const UserGroupAssignment: typeof import("./userGroupAssignment").UserGroupAssignment = null as any;
utilities.lazyLoad(exports, ["UserGroupAssignment"], () => require("./userGroupAssignment"));

export { UserRoleAssignmentArgs, UserRoleAssignmentState } from "./userRoleAssignment";
export type UserRoleAssignment = import("./userRoleAssignment").UserRoleAssignment;
export const UserRoleAssignment: typeof import("./userRoleAssignment").UserRoleAssignment = null as any;
utilities.lazyLoad(exports, ["UserRoleAssignment"], () => require("./userRoleAssignment"));

export { VerifyPolicyArgs, VerifyPolicyState } from "./verifyPolicy";
export type VerifyPolicy = import("./verifyPolicy").VerifyPolicy;
export const VerifyPolicy: typeof import("./verifyPolicy").VerifyPolicy = null as any;
utilities.lazyLoad(exports, ["VerifyPolicy"], () => require("./verifyPolicy"));

export { VerifyVoicePhraseArgs, VerifyVoicePhraseState } from "./verifyVoicePhrase";
export type VerifyVoicePhrase = import("./verifyVoicePhrase").VerifyVoicePhrase;
export const VerifyVoicePhrase: typeof import("./verifyVoicePhrase").VerifyVoicePhrase = null as any;
utilities.lazyLoad(exports, ["VerifyVoicePhrase"], () => require("./verifyVoicePhrase"));

export { VerifyVoicePhraseContentArgs, VerifyVoicePhraseContentState } from "./verifyVoicePhraseContent";
export type VerifyVoicePhraseContent = import("./verifyVoicePhraseContent").VerifyVoicePhraseContent;
export const VerifyVoicePhraseContent: typeof import("./verifyVoicePhraseContent").VerifyVoicePhraseContent = null as any;
utilities.lazyLoad(exports, ["VerifyVoicePhraseContent"], () => require("./verifyVoicePhraseContent"));

export { WebhookArgs, WebhookState } from "./webhook";
export type Webhook = import("./webhook").Webhook;
export const Webhook: typeof import("./webhook").Webhook = null as any;
utilities.lazyLoad(exports, ["Webhook"], () => require("./webhook"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "pingone:index/agreement:Agreement":
                return new Agreement(name, <any>undefined, { urn })
            case "pingone:index/agreementEnable:AgreementEnable":
                return new AgreementEnable(name, <any>undefined, { urn })
            case "pingone:index/agreementLocalization:AgreementLocalization":
                return new AgreementLocalization(name, <any>undefined, { urn })
            case "pingone:index/agreementLocalizationEnable:AgreementLocalizationEnable":
                return new AgreementLocalizationEnable(name, <any>undefined, { urn })
            case "pingone:index/agreementLocalizationRevision:AgreementLocalizationRevision":
                return new AgreementLocalizationRevision(name, <any>undefined, { urn })
            case "pingone:index/alertChannel:AlertChannel":
                return new AlertChannel(name, <any>undefined, { urn })
            case "pingone:index/application:Application":
                return new Application(name, <any>undefined, { urn })
            case "pingone:index/applicationAttributeMapping:ApplicationAttributeMapping":
                return new ApplicationAttributeMapping(name, <any>undefined, { urn })
            case "pingone:index/applicationFlowPolicyAssignment:ApplicationFlowPolicyAssignment":
                return new ApplicationFlowPolicyAssignment(name, <any>undefined, { urn })
            case "pingone:index/applicationResource:ApplicationResource":
                return new ApplicationResource(name, <any>undefined, { urn })
            case "pingone:index/applicationResourceGrant:ApplicationResourceGrant":
                return new ApplicationResourceGrant(name, <any>undefined, { urn })
            case "pingone:index/applicationResourcePermission:ApplicationResourcePermission":
                return new ApplicationResourcePermission(name, <any>undefined, { urn })
            case "pingone:index/applicationRoleAssignment:ApplicationRoleAssignment":
                return new ApplicationRoleAssignment(name, <any>undefined, { urn })
            case "pingone:index/applicationSecret:ApplicationSecret":
                return new ApplicationSecret(name, <any>undefined, { urn })
            case "pingone:index/applicationSignOnPolicyAssignment:ApplicationSignOnPolicyAssignment":
                return new ApplicationSignOnPolicyAssignment(name, <any>undefined, { urn })
            case "pingone:index/authorizeApiService:AuthorizeApiService":
                return new AuthorizeApiService(name, <any>undefined, { urn })
            case "pingone:index/authorizeApiServiceDeployment:AuthorizeApiServiceDeployment":
                return new AuthorizeApiServiceDeployment(name, <any>undefined, { urn })
            case "pingone:index/authorizeApiServiceOperation:AuthorizeApiServiceOperation":
                return new AuthorizeApiServiceOperation(name, <any>undefined, { urn })
            case "pingone:index/authorizeApplicationRole:AuthorizeApplicationRole":
                return new AuthorizeApplicationRole(name, <any>undefined, { urn })
            case "pingone:index/authorizeApplicationRolePermission:AuthorizeApplicationRolePermission":
                return new AuthorizeApplicationRolePermission(name, <any>undefined, { urn })
            case "pingone:index/authorizeDecisionEndpoint:AuthorizeDecisionEndpoint":
                return new AuthorizeDecisionEndpoint(name, <any>undefined, { urn })
            case "pingone:index/brandingSettings:BrandingSettings":
                return new BrandingSettings(name, <any>undefined, { urn })
            case "pingone:index/brandingTheme:BrandingTheme":
                return new BrandingTheme(name, <any>undefined, { urn })
            case "pingone:index/brandingThemeDefault:BrandingThemeDefault":
                return new BrandingThemeDefault(name, <any>undefined, { urn })
            case "pingone:index/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "pingone:index/certificateSigningResponse:CertificateSigningResponse":
                return new CertificateSigningResponse(name, <any>undefined, { urn })
            case "pingone:index/credentialIssuanceRule:CredentialIssuanceRule":
                return new CredentialIssuanceRule(name, <any>undefined, { urn })
            case "pingone:index/credentialIssuerProfile:CredentialIssuerProfile":
                return new CredentialIssuerProfile(name, <any>undefined, { urn })
            case "pingone:index/credentialType:CredentialType":
                return new CredentialType(name, <any>undefined, { urn })
            case "pingone:index/customDomain:CustomDomain":
                return new CustomDomain(name, <any>undefined, { urn })
            case "pingone:index/customDomainSsl:CustomDomainSsl":
                return new CustomDomainSsl(name, <any>undefined, { urn })
            case "pingone:index/customDomainVerify:CustomDomainVerify":
                return new CustomDomainVerify(name, <any>undefined, { urn })
            case "pingone:index/digitalWalletApplication:DigitalWalletApplication":
                return new DigitalWalletApplication(name, <any>undefined, { urn })
            case "pingone:index/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "pingone:index/form:Form":
                return new Form(name, <any>undefined, { urn })
            case "pingone:index/formsRecaptchaV2:FormsRecaptchaV2":
                return new FormsRecaptchaV2(name, <any>undefined, { urn })
            case "pingone:index/gateway:Gateway":
                return new Gateway(name, <any>undefined, { urn })
            case "pingone:index/gatewayCredential:GatewayCredential":
                return new GatewayCredential(name, <any>undefined, { urn })
            case "pingone:index/gatewayRoleAssignment:GatewayRoleAssignment":
                return new GatewayRoleAssignment(name, <any>undefined, { urn })
            case "pingone:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "pingone:index/groupNesting:GroupNesting":
                return new GroupNesting(name, <any>undefined, { urn })
            case "pingone:index/groupRoleAssignment:GroupRoleAssignment":
                return new GroupRoleAssignment(name, <any>undefined, { urn })
            case "pingone:index/identityPropagationPlan:IdentityPropagationPlan":
                return new IdentityPropagationPlan(name, <any>undefined, { urn })
            case "pingone:index/identityProvider:IdentityProvider":
                return new IdentityProvider(name, <any>undefined, { urn })
            case "pingone:index/identityProviderAttribute:IdentityProviderAttribute":
                return new IdentityProviderAttribute(name, <any>undefined, { urn })
            case "pingone:index/image:Image":
                return new Image(name, <any>undefined, { urn })
            case "pingone:index/key:Key":
                return new Key(name, <any>undefined, { urn })
            case "pingone:index/keyRotationPolicy:KeyRotationPolicy":
                return new KeyRotationPolicy(name, <any>undefined, { urn })
            case "pingone:index/language:Language":
                return new Language(name, <any>undefined, { urn })
            case "pingone:index/languageUpdate:LanguageUpdate":
                return new LanguageUpdate(name, <any>undefined, { urn })
            case "pingone:index/mfaApplicationPushCredential:MfaApplicationPushCredential":
                return new MfaApplicationPushCredential(name, <any>undefined, { urn })
            case "pingone:index/mfaDevicePolicy:MfaDevicePolicy":
                return new MfaDevicePolicy(name, <any>undefined, { urn })
            case "pingone:index/mfaFido2Policy:MfaFido2Policy":
                return new MfaFido2Policy(name, <any>undefined, { urn })
            case "pingone:index/mfaPolicy:MfaPolicy":
                return new MfaPolicy(name, <any>undefined, { urn })
            case "pingone:index/mfaSettings:MfaSettings":
                return new MfaSettings(name, <any>undefined, { urn })
            case "pingone:index/notificationPolicy:NotificationPolicy":
                return new NotificationPolicy(name, <any>undefined, { urn })
            case "pingone:index/notificationSettings:NotificationSettings":
                return new NotificationSettings(name, <any>undefined, { urn })
            case "pingone:index/notificationSettingsEmail:NotificationSettingsEmail":
                return new NotificationSettingsEmail(name, <any>undefined, { urn })
            case "pingone:index/notificationTemplateContent:NotificationTemplateContent":
                return new NotificationTemplateContent(name, <any>undefined, { urn })
            case "pingone:index/passwordPolicy:PasswordPolicy":
                return new PasswordPolicy(name, <any>undefined, { urn })
            case "pingone:index/phoneDeliverySettings:PhoneDeliverySettings":
                return new PhoneDeliverySettings(name, <any>undefined, { urn })
            case "pingone:index/population:Population":
                return new Population(name, <any>undefined, { urn })
            case "pingone:index/populationDefault:PopulationDefault":
                return new PopulationDefault(name, <any>undefined, { urn })
            case "pingone:index/populationDefaultIdentityProvider:PopulationDefaultIdentityProvider":
                return new PopulationDefaultIdentityProvider(name, <any>undefined, { urn })
            case "pingone:index/resource:Resource":
                return new Resource(name, <any>undefined, { urn })
            case "pingone:index/resourceAttribute:ResourceAttribute":
                return new ResourceAttribute(name, <any>undefined, { urn })
            case "pingone:index/resourceScope:ResourceScope":
                return new ResourceScope(name, <any>undefined, { urn })
            case "pingone:index/resourceScopeOpenid:ResourceScopeOpenid":
                return new ResourceScopeOpenid(name, <any>undefined, { urn })
            case "pingone:index/resourceScopePingoneApi:ResourceScopePingoneApi":
                return new ResourceScopePingoneApi(name, <any>undefined, { urn })
            case "pingone:index/resourceSecret:ResourceSecret":
                return new ResourceSecret(name, <any>undefined, { urn })
            case "pingone:index/riskPolicy:RiskPolicy":
                return new RiskPolicy(name, <any>undefined, { urn })
            case "pingone:index/riskPredictor:RiskPredictor":
                return new RiskPredictor(name, <any>undefined, { urn })
            case "pingone:index/roleAssignmentUser:RoleAssignmentUser":
                return new RoleAssignmentUser(name, <any>undefined, { urn })
            case "pingone:index/schemaAttribute:SchemaAttribute":
                return new SchemaAttribute(name, <any>undefined, { urn })
            case "pingone:index/signOnPolicy:SignOnPolicy":
                return new SignOnPolicy(name, <any>undefined, { urn })
            case "pingone:index/signOnPolicyAction:SignOnPolicyAction":
                return new SignOnPolicyAction(name, <any>undefined, { urn })
            case "pingone:index/systemApplication:SystemApplication":
                return new SystemApplication(name, <any>undefined, { urn })
            case "pingone:index/trustedEmailAddress:TrustedEmailAddress":
                return new TrustedEmailAddress(name, <any>undefined, { urn })
            case "pingone:index/trustedEmailDomain:TrustedEmailDomain":
                return new TrustedEmailDomain(name, <any>undefined, { urn })
            case "pingone:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "pingone:index/userApplicationRoleAssignment:UserApplicationRoleAssignment":
                return new UserApplicationRoleAssignment(name, <any>undefined, { urn })
            case "pingone:index/userGroupAssignment:UserGroupAssignment":
                return new UserGroupAssignment(name, <any>undefined, { urn })
            case "pingone:index/userRoleAssignment:UserRoleAssignment":
                return new UserRoleAssignment(name, <any>undefined, { urn })
            case "pingone:index/verifyPolicy:VerifyPolicy":
                return new VerifyPolicy(name, <any>undefined, { urn })
            case "pingone:index/verifyVoicePhrase:VerifyVoicePhrase":
                return new VerifyVoicePhrase(name, <any>undefined, { urn })
            case "pingone:index/verifyVoicePhraseContent:VerifyVoicePhraseContent":
                return new VerifyVoicePhraseContent(name, <any>undefined, { urn })
            case "pingone:index/webhook:Webhook":
                return new Webhook(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("pingone", "index/agreement", _module)
pulumi.runtime.registerResourceModule("pingone", "index/agreementEnable", _module)
pulumi.runtime.registerResourceModule("pingone", "index/agreementLocalization", _module)
pulumi.runtime.registerResourceModule("pingone", "index/agreementLocalizationEnable", _module)
pulumi.runtime.registerResourceModule("pingone", "index/agreementLocalizationRevision", _module)
pulumi.runtime.registerResourceModule("pingone", "index/alertChannel", _module)
pulumi.runtime.registerResourceModule("pingone", "index/application", _module)
pulumi.runtime.registerResourceModule("pingone", "index/applicationAttributeMapping", _module)
pulumi.runtime.registerResourceModule("pingone", "index/applicationFlowPolicyAssignment", _module)
pulumi.runtime.registerResourceModule("pingone", "index/applicationResource", _module)
pulumi.runtime.registerResourceModule("pingone", "index/applicationResourceGrant", _module)
pulumi.runtime.registerResourceModule("pingone", "index/applicationResourcePermission", _module)
pulumi.runtime.registerResourceModule("pingone", "index/applicationRoleAssignment", _module)
pulumi.runtime.registerResourceModule("pingone", "index/applicationSecret", _module)
pulumi.runtime.registerResourceModule("pingone", "index/applicationSignOnPolicyAssignment", _module)
pulumi.runtime.registerResourceModule("pingone", "index/authorizeApiService", _module)
pulumi.runtime.registerResourceModule("pingone", "index/authorizeApiServiceDeployment", _module)
pulumi.runtime.registerResourceModule("pingone", "index/authorizeApiServiceOperation", _module)
pulumi.runtime.registerResourceModule("pingone", "index/authorizeApplicationRole", _module)
pulumi.runtime.registerResourceModule("pingone", "index/authorizeApplicationRolePermission", _module)
pulumi.runtime.registerResourceModule("pingone", "index/authorizeDecisionEndpoint", _module)
pulumi.runtime.registerResourceModule("pingone", "index/brandingSettings", _module)
pulumi.runtime.registerResourceModule("pingone", "index/brandingTheme", _module)
pulumi.runtime.registerResourceModule("pingone", "index/brandingThemeDefault", _module)
pulumi.runtime.registerResourceModule("pingone", "index/certificate", _module)
pulumi.runtime.registerResourceModule("pingone", "index/certificateSigningResponse", _module)
pulumi.runtime.registerResourceModule("pingone", "index/credentialIssuanceRule", _module)
pulumi.runtime.registerResourceModule("pingone", "index/credentialIssuerProfile", _module)
pulumi.runtime.registerResourceModule("pingone", "index/credentialType", _module)
pulumi.runtime.registerResourceModule("pingone", "index/customDomain", _module)
pulumi.runtime.registerResourceModule("pingone", "index/customDomainSsl", _module)
pulumi.runtime.registerResourceModule("pingone", "index/customDomainVerify", _module)
pulumi.runtime.registerResourceModule("pingone", "index/digitalWalletApplication", _module)
pulumi.runtime.registerResourceModule("pingone", "index/environment", _module)
pulumi.runtime.registerResourceModule("pingone", "index/form", _module)
pulumi.runtime.registerResourceModule("pingone", "index/formsRecaptchaV2", _module)
pulumi.runtime.registerResourceModule("pingone", "index/gateway", _module)
pulumi.runtime.registerResourceModule("pingone", "index/gatewayCredential", _module)
pulumi.runtime.registerResourceModule("pingone", "index/gatewayRoleAssignment", _module)
pulumi.runtime.registerResourceModule("pingone", "index/group", _module)
pulumi.runtime.registerResourceModule("pingone", "index/groupNesting", _module)
pulumi.runtime.registerResourceModule("pingone", "index/groupRoleAssignment", _module)
pulumi.runtime.registerResourceModule("pingone", "index/identityPropagationPlan", _module)
pulumi.runtime.registerResourceModule("pingone", "index/identityProvider", _module)
pulumi.runtime.registerResourceModule("pingone", "index/identityProviderAttribute", _module)
pulumi.runtime.registerResourceModule("pingone", "index/image", _module)
pulumi.runtime.registerResourceModule("pingone", "index/key", _module)
pulumi.runtime.registerResourceModule("pingone", "index/keyRotationPolicy", _module)
pulumi.runtime.registerResourceModule("pingone", "index/language", _module)
pulumi.runtime.registerResourceModule("pingone", "index/languageUpdate", _module)
pulumi.runtime.registerResourceModule("pingone", "index/mfaApplicationPushCredential", _module)
pulumi.runtime.registerResourceModule("pingone", "index/mfaDevicePolicy", _module)
pulumi.runtime.registerResourceModule("pingone", "index/mfaFido2Policy", _module)
pulumi.runtime.registerResourceModule("pingone", "index/mfaPolicy", _module)
pulumi.runtime.registerResourceModule("pingone", "index/mfaSettings", _module)
pulumi.runtime.registerResourceModule("pingone", "index/notificationPolicy", _module)
pulumi.runtime.registerResourceModule("pingone", "index/notificationSettings", _module)
pulumi.runtime.registerResourceModule("pingone", "index/notificationSettingsEmail", _module)
pulumi.runtime.registerResourceModule("pingone", "index/notificationTemplateContent", _module)
pulumi.runtime.registerResourceModule("pingone", "index/passwordPolicy", _module)
pulumi.runtime.registerResourceModule("pingone", "index/phoneDeliverySettings", _module)
pulumi.runtime.registerResourceModule("pingone", "index/population", _module)
pulumi.runtime.registerResourceModule("pingone", "index/populationDefault", _module)
pulumi.runtime.registerResourceModule("pingone", "index/populationDefaultIdentityProvider", _module)
pulumi.runtime.registerResourceModule("pingone", "index/resource", _module)
pulumi.runtime.registerResourceModule("pingone", "index/resourceAttribute", _module)
pulumi.runtime.registerResourceModule("pingone", "index/resourceScope", _module)
pulumi.runtime.registerResourceModule("pingone", "index/resourceScopeOpenid", _module)
pulumi.runtime.registerResourceModule("pingone", "index/resourceScopePingoneApi", _module)
pulumi.runtime.registerResourceModule("pingone", "index/resourceSecret", _module)
pulumi.runtime.registerResourceModule("pingone", "index/riskPolicy", _module)
pulumi.runtime.registerResourceModule("pingone", "index/riskPredictor", _module)
pulumi.runtime.registerResourceModule("pingone", "index/roleAssignmentUser", _module)
pulumi.runtime.registerResourceModule("pingone", "index/schemaAttribute", _module)
pulumi.runtime.registerResourceModule("pingone", "index/signOnPolicy", _module)
pulumi.runtime.registerResourceModule("pingone", "index/signOnPolicyAction", _module)
pulumi.runtime.registerResourceModule("pingone", "index/systemApplication", _module)
pulumi.runtime.registerResourceModule("pingone", "index/trustedEmailAddress", _module)
pulumi.runtime.registerResourceModule("pingone", "index/trustedEmailDomain", _module)
pulumi.runtime.registerResourceModule("pingone", "index/user", _module)
pulumi.runtime.registerResourceModule("pingone", "index/userApplicationRoleAssignment", _module)
pulumi.runtime.registerResourceModule("pingone", "index/userGroupAssignment", _module)
pulumi.runtime.registerResourceModule("pingone", "index/userRoleAssignment", _module)
pulumi.runtime.registerResourceModule("pingone", "index/verifyPolicy", _module)
pulumi.runtime.registerResourceModule("pingone", "index/verifyVoicePhrase", _module)
pulumi.runtime.registerResourceModule("pingone", "index/verifyVoicePhraseContent", _module)
pulumi.runtime.registerResourceModule("pingone", "index/webhook", _module)
pulumi.runtime.registerResourcePackage("pingone", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:pingone") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
