// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RiskPolicy extends pulumi.CustomResource {
    /**
     * Get an existing RiskPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RiskPolicyState, opts?: pulumi.CustomResourceOptions): RiskPolicy {
        return new RiskPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingone:index/riskPolicy:RiskPolicy';

    /**
     * Returns true if the given object is an instance of RiskPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RiskPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RiskPolicy.__pulumiType;
    }

    /**
     * A boolean that indicates whether this risk policy set is the environment's default risk policy set. This is used
     * whenever an explicit policy set ID is not specified in a risk evaluation request.
     */
    public /*out*/ readonly default!: pulumi.Output<boolean>;
    /**
     * A single nested object that specifies the default result value for the risk policy.
     */
    public readonly defaultResult!: pulumi.Output<outputs.RiskPolicyDefaultResult>;
    /**
     * The ID of the environment to configure the risk policy in. Must be a valid PingOne resource ID. This field is immutable
     * and will trigger a replace plan if changed.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * A set of IDs for the predictors to evaluate in this policy set. If omitted, if this property is null, all of the
     * licensed predictors are used.
     */
    public readonly evaluatedPredictors!: pulumi.Output<string[]>;
    /**
     * A string that specifies the unique, friendly name for this policy set. Valid characters consist of any Unicode letter,
     * mark (such as, accent, umlaut), # (numeric), / (forward slash), . (period), ' (apostrophe), _ (underscore), space, or -
     * (hyphen). Maximum size is 256 characters.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * An ordered list of policy overrides to apply to the policy. The ordering of the overrides is important as it determines
     * the priority of the policy override during policy evaluation.
     */
    public readonly overrides!: pulumi.Output<outputs.RiskPolicyOverride[] | undefined>;
    /**
     * An object that describes settings for a risk policy calculated by aggregating score values, with a final result being
     * the sum of score values from each of the configured predictors. Exactly one of the following must be defined:
     * `policy_weights`, `policy_scores`.
     */
    public readonly policyScores!: pulumi.Output<outputs.RiskPolicyPolicyScores | undefined>;
    /**
     * An object that describes settings for a risk policy using a weighted average calculation, with a final result being a
     * risk score between `0` and `10`. Exactly one of the following must be defined: `policy_weights`, `policy_scores`.
     */
    public readonly policyWeights!: pulumi.Output<outputs.RiskPolicyPolicyWeights | undefined>;

    /**
     * Create a RiskPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RiskPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RiskPolicyArgs | RiskPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RiskPolicyState | undefined;
            resourceInputs["default"] = state ? state.default : undefined;
            resourceInputs["defaultResult"] = state ? state.defaultResult : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["evaluatedPredictors"] = state ? state.evaluatedPredictors : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["overrides"] = state ? state.overrides : undefined;
            resourceInputs["policyScores"] = state ? state.policyScores : undefined;
            resourceInputs["policyWeights"] = state ? state.policyWeights : undefined;
        } else {
            const args = argsOrState as RiskPolicyArgs | undefined;
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            resourceInputs["defaultResult"] = args ? args.defaultResult : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["evaluatedPredictors"] = args ? args.evaluatedPredictors : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["overrides"] = args ? args.overrides : undefined;
            resourceInputs["policyScores"] = args ? args.policyScores : undefined;
            resourceInputs["policyWeights"] = args ? args.policyWeights : undefined;
            resourceInputs["default"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RiskPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RiskPolicy resources.
 */
export interface RiskPolicyState {
    /**
     * A boolean that indicates whether this risk policy set is the environment's default risk policy set. This is used
     * whenever an explicit policy set ID is not specified in a risk evaluation request.
     */
    default?: pulumi.Input<boolean>;
    /**
     * A single nested object that specifies the default result value for the risk policy.
     */
    defaultResult?: pulumi.Input<inputs.RiskPolicyDefaultResult>;
    /**
     * The ID of the environment to configure the risk policy in. Must be a valid PingOne resource ID. This field is immutable
     * and will trigger a replace plan if changed.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * A set of IDs for the predictors to evaluate in this policy set. If omitted, if this property is null, all of the
     * licensed predictors are used.
     */
    evaluatedPredictors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A string that specifies the unique, friendly name for this policy set. Valid characters consist of any Unicode letter,
     * mark (such as, accent, umlaut), # (numeric), / (forward slash), . (period), ' (apostrophe), _ (underscore), space, or -
     * (hyphen). Maximum size is 256 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * An ordered list of policy overrides to apply to the policy. The ordering of the overrides is important as it determines
     * the priority of the policy override during policy evaluation.
     */
    overrides?: pulumi.Input<pulumi.Input<inputs.RiskPolicyOverride>[]>;
    /**
     * An object that describes settings for a risk policy calculated by aggregating score values, with a final result being
     * the sum of score values from each of the configured predictors. Exactly one of the following must be defined:
     * `policy_weights`, `policy_scores`.
     */
    policyScores?: pulumi.Input<inputs.RiskPolicyPolicyScores>;
    /**
     * An object that describes settings for a risk policy using a weighted average calculation, with a final result being a
     * risk score between `0` and `10`. Exactly one of the following must be defined: `policy_weights`, `policy_scores`.
     */
    policyWeights?: pulumi.Input<inputs.RiskPolicyPolicyWeights>;
}

/**
 * The set of arguments for constructing a RiskPolicy resource.
 */
export interface RiskPolicyArgs {
    /**
     * A single nested object that specifies the default result value for the risk policy.
     */
    defaultResult?: pulumi.Input<inputs.RiskPolicyDefaultResult>;
    /**
     * The ID of the environment to configure the risk policy in. Must be a valid PingOne resource ID. This field is immutable
     * and will trigger a replace plan if changed.
     */
    environmentId: pulumi.Input<string>;
    /**
     * A set of IDs for the predictors to evaluate in this policy set. If omitted, if this property is null, all of the
     * licensed predictors are used.
     */
    evaluatedPredictors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A string that specifies the unique, friendly name for this policy set. Valid characters consist of any Unicode letter,
     * mark (such as, accent, umlaut), # (numeric), / (forward slash), . (period), ' (apostrophe), _ (underscore), space, or -
     * (hyphen). Maximum size is 256 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * An ordered list of policy overrides to apply to the policy. The ordering of the overrides is important as it determines
     * the priority of the policy override during policy evaluation.
     */
    overrides?: pulumi.Input<pulumi.Input<inputs.RiskPolicyOverride>[]>;
    /**
     * An object that describes settings for a risk policy calculated by aggregating score values, with a final result being
     * the sum of score values from each of the configured predictors. Exactly one of the following must be defined:
     * `policy_weights`, `policy_scores`.
     */
    policyScores?: pulumi.Input<inputs.RiskPolicyPolicyScores>;
    /**
     * An object that describes settings for a risk policy using a weighted average calculation, with a final result being a
     * risk score between `0` and `10`. Exactly one of the following must be defined: `policy_weights`, `policy_scores`.
     */
    policyWeights?: pulumi.Input<inputs.RiskPolicyPolicyWeights>;
}
