// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MfaFido2Policy extends pulumi.CustomResource {
    /**
     * Get an existing MfaFido2Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MfaFido2PolicyState, opts?: pulumi.CustomResourceOptions): MfaFido2Policy {
        return new MfaFido2Policy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingone:index/mfaFido2Policy:MfaFido2Policy';

    /**
     * Returns true if the given object is an instance of MfaFido2Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MfaFido2Policy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MfaFido2Policy.__pulumiType;
    }

    /**
     * A string that specifies the level of attestation to apply. Options are `DIRECT` (perform attestation), `NONE` (don't
     * perform attestation). If `NONE` is specified, the `mds_authentication_requirements.option` parameter should also be set
     * to `NONE`.
     */
    public readonly attestationRequirements!: pulumi.Output<string>;
    /**
     * A string that specifies the types of authenticators that are allowed. Options are `BOTH` (allow both categories of
     * authenticators), `CROSS_PLATFORM` (allow use of cross-platform authenticators, which are external to the accessing
     * device (such as a security key)), `PLATFORM` (only allow the use of FIDO device authenticators that contain an internal
     * authenticator (such as a face or fingerprint scanner)).
     */
    public readonly authenticatorAttachment!: pulumi.Output<string>;
    /**
     * A single nested object that contains settings used to control whether users should be allowed to register and
     * authenticate with a device that uses cloud-synced credentials, such as a passkey.
     */
    public readonly backupEligibility!: pulumi.Output<outputs.MfaFido2PolicyBackupEligibility>;
    /**
     * A boolean that describes whether this policy should serve as the default FIDO policy.
     */
    public /*out*/ readonly default!: pulumi.Output<boolean>;
    /**
     * A string that specifies the description of the FIDO2 policy.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name to display for the device in registration and authentication windows. Can be up to 100 characters. If you want
     * to use translatable text (configured for each language under **Languages** in the Admin Console), you can use any of the
     * keys listed on the `FIDO Policy` page of the `Self-Service` module and the `Sign On Policy` module. The value of the
     * parameter should include only the part of the key name that comes after the module name, for example,
     * `fidoPolicy.deviceDisplayName01` or `fidoPolicy.deviceDisplayName07`. See each language under the **Languages** section
     * of the admin console UI for the full list of keys. For more information on translatable keys, see [Modifying
     * translatable
     * keys](https://docs.pingidentity.com/access/sources/dita/topic?category=p1&resourceid=pingone_modifying_translatable_keys)
     * in the PingOne documentation.
     */
    public readonly deviceDisplayName!: pulumi.Output<string>;
    /**
     * A string that specifies the behaviour when registered users are authenticating without providing credentials. Options
     * are `DISCOURAGED` (discoverable credentials are not used, even when supported by the FIDO device. In cases where use of
     * discoverable credentials is required by the FIDO device itself, this setting does not override the device setting),
     * `PREFERRED` (use discoverable credentials where possible), `REQUIRED` (require the use of discoverable credentials. This
     * option is required for usernameless authentication).
     */
    public readonly discoverableCredentials!: pulumi.Output<string>;
    /**
     * The ID of the environment to configure the FIDO2 policy in. Must be a valid PingOne resource ID. This field is immutable
     * and will trigger a replace plan if changed.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * A single nested object that specifies MDS authenticator requirements, used to specify whether attestation is requested
     * from the authenticator, and whether this information is used to restrict authenticator usage.
     */
    public readonly mdsAuthenticatorsRequirements!: pulumi.Output<outputs.MfaFido2PolicyMdsAuthenticatorsRequirements>;
    /**
     * A string that specifies the unique, friendly name for this FIDO2 policy.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the relying party. The value should be a domain name, such as `bxretail.org` (in lower-case characters).
     */
    public readonly relyingPartyId!: pulumi.Output<string>;
    /**
     * A single nested object that specifies the string associated with the users's account that is displayed during
     * registration and authentication.
     */
    public readonly userDisplayNameAttributes!: pulumi.Output<outputs.MfaFido2PolicyUserDisplayNameAttributes>;
    /**
     * A single nested object that specifies user verification settings, used to control whether the user must perform a
     * gesture (such as a public key credential, fingerprint scan, or a PIN code) when registering or authenticating with their
     * FIDO device.
     */
    public readonly userVerification!: pulumi.Output<outputs.MfaFido2PolicyUserVerification>;

    /**
     * Create a MfaFido2Policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MfaFido2PolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MfaFido2PolicyArgs | MfaFido2PolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MfaFido2PolicyState | undefined;
            resourceInputs["attestationRequirements"] = state ? state.attestationRequirements : undefined;
            resourceInputs["authenticatorAttachment"] = state ? state.authenticatorAttachment : undefined;
            resourceInputs["backupEligibility"] = state ? state.backupEligibility : undefined;
            resourceInputs["default"] = state ? state.default : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceDisplayName"] = state ? state.deviceDisplayName : undefined;
            resourceInputs["discoverableCredentials"] = state ? state.discoverableCredentials : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["mdsAuthenticatorsRequirements"] = state ? state.mdsAuthenticatorsRequirements : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["relyingPartyId"] = state ? state.relyingPartyId : undefined;
            resourceInputs["userDisplayNameAttributes"] = state ? state.userDisplayNameAttributes : undefined;
            resourceInputs["userVerification"] = state ? state.userVerification : undefined;
        } else {
            const args = argsOrState as MfaFido2PolicyArgs | undefined;
            if ((!args || args.attestationRequirements === undefined) && !opts.urn) {
                throw new Error("Missing required property 'attestationRequirements'");
            }
            if ((!args || args.authenticatorAttachment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authenticatorAttachment'");
            }
            if ((!args || args.backupEligibility === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backupEligibility'");
            }
            if ((!args || args.deviceDisplayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deviceDisplayName'");
            }
            if ((!args || args.discoverableCredentials === undefined) && !opts.urn) {
                throw new Error("Missing required property 'discoverableCredentials'");
            }
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.mdsAuthenticatorsRequirements === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mdsAuthenticatorsRequirements'");
            }
            if ((!args || args.relyingPartyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'relyingPartyId'");
            }
            if ((!args || args.userDisplayNameAttributes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userDisplayNameAttributes'");
            }
            if ((!args || args.userVerification === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userVerification'");
            }
            resourceInputs["attestationRequirements"] = args ? args.attestationRequirements : undefined;
            resourceInputs["authenticatorAttachment"] = args ? args.authenticatorAttachment : undefined;
            resourceInputs["backupEligibility"] = args ? args.backupEligibility : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["deviceDisplayName"] = args ? args.deviceDisplayName : undefined;
            resourceInputs["discoverableCredentials"] = args ? args.discoverableCredentials : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["mdsAuthenticatorsRequirements"] = args ? args.mdsAuthenticatorsRequirements : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["relyingPartyId"] = args ? args.relyingPartyId : undefined;
            resourceInputs["userDisplayNameAttributes"] = args ? args.userDisplayNameAttributes : undefined;
            resourceInputs["userVerification"] = args ? args.userVerification : undefined;
            resourceInputs["default"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MfaFido2Policy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MfaFido2Policy resources.
 */
export interface MfaFido2PolicyState {
    /**
     * A string that specifies the level of attestation to apply. Options are `DIRECT` (perform attestation), `NONE` (don't
     * perform attestation). If `NONE` is specified, the `mds_authentication_requirements.option` parameter should also be set
     * to `NONE`.
     */
    attestationRequirements?: pulumi.Input<string>;
    /**
     * A string that specifies the types of authenticators that are allowed. Options are `BOTH` (allow both categories of
     * authenticators), `CROSS_PLATFORM` (allow use of cross-platform authenticators, which are external to the accessing
     * device (such as a security key)), `PLATFORM` (only allow the use of FIDO device authenticators that contain an internal
     * authenticator (such as a face or fingerprint scanner)).
     */
    authenticatorAttachment?: pulumi.Input<string>;
    /**
     * A single nested object that contains settings used to control whether users should be allowed to register and
     * authenticate with a device that uses cloud-synced credentials, such as a passkey.
     */
    backupEligibility?: pulumi.Input<inputs.MfaFido2PolicyBackupEligibility>;
    /**
     * A boolean that describes whether this policy should serve as the default FIDO policy.
     */
    default?: pulumi.Input<boolean>;
    /**
     * A string that specifies the description of the FIDO2 policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The name to display for the device in registration and authentication windows. Can be up to 100 characters. If you want
     * to use translatable text (configured for each language under **Languages** in the Admin Console), you can use any of the
     * keys listed on the `FIDO Policy` page of the `Self-Service` module and the `Sign On Policy` module. The value of the
     * parameter should include only the part of the key name that comes after the module name, for example,
     * `fidoPolicy.deviceDisplayName01` or `fidoPolicy.deviceDisplayName07`. See each language under the **Languages** section
     * of the admin console UI for the full list of keys. For more information on translatable keys, see [Modifying
     * translatable
     * keys](https://docs.pingidentity.com/access/sources/dita/topic?category=p1&resourceid=pingone_modifying_translatable_keys)
     * in the PingOne documentation.
     */
    deviceDisplayName?: pulumi.Input<string>;
    /**
     * A string that specifies the behaviour when registered users are authenticating without providing credentials. Options
     * are `DISCOURAGED` (discoverable credentials are not used, even when supported by the FIDO device. In cases where use of
     * discoverable credentials is required by the FIDO device itself, this setting does not override the device setting),
     * `PREFERRED` (use discoverable credentials where possible), `REQUIRED` (require the use of discoverable credentials. This
     * option is required for usernameless authentication).
     */
    discoverableCredentials?: pulumi.Input<string>;
    /**
     * The ID of the environment to configure the FIDO2 policy in. Must be a valid PingOne resource ID. This field is immutable
     * and will trigger a replace plan if changed.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * A single nested object that specifies MDS authenticator requirements, used to specify whether attestation is requested
     * from the authenticator, and whether this information is used to restrict authenticator usage.
     */
    mdsAuthenticatorsRequirements?: pulumi.Input<inputs.MfaFido2PolicyMdsAuthenticatorsRequirements>;
    /**
     * A string that specifies the unique, friendly name for this FIDO2 policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the relying party. The value should be a domain name, such as `bxretail.org` (in lower-case characters).
     */
    relyingPartyId?: pulumi.Input<string>;
    /**
     * A single nested object that specifies the string associated with the users's account that is displayed during
     * registration and authentication.
     */
    userDisplayNameAttributes?: pulumi.Input<inputs.MfaFido2PolicyUserDisplayNameAttributes>;
    /**
     * A single nested object that specifies user verification settings, used to control whether the user must perform a
     * gesture (such as a public key credential, fingerprint scan, or a PIN code) when registering or authenticating with their
     * FIDO device.
     */
    userVerification?: pulumi.Input<inputs.MfaFido2PolicyUserVerification>;
}

/**
 * The set of arguments for constructing a MfaFido2Policy resource.
 */
export interface MfaFido2PolicyArgs {
    /**
     * A string that specifies the level of attestation to apply. Options are `DIRECT` (perform attestation), `NONE` (don't
     * perform attestation). If `NONE` is specified, the `mds_authentication_requirements.option` parameter should also be set
     * to `NONE`.
     */
    attestationRequirements: pulumi.Input<string>;
    /**
     * A string that specifies the types of authenticators that are allowed. Options are `BOTH` (allow both categories of
     * authenticators), `CROSS_PLATFORM` (allow use of cross-platform authenticators, which are external to the accessing
     * device (such as a security key)), `PLATFORM` (only allow the use of FIDO device authenticators that contain an internal
     * authenticator (such as a face or fingerprint scanner)).
     */
    authenticatorAttachment: pulumi.Input<string>;
    /**
     * A single nested object that contains settings used to control whether users should be allowed to register and
     * authenticate with a device that uses cloud-synced credentials, such as a passkey.
     */
    backupEligibility: pulumi.Input<inputs.MfaFido2PolicyBackupEligibility>;
    /**
     * A string that specifies the description of the FIDO2 policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The name to display for the device in registration and authentication windows. Can be up to 100 characters. If you want
     * to use translatable text (configured for each language under **Languages** in the Admin Console), you can use any of the
     * keys listed on the `FIDO Policy` page of the `Self-Service` module and the `Sign On Policy` module. The value of the
     * parameter should include only the part of the key name that comes after the module name, for example,
     * `fidoPolicy.deviceDisplayName01` or `fidoPolicy.deviceDisplayName07`. See each language under the **Languages** section
     * of the admin console UI for the full list of keys. For more information on translatable keys, see [Modifying
     * translatable
     * keys](https://docs.pingidentity.com/access/sources/dita/topic?category=p1&resourceid=pingone_modifying_translatable_keys)
     * in the PingOne documentation.
     */
    deviceDisplayName: pulumi.Input<string>;
    /**
     * A string that specifies the behaviour when registered users are authenticating without providing credentials. Options
     * are `DISCOURAGED` (discoverable credentials are not used, even when supported by the FIDO device. In cases where use of
     * discoverable credentials is required by the FIDO device itself, this setting does not override the device setting),
     * `PREFERRED` (use discoverable credentials where possible), `REQUIRED` (require the use of discoverable credentials. This
     * option is required for usernameless authentication).
     */
    discoverableCredentials: pulumi.Input<string>;
    /**
     * The ID of the environment to configure the FIDO2 policy in. Must be a valid PingOne resource ID. This field is immutable
     * and will trigger a replace plan if changed.
     */
    environmentId: pulumi.Input<string>;
    /**
     * A single nested object that specifies MDS authenticator requirements, used to specify whether attestation is requested
     * from the authenticator, and whether this information is used to restrict authenticator usage.
     */
    mdsAuthenticatorsRequirements: pulumi.Input<inputs.MfaFido2PolicyMdsAuthenticatorsRequirements>;
    /**
     * A string that specifies the unique, friendly name for this FIDO2 policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the relying party. The value should be a domain name, such as `bxretail.org` (in lower-case characters).
     */
    relyingPartyId: pulumi.Input<string>;
    /**
     * A single nested object that specifies the string associated with the users's account that is displayed during
     * registration and authentication.
     */
    userDisplayNameAttributes: pulumi.Input<inputs.MfaFido2PolicyUserDisplayNameAttributes>;
    /**
     * A single nested object that specifies user verification settings, used to control whether the user must perform a
     * gesture (such as a public key credential, fingerprint scan, or a PIN code) when registering or authenticating with their
     * FIDO device.
     */
    userVerification: pulumi.Input<inputs.MfaFido2PolicyUserVerification>;
}
