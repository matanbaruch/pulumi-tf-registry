// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BrandingTheme extends pulumi.CustomResource {
    /**
     * Get an existing BrandingTheme resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BrandingThemeState, opts?: pulumi.CustomResourceOptions): BrandingTheme {
        return new BrandingTheme(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingone:index/brandingTheme:BrandingTheme';

    /**
     * Returns true if the given object is an instance of BrandingTheme.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BrandingTheme {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BrandingTheme.__pulumiType;
    }

    /**
     * The background color for the theme. It must be a valid hexadecimal color code. Exactly one of the following must be
     * defined: `background_image`, `background_color`, `use_default_background`.
     */
    public readonly backgroundColor!: pulumi.Output<string | undefined>;
    /**
     * A single object that specifies the HREF and ID for the background image. Exactly one of the following must be defined:
     * `background_image`, `background_color`, `use_default_background`.
     */
    public readonly backgroundImage!: pulumi.Output<outputs.BrandingThemeBackgroundImage | undefined>;
    /**
     * The body text color for the theme. It must be a valid hexadecimal color code.
     */
    public readonly bodyTextColor!: pulumi.Output<string>;
    /**
     * The button color for the theme. It must be a valid hexadecimal color code.
     */
    public readonly buttonColor!: pulumi.Output<string>;
    /**
     * The button text color for the branding theme. It must be a valid hexadecimal color code.
     */
    public readonly buttonTextColor!: pulumi.Output<string>;
    /**
     * The card color for the branding theme. It must be a valid hexadecimal color code.
     */
    public readonly cardColor!: pulumi.Output<string>;
    /**
     * Specifies whether this theme is the environment's default branding configuration.
     */
    public /*out*/ readonly default!: pulumi.Output<boolean>;
    /**
     * The ID of the environment to set branding settings for. Must be a valid PingOne resource ID. This field is immutable and
     * will trigger a replace plan if changed.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * The text to be displayed in the footer of the branding theme.
     */
    public readonly footerText!: pulumi.Output<string | undefined>;
    /**
     * The heading text color for the branding theme. It must be a valid hexadecimal color code.
     */
    public readonly headingTextColor!: pulumi.Output<string>;
    /**
     * The hyperlink text color for the branding theme. It must be a valid hexadecimal color code.
     */
    public readonly linkTextColor!: pulumi.Output<string>;
    /**
     * A single object that specifies the HREF and ID for the company logo, for this branding template. If not set, the
     * environment's default logo (set with the `pingone.BrandingSettings` resource) will be applied.
     */
    public readonly logo!: pulumi.Output<outputs.BrandingThemeLogo | undefined>;
    /**
     * A string that specifies the unique name of the branding theme.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The template name of the branding theme associated with the environment. Options are `default`, `focus`, `mural`,
     * `slate`, `split`.
     */
    public readonly template!: pulumi.Output<string>;
    /**
     * A boolean to specify that the background should be set to the theme template's default. Exactly one of the following
     * must be defined: `background_image`, `background_color`, `use_default_background`.
     */
    public readonly useDefaultBackground!: pulumi.Output<boolean>;

    /**
     * Create a BrandingTheme resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BrandingThemeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BrandingThemeArgs | BrandingThemeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BrandingThemeState | undefined;
            resourceInputs["backgroundColor"] = state ? state.backgroundColor : undefined;
            resourceInputs["backgroundImage"] = state ? state.backgroundImage : undefined;
            resourceInputs["bodyTextColor"] = state ? state.bodyTextColor : undefined;
            resourceInputs["buttonColor"] = state ? state.buttonColor : undefined;
            resourceInputs["buttonTextColor"] = state ? state.buttonTextColor : undefined;
            resourceInputs["cardColor"] = state ? state.cardColor : undefined;
            resourceInputs["default"] = state ? state.default : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["footerText"] = state ? state.footerText : undefined;
            resourceInputs["headingTextColor"] = state ? state.headingTextColor : undefined;
            resourceInputs["linkTextColor"] = state ? state.linkTextColor : undefined;
            resourceInputs["logo"] = state ? state.logo : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["useDefaultBackground"] = state ? state.useDefaultBackground : undefined;
        } else {
            const args = argsOrState as BrandingThemeArgs | undefined;
            if ((!args || args.bodyTextColor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bodyTextColor'");
            }
            if ((!args || args.buttonColor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'buttonColor'");
            }
            if ((!args || args.buttonTextColor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'buttonTextColor'");
            }
            if ((!args || args.cardColor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cardColor'");
            }
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.headingTextColor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'headingTextColor'");
            }
            if ((!args || args.linkTextColor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'linkTextColor'");
            }
            if ((!args || args.template === undefined) && !opts.urn) {
                throw new Error("Missing required property 'template'");
            }
            resourceInputs["backgroundColor"] = args ? args.backgroundColor : undefined;
            resourceInputs["backgroundImage"] = args ? args.backgroundImage : undefined;
            resourceInputs["bodyTextColor"] = args ? args.bodyTextColor : undefined;
            resourceInputs["buttonColor"] = args ? args.buttonColor : undefined;
            resourceInputs["buttonTextColor"] = args ? args.buttonTextColor : undefined;
            resourceInputs["cardColor"] = args ? args.cardColor : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["footerText"] = args ? args.footerText : undefined;
            resourceInputs["headingTextColor"] = args ? args.headingTextColor : undefined;
            resourceInputs["linkTextColor"] = args ? args.linkTextColor : undefined;
            resourceInputs["logo"] = args ? args.logo : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["useDefaultBackground"] = args ? args.useDefaultBackground : undefined;
            resourceInputs["default"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BrandingTheme.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BrandingTheme resources.
 */
export interface BrandingThemeState {
    /**
     * The background color for the theme. It must be a valid hexadecimal color code. Exactly one of the following must be
     * defined: `background_image`, `background_color`, `use_default_background`.
     */
    backgroundColor?: pulumi.Input<string>;
    /**
     * A single object that specifies the HREF and ID for the background image. Exactly one of the following must be defined:
     * `background_image`, `background_color`, `use_default_background`.
     */
    backgroundImage?: pulumi.Input<inputs.BrandingThemeBackgroundImage>;
    /**
     * The body text color for the theme. It must be a valid hexadecimal color code.
     */
    bodyTextColor?: pulumi.Input<string>;
    /**
     * The button color for the theme. It must be a valid hexadecimal color code.
     */
    buttonColor?: pulumi.Input<string>;
    /**
     * The button text color for the branding theme. It must be a valid hexadecimal color code.
     */
    buttonTextColor?: pulumi.Input<string>;
    /**
     * The card color for the branding theme. It must be a valid hexadecimal color code.
     */
    cardColor?: pulumi.Input<string>;
    /**
     * Specifies whether this theme is the environment's default branding configuration.
     */
    default?: pulumi.Input<boolean>;
    /**
     * The ID of the environment to set branding settings for. Must be a valid PingOne resource ID. This field is immutable and
     * will trigger a replace plan if changed.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * The text to be displayed in the footer of the branding theme.
     */
    footerText?: pulumi.Input<string>;
    /**
     * The heading text color for the branding theme. It must be a valid hexadecimal color code.
     */
    headingTextColor?: pulumi.Input<string>;
    /**
     * The hyperlink text color for the branding theme. It must be a valid hexadecimal color code.
     */
    linkTextColor?: pulumi.Input<string>;
    /**
     * A single object that specifies the HREF and ID for the company logo, for this branding template. If not set, the
     * environment's default logo (set with the `pingone.BrandingSettings` resource) will be applied.
     */
    logo?: pulumi.Input<inputs.BrandingThemeLogo>;
    /**
     * A string that specifies the unique name of the branding theme.
     */
    name?: pulumi.Input<string>;
    /**
     * The template name of the branding theme associated with the environment. Options are `default`, `focus`, `mural`,
     * `slate`, `split`.
     */
    template?: pulumi.Input<string>;
    /**
     * A boolean to specify that the background should be set to the theme template's default. Exactly one of the following
     * must be defined: `background_image`, `background_color`, `use_default_background`.
     */
    useDefaultBackground?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a BrandingTheme resource.
 */
export interface BrandingThemeArgs {
    /**
     * The background color for the theme. It must be a valid hexadecimal color code. Exactly one of the following must be
     * defined: `background_image`, `background_color`, `use_default_background`.
     */
    backgroundColor?: pulumi.Input<string>;
    /**
     * A single object that specifies the HREF and ID for the background image. Exactly one of the following must be defined:
     * `background_image`, `background_color`, `use_default_background`.
     */
    backgroundImage?: pulumi.Input<inputs.BrandingThemeBackgroundImage>;
    /**
     * The body text color for the theme. It must be a valid hexadecimal color code.
     */
    bodyTextColor: pulumi.Input<string>;
    /**
     * The button color for the theme. It must be a valid hexadecimal color code.
     */
    buttonColor: pulumi.Input<string>;
    /**
     * The button text color for the branding theme. It must be a valid hexadecimal color code.
     */
    buttonTextColor: pulumi.Input<string>;
    /**
     * The card color for the branding theme. It must be a valid hexadecimal color code.
     */
    cardColor: pulumi.Input<string>;
    /**
     * The ID of the environment to set branding settings for. Must be a valid PingOne resource ID. This field is immutable and
     * will trigger a replace plan if changed.
     */
    environmentId: pulumi.Input<string>;
    /**
     * The text to be displayed in the footer of the branding theme.
     */
    footerText?: pulumi.Input<string>;
    /**
     * The heading text color for the branding theme. It must be a valid hexadecimal color code.
     */
    headingTextColor: pulumi.Input<string>;
    /**
     * The hyperlink text color for the branding theme. It must be a valid hexadecimal color code.
     */
    linkTextColor: pulumi.Input<string>;
    /**
     * A single object that specifies the HREF and ID for the company logo, for this branding template. If not set, the
     * environment's default logo (set with the `pingone.BrandingSettings` resource) will be applied.
     */
    logo?: pulumi.Input<inputs.BrandingThemeLogo>;
    /**
     * A string that specifies the unique name of the branding theme.
     */
    name?: pulumi.Input<string>;
    /**
     * The template name of the branding theme associated with the environment. Options are `default`, `focus`, `mural`,
     * `slate`, `split`.
     */
    template: pulumi.Input<string>;
    /**
     * A boolean to specify that the background should be set to the theme template's default. Exactly one of the following
     * must be defined: `background_image`, `background_color`, `use_default_background`.
     */
    useDefaultBackground?: pulumi.Input<boolean>;
}
