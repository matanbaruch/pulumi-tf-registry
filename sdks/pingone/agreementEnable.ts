// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AgreementEnable extends pulumi.CustomResource {
    /**
     * Get an existing AgreementEnable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AgreementEnableState, opts?: pulumi.CustomResourceOptions): AgreementEnable {
        return new AgreementEnable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingone:index/agreementEnable:AgreementEnable';

    /**
     * Returns true if the given object is an instance of AgreementEnable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AgreementEnable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AgreementEnable.__pulumiType;
    }

    /**
     * The ID of the agreement to set the enabled status for. Must be a valid PingOne resource ID. This field is immutable and
     * will trigger a replace plan if changed.
     */
    public readonly agreementId!: pulumi.Output<string>;
    /**
     * A boolean that specifies the current enabled state of the agreement. The agreement must support the default language to
     * be enabled. It cannot be disabled if it is referenced by a sign-on policy action. When an agreement is disabled, it is
     * not used anywhere that it is configured across PingOne.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The ID of the environment configured with an agreement to enable/disable. Must be a valid PingOne resource ID. This
     * field is immutable and will trigger a replace plan if changed.
     */
    public readonly environmentId!: pulumi.Output<string>;

    /**
     * Create a AgreementEnable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AgreementEnableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AgreementEnableArgs | AgreementEnableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AgreementEnableState | undefined;
            resourceInputs["agreementId"] = state ? state.agreementId : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
        } else {
            const args = argsOrState as AgreementEnableArgs | undefined;
            if ((!args || args.agreementId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'agreementId'");
            }
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            resourceInputs["agreementId"] = args ? args.agreementId : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AgreementEnable.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AgreementEnable resources.
 */
export interface AgreementEnableState {
    /**
     * The ID of the agreement to set the enabled status for. Must be a valid PingOne resource ID. This field is immutable and
     * will trigger a replace plan if changed.
     */
    agreementId?: pulumi.Input<string>;
    /**
     * A boolean that specifies the current enabled state of the agreement. The agreement must support the default language to
     * be enabled. It cannot be disabled if it is referenced by a sign-on policy action. When an agreement is disabled, it is
     * not used anywhere that it is configured across PingOne.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The ID of the environment configured with an agreement to enable/disable. Must be a valid PingOne resource ID. This
     * field is immutable and will trigger a replace plan if changed.
     */
    environmentId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AgreementEnable resource.
 */
export interface AgreementEnableArgs {
    /**
     * The ID of the agreement to set the enabled status for. Must be a valid PingOne resource ID. This field is immutable and
     * will trigger a replace plan if changed.
     */
    agreementId: pulumi.Input<string>;
    /**
     * A boolean that specifies the current enabled state of the agreement. The agreement must support the default language to
     * be enabled. It cannot be disabled if it is referenced by a sign-on policy action. When an agreement is disabled, it is
     * not used anywhere that it is configured across PingOne.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The ID of the environment configured with an agreement to enable/disable. Must be a valid PingOne resource ID. This
     * field is immutable and will trigger a replace plan if changed.
     */
    environmentId: pulumi.Input<string>;
}
