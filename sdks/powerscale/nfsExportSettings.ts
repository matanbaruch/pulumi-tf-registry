// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NfsExportSettings extends pulumi.CustomResource {
    /**
     * Get an existing NfsExportSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NfsExportSettingsState, opts?: pulumi.CustomResourceOptions): NfsExportSettings {
        return new NfsExportSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerscale:index/nfsExportSettings:NfsExportSettings';

    /**
     * Returns true if the given object is an instance of NfsExportSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NfsExportSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NfsExportSettings.__pulumiType;
    }

    /**
     * True if all directories under the specified paths are mountable.
     */
    public readonly allDirs!: pulumi.Output<boolean>;
    /**
     * Specifies the block size returned by the NFS statfs procedure.
     */
    public readonly blockSize!: pulumi.Output<number>;
    /**
     * True if the client can set file times through the NFS set attribute request. This parameter does not affect server
     * behavior, but is included to accommodate legacy client requirements.
     */
    public readonly canSetTime!: pulumi.Output<boolean>;
    /**
     * True if the case is ignored for file names. This parameter does not affect server behavior, but is included to
     * accommodate legacy client requirements.
     */
    public readonly caseInsensitive!: pulumi.Output<boolean>;
    /**
     * True if the case is preserved for file names. This parameter does not affect server behavior, but is included to
     * accommodate legacy client requirements.
     */
    public readonly casePreserving!: pulumi.Output<boolean>;
    /**
     * True if the superuser can change file ownership. This parameter does not affect server behavior, but is included to
     * accommodate legacy client requirements.
     */
    public readonly chownRestricted!: pulumi.Output<boolean>;
    /**
     * True if NFS commit requests execute asynchronously.
     */
    public readonly commitAsynchronous!: pulumi.Output<boolean>;
    /**
     * Specifies the preferred size for directory read operations. This value is used to advise the client of optimal settings
     * for the server, but is not enforced.
     */
    public readonly directoryTransferSize!: pulumi.Output<number>;
    /**
     * Specifies the default character set encoding of the clients connecting to the export, unless otherwise specified.
     */
    public readonly encoding!: pulumi.Output<string>;
    /**
     * Specifies the reported maximum number of links to a file. This parameter does not affect server behavior, but is
     * included to accommodate legacy client requirements.
     */
    public readonly linkMax!: pulumi.Output<number>;
    /**
     * Specifies the users and groups to which non-root and root clients are mapped.
     */
    public readonly mapAll!: pulumi.Output<outputs.NfsExportSettingsMapAll>;
    /**
     * Specifies the users and groups to which non-root and root clients are mapped.
     */
    public readonly mapFailure!: pulumi.Output<outputs.NfsExportSettingsMapFailure>;
    /**
     * True if user mappings query the OneFS user database. When set to false, user mappings only query local authentication.
     */
    public readonly mapFull!: pulumi.Output<boolean>;
    /**
     * True if incoming user IDs (UIDs) are mapped to users in the OneFS user database. When set to false, incoming UIDs are
     * applied directly to file operations.
     */
    public readonly mapLookupUid!: pulumi.Output<boolean>;
    /**
     * Specifies the users and groups to which non-root and root clients are mapped.
     */
    public readonly mapNonRoot!: pulumi.Output<outputs.NfsExportSettingsMapNonRoot>;
    /**
     * Determines whether searches for users specified in 'map_all', 'map_root' or 'map_nonroot' are retried if the search
     * fails.
     */
    public readonly mapRetry!: pulumi.Output<boolean>;
    /**
     * Specifies the users and groups to which non-root and root clients are mapped.
     */
    public readonly mapRoot!: pulumi.Output<outputs.NfsExportSettingsMapRoot>;
    /**
     * Specifies the maximum file size for any file accessed from the export. This parameter does not affect server behavior,
     * but is included to accommodate legacy client requirements.
     */
    public readonly maxFileSize!: pulumi.Output<number>;
    /**
     * Specifies the reported maximum length of a file name. This parameter does not affect server behavior, but is included to
     * accommodate legacy client requirements.
     */
    public readonly nameMaxSize!: pulumi.Output<number>;
    /**
     * True if long file names result in an error. This parameter does not affect server behavior, but is included to
     * accommodate legacy client requirements.
     */
    public readonly noTruncate!: pulumi.Output<boolean>;
    /**
     * True if the export is set to read-only.
     */
    public readonly readOnly!: pulumi.Output<boolean>;
    /**
     * Specifies the maximum buffer size that clients should use on NFS read requests. This value is used to advise the client
     * of optimal settings for the server, but is not enforced.
     */
    public readonly readTransferMaxSize!: pulumi.Output<number>;
    /**
     * Specifies the preferred multiple size for NFS read requests. This value is used to advise the client of optimal settings
     * for the server, but is not enforced.
     */
    public readonly readTransferMultiple!: pulumi.Output<number>;
    /**
     * Specifies the preferred size for NFS read requests. This value is used to advise the client of optimal settings for the
     * server, but is not enforced.
     */
    public readonly readTransferSize!: pulumi.Output<number>;
    /**
     * True if 'readdirplus' requests are enabled. Enabling this property might improve network performance and is only
     * available for NFSv3.
     */
    public readonly readdirplus!: pulumi.Output<boolean>;
    /**
     * Sets the number of directory entries that are prefetched when a 'readdirplus' request is processed. (Deprecated.)
     */
    public readonly readdirplusPrefetch!: pulumi.Output<number>;
    /**
     * Limits the size of file identifiers returned by NFSv3+ to 32-bit values (may require remount).
     */
    public readonly return32bitFileIds!: pulumi.Output<boolean>;
    /**
     * Specifies the authentication types that are supported for this export.
     */
    public readonly securityFlavors!: pulumi.Output<string[]>;
    /**
     * True if set attribute operations execute asynchronously.
     */
    public readonly setattrAsynchronous!: pulumi.Output<boolean>;
    /**
     * Specifies the snapshot for all mounts. Use "-" to set to default value.
     */
    public readonly snapshot!: pulumi.Output<string>;
    /**
     * True if symlinks are supported. This value is used to advise the client of optimal settings for the server, but is not
     * enforced.
     */
    public readonly symlinks!: pulumi.Output<boolean>;
    /**
     * Specifies the resolution of all time values that are returned to the clients
     */
    public readonly timeDelta!: pulumi.Output<number>;
    /**
     * Specifies the action to be taken when an NFSv3+ datasync write is requested.
     */
    public readonly writeDatasyncAction!: pulumi.Output<string>;
    /**
     * Specifies the stability disposition returned when an NFSv3+ datasync write is processed.
     */
    public readonly writeDatasyncReply!: pulumi.Output<string>;
    /**
     * Specifies the action to be taken when an NFSv3+ filesync write is requested.
     */
    public readonly writeFilesyncAction!: pulumi.Output<string>;
    /**
     * Specifies the stability disposition returned when an NFSv3+ filesync write is processed.
     */
    public readonly writeFilesyncReply!: pulumi.Output<string>;
    /**
     * Specifies the maximum buffer size that clients should use on NFS write requests. This value is used to advise the client
     * of optimal settings for the server, but is not enforced.
     */
    public readonly writeTransferMaxSize!: pulumi.Output<number>;
    /**
     * Specifies the preferred multiple size for NFS write requests. This value is used to advise the client of optimal
     * settings for the server, but is not enforced.
     */
    public readonly writeTransferMultiple!: pulumi.Output<number>;
    /**
     * Specifies the preferred multiple size for NFS write requests. This value is used to advise the client of optimal
     * settings for the server, but is not enforced.
     */
    public readonly writeTransferSize!: pulumi.Output<number>;
    /**
     * Specifies the action to be taken when an NFSv3+ unstable write is requested.
     */
    public readonly writeUnstableAction!: pulumi.Output<string>;
    /**
     * Specifies the stability disposition returned when an NFSv3+ unstable write is processed.
     */
    public readonly writeUnstableReply!: pulumi.Output<string>;
    /**
     * Specifies the zone in which the export is valid.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a NfsExportSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NfsExportSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NfsExportSettingsArgs | NfsExportSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NfsExportSettingsState | undefined;
            resourceInputs["allDirs"] = state ? state.allDirs : undefined;
            resourceInputs["blockSize"] = state ? state.blockSize : undefined;
            resourceInputs["canSetTime"] = state ? state.canSetTime : undefined;
            resourceInputs["caseInsensitive"] = state ? state.caseInsensitive : undefined;
            resourceInputs["casePreserving"] = state ? state.casePreserving : undefined;
            resourceInputs["chownRestricted"] = state ? state.chownRestricted : undefined;
            resourceInputs["commitAsynchronous"] = state ? state.commitAsynchronous : undefined;
            resourceInputs["directoryTransferSize"] = state ? state.directoryTransferSize : undefined;
            resourceInputs["encoding"] = state ? state.encoding : undefined;
            resourceInputs["linkMax"] = state ? state.linkMax : undefined;
            resourceInputs["mapAll"] = state ? state.mapAll : undefined;
            resourceInputs["mapFailure"] = state ? state.mapFailure : undefined;
            resourceInputs["mapFull"] = state ? state.mapFull : undefined;
            resourceInputs["mapLookupUid"] = state ? state.mapLookupUid : undefined;
            resourceInputs["mapNonRoot"] = state ? state.mapNonRoot : undefined;
            resourceInputs["mapRetry"] = state ? state.mapRetry : undefined;
            resourceInputs["mapRoot"] = state ? state.mapRoot : undefined;
            resourceInputs["maxFileSize"] = state ? state.maxFileSize : undefined;
            resourceInputs["nameMaxSize"] = state ? state.nameMaxSize : undefined;
            resourceInputs["noTruncate"] = state ? state.noTruncate : undefined;
            resourceInputs["readOnly"] = state ? state.readOnly : undefined;
            resourceInputs["readTransferMaxSize"] = state ? state.readTransferMaxSize : undefined;
            resourceInputs["readTransferMultiple"] = state ? state.readTransferMultiple : undefined;
            resourceInputs["readTransferSize"] = state ? state.readTransferSize : undefined;
            resourceInputs["readdirplus"] = state ? state.readdirplus : undefined;
            resourceInputs["readdirplusPrefetch"] = state ? state.readdirplusPrefetch : undefined;
            resourceInputs["return32bitFileIds"] = state ? state.return32bitFileIds : undefined;
            resourceInputs["securityFlavors"] = state ? state.securityFlavors : undefined;
            resourceInputs["setattrAsynchronous"] = state ? state.setattrAsynchronous : undefined;
            resourceInputs["snapshot"] = state ? state.snapshot : undefined;
            resourceInputs["symlinks"] = state ? state.symlinks : undefined;
            resourceInputs["timeDelta"] = state ? state.timeDelta : undefined;
            resourceInputs["writeDatasyncAction"] = state ? state.writeDatasyncAction : undefined;
            resourceInputs["writeDatasyncReply"] = state ? state.writeDatasyncReply : undefined;
            resourceInputs["writeFilesyncAction"] = state ? state.writeFilesyncAction : undefined;
            resourceInputs["writeFilesyncReply"] = state ? state.writeFilesyncReply : undefined;
            resourceInputs["writeTransferMaxSize"] = state ? state.writeTransferMaxSize : undefined;
            resourceInputs["writeTransferMultiple"] = state ? state.writeTransferMultiple : undefined;
            resourceInputs["writeTransferSize"] = state ? state.writeTransferSize : undefined;
            resourceInputs["writeUnstableAction"] = state ? state.writeUnstableAction : undefined;
            resourceInputs["writeUnstableReply"] = state ? state.writeUnstableReply : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as NfsExportSettingsArgs | undefined;
            resourceInputs["allDirs"] = args ? args.allDirs : undefined;
            resourceInputs["blockSize"] = args ? args.blockSize : undefined;
            resourceInputs["canSetTime"] = args ? args.canSetTime : undefined;
            resourceInputs["caseInsensitive"] = args ? args.caseInsensitive : undefined;
            resourceInputs["casePreserving"] = args ? args.casePreserving : undefined;
            resourceInputs["chownRestricted"] = args ? args.chownRestricted : undefined;
            resourceInputs["commitAsynchronous"] = args ? args.commitAsynchronous : undefined;
            resourceInputs["directoryTransferSize"] = args ? args.directoryTransferSize : undefined;
            resourceInputs["encoding"] = args ? args.encoding : undefined;
            resourceInputs["linkMax"] = args ? args.linkMax : undefined;
            resourceInputs["mapAll"] = args ? args.mapAll : undefined;
            resourceInputs["mapFailure"] = args ? args.mapFailure : undefined;
            resourceInputs["mapFull"] = args ? args.mapFull : undefined;
            resourceInputs["mapLookupUid"] = args ? args.mapLookupUid : undefined;
            resourceInputs["mapNonRoot"] = args ? args.mapNonRoot : undefined;
            resourceInputs["mapRetry"] = args ? args.mapRetry : undefined;
            resourceInputs["mapRoot"] = args ? args.mapRoot : undefined;
            resourceInputs["maxFileSize"] = args ? args.maxFileSize : undefined;
            resourceInputs["nameMaxSize"] = args ? args.nameMaxSize : undefined;
            resourceInputs["noTruncate"] = args ? args.noTruncate : undefined;
            resourceInputs["readOnly"] = args ? args.readOnly : undefined;
            resourceInputs["readTransferMaxSize"] = args ? args.readTransferMaxSize : undefined;
            resourceInputs["readTransferMultiple"] = args ? args.readTransferMultiple : undefined;
            resourceInputs["readTransferSize"] = args ? args.readTransferSize : undefined;
            resourceInputs["readdirplus"] = args ? args.readdirplus : undefined;
            resourceInputs["readdirplusPrefetch"] = args ? args.readdirplusPrefetch : undefined;
            resourceInputs["return32bitFileIds"] = args ? args.return32bitFileIds : undefined;
            resourceInputs["securityFlavors"] = args ? args.securityFlavors : undefined;
            resourceInputs["setattrAsynchronous"] = args ? args.setattrAsynchronous : undefined;
            resourceInputs["snapshot"] = args ? args.snapshot : undefined;
            resourceInputs["symlinks"] = args ? args.symlinks : undefined;
            resourceInputs["timeDelta"] = args ? args.timeDelta : undefined;
            resourceInputs["writeDatasyncAction"] = args ? args.writeDatasyncAction : undefined;
            resourceInputs["writeDatasyncReply"] = args ? args.writeDatasyncReply : undefined;
            resourceInputs["writeFilesyncAction"] = args ? args.writeFilesyncAction : undefined;
            resourceInputs["writeFilesyncReply"] = args ? args.writeFilesyncReply : undefined;
            resourceInputs["writeTransferMaxSize"] = args ? args.writeTransferMaxSize : undefined;
            resourceInputs["writeTransferMultiple"] = args ? args.writeTransferMultiple : undefined;
            resourceInputs["writeTransferSize"] = args ? args.writeTransferSize : undefined;
            resourceInputs["writeUnstableAction"] = args ? args.writeUnstableAction : undefined;
            resourceInputs["writeUnstableReply"] = args ? args.writeUnstableReply : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NfsExportSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NfsExportSettings resources.
 */
export interface NfsExportSettingsState {
    /**
     * True if all directories under the specified paths are mountable.
     */
    allDirs?: pulumi.Input<boolean>;
    /**
     * Specifies the block size returned by the NFS statfs procedure.
     */
    blockSize?: pulumi.Input<number>;
    /**
     * True if the client can set file times through the NFS set attribute request. This parameter does not affect server
     * behavior, but is included to accommodate legacy client requirements.
     */
    canSetTime?: pulumi.Input<boolean>;
    /**
     * True if the case is ignored for file names. This parameter does not affect server behavior, but is included to
     * accommodate legacy client requirements.
     */
    caseInsensitive?: pulumi.Input<boolean>;
    /**
     * True if the case is preserved for file names. This parameter does not affect server behavior, but is included to
     * accommodate legacy client requirements.
     */
    casePreserving?: pulumi.Input<boolean>;
    /**
     * True if the superuser can change file ownership. This parameter does not affect server behavior, but is included to
     * accommodate legacy client requirements.
     */
    chownRestricted?: pulumi.Input<boolean>;
    /**
     * True if NFS commit requests execute asynchronously.
     */
    commitAsynchronous?: pulumi.Input<boolean>;
    /**
     * Specifies the preferred size for directory read operations. This value is used to advise the client of optimal settings
     * for the server, but is not enforced.
     */
    directoryTransferSize?: pulumi.Input<number>;
    /**
     * Specifies the default character set encoding of the clients connecting to the export, unless otherwise specified.
     */
    encoding?: pulumi.Input<string>;
    /**
     * Specifies the reported maximum number of links to a file. This parameter does not affect server behavior, but is
     * included to accommodate legacy client requirements.
     */
    linkMax?: pulumi.Input<number>;
    /**
     * Specifies the users and groups to which non-root and root clients are mapped.
     */
    mapAll?: pulumi.Input<inputs.NfsExportSettingsMapAll>;
    /**
     * Specifies the users and groups to which non-root and root clients are mapped.
     */
    mapFailure?: pulumi.Input<inputs.NfsExportSettingsMapFailure>;
    /**
     * True if user mappings query the OneFS user database. When set to false, user mappings only query local authentication.
     */
    mapFull?: pulumi.Input<boolean>;
    /**
     * True if incoming user IDs (UIDs) are mapped to users in the OneFS user database. When set to false, incoming UIDs are
     * applied directly to file operations.
     */
    mapLookupUid?: pulumi.Input<boolean>;
    /**
     * Specifies the users and groups to which non-root and root clients are mapped.
     */
    mapNonRoot?: pulumi.Input<inputs.NfsExportSettingsMapNonRoot>;
    /**
     * Determines whether searches for users specified in 'map_all', 'map_root' or 'map_nonroot' are retried if the search
     * fails.
     */
    mapRetry?: pulumi.Input<boolean>;
    /**
     * Specifies the users and groups to which non-root and root clients are mapped.
     */
    mapRoot?: pulumi.Input<inputs.NfsExportSettingsMapRoot>;
    /**
     * Specifies the maximum file size for any file accessed from the export. This parameter does not affect server behavior,
     * but is included to accommodate legacy client requirements.
     */
    maxFileSize?: pulumi.Input<number>;
    /**
     * Specifies the reported maximum length of a file name. This parameter does not affect server behavior, but is included to
     * accommodate legacy client requirements.
     */
    nameMaxSize?: pulumi.Input<number>;
    /**
     * True if long file names result in an error. This parameter does not affect server behavior, but is included to
     * accommodate legacy client requirements.
     */
    noTruncate?: pulumi.Input<boolean>;
    /**
     * True if the export is set to read-only.
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * Specifies the maximum buffer size that clients should use on NFS read requests. This value is used to advise the client
     * of optimal settings for the server, but is not enforced.
     */
    readTransferMaxSize?: pulumi.Input<number>;
    /**
     * Specifies the preferred multiple size for NFS read requests. This value is used to advise the client of optimal settings
     * for the server, but is not enforced.
     */
    readTransferMultiple?: pulumi.Input<number>;
    /**
     * Specifies the preferred size for NFS read requests. This value is used to advise the client of optimal settings for the
     * server, but is not enforced.
     */
    readTransferSize?: pulumi.Input<number>;
    /**
     * True if 'readdirplus' requests are enabled. Enabling this property might improve network performance and is only
     * available for NFSv3.
     */
    readdirplus?: pulumi.Input<boolean>;
    /**
     * Sets the number of directory entries that are prefetched when a 'readdirplus' request is processed. (Deprecated.)
     */
    readdirplusPrefetch?: pulumi.Input<number>;
    /**
     * Limits the size of file identifiers returned by NFSv3+ to 32-bit values (may require remount).
     */
    return32bitFileIds?: pulumi.Input<boolean>;
    /**
     * Specifies the authentication types that are supported for this export.
     */
    securityFlavors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * True if set attribute operations execute asynchronously.
     */
    setattrAsynchronous?: pulumi.Input<boolean>;
    /**
     * Specifies the snapshot for all mounts. Use "-" to set to default value.
     */
    snapshot?: pulumi.Input<string>;
    /**
     * True if symlinks are supported. This value is used to advise the client of optimal settings for the server, but is not
     * enforced.
     */
    symlinks?: pulumi.Input<boolean>;
    /**
     * Specifies the resolution of all time values that are returned to the clients
     */
    timeDelta?: pulumi.Input<number>;
    /**
     * Specifies the action to be taken when an NFSv3+ datasync write is requested.
     */
    writeDatasyncAction?: pulumi.Input<string>;
    /**
     * Specifies the stability disposition returned when an NFSv3+ datasync write is processed.
     */
    writeDatasyncReply?: pulumi.Input<string>;
    /**
     * Specifies the action to be taken when an NFSv3+ filesync write is requested.
     */
    writeFilesyncAction?: pulumi.Input<string>;
    /**
     * Specifies the stability disposition returned when an NFSv3+ filesync write is processed.
     */
    writeFilesyncReply?: pulumi.Input<string>;
    /**
     * Specifies the maximum buffer size that clients should use on NFS write requests. This value is used to advise the client
     * of optimal settings for the server, but is not enforced.
     */
    writeTransferMaxSize?: pulumi.Input<number>;
    /**
     * Specifies the preferred multiple size for NFS write requests. This value is used to advise the client of optimal
     * settings for the server, but is not enforced.
     */
    writeTransferMultiple?: pulumi.Input<number>;
    /**
     * Specifies the preferred multiple size for NFS write requests. This value is used to advise the client of optimal
     * settings for the server, but is not enforced.
     */
    writeTransferSize?: pulumi.Input<number>;
    /**
     * Specifies the action to be taken when an NFSv3+ unstable write is requested.
     */
    writeUnstableAction?: pulumi.Input<string>;
    /**
     * Specifies the stability disposition returned when an NFSv3+ unstable write is processed.
     */
    writeUnstableReply?: pulumi.Input<string>;
    /**
     * Specifies the zone in which the export is valid.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NfsExportSettings resource.
 */
export interface NfsExportSettingsArgs {
    /**
     * True if all directories under the specified paths are mountable.
     */
    allDirs?: pulumi.Input<boolean>;
    /**
     * Specifies the block size returned by the NFS statfs procedure.
     */
    blockSize?: pulumi.Input<number>;
    /**
     * True if the client can set file times through the NFS set attribute request. This parameter does not affect server
     * behavior, but is included to accommodate legacy client requirements.
     */
    canSetTime?: pulumi.Input<boolean>;
    /**
     * True if the case is ignored for file names. This parameter does not affect server behavior, but is included to
     * accommodate legacy client requirements.
     */
    caseInsensitive?: pulumi.Input<boolean>;
    /**
     * True if the case is preserved for file names. This parameter does not affect server behavior, but is included to
     * accommodate legacy client requirements.
     */
    casePreserving?: pulumi.Input<boolean>;
    /**
     * True if the superuser can change file ownership. This parameter does not affect server behavior, but is included to
     * accommodate legacy client requirements.
     */
    chownRestricted?: pulumi.Input<boolean>;
    /**
     * True if NFS commit requests execute asynchronously.
     */
    commitAsynchronous?: pulumi.Input<boolean>;
    /**
     * Specifies the preferred size for directory read operations. This value is used to advise the client of optimal settings
     * for the server, but is not enforced.
     */
    directoryTransferSize?: pulumi.Input<number>;
    /**
     * Specifies the default character set encoding of the clients connecting to the export, unless otherwise specified.
     */
    encoding?: pulumi.Input<string>;
    /**
     * Specifies the reported maximum number of links to a file. This parameter does not affect server behavior, but is
     * included to accommodate legacy client requirements.
     */
    linkMax?: pulumi.Input<number>;
    /**
     * Specifies the users and groups to which non-root and root clients are mapped.
     */
    mapAll?: pulumi.Input<inputs.NfsExportSettingsMapAll>;
    /**
     * Specifies the users and groups to which non-root and root clients are mapped.
     */
    mapFailure?: pulumi.Input<inputs.NfsExportSettingsMapFailure>;
    /**
     * True if user mappings query the OneFS user database. When set to false, user mappings only query local authentication.
     */
    mapFull?: pulumi.Input<boolean>;
    /**
     * True if incoming user IDs (UIDs) are mapped to users in the OneFS user database. When set to false, incoming UIDs are
     * applied directly to file operations.
     */
    mapLookupUid?: pulumi.Input<boolean>;
    /**
     * Specifies the users and groups to which non-root and root clients are mapped.
     */
    mapNonRoot?: pulumi.Input<inputs.NfsExportSettingsMapNonRoot>;
    /**
     * Determines whether searches for users specified in 'map_all', 'map_root' or 'map_nonroot' are retried if the search
     * fails.
     */
    mapRetry?: pulumi.Input<boolean>;
    /**
     * Specifies the users and groups to which non-root and root clients are mapped.
     */
    mapRoot?: pulumi.Input<inputs.NfsExportSettingsMapRoot>;
    /**
     * Specifies the maximum file size for any file accessed from the export. This parameter does not affect server behavior,
     * but is included to accommodate legacy client requirements.
     */
    maxFileSize?: pulumi.Input<number>;
    /**
     * Specifies the reported maximum length of a file name. This parameter does not affect server behavior, but is included to
     * accommodate legacy client requirements.
     */
    nameMaxSize?: pulumi.Input<number>;
    /**
     * True if long file names result in an error. This parameter does not affect server behavior, but is included to
     * accommodate legacy client requirements.
     */
    noTruncate?: pulumi.Input<boolean>;
    /**
     * True if the export is set to read-only.
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * Specifies the maximum buffer size that clients should use on NFS read requests. This value is used to advise the client
     * of optimal settings for the server, but is not enforced.
     */
    readTransferMaxSize?: pulumi.Input<number>;
    /**
     * Specifies the preferred multiple size for NFS read requests. This value is used to advise the client of optimal settings
     * for the server, but is not enforced.
     */
    readTransferMultiple?: pulumi.Input<number>;
    /**
     * Specifies the preferred size for NFS read requests. This value is used to advise the client of optimal settings for the
     * server, but is not enforced.
     */
    readTransferSize?: pulumi.Input<number>;
    /**
     * True if 'readdirplus' requests are enabled. Enabling this property might improve network performance and is only
     * available for NFSv3.
     */
    readdirplus?: pulumi.Input<boolean>;
    /**
     * Sets the number of directory entries that are prefetched when a 'readdirplus' request is processed. (Deprecated.)
     */
    readdirplusPrefetch?: pulumi.Input<number>;
    /**
     * Limits the size of file identifiers returned by NFSv3+ to 32-bit values (may require remount).
     */
    return32bitFileIds?: pulumi.Input<boolean>;
    /**
     * Specifies the authentication types that are supported for this export.
     */
    securityFlavors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * True if set attribute operations execute asynchronously.
     */
    setattrAsynchronous?: pulumi.Input<boolean>;
    /**
     * Specifies the snapshot for all mounts. Use "-" to set to default value.
     */
    snapshot?: pulumi.Input<string>;
    /**
     * True if symlinks are supported. This value is used to advise the client of optimal settings for the server, but is not
     * enforced.
     */
    symlinks?: pulumi.Input<boolean>;
    /**
     * Specifies the resolution of all time values that are returned to the clients
     */
    timeDelta?: pulumi.Input<number>;
    /**
     * Specifies the action to be taken when an NFSv3+ datasync write is requested.
     */
    writeDatasyncAction?: pulumi.Input<string>;
    /**
     * Specifies the stability disposition returned when an NFSv3+ datasync write is processed.
     */
    writeDatasyncReply?: pulumi.Input<string>;
    /**
     * Specifies the action to be taken when an NFSv3+ filesync write is requested.
     */
    writeFilesyncAction?: pulumi.Input<string>;
    /**
     * Specifies the stability disposition returned when an NFSv3+ filesync write is processed.
     */
    writeFilesyncReply?: pulumi.Input<string>;
    /**
     * Specifies the maximum buffer size that clients should use on NFS write requests. This value is used to advise the client
     * of optimal settings for the server, but is not enforced.
     */
    writeTransferMaxSize?: pulumi.Input<number>;
    /**
     * Specifies the preferred multiple size for NFS write requests. This value is used to advise the client of optimal
     * settings for the server, but is not enforced.
     */
    writeTransferMultiple?: pulumi.Input<number>;
    /**
     * Specifies the preferred multiple size for NFS write requests. This value is used to advise the client of optimal
     * settings for the server, but is not enforced.
     */
    writeTransferSize?: pulumi.Input<number>;
    /**
     * Specifies the action to be taken when an NFSv3+ unstable write is requested.
     */
    writeUnstableAction?: pulumi.Input<string>;
    /**
     * Specifies the stability disposition returned when an NFSv3+ unstable write is processed.
     */
    writeUnstableReply?: pulumi.Input<string>;
    /**
     * Specifies the zone in which the export is valid.
     */
    zone?: pulumi.Input<string>;
}
