// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class UserGroup extends pulumi.CustomResource {
    /**
     * Get an existing UserGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserGroupState, opts?: pulumi.CustomResourceOptions): UserGroup {
        return new UserGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerscale:index/userGroup:UserGroup';

    /**
     * Returns true if the given object is an instance of UserGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserGroup.__pulumiType;
    }

    /**
     * Specifies a principal name for the user group.
     */
    public /*out*/ readonly dn!: pulumi.Output<string>;
    /**
     * Specifies the DNS domain.
     */
    public /*out*/ readonly dnsDomain!: pulumi.Output<string>;
    /**
     * Specifies the domain that the object is part of.
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * If true, the GID was generated.
     */
    public /*out*/ readonly generatedGid!: pulumi.Output<boolean>;
    /**
     * Specifies a numeric user group identifier. (Update Supported)
     */
    public readonly gid!: pulumi.Output<number>;
    /**
     * Specifies list members of group within the group. (Update Supported)
     */
    public readonly groups!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies a user group name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the authentication provider that the object belongs to.
     */
    public /*out*/ readonly providerName!: pulumi.Output<string>;
    /**
     * If true, skip validation checks when creating user group. Need to be true, when changing group GID.
     */
    public readonly queryForce!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the provider type.
     */
    public readonly queryProvider!: pulumi.Output<string | undefined>;
    /**
     * Specifies the zone that the object belongs to.
     */
    public readonly queryZone!: pulumi.Output<string | undefined>;
    /**
     * List of roles, the user is assigned. (Update Supported)
     */
    public readonly roles!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies a user group name.
     */
    public /*out*/ readonly samAccountName!: pulumi.Output<string>;
    /**
     * Specifies a security identifier.
     */
    public readonly sid!: pulumi.Output<string>;
    /**
     * Specifies the object type.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Specifies list members of user within the group. (Update Supported)
     */
    public readonly users!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies list members of well_known within the group. (Update Supported)
     */
    public readonly wellKnowns!: pulumi.Output<string[] | undefined>;

    /**
     * Create a UserGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: UserGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserGroupArgs | UserGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserGroupState | undefined;
            resourceInputs["dn"] = state ? state.dn : undefined;
            resourceInputs["dnsDomain"] = state ? state.dnsDomain : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["generatedGid"] = state ? state.generatedGid : undefined;
            resourceInputs["gid"] = state ? state.gid : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["providerName"] = state ? state.providerName : undefined;
            resourceInputs["queryForce"] = state ? state.queryForce : undefined;
            resourceInputs["queryProvider"] = state ? state.queryProvider : undefined;
            resourceInputs["queryZone"] = state ? state.queryZone : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["samAccountName"] = state ? state.samAccountName : undefined;
            resourceInputs["sid"] = state ? state.sid : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
            resourceInputs["wellKnowns"] = state ? state.wellKnowns : undefined;
        } else {
            const args = argsOrState as UserGroupArgs | undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["gid"] = args ? args.gid : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["queryForce"] = args ? args.queryForce : undefined;
            resourceInputs["queryProvider"] = args ? args.queryProvider : undefined;
            resourceInputs["queryZone"] = args ? args.queryZone : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["sid"] = args ? args.sid : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
            resourceInputs["wellKnowns"] = args ? args.wellKnowns : undefined;
            resourceInputs["dn"] = undefined /*out*/;
            resourceInputs["dnsDomain"] = undefined /*out*/;
            resourceInputs["generatedGid"] = undefined /*out*/;
            resourceInputs["providerName"] = undefined /*out*/;
            resourceInputs["samAccountName"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering UserGroup resources.
 */
export interface UserGroupState {
    /**
     * Specifies a principal name for the user group.
     */
    dn?: pulumi.Input<string>;
    /**
     * Specifies the DNS domain.
     */
    dnsDomain?: pulumi.Input<string>;
    /**
     * Specifies the domain that the object is part of.
     */
    domain?: pulumi.Input<string>;
    /**
     * If true, the GID was generated.
     */
    generatedGid?: pulumi.Input<boolean>;
    /**
     * Specifies a numeric user group identifier. (Update Supported)
     */
    gid?: pulumi.Input<number>;
    /**
     * Specifies list members of group within the group. (Update Supported)
     */
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a user group name.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the authentication provider that the object belongs to.
     */
    providerName?: pulumi.Input<string>;
    /**
     * If true, skip validation checks when creating user group. Need to be true, when changing group GID.
     */
    queryForce?: pulumi.Input<boolean>;
    /**
     * Specifies the provider type.
     */
    queryProvider?: pulumi.Input<string>;
    /**
     * Specifies the zone that the object belongs to.
     */
    queryZone?: pulumi.Input<string>;
    /**
     * List of roles, the user is assigned. (Update Supported)
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a user group name.
     */
    samAccountName?: pulumi.Input<string>;
    /**
     * Specifies a security identifier.
     */
    sid?: pulumi.Input<string>;
    /**
     * Specifies the object type.
     */
    type?: pulumi.Input<string>;
    /**
     * Specifies list members of user within the group. (Update Supported)
     */
    users?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies list members of well_known within the group. (Update Supported)
     */
    wellKnowns?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a UserGroup resource.
 */
export interface UserGroupArgs {
    /**
     * Specifies the domain that the object is part of.
     */
    domain?: pulumi.Input<string>;
    /**
     * Specifies a numeric user group identifier. (Update Supported)
     */
    gid?: pulumi.Input<number>;
    /**
     * Specifies list members of group within the group. (Update Supported)
     */
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a user group name.
     */
    name?: pulumi.Input<string>;
    /**
     * If true, skip validation checks when creating user group. Need to be true, when changing group GID.
     */
    queryForce?: pulumi.Input<boolean>;
    /**
     * Specifies the provider type.
     */
    queryProvider?: pulumi.Input<string>;
    /**
     * Specifies the zone that the object belongs to.
     */
    queryZone?: pulumi.Input<string>;
    /**
     * List of roles, the user is assigned. (Update Supported)
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a security identifier.
     */
    sid?: pulumi.Input<string>;
    /**
     * Specifies list members of user within the group. (Update Supported)
     */
    users?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies list members of well_known within the group. (Update Supported)
     */
    wellKnowns?: pulumi.Input<pulumi.Input<string>[]>;
}
