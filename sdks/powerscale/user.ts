// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerscale:index/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * Specifies a principal name for the user.
     */
    public /*out*/ readonly dn!: pulumi.Output<string>;
    /**
     * Specifies the DNS domain.
     */
    public /*out*/ readonly dnsDomain!: pulumi.Output<string>;
    /**
     * Specifies the domain that the object is part of.
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * Specifies an email address. (Update Supported)
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * If true, the authenticated user is enabled. (Update Supported)
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * If true, the authenticated user has expired.
     */
    public /*out*/ readonly expired!: pulumi.Output<boolean>;
    /**
     * Specifies the Unix Epoch time at which the authenticated user will expire. (Update Supported)
     */
    public readonly expiry!: pulumi.Output<number>;
    /**
     * Specifies the GECOS value, which is usually the full name. (Update Supported)
     */
    public readonly gecos!: pulumi.Output<string>;
    /**
     * If true, the GID was generated.
     */
    public /*out*/ readonly generatedGid!: pulumi.Output<boolean>;
    /**
     * If true, the UID was generated.
     */
    public /*out*/ readonly generatedUid!: pulumi.Output<boolean>;
    /**
     * If true, the UPN was generated.
     */
    public /*out*/ readonly generatedUpn!: pulumi.Output<boolean>;
    /**
     * Specifies a group identifier.
     */
    public /*out*/ readonly gid!: pulumi.Output<outputs.UserGid>;
    /**
     * Specifies a home directory for the user. (Update Supported)
     */
    public readonly homeDirectory!: pulumi.Output<string>;
    /**
     * If true, indicates that the account is locked.
     */
    public /*out*/ readonly locked!: pulumi.Output<boolean>;
    /**
     * Specifies the maximum time in seconds allowed before the password expires.
     */
    public /*out*/ readonly maxPasswordAge!: pulumi.Output<number>;
    /**
     * Specifies a user name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Sets or Changes the password for the user. (Update Supported)
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * If true, the password has expired.
     */
    public /*out*/ readonly passwordExpired!: pulumi.Output<boolean>;
    /**
     * If true, the password is allowed to expire. (Update Supported)
     */
    public readonly passwordExpires!: pulumi.Output<boolean>;
    /**
     * Specifies the time in Unix Epoch seconds that the password will expire.
     */
    public /*out*/ readonly passwordExpiry!: pulumi.Output<number>;
    /**
     * Specifies the last time the password was set.
     */
    public /*out*/ readonly passwordLastSet!: pulumi.Output<number>;
    /**
     * Specifies the name of the primary group. (Update Supported)
     */
    public readonly primaryGroup!: pulumi.Output<string>;
    /**
     * Specifies the persona of the primary group.
     */
    public /*out*/ readonly primaryGroupSid!: pulumi.Output<outputs.UserPrimaryGroupSid>;
    /**
     * If true, Prompts the user to change their password at the next login. (Update Supported)
     */
    public readonly promptPasswordChange!: pulumi.Output<boolean>;
    /**
     * Specifies the authentication provider that the object belongs to.
     */
    public /*out*/ readonly providerName!: pulumi.Output<string>;
    /**
     * If true, skip validation checks when creating user. Need to be true, when changing user UID.
     */
    public readonly queryForce!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the provider type.
     */
    public readonly queryProvider!: pulumi.Output<string | undefined>;
    /**
     * Specifies the zone that the object belongs to.
     */
    public readonly queryZone!: pulumi.Output<string | undefined>;
    /**
     * List of roles, the user is assigned. (Update Supported)
     */
    public readonly roles!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies a user name.
     */
    public /*out*/ readonly samAccountName!: pulumi.Output<string>;
    /**
     * Specifies a path to the shell for the user. (Update Supported)
     */
    public readonly shell!: pulumi.Output<string>;
    /**
     * Specifies a security identifier.
     */
    public readonly sid!: pulumi.Output<string>;
    /**
     * Specifies the object type.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Specifies a numeric user identifier. (Update Supported)
     */
    public readonly uid!: pulumi.Output<number>;
    /**
     * If true, the user account should be unlocked. (Update Supported)
     */
    public readonly unlock!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies a principal name for the user.
     */
    public /*out*/ readonly upn!: pulumi.Output<string>;
    /**
     * Specifies whether the password for the user can be changed.
     */
    public /*out*/ readonly userCanChangePassword!: pulumi.Output<boolean>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["dn"] = state ? state.dn : undefined;
            resourceInputs["dnsDomain"] = state ? state.dnsDomain : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["expired"] = state ? state.expired : undefined;
            resourceInputs["expiry"] = state ? state.expiry : undefined;
            resourceInputs["gecos"] = state ? state.gecos : undefined;
            resourceInputs["generatedGid"] = state ? state.generatedGid : undefined;
            resourceInputs["generatedUid"] = state ? state.generatedUid : undefined;
            resourceInputs["generatedUpn"] = state ? state.generatedUpn : undefined;
            resourceInputs["gid"] = state ? state.gid : undefined;
            resourceInputs["homeDirectory"] = state ? state.homeDirectory : undefined;
            resourceInputs["locked"] = state ? state.locked : undefined;
            resourceInputs["maxPasswordAge"] = state ? state.maxPasswordAge : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["passwordExpired"] = state ? state.passwordExpired : undefined;
            resourceInputs["passwordExpires"] = state ? state.passwordExpires : undefined;
            resourceInputs["passwordExpiry"] = state ? state.passwordExpiry : undefined;
            resourceInputs["passwordLastSet"] = state ? state.passwordLastSet : undefined;
            resourceInputs["primaryGroup"] = state ? state.primaryGroup : undefined;
            resourceInputs["primaryGroupSid"] = state ? state.primaryGroupSid : undefined;
            resourceInputs["promptPasswordChange"] = state ? state.promptPasswordChange : undefined;
            resourceInputs["providerName"] = state ? state.providerName : undefined;
            resourceInputs["queryForce"] = state ? state.queryForce : undefined;
            resourceInputs["queryProvider"] = state ? state.queryProvider : undefined;
            resourceInputs["queryZone"] = state ? state.queryZone : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["samAccountName"] = state ? state.samAccountName : undefined;
            resourceInputs["shell"] = state ? state.shell : undefined;
            resourceInputs["sid"] = state ? state.sid : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["unlock"] = state ? state.unlock : undefined;
            resourceInputs["upn"] = state ? state.upn : undefined;
            resourceInputs["userCanChangePassword"] = state ? state.userCanChangePassword : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["expiry"] = args ? args.expiry : undefined;
            resourceInputs["gecos"] = args ? args.gecos : undefined;
            resourceInputs["homeDirectory"] = args ? args.homeDirectory : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["passwordExpires"] = args ? args.passwordExpires : undefined;
            resourceInputs["primaryGroup"] = args ? args.primaryGroup : undefined;
            resourceInputs["promptPasswordChange"] = args ? args.promptPasswordChange : undefined;
            resourceInputs["queryForce"] = args ? args.queryForce : undefined;
            resourceInputs["queryProvider"] = args ? args.queryProvider : undefined;
            resourceInputs["queryZone"] = args ? args.queryZone : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["shell"] = args ? args.shell : undefined;
            resourceInputs["sid"] = args ? args.sid : undefined;
            resourceInputs["uid"] = args ? args.uid : undefined;
            resourceInputs["unlock"] = args ? args.unlock : undefined;
            resourceInputs["dn"] = undefined /*out*/;
            resourceInputs["dnsDomain"] = undefined /*out*/;
            resourceInputs["expired"] = undefined /*out*/;
            resourceInputs["generatedGid"] = undefined /*out*/;
            resourceInputs["generatedUid"] = undefined /*out*/;
            resourceInputs["generatedUpn"] = undefined /*out*/;
            resourceInputs["gid"] = undefined /*out*/;
            resourceInputs["locked"] = undefined /*out*/;
            resourceInputs["maxPasswordAge"] = undefined /*out*/;
            resourceInputs["passwordExpired"] = undefined /*out*/;
            resourceInputs["passwordExpiry"] = undefined /*out*/;
            resourceInputs["passwordLastSet"] = undefined /*out*/;
            resourceInputs["primaryGroupSid"] = undefined /*out*/;
            resourceInputs["providerName"] = undefined /*out*/;
            resourceInputs["samAccountName"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["upn"] = undefined /*out*/;
            resourceInputs["userCanChangePassword"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(User.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    /**
     * Specifies a principal name for the user.
     */
    dn?: pulumi.Input<string>;
    /**
     * Specifies the DNS domain.
     */
    dnsDomain?: pulumi.Input<string>;
    /**
     * Specifies the domain that the object is part of.
     */
    domain?: pulumi.Input<string>;
    /**
     * Specifies an email address. (Update Supported)
     */
    email?: pulumi.Input<string>;
    /**
     * If true, the authenticated user is enabled. (Update Supported)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * If true, the authenticated user has expired.
     */
    expired?: pulumi.Input<boolean>;
    /**
     * Specifies the Unix Epoch time at which the authenticated user will expire. (Update Supported)
     */
    expiry?: pulumi.Input<number>;
    /**
     * Specifies the GECOS value, which is usually the full name. (Update Supported)
     */
    gecos?: pulumi.Input<string>;
    /**
     * If true, the GID was generated.
     */
    generatedGid?: pulumi.Input<boolean>;
    /**
     * If true, the UID was generated.
     */
    generatedUid?: pulumi.Input<boolean>;
    /**
     * If true, the UPN was generated.
     */
    generatedUpn?: pulumi.Input<boolean>;
    /**
     * Specifies a group identifier.
     */
    gid?: pulumi.Input<inputs.UserGid>;
    /**
     * Specifies a home directory for the user. (Update Supported)
     */
    homeDirectory?: pulumi.Input<string>;
    /**
     * If true, indicates that the account is locked.
     */
    locked?: pulumi.Input<boolean>;
    /**
     * Specifies the maximum time in seconds allowed before the password expires.
     */
    maxPasswordAge?: pulumi.Input<number>;
    /**
     * Specifies a user name.
     */
    name?: pulumi.Input<string>;
    /**
     * Sets or Changes the password for the user. (Update Supported)
     */
    password?: pulumi.Input<string>;
    /**
     * If true, the password has expired.
     */
    passwordExpired?: pulumi.Input<boolean>;
    /**
     * If true, the password is allowed to expire. (Update Supported)
     */
    passwordExpires?: pulumi.Input<boolean>;
    /**
     * Specifies the time in Unix Epoch seconds that the password will expire.
     */
    passwordExpiry?: pulumi.Input<number>;
    /**
     * Specifies the last time the password was set.
     */
    passwordLastSet?: pulumi.Input<number>;
    /**
     * Specifies the name of the primary group. (Update Supported)
     */
    primaryGroup?: pulumi.Input<string>;
    /**
     * Specifies the persona of the primary group.
     */
    primaryGroupSid?: pulumi.Input<inputs.UserPrimaryGroupSid>;
    /**
     * If true, Prompts the user to change their password at the next login. (Update Supported)
     */
    promptPasswordChange?: pulumi.Input<boolean>;
    /**
     * Specifies the authentication provider that the object belongs to.
     */
    providerName?: pulumi.Input<string>;
    /**
     * If true, skip validation checks when creating user. Need to be true, when changing user UID.
     */
    queryForce?: pulumi.Input<boolean>;
    /**
     * Specifies the provider type.
     */
    queryProvider?: pulumi.Input<string>;
    /**
     * Specifies the zone that the object belongs to.
     */
    queryZone?: pulumi.Input<string>;
    /**
     * List of roles, the user is assigned. (Update Supported)
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a user name.
     */
    samAccountName?: pulumi.Input<string>;
    /**
     * Specifies a path to the shell for the user. (Update Supported)
     */
    shell?: pulumi.Input<string>;
    /**
     * Specifies a security identifier.
     */
    sid?: pulumi.Input<string>;
    /**
     * Specifies the object type.
     */
    type?: pulumi.Input<string>;
    /**
     * Specifies a numeric user identifier. (Update Supported)
     */
    uid?: pulumi.Input<number>;
    /**
     * If true, the user account should be unlocked. (Update Supported)
     */
    unlock?: pulumi.Input<boolean>;
    /**
     * Specifies a principal name for the user.
     */
    upn?: pulumi.Input<string>;
    /**
     * Specifies whether the password for the user can be changed.
     */
    userCanChangePassword?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * Specifies the domain that the object is part of.
     */
    domain?: pulumi.Input<string>;
    /**
     * Specifies an email address. (Update Supported)
     */
    email?: pulumi.Input<string>;
    /**
     * If true, the authenticated user is enabled. (Update Supported)
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specifies the Unix Epoch time at which the authenticated user will expire. (Update Supported)
     */
    expiry?: pulumi.Input<number>;
    /**
     * Specifies the GECOS value, which is usually the full name. (Update Supported)
     */
    gecos?: pulumi.Input<string>;
    /**
     * Specifies a home directory for the user. (Update Supported)
     */
    homeDirectory?: pulumi.Input<string>;
    /**
     * Specifies a user name.
     */
    name?: pulumi.Input<string>;
    /**
     * Sets or Changes the password for the user. (Update Supported)
     */
    password?: pulumi.Input<string>;
    /**
     * If true, the password is allowed to expire. (Update Supported)
     */
    passwordExpires?: pulumi.Input<boolean>;
    /**
     * Specifies the name of the primary group. (Update Supported)
     */
    primaryGroup?: pulumi.Input<string>;
    /**
     * If true, Prompts the user to change their password at the next login. (Update Supported)
     */
    promptPasswordChange?: pulumi.Input<boolean>;
    /**
     * If true, skip validation checks when creating user. Need to be true, when changing user UID.
     */
    queryForce?: pulumi.Input<boolean>;
    /**
     * Specifies the provider type.
     */
    queryProvider?: pulumi.Input<string>;
    /**
     * Specifies the zone that the object belongs to.
     */
    queryZone?: pulumi.Input<string>;
    /**
     * List of roles, the user is assigned. (Update Supported)
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a path to the shell for the user. (Update Supported)
     */
    shell?: pulumi.Input<string>;
    /**
     * Specifies a security identifier.
     */
    sid?: pulumi.Input<string>;
    /**
     * Specifies a numeric user identifier. (Update Supported)
     */
    uid?: pulumi.Input<number>;
    /**
     * If true, the user account should be unlocked. (Update Supported)
     */
    unlock?: pulumi.Input<boolean>;
}
