// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SmbServerSettings extends pulumi.CustomResource {
    /**
     * Get an existing SmbServerSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SmbServerSettingsState, opts?: pulumi.CustomResourceOptions): SmbServerSettings {
        return new SmbServerSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerscale:index/smbServerSettings:SmbServerSettings';

    /**
     * Returns true if the given object is an instance of SmbServerSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SmbServerSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SmbServerSettings.__pulumiType;
    }

    /**
     * Only enumerate files and folders the requesting user has access to.
     */
    public readonly accessBasedShareEnum!: pulumi.Output<boolean>;
    /**
     * Specify level of file share audit events to log.
     */
    public readonly auditFileshare!: pulumi.Output<string>;
    /**
     * Specify the level of logon audit events to log.
     */
    public readonly auditLogon!: pulumi.Output<string>;
    /**
     * Allow access to .snapshot directories in share subdirectories.
     */
    public readonly dotSnapAccessibleChild!: pulumi.Output<boolean>;
    /**
     * Allow access to the .snapshot directory in the root of the share.
     */
    public readonly dotSnapAccessibleRoot!: pulumi.Output<boolean>;
    /**
     * Show .snapshot directories in share subdirectories.
     */
    public readonly dotSnapVisibleChild!: pulumi.Output<boolean>;
    /**
     * Show the .snapshot directory in the root of a share.
     */
    public readonly dotSnapVisibleRoot!: pulumi.Output<boolean>;
    /**
     * Indicates whether the server supports signed SMB packets.
     */
    public readonly enableSecuritySignatures!: pulumi.Output<boolean>;
    /**
     * Specifies the fully-qualified user to use for guest access.
     */
    public readonly guestUser!: pulumi.Output<string>;
    /**
     * Specify whether to ignore EAs on files.
     */
    public readonly ignoreEas!: pulumi.Output<boolean>;
    /**
     * Specify the number of OneFS driver worker threads per CPU.
     */
    public readonly onefsCpuMultiplier!: pulumi.Output<number>;
    /**
     * Set the maximum number of OneFS driver worker threads.
     */
    public readonly onefsNumWorkers!: pulumi.Output<number>;
    /**
     * If SMB3 encryption is enabled, reject unencrypted access from clients.
     */
    public readonly rejectUnencryptedAccess!: pulumi.Output<boolean>;
    /**
     * Indicates whether the server requires signed SMB packets.
     */
    public readonly requireSecuritySignatures!: pulumi.Output<boolean>;
    /**
     * If specified as "effective" or not specified, all fields are returned. If specified as "user", only fields with
     * non-default values are shown. If specified as "default", the original values are returned.
     */
    public readonly scope!: pulumi.Output<string>;
    /**
     * Enable Server Side Copy.
     */
    public readonly serverSideCopy!: pulumi.Output<boolean>;
    /**
     * Provides a description of the server.
     */
    public readonly serverString!: pulumi.Output<string>;
    /**
     * Specify whether service is enabled.
     */
    public readonly service!: pulumi.Output<boolean>;
    /**
     * Specify the number of SRV service worker threads per CPU.
     */
    public readonly srvCpuMultiplier!: pulumi.Output<number>;
    /**
     * Set the maximum number of SRV service worker threads.
     */
    public readonly srvNumWorkers!: pulumi.Output<number>;
    /**
     * Support multichannel.
     */
    public readonly supportMultichannel!: pulumi.Output<boolean>;
    /**
     * Support NetBIOS.
     */
    public readonly supportNetbios!: pulumi.Output<boolean>;
    /**
     * Support the SMB2 protocol on the server.
     */
    public readonly supportSmb2!: pulumi.Output<boolean>;
    /**
     * Support the SMB3 encryption on the server.
     */
    public readonly supportSmb3Encryption!: pulumi.Output<boolean>;

    /**
     * Create a SmbServerSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SmbServerSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SmbServerSettingsArgs | SmbServerSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SmbServerSettingsState | undefined;
            resourceInputs["accessBasedShareEnum"] = state ? state.accessBasedShareEnum : undefined;
            resourceInputs["auditFileshare"] = state ? state.auditFileshare : undefined;
            resourceInputs["auditLogon"] = state ? state.auditLogon : undefined;
            resourceInputs["dotSnapAccessibleChild"] = state ? state.dotSnapAccessibleChild : undefined;
            resourceInputs["dotSnapAccessibleRoot"] = state ? state.dotSnapAccessibleRoot : undefined;
            resourceInputs["dotSnapVisibleChild"] = state ? state.dotSnapVisibleChild : undefined;
            resourceInputs["dotSnapVisibleRoot"] = state ? state.dotSnapVisibleRoot : undefined;
            resourceInputs["enableSecuritySignatures"] = state ? state.enableSecuritySignatures : undefined;
            resourceInputs["guestUser"] = state ? state.guestUser : undefined;
            resourceInputs["ignoreEas"] = state ? state.ignoreEas : undefined;
            resourceInputs["onefsCpuMultiplier"] = state ? state.onefsCpuMultiplier : undefined;
            resourceInputs["onefsNumWorkers"] = state ? state.onefsNumWorkers : undefined;
            resourceInputs["rejectUnencryptedAccess"] = state ? state.rejectUnencryptedAccess : undefined;
            resourceInputs["requireSecuritySignatures"] = state ? state.requireSecuritySignatures : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["serverSideCopy"] = state ? state.serverSideCopy : undefined;
            resourceInputs["serverString"] = state ? state.serverString : undefined;
            resourceInputs["service"] = state ? state.service : undefined;
            resourceInputs["srvCpuMultiplier"] = state ? state.srvCpuMultiplier : undefined;
            resourceInputs["srvNumWorkers"] = state ? state.srvNumWorkers : undefined;
            resourceInputs["supportMultichannel"] = state ? state.supportMultichannel : undefined;
            resourceInputs["supportNetbios"] = state ? state.supportNetbios : undefined;
            resourceInputs["supportSmb2"] = state ? state.supportSmb2 : undefined;
            resourceInputs["supportSmb3Encryption"] = state ? state.supportSmb3Encryption : undefined;
        } else {
            const args = argsOrState as SmbServerSettingsArgs | undefined;
            resourceInputs["accessBasedShareEnum"] = args ? args.accessBasedShareEnum : undefined;
            resourceInputs["auditFileshare"] = args ? args.auditFileshare : undefined;
            resourceInputs["auditLogon"] = args ? args.auditLogon : undefined;
            resourceInputs["dotSnapAccessibleChild"] = args ? args.dotSnapAccessibleChild : undefined;
            resourceInputs["dotSnapAccessibleRoot"] = args ? args.dotSnapAccessibleRoot : undefined;
            resourceInputs["dotSnapVisibleChild"] = args ? args.dotSnapVisibleChild : undefined;
            resourceInputs["dotSnapVisibleRoot"] = args ? args.dotSnapVisibleRoot : undefined;
            resourceInputs["enableSecuritySignatures"] = args ? args.enableSecuritySignatures : undefined;
            resourceInputs["guestUser"] = args ? args.guestUser : undefined;
            resourceInputs["ignoreEas"] = args ? args.ignoreEas : undefined;
            resourceInputs["onefsCpuMultiplier"] = args ? args.onefsCpuMultiplier : undefined;
            resourceInputs["onefsNumWorkers"] = args ? args.onefsNumWorkers : undefined;
            resourceInputs["rejectUnencryptedAccess"] = args ? args.rejectUnencryptedAccess : undefined;
            resourceInputs["requireSecuritySignatures"] = args ? args.requireSecuritySignatures : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["serverSideCopy"] = args ? args.serverSideCopy : undefined;
            resourceInputs["serverString"] = args ? args.serverString : undefined;
            resourceInputs["service"] = args ? args.service : undefined;
            resourceInputs["srvCpuMultiplier"] = args ? args.srvCpuMultiplier : undefined;
            resourceInputs["srvNumWorkers"] = args ? args.srvNumWorkers : undefined;
            resourceInputs["supportMultichannel"] = args ? args.supportMultichannel : undefined;
            resourceInputs["supportNetbios"] = args ? args.supportNetbios : undefined;
            resourceInputs["supportSmb2"] = args ? args.supportSmb2 : undefined;
            resourceInputs["supportSmb3Encryption"] = args ? args.supportSmb3Encryption : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SmbServerSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SmbServerSettings resources.
 */
export interface SmbServerSettingsState {
    /**
     * Only enumerate files and folders the requesting user has access to.
     */
    accessBasedShareEnum?: pulumi.Input<boolean>;
    /**
     * Specify level of file share audit events to log.
     */
    auditFileshare?: pulumi.Input<string>;
    /**
     * Specify the level of logon audit events to log.
     */
    auditLogon?: pulumi.Input<string>;
    /**
     * Allow access to .snapshot directories in share subdirectories.
     */
    dotSnapAccessibleChild?: pulumi.Input<boolean>;
    /**
     * Allow access to the .snapshot directory in the root of the share.
     */
    dotSnapAccessibleRoot?: pulumi.Input<boolean>;
    /**
     * Show .snapshot directories in share subdirectories.
     */
    dotSnapVisibleChild?: pulumi.Input<boolean>;
    /**
     * Show the .snapshot directory in the root of a share.
     */
    dotSnapVisibleRoot?: pulumi.Input<boolean>;
    /**
     * Indicates whether the server supports signed SMB packets.
     */
    enableSecuritySignatures?: pulumi.Input<boolean>;
    /**
     * Specifies the fully-qualified user to use for guest access.
     */
    guestUser?: pulumi.Input<string>;
    /**
     * Specify whether to ignore EAs on files.
     */
    ignoreEas?: pulumi.Input<boolean>;
    /**
     * Specify the number of OneFS driver worker threads per CPU.
     */
    onefsCpuMultiplier?: pulumi.Input<number>;
    /**
     * Set the maximum number of OneFS driver worker threads.
     */
    onefsNumWorkers?: pulumi.Input<number>;
    /**
     * If SMB3 encryption is enabled, reject unencrypted access from clients.
     */
    rejectUnencryptedAccess?: pulumi.Input<boolean>;
    /**
     * Indicates whether the server requires signed SMB packets.
     */
    requireSecuritySignatures?: pulumi.Input<boolean>;
    /**
     * If specified as "effective" or not specified, all fields are returned. If specified as "user", only fields with
     * non-default values are shown. If specified as "default", the original values are returned.
     */
    scope?: pulumi.Input<string>;
    /**
     * Enable Server Side Copy.
     */
    serverSideCopy?: pulumi.Input<boolean>;
    /**
     * Provides a description of the server.
     */
    serverString?: pulumi.Input<string>;
    /**
     * Specify whether service is enabled.
     */
    service?: pulumi.Input<boolean>;
    /**
     * Specify the number of SRV service worker threads per CPU.
     */
    srvCpuMultiplier?: pulumi.Input<number>;
    /**
     * Set the maximum number of SRV service worker threads.
     */
    srvNumWorkers?: pulumi.Input<number>;
    /**
     * Support multichannel.
     */
    supportMultichannel?: pulumi.Input<boolean>;
    /**
     * Support NetBIOS.
     */
    supportNetbios?: pulumi.Input<boolean>;
    /**
     * Support the SMB2 protocol on the server.
     */
    supportSmb2?: pulumi.Input<boolean>;
    /**
     * Support the SMB3 encryption on the server.
     */
    supportSmb3Encryption?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SmbServerSettings resource.
 */
export interface SmbServerSettingsArgs {
    /**
     * Only enumerate files and folders the requesting user has access to.
     */
    accessBasedShareEnum?: pulumi.Input<boolean>;
    /**
     * Specify level of file share audit events to log.
     */
    auditFileshare?: pulumi.Input<string>;
    /**
     * Specify the level of logon audit events to log.
     */
    auditLogon?: pulumi.Input<string>;
    /**
     * Allow access to .snapshot directories in share subdirectories.
     */
    dotSnapAccessibleChild?: pulumi.Input<boolean>;
    /**
     * Allow access to the .snapshot directory in the root of the share.
     */
    dotSnapAccessibleRoot?: pulumi.Input<boolean>;
    /**
     * Show .snapshot directories in share subdirectories.
     */
    dotSnapVisibleChild?: pulumi.Input<boolean>;
    /**
     * Show the .snapshot directory in the root of a share.
     */
    dotSnapVisibleRoot?: pulumi.Input<boolean>;
    /**
     * Indicates whether the server supports signed SMB packets.
     */
    enableSecuritySignatures?: pulumi.Input<boolean>;
    /**
     * Specifies the fully-qualified user to use for guest access.
     */
    guestUser?: pulumi.Input<string>;
    /**
     * Specify whether to ignore EAs on files.
     */
    ignoreEas?: pulumi.Input<boolean>;
    /**
     * Specify the number of OneFS driver worker threads per CPU.
     */
    onefsCpuMultiplier?: pulumi.Input<number>;
    /**
     * Set the maximum number of OneFS driver worker threads.
     */
    onefsNumWorkers?: pulumi.Input<number>;
    /**
     * If SMB3 encryption is enabled, reject unencrypted access from clients.
     */
    rejectUnencryptedAccess?: pulumi.Input<boolean>;
    /**
     * Indicates whether the server requires signed SMB packets.
     */
    requireSecuritySignatures?: pulumi.Input<boolean>;
    /**
     * If specified as "effective" or not specified, all fields are returned. If specified as "user", only fields with
     * non-default values are shown. If specified as "default", the original values are returned.
     */
    scope?: pulumi.Input<string>;
    /**
     * Enable Server Side Copy.
     */
    serverSideCopy?: pulumi.Input<boolean>;
    /**
     * Provides a description of the server.
     */
    serverString?: pulumi.Input<string>;
    /**
     * Specify whether service is enabled.
     */
    service?: pulumi.Input<boolean>;
    /**
     * Specify the number of SRV service worker threads per CPU.
     */
    srvCpuMultiplier?: pulumi.Input<number>;
    /**
     * Set the maximum number of SRV service worker threads.
     */
    srvNumWorkers?: pulumi.Input<number>;
    /**
     * Support multichannel.
     */
    supportMultichannel?: pulumi.Input<boolean>;
    /**
     * Support NetBIOS.
     */
    supportNetbios?: pulumi.Input<boolean>;
    /**
     * Support the SMB2 protocol on the server.
     */
    supportSmb2?: pulumi.Input<boolean>;
    /**
     * Support the SMB3 encryption on the server.
     */
    supportSmb3Encryption?: pulumi.Input<boolean>;
}
