// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class S3Bucket extends pulumi.CustomResource {
    /**
     * Get an existing S3Bucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: S3BucketState, opts?: pulumi.CustomResourceOptions): S3Bucket {
        return new S3Bucket(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerscale:index/s3Bucket:S3Bucket';

    /**
     * Returns true if the given object is an instance of S3Bucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is S3Bucket {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === S3Bucket.__pulumiType;
    }

    /**
     * Specifies properties for an S3 Access Control Entry.
     */
    public readonly acls!: pulumi.Output<outputs.S3BucketAcl[]>;
    /**
     * Create path if does not exist.
     */
    public readonly createPath!: pulumi.Output<boolean | undefined>;
    /**
     * Description for this S3 bucket.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Bucket name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Set behavior of modifying object acls.
     */
    public readonly objectAclPolicy!: pulumi.Output<string>;
    /**
     * Specifies the name of the owner.
     */
    public readonly owner!: pulumi.Output<string>;
    /**
     * Path of bucket within /ifs.
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * Zone ID.
     */
    public /*out*/ readonly zid!: pulumi.Output<number>;
    /**
     * Zone Name.
     */
    public readonly zone!: pulumi.Output<string | undefined>;

    /**
     * Create a S3Bucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: S3BucketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: S3BucketArgs | S3BucketState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as S3BucketState | undefined;
            resourceInputs["acls"] = state ? state.acls : undefined;
            resourceInputs["createPath"] = state ? state.createPath : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["objectAclPolicy"] = state ? state.objectAclPolicy : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["zid"] = state ? state.zid : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as S3BucketArgs | undefined;
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            resourceInputs["acls"] = args ? args.acls : undefined;
            resourceInputs["createPath"] = args ? args.createPath : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["objectAclPolicy"] = args ? args.objectAclPolicy : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["zid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(S3Bucket.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering S3Bucket resources.
 */
export interface S3BucketState {
    /**
     * Specifies properties for an S3 Access Control Entry.
     */
    acls?: pulumi.Input<pulumi.Input<inputs.S3BucketAcl>[]>;
    /**
     * Create path if does not exist.
     */
    createPath?: pulumi.Input<boolean>;
    /**
     * Description for this S3 bucket.
     */
    description?: pulumi.Input<string>;
    /**
     * Bucket name.
     */
    name?: pulumi.Input<string>;
    /**
     * Set behavior of modifying object acls.
     */
    objectAclPolicy?: pulumi.Input<string>;
    /**
     * Specifies the name of the owner.
     */
    owner?: pulumi.Input<string>;
    /**
     * Path of bucket within /ifs.
     */
    path?: pulumi.Input<string>;
    /**
     * Zone ID.
     */
    zid?: pulumi.Input<number>;
    /**
     * Zone Name.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a S3Bucket resource.
 */
export interface S3BucketArgs {
    /**
     * Specifies properties for an S3 Access Control Entry.
     */
    acls?: pulumi.Input<pulumi.Input<inputs.S3BucketAcl>[]>;
    /**
     * Create path if does not exist.
     */
    createPath?: pulumi.Input<boolean>;
    /**
     * Description for this S3 bucket.
     */
    description?: pulumi.Input<string>;
    /**
     * Bucket name.
     */
    name?: pulumi.Input<string>;
    /**
     * Set behavior of modifying object acls.
     */
    objectAclPolicy?: pulumi.Input<string>;
    /**
     * Specifies the name of the owner.
     */
    owner?: pulumi.Input<string>;
    /**
     * Path of bucket within /ifs.
     */
    path: pulumi.Input<string>;
    /**
     * Zone Name.
     */
    zone?: pulumi.Input<string>;
}
