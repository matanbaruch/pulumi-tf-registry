// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NetworkRule extends pulumi.CustomResource {
    /**
     * Get an existing NetworkRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkRuleState, opts?: pulumi.CustomResourceOptions): NetworkRule {
        return new NetworkRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerscale:index/networkRule:NetworkRule';

    /**
     * Returns true if the given object is an instance of NetworkRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkRule.__pulumiType;
    }

    /**
     * Description for the provisioning rule.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Name of the groupnet this rule belongs to
     */
    public readonly groupnet!: pulumi.Output<string>;
    /**
     * Interface name the provisioning rule applies to.
     */
    public readonly iface!: pulumi.Output<string>;
    /**
     * Name of the provisioning rule.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Node type the provisioning rule applies to.
     */
    public readonly nodeType!: pulumi.Output<string>;
    /**
     * Name of the pool this rule belongs to.
     */
    public readonly pool!: pulumi.Output<string>;
    /**
     * Name of the subnet this rule belongs to.
     */
    public readonly subnet!: pulumi.Output<string>;

    /**
     * Create a NetworkRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkRuleArgs | NetworkRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkRuleState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["groupnet"] = state ? state.groupnet : undefined;
            resourceInputs["iface"] = state ? state.iface : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeType"] = state ? state.nodeType : undefined;
            resourceInputs["pool"] = state ? state.pool : undefined;
            resourceInputs["subnet"] = state ? state.subnet : undefined;
        } else {
            const args = argsOrState as NetworkRuleArgs | undefined;
            if ((!args || args.groupnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupnet'");
            }
            if ((!args || args.iface === undefined) && !opts.urn) {
                throw new Error("Missing required property 'iface'");
            }
            if ((!args || args.pool === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pool'");
            }
            if ((!args || args.subnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnet'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["groupnet"] = args ? args.groupnet : undefined;
            resourceInputs["iface"] = args ? args.iface : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeType"] = args ? args.nodeType : undefined;
            resourceInputs["pool"] = args ? args.pool : undefined;
            resourceInputs["subnet"] = args ? args.subnet : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkRule resources.
 */
export interface NetworkRuleState {
    /**
     * Description for the provisioning rule.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the groupnet this rule belongs to
     */
    groupnet?: pulumi.Input<string>;
    /**
     * Interface name the provisioning rule applies to.
     */
    iface?: pulumi.Input<string>;
    /**
     * Name of the provisioning rule.
     */
    name?: pulumi.Input<string>;
    /**
     * Node type the provisioning rule applies to.
     */
    nodeType?: pulumi.Input<string>;
    /**
     * Name of the pool this rule belongs to.
     */
    pool?: pulumi.Input<string>;
    /**
     * Name of the subnet this rule belongs to.
     */
    subnet?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkRule resource.
 */
export interface NetworkRuleArgs {
    /**
     * Description for the provisioning rule.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the groupnet this rule belongs to
     */
    groupnet: pulumi.Input<string>;
    /**
     * Interface name the provisioning rule applies to.
     */
    iface: pulumi.Input<string>;
    /**
     * Name of the provisioning rule.
     */
    name?: pulumi.Input<string>;
    /**
     * Node type the provisioning rule applies to.
     */
    nodeType?: pulumi.Input<string>;
    /**
     * Name of the pool this rule belongs to.
     */
    pool: pulumi.Input<string>;
    /**
     * Name of the subnet this rule belongs to.
     */
    subnet: pulumi.Input<string>;
}
