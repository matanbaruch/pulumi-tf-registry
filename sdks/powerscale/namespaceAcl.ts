// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NamespaceAcl extends pulumi.CustomResource {
    /**
     * Get an existing NamespaceAcl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NamespaceAclState, opts?: pulumi.CustomResourceOptions): NamespaceAcl {
        return new NamespaceAcl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerscale:index/namespaceAcl:NamespaceAcl';

    /**
     * Returns true if the given object is an instance of NamespaceAcl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NamespaceAcl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NamespaceAcl.__pulumiType;
    }

    /**
     * Customer's raw configuration of the JSON array of access rights.
     */
    public readonly aclCustoms!: pulumi.Output<outputs.NamespaceAclAclCustom[] | undefined>;
    /**
     * Array effective configuration of the JSON array of access rights.
     */
    public /*out*/ readonly acls!: pulumi.Output<outputs.NamespaceAclAcl[]>;
    /**
     * If the directory has access rights set, then this field is returned as acl. If the directory has POSIX permissions set,
     * then this field is returned as mode.
     */
    public /*out*/ readonly authoritative!: pulumi.Output<string>;
    /**
     * Provides the JSON object for the group persona of the owner.
     */
    public readonly group!: pulumi.Output<outputs.NamespaceAclGroup>;
    /**
     * Provides the POSIX mode.
     */
    public /*out*/ readonly mode!: pulumi.Output<string>;
    /**
     * Indicate the namespace to set/get acl.
     */
    public readonly namespace!: pulumi.Output<string>;
    /**
     * Indicates that the operation is on the access point instead of the store path.
     */
    public readonly nsaccess!: pulumi.Output<boolean | undefined>;
    /**
     * Provides the JSON object for the group persona of the owner.
     */
    public readonly owner!: pulumi.Output<outputs.NamespaceAclOwner>;

    /**
     * Create a NamespaceAcl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NamespaceAclArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NamespaceAclArgs | NamespaceAclState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NamespaceAclState | undefined;
            resourceInputs["aclCustoms"] = state ? state.aclCustoms : undefined;
            resourceInputs["acls"] = state ? state.acls : undefined;
            resourceInputs["authoritative"] = state ? state.authoritative : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["nsaccess"] = state ? state.nsaccess : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
        } else {
            const args = argsOrState as NamespaceAclArgs | undefined;
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            resourceInputs["aclCustoms"] = args ? args.aclCustoms : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["nsaccess"] = args ? args.nsaccess : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["acls"] = undefined /*out*/;
            resourceInputs["authoritative"] = undefined /*out*/;
            resourceInputs["mode"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NamespaceAcl.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NamespaceAcl resources.
 */
export interface NamespaceAclState {
    /**
     * Customer's raw configuration of the JSON array of access rights.
     */
    aclCustoms?: pulumi.Input<pulumi.Input<inputs.NamespaceAclAclCustom>[]>;
    /**
     * Array effective configuration of the JSON array of access rights.
     */
    acls?: pulumi.Input<pulumi.Input<inputs.NamespaceAclAcl>[]>;
    /**
     * If the directory has access rights set, then this field is returned as acl. If the directory has POSIX permissions set,
     * then this field is returned as mode.
     */
    authoritative?: pulumi.Input<string>;
    /**
     * Provides the JSON object for the group persona of the owner.
     */
    group?: pulumi.Input<inputs.NamespaceAclGroup>;
    /**
     * Provides the POSIX mode.
     */
    mode?: pulumi.Input<string>;
    /**
     * Indicate the namespace to set/get acl.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Indicates that the operation is on the access point instead of the store path.
     */
    nsaccess?: pulumi.Input<boolean>;
    /**
     * Provides the JSON object for the group persona of the owner.
     */
    owner?: pulumi.Input<inputs.NamespaceAclOwner>;
}

/**
 * The set of arguments for constructing a NamespaceAcl resource.
 */
export interface NamespaceAclArgs {
    /**
     * Customer's raw configuration of the JSON array of access rights.
     */
    aclCustoms?: pulumi.Input<pulumi.Input<inputs.NamespaceAclAclCustom>[]>;
    /**
     * Provides the JSON object for the group persona of the owner.
     */
    group?: pulumi.Input<inputs.NamespaceAclGroup>;
    /**
     * Indicate the namespace to set/get acl.
     */
    namespace: pulumi.Input<string>;
    /**
     * Indicates that the operation is on the access point instead of the store path.
     */
    nsaccess?: pulumi.Input<boolean>;
    /**
     * Provides the JSON object for the group persona of the owner.
     */
    owner?: pulumi.Input<inputs.NamespaceAclOwner>;
}
