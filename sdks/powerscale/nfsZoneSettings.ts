// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NfsZoneSettings extends pulumi.CustomResource {
    /**
     * Get an existing NfsZoneSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NfsZoneSettingsState, opts?: pulumi.CustomResourceOptions): NfsZoneSettings {
        return new NfsZoneSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerscale:index/nfsZoneSettings:NfsZoneSettings';

    /**
     * Returns true if the given object is an instance of NfsZoneSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NfsZoneSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NfsZoneSettings.__pulumiType;
    }

    /**
     * If true, sends owners and groups as UIDs and GIDs when look up fails or if the 'nfsv4_no_name' property is set to 1.
     */
    public readonly nfsv4AllowNumericIds!: pulumi.Output<boolean>;
    /**
     * Specifies the domain or realm through which users and groups are associated.
     */
    public readonly nfsv4Domain!: pulumi.Output<string>;
    /**
     * If true, sends owners and groups without a domain name.
     */
    public readonly nfsv4NoDomain!: pulumi.Output<boolean>;
    /**
     * If true, sends UIDs and GIDs without a domain name.
     */
    public readonly nfsv4NoDomainUids!: pulumi.Output<boolean>;
    /**
     * If true, sends owners and groups as UIDs and GIDs.
     */
    public readonly nfsv4NoNames!: pulumi.Output<boolean>;
    /**
     * If true, replaces the owner or group domain with an NFS domain name.
     */
    public readonly nfsv4ReplaceDomain!: pulumi.Output<boolean>;
    /**
     * Access zone
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a NfsZoneSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NfsZoneSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NfsZoneSettingsArgs | NfsZoneSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NfsZoneSettingsState | undefined;
            resourceInputs["nfsv4AllowNumericIds"] = state ? state.nfsv4AllowNumericIds : undefined;
            resourceInputs["nfsv4Domain"] = state ? state.nfsv4Domain : undefined;
            resourceInputs["nfsv4NoDomain"] = state ? state.nfsv4NoDomain : undefined;
            resourceInputs["nfsv4NoDomainUids"] = state ? state.nfsv4NoDomainUids : undefined;
            resourceInputs["nfsv4NoNames"] = state ? state.nfsv4NoNames : undefined;
            resourceInputs["nfsv4ReplaceDomain"] = state ? state.nfsv4ReplaceDomain : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as NfsZoneSettingsArgs | undefined;
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["nfsv4AllowNumericIds"] = args ? args.nfsv4AllowNumericIds : undefined;
            resourceInputs["nfsv4Domain"] = args ? args.nfsv4Domain : undefined;
            resourceInputs["nfsv4NoDomain"] = args ? args.nfsv4NoDomain : undefined;
            resourceInputs["nfsv4NoDomainUids"] = args ? args.nfsv4NoDomainUids : undefined;
            resourceInputs["nfsv4NoNames"] = args ? args.nfsv4NoNames : undefined;
            resourceInputs["nfsv4ReplaceDomain"] = args ? args.nfsv4ReplaceDomain : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NfsZoneSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NfsZoneSettings resources.
 */
export interface NfsZoneSettingsState {
    /**
     * If true, sends owners and groups as UIDs and GIDs when look up fails or if the 'nfsv4_no_name' property is set to 1.
     */
    nfsv4AllowNumericIds?: pulumi.Input<boolean>;
    /**
     * Specifies the domain or realm through which users and groups are associated.
     */
    nfsv4Domain?: pulumi.Input<string>;
    /**
     * If true, sends owners and groups without a domain name.
     */
    nfsv4NoDomain?: pulumi.Input<boolean>;
    /**
     * If true, sends UIDs and GIDs without a domain name.
     */
    nfsv4NoDomainUids?: pulumi.Input<boolean>;
    /**
     * If true, sends owners and groups as UIDs and GIDs.
     */
    nfsv4NoNames?: pulumi.Input<boolean>;
    /**
     * If true, replaces the owner or group domain with an NFS domain name.
     */
    nfsv4ReplaceDomain?: pulumi.Input<boolean>;
    /**
     * Access zone
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NfsZoneSettings resource.
 */
export interface NfsZoneSettingsArgs {
    /**
     * If true, sends owners and groups as UIDs and GIDs when look up fails or if the 'nfsv4_no_name' property is set to 1.
     */
    nfsv4AllowNumericIds?: pulumi.Input<boolean>;
    /**
     * Specifies the domain or realm through which users and groups are associated.
     */
    nfsv4Domain?: pulumi.Input<string>;
    /**
     * If true, sends owners and groups without a domain name.
     */
    nfsv4NoDomain?: pulumi.Input<boolean>;
    /**
     * If true, sends UIDs and GIDs without a domain name.
     */
    nfsv4NoDomainUids?: pulumi.Input<boolean>;
    /**
     * If true, sends owners and groups as UIDs and GIDs.
     */
    nfsv4NoNames?: pulumi.Input<boolean>;
    /**
     * If true, replaces the owner or group domain with an NFS domain name.
     */
    nfsv4ReplaceDomain?: pulumi.Input<boolean>;
    /**
     * Access zone
     */
    zone: pulumi.Input<string>;
}
