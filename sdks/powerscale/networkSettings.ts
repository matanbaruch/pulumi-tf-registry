// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NetworkSettings extends pulumi.CustomResource {
    /**
     * Get an existing NetworkSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkSettingsState, opts?: pulumi.CustomResourceOptions): NetworkSettings {
        return new NetworkSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerscale:index/networkSettings:NetworkSettings';

    /**
     * Returns true if the given object is an instance of NetworkSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkSettings.__pulumiType;
    }

    /**
     * Default client-side DNS settings for non-multitenancy aware programs.
     */
    public /*out*/ readonly defaultGroupnet!: pulumi.Output<string>;
    /**
     * Delay in seconds for IP rebalance. (Update Supported)
     */
    public readonly scRebalanceDelay!: pulumi.Output<number>;
    /**
     * Enable or disable Source Based Routing. (Update Supported)
     */
    public readonly sourceBasedRoutingEnabled!: pulumi.Output<boolean>;
    /**
     * List of client TCP ports. (Update Supported)
     */
    public readonly tcpPorts!: pulumi.Output<number[]>;

    /**
     * Create a NetworkSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NetworkSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkSettingsArgs | NetworkSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkSettingsState | undefined;
            resourceInputs["defaultGroupnet"] = state ? state.defaultGroupnet : undefined;
            resourceInputs["scRebalanceDelay"] = state ? state.scRebalanceDelay : undefined;
            resourceInputs["sourceBasedRoutingEnabled"] = state ? state.sourceBasedRoutingEnabled : undefined;
            resourceInputs["tcpPorts"] = state ? state.tcpPorts : undefined;
        } else {
            const args = argsOrState as NetworkSettingsArgs | undefined;
            resourceInputs["scRebalanceDelay"] = args ? args.scRebalanceDelay : undefined;
            resourceInputs["sourceBasedRoutingEnabled"] = args ? args.sourceBasedRoutingEnabled : undefined;
            resourceInputs["tcpPorts"] = args ? args.tcpPorts : undefined;
            resourceInputs["defaultGroupnet"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkSettings resources.
 */
export interface NetworkSettingsState {
    /**
     * Default client-side DNS settings for non-multitenancy aware programs.
     */
    defaultGroupnet?: pulumi.Input<string>;
    /**
     * Delay in seconds for IP rebalance. (Update Supported)
     */
    scRebalanceDelay?: pulumi.Input<number>;
    /**
     * Enable or disable Source Based Routing. (Update Supported)
     */
    sourceBasedRoutingEnabled?: pulumi.Input<boolean>;
    /**
     * List of client TCP ports. (Update Supported)
     */
    tcpPorts?: pulumi.Input<pulumi.Input<number>[]>;
}

/**
 * The set of arguments for constructing a NetworkSettings resource.
 */
export interface NetworkSettingsArgs {
    /**
     * Delay in seconds for IP rebalance. (Update Supported)
     */
    scRebalanceDelay?: pulumi.Input<number>;
    /**
     * Enable or disable Source Based Routing. (Update Supported)
     */
    sourceBasedRoutingEnabled?: pulumi.Input<boolean>;
    /**
     * List of client TCP ports. (Update Supported)
     */
    tcpPorts?: pulumi.Input<pulumi.Input<number>[]>;
}
