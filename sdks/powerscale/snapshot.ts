// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Snapshot extends pulumi.CustomResource {
    /**
     * Get an existing Snapshot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnapshotState, opts?: pulumi.CustomResourceOptions): Snapshot {
        return new Snapshot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerscale:index/snapshot:Snapshot';

    /**
     * Returns true if the given object is an instance of Snapshot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Snapshot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Snapshot.__pulumiType;
    }

    /**
     * The name of the alias, none for real snapshots.
     */
    public /*out*/ readonly alias!: pulumi.Output<string>;
    /**
     * The Unix Epoch time the snapshot was created.
     */
    public /*out*/ readonly created!: pulumi.Output<number>;
    /**
     * The Unix Epoch time the snapshot will expire and be eligible for automatic deletion.
     */
    public /*out*/ readonly expires!: pulumi.Output<number>;
    /**
     * True if the snapshot has one or more locks present see, see the locks subresource of a snapshot for a list of lock.
     */
    public /*out*/ readonly hasLocks!: pulumi.Output<boolean>;
    /**
     * The user or system supplied snapshot name. This will be null for snapshots pending delete. Only alphanumeric characters,
     * underscores ( _ ), and hyphens (-) are allowed. (Update Supported)
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The /ifs path snapshotted.
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * Percentage of /ifs used for storing this snapshot.
     */
    public /*out*/ readonly pctFilesystem!: pulumi.Output<number>;
    /**
     * Percentage of configured snapshot reserved used for storing this snapshot.
     */
    public /*out*/ readonly pctReserve!: pulumi.Output<number>;
    /**
     * The name of the schedule used to create this snapshot, if applicable.
     */
    public /*out*/ readonly schedule!: pulumi.Output<string>;
    /**
     * The amount of time from creation before the snapshot will expire and be eligible for automatic deletion. Resets each
     * time this value is updated (Update Supported)
     */
    public readonly setExpires!: pulumi.Output<string>;
    /**
     * The amount of shadow bytes referred to by this snapshot.
     */
    public /*out*/ readonly shadowBytes!: pulumi.Output<number>;
    /**
     * The amount of storage in bytes used to store this snapshot.
     */
    public /*out*/ readonly size!: pulumi.Output<number>;
    /**
     * Snapshot state.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The ID of the snapshot pointed to if this is an alias. 18446744073709551615 (max uint64) is returned for an alias to the
     * live filesystem.
     */
    public /*out*/ readonly targetId!: pulumi.Output<number>;
    /**
     * The name of the snapshot pointed to if this is an alias.
     */
    public /*out*/ readonly targetName!: pulumi.Output<string>;

    /**
     * Create a Snapshot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnapshotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnapshotArgs | SnapshotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnapshotState | undefined;
            resourceInputs["alias"] = state ? state.alias : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["expires"] = state ? state.expires : undefined;
            resourceInputs["hasLocks"] = state ? state.hasLocks : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["pctFilesystem"] = state ? state.pctFilesystem : undefined;
            resourceInputs["pctReserve"] = state ? state.pctReserve : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["setExpires"] = state ? state.setExpires : undefined;
            resourceInputs["shadowBytes"] = state ? state.shadowBytes : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["targetId"] = state ? state.targetId : undefined;
            resourceInputs["targetName"] = state ? state.targetName : undefined;
        } else {
            const args = argsOrState as SnapshotArgs | undefined;
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["setExpires"] = args ? args.setExpires : undefined;
            resourceInputs["alias"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["expires"] = undefined /*out*/;
            resourceInputs["hasLocks"] = undefined /*out*/;
            resourceInputs["pctFilesystem"] = undefined /*out*/;
            resourceInputs["pctReserve"] = undefined /*out*/;
            resourceInputs["schedule"] = undefined /*out*/;
            resourceInputs["shadowBytes"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["targetId"] = undefined /*out*/;
            resourceInputs["targetName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Snapshot.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Snapshot resources.
 */
export interface SnapshotState {
    /**
     * The name of the alias, none for real snapshots.
     */
    alias?: pulumi.Input<string>;
    /**
     * The Unix Epoch time the snapshot was created.
     */
    created?: pulumi.Input<number>;
    /**
     * The Unix Epoch time the snapshot will expire and be eligible for automatic deletion.
     */
    expires?: pulumi.Input<number>;
    /**
     * True if the snapshot has one or more locks present see, see the locks subresource of a snapshot for a list of lock.
     */
    hasLocks?: pulumi.Input<boolean>;
    /**
     * The user or system supplied snapshot name. This will be null for snapshots pending delete. Only alphanumeric characters,
     * underscores ( _ ), and hyphens (-) are allowed. (Update Supported)
     */
    name?: pulumi.Input<string>;
    /**
     * The /ifs path snapshotted.
     */
    path?: pulumi.Input<string>;
    /**
     * Percentage of /ifs used for storing this snapshot.
     */
    pctFilesystem?: pulumi.Input<number>;
    /**
     * Percentage of configured snapshot reserved used for storing this snapshot.
     */
    pctReserve?: pulumi.Input<number>;
    /**
     * The name of the schedule used to create this snapshot, if applicable.
     */
    schedule?: pulumi.Input<string>;
    /**
     * The amount of time from creation before the snapshot will expire and be eligible for automatic deletion. Resets each
     * time this value is updated (Update Supported)
     */
    setExpires?: pulumi.Input<string>;
    /**
     * The amount of shadow bytes referred to by this snapshot.
     */
    shadowBytes?: pulumi.Input<number>;
    /**
     * The amount of storage in bytes used to store this snapshot.
     */
    size?: pulumi.Input<number>;
    /**
     * Snapshot state.
     */
    state?: pulumi.Input<string>;
    /**
     * The ID of the snapshot pointed to if this is an alias. 18446744073709551615 (max uint64) is returned for an alias to the
     * live filesystem.
     */
    targetId?: pulumi.Input<number>;
    /**
     * The name of the snapshot pointed to if this is an alias.
     */
    targetName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Snapshot resource.
 */
export interface SnapshotArgs {
    /**
     * The user or system supplied snapshot name. This will be null for snapshots pending delete. Only alphanumeric characters,
     * underscores ( _ ), and hyphens (-) are allowed. (Update Supported)
     */
    name?: pulumi.Input<string>;
    /**
     * The /ifs path snapshotted.
     */
    path: pulumi.Input<string>;
    /**
     * The amount of time from creation before the snapshot will expire and be eligible for automatic deletion. Resets each
     * time this value is updated (Update Supported)
     */
    setExpires?: pulumi.Input<string>;
}
