// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SnapshotSchedule extends pulumi.CustomResource {
    /**
     * Get an existing SnapshotSchedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnapshotScheduleState, opts?: pulumi.CustomResourceOptions): SnapshotSchedule {
        return new SnapshotSchedule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerscale:index/snapshotSchedule:SnapshotSchedule';

    /**
     * Returns true if the given object is an instance of SnapshotSchedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SnapshotSchedule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnapshotSchedule.__pulumiType;
    }

    /**
     * Alias name to create for each snapshot.
     */
    public readonly alias!: pulumi.Output<string>;
    /**
     * Time in seconds added to creation time to construction expiration time.
     */
    public readonly duration!: pulumi.Output<number>;
    /**
     * The schedule name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Unix Epoch time of next snapshot to be created.
     */
    public readonly nextRun!: pulumi.Output<number>;
    /**
     * Formatted name (see pattern) of next snapshot to be created
     */
    public readonly nextSnapshot!: pulumi.Output<string>;
    /**
     * The /ifs path snapshotted.
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * Pattern expanded with strftime to create snapshot names.Some sample values for pattern are: 'snap-%F' would yield
     * snap-1984-03-20 , 'backup-%FT%T' would yield backup-1984-03-20T22:30:00
     */
    public readonly pattern!: pulumi.Output<string>;
    /**
     * Time value in String for which snapshots created by this snapshot schedule should be retained.Values supported are of
     * format : Never Expires, x Seconds(s), x Minute(s), x Hour(s), x Week(s), x Day(s), x Month(s), x Year(s) where x can be
     * any integer value
     */
    public readonly retentionTime!: pulumi.Output<string>;
    /**
     * The isidate-compatible natural language description of the schedule. It specifies the frequency of the schedule. You can
     * specify this as combination of <interval> and <frequency> where each of them can be defined as: <interval>: *Every [ (
     * other | <integer> ) ] ( weekday | day | week [ on <day>] | month [ on the <integer> ] | <day>[, ...] [ of every [ (
     * other | <integer> ) ] week ] | The last (day | weekday | <day>) of every [ (other | <integer>) ] month | The <integer>
     * (weekday | <day>) of every [ (other | <integer>) ] month | The <integer> of every [ (other | <integer>) ] month | Yearly
     * on <month> <integer> | Yearly on the (last | <integer>) [ weekday | <day> ] of <month> <frequency>: *at <hh>[:<mm>] [
     * (AM | PM) ] | every [ <integer> ] (hours | minutes) [ between <hh>[:<mm>] [ (AM | PM) ] and <hh>[:<mm>] [ (AM | PM) ] |
     * every [ <integer> ] (hours | minutes) [ from <hh>[:<mm>] [ (AM | PM) ] to <hh>[:<mm>] [ (AM | PM) ] Additionally:
     * <integer> can include "st," "th," or "rd," e.g., "Every 1st month." <day> can be a day of the week or a three-letter
     * abbreviation, e.g., "saturday" or "sat." <month> must be the name of the month or its abbreviation, e.g., "July" or
     * "Jul." Some sample values: "Every 2 days.", "Every 3rd weekday at 11 PM.", "Every month on the 15th at 1:30 AM."
     */
    public readonly schedule!: pulumi.Output<string>;

    /**
     * Create a SnapshotSchedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SnapshotScheduleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnapshotScheduleArgs | SnapshotScheduleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnapshotScheduleState | undefined;
            resourceInputs["alias"] = state ? state.alias : undefined;
            resourceInputs["duration"] = state ? state.duration : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nextRun"] = state ? state.nextRun : undefined;
            resourceInputs["nextSnapshot"] = state ? state.nextSnapshot : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["pattern"] = state ? state.pattern : undefined;
            resourceInputs["retentionTime"] = state ? state.retentionTime : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
        } else {
            const args = argsOrState as SnapshotScheduleArgs | undefined;
            resourceInputs["alias"] = args ? args.alias : undefined;
            resourceInputs["duration"] = args ? args.duration : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nextRun"] = args ? args.nextRun : undefined;
            resourceInputs["nextSnapshot"] = args ? args.nextSnapshot : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["pattern"] = args ? args.pattern : undefined;
            resourceInputs["retentionTime"] = args ? args.retentionTime : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SnapshotSchedule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SnapshotSchedule resources.
 */
export interface SnapshotScheduleState {
    /**
     * Alias name to create for each snapshot.
     */
    alias?: pulumi.Input<string>;
    /**
     * Time in seconds added to creation time to construction expiration time.
     */
    duration?: pulumi.Input<number>;
    /**
     * The schedule name.
     */
    name?: pulumi.Input<string>;
    /**
     * Unix Epoch time of next snapshot to be created.
     */
    nextRun?: pulumi.Input<number>;
    /**
     * Formatted name (see pattern) of next snapshot to be created
     */
    nextSnapshot?: pulumi.Input<string>;
    /**
     * The /ifs path snapshotted.
     */
    path?: pulumi.Input<string>;
    /**
     * Pattern expanded with strftime to create snapshot names.Some sample values for pattern are: 'snap-%F' would yield
     * snap-1984-03-20 , 'backup-%FT%T' would yield backup-1984-03-20T22:30:00
     */
    pattern?: pulumi.Input<string>;
    /**
     * Time value in String for which snapshots created by this snapshot schedule should be retained.Values supported are of
     * format : Never Expires, x Seconds(s), x Minute(s), x Hour(s), x Week(s), x Day(s), x Month(s), x Year(s) where x can be
     * any integer value
     */
    retentionTime?: pulumi.Input<string>;
    /**
     * The isidate-compatible natural language description of the schedule. It specifies the frequency of the schedule. You can
     * specify this as combination of <interval> and <frequency> where each of them can be defined as: <interval>: *Every [ (
     * other | <integer> ) ] ( weekday | day | week [ on <day>] | month [ on the <integer> ] | <day>[, ...] [ of every [ (
     * other | <integer> ) ] week ] | The last (day | weekday | <day>) of every [ (other | <integer>) ] month | The <integer>
     * (weekday | <day>) of every [ (other | <integer>) ] month | The <integer> of every [ (other | <integer>) ] month | Yearly
     * on <month> <integer> | Yearly on the (last | <integer>) [ weekday | <day> ] of <month> <frequency>: *at <hh>[:<mm>] [
     * (AM | PM) ] | every [ <integer> ] (hours | minutes) [ between <hh>[:<mm>] [ (AM | PM) ] and <hh>[:<mm>] [ (AM | PM) ] |
     * every [ <integer> ] (hours | minutes) [ from <hh>[:<mm>] [ (AM | PM) ] to <hh>[:<mm>] [ (AM | PM) ] Additionally:
     * <integer> can include "st," "th," or "rd," e.g., "Every 1st month." <day> can be a day of the week or a three-letter
     * abbreviation, e.g., "saturday" or "sat." <month> must be the name of the month or its abbreviation, e.g., "July" or
     * "Jul." Some sample values: "Every 2 days.", "Every 3rd weekday at 11 PM.", "Every month on the 15th at 1:30 AM."
     */
    schedule?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SnapshotSchedule resource.
 */
export interface SnapshotScheduleArgs {
    /**
     * Alias name to create for each snapshot.
     */
    alias?: pulumi.Input<string>;
    /**
     * Time in seconds added to creation time to construction expiration time.
     */
    duration?: pulumi.Input<number>;
    /**
     * The schedule name.
     */
    name?: pulumi.Input<string>;
    /**
     * Unix Epoch time of next snapshot to be created.
     */
    nextRun?: pulumi.Input<number>;
    /**
     * Formatted name (see pattern) of next snapshot to be created
     */
    nextSnapshot?: pulumi.Input<string>;
    /**
     * The /ifs path snapshotted.
     */
    path?: pulumi.Input<string>;
    /**
     * Pattern expanded with strftime to create snapshot names.Some sample values for pattern are: 'snap-%F' would yield
     * snap-1984-03-20 , 'backup-%FT%T' would yield backup-1984-03-20T22:30:00
     */
    pattern?: pulumi.Input<string>;
    /**
     * Time value in String for which snapshots created by this snapshot schedule should be retained.Values supported are of
     * format : Never Expires, x Seconds(s), x Minute(s), x Hour(s), x Week(s), x Day(s), x Month(s), x Year(s) where x can be
     * any integer value
     */
    retentionTime?: pulumi.Input<string>;
    /**
     * The isidate-compatible natural language description of the schedule. It specifies the frequency of the schedule. You can
     * specify this as combination of <interval> and <frequency> where each of them can be defined as: <interval>: *Every [ (
     * other | <integer> ) ] ( weekday | day | week [ on <day>] | month [ on the <integer> ] | <day>[, ...] [ of every [ (
     * other | <integer> ) ] week ] | The last (day | weekday | <day>) of every [ (other | <integer>) ] month | The <integer>
     * (weekday | <day>) of every [ (other | <integer>) ] month | The <integer> of every [ (other | <integer>) ] month | Yearly
     * on <month> <integer> | Yearly on the (last | <integer>) [ weekday | <day> ] of <month> <frequency>: *at <hh>[:<mm>] [
     * (AM | PM) ] | every [ <integer> ] (hours | minutes) [ between <hh>[:<mm>] [ (AM | PM) ] and <hh>[:<mm>] [ (AM | PM) ] |
     * every [ <integer> ] (hours | minutes) [ from <hh>[:<mm>] [ (AM | PM) ] to <hh>[:<mm>] [ (AM | PM) ] Additionally:
     * <integer> can include "st," "th," or "rd," e.g., "Every 1st month." <day> can be a day of the week or a three-letter
     * abbreviation, e.g., "saturday" or "sat." <month> must be the name of the month or its abbreviation, e.g., "July" or
     * "Jul." Some sample values: "Every 2 days.", "Every 3rd weekday at 11 PM.", "Every month on the 15th at 1:30 AM."
     */
    schedule?: pulumi.Input<string>;
}
