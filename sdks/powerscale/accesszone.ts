// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Accesszone extends pulumi.CustomResource {
    /**
     * Get an existing Accesszone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccesszoneState, opts?: pulumi.CustomResourceOptions): Accesszone {
        return new Accesszone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerscale:index/accesszone:Accesszone';

    /**
     * Returns true if the given object is an instance of Accesszone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Accesszone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Accesszone.__pulumiType;
    }

    /**
     * Specifies an alternate system provider.
     */
    public /*out*/ readonly alternateSystemProvider!: pulumi.Output<string>;
    /**
     * Specifies the list of authentication providers available on this access zone.
     */
    public /*out*/ readonly authProviders!: pulumi.Output<string[]>;
    /**
     * Specifies amount of time in seconds to cache a user/group.
     */
    public /*out*/ readonly cacheEntryExpiry!: pulumi.Output<number>;
    /**
     * Determines if a path is created when a path does not exist.
     */
    public /*out*/ readonly createPath!: pulumi.Output<boolean>;
    /**
     * An optional parameter which adds new auth_providers to the access zone. A provider name should be of the form
     * '[provider-type:]provider-name', the provider-type defaults to 'lsa-local-provider'. (Update Supported)
     */
    public readonly customAuthProviders!: pulumi.Output<string[]>;
    /**
     * Groupnet identifier
     */
    public readonly groupnet!: pulumi.Output<string>;
    /**
     * Specifies the permissions set on automatically created user home directories.
     */
    public /*out*/ readonly homeDirectoryUmask!: pulumi.Output<number>;
    /**
     * Specifies a list of users and groups that have read and write access to /ifs.
     */
    public /*out*/ readonly ifsRestricteds!: pulumi.Output<outputs.AccesszoneIfsRestricted[]>;
    /**
     * Maps untrusted domains to this NetBIOS domain during authentication.
     */
    public /*out*/ readonly mapUntrusted!: pulumi.Output<string>;
    /**
     * Specifies the access zone name. (Update Supported)
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies number of seconds the negative cache entry is valid.
     */
    public /*out*/ readonly negativeCacheEntryExpiry!: pulumi.Output<number>;
    /**
     * Specifies the NetBIOS name.
     */
    public /*out*/ readonly netbiosName!: pulumi.Output<string>;
    /**
     * Specifies the access zone base directory path. (Update Supported)
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * Specifies the skeleton directory that is used for user home directories.
     */
    public /*out*/ readonly skeletonDirectory!: pulumi.Output<string>;
    /**
     * True if the access zone is built-in.
     */
    public /*out*/ readonly system!: pulumi.Output<boolean>;
    /**
     * Specifies the system provider for the access zone.
     */
    public /*out*/ readonly systemProvider!: pulumi.Output<string>;
    /**
     * Specifies the current ID mapping rules.
     */
    public /*out*/ readonly userMappingRules!: pulumi.Output<string[]>;
    /**
     * Specifies the access zone ID on the system.
     */
    public /*out*/ readonly zoneId!: pulumi.Output<number>;

    /**
     * Create a Accesszone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccesszoneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccesszoneArgs | AccesszoneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccesszoneState | undefined;
            resourceInputs["alternateSystemProvider"] = state ? state.alternateSystemProvider : undefined;
            resourceInputs["authProviders"] = state ? state.authProviders : undefined;
            resourceInputs["cacheEntryExpiry"] = state ? state.cacheEntryExpiry : undefined;
            resourceInputs["createPath"] = state ? state.createPath : undefined;
            resourceInputs["customAuthProviders"] = state ? state.customAuthProviders : undefined;
            resourceInputs["groupnet"] = state ? state.groupnet : undefined;
            resourceInputs["homeDirectoryUmask"] = state ? state.homeDirectoryUmask : undefined;
            resourceInputs["ifsRestricteds"] = state ? state.ifsRestricteds : undefined;
            resourceInputs["mapUntrusted"] = state ? state.mapUntrusted : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["negativeCacheEntryExpiry"] = state ? state.negativeCacheEntryExpiry : undefined;
            resourceInputs["netbiosName"] = state ? state.netbiosName : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["skeletonDirectory"] = state ? state.skeletonDirectory : undefined;
            resourceInputs["system"] = state ? state.system : undefined;
            resourceInputs["systemProvider"] = state ? state.systemProvider : undefined;
            resourceInputs["userMappingRules"] = state ? state.userMappingRules : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as AccesszoneArgs | undefined;
            if ((!args || args.groupnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupnet'");
            }
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            resourceInputs["customAuthProviders"] = args ? args.customAuthProviders : undefined;
            resourceInputs["groupnet"] = args ? args.groupnet : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["alternateSystemProvider"] = undefined /*out*/;
            resourceInputs["authProviders"] = undefined /*out*/;
            resourceInputs["cacheEntryExpiry"] = undefined /*out*/;
            resourceInputs["createPath"] = undefined /*out*/;
            resourceInputs["homeDirectoryUmask"] = undefined /*out*/;
            resourceInputs["ifsRestricteds"] = undefined /*out*/;
            resourceInputs["mapUntrusted"] = undefined /*out*/;
            resourceInputs["negativeCacheEntryExpiry"] = undefined /*out*/;
            resourceInputs["netbiosName"] = undefined /*out*/;
            resourceInputs["skeletonDirectory"] = undefined /*out*/;
            resourceInputs["system"] = undefined /*out*/;
            resourceInputs["systemProvider"] = undefined /*out*/;
            resourceInputs["userMappingRules"] = undefined /*out*/;
            resourceInputs["zoneId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Accesszone.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Accesszone resources.
 */
export interface AccesszoneState {
    /**
     * Specifies an alternate system provider.
     */
    alternateSystemProvider?: pulumi.Input<string>;
    /**
     * Specifies the list of authentication providers available on this access zone.
     */
    authProviders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies amount of time in seconds to cache a user/group.
     */
    cacheEntryExpiry?: pulumi.Input<number>;
    /**
     * Determines if a path is created when a path does not exist.
     */
    createPath?: pulumi.Input<boolean>;
    /**
     * An optional parameter which adds new auth_providers to the access zone. A provider name should be of the form
     * '[provider-type:]provider-name', the provider-type defaults to 'lsa-local-provider'. (Update Supported)
     */
    customAuthProviders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Groupnet identifier
     */
    groupnet?: pulumi.Input<string>;
    /**
     * Specifies the permissions set on automatically created user home directories.
     */
    homeDirectoryUmask?: pulumi.Input<number>;
    /**
     * Specifies a list of users and groups that have read and write access to /ifs.
     */
    ifsRestricteds?: pulumi.Input<pulumi.Input<inputs.AccesszoneIfsRestricted>[]>;
    /**
     * Maps untrusted domains to this NetBIOS domain during authentication.
     */
    mapUntrusted?: pulumi.Input<string>;
    /**
     * Specifies the access zone name. (Update Supported)
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies number of seconds the negative cache entry is valid.
     */
    negativeCacheEntryExpiry?: pulumi.Input<number>;
    /**
     * Specifies the NetBIOS name.
     */
    netbiosName?: pulumi.Input<string>;
    /**
     * Specifies the access zone base directory path. (Update Supported)
     */
    path?: pulumi.Input<string>;
    /**
     * Specifies the skeleton directory that is used for user home directories.
     */
    skeletonDirectory?: pulumi.Input<string>;
    /**
     * True if the access zone is built-in.
     */
    system?: pulumi.Input<boolean>;
    /**
     * Specifies the system provider for the access zone.
     */
    systemProvider?: pulumi.Input<string>;
    /**
     * Specifies the current ID mapping rules.
     */
    userMappingRules?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the access zone ID on the system.
     */
    zoneId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Accesszone resource.
 */
export interface AccesszoneArgs {
    /**
     * An optional parameter which adds new auth_providers to the access zone. A provider name should be of the form
     * '[provider-type:]provider-name', the provider-type defaults to 'lsa-local-provider'. (Update Supported)
     */
    customAuthProviders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Groupnet identifier
     */
    groupnet: pulumi.Input<string>;
    /**
     * Specifies the access zone name. (Update Supported)
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the access zone base directory path. (Update Supported)
     */
    path: pulumi.Input<string>;
}
