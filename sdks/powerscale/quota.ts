// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Quota extends pulumi.CustomResource {
    /**
     * Get an existing Quota resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QuotaState, opts?: pulumi.CustomResourceOptions): Quota {
        return new Quota(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerscale:index/quota:Quota';

    /**
     * Returns true if the given object is an instance of Quota.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Quota {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Quota.__pulumiType;
    }

    /**
     * If true, quotas using the quota directory see the quota thresholds as share size.
     */
    public readonly container!: pulumi.Output<boolean>;
    /**
     * Represents the ratio of logical space provided to physical space used. This accounts for protection overhead, metadata,
     * and compression ratios for the data.
     */
    public /*out*/ readonly efficiencyRatio!: pulumi.Output<number>;
    /**
     * True if the quota provides enforcement, otherwise an accounting quota.
     */
    public readonly enforced!: pulumi.Output<boolean>;
    /**
     * Force creation of quotas on the root of /ifs or percent based quotas.
     */
    public readonly force!: pulumi.Output<boolean | undefined>;
    /**
     * If true, skip child quota's threshold comparison with parent quota path.
     */
    public readonly ignoreLimitChecks!: pulumi.Output<boolean | undefined>;
    /**
     * If true, quota governs snapshot data as well as head data.
     */
    public readonly includeSnapshots!: pulumi.Output<boolean>;
    /**
     * For user, group and directory quotas, true if the quota is linked and controlled by a parent default-* quota. Linked
     * quotas cannot be modified until they are unlinked. Set linked as true or false to link or unlink quota
     */
    public readonly linked!: pulumi.Output<boolean>;
    /**
     * Summary of notifications: 'custom' indicates one or more notification rules available from the notifications
     * sub-resource; 'default' indicates system default rules are used; 'disabled' indicates that no notifications will be used
     * for this quota.; 'badmap' indicates that notification rule has problem in rule map.
     */
    public /*out*/ readonly notifications!: pulumi.Output<string>;
    /**
     * The ifs path governed.
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * Specifies the persona of the file group. persona is required for user and group type.
     */
    public readonly persona!: pulumi.Output<outputs.QuotaPersona | undefined>;
    /**
     * True if the default resource accounting is accurate on the quota. If false, this quota is waiting on completion of a
     * QuotaScan job.
     */
    public /*out*/ readonly ready!: pulumi.Output<boolean>;
    /**
     * Represents the ratio of logical space provided to physical data space used. This accounts for compression and data
     * deduplication effects.
     */
    public /*out*/ readonly reductionRatio!: pulumi.Output<number>;
    /**
     * The thresholds of quota
     */
    public readonly thresholds!: pulumi.Output<outputs.QuotaThresholds>;
    /**
     * Thresholds apply on quota accounting metric.
     */
    public readonly thresholdsOn!: pulumi.Output<string>;
    /**
     * The type of quota.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The usage of quota
     */
    public /*out*/ readonly usage!: pulumi.Output<outputs.QuotaUsage>;
    /**
     * Optional named zone to use for user and group resolution.
     */
    public readonly zone!: pulumi.Output<string | undefined>;

    /**
     * Create a Quota resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QuotaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: QuotaArgs | QuotaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as QuotaState | undefined;
            resourceInputs["container"] = state ? state.container : undefined;
            resourceInputs["efficiencyRatio"] = state ? state.efficiencyRatio : undefined;
            resourceInputs["enforced"] = state ? state.enforced : undefined;
            resourceInputs["force"] = state ? state.force : undefined;
            resourceInputs["ignoreLimitChecks"] = state ? state.ignoreLimitChecks : undefined;
            resourceInputs["includeSnapshots"] = state ? state.includeSnapshots : undefined;
            resourceInputs["linked"] = state ? state.linked : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["persona"] = state ? state.persona : undefined;
            resourceInputs["ready"] = state ? state.ready : undefined;
            resourceInputs["reductionRatio"] = state ? state.reductionRatio : undefined;
            resourceInputs["thresholds"] = state ? state.thresholds : undefined;
            resourceInputs["thresholdsOn"] = state ? state.thresholdsOn : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["usage"] = state ? state.usage : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as QuotaArgs | undefined;
            if ((!args || args.includeSnapshots === undefined) && !opts.urn) {
                throw new Error("Missing required property 'includeSnapshots'");
            }
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["container"] = args ? args.container : undefined;
            resourceInputs["enforced"] = args ? args.enforced : undefined;
            resourceInputs["force"] = args ? args.force : undefined;
            resourceInputs["ignoreLimitChecks"] = args ? args.ignoreLimitChecks : undefined;
            resourceInputs["includeSnapshots"] = args ? args.includeSnapshots : undefined;
            resourceInputs["linked"] = args ? args.linked : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["persona"] = args ? args.persona : undefined;
            resourceInputs["thresholds"] = args ? args.thresholds : undefined;
            resourceInputs["thresholdsOn"] = args ? args.thresholdsOn : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["efficiencyRatio"] = undefined /*out*/;
            resourceInputs["notifications"] = undefined /*out*/;
            resourceInputs["ready"] = undefined /*out*/;
            resourceInputs["reductionRatio"] = undefined /*out*/;
            resourceInputs["usage"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Quota.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Quota resources.
 */
export interface QuotaState {
    /**
     * If true, quotas using the quota directory see the quota thresholds as share size.
     */
    container?: pulumi.Input<boolean>;
    /**
     * Represents the ratio of logical space provided to physical space used. This accounts for protection overhead, metadata,
     * and compression ratios for the data.
     */
    efficiencyRatio?: pulumi.Input<number>;
    /**
     * True if the quota provides enforcement, otherwise an accounting quota.
     */
    enforced?: pulumi.Input<boolean>;
    /**
     * Force creation of quotas on the root of /ifs or percent based quotas.
     */
    force?: pulumi.Input<boolean>;
    /**
     * If true, skip child quota's threshold comparison with parent quota path.
     */
    ignoreLimitChecks?: pulumi.Input<boolean>;
    /**
     * If true, quota governs snapshot data as well as head data.
     */
    includeSnapshots?: pulumi.Input<boolean>;
    /**
     * For user, group and directory quotas, true if the quota is linked and controlled by a parent default-* quota. Linked
     * quotas cannot be modified until they are unlinked. Set linked as true or false to link or unlink quota
     */
    linked?: pulumi.Input<boolean>;
    /**
     * Summary of notifications: 'custom' indicates one or more notification rules available from the notifications
     * sub-resource; 'default' indicates system default rules are used; 'disabled' indicates that no notifications will be used
     * for this quota.; 'badmap' indicates that notification rule has problem in rule map.
     */
    notifications?: pulumi.Input<string>;
    /**
     * The ifs path governed.
     */
    path?: pulumi.Input<string>;
    /**
     * Specifies the persona of the file group. persona is required for user and group type.
     */
    persona?: pulumi.Input<inputs.QuotaPersona>;
    /**
     * True if the default resource accounting is accurate on the quota. If false, this quota is waiting on completion of a
     * QuotaScan job.
     */
    ready?: pulumi.Input<boolean>;
    /**
     * Represents the ratio of logical space provided to physical data space used. This accounts for compression and data
     * deduplication effects.
     */
    reductionRatio?: pulumi.Input<number>;
    /**
     * The thresholds of quota
     */
    thresholds?: pulumi.Input<inputs.QuotaThresholds>;
    /**
     * Thresholds apply on quota accounting metric.
     */
    thresholdsOn?: pulumi.Input<string>;
    /**
     * The type of quota.
     */
    type?: pulumi.Input<string>;
    /**
     * The usage of quota
     */
    usage?: pulumi.Input<inputs.QuotaUsage>;
    /**
     * Optional named zone to use for user and group resolution.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Quota resource.
 */
export interface QuotaArgs {
    /**
     * If true, quotas using the quota directory see the quota thresholds as share size.
     */
    container?: pulumi.Input<boolean>;
    /**
     * True if the quota provides enforcement, otherwise an accounting quota.
     */
    enforced?: pulumi.Input<boolean>;
    /**
     * Force creation of quotas on the root of /ifs or percent based quotas.
     */
    force?: pulumi.Input<boolean>;
    /**
     * If true, skip child quota's threshold comparison with parent quota path.
     */
    ignoreLimitChecks?: pulumi.Input<boolean>;
    /**
     * If true, quota governs snapshot data as well as head data.
     */
    includeSnapshots: pulumi.Input<boolean>;
    /**
     * For user, group and directory quotas, true if the quota is linked and controlled by a parent default-* quota. Linked
     * quotas cannot be modified until they are unlinked. Set linked as true or false to link or unlink quota
     */
    linked?: pulumi.Input<boolean>;
    /**
     * The ifs path governed.
     */
    path: pulumi.Input<string>;
    /**
     * Specifies the persona of the file group. persona is required for user and group type.
     */
    persona?: pulumi.Input<inputs.QuotaPersona>;
    /**
     * The thresholds of quota
     */
    thresholds?: pulumi.Input<inputs.QuotaThresholds>;
    /**
     * Thresholds apply on quota accounting metric.
     */
    thresholdsOn?: pulumi.Input<string>;
    /**
     * The type of quota.
     */
    type: pulumi.Input<string>;
    /**
     * Optional named zone to use for user and group resolution.
     */
    zone?: pulumi.Input<string>;
}
