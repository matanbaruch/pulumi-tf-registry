// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Filesystem extends pulumi.CustomResource {
    /**
     * Get an existing Filesystem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FilesystemState, opts?: pulumi.CustomResourceOptions): Filesystem {
        return new Filesystem(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerscale:index/filesystem:Filesystem';

    /**
     * Returns true if the given object is an instance of Filesystem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Filesystem {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Filesystem.__pulumiType;
    }

    /**
     * The ACL value for the directory. Users can either provide access rights input such as 'private_read' , 'private' ,
     * 'public_read', 'public_read_write', 'public' or permissions in POSIX format as '0550', '0770', '0775','0777' or 0700.
     * The Default value is (0700). (Update Supported but Modification of ACL is only supported from POSIX to POSIX mode)
     */
    public readonly accessControl!: pulumi.Output<string | undefined>;
    /**
     * If the directory has access rights set, then this field returns acl. Otherwise it returns mode.
     */
    public /*out*/ readonly authoritative!: pulumi.Output<string>;
    /**
     * File System Resource Creation time
     */
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    /**
     * FileSystem directory path.This specifies the path to the FileSystem(Namespace directory) which we are trying to manage.
     * If no directory path is specified, [/ifs] would be taken by default.
     */
    public readonly directoryPath!: pulumi.Output<string>;
    /**
     * The full path of the FileSystem
     */
    public readonly fullPath!: pulumi.Output<string>;
    /**
     * The group of the Filesystem.(Update Supported)
     */
    public readonly group!: pulumi.Output<outputs.FilesystemGroup>;
    /**
     * Acl mode
     */
    public /*out*/ readonly mode!: pulumi.Output<string>;
    /**
     * FileSystem directory name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Deletes and replaces the existing user attributes and ACLs of the directory with user-specified attributes if set to
     * true.
     */
    public readonly overwrite!: pulumi.Output<boolean>;
    /**
     * The owner of the Filesystem.(Update Supported)
     */
    public readonly owner!: pulumi.Output<outputs.FilesystemOwner>;
    /**
     * Specifies the zone that the object belongs to. Optional and will default to the default access zone if one is not set.
     */
    public readonly queryZone!: pulumi.Output<string | undefined>;
    /**
     * Creates intermediate folders recursively when set to true.
     */
    public readonly recursive!: pulumi.Output<boolean>;
    /**
     * File System Resource type
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a Filesystem resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FilesystemArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FilesystemArgs | FilesystemState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FilesystemState | undefined;
            resourceInputs["accessControl"] = state ? state.accessControl : undefined;
            resourceInputs["authoritative"] = state ? state.authoritative : undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["directoryPath"] = state ? state.directoryPath : undefined;
            resourceInputs["fullPath"] = state ? state.fullPath : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["overwrite"] = state ? state.overwrite : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["queryZone"] = state ? state.queryZone : undefined;
            resourceInputs["recursive"] = state ? state.recursive : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as FilesystemArgs | undefined;
            if ((!args || args.group === undefined) && !opts.urn) {
                throw new Error("Missing required property 'group'");
            }
            if ((!args || args.owner === undefined) && !opts.urn) {
                throw new Error("Missing required property 'owner'");
            }
            resourceInputs["accessControl"] = args ? args.accessControl : undefined;
            resourceInputs["directoryPath"] = args ? args.directoryPath : undefined;
            resourceInputs["fullPath"] = args ? args.fullPath : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["overwrite"] = args ? args.overwrite : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["queryZone"] = args ? args.queryZone : undefined;
            resourceInputs["recursive"] = args ? args.recursive : undefined;
            resourceInputs["authoritative"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["mode"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Filesystem.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Filesystem resources.
 */
export interface FilesystemState {
    /**
     * The ACL value for the directory. Users can either provide access rights input such as 'private_read' , 'private' ,
     * 'public_read', 'public_read_write', 'public' or permissions in POSIX format as '0550', '0770', '0775','0777' or 0700.
     * The Default value is (0700). (Update Supported but Modification of ACL is only supported from POSIX to POSIX mode)
     */
    accessControl?: pulumi.Input<string>;
    /**
     * If the directory has access rights set, then this field returns acl. Otherwise it returns mode.
     */
    authoritative?: pulumi.Input<string>;
    /**
     * File System Resource Creation time
     */
    creationTime?: pulumi.Input<string>;
    /**
     * FileSystem directory path.This specifies the path to the FileSystem(Namespace directory) which we are trying to manage.
     * If no directory path is specified, [/ifs] would be taken by default.
     */
    directoryPath?: pulumi.Input<string>;
    /**
     * The full path of the FileSystem
     */
    fullPath?: pulumi.Input<string>;
    /**
     * The group of the Filesystem.(Update Supported)
     */
    group?: pulumi.Input<inputs.FilesystemGroup>;
    /**
     * Acl mode
     */
    mode?: pulumi.Input<string>;
    /**
     * FileSystem directory name
     */
    name?: pulumi.Input<string>;
    /**
     * Deletes and replaces the existing user attributes and ACLs of the directory with user-specified attributes if set to
     * true.
     */
    overwrite?: pulumi.Input<boolean>;
    /**
     * The owner of the Filesystem.(Update Supported)
     */
    owner?: pulumi.Input<inputs.FilesystemOwner>;
    /**
     * Specifies the zone that the object belongs to. Optional and will default to the default access zone if one is not set.
     */
    queryZone?: pulumi.Input<string>;
    /**
     * Creates intermediate folders recursively when set to true.
     */
    recursive?: pulumi.Input<boolean>;
    /**
     * File System Resource type
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Filesystem resource.
 */
export interface FilesystemArgs {
    /**
     * The ACL value for the directory. Users can either provide access rights input such as 'private_read' , 'private' ,
     * 'public_read', 'public_read_write', 'public' or permissions in POSIX format as '0550', '0770', '0775','0777' or 0700.
     * The Default value is (0700). (Update Supported but Modification of ACL is only supported from POSIX to POSIX mode)
     */
    accessControl?: pulumi.Input<string>;
    /**
     * FileSystem directory path.This specifies the path to the FileSystem(Namespace directory) which we are trying to manage.
     * If no directory path is specified, [/ifs] would be taken by default.
     */
    directoryPath?: pulumi.Input<string>;
    /**
     * The full path of the FileSystem
     */
    fullPath?: pulumi.Input<string>;
    /**
     * The group of the Filesystem.(Update Supported)
     */
    group: pulumi.Input<inputs.FilesystemGroup>;
    /**
     * FileSystem directory name
     */
    name?: pulumi.Input<string>;
    /**
     * Deletes and replaces the existing user attributes and ACLs of the directory with user-specified attributes if set to
     * true.
     */
    overwrite?: pulumi.Input<boolean>;
    /**
     * The owner of the Filesystem.(Update Supported)
     */
    owner: pulumi.Input<inputs.FilesystemOwner>;
    /**
     * Specifies the zone that the object belongs to. Optional and will default to the default access zone if one is not set.
     */
    queryZone?: pulumi.Input<string>;
    /**
     * Creates intermediate folders recursively when set to true.
     */
    recursive?: pulumi.Input<boolean>;
}
