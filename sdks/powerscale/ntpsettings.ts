// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Ntpsettings extends pulumi.CustomResource {
    /**
     * Get an existing Ntpsettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NtpsettingsState, opts?: pulumi.CustomResourceOptions): Ntpsettings {
        return new Ntpsettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerscale:index/ntpsettings:Ntpsettings';

    /**
     * Returns true if the given object is an instance of Ntpsettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ntpsettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ntpsettings.__pulumiType;
    }

    /**
     * Number of nodes that will contact the NTP servers.
     */
    public readonly chimers!: pulumi.Output<number>;
    /**
     * Node number (LNN) for nodes excluded from chimer duty.
     */
    public readonly excludeds!: pulumi.Output<string[]>;
    /**
     * Path to NTP key file within /ifs.
     */
    public readonly keyFile!: pulumi.Output<string>;

    /**
     * Create a Ntpsettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NtpsettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NtpsettingsArgs | NtpsettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NtpsettingsState | undefined;
            resourceInputs["chimers"] = state ? state.chimers : undefined;
            resourceInputs["excludeds"] = state ? state.excludeds : undefined;
            resourceInputs["keyFile"] = state ? state.keyFile : undefined;
        } else {
            const args = argsOrState as NtpsettingsArgs | undefined;
            resourceInputs["chimers"] = args ? args.chimers : undefined;
            resourceInputs["excludeds"] = args ? args.excludeds : undefined;
            resourceInputs["keyFile"] = args ? args.keyFile : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ntpsettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ntpsettings resources.
 */
export interface NtpsettingsState {
    /**
     * Number of nodes that will contact the NTP servers.
     */
    chimers?: pulumi.Input<number>;
    /**
     * Node number (LNN) for nodes excluded from chimer duty.
     */
    excludeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Path to NTP key file within /ifs.
     */
    keyFile?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ntpsettings resource.
 */
export interface NtpsettingsArgs {
    /**
     * Number of nodes that will contact the NTP servers.
     */
    chimers?: pulumi.Input<number>;
    /**
     * Node number (LNN) for nodes excluded from chimer duty.
     */
    excludeds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Path to NTP key file within /ifs.
     */
    keyFile?: pulumi.Input<string>;
}
