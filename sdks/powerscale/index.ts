// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccesszoneArgs, AccesszoneState } from "./accesszone";
export type Accesszone = import("./accesszone").Accesszone;
export const Accesszone: typeof import("./accesszone").Accesszone = null as any;
utilities.lazyLoad(exports, ["Accesszone"], () => require("./accesszone"));

export { AclsettingsArgs, AclsettingsState } from "./aclsettings";
export type Aclsettings = import("./aclsettings").Aclsettings;
export const Aclsettings: typeof import("./aclsettings").Aclsettings = null as any;
utilities.lazyLoad(exports, ["Aclsettings"], () => require("./aclsettings"));

export { AdsproviderArgs, AdsproviderState } from "./adsprovider";
export type Adsprovider = import("./adsprovider").Adsprovider;
export const Adsprovider: typeof import("./adsprovider").Adsprovider = null as any;
utilities.lazyLoad(exports, ["Adsprovider"], () => require("./adsprovider"));

export { ClusterEmailArgs, ClusterEmailState } from "./clusterEmail";
export type ClusterEmail = import("./clusterEmail").ClusterEmail;
export const ClusterEmail: typeof import("./clusterEmail").ClusterEmail = null as any;
utilities.lazyLoad(exports, ["ClusterEmail"], () => require("./clusterEmail"));

export { FilepoolPolicyArgs, FilepoolPolicyState } from "./filepoolPolicy";
export type FilepoolPolicy = import("./filepoolPolicy").FilepoolPolicy;
export const FilepoolPolicy: typeof import("./filepoolPolicy").FilepoolPolicy = null as any;
utilities.lazyLoad(exports, ["FilepoolPolicy"], () => require("./filepoolPolicy"));

export { FilesystemArgs, FilesystemState } from "./filesystem";
export type Filesystem = import("./filesystem").Filesystem;
export const Filesystem: typeof import("./filesystem").Filesystem = null as any;
utilities.lazyLoad(exports, ["Filesystem"], () => require("./filesystem"));

export { GetAccesszoneArgs, GetAccesszoneResult, GetAccesszoneOutputArgs } from "./getAccesszone";
export const getAccesszone: typeof import("./getAccesszone").getAccesszone = null as any;
export const getAccesszoneOutput: typeof import("./getAccesszone").getAccesszoneOutput = null as any;
utilities.lazyLoad(exports, ["getAccesszone","getAccesszoneOutput"], () => require("./getAccesszone"));

export { GetAclsettingsResult } from "./getAclsettings";
export const getAclsettings: typeof import("./getAclsettings").getAclsettings = null as any;
export const getAclsettingsOutput: typeof import("./getAclsettings").getAclsettingsOutput = null as any;
utilities.lazyLoad(exports, ["getAclsettings","getAclsettingsOutput"], () => require("./getAclsettings"));

export { GetAdsproviderArgs, GetAdsproviderResult, GetAdsproviderOutputArgs } from "./getAdsprovider";
export const getAdsprovider: typeof import("./getAdsprovider").getAdsprovider = null as any;
export const getAdsproviderOutput: typeof import("./getAdsprovider").getAdsproviderOutput = null as any;
utilities.lazyLoad(exports, ["getAdsprovider","getAdsproviderOutput"], () => require("./getAdsprovider"));

export { GetClusterResult } from "./getCluster";
export const getCluster: typeof import("./getCluster").getCluster = null as any;
export const getClusterOutput: typeof import("./getCluster").getClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCluster","getClusterOutput"], () => require("./getCluster"));

export { GetClusterEmailResult } from "./getClusterEmail";
export const getClusterEmail: typeof import("./getClusterEmail").getClusterEmail = null as any;
export const getClusterEmailOutput: typeof import("./getClusterEmail").getClusterEmailOutput = null as any;
utilities.lazyLoad(exports, ["getClusterEmail","getClusterEmailOutput"], () => require("./getClusterEmail"));

export { GetFilepoolPolicyArgs, GetFilepoolPolicyResult, GetFilepoolPolicyOutputArgs } from "./getFilepoolPolicy";
export const getFilepoolPolicy: typeof import("./getFilepoolPolicy").getFilepoolPolicy = null as any;
export const getFilepoolPolicyOutput: typeof import("./getFilepoolPolicy").getFilepoolPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getFilepoolPolicy","getFilepoolPolicyOutput"], () => require("./getFilepoolPolicy"));

export { GetFilesystemArgs, GetFilesystemResult, GetFilesystemOutputArgs } from "./getFilesystem";
export const getFilesystem: typeof import("./getFilesystem").getFilesystem = null as any;
export const getFilesystemOutput: typeof import("./getFilesystem").getFilesystemOutput = null as any;
utilities.lazyLoad(exports, ["getFilesystem","getFilesystemOutput"], () => require("./getFilesystem"));

export { GetGroupnetArgs, GetGroupnetResult, GetGroupnetOutputArgs } from "./getGroupnet";
export const getGroupnet: typeof import("./getGroupnet").getGroupnet = null as any;
export const getGroupnetOutput: typeof import("./getGroupnet").getGroupnetOutput = null as any;
utilities.lazyLoad(exports, ["getGroupnet","getGroupnetOutput"], () => require("./getGroupnet"));

export { GetLdapProviderArgs, GetLdapProviderResult, GetLdapProviderOutputArgs } from "./getLdapProvider";
export const getLdapProvider: typeof import("./getLdapProvider").getLdapProvider = null as any;
export const getLdapProviderOutput: typeof import("./getLdapProvider").getLdapProviderOutput = null as any;
utilities.lazyLoad(exports, ["getLdapProvider","getLdapProviderOutput"], () => require("./getLdapProvider"));

export { GetNamespaceAclArgs, GetNamespaceAclResult, GetNamespaceAclOutputArgs } from "./getNamespaceAcl";
export const getNamespaceAcl: typeof import("./getNamespaceAcl").getNamespaceAcl = null as any;
export const getNamespaceAclOutput: typeof import("./getNamespaceAcl").getNamespaceAclOutput = null as any;
utilities.lazyLoad(exports, ["getNamespaceAcl","getNamespaceAclOutput"], () => require("./getNamespaceAcl"));

export { GetNetworkRuleArgs, GetNetworkRuleResult, GetNetworkRuleOutputArgs } from "./getNetworkRule";
export const getNetworkRule: typeof import("./getNetworkRule").getNetworkRule = null as any;
export const getNetworkRuleOutput: typeof import("./getNetworkRule").getNetworkRuleOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkRule","getNetworkRuleOutput"], () => require("./getNetworkRule"));

export { GetNetworkSettingsResult } from "./getNetworkSettings";
export const getNetworkSettings: typeof import("./getNetworkSettings").getNetworkSettings = null as any;
export const getNetworkSettingsOutput: typeof import("./getNetworkSettings").getNetworkSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkSettings","getNetworkSettingsOutput"], () => require("./getNetworkSettings"));

export { GetNetworkpoolArgs, GetNetworkpoolResult, GetNetworkpoolOutputArgs } from "./getNetworkpool";
export const getNetworkpool: typeof import("./getNetworkpool").getNetworkpool = null as any;
export const getNetworkpoolOutput: typeof import("./getNetworkpool").getNetworkpoolOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkpool","getNetworkpoolOutput"], () => require("./getNetworkpool"));

export { GetNfsExportArgs, GetNfsExportResult, GetNfsExportOutputArgs } from "./getNfsExport";
export const getNfsExport: typeof import("./getNfsExport").getNfsExport = null as any;
export const getNfsExportOutput: typeof import("./getNfsExport").getNfsExportOutput = null as any;
utilities.lazyLoad(exports, ["getNfsExport","getNfsExportOutput"], () => require("./getNfsExport"));

export { GetNfsExportSettingsArgs, GetNfsExportSettingsResult, GetNfsExportSettingsOutputArgs } from "./getNfsExportSettings";
export const getNfsExportSettings: typeof import("./getNfsExportSettings").getNfsExportSettings = null as any;
export const getNfsExportSettingsOutput: typeof import("./getNfsExportSettings").getNfsExportSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getNfsExportSettings","getNfsExportSettingsOutput"], () => require("./getNfsExportSettings"));

export { GetNfsGlobalSettingsResult } from "./getNfsGlobalSettings";
export const getNfsGlobalSettings: typeof import("./getNfsGlobalSettings").getNfsGlobalSettings = null as any;
export const getNfsGlobalSettingsOutput: typeof import("./getNfsGlobalSettings").getNfsGlobalSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getNfsGlobalSettings","getNfsGlobalSettingsOutput"], () => require("./getNfsGlobalSettings"));

export { GetNfsZoneSettingsArgs, GetNfsZoneSettingsResult, GetNfsZoneSettingsOutputArgs } from "./getNfsZoneSettings";
export const getNfsZoneSettings: typeof import("./getNfsZoneSettings").getNfsZoneSettings = null as any;
export const getNfsZoneSettingsOutput: typeof import("./getNfsZoneSettings").getNfsZoneSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getNfsZoneSettings","getNfsZoneSettingsOutput"], () => require("./getNfsZoneSettings"));

export { GetNtpserverArgs, GetNtpserverResult, GetNtpserverOutputArgs } from "./getNtpserver";
export const getNtpserver: typeof import("./getNtpserver").getNtpserver = null as any;
export const getNtpserverOutput: typeof import("./getNtpserver").getNtpserverOutput = null as any;
utilities.lazyLoad(exports, ["getNtpserver","getNtpserverOutput"], () => require("./getNtpserver"));

export { GetNtpsettingsResult } from "./getNtpsettings";
export const getNtpsettings: typeof import("./getNtpsettings").getNtpsettings = null as any;
export const getNtpsettingsOutput: typeof import("./getNtpsettings").getNtpsettingsOutput = null as any;
utilities.lazyLoad(exports, ["getNtpsettings","getNtpsettingsOutput"], () => require("./getNtpsettings"));

export { GetQuotaArgs, GetQuotaResult, GetQuotaOutputArgs } from "./getQuota";
export const getQuota: typeof import("./getQuota").getQuota = null as any;
export const getQuotaOutput: typeof import("./getQuota").getQuotaOutput = null as any;
utilities.lazyLoad(exports, ["getQuota","getQuotaOutput"], () => require("./getQuota"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { GetRoleprivilegeArgs, GetRoleprivilegeResult, GetRoleprivilegeOutputArgs } from "./getRoleprivilege";
export const getRoleprivilege: typeof import("./getRoleprivilege").getRoleprivilege = null as any;
export const getRoleprivilegeOutput: typeof import("./getRoleprivilege").getRoleprivilegeOutput = null as any;
utilities.lazyLoad(exports, ["getRoleprivilege","getRoleprivilegeOutput"], () => require("./getRoleprivilege"));

export { GetS3BucketArgs, GetS3BucketResult, GetS3BucketOutputArgs } from "./getS3Bucket";
export const getS3Bucket: typeof import("./getS3Bucket").getS3Bucket = null as any;
export const getS3BucketOutput: typeof import("./getS3Bucket").getS3BucketOutput = null as any;
utilities.lazyLoad(exports, ["getS3Bucket","getS3BucketOutput"], () => require("./getS3Bucket"));

export { GetSmartpoolSettingsArgs, GetSmartpoolSettingsResult, GetSmartpoolSettingsOutputArgs } from "./getSmartpoolSettings";
export const getSmartpoolSettings: typeof import("./getSmartpoolSettings").getSmartpoolSettings = null as any;
export const getSmartpoolSettingsOutput: typeof import("./getSmartpoolSettings").getSmartpoolSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getSmartpoolSettings","getSmartpoolSettingsOutput"], () => require("./getSmartpoolSettings"));

export { GetSmbServerSettingsArgs, GetSmbServerSettingsResult, GetSmbServerSettingsOutputArgs } from "./getSmbServerSettings";
export const getSmbServerSettings: typeof import("./getSmbServerSettings").getSmbServerSettings = null as any;
export const getSmbServerSettingsOutput: typeof import("./getSmbServerSettings").getSmbServerSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getSmbServerSettings","getSmbServerSettingsOutput"], () => require("./getSmbServerSettings"));

export { GetSmbShareArgs, GetSmbShareResult, GetSmbShareOutputArgs } from "./getSmbShare";
export const getSmbShare: typeof import("./getSmbShare").getSmbShare = null as any;
export const getSmbShareOutput: typeof import("./getSmbShare").getSmbShareOutput = null as any;
utilities.lazyLoad(exports, ["getSmbShare","getSmbShareOutput"], () => require("./getSmbShare"));

export { GetSmbShareSettingsArgs, GetSmbShareSettingsResult, GetSmbShareSettingsOutputArgs } from "./getSmbShareSettings";
export const getSmbShareSettings: typeof import("./getSmbShareSettings").getSmbShareSettings = null as any;
export const getSmbShareSettingsOutput: typeof import("./getSmbShareSettings").getSmbShareSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getSmbShareSettings","getSmbShareSettingsOutput"], () => require("./getSmbShareSettings"));

export { GetSnapshotArgs, GetSnapshotResult, GetSnapshotOutputArgs } from "./getSnapshot";
export const getSnapshot: typeof import("./getSnapshot").getSnapshot = null as any;
export const getSnapshotOutput: typeof import("./getSnapshot").getSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getSnapshot","getSnapshotOutput"], () => require("./getSnapshot"));

export { GetSnapshotScheduleArgs, GetSnapshotScheduleResult, GetSnapshotScheduleOutputArgs } from "./getSnapshotSchedule";
export const getSnapshotSchedule: typeof import("./getSnapshotSchedule").getSnapshotSchedule = null as any;
export const getSnapshotScheduleOutput: typeof import("./getSnapshotSchedule").getSnapshotScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getSnapshotSchedule","getSnapshotScheduleOutput"], () => require("./getSnapshotSchedule"));

export { GetSubnetArgs, GetSubnetResult, GetSubnetOutputArgs } from "./getSubnet";
export const getSubnet: typeof import("./getSubnet").getSubnet = null as any;
export const getSubnetOutput: typeof import("./getSubnet").getSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getSubnet","getSubnetOutput"], () => require("./getSubnet"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUserGroupArgs, GetUserGroupResult, GetUserGroupOutputArgs } from "./getUserGroup";
export const getUserGroup: typeof import("./getUserGroup").getUserGroup = null as any;
export const getUserGroupOutput: typeof import("./getUserGroup").getUserGroupOutput = null as any;
utilities.lazyLoad(exports, ["getUserGroup","getUserGroupOutput"], () => require("./getUserGroup"));

export { GetUserMappingRulesArgs, GetUserMappingRulesResult, GetUserMappingRulesOutputArgs } from "./getUserMappingRules";
export const getUserMappingRules: typeof import("./getUserMappingRules").getUserMappingRules = null as any;
export const getUserMappingRulesOutput: typeof import("./getUserMappingRules").getUserMappingRulesOutput = null as any;
utilities.lazyLoad(exports, ["getUserMappingRules","getUserMappingRulesOutput"], () => require("./getUserMappingRules"));

export { GroupnetArgs, GroupnetState } from "./groupnet";
export type Groupnet = import("./groupnet").Groupnet;
export const Groupnet: typeof import("./groupnet").Groupnet = null as any;
utilities.lazyLoad(exports, ["Groupnet"], () => require("./groupnet"));

export { LdapProviderArgs, LdapProviderState } from "./ldapProvider";
export type LdapProvider = import("./ldapProvider").LdapProvider;
export const LdapProvider: typeof import("./ldapProvider").LdapProvider = null as any;
utilities.lazyLoad(exports, ["LdapProvider"], () => require("./ldapProvider"));

export { NamespaceAclArgs, NamespaceAclState } from "./namespaceAcl";
export type NamespaceAcl = import("./namespaceAcl").NamespaceAcl;
export const NamespaceAcl: typeof import("./namespaceAcl").NamespaceAcl = null as any;
utilities.lazyLoad(exports, ["NamespaceAcl"], () => require("./namespaceAcl"));

export { NetworkRuleArgs, NetworkRuleState } from "./networkRule";
export type NetworkRule = import("./networkRule").NetworkRule;
export const NetworkRule: typeof import("./networkRule").NetworkRule = null as any;
utilities.lazyLoad(exports, ["NetworkRule"], () => require("./networkRule"));

export { NetworkSettingsArgs, NetworkSettingsState } from "./networkSettings";
export type NetworkSettings = import("./networkSettings").NetworkSettings;
export const NetworkSettings: typeof import("./networkSettings").NetworkSettings = null as any;
utilities.lazyLoad(exports, ["NetworkSettings"], () => require("./networkSettings"));

export { NetworkpoolArgs, NetworkpoolState } from "./networkpool";
export type Networkpool = import("./networkpool").Networkpool;
export const Networkpool: typeof import("./networkpool").Networkpool = null as any;
utilities.lazyLoad(exports, ["Networkpool"], () => require("./networkpool"));

export { NfsExportArgs, NfsExportState } from "./nfsExport";
export type NfsExport = import("./nfsExport").NfsExport;
export const NfsExport: typeof import("./nfsExport").NfsExport = null as any;
utilities.lazyLoad(exports, ["NfsExport"], () => require("./nfsExport"));

export { NfsExportSettingsArgs, NfsExportSettingsState } from "./nfsExportSettings";
export type NfsExportSettings = import("./nfsExportSettings").NfsExportSettings;
export const NfsExportSettings: typeof import("./nfsExportSettings").NfsExportSettings = null as any;
utilities.lazyLoad(exports, ["NfsExportSettings"], () => require("./nfsExportSettings"));

export { NfsGlobalSettingsArgs, NfsGlobalSettingsState } from "./nfsGlobalSettings";
export type NfsGlobalSettings = import("./nfsGlobalSettings").NfsGlobalSettings;
export const NfsGlobalSettings: typeof import("./nfsGlobalSettings").NfsGlobalSettings = null as any;
utilities.lazyLoad(exports, ["NfsGlobalSettings"], () => require("./nfsGlobalSettings"));

export { NfsZoneSettingsArgs, NfsZoneSettingsState } from "./nfsZoneSettings";
export type NfsZoneSettings = import("./nfsZoneSettings").NfsZoneSettings;
export const NfsZoneSettings: typeof import("./nfsZoneSettings").NfsZoneSettings = null as any;
utilities.lazyLoad(exports, ["NfsZoneSettings"], () => require("./nfsZoneSettings"));

export { NtpserverArgs, NtpserverState } from "./ntpserver";
export type Ntpserver = import("./ntpserver").Ntpserver;
export const Ntpserver: typeof import("./ntpserver").Ntpserver = null as any;
utilities.lazyLoad(exports, ["Ntpserver"], () => require("./ntpserver"));

export { NtpsettingsArgs, NtpsettingsState } from "./ntpsettings";
export type Ntpsettings = import("./ntpsettings").Ntpsettings;
export const Ntpsettings: typeof import("./ntpsettings").Ntpsettings = null as any;
utilities.lazyLoad(exports, ["Ntpsettings"], () => require("./ntpsettings"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { QuotaArgs, QuotaState } from "./quota";
export type Quota = import("./quota").Quota;
export const Quota: typeof import("./quota").Quota = null as any;
utilities.lazyLoad(exports, ["Quota"], () => require("./quota"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { S3BucketArgs, S3BucketState } from "./s3bucket";
export type S3Bucket = import("./s3bucket").S3Bucket;
export const S3Bucket: typeof import("./s3bucket").S3Bucket = null as any;
utilities.lazyLoad(exports, ["S3Bucket"], () => require("./s3bucket"));

export { SmartpoolSettingsArgs, SmartpoolSettingsState } from "./smartpoolSettings";
export type SmartpoolSettings = import("./smartpoolSettings").SmartpoolSettings;
export const SmartpoolSettings: typeof import("./smartpoolSettings").SmartpoolSettings = null as any;
utilities.lazyLoad(exports, ["SmartpoolSettings"], () => require("./smartpoolSettings"));

export { SmbServerSettingsArgs, SmbServerSettingsState } from "./smbServerSettings";
export type SmbServerSettings = import("./smbServerSettings").SmbServerSettings;
export const SmbServerSettings: typeof import("./smbServerSettings").SmbServerSettings = null as any;
utilities.lazyLoad(exports, ["SmbServerSettings"], () => require("./smbServerSettings"));

export { SmbShareArgs, SmbShareState } from "./smbShare";
export type SmbShare = import("./smbShare").SmbShare;
export const SmbShare: typeof import("./smbShare").SmbShare = null as any;
utilities.lazyLoad(exports, ["SmbShare"], () => require("./smbShare"));

export { SmbShareSettingsArgs, SmbShareSettingsState } from "./smbShareSettings";
export type SmbShareSettings = import("./smbShareSettings").SmbShareSettings;
export const SmbShareSettings: typeof import("./smbShareSettings").SmbShareSettings = null as any;
utilities.lazyLoad(exports, ["SmbShareSettings"], () => require("./smbShareSettings"));

export { SnapshotArgs, SnapshotState } from "./snapshot";
export type Snapshot = import("./snapshot").Snapshot;
export const Snapshot: typeof import("./snapshot").Snapshot = null as any;
utilities.lazyLoad(exports, ["Snapshot"], () => require("./snapshot"));

export { SnapshotScheduleArgs, SnapshotScheduleState } from "./snapshotSchedule";
export type SnapshotSchedule = import("./snapshotSchedule").SnapshotSchedule;
export const SnapshotSchedule: typeof import("./snapshotSchedule").SnapshotSchedule = null as any;
utilities.lazyLoad(exports, ["SnapshotSchedule"], () => require("./snapshotSchedule"));

export { SubnetArgs, SubnetState } from "./subnet";
export type Subnet = import("./subnet").Subnet;
export const Subnet: typeof import("./subnet").Subnet = null as any;
utilities.lazyLoad(exports, ["Subnet"], () => require("./subnet"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserGroupArgs, UserGroupState } from "./userGroup";
export type UserGroup = import("./userGroup").UserGroup;
export const UserGroup: typeof import("./userGroup").UserGroup = null as any;
utilities.lazyLoad(exports, ["UserGroup"], () => require("./userGroup"));

export { UserMappingRulesArgs, UserMappingRulesState } from "./userMappingRules";
export type UserMappingRules = import("./userMappingRules").UserMappingRules;
export const UserMappingRules: typeof import("./userMappingRules").UserMappingRules = null as any;
utilities.lazyLoad(exports, ["UserMappingRules"], () => require("./userMappingRules"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "powerscale:index/accesszone:Accesszone":
                return new Accesszone(name, <any>undefined, { urn })
            case "powerscale:index/aclsettings:Aclsettings":
                return new Aclsettings(name, <any>undefined, { urn })
            case "powerscale:index/adsprovider:Adsprovider":
                return new Adsprovider(name, <any>undefined, { urn })
            case "powerscale:index/clusterEmail:ClusterEmail":
                return new ClusterEmail(name, <any>undefined, { urn })
            case "powerscale:index/filepoolPolicy:FilepoolPolicy":
                return new FilepoolPolicy(name, <any>undefined, { urn })
            case "powerscale:index/filesystem:Filesystem":
                return new Filesystem(name, <any>undefined, { urn })
            case "powerscale:index/groupnet:Groupnet":
                return new Groupnet(name, <any>undefined, { urn })
            case "powerscale:index/ldapProvider:LdapProvider":
                return new LdapProvider(name, <any>undefined, { urn })
            case "powerscale:index/namespaceAcl:NamespaceAcl":
                return new NamespaceAcl(name, <any>undefined, { urn })
            case "powerscale:index/networkRule:NetworkRule":
                return new NetworkRule(name, <any>undefined, { urn })
            case "powerscale:index/networkSettings:NetworkSettings":
                return new NetworkSettings(name, <any>undefined, { urn })
            case "powerscale:index/networkpool:Networkpool":
                return new Networkpool(name, <any>undefined, { urn })
            case "powerscale:index/nfsExport:NfsExport":
                return new NfsExport(name, <any>undefined, { urn })
            case "powerscale:index/nfsExportSettings:NfsExportSettings":
                return new NfsExportSettings(name, <any>undefined, { urn })
            case "powerscale:index/nfsGlobalSettings:NfsGlobalSettings":
                return new NfsGlobalSettings(name, <any>undefined, { urn })
            case "powerscale:index/nfsZoneSettings:NfsZoneSettings":
                return new NfsZoneSettings(name, <any>undefined, { urn })
            case "powerscale:index/ntpserver:Ntpserver":
                return new Ntpserver(name, <any>undefined, { urn })
            case "powerscale:index/ntpsettings:Ntpsettings":
                return new Ntpsettings(name, <any>undefined, { urn })
            case "powerscale:index/quota:Quota":
                return new Quota(name, <any>undefined, { urn })
            case "powerscale:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "powerscale:index/s3Bucket:S3Bucket":
                return new S3Bucket(name, <any>undefined, { urn })
            case "powerscale:index/smartpoolSettings:SmartpoolSettings":
                return new SmartpoolSettings(name, <any>undefined, { urn })
            case "powerscale:index/smbServerSettings:SmbServerSettings":
                return new SmbServerSettings(name, <any>undefined, { urn })
            case "powerscale:index/smbShare:SmbShare":
                return new SmbShare(name, <any>undefined, { urn })
            case "powerscale:index/smbShareSettings:SmbShareSettings":
                return new SmbShareSettings(name, <any>undefined, { urn })
            case "powerscale:index/snapshot:Snapshot":
                return new Snapshot(name, <any>undefined, { urn })
            case "powerscale:index/snapshotSchedule:SnapshotSchedule":
                return new SnapshotSchedule(name, <any>undefined, { urn })
            case "powerscale:index/subnet:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            case "powerscale:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "powerscale:index/userGroup:UserGroup":
                return new UserGroup(name, <any>undefined, { urn })
            case "powerscale:index/userMappingRules:UserMappingRules":
                return new UserMappingRules(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("powerscale", "index/accesszone", _module)
pulumi.runtime.registerResourceModule("powerscale", "index/aclsettings", _module)
pulumi.runtime.registerResourceModule("powerscale", "index/adsprovider", _module)
pulumi.runtime.registerResourceModule("powerscale", "index/clusterEmail", _module)
pulumi.runtime.registerResourceModule("powerscale", "index/filepoolPolicy", _module)
pulumi.runtime.registerResourceModule("powerscale", "index/filesystem", _module)
pulumi.runtime.registerResourceModule("powerscale", "index/groupnet", _module)
pulumi.runtime.registerResourceModule("powerscale", "index/ldapProvider", _module)
pulumi.runtime.registerResourceModule("powerscale", "index/namespaceAcl", _module)
pulumi.runtime.registerResourceModule("powerscale", "index/networkRule", _module)
pulumi.runtime.registerResourceModule("powerscale", "index/networkSettings", _module)
pulumi.runtime.registerResourceModule("powerscale", "index/networkpool", _module)
pulumi.runtime.registerResourceModule("powerscale", "index/nfsExport", _module)
pulumi.runtime.registerResourceModule("powerscale", "index/nfsExportSettings", _module)
pulumi.runtime.registerResourceModule("powerscale", "index/nfsGlobalSettings", _module)
pulumi.runtime.registerResourceModule("powerscale", "index/nfsZoneSettings", _module)
pulumi.runtime.registerResourceModule("powerscale", "index/ntpserver", _module)
pulumi.runtime.registerResourceModule("powerscale", "index/ntpsettings", _module)
pulumi.runtime.registerResourceModule("powerscale", "index/quota", _module)
pulumi.runtime.registerResourceModule("powerscale", "index/role", _module)
pulumi.runtime.registerResourceModule("powerscale", "index/s3Bucket", _module)
pulumi.runtime.registerResourceModule("powerscale", "index/smartpoolSettings", _module)
pulumi.runtime.registerResourceModule("powerscale", "index/smbServerSettings", _module)
pulumi.runtime.registerResourceModule("powerscale", "index/smbShare", _module)
pulumi.runtime.registerResourceModule("powerscale", "index/smbShareSettings", _module)
pulumi.runtime.registerResourceModule("powerscale", "index/snapshot", _module)
pulumi.runtime.registerResourceModule("powerscale", "index/snapshotSchedule", _module)
pulumi.runtime.registerResourceModule("powerscale", "index/subnet", _module)
pulumi.runtime.registerResourceModule("powerscale", "index/user", _module)
pulumi.runtime.registerResourceModule("powerscale", "index/userGroup", _module)
pulumi.runtime.registerResourceModule("powerscale", "index/userMappingRules", _module)
pulumi.runtime.registerResourcePackage("powerscale", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:powerscale") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
