// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Subnet extends pulumi.CustomResource {
    /**
     * Get an existing Subnet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubnetState, opts?: pulumi.CustomResourceOptions): Subnet {
        return new Subnet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerscale:index/subnet:Subnet';

    /**
     * Returns true if the given object is an instance of Subnet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Subnet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Subnet.__pulumiType;
    }

    /**
     * IP address format.
     */
    public readonly addrFamily!: pulumi.Output<string>;
    /**
     * The base IP address.
     */
    public /*out*/ readonly baseAddr!: pulumi.Output<string>;
    /**
     * A description of the subnet.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * List of Direct Server Return addresses.
     */
    public readonly dsrAddrs!: pulumi.Output<string[]>;
    /**
     * Gateway IP address.
     */
    public readonly gateway!: pulumi.Output<string>;
    /**
     * Gateway priority.
     */
    public readonly gatewayPriority!: pulumi.Output<number>;
    /**
     * Name of the groupnet this subnet belongs to. Updating is not allowed.
     */
    public readonly groupnet!: pulumi.Output<string>;
    /**
     * MTU of the subnet.
     */
    public readonly mtu!: pulumi.Output<number>;
    /**
     * The name of the subnet.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Name of the pools in the subnet.
     */
    public /*out*/ readonly pools!: pulumi.Output<string[]>;
    /**
     * Subnet Prefix Length.
     */
    public readonly prefixlen!: pulumi.Output<number>;
    /**
     * List of IP addresses that SmartConnect listens for DNS requests.
     */
    public readonly scServiceAddrs!: pulumi.Output<outputs.SubnetScServiceAddr[]>;
    /**
     * Domain Name corresponding to the SmartConnect Service Address.
     */
    public readonly scServiceName!: pulumi.Output<string>;
    /**
     * VLAN tagging enabled or disabled.
     */
    public readonly vlanEnabled!: pulumi.Output<boolean>;
    /**
     * VLAN ID for all interfaces in the subnet.
     */
    public readonly vlanId!: pulumi.Output<number>;

    /**
     * Create a Subnet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubnetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubnetArgs | SubnetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SubnetState | undefined;
            resourceInputs["addrFamily"] = state ? state.addrFamily : undefined;
            resourceInputs["baseAddr"] = state ? state.baseAddr : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dsrAddrs"] = state ? state.dsrAddrs : undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["gatewayPriority"] = state ? state.gatewayPriority : undefined;
            resourceInputs["groupnet"] = state ? state.groupnet : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pools"] = state ? state.pools : undefined;
            resourceInputs["prefixlen"] = state ? state.prefixlen : undefined;
            resourceInputs["scServiceAddrs"] = state ? state.scServiceAddrs : undefined;
            resourceInputs["scServiceName"] = state ? state.scServiceName : undefined;
            resourceInputs["vlanEnabled"] = state ? state.vlanEnabled : undefined;
            resourceInputs["vlanId"] = state ? state.vlanId : undefined;
        } else {
            const args = argsOrState as SubnetArgs | undefined;
            if ((!args || args.addrFamily === undefined) && !opts.urn) {
                throw new Error("Missing required property 'addrFamily'");
            }
            if ((!args || args.groupnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupnet'");
            }
            if ((!args || args.prefixlen === undefined) && !opts.urn) {
                throw new Error("Missing required property 'prefixlen'");
            }
            resourceInputs["addrFamily"] = args ? args.addrFamily : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dsrAddrs"] = args ? args.dsrAddrs : undefined;
            resourceInputs["gateway"] = args ? args.gateway : undefined;
            resourceInputs["gatewayPriority"] = args ? args.gatewayPriority : undefined;
            resourceInputs["groupnet"] = args ? args.groupnet : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["prefixlen"] = args ? args.prefixlen : undefined;
            resourceInputs["scServiceAddrs"] = args ? args.scServiceAddrs : undefined;
            resourceInputs["scServiceName"] = args ? args.scServiceName : undefined;
            resourceInputs["vlanEnabled"] = args ? args.vlanEnabled : undefined;
            resourceInputs["vlanId"] = args ? args.vlanId : undefined;
            resourceInputs["baseAddr"] = undefined /*out*/;
            resourceInputs["pools"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Subnet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Subnet resources.
 */
export interface SubnetState {
    /**
     * IP address format.
     */
    addrFamily?: pulumi.Input<string>;
    /**
     * The base IP address.
     */
    baseAddr?: pulumi.Input<string>;
    /**
     * A description of the subnet.
     */
    description?: pulumi.Input<string>;
    /**
     * List of Direct Server Return addresses.
     */
    dsrAddrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Gateway IP address.
     */
    gateway?: pulumi.Input<string>;
    /**
     * Gateway priority.
     */
    gatewayPriority?: pulumi.Input<number>;
    /**
     * Name of the groupnet this subnet belongs to. Updating is not allowed.
     */
    groupnet?: pulumi.Input<string>;
    /**
     * MTU of the subnet.
     */
    mtu?: pulumi.Input<number>;
    /**
     * The name of the subnet.
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the pools in the subnet.
     */
    pools?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Subnet Prefix Length.
     */
    prefixlen?: pulumi.Input<number>;
    /**
     * List of IP addresses that SmartConnect listens for DNS requests.
     */
    scServiceAddrs?: pulumi.Input<pulumi.Input<inputs.SubnetScServiceAddr>[]>;
    /**
     * Domain Name corresponding to the SmartConnect Service Address.
     */
    scServiceName?: pulumi.Input<string>;
    /**
     * VLAN tagging enabled or disabled.
     */
    vlanEnabled?: pulumi.Input<boolean>;
    /**
     * VLAN ID for all interfaces in the subnet.
     */
    vlanId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Subnet resource.
 */
export interface SubnetArgs {
    /**
     * IP address format.
     */
    addrFamily: pulumi.Input<string>;
    /**
     * A description of the subnet.
     */
    description?: pulumi.Input<string>;
    /**
     * List of Direct Server Return addresses.
     */
    dsrAddrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Gateway IP address.
     */
    gateway?: pulumi.Input<string>;
    /**
     * Gateway priority.
     */
    gatewayPriority?: pulumi.Input<number>;
    /**
     * Name of the groupnet this subnet belongs to. Updating is not allowed.
     */
    groupnet: pulumi.Input<string>;
    /**
     * MTU of the subnet.
     */
    mtu?: pulumi.Input<number>;
    /**
     * The name of the subnet.
     */
    name?: pulumi.Input<string>;
    /**
     * Subnet Prefix Length.
     */
    prefixlen: pulumi.Input<number>;
    /**
     * List of IP addresses that SmartConnect listens for DNS requests.
     */
    scServiceAddrs?: pulumi.Input<pulumi.Input<inputs.SubnetScServiceAddr>[]>;
    /**
     * Domain Name corresponding to the SmartConnect Service Address.
     */
    scServiceName?: pulumi.Input<string>;
    /**
     * VLAN tagging enabled or disabled.
     */
    vlanEnabled?: pulumi.Input<boolean>;
    /**
     * VLAN ID for all interfaces in the subnet.
     */
    vlanId?: pulumi.Input<number>;
}
