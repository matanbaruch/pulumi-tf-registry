// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SmartpoolSettings extends pulumi.CustomResource {
    /**
     * Get an existing SmartpoolSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SmartpoolSettingsState, opts?: pulumi.CustomResourceOptions): SmartpoolSettings {
        return new SmartpoolSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerscale:index/smartpoolSettings:SmartpoolSettings';

    /**
     * Returns true if the given object is an instance of SmartpoolSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SmartpoolSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SmartpoolSettings.__pulumiType;
    }

    /**
     * Applies to all storagepools that fall back on the default transfer limit. Stop moving files to this pool when this limit
     * is met. The value must be between 0 and 100. Only available for PowerScale 9.5 and above.
     */
    public readonly defaultTransferLimitPct!: pulumi.Output<number>;
    /**
     * How the default transfer limit value is applied. Only available for PowerScale 9.5 and above.
     */
    public readonly defaultTransferLimitState!: pulumi.Output<string>;
    /**
     * Enable global namespace acceleration.
     */
    public readonly globalNamespaceAccelerationEnabled!: pulumi.Output<boolean>;
    /**
     * Whether or not namespace operation optimizations are currently in effect.
     */
    public readonly globalNamespaceAccelerationState!: pulumi.Output<string>;
    /**
     * Manage I/O optimization settings.
     */
    public readonly manageIoOptimization!: pulumi.Output<boolean>;
    /**
     * Apply to files with manually-managed I/O optimization settings.
     */
    public readonly manageIoOptimizationApplyToFiles!: pulumi.Output<boolean>;
    /**
     * Manage protection settings.
     */
    public readonly manageProtection!: pulumi.Output<boolean>;
    /**
     * Apply to files with manually-managed protection.
     */
    public readonly manageProtectionApplyToFiles!: pulumi.Output<boolean>;
    /**
     * Increase directory protection to a higher requested protection than its contents.
     */
    public readonly protectDirectoriesOneLevelHigher!: pulumi.Output<boolean>;
    /**
     * Enable global spillover.
     */
    public readonly spilloverEnabled!: pulumi.Output<boolean>;
    /**
     * Spillover data target.
     */
    public readonly spilloverTarget!: pulumi.Output<outputs.SmartpoolSettingsSpilloverTarget>;
    /**
     * Use SSDs as L3 cache by default for new node pools.
     */
    public readonly ssdL3CacheDefaultEnabled!: pulumi.Output<boolean>;
    /**
     * Controls number of mirrors of QAB blocks to place on SSDs. Acceptable values: one, all
     */
    public readonly ssdQabMirrors!: pulumi.Output<string>;
    /**
     * Controls number of mirrors of system B-tree blocks to place on SSDs. Acceptable values: one, all
     */
    public readonly ssdSystemBtreeMirrors!: pulumi.Output<string>;
    /**
     * Controls number of mirrors of system delta blocks to place on SSDs. Acceptable values: one, all
     */
    public readonly ssdSystemDeltaMirrors!: pulumi.Output<string>;
    /**
     * Deny data writes to reserved disk space
     */
    public readonly virtualHotSpareDenyWrites!: pulumi.Output<boolean>;
    /**
     * Subtract the space reserved for the virtual hot spare when calculating available free space
     */
    public readonly virtualHotSpareHideSpare!: pulumi.Output<boolean>;
    /**
     * The number of drives to reserve for the virtual hot spare, from 0-4.
     */
    public readonly virtualHotSpareLimitDrives!: pulumi.Output<number>;
    /**
     * The percent space to reserve for the virtual hot spare, from 0-20.
     */
    public readonly virtualHotSpareLimitPercent!: pulumi.Output<number>;

    /**
     * Create a SmartpoolSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SmartpoolSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SmartpoolSettingsArgs | SmartpoolSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SmartpoolSettingsState | undefined;
            resourceInputs["defaultTransferLimitPct"] = state ? state.defaultTransferLimitPct : undefined;
            resourceInputs["defaultTransferLimitState"] = state ? state.defaultTransferLimitState : undefined;
            resourceInputs["globalNamespaceAccelerationEnabled"] = state ? state.globalNamespaceAccelerationEnabled : undefined;
            resourceInputs["globalNamespaceAccelerationState"] = state ? state.globalNamespaceAccelerationState : undefined;
            resourceInputs["manageIoOptimization"] = state ? state.manageIoOptimization : undefined;
            resourceInputs["manageIoOptimizationApplyToFiles"] = state ? state.manageIoOptimizationApplyToFiles : undefined;
            resourceInputs["manageProtection"] = state ? state.manageProtection : undefined;
            resourceInputs["manageProtectionApplyToFiles"] = state ? state.manageProtectionApplyToFiles : undefined;
            resourceInputs["protectDirectoriesOneLevelHigher"] = state ? state.protectDirectoriesOneLevelHigher : undefined;
            resourceInputs["spilloverEnabled"] = state ? state.spilloverEnabled : undefined;
            resourceInputs["spilloverTarget"] = state ? state.spilloverTarget : undefined;
            resourceInputs["ssdL3CacheDefaultEnabled"] = state ? state.ssdL3CacheDefaultEnabled : undefined;
            resourceInputs["ssdQabMirrors"] = state ? state.ssdQabMirrors : undefined;
            resourceInputs["ssdSystemBtreeMirrors"] = state ? state.ssdSystemBtreeMirrors : undefined;
            resourceInputs["ssdSystemDeltaMirrors"] = state ? state.ssdSystemDeltaMirrors : undefined;
            resourceInputs["virtualHotSpareDenyWrites"] = state ? state.virtualHotSpareDenyWrites : undefined;
            resourceInputs["virtualHotSpareHideSpare"] = state ? state.virtualHotSpareHideSpare : undefined;
            resourceInputs["virtualHotSpareLimitDrives"] = state ? state.virtualHotSpareLimitDrives : undefined;
            resourceInputs["virtualHotSpareLimitPercent"] = state ? state.virtualHotSpareLimitPercent : undefined;
        } else {
            const args = argsOrState as SmartpoolSettingsArgs | undefined;
            resourceInputs["defaultTransferLimitPct"] = args ? args.defaultTransferLimitPct : undefined;
            resourceInputs["defaultTransferLimitState"] = args ? args.defaultTransferLimitState : undefined;
            resourceInputs["globalNamespaceAccelerationEnabled"] = args ? args.globalNamespaceAccelerationEnabled : undefined;
            resourceInputs["globalNamespaceAccelerationState"] = args ? args.globalNamespaceAccelerationState : undefined;
            resourceInputs["manageIoOptimization"] = args ? args.manageIoOptimization : undefined;
            resourceInputs["manageIoOptimizationApplyToFiles"] = args ? args.manageIoOptimizationApplyToFiles : undefined;
            resourceInputs["manageProtection"] = args ? args.manageProtection : undefined;
            resourceInputs["manageProtectionApplyToFiles"] = args ? args.manageProtectionApplyToFiles : undefined;
            resourceInputs["protectDirectoriesOneLevelHigher"] = args ? args.protectDirectoriesOneLevelHigher : undefined;
            resourceInputs["spilloverEnabled"] = args ? args.spilloverEnabled : undefined;
            resourceInputs["spilloverTarget"] = args ? args.spilloverTarget : undefined;
            resourceInputs["ssdL3CacheDefaultEnabled"] = args ? args.ssdL3CacheDefaultEnabled : undefined;
            resourceInputs["ssdQabMirrors"] = args ? args.ssdQabMirrors : undefined;
            resourceInputs["ssdSystemBtreeMirrors"] = args ? args.ssdSystemBtreeMirrors : undefined;
            resourceInputs["ssdSystemDeltaMirrors"] = args ? args.ssdSystemDeltaMirrors : undefined;
            resourceInputs["virtualHotSpareDenyWrites"] = args ? args.virtualHotSpareDenyWrites : undefined;
            resourceInputs["virtualHotSpareHideSpare"] = args ? args.virtualHotSpareHideSpare : undefined;
            resourceInputs["virtualHotSpareLimitDrives"] = args ? args.virtualHotSpareLimitDrives : undefined;
            resourceInputs["virtualHotSpareLimitPercent"] = args ? args.virtualHotSpareLimitPercent : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SmartpoolSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SmartpoolSettings resources.
 */
export interface SmartpoolSettingsState {
    /**
     * Applies to all storagepools that fall back on the default transfer limit. Stop moving files to this pool when this limit
     * is met. The value must be between 0 and 100. Only available for PowerScale 9.5 and above.
     */
    defaultTransferLimitPct?: pulumi.Input<number>;
    /**
     * How the default transfer limit value is applied. Only available for PowerScale 9.5 and above.
     */
    defaultTransferLimitState?: pulumi.Input<string>;
    /**
     * Enable global namespace acceleration.
     */
    globalNamespaceAccelerationEnabled?: pulumi.Input<boolean>;
    /**
     * Whether or not namespace operation optimizations are currently in effect.
     */
    globalNamespaceAccelerationState?: pulumi.Input<string>;
    /**
     * Manage I/O optimization settings.
     */
    manageIoOptimization?: pulumi.Input<boolean>;
    /**
     * Apply to files with manually-managed I/O optimization settings.
     */
    manageIoOptimizationApplyToFiles?: pulumi.Input<boolean>;
    /**
     * Manage protection settings.
     */
    manageProtection?: pulumi.Input<boolean>;
    /**
     * Apply to files with manually-managed protection.
     */
    manageProtectionApplyToFiles?: pulumi.Input<boolean>;
    /**
     * Increase directory protection to a higher requested protection than its contents.
     */
    protectDirectoriesOneLevelHigher?: pulumi.Input<boolean>;
    /**
     * Enable global spillover.
     */
    spilloverEnabled?: pulumi.Input<boolean>;
    /**
     * Spillover data target.
     */
    spilloverTarget?: pulumi.Input<inputs.SmartpoolSettingsSpilloverTarget>;
    /**
     * Use SSDs as L3 cache by default for new node pools.
     */
    ssdL3CacheDefaultEnabled?: pulumi.Input<boolean>;
    /**
     * Controls number of mirrors of QAB blocks to place on SSDs. Acceptable values: one, all
     */
    ssdQabMirrors?: pulumi.Input<string>;
    /**
     * Controls number of mirrors of system B-tree blocks to place on SSDs. Acceptable values: one, all
     */
    ssdSystemBtreeMirrors?: pulumi.Input<string>;
    /**
     * Controls number of mirrors of system delta blocks to place on SSDs. Acceptable values: one, all
     */
    ssdSystemDeltaMirrors?: pulumi.Input<string>;
    /**
     * Deny data writes to reserved disk space
     */
    virtualHotSpareDenyWrites?: pulumi.Input<boolean>;
    /**
     * Subtract the space reserved for the virtual hot spare when calculating available free space
     */
    virtualHotSpareHideSpare?: pulumi.Input<boolean>;
    /**
     * The number of drives to reserve for the virtual hot spare, from 0-4.
     */
    virtualHotSpareLimitDrives?: pulumi.Input<number>;
    /**
     * The percent space to reserve for the virtual hot spare, from 0-20.
     */
    virtualHotSpareLimitPercent?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SmartpoolSettings resource.
 */
export interface SmartpoolSettingsArgs {
    /**
     * Applies to all storagepools that fall back on the default transfer limit. Stop moving files to this pool when this limit
     * is met. The value must be between 0 and 100. Only available for PowerScale 9.5 and above.
     */
    defaultTransferLimitPct?: pulumi.Input<number>;
    /**
     * How the default transfer limit value is applied. Only available for PowerScale 9.5 and above.
     */
    defaultTransferLimitState?: pulumi.Input<string>;
    /**
     * Enable global namespace acceleration.
     */
    globalNamespaceAccelerationEnabled?: pulumi.Input<boolean>;
    /**
     * Whether or not namespace operation optimizations are currently in effect.
     */
    globalNamespaceAccelerationState?: pulumi.Input<string>;
    /**
     * Manage I/O optimization settings.
     */
    manageIoOptimization?: pulumi.Input<boolean>;
    /**
     * Apply to files with manually-managed I/O optimization settings.
     */
    manageIoOptimizationApplyToFiles?: pulumi.Input<boolean>;
    /**
     * Manage protection settings.
     */
    manageProtection?: pulumi.Input<boolean>;
    /**
     * Apply to files with manually-managed protection.
     */
    manageProtectionApplyToFiles?: pulumi.Input<boolean>;
    /**
     * Increase directory protection to a higher requested protection than its contents.
     */
    protectDirectoriesOneLevelHigher?: pulumi.Input<boolean>;
    /**
     * Enable global spillover.
     */
    spilloverEnabled?: pulumi.Input<boolean>;
    /**
     * Spillover data target.
     */
    spilloverTarget?: pulumi.Input<inputs.SmartpoolSettingsSpilloverTarget>;
    /**
     * Use SSDs as L3 cache by default for new node pools.
     */
    ssdL3CacheDefaultEnabled?: pulumi.Input<boolean>;
    /**
     * Controls number of mirrors of QAB blocks to place on SSDs. Acceptable values: one, all
     */
    ssdQabMirrors?: pulumi.Input<string>;
    /**
     * Controls number of mirrors of system B-tree blocks to place on SSDs. Acceptable values: one, all
     */
    ssdSystemBtreeMirrors?: pulumi.Input<string>;
    /**
     * Controls number of mirrors of system delta blocks to place on SSDs. Acceptable values: one, all
     */
    ssdSystemDeltaMirrors?: pulumi.Input<string>;
    /**
     * Deny data writes to reserved disk space
     */
    virtualHotSpareDenyWrites?: pulumi.Input<boolean>;
    /**
     * Subtract the space reserved for the virtual hot spare when calculating available free space
     */
    virtualHotSpareHideSpare?: pulumi.Input<boolean>;
    /**
     * The number of drives to reserve for the virtual hot spare, from 0-4.
     */
    virtualHotSpareLimitDrives?: pulumi.Input<number>;
    /**
     * The percent space to reserve for the virtual hot spare, from 0-20.
     */
    virtualHotSpareLimitPercent?: pulumi.Input<number>;
}
