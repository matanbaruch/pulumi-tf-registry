// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Networkpool extends pulumi.CustomResource {
    /**
     * Get an existing Networkpool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkpoolState, opts?: pulumi.CustomResourceOptions): Networkpool {
        return new Networkpool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerscale:index/networkpool:Networkpool';

    /**
     * Returns true if the given object is an instance of Networkpool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Networkpool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Networkpool.__pulumiType;
    }

    /**
     * Name of a valid access zone to map IP address pool to the zone.
     */
    public readonly accessZone!: pulumi.Output<string>;
    /**
     * IP address format.
     */
    public /*out*/ readonly addrFamily!: pulumi.Output<string>;
    /**
     * OneFS supports the following NIC aggregation modes.
     */
    public readonly aggregationMode!: pulumi.Output<string>;
    /**
     * Specifies how IP address allocation is done among pool members.
     */
    public readonly allocMethod!: pulumi.Output<string>;
    /**
     * A description of the pool.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Name of the groupnet this pool belongs to. Cannot be modified once designated
     */
    public readonly groupnet!: pulumi.Output<string>;
    /**
     * List of interface members in this pool.
     */
    public readonly ifaces!: pulumi.Output<outputs.NetworkpoolIface[]>;
    /**
     * The name of the pool. It must be unique throughout the given subnet.It's a required field with POST method.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Indicates that pool contains only RDMA RRoCE capable interfaces.
     */
    public readonly nfsv3RroceOnly!: pulumi.Output<boolean>;
    /**
     * List of IP address ranges in this pool.
     */
    public readonly ranges!: pulumi.Output<outputs.NetworkpoolRange[]>;
    /**
     * Rebalance policy..
     */
    public readonly rebalancePolicy!: pulumi.Output<string>;
    /**
     * Names of the rules in this pool.
     */
    public /*out*/ readonly rules!: pulumi.Output<string[]>;
    /**
     * Time delay in seconds before a node which has been automatically unsuspended becomes usable in SmartConnect responses
     * for pool zones.
     */
    public readonly scAutoUnsuspendDelay!: pulumi.Output<number>;
    /**
     * SmartConnect client connection balancing policy.
     */
    public readonly scConnectPolicy!: pulumi.Output<string>;
    /**
     * SmartConnect zone name for the pool.
     */
    public readonly scDnsZone!: pulumi.Output<string>;
    /**
     * List of SmartConnect zone aliases (DNS names) to the pool.
     */
    public readonly scDnsZoneAliases!: pulumi.Output<string[]>;
    /**
     * SmartConnect IP failover policy.
     */
    public readonly scFailoverPolicy!: pulumi.Output<string>;
    /**
     * Name of SmartConnect service subnet for this pool.
     */
    public readonly scSubnet!: pulumi.Output<string>;
    /**
     * List of LNNs showing currently suspended nodes in SmartConnect.
     */
    public /*out*/ readonly scSuspendedNodes!: pulumi.Output<number[]>;
    /**
     * Time to live value for SmartConnect DNS query responses in seconds.
     */
    public readonly scTtl!: pulumi.Output<number>;
    /**
     * List of interface members in this pool.
     */
    public readonly staticRoutes!: pulumi.Output<outputs.NetworkpoolStaticRoute[]>;
    /**
     * The name of the subnet. Cannot be modified once designated
     */
    public readonly subnet!: pulumi.Output<string>;

    /**
     * Create a Networkpool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkpoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkpoolArgs | NetworkpoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkpoolState | undefined;
            resourceInputs["accessZone"] = state ? state.accessZone : undefined;
            resourceInputs["addrFamily"] = state ? state.addrFamily : undefined;
            resourceInputs["aggregationMode"] = state ? state.aggregationMode : undefined;
            resourceInputs["allocMethod"] = state ? state.allocMethod : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["groupnet"] = state ? state.groupnet : undefined;
            resourceInputs["ifaces"] = state ? state.ifaces : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nfsv3RroceOnly"] = state ? state.nfsv3RroceOnly : undefined;
            resourceInputs["ranges"] = state ? state.ranges : undefined;
            resourceInputs["rebalancePolicy"] = state ? state.rebalancePolicy : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["scAutoUnsuspendDelay"] = state ? state.scAutoUnsuspendDelay : undefined;
            resourceInputs["scConnectPolicy"] = state ? state.scConnectPolicy : undefined;
            resourceInputs["scDnsZone"] = state ? state.scDnsZone : undefined;
            resourceInputs["scDnsZoneAliases"] = state ? state.scDnsZoneAliases : undefined;
            resourceInputs["scFailoverPolicy"] = state ? state.scFailoverPolicy : undefined;
            resourceInputs["scSubnet"] = state ? state.scSubnet : undefined;
            resourceInputs["scSuspendedNodes"] = state ? state.scSuspendedNodes : undefined;
            resourceInputs["scTtl"] = state ? state.scTtl : undefined;
            resourceInputs["staticRoutes"] = state ? state.staticRoutes : undefined;
            resourceInputs["subnet"] = state ? state.subnet : undefined;
        } else {
            const args = argsOrState as NetworkpoolArgs | undefined;
            if ((!args || args.groupnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupnet'");
            }
            if ((!args || args.subnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnet'");
            }
            resourceInputs["accessZone"] = args ? args.accessZone : undefined;
            resourceInputs["aggregationMode"] = args ? args.aggregationMode : undefined;
            resourceInputs["allocMethod"] = args ? args.allocMethod : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["groupnet"] = args ? args.groupnet : undefined;
            resourceInputs["ifaces"] = args ? args.ifaces : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nfsv3RroceOnly"] = args ? args.nfsv3RroceOnly : undefined;
            resourceInputs["ranges"] = args ? args.ranges : undefined;
            resourceInputs["rebalancePolicy"] = args ? args.rebalancePolicy : undefined;
            resourceInputs["scAutoUnsuspendDelay"] = args ? args.scAutoUnsuspendDelay : undefined;
            resourceInputs["scConnectPolicy"] = args ? args.scConnectPolicy : undefined;
            resourceInputs["scDnsZone"] = args ? args.scDnsZone : undefined;
            resourceInputs["scDnsZoneAliases"] = args ? args.scDnsZoneAliases : undefined;
            resourceInputs["scFailoverPolicy"] = args ? args.scFailoverPolicy : undefined;
            resourceInputs["scSubnet"] = args ? args.scSubnet : undefined;
            resourceInputs["scTtl"] = args ? args.scTtl : undefined;
            resourceInputs["staticRoutes"] = args ? args.staticRoutes : undefined;
            resourceInputs["subnet"] = args ? args.subnet : undefined;
            resourceInputs["addrFamily"] = undefined /*out*/;
            resourceInputs["rules"] = undefined /*out*/;
            resourceInputs["scSuspendedNodes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Networkpool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Networkpool resources.
 */
export interface NetworkpoolState {
    /**
     * Name of a valid access zone to map IP address pool to the zone.
     */
    accessZone?: pulumi.Input<string>;
    /**
     * IP address format.
     */
    addrFamily?: pulumi.Input<string>;
    /**
     * OneFS supports the following NIC aggregation modes.
     */
    aggregationMode?: pulumi.Input<string>;
    /**
     * Specifies how IP address allocation is done among pool members.
     */
    allocMethod?: pulumi.Input<string>;
    /**
     * A description of the pool.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the groupnet this pool belongs to. Cannot be modified once designated
     */
    groupnet?: pulumi.Input<string>;
    /**
     * List of interface members in this pool.
     */
    ifaces?: pulumi.Input<pulumi.Input<inputs.NetworkpoolIface>[]>;
    /**
     * The name of the pool. It must be unique throughout the given subnet.It's a required field with POST method.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates that pool contains only RDMA RRoCE capable interfaces.
     */
    nfsv3RroceOnly?: pulumi.Input<boolean>;
    /**
     * List of IP address ranges in this pool.
     */
    ranges?: pulumi.Input<pulumi.Input<inputs.NetworkpoolRange>[]>;
    /**
     * Rebalance policy..
     */
    rebalancePolicy?: pulumi.Input<string>;
    /**
     * Names of the rules in this pool.
     */
    rules?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Time delay in seconds before a node which has been automatically unsuspended becomes usable in SmartConnect responses
     * for pool zones.
     */
    scAutoUnsuspendDelay?: pulumi.Input<number>;
    /**
     * SmartConnect client connection balancing policy.
     */
    scConnectPolicy?: pulumi.Input<string>;
    /**
     * SmartConnect zone name for the pool.
     */
    scDnsZone?: pulumi.Input<string>;
    /**
     * List of SmartConnect zone aliases (DNS names) to the pool.
     */
    scDnsZoneAliases?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * SmartConnect IP failover policy.
     */
    scFailoverPolicy?: pulumi.Input<string>;
    /**
     * Name of SmartConnect service subnet for this pool.
     */
    scSubnet?: pulumi.Input<string>;
    /**
     * List of LNNs showing currently suspended nodes in SmartConnect.
     */
    scSuspendedNodes?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Time to live value for SmartConnect DNS query responses in seconds.
     */
    scTtl?: pulumi.Input<number>;
    /**
     * List of interface members in this pool.
     */
    staticRoutes?: pulumi.Input<pulumi.Input<inputs.NetworkpoolStaticRoute>[]>;
    /**
     * The name of the subnet. Cannot be modified once designated
     */
    subnet?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Networkpool resource.
 */
export interface NetworkpoolArgs {
    /**
     * Name of a valid access zone to map IP address pool to the zone.
     */
    accessZone?: pulumi.Input<string>;
    /**
     * OneFS supports the following NIC aggregation modes.
     */
    aggregationMode?: pulumi.Input<string>;
    /**
     * Specifies how IP address allocation is done among pool members.
     */
    allocMethod?: pulumi.Input<string>;
    /**
     * A description of the pool.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the groupnet this pool belongs to. Cannot be modified once designated
     */
    groupnet: pulumi.Input<string>;
    /**
     * List of interface members in this pool.
     */
    ifaces?: pulumi.Input<pulumi.Input<inputs.NetworkpoolIface>[]>;
    /**
     * The name of the pool. It must be unique throughout the given subnet.It's a required field with POST method.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates that pool contains only RDMA RRoCE capable interfaces.
     */
    nfsv3RroceOnly?: pulumi.Input<boolean>;
    /**
     * List of IP address ranges in this pool.
     */
    ranges?: pulumi.Input<pulumi.Input<inputs.NetworkpoolRange>[]>;
    /**
     * Rebalance policy..
     */
    rebalancePolicy?: pulumi.Input<string>;
    /**
     * Time delay in seconds before a node which has been automatically unsuspended becomes usable in SmartConnect responses
     * for pool zones.
     */
    scAutoUnsuspendDelay?: pulumi.Input<number>;
    /**
     * SmartConnect client connection balancing policy.
     */
    scConnectPolicy?: pulumi.Input<string>;
    /**
     * SmartConnect zone name for the pool.
     */
    scDnsZone?: pulumi.Input<string>;
    /**
     * List of SmartConnect zone aliases (DNS names) to the pool.
     */
    scDnsZoneAliases?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * SmartConnect IP failover policy.
     */
    scFailoverPolicy?: pulumi.Input<string>;
    /**
     * Name of SmartConnect service subnet for this pool.
     */
    scSubnet?: pulumi.Input<string>;
    /**
     * Time to live value for SmartConnect DNS query responses in seconds.
     */
    scTtl?: pulumi.Input<number>;
    /**
     * List of interface members in this pool.
     */
    staticRoutes?: pulumi.Input<pulumi.Input<inputs.NetworkpoolStaticRoute>[]>;
    /**
     * The name of the subnet. Cannot be modified once designated
     */
    subnet: pulumi.Input<string>;
}
