// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class UserMappingRules extends pulumi.CustomResource {
    /**
     * Get an existing UserMappingRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserMappingRulesState, opts?: pulumi.CustomResourceOptions): UserMappingRules {
        return new UserMappingRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerscale:index/userMappingRules:UserMappingRules';

    /**
     * Returns true if the given object is an instance of UserMappingRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserMappingRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserMappingRules.__pulumiType;
    }

    /**
     * List of test mapping user result.
     */
    public /*out*/ readonly mappingUsers!: pulumi.Output<outputs.UserMappingRulesMappingUser[]>;
    /**
     * Specifies the parameters for user mapping rules. (Update Supported)
     */
    public readonly parameters!: pulumi.Output<outputs.UserMappingRulesParameters>;
    /**
     * Specifies the list of user mapping rules. (Update Supported)
     */
    public readonly rules!: pulumi.Output<outputs.UserMappingRulesRule[]>;
    /**
     * List of user identity for mapping test. (Update Supported)
     */
    public readonly testMappingUsers!: pulumi.Output<outputs.UserMappingRulesTestMappingUser[] | undefined>;
    /**
     * The zone to which the user mapping applies. (Update Supported)
     */
    public readonly zone!: pulumi.Output<string | undefined>;

    /**
     * Create a UserMappingRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: UserMappingRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserMappingRulesArgs | UserMappingRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserMappingRulesState | undefined;
            resourceInputs["mappingUsers"] = state ? state.mappingUsers : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["testMappingUsers"] = state ? state.testMappingUsers : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as UserMappingRulesArgs | undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["testMappingUsers"] = args ? args.testMappingUsers : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["mappingUsers"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserMappingRules.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering UserMappingRules resources.
 */
export interface UserMappingRulesState {
    /**
     * List of test mapping user result.
     */
    mappingUsers?: pulumi.Input<pulumi.Input<inputs.UserMappingRulesMappingUser>[]>;
    /**
     * Specifies the parameters for user mapping rules. (Update Supported)
     */
    parameters?: pulumi.Input<inputs.UserMappingRulesParameters>;
    /**
     * Specifies the list of user mapping rules. (Update Supported)
     */
    rules?: pulumi.Input<pulumi.Input<inputs.UserMappingRulesRule>[]>;
    /**
     * List of user identity for mapping test. (Update Supported)
     */
    testMappingUsers?: pulumi.Input<pulumi.Input<inputs.UserMappingRulesTestMappingUser>[]>;
    /**
     * The zone to which the user mapping applies. (Update Supported)
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserMappingRules resource.
 */
export interface UserMappingRulesArgs {
    /**
     * Specifies the parameters for user mapping rules. (Update Supported)
     */
    parameters?: pulumi.Input<inputs.UserMappingRulesParameters>;
    /**
     * Specifies the list of user mapping rules. (Update Supported)
     */
    rules?: pulumi.Input<pulumi.Input<inputs.UserMappingRulesRule>[]>;
    /**
     * List of user identity for mapping test. (Update Supported)
     */
    testMappingUsers?: pulumi.Input<pulumi.Input<inputs.UserMappingRulesTestMappingUser>[]>;
    /**
     * The zone to which the user mapping applies. (Update Supported)
     */
    zone?: pulumi.Input<string>;
}
