// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSmartpoolSettings(args?: GetSmartpoolSettingsArgs, opts?: pulumi.InvokeOptions): Promise<GetSmartpoolSettingsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("powerscale:index/getSmartpoolSettings:getSmartpoolSettings", {
        "defaultTransferLimitPct": args.defaultTransferLimitPct,
        "defaultTransferLimitState": args.defaultTransferLimitState,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSmartpoolSettings.
 */
export interface GetSmartpoolSettingsArgs {
    defaultTransferLimitPct?: number;
    defaultTransferLimitState?: string;
}

/**
 * A collection of values returned by getSmartpoolSettings.
 */
export interface GetSmartpoolSettingsResult {
    readonly defaultTransferLimitPct: number;
    readonly defaultTransferLimitState: string;
    readonly globalNamespaceAccelerationEnabled: boolean;
    readonly globalNamespaceAccelerationState: string;
    readonly id: string;
    readonly manageIoOptimization: boolean;
    readonly manageIoOptimizationApplyToFiles: boolean;
    readonly manageProtection: boolean;
    readonly manageProtectionApplyToFiles: boolean;
    readonly protectDirectoriesOneLevelHigher: boolean;
    readonly spilloverEnabled: boolean;
    readonly spilloverTarget: outputs.GetSmartpoolSettingsSpilloverTarget;
    readonly ssdL3CacheDefaultEnabled: boolean;
    readonly ssdQabMirrors: string;
    readonly ssdSystemBtreeMirrors: string;
    readonly ssdSystemDeltaMirrors: string;
    readonly virtualHotSpareDenyWrites: boolean;
    readonly virtualHotSpareHideSpare: boolean;
    readonly virtualHotSpareLimitDrives: number;
    readonly virtualHotSpareLimitPercent: number;
}
export function getSmartpoolSettingsOutput(args?: GetSmartpoolSettingsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSmartpoolSettingsResult> {
    return pulumi.output(args).apply((a: any) => getSmartpoolSettings(a, opts))
}

/**
 * A collection of arguments for invoking getSmartpoolSettings.
 */
export interface GetSmartpoolSettingsOutputArgs {
    defaultTransferLimitPct?: pulumi.Input<number>;
    defaultTransferLimitState?: pulumi.Input<string>;
}
