// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FilepoolPolicy extends pulumi.CustomResource {
    /**
     * Get an existing FilepoolPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FilepoolPolicyState, opts?: pulumi.CustomResourceOptions): FilepoolPolicy {
        return new FilepoolPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerscale:index/filepoolPolicy:FilepoolPolicy';

    /**
     * Returns true if the given object is an instance of FilepoolPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FilepoolPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FilepoolPolicy.__pulumiType;
    }

    /**
     * A list of actions to be taken for matching files. (Update Supported)
     */
    public readonly actions!: pulumi.Output<outputs.FilepoolPolicyAction[] | undefined>;
    /**
     * The order in which this policy should be applied (relative to other policies). (Update Supported)
     */
    public readonly applyOrder!: pulumi.Output<number>;
    /**
     * The guid assigned to the cluster on which the policy was created.
     */
    public /*out*/ readonly birthClusterId!: pulumi.Output<string>;
    /**
     * A description for this File Pool Policy. (Update Supported)
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Specifies the file matching rules for determining which files will be managed by this policy. (Update Supported)
     */
    public readonly fileMatchingPattern!: pulumi.Output<outputs.FilepoolPolicyFileMatchingPattern | undefined>;
    /**
     * Specifies if the policy is default policy. Default policy applies to all files not selected by higher-priority policies.
     */
    public readonly isDefaultPolicy!: pulumi.Output<boolean | undefined>;
    /**
     * A unique name for this policy. If the policy is default policy, its name should be "Default policy". (Update Supported)
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Indicates whether this policy is in a good state ("OK") or disabled ("disabled").
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Gives further information to describe the state of this policy.
     */
    public /*out*/ readonly stateDetails!: pulumi.Output<string>;

    /**
     * Create a FilepoolPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FilepoolPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FilepoolPolicyArgs | FilepoolPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FilepoolPolicyState | undefined;
            resourceInputs["actions"] = state ? state.actions : undefined;
            resourceInputs["applyOrder"] = state ? state.applyOrder : undefined;
            resourceInputs["birthClusterId"] = state ? state.birthClusterId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fileMatchingPattern"] = state ? state.fileMatchingPattern : undefined;
            resourceInputs["isDefaultPolicy"] = state ? state.isDefaultPolicy : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["stateDetails"] = state ? state.stateDetails : undefined;
        } else {
            const args = argsOrState as FilepoolPolicyArgs | undefined;
            resourceInputs["actions"] = args ? args.actions : undefined;
            resourceInputs["applyOrder"] = args ? args.applyOrder : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["fileMatchingPattern"] = args ? args.fileMatchingPattern : undefined;
            resourceInputs["isDefaultPolicy"] = args ? args.isDefaultPolicy : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["birthClusterId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateDetails"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FilepoolPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FilepoolPolicy resources.
 */
export interface FilepoolPolicyState {
    /**
     * A list of actions to be taken for matching files. (Update Supported)
     */
    actions?: pulumi.Input<pulumi.Input<inputs.FilepoolPolicyAction>[]>;
    /**
     * The order in which this policy should be applied (relative to other policies). (Update Supported)
     */
    applyOrder?: pulumi.Input<number>;
    /**
     * The guid assigned to the cluster on which the policy was created.
     */
    birthClusterId?: pulumi.Input<string>;
    /**
     * A description for this File Pool Policy. (Update Supported)
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the file matching rules for determining which files will be managed by this policy. (Update Supported)
     */
    fileMatchingPattern?: pulumi.Input<inputs.FilepoolPolicyFileMatchingPattern>;
    /**
     * Specifies if the policy is default policy. Default policy applies to all files not selected by higher-priority policies.
     */
    isDefaultPolicy?: pulumi.Input<boolean>;
    /**
     * A unique name for this policy. If the policy is default policy, its name should be "Default policy". (Update Supported)
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates whether this policy is in a good state ("OK") or disabled ("disabled").
     */
    state?: pulumi.Input<string>;
    /**
     * Gives further information to describe the state of this policy.
     */
    stateDetails?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FilepoolPolicy resource.
 */
export interface FilepoolPolicyArgs {
    /**
     * A list of actions to be taken for matching files. (Update Supported)
     */
    actions?: pulumi.Input<pulumi.Input<inputs.FilepoolPolicyAction>[]>;
    /**
     * The order in which this policy should be applied (relative to other policies). (Update Supported)
     */
    applyOrder?: pulumi.Input<number>;
    /**
     * A description for this File Pool Policy. (Update Supported)
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the file matching rules for determining which files will be managed by this policy. (Update Supported)
     */
    fileMatchingPattern?: pulumi.Input<inputs.FilepoolPolicyFileMatchingPattern>;
    /**
     * Specifies if the policy is default policy. Default policy applies to all files not selected by higher-priority policies.
     */
    isDefaultPolicy?: pulumi.Input<boolean>;
    /**
     * A unique name for this policy. If the policy is default policy, its name should be "Default policy". (Update Supported)
     */
    name?: pulumi.Input<string>;
}
