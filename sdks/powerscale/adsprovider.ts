// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Adsprovider extends pulumi.CustomResource {
    /**
     * Get an existing Adsprovider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AdsproviderState, opts?: pulumi.CustomResourceOptions): Adsprovider {
        return new Adsprovider(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerscale:index/adsprovider:Adsprovider';

    /**
     * Returns true if the given object is an instance of Adsprovider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Adsprovider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Adsprovider.__pulumiType;
    }

    /**
     * Allocates an ID for an unmapped Active Directory (ADS) group. ADS groups without GIDs can be proactively assigned a GID
     * by the ID mapper. If the ID mapper option is disabled, GIDs are not proactively assigned, and when a primary group for a
     * user does not include a GID, the system may allocate one.
     */
    public readonly allocateGids!: pulumi.Output<boolean>;
    /**
     * Allocates a user ID for an unmapped Active Directory (ADS) user. ADS users without UIDs can be proactively assigned a
     * UID by the ID mapper. IF the ID mapper option is disabled, UIDs are not proactively assigned, and when an identify for a
     * user does not include a UID, the system may allocate one.
     */
    public readonly allocateUids!: pulumi.Output<boolean>;
    /**
     * Enables lookup of unqualified user names in the primary domain.
     */
    public readonly assumeDefaultDomain!: pulumi.Output<boolean>;
    /**
     * Enables authentication and identity management through the authentication provider.
     */
    public readonly authentication!: pulumi.Output<boolean>;
    /**
     * Check for duplicate SPNs registered in Active Directory.
     */
    public readonly checkDuplicates!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the time in seconds between provider online checks.
     */
    public readonly checkOnlineInterval!: pulumi.Output<number>;
    /**
     * Specifies the current time for the domain controllers.
     */
    public readonly controllerTime!: pulumi.Output<number>;
    /**
     * Automatically creates a home directory on the first login.
     */
    public readonly createHomeDirectory!: pulumi.Output<boolean>;
    /**
     * Specifies the DNS search domain. Set this parameter if the DNS search domain has a unique name or address.
     */
    public readonly dnsDomain!: pulumi.Output<string | undefined>;
    /**
     * Specifies the domain controller to which the authentication service should send requests
     */
    public readonly domainController!: pulumi.Output<string | undefined>;
    /**
     * Sends an alert if the domain goes offline.
     */
    public readonly domainOfflineAlerts!: pulumi.Output<boolean>;
    /**
     * Get duplicate SPNs in the provider domain
     */
    public /*out*/ readonly dupSpns!: pulumi.Output<string[]>;
    /**
     * List of additional SPNs to expect beyond what automatic checking routines might find
     */
    public readonly extraExpectedSpns!: pulumi.Output<string[]>;
    /**
     * Sets list of groups that can be resolved.
     */
    public readonly findableGroups!: pulumi.Output<string[]>;
    /**
     * Sets list of users that can be resolved.
     */
    public readonly findableUsers!: pulumi.Output<string[]>;
    /**
     * Specifies the Active Directory forest.
     */
    public /*out*/ readonly forest!: pulumi.Output<string>;
    /**
     * Groupnet identifier.
     */
    public readonly groupnet!: pulumi.Output<string>;
    /**
     * Specifies the path to the home directory template.
     */
    public readonly homeDirectoryTemplate!: pulumi.Output<string>;
    /**
     * Specifies the fully qualified hostname stored in the machine account.
     */
    public /*out*/ readonly hostname!: pulumi.Output<string>;
    /**
     * If set to true, ignores all trusted domains.
     */
    public readonly ignoreAllTrusts!: pulumi.Output<boolean>;
    /**
     * Includes trusted domains when 'ignore_all_trusts' is set to false.
     */
    public readonly ignoredTrustedDomains!: pulumi.Output<string[]>;
    /**
     * Includes trusted domains when 'ignore_all_trusts' is set to true.
     */
    public readonly includeTrustedDomains!: pulumi.Output<string[]>;
    /**
     * Specifies Active Directory provider instance.
     */
    public readonly instance!: pulumi.Output<string | undefined>;
    /**
     * Determines if connecting through HDFS with Kerberos.
     */
    public readonly kerberosHdfsSpn!: pulumi.Output<boolean | undefined>;
    /**
     * Determines if connecting through NFS with Kerberos.
     */
    public readonly kerberosNfsSpn!: pulumi.Output<boolean | undefined>;
    /**
     * Enables encryption and signing on LDAP requests.
     */
    public readonly ldapSignAndSeal!: pulumi.Output<boolean>;
    /**
     * Specifies the login shell path.
     */
    public readonly loginShell!: pulumi.Output<string>;
    /**
     * Limits user and group lookups to the specified domains.
     */
    public readonly lookupDomains!: pulumi.Output<string[]>;
    /**
     * Looks up AD groups in other providers before allocating a group ID.
     */
    public readonly lookupGroups!: pulumi.Output<boolean>;
    /**
     * Normalizes AD group names to lowercase before look up.
     */
    public readonly lookupNormalizeGroups!: pulumi.Output<boolean>;
    /**
     * Normalize AD user names to lowercase before look up.
     */
    public readonly lookupNormalizeUsers!: pulumi.Output<boolean>;
    /**
     * Looks up AD users in other providers before allocating a user ID.
     */
    public readonly lookupUsers!: pulumi.Output<boolean>;
    /**
     * Specifies the machine account name when creating a SAM account with Active Directory.
     */
    public readonly machineAccount!: pulumi.Output<string>;
    /**
     * Enables periodic changes of the machine password for security.
     */
    public readonly machinePasswordChanges!: pulumi.Output<boolean>;
    /**
     * Sets maximum age of a password in seconds.
     */
    public readonly machinePasswordLifespan!: pulumi.Output<number>;
    /**
     * Specifies the Active Directory provider name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the NetBIOS domain name associated with the machine account.
     */
    public /*out*/ readonly netbiosDomain!: pulumi.Output<string>;
    /**
     * Specifies the domain controller for which the node has affinity.
     */
    public readonly nodeDcAffinity!: pulumi.Output<string>;
    /**
     * Specifies the timeout for the domain controller for which the local node has affinity.
     */
    public readonly nodeDcAffinityTimeout!: pulumi.Output<number>;
    /**
     * Enables the Active Directory provider to respond to 'getpwent' and 'getgrent' requests.
     */
    public readonly nssEnumeration!: pulumi.Output<boolean>;
    /**
     * Specifies the organizational unit.
     */
    public readonly organizationalUnit!: pulumi.Output<string | undefined>;
    /**
     * Specifies the password used during domain join.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Specifies the AD domain to which the provider is joined.
     */
    public /*out*/ readonly primaryDomain!: pulumi.Output<string>;
    /**
     * Configuration recommended SPNs.
     */
    public /*out*/ readonly recommendedSpns!: pulumi.Output<string[]>;
    /**
     * Resets the secure channel to the primary domain.
     */
    public readonly resetSchannel!: pulumi.Output<boolean | undefined>;
    /**
     * Check the provider for filtered lists of findable and unfindable users and groups.
     */
    public readonly restrictFindable!: pulumi.Output<boolean>;
    /**
     * The maximum amount of time (in seconds) an RPC call to Active Directory is allowed to take.
     */
    public readonly rpcCallTimeout!: pulumi.Output<number>;
    /**
     * When specified as 'effective', or not specified, all fields are returned. When specified as 'user', only fields with
     * non-default values are shown. When specified as 'default', the original values are returned.
     */
    public readonly scope!: pulumi.Output<string | undefined>;
    /**
     * The number of retries attempted when a call to Active Directory fails due to network error.
     */
    public readonly serverRetryLimit!: pulumi.Output<number>;
    /**
     * Specifies whether to support RFC 2307 attributes on ADS domain controllers.
     */
    public readonly sfuSupport!: pulumi.Output<string>;
    /**
     * Specifies the site for the Active Directory.
     */
    public /*out*/ readonly site!: pulumi.Output<string>;
    /**
     * Currently configured SPNs.
     */
    public readonly spns!: pulumi.Output<string[]>;
    /**
     * Specifies the status of the provider.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Stores SFU mappings permanently in the ID mapper.
     */
    public readonly storeSfuMappings!: pulumi.Output<boolean>;
    /**
     * If set to true, indicates that this provider instance was created by OneFS and cannot be removed.
     */
    public /*out*/ readonly system!: pulumi.Output<boolean>;
    /**
     * Specifies groups that cannot be resolved by the provider.
     */
    public readonly unfindableGroups!: pulumi.Output<string[]>;
    /**
     * Specifies users that cannot be resolved by the provider.
     */
    public readonly unfindableUsers!: pulumi.Output<string[]>;
    /**
     * Specifies the user name that has permission to join a machine to the given domain.
     */
    public readonly user!: pulumi.Output<string>;
    /**
     * Specifies the name of the access zone in which this provider was created.
     */
    public /*out*/ readonly zoneName!: pulumi.Output<string>;

    /**
     * Create a Adsprovider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AdsproviderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AdsproviderArgs | AdsproviderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AdsproviderState | undefined;
            resourceInputs["allocateGids"] = state ? state.allocateGids : undefined;
            resourceInputs["allocateUids"] = state ? state.allocateUids : undefined;
            resourceInputs["assumeDefaultDomain"] = state ? state.assumeDefaultDomain : undefined;
            resourceInputs["authentication"] = state ? state.authentication : undefined;
            resourceInputs["checkDuplicates"] = state ? state.checkDuplicates : undefined;
            resourceInputs["checkOnlineInterval"] = state ? state.checkOnlineInterval : undefined;
            resourceInputs["controllerTime"] = state ? state.controllerTime : undefined;
            resourceInputs["createHomeDirectory"] = state ? state.createHomeDirectory : undefined;
            resourceInputs["dnsDomain"] = state ? state.dnsDomain : undefined;
            resourceInputs["domainController"] = state ? state.domainController : undefined;
            resourceInputs["domainOfflineAlerts"] = state ? state.domainOfflineAlerts : undefined;
            resourceInputs["dupSpns"] = state ? state.dupSpns : undefined;
            resourceInputs["extraExpectedSpns"] = state ? state.extraExpectedSpns : undefined;
            resourceInputs["findableGroups"] = state ? state.findableGroups : undefined;
            resourceInputs["findableUsers"] = state ? state.findableUsers : undefined;
            resourceInputs["forest"] = state ? state.forest : undefined;
            resourceInputs["groupnet"] = state ? state.groupnet : undefined;
            resourceInputs["homeDirectoryTemplate"] = state ? state.homeDirectoryTemplate : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["ignoreAllTrusts"] = state ? state.ignoreAllTrusts : undefined;
            resourceInputs["ignoredTrustedDomains"] = state ? state.ignoredTrustedDomains : undefined;
            resourceInputs["includeTrustedDomains"] = state ? state.includeTrustedDomains : undefined;
            resourceInputs["instance"] = state ? state.instance : undefined;
            resourceInputs["kerberosHdfsSpn"] = state ? state.kerberosHdfsSpn : undefined;
            resourceInputs["kerberosNfsSpn"] = state ? state.kerberosNfsSpn : undefined;
            resourceInputs["ldapSignAndSeal"] = state ? state.ldapSignAndSeal : undefined;
            resourceInputs["loginShell"] = state ? state.loginShell : undefined;
            resourceInputs["lookupDomains"] = state ? state.lookupDomains : undefined;
            resourceInputs["lookupGroups"] = state ? state.lookupGroups : undefined;
            resourceInputs["lookupNormalizeGroups"] = state ? state.lookupNormalizeGroups : undefined;
            resourceInputs["lookupNormalizeUsers"] = state ? state.lookupNormalizeUsers : undefined;
            resourceInputs["lookupUsers"] = state ? state.lookupUsers : undefined;
            resourceInputs["machineAccount"] = state ? state.machineAccount : undefined;
            resourceInputs["machinePasswordChanges"] = state ? state.machinePasswordChanges : undefined;
            resourceInputs["machinePasswordLifespan"] = state ? state.machinePasswordLifespan : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["netbiosDomain"] = state ? state.netbiosDomain : undefined;
            resourceInputs["nodeDcAffinity"] = state ? state.nodeDcAffinity : undefined;
            resourceInputs["nodeDcAffinityTimeout"] = state ? state.nodeDcAffinityTimeout : undefined;
            resourceInputs["nssEnumeration"] = state ? state.nssEnumeration : undefined;
            resourceInputs["organizationalUnit"] = state ? state.organizationalUnit : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["primaryDomain"] = state ? state.primaryDomain : undefined;
            resourceInputs["recommendedSpns"] = state ? state.recommendedSpns : undefined;
            resourceInputs["resetSchannel"] = state ? state.resetSchannel : undefined;
            resourceInputs["restrictFindable"] = state ? state.restrictFindable : undefined;
            resourceInputs["rpcCallTimeout"] = state ? state.rpcCallTimeout : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["serverRetryLimit"] = state ? state.serverRetryLimit : undefined;
            resourceInputs["sfuSupport"] = state ? state.sfuSupport : undefined;
            resourceInputs["site"] = state ? state.site : undefined;
            resourceInputs["spns"] = state ? state.spns : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storeSfuMappings"] = state ? state.storeSfuMappings : undefined;
            resourceInputs["system"] = state ? state.system : undefined;
            resourceInputs["unfindableGroups"] = state ? state.unfindableGroups : undefined;
            resourceInputs["unfindableUsers"] = state ? state.unfindableUsers : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
            resourceInputs["zoneName"] = state ? state.zoneName : undefined;
        } else {
            const args = argsOrState as AdsproviderArgs | undefined;
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.user === undefined) && !opts.urn) {
                throw new Error("Missing required property 'user'");
            }
            resourceInputs["allocateGids"] = args ? args.allocateGids : undefined;
            resourceInputs["allocateUids"] = args ? args.allocateUids : undefined;
            resourceInputs["assumeDefaultDomain"] = args ? args.assumeDefaultDomain : undefined;
            resourceInputs["authentication"] = args ? args.authentication : undefined;
            resourceInputs["checkDuplicates"] = args ? args.checkDuplicates : undefined;
            resourceInputs["checkOnlineInterval"] = args ? args.checkOnlineInterval : undefined;
            resourceInputs["controllerTime"] = args ? args.controllerTime : undefined;
            resourceInputs["createHomeDirectory"] = args ? args.createHomeDirectory : undefined;
            resourceInputs["dnsDomain"] = args ? args.dnsDomain : undefined;
            resourceInputs["domainController"] = args ? args.domainController : undefined;
            resourceInputs["domainOfflineAlerts"] = args ? args.domainOfflineAlerts : undefined;
            resourceInputs["extraExpectedSpns"] = args ? args.extraExpectedSpns : undefined;
            resourceInputs["findableGroups"] = args ? args.findableGroups : undefined;
            resourceInputs["findableUsers"] = args ? args.findableUsers : undefined;
            resourceInputs["groupnet"] = args ? args.groupnet : undefined;
            resourceInputs["homeDirectoryTemplate"] = args ? args.homeDirectoryTemplate : undefined;
            resourceInputs["ignoreAllTrusts"] = args ? args.ignoreAllTrusts : undefined;
            resourceInputs["ignoredTrustedDomains"] = args ? args.ignoredTrustedDomains : undefined;
            resourceInputs["includeTrustedDomains"] = args ? args.includeTrustedDomains : undefined;
            resourceInputs["instance"] = args ? args.instance : undefined;
            resourceInputs["kerberosHdfsSpn"] = args ? args.kerberosHdfsSpn : undefined;
            resourceInputs["kerberosNfsSpn"] = args ? args.kerberosNfsSpn : undefined;
            resourceInputs["ldapSignAndSeal"] = args ? args.ldapSignAndSeal : undefined;
            resourceInputs["loginShell"] = args ? args.loginShell : undefined;
            resourceInputs["lookupDomains"] = args ? args.lookupDomains : undefined;
            resourceInputs["lookupGroups"] = args ? args.lookupGroups : undefined;
            resourceInputs["lookupNormalizeGroups"] = args ? args.lookupNormalizeGroups : undefined;
            resourceInputs["lookupNormalizeUsers"] = args ? args.lookupNormalizeUsers : undefined;
            resourceInputs["lookupUsers"] = args ? args.lookupUsers : undefined;
            resourceInputs["machineAccount"] = args ? args.machineAccount : undefined;
            resourceInputs["machinePasswordChanges"] = args ? args.machinePasswordChanges : undefined;
            resourceInputs["machinePasswordLifespan"] = args ? args.machinePasswordLifespan : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeDcAffinity"] = args ? args.nodeDcAffinity : undefined;
            resourceInputs["nodeDcAffinityTimeout"] = args ? args.nodeDcAffinityTimeout : undefined;
            resourceInputs["nssEnumeration"] = args ? args.nssEnumeration : undefined;
            resourceInputs["organizationalUnit"] = args ? args.organizationalUnit : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["resetSchannel"] = args ? args.resetSchannel : undefined;
            resourceInputs["restrictFindable"] = args ? args.restrictFindable : undefined;
            resourceInputs["rpcCallTimeout"] = args ? args.rpcCallTimeout : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["serverRetryLimit"] = args ? args.serverRetryLimit : undefined;
            resourceInputs["sfuSupport"] = args ? args.sfuSupport : undefined;
            resourceInputs["spns"] = args ? args.spns : undefined;
            resourceInputs["storeSfuMappings"] = args ? args.storeSfuMappings : undefined;
            resourceInputs["unfindableGroups"] = args ? args.unfindableGroups : undefined;
            resourceInputs["unfindableUsers"] = args ? args.unfindableUsers : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
            resourceInputs["dupSpns"] = undefined /*out*/;
            resourceInputs["forest"] = undefined /*out*/;
            resourceInputs["hostname"] = undefined /*out*/;
            resourceInputs["netbiosDomain"] = undefined /*out*/;
            resourceInputs["primaryDomain"] = undefined /*out*/;
            resourceInputs["recommendedSpns"] = undefined /*out*/;
            resourceInputs["site"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["system"] = undefined /*out*/;
            resourceInputs["zoneName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Adsprovider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Adsprovider resources.
 */
export interface AdsproviderState {
    /**
     * Allocates an ID for an unmapped Active Directory (ADS) group. ADS groups without GIDs can be proactively assigned a GID
     * by the ID mapper. If the ID mapper option is disabled, GIDs are not proactively assigned, and when a primary group for a
     * user does not include a GID, the system may allocate one.
     */
    allocateGids?: pulumi.Input<boolean>;
    /**
     * Allocates a user ID for an unmapped Active Directory (ADS) user. ADS users without UIDs can be proactively assigned a
     * UID by the ID mapper. IF the ID mapper option is disabled, UIDs are not proactively assigned, and when an identify for a
     * user does not include a UID, the system may allocate one.
     */
    allocateUids?: pulumi.Input<boolean>;
    /**
     * Enables lookup of unqualified user names in the primary domain.
     */
    assumeDefaultDomain?: pulumi.Input<boolean>;
    /**
     * Enables authentication and identity management through the authentication provider.
     */
    authentication?: pulumi.Input<boolean>;
    /**
     * Check for duplicate SPNs registered in Active Directory.
     */
    checkDuplicates?: pulumi.Input<boolean>;
    /**
     * Specifies the time in seconds between provider online checks.
     */
    checkOnlineInterval?: pulumi.Input<number>;
    /**
     * Specifies the current time for the domain controllers.
     */
    controllerTime?: pulumi.Input<number>;
    /**
     * Automatically creates a home directory on the first login.
     */
    createHomeDirectory?: pulumi.Input<boolean>;
    /**
     * Specifies the DNS search domain. Set this parameter if the DNS search domain has a unique name or address.
     */
    dnsDomain?: pulumi.Input<string>;
    /**
     * Specifies the domain controller to which the authentication service should send requests
     */
    domainController?: pulumi.Input<string>;
    /**
     * Sends an alert if the domain goes offline.
     */
    domainOfflineAlerts?: pulumi.Input<boolean>;
    /**
     * Get duplicate SPNs in the provider domain
     */
    dupSpns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of additional SPNs to expect beyond what automatic checking routines might find
     */
    extraExpectedSpns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Sets list of groups that can be resolved.
     */
    findableGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Sets list of users that can be resolved.
     */
    findableUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the Active Directory forest.
     */
    forest?: pulumi.Input<string>;
    /**
     * Groupnet identifier.
     */
    groupnet?: pulumi.Input<string>;
    /**
     * Specifies the path to the home directory template.
     */
    homeDirectoryTemplate?: pulumi.Input<string>;
    /**
     * Specifies the fully qualified hostname stored in the machine account.
     */
    hostname?: pulumi.Input<string>;
    /**
     * If set to true, ignores all trusted domains.
     */
    ignoreAllTrusts?: pulumi.Input<boolean>;
    /**
     * Includes trusted domains when 'ignore_all_trusts' is set to false.
     */
    ignoredTrustedDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Includes trusted domains when 'ignore_all_trusts' is set to true.
     */
    includeTrustedDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies Active Directory provider instance.
     */
    instance?: pulumi.Input<string>;
    /**
     * Determines if connecting through HDFS with Kerberos.
     */
    kerberosHdfsSpn?: pulumi.Input<boolean>;
    /**
     * Determines if connecting through NFS with Kerberos.
     */
    kerberosNfsSpn?: pulumi.Input<boolean>;
    /**
     * Enables encryption and signing on LDAP requests.
     */
    ldapSignAndSeal?: pulumi.Input<boolean>;
    /**
     * Specifies the login shell path.
     */
    loginShell?: pulumi.Input<string>;
    /**
     * Limits user and group lookups to the specified domains.
     */
    lookupDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Looks up AD groups in other providers before allocating a group ID.
     */
    lookupGroups?: pulumi.Input<boolean>;
    /**
     * Normalizes AD group names to lowercase before look up.
     */
    lookupNormalizeGroups?: pulumi.Input<boolean>;
    /**
     * Normalize AD user names to lowercase before look up.
     */
    lookupNormalizeUsers?: pulumi.Input<boolean>;
    /**
     * Looks up AD users in other providers before allocating a user ID.
     */
    lookupUsers?: pulumi.Input<boolean>;
    /**
     * Specifies the machine account name when creating a SAM account with Active Directory.
     */
    machineAccount?: pulumi.Input<string>;
    /**
     * Enables periodic changes of the machine password for security.
     */
    machinePasswordChanges?: pulumi.Input<boolean>;
    /**
     * Sets maximum age of a password in seconds.
     */
    machinePasswordLifespan?: pulumi.Input<number>;
    /**
     * Specifies the Active Directory provider name.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the NetBIOS domain name associated with the machine account.
     */
    netbiosDomain?: pulumi.Input<string>;
    /**
     * Specifies the domain controller for which the node has affinity.
     */
    nodeDcAffinity?: pulumi.Input<string>;
    /**
     * Specifies the timeout for the domain controller for which the local node has affinity.
     */
    nodeDcAffinityTimeout?: pulumi.Input<number>;
    /**
     * Enables the Active Directory provider to respond to 'getpwent' and 'getgrent' requests.
     */
    nssEnumeration?: pulumi.Input<boolean>;
    /**
     * Specifies the organizational unit.
     */
    organizationalUnit?: pulumi.Input<string>;
    /**
     * Specifies the password used during domain join.
     */
    password?: pulumi.Input<string>;
    /**
     * Specifies the AD domain to which the provider is joined.
     */
    primaryDomain?: pulumi.Input<string>;
    /**
     * Configuration recommended SPNs.
     */
    recommendedSpns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Resets the secure channel to the primary domain.
     */
    resetSchannel?: pulumi.Input<boolean>;
    /**
     * Check the provider for filtered lists of findable and unfindable users and groups.
     */
    restrictFindable?: pulumi.Input<boolean>;
    /**
     * The maximum amount of time (in seconds) an RPC call to Active Directory is allowed to take.
     */
    rpcCallTimeout?: pulumi.Input<number>;
    /**
     * When specified as 'effective', or not specified, all fields are returned. When specified as 'user', only fields with
     * non-default values are shown. When specified as 'default', the original values are returned.
     */
    scope?: pulumi.Input<string>;
    /**
     * The number of retries attempted when a call to Active Directory fails due to network error.
     */
    serverRetryLimit?: pulumi.Input<number>;
    /**
     * Specifies whether to support RFC 2307 attributes on ADS domain controllers.
     */
    sfuSupport?: pulumi.Input<string>;
    /**
     * Specifies the site for the Active Directory.
     */
    site?: pulumi.Input<string>;
    /**
     * Currently configured SPNs.
     */
    spns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the status of the provider.
     */
    status?: pulumi.Input<string>;
    /**
     * Stores SFU mappings permanently in the ID mapper.
     */
    storeSfuMappings?: pulumi.Input<boolean>;
    /**
     * If set to true, indicates that this provider instance was created by OneFS and cannot be removed.
     */
    system?: pulumi.Input<boolean>;
    /**
     * Specifies groups that cannot be resolved by the provider.
     */
    unfindableGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies users that cannot be resolved by the provider.
     */
    unfindableUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the user name that has permission to join a machine to the given domain.
     */
    user?: pulumi.Input<string>;
    /**
     * Specifies the name of the access zone in which this provider was created.
     */
    zoneName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Adsprovider resource.
 */
export interface AdsproviderArgs {
    /**
     * Allocates an ID for an unmapped Active Directory (ADS) group. ADS groups without GIDs can be proactively assigned a GID
     * by the ID mapper. If the ID mapper option is disabled, GIDs are not proactively assigned, and when a primary group for a
     * user does not include a GID, the system may allocate one.
     */
    allocateGids?: pulumi.Input<boolean>;
    /**
     * Allocates a user ID for an unmapped Active Directory (ADS) user. ADS users without UIDs can be proactively assigned a
     * UID by the ID mapper. IF the ID mapper option is disabled, UIDs are not proactively assigned, and when an identify for a
     * user does not include a UID, the system may allocate one.
     */
    allocateUids?: pulumi.Input<boolean>;
    /**
     * Enables lookup of unqualified user names in the primary domain.
     */
    assumeDefaultDomain?: pulumi.Input<boolean>;
    /**
     * Enables authentication and identity management through the authentication provider.
     */
    authentication?: pulumi.Input<boolean>;
    /**
     * Check for duplicate SPNs registered in Active Directory.
     */
    checkDuplicates?: pulumi.Input<boolean>;
    /**
     * Specifies the time in seconds between provider online checks.
     */
    checkOnlineInterval?: pulumi.Input<number>;
    /**
     * Specifies the current time for the domain controllers.
     */
    controllerTime?: pulumi.Input<number>;
    /**
     * Automatically creates a home directory on the first login.
     */
    createHomeDirectory?: pulumi.Input<boolean>;
    /**
     * Specifies the DNS search domain. Set this parameter if the DNS search domain has a unique name or address.
     */
    dnsDomain?: pulumi.Input<string>;
    /**
     * Specifies the domain controller to which the authentication service should send requests
     */
    domainController?: pulumi.Input<string>;
    /**
     * Sends an alert if the domain goes offline.
     */
    domainOfflineAlerts?: pulumi.Input<boolean>;
    /**
     * List of additional SPNs to expect beyond what automatic checking routines might find
     */
    extraExpectedSpns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Sets list of groups that can be resolved.
     */
    findableGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Sets list of users that can be resolved.
     */
    findableUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Groupnet identifier.
     */
    groupnet?: pulumi.Input<string>;
    /**
     * Specifies the path to the home directory template.
     */
    homeDirectoryTemplate?: pulumi.Input<string>;
    /**
     * If set to true, ignores all trusted domains.
     */
    ignoreAllTrusts?: pulumi.Input<boolean>;
    /**
     * Includes trusted domains when 'ignore_all_trusts' is set to false.
     */
    ignoredTrustedDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Includes trusted domains when 'ignore_all_trusts' is set to true.
     */
    includeTrustedDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies Active Directory provider instance.
     */
    instance?: pulumi.Input<string>;
    /**
     * Determines if connecting through HDFS with Kerberos.
     */
    kerberosHdfsSpn?: pulumi.Input<boolean>;
    /**
     * Determines if connecting through NFS with Kerberos.
     */
    kerberosNfsSpn?: pulumi.Input<boolean>;
    /**
     * Enables encryption and signing on LDAP requests.
     */
    ldapSignAndSeal?: pulumi.Input<boolean>;
    /**
     * Specifies the login shell path.
     */
    loginShell?: pulumi.Input<string>;
    /**
     * Limits user and group lookups to the specified domains.
     */
    lookupDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Looks up AD groups in other providers before allocating a group ID.
     */
    lookupGroups?: pulumi.Input<boolean>;
    /**
     * Normalizes AD group names to lowercase before look up.
     */
    lookupNormalizeGroups?: pulumi.Input<boolean>;
    /**
     * Normalize AD user names to lowercase before look up.
     */
    lookupNormalizeUsers?: pulumi.Input<boolean>;
    /**
     * Looks up AD users in other providers before allocating a user ID.
     */
    lookupUsers?: pulumi.Input<boolean>;
    /**
     * Specifies the machine account name when creating a SAM account with Active Directory.
     */
    machineAccount?: pulumi.Input<string>;
    /**
     * Enables periodic changes of the machine password for security.
     */
    machinePasswordChanges?: pulumi.Input<boolean>;
    /**
     * Sets maximum age of a password in seconds.
     */
    machinePasswordLifespan?: pulumi.Input<number>;
    /**
     * Specifies the Active Directory provider name.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the domain controller for which the node has affinity.
     */
    nodeDcAffinity?: pulumi.Input<string>;
    /**
     * Specifies the timeout for the domain controller for which the local node has affinity.
     */
    nodeDcAffinityTimeout?: pulumi.Input<number>;
    /**
     * Enables the Active Directory provider to respond to 'getpwent' and 'getgrent' requests.
     */
    nssEnumeration?: pulumi.Input<boolean>;
    /**
     * Specifies the organizational unit.
     */
    organizationalUnit?: pulumi.Input<string>;
    /**
     * Specifies the password used during domain join.
     */
    password: pulumi.Input<string>;
    /**
     * Resets the secure channel to the primary domain.
     */
    resetSchannel?: pulumi.Input<boolean>;
    /**
     * Check the provider for filtered lists of findable and unfindable users and groups.
     */
    restrictFindable?: pulumi.Input<boolean>;
    /**
     * The maximum amount of time (in seconds) an RPC call to Active Directory is allowed to take.
     */
    rpcCallTimeout?: pulumi.Input<number>;
    /**
     * When specified as 'effective', or not specified, all fields are returned. When specified as 'user', only fields with
     * non-default values are shown. When specified as 'default', the original values are returned.
     */
    scope?: pulumi.Input<string>;
    /**
     * The number of retries attempted when a call to Active Directory fails due to network error.
     */
    serverRetryLimit?: pulumi.Input<number>;
    /**
     * Specifies whether to support RFC 2307 attributes on ADS domain controllers.
     */
    sfuSupport?: pulumi.Input<string>;
    /**
     * Currently configured SPNs.
     */
    spns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Stores SFU mappings permanently in the ID mapper.
     */
    storeSfuMappings?: pulumi.Input<boolean>;
    /**
     * Specifies groups that cannot be resolved by the provider.
     */
    unfindableGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies users that cannot be resolved by the provider.
     */
    unfindableUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the user name that has permission to join a machine to the given domain.
     */
    user: pulumi.Input<string>;
}
