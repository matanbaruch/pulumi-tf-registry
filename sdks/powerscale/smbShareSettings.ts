// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SmbShareSettings extends pulumi.CustomResource {
    /**
     * Get an existing SmbShareSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SmbShareSettingsState, opts?: pulumi.CustomResourceOptions): SmbShareSettings {
        return new SmbShareSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerscale:index/smbShareSettings:SmbShareSettings';

    /**
     * Returns true if the given object is an instance of SmbShareSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SmbShareSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SmbShareSettings.__pulumiType;
    }

    /**
     * Only enumerate files and folders the requesting user has access to.
     */
    public readonly accessBasedEnumeration!: pulumi.Output<boolean>;
    /**
     * Access-based enumeration on only the root directory of the share.
     */
    public readonly accessBasedEnumerationRootOnly!: pulumi.Output<boolean>;
    /**
     * Allow deletion of read-only files in the share.
     */
    public readonly allowDeleteReadonly!: pulumi.Output<boolean>;
    /**
     * Allows users to execute files they have read rights for.
     */
    public readonly allowExecuteAlways!: pulumi.Output<boolean>;
    /**
     * Persistent open timeout for the share.
     */
    public readonly caTimeout!: pulumi.Output<number>;
    /**
     * Specify the level of write-integrity on continuously available shares. Acceptable values: none, write-read-coherent,
     * full
     */
    public readonly caWriteIntegrity!: pulumi.Output<string>;
    /**
     * Specify level of change notification alerts on the share. Acceptable values: all, norecurse, none
     */
    public readonly changeNotify!: pulumi.Output<string>;
    /**
     * Specify if persistent opens are allowed on the share.
     */
    public readonly continuouslyAvailable!: pulumi.Output<boolean>;
    /**
     * Set the create permissions for new files and directories in share. Acceptable values: default acl, inherit mode bits,
     * use create mask and mode
     */
    public readonly createPermissions!: pulumi.Output<string>;
    /**
     * Client-side caching policy for the shares. Acceptable values: manual, documents, programs, none
     */
    public readonly cscPolicy!: pulumi.Output<string>;
    /**
     * Unix umask or mode bits.
     */
    public readonly directoryCreateMask!: pulumi.Output<number>;
    /**
     * Unix umask or mode bits.
     */
    public readonly directoryCreateMode!: pulumi.Output<number>;
    /**
     * Unix umask or mode bits.
     */
    public readonly fileCreateMask!: pulumi.Output<number>;
    /**
     * Unix umask or mode bits.
     */
    public readonly fileCreateMode!: pulumi.Output<number>;
    /**
     * Specifies the list of file extensions.
     */
    public readonly fileFilterExtensions!: pulumi.Output<string[]>;
    /**
     * Specifies if filter list is for deny or allow. Default is deny.
     */
    public readonly fileFilterType!: pulumi.Output<string>;
    /**
     * Enables file filtering on the share.
     */
    public readonly fileFilteringEnabled!: pulumi.Output<boolean>;
    /**
     * Hide files and directories that begin with a period '.'.
     */
    public readonly hideDotFiles!: pulumi.Output<boolean>;
    /**
     * An ACL expressing which hosts are allowed access. A deny clause must be the final entry.
     */
    public readonly hostAcls!: pulumi.Output<string[]>;
    /**
     * Specify the condition in which user access is done as the guest account. Acceptable values: always, bad user, never
     */
    public readonly impersonateGuest!: pulumi.Output<string>;
    /**
     * User account to be used as guest account.
     */
    public readonly impersonateUser!: pulumi.Output<string>;
    /**
     * Specifies the wchar_t starting point for automatic byte mangling.
     */
    public readonly mangleByteStart!: pulumi.Output<number>;
    /**
     * Character mangle map.
     */
    public readonly mangleMaps!: pulumi.Output<string[]>;
    /**
     * Support NTFS ACLs on files and directories.
     */
    public readonly ntfsAclSupport!: pulumi.Output<boolean>;
    /**
     * Allow oplock requests.
     */
    public readonly oplocks!: pulumi.Output<boolean>;
    /**
     * When specified as 'effective', or not specified, all fields are returned. When specified as 'user', only fields with
     * non-default values are shown. When specified as 'default', the original values are returned.
     */
    public readonly scope!: pulumi.Output<string | undefined>;
    /**
     * Enables SMB3 encryption for the share.
     */
    public readonly smb3EncryptionEnabled!: pulumi.Output<boolean>;
    /**
     * Enables sparse file.
     */
    public readonly sparseFile!: pulumi.Output<boolean>;
    /**
     * Specifies if persistent opens would do strict lockout on the share.
     */
    public readonly strictCaLockout!: pulumi.Output<boolean>;
    /**
     * Handle SMB flush operations.
     */
    public readonly strictFlush!: pulumi.Output<boolean>;
    /**
     * Specifies whether byte range locks contend against SMB I/O.
     */
    public readonly strictLocking!: pulumi.Output<boolean>;
    /**
     * Name of the access zone in which to update settings
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a SmbShareSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SmbShareSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SmbShareSettingsArgs | SmbShareSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SmbShareSettingsState | undefined;
            resourceInputs["accessBasedEnumeration"] = state ? state.accessBasedEnumeration : undefined;
            resourceInputs["accessBasedEnumerationRootOnly"] = state ? state.accessBasedEnumerationRootOnly : undefined;
            resourceInputs["allowDeleteReadonly"] = state ? state.allowDeleteReadonly : undefined;
            resourceInputs["allowExecuteAlways"] = state ? state.allowExecuteAlways : undefined;
            resourceInputs["caTimeout"] = state ? state.caTimeout : undefined;
            resourceInputs["caWriteIntegrity"] = state ? state.caWriteIntegrity : undefined;
            resourceInputs["changeNotify"] = state ? state.changeNotify : undefined;
            resourceInputs["continuouslyAvailable"] = state ? state.continuouslyAvailable : undefined;
            resourceInputs["createPermissions"] = state ? state.createPermissions : undefined;
            resourceInputs["cscPolicy"] = state ? state.cscPolicy : undefined;
            resourceInputs["directoryCreateMask"] = state ? state.directoryCreateMask : undefined;
            resourceInputs["directoryCreateMode"] = state ? state.directoryCreateMode : undefined;
            resourceInputs["fileCreateMask"] = state ? state.fileCreateMask : undefined;
            resourceInputs["fileCreateMode"] = state ? state.fileCreateMode : undefined;
            resourceInputs["fileFilterExtensions"] = state ? state.fileFilterExtensions : undefined;
            resourceInputs["fileFilterType"] = state ? state.fileFilterType : undefined;
            resourceInputs["fileFilteringEnabled"] = state ? state.fileFilteringEnabled : undefined;
            resourceInputs["hideDotFiles"] = state ? state.hideDotFiles : undefined;
            resourceInputs["hostAcls"] = state ? state.hostAcls : undefined;
            resourceInputs["impersonateGuest"] = state ? state.impersonateGuest : undefined;
            resourceInputs["impersonateUser"] = state ? state.impersonateUser : undefined;
            resourceInputs["mangleByteStart"] = state ? state.mangleByteStart : undefined;
            resourceInputs["mangleMaps"] = state ? state.mangleMaps : undefined;
            resourceInputs["ntfsAclSupport"] = state ? state.ntfsAclSupport : undefined;
            resourceInputs["oplocks"] = state ? state.oplocks : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["smb3EncryptionEnabled"] = state ? state.smb3EncryptionEnabled : undefined;
            resourceInputs["sparseFile"] = state ? state.sparseFile : undefined;
            resourceInputs["strictCaLockout"] = state ? state.strictCaLockout : undefined;
            resourceInputs["strictFlush"] = state ? state.strictFlush : undefined;
            resourceInputs["strictLocking"] = state ? state.strictLocking : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as SmbShareSettingsArgs | undefined;
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["accessBasedEnumeration"] = args ? args.accessBasedEnumeration : undefined;
            resourceInputs["accessBasedEnumerationRootOnly"] = args ? args.accessBasedEnumerationRootOnly : undefined;
            resourceInputs["allowDeleteReadonly"] = args ? args.allowDeleteReadonly : undefined;
            resourceInputs["allowExecuteAlways"] = args ? args.allowExecuteAlways : undefined;
            resourceInputs["caTimeout"] = args ? args.caTimeout : undefined;
            resourceInputs["caWriteIntegrity"] = args ? args.caWriteIntegrity : undefined;
            resourceInputs["changeNotify"] = args ? args.changeNotify : undefined;
            resourceInputs["continuouslyAvailable"] = args ? args.continuouslyAvailable : undefined;
            resourceInputs["createPermissions"] = args ? args.createPermissions : undefined;
            resourceInputs["cscPolicy"] = args ? args.cscPolicy : undefined;
            resourceInputs["directoryCreateMask"] = args ? args.directoryCreateMask : undefined;
            resourceInputs["directoryCreateMode"] = args ? args.directoryCreateMode : undefined;
            resourceInputs["fileCreateMask"] = args ? args.fileCreateMask : undefined;
            resourceInputs["fileCreateMode"] = args ? args.fileCreateMode : undefined;
            resourceInputs["fileFilterExtensions"] = args ? args.fileFilterExtensions : undefined;
            resourceInputs["fileFilterType"] = args ? args.fileFilterType : undefined;
            resourceInputs["fileFilteringEnabled"] = args ? args.fileFilteringEnabled : undefined;
            resourceInputs["hideDotFiles"] = args ? args.hideDotFiles : undefined;
            resourceInputs["hostAcls"] = args ? args.hostAcls : undefined;
            resourceInputs["impersonateGuest"] = args ? args.impersonateGuest : undefined;
            resourceInputs["impersonateUser"] = args ? args.impersonateUser : undefined;
            resourceInputs["mangleByteStart"] = args ? args.mangleByteStart : undefined;
            resourceInputs["mangleMaps"] = args ? args.mangleMaps : undefined;
            resourceInputs["ntfsAclSupport"] = args ? args.ntfsAclSupport : undefined;
            resourceInputs["oplocks"] = args ? args.oplocks : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["smb3EncryptionEnabled"] = args ? args.smb3EncryptionEnabled : undefined;
            resourceInputs["sparseFile"] = args ? args.sparseFile : undefined;
            resourceInputs["strictCaLockout"] = args ? args.strictCaLockout : undefined;
            resourceInputs["strictFlush"] = args ? args.strictFlush : undefined;
            resourceInputs["strictLocking"] = args ? args.strictLocking : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SmbShareSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SmbShareSettings resources.
 */
export interface SmbShareSettingsState {
    /**
     * Only enumerate files and folders the requesting user has access to.
     */
    accessBasedEnumeration?: pulumi.Input<boolean>;
    /**
     * Access-based enumeration on only the root directory of the share.
     */
    accessBasedEnumerationRootOnly?: pulumi.Input<boolean>;
    /**
     * Allow deletion of read-only files in the share.
     */
    allowDeleteReadonly?: pulumi.Input<boolean>;
    /**
     * Allows users to execute files they have read rights for.
     */
    allowExecuteAlways?: pulumi.Input<boolean>;
    /**
     * Persistent open timeout for the share.
     */
    caTimeout?: pulumi.Input<number>;
    /**
     * Specify the level of write-integrity on continuously available shares. Acceptable values: none, write-read-coherent,
     * full
     */
    caWriteIntegrity?: pulumi.Input<string>;
    /**
     * Specify level of change notification alerts on the share. Acceptable values: all, norecurse, none
     */
    changeNotify?: pulumi.Input<string>;
    /**
     * Specify if persistent opens are allowed on the share.
     */
    continuouslyAvailable?: pulumi.Input<boolean>;
    /**
     * Set the create permissions for new files and directories in share. Acceptable values: default acl, inherit mode bits,
     * use create mask and mode
     */
    createPermissions?: pulumi.Input<string>;
    /**
     * Client-side caching policy for the shares. Acceptable values: manual, documents, programs, none
     */
    cscPolicy?: pulumi.Input<string>;
    /**
     * Unix umask or mode bits.
     */
    directoryCreateMask?: pulumi.Input<number>;
    /**
     * Unix umask or mode bits.
     */
    directoryCreateMode?: pulumi.Input<number>;
    /**
     * Unix umask or mode bits.
     */
    fileCreateMask?: pulumi.Input<number>;
    /**
     * Unix umask or mode bits.
     */
    fileCreateMode?: pulumi.Input<number>;
    /**
     * Specifies the list of file extensions.
     */
    fileFilterExtensions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies if filter list is for deny or allow. Default is deny.
     */
    fileFilterType?: pulumi.Input<string>;
    /**
     * Enables file filtering on the share.
     */
    fileFilteringEnabled?: pulumi.Input<boolean>;
    /**
     * Hide files and directories that begin with a period '.'.
     */
    hideDotFiles?: pulumi.Input<boolean>;
    /**
     * An ACL expressing which hosts are allowed access. A deny clause must be the final entry.
     */
    hostAcls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specify the condition in which user access is done as the guest account. Acceptable values: always, bad user, never
     */
    impersonateGuest?: pulumi.Input<string>;
    /**
     * User account to be used as guest account.
     */
    impersonateUser?: pulumi.Input<string>;
    /**
     * Specifies the wchar_t starting point for automatic byte mangling.
     */
    mangleByteStart?: pulumi.Input<number>;
    /**
     * Character mangle map.
     */
    mangleMaps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Support NTFS ACLs on files and directories.
     */
    ntfsAclSupport?: pulumi.Input<boolean>;
    /**
     * Allow oplock requests.
     */
    oplocks?: pulumi.Input<boolean>;
    /**
     * When specified as 'effective', or not specified, all fields are returned. When specified as 'user', only fields with
     * non-default values are shown. When specified as 'default', the original values are returned.
     */
    scope?: pulumi.Input<string>;
    /**
     * Enables SMB3 encryption for the share.
     */
    smb3EncryptionEnabled?: pulumi.Input<boolean>;
    /**
     * Enables sparse file.
     */
    sparseFile?: pulumi.Input<boolean>;
    /**
     * Specifies if persistent opens would do strict lockout on the share.
     */
    strictCaLockout?: pulumi.Input<boolean>;
    /**
     * Handle SMB flush operations.
     */
    strictFlush?: pulumi.Input<boolean>;
    /**
     * Specifies whether byte range locks contend against SMB I/O.
     */
    strictLocking?: pulumi.Input<boolean>;
    /**
     * Name of the access zone in which to update settings
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SmbShareSettings resource.
 */
export interface SmbShareSettingsArgs {
    /**
     * Only enumerate files and folders the requesting user has access to.
     */
    accessBasedEnumeration?: pulumi.Input<boolean>;
    /**
     * Access-based enumeration on only the root directory of the share.
     */
    accessBasedEnumerationRootOnly?: pulumi.Input<boolean>;
    /**
     * Allow deletion of read-only files in the share.
     */
    allowDeleteReadonly?: pulumi.Input<boolean>;
    /**
     * Allows users to execute files they have read rights for.
     */
    allowExecuteAlways?: pulumi.Input<boolean>;
    /**
     * Persistent open timeout for the share.
     */
    caTimeout?: pulumi.Input<number>;
    /**
     * Specify the level of write-integrity on continuously available shares. Acceptable values: none, write-read-coherent,
     * full
     */
    caWriteIntegrity?: pulumi.Input<string>;
    /**
     * Specify level of change notification alerts on the share. Acceptable values: all, norecurse, none
     */
    changeNotify?: pulumi.Input<string>;
    /**
     * Specify if persistent opens are allowed on the share.
     */
    continuouslyAvailable?: pulumi.Input<boolean>;
    /**
     * Set the create permissions for new files and directories in share. Acceptable values: default acl, inherit mode bits,
     * use create mask and mode
     */
    createPermissions?: pulumi.Input<string>;
    /**
     * Client-side caching policy for the shares. Acceptable values: manual, documents, programs, none
     */
    cscPolicy?: pulumi.Input<string>;
    /**
     * Unix umask or mode bits.
     */
    directoryCreateMask?: pulumi.Input<number>;
    /**
     * Unix umask or mode bits.
     */
    directoryCreateMode?: pulumi.Input<number>;
    /**
     * Unix umask or mode bits.
     */
    fileCreateMask?: pulumi.Input<number>;
    /**
     * Unix umask or mode bits.
     */
    fileCreateMode?: pulumi.Input<number>;
    /**
     * Specifies the list of file extensions.
     */
    fileFilterExtensions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies if filter list is for deny or allow. Default is deny.
     */
    fileFilterType?: pulumi.Input<string>;
    /**
     * Enables file filtering on the share.
     */
    fileFilteringEnabled?: pulumi.Input<boolean>;
    /**
     * Hide files and directories that begin with a period '.'.
     */
    hideDotFiles?: pulumi.Input<boolean>;
    /**
     * An ACL expressing which hosts are allowed access. A deny clause must be the final entry.
     */
    hostAcls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specify the condition in which user access is done as the guest account. Acceptable values: always, bad user, never
     */
    impersonateGuest?: pulumi.Input<string>;
    /**
     * User account to be used as guest account.
     */
    impersonateUser?: pulumi.Input<string>;
    /**
     * Specifies the wchar_t starting point for automatic byte mangling.
     */
    mangleByteStart?: pulumi.Input<number>;
    /**
     * Character mangle map.
     */
    mangleMaps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Support NTFS ACLs on files and directories.
     */
    ntfsAclSupport?: pulumi.Input<boolean>;
    /**
     * Allow oplock requests.
     */
    oplocks?: pulumi.Input<boolean>;
    /**
     * When specified as 'effective', or not specified, all fields are returned. When specified as 'user', only fields with
     * non-default values are shown. When specified as 'default', the original values are returned.
     */
    scope?: pulumi.Input<string>;
    /**
     * Enables SMB3 encryption for the share.
     */
    smb3EncryptionEnabled?: pulumi.Input<boolean>;
    /**
     * Enables sparse file.
     */
    sparseFile?: pulumi.Input<boolean>;
    /**
     * Specifies if persistent opens would do strict lockout on the share.
     */
    strictCaLockout?: pulumi.Input<boolean>;
    /**
     * Handle SMB flush operations.
     */
    strictFlush?: pulumi.Input<boolean>;
    /**
     * Specifies whether byte range locks contend against SMB I/O.
     */
    strictLocking?: pulumi.Input<boolean>;
    /**
     * Name of the access zone in which to update settings
     */
    zone: pulumi.Input<string>;
}
