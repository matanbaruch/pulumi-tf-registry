// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getPropertyActivation(args: GetPropertyActivationArgs, opts?: pulumi.InvokeOptions): Promise<GetPropertyActivationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("akamai:index/getPropertyActivation:getPropertyActivation", {
        "id": args.id,
        "network": args.network,
        "propertyId": args.propertyId,
        "version": args.version,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPropertyActivation.
 */
export interface GetPropertyActivationArgs {
    id?: string;
    network?: string;
    propertyId: string;
    version?: number;
}

/**
 * A collection of values returned by getPropertyActivation.
 */
export interface GetPropertyActivationResult {
    readonly activationId: string;
    readonly contacts: string[];
    readonly errors: string;
    readonly id: string;
    readonly network?: string;
    readonly note: string;
    readonly propertyId: string;
    readonly status: string;
    readonly version?: number;
    readonly warnings: string;
}
export function getPropertyActivationOutput(args: GetPropertyActivationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPropertyActivationResult> {
    return pulumi.output(args).apply((a: any) => getPropertyActivation(a, opts))
}

/**
 * A collection of arguments for invoking getPropertyActivation.
 */
export interface GetPropertyActivationOutputArgs {
    id?: pulumi.Input<string>;
    network?: pulumi.Input<string>;
    propertyId: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}
