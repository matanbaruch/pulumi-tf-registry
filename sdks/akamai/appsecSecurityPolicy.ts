// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AppsecSecurityPolicy extends pulumi.CustomResource {
    /**
     * Get an existing AppsecSecurityPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppsecSecurityPolicyState, opts?: pulumi.CustomResourceOptions): AppsecSecurityPolicy {
        return new AppsecSecurityPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/appsecSecurityPolicy:AppsecSecurityPolicy';

    /**
     * Returns true if the given object is an instance of AppsecSecurityPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppsecSecurityPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppsecSecurityPolicy.__pulumiType;
    }

    /**
     * Unique identifier of the security configuration
     */
    public readonly configId!: pulumi.Output<number>;
    /**
     * Unique identifier of the existing security policy being cloned
     */
    public readonly createFromSecurityPolicyId!: pulumi.Output<string | undefined>;
    /**
     * Whether to assign default settings to the new security policy
     */
    public readonly defaultSettings!: pulumi.Output<boolean | undefined>;
    /**
     * Unique identifier of the new security policy
     */
    public /*out*/ readonly securityPolicyId!: pulumi.Output<string>;
    /**
     * Name of the new security policy
     */
    public readonly securityPolicyName!: pulumi.Output<string>;
    /**
     * Four-character alphanumeric string prefix used in creating the security policy ID
     */
    public readonly securityPolicyPrefix!: pulumi.Output<string>;

    /**
     * Create a AppsecSecurityPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppsecSecurityPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppsecSecurityPolicyArgs | AppsecSecurityPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppsecSecurityPolicyState | undefined;
            resourceInputs["configId"] = state ? state.configId : undefined;
            resourceInputs["createFromSecurityPolicyId"] = state ? state.createFromSecurityPolicyId : undefined;
            resourceInputs["defaultSettings"] = state ? state.defaultSettings : undefined;
            resourceInputs["securityPolicyId"] = state ? state.securityPolicyId : undefined;
            resourceInputs["securityPolicyName"] = state ? state.securityPolicyName : undefined;
            resourceInputs["securityPolicyPrefix"] = state ? state.securityPolicyPrefix : undefined;
        } else {
            const args = argsOrState as AppsecSecurityPolicyArgs | undefined;
            if ((!args || args.configId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configId'");
            }
            if ((!args || args.securityPolicyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityPolicyName'");
            }
            if ((!args || args.securityPolicyPrefix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityPolicyPrefix'");
            }
            resourceInputs["configId"] = args ? args.configId : undefined;
            resourceInputs["createFromSecurityPolicyId"] = args ? args.createFromSecurityPolicyId : undefined;
            resourceInputs["defaultSettings"] = args ? args.defaultSettings : undefined;
            resourceInputs["securityPolicyName"] = args ? args.securityPolicyName : undefined;
            resourceInputs["securityPolicyPrefix"] = args ? args.securityPolicyPrefix : undefined;
            resourceInputs["securityPolicyId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppsecSecurityPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AppsecSecurityPolicy resources.
 */
export interface AppsecSecurityPolicyState {
    /**
     * Unique identifier of the security configuration
     */
    configId?: pulumi.Input<number>;
    /**
     * Unique identifier of the existing security policy being cloned
     */
    createFromSecurityPolicyId?: pulumi.Input<string>;
    /**
     * Whether to assign default settings to the new security policy
     */
    defaultSettings?: pulumi.Input<boolean>;
    /**
     * Unique identifier of the new security policy
     */
    securityPolicyId?: pulumi.Input<string>;
    /**
     * Name of the new security policy
     */
    securityPolicyName?: pulumi.Input<string>;
    /**
     * Four-character alphanumeric string prefix used in creating the security policy ID
     */
    securityPolicyPrefix?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AppsecSecurityPolicy resource.
 */
export interface AppsecSecurityPolicyArgs {
    /**
     * Unique identifier of the security configuration
     */
    configId: pulumi.Input<number>;
    /**
     * Unique identifier of the existing security policy being cloned
     */
    createFromSecurityPolicyId?: pulumi.Input<string>;
    /**
     * Whether to assign default settings to the new security policy
     */
    defaultSettings?: pulumi.Input<boolean>;
    /**
     * Name of the new security policy
     */
    securityPolicyName: pulumi.Input<string>;
    /**
     * Four-character alphanumeric string prefix used in creating the security policy ID
     */
    securityPolicyPrefix: pulumi.Input<string>;
}
