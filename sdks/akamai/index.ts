// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AppsecActivationsArgs, AppsecActivationsState } from "./appsecActivations";
export type AppsecActivations = import("./appsecActivations").AppsecActivations;
export const AppsecActivations: typeof import("./appsecActivations").AppsecActivations = null as any;
utilities.lazyLoad(exports, ["AppsecActivations"], () => require("./appsecActivations"));

export { AppsecAdvancedSettingsAttackPayloadLoggingArgs, AppsecAdvancedSettingsAttackPayloadLoggingState } from "./appsecAdvancedSettingsAttackPayloadLogging";
export type AppsecAdvancedSettingsAttackPayloadLogging = import("./appsecAdvancedSettingsAttackPayloadLogging").AppsecAdvancedSettingsAttackPayloadLogging;
export const AppsecAdvancedSettingsAttackPayloadLogging: typeof import("./appsecAdvancedSettingsAttackPayloadLogging").AppsecAdvancedSettingsAttackPayloadLogging = null as any;
utilities.lazyLoad(exports, ["AppsecAdvancedSettingsAttackPayloadLogging"], () => require("./appsecAdvancedSettingsAttackPayloadLogging"));

export { AppsecAdvancedSettingsEvasivePathMatchArgs, AppsecAdvancedSettingsEvasivePathMatchState } from "./appsecAdvancedSettingsEvasivePathMatch";
export type AppsecAdvancedSettingsEvasivePathMatch = import("./appsecAdvancedSettingsEvasivePathMatch").AppsecAdvancedSettingsEvasivePathMatch;
export const AppsecAdvancedSettingsEvasivePathMatch: typeof import("./appsecAdvancedSettingsEvasivePathMatch").AppsecAdvancedSettingsEvasivePathMatch = null as any;
utilities.lazyLoad(exports, ["AppsecAdvancedSettingsEvasivePathMatch"], () => require("./appsecAdvancedSettingsEvasivePathMatch"));

export { AppsecAdvancedSettingsLoggingArgs, AppsecAdvancedSettingsLoggingState } from "./appsecAdvancedSettingsLogging";
export type AppsecAdvancedSettingsLogging = import("./appsecAdvancedSettingsLogging").AppsecAdvancedSettingsLogging;
export const AppsecAdvancedSettingsLogging: typeof import("./appsecAdvancedSettingsLogging").AppsecAdvancedSettingsLogging = null as any;
utilities.lazyLoad(exports, ["AppsecAdvancedSettingsLogging"], () => require("./appsecAdvancedSettingsLogging"));

export { AppsecAdvancedSettingsPiiLearningArgs, AppsecAdvancedSettingsPiiLearningState } from "./appsecAdvancedSettingsPiiLearning";
export type AppsecAdvancedSettingsPiiLearning = import("./appsecAdvancedSettingsPiiLearning").AppsecAdvancedSettingsPiiLearning;
export const AppsecAdvancedSettingsPiiLearning: typeof import("./appsecAdvancedSettingsPiiLearning").AppsecAdvancedSettingsPiiLearning = null as any;
utilities.lazyLoad(exports, ["AppsecAdvancedSettingsPiiLearning"], () => require("./appsecAdvancedSettingsPiiLearning"));

export { AppsecAdvancedSettingsPragmaHeaderArgs, AppsecAdvancedSettingsPragmaHeaderState } from "./appsecAdvancedSettingsPragmaHeader";
export type AppsecAdvancedSettingsPragmaHeader = import("./appsecAdvancedSettingsPragmaHeader").AppsecAdvancedSettingsPragmaHeader;
export const AppsecAdvancedSettingsPragmaHeader: typeof import("./appsecAdvancedSettingsPragmaHeader").AppsecAdvancedSettingsPragmaHeader = null as any;
utilities.lazyLoad(exports, ["AppsecAdvancedSettingsPragmaHeader"], () => require("./appsecAdvancedSettingsPragmaHeader"));

export { AppsecAdvancedSettingsPrefetchArgs, AppsecAdvancedSettingsPrefetchState } from "./appsecAdvancedSettingsPrefetch";
export type AppsecAdvancedSettingsPrefetch = import("./appsecAdvancedSettingsPrefetch").AppsecAdvancedSettingsPrefetch;
export const AppsecAdvancedSettingsPrefetch: typeof import("./appsecAdvancedSettingsPrefetch").AppsecAdvancedSettingsPrefetch = null as any;
utilities.lazyLoad(exports, ["AppsecAdvancedSettingsPrefetch"], () => require("./appsecAdvancedSettingsPrefetch"));

export { AppsecAdvancedSettingsRequestBodyArgs, AppsecAdvancedSettingsRequestBodyState } from "./appsecAdvancedSettingsRequestBody";
export type AppsecAdvancedSettingsRequestBody = import("./appsecAdvancedSettingsRequestBody").AppsecAdvancedSettingsRequestBody;
export const AppsecAdvancedSettingsRequestBody: typeof import("./appsecAdvancedSettingsRequestBody").AppsecAdvancedSettingsRequestBody = null as any;
utilities.lazyLoad(exports, ["AppsecAdvancedSettingsRequestBody"], () => require("./appsecAdvancedSettingsRequestBody"));

export { AppsecApiConstraintsProtectionArgs, AppsecApiConstraintsProtectionState } from "./appsecApiConstraintsProtection";
export type AppsecApiConstraintsProtection = import("./appsecApiConstraintsProtection").AppsecApiConstraintsProtection;
export const AppsecApiConstraintsProtection: typeof import("./appsecApiConstraintsProtection").AppsecApiConstraintsProtection = null as any;
utilities.lazyLoad(exports, ["AppsecApiConstraintsProtection"], () => require("./appsecApiConstraintsProtection"));

export { AppsecApiRequestConstraintsArgs, AppsecApiRequestConstraintsState } from "./appsecApiRequestConstraints";
export type AppsecApiRequestConstraints = import("./appsecApiRequestConstraints").AppsecApiRequestConstraints;
export const AppsecApiRequestConstraints: typeof import("./appsecApiRequestConstraints").AppsecApiRequestConstraints = null as any;
utilities.lazyLoad(exports, ["AppsecApiRequestConstraints"], () => require("./appsecApiRequestConstraints"));

export { AppsecAttackGroupArgs, AppsecAttackGroupState } from "./appsecAttackGroup";
export type AppsecAttackGroup = import("./appsecAttackGroup").AppsecAttackGroup;
export const AppsecAttackGroup: typeof import("./appsecAttackGroup").AppsecAttackGroup = null as any;
utilities.lazyLoad(exports, ["AppsecAttackGroup"], () => require("./appsecAttackGroup"));

export { AppsecBypassNetworkListsArgs, AppsecBypassNetworkListsState } from "./appsecBypassNetworkLists";
export type AppsecBypassNetworkLists = import("./appsecBypassNetworkLists").AppsecBypassNetworkLists;
export const AppsecBypassNetworkLists: typeof import("./appsecBypassNetworkLists").AppsecBypassNetworkLists = null as any;
utilities.lazyLoad(exports, ["AppsecBypassNetworkLists"], () => require("./appsecBypassNetworkLists"));

export { AppsecConfigurationArgs, AppsecConfigurationState } from "./appsecConfiguration";
export type AppsecConfiguration = import("./appsecConfiguration").AppsecConfiguration;
export const AppsecConfiguration: typeof import("./appsecConfiguration").AppsecConfiguration = null as any;
utilities.lazyLoad(exports, ["AppsecConfiguration"], () => require("./appsecConfiguration"));

export { AppsecConfigurationRenameArgs, AppsecConfigurationRenameState } from "./appsecConfigurationRename";
export type AppsecConfigurationRename = import("./appsecConfigurationRename").AppsecConfigurationRename;
export const AppsecConfigurationRename: typeof import("./appsecConfigurationRename").AppsecConfigurationRename = null as any;
utilities.lazyLoad(exports, ["AppsecConfigurationRename"], () => require("./appsecConfigurationRename"));

export { AppsecCustomDenyArgs, AppsecCustomDenyState } from "./appsecCustomDeny";
export type AppsecCustomDeny = import("./appsecCustomDeny").AppsecCustomDeny;
export const AppsecCustomDeny: typeof import("./appsecCustomDeny").AppsecCustomDeny = null as any;
utilities.lazyLoad(exports, ["AppsecCustomDeny"], () => require("./appsecCustomDeny"));

export { AppsecCustomRuleArgs, AppsecCustomRuleState } from "./appsecCustomRule";
export type AppsecCustomRule = import("./appsecCustomRule").AppsecCustomRule;
export const AppsecCustomRule: typeof import("./appsecCustomRule").AppsecCustomRule = null as any;
utilities.lazyLoad(exports, ["AppsecCustomRule"], () => require("./appsecCustomRule"));

export { AppsecCustomRuleActionArgs, AppsecCustomRuleActionState } from "./appsecCustomRuleAction";
export type AppsecCustomRuleAction = import("./appsecCustomRuleAction").AppsecCustomRuleAction;
export const AppsecCustomRuleAction: typeof import("./appsecCustomRuleAction").AppsecCustomRuleAction = null as any;
utilities.lazyLoad(exports, ["AppsecCustomRuleAction"], () => require("./appsecCustomRuleAction"));

export { AppsecEvalArgs, AppsecEvalState } from "./appsecEval";
export type AppsecEval = import("./appsecEval").AppsecEval;
export const AppsecEval: typeof import("./appsecEval").AppsecEval = null as any;
utilities.lazyLoad(exports, ["AppsecEval"], () => require("./appsecEval"));

export { AppsecEvalGroupArgs, AppsecEvalGroupState } from "./appsecEvalGroup";
export type AppsecEvalGroup = import("./appsecEvalGroup").AppsecEvalGroup;
export const AppsecEvalGroup: typeof import("./appsecEvalGroup").AppsecEvalGroup = null as any;
utilities.lazyLoad(exports, ["AppsecEvalGroup"], () => require("./appsecEvalGroup"));

export { AppsecEvalPenaltyBoxArgs, AppsecEvalPenaltyBoxState } from "./appsecEvalPenaltyBox";
export type AppsecEvalPenaltyBox = import("./appsecEvalPenaltyBox").AppsecEvalPenaltyBox;
export const AppsecEvalPenaltyBox: typeof import("./appsecEvalPenaltyBox").AppsecEvalPenaltyBox = null as any;
utilities.lazyLoad(exports, ["AppsecEvalPenaltyBox"], () => require("./appsecEvalPenaltyBox"));

export { AppsecEvalPenaltyBoxConditionsArgs, AppsecEvalPenaltyBoxConditionsState } from "./appsecEvalPenaltyBoxConditions";
export type AppsecEvalPenaltyBoxConditions = import("./appsecEvalPenaltyBoxConditions").AppsecEvalPenaltyBoxConditions;
export const AppsecEvalPenaltyBoxConditions: typeof import("./appsecEvalPenaltyBoxConditions").AppsecEvalPenaltyBoxConditions = null as any;
utilities.lazyLoad(exports, ["AppsecEvalPenaltyBoxConditions"], () => require("./appsecEvalPenaltyBoxConditions"));

export { AppsecEvalRuleArgs, AppsecEvalRuleState } from "./appsecEvalRule";
export type AppsecEvalRule = import("./appsecEvalRule").AppsecEvalRule;
export const AppsecEvalRule: typeof import("./appsecEvalRule").AppsecEvalRule = null as any;
utilities.lazyLoad(exports, ["AppsecEvalRule"], () => require("./appsecEvalRule"));

export { AppsecIpGeoArgs, AppsecIpGeoState } from "./appsecIpGeo";
export type AppsecIpGeo = import("./appsecIpGeo").AppsecIpGeo;
export const AppsecIpGeo: typeof import("./appsecIpGeo").AppsecIpGeo = null as any;
utilities.lazyLoad(exports, ["AppsecIpGeo"], () => require("./appsecIpGeo"));

export { AppsecIpGeoProtectionArgs, AppsecIpGeoProtectionState } from "./appsecIpGeoProtection";
export type AppsecIpGeoProtection = import("./appsecIpGeoProtection").AppsecIpGeoProtection;
export const AppsecIpGeoProtection: typeof import("./appsecIpGeoProtection").AppsecIpGeoProtection = null as any;
utilities.lazyLoad(exports, ["AppsecIpGeoProtection"], () => require("./appsecIpGeoProtection"));

export { AppsecMalwarePolicyArgs, AppsecMalwarePolicyState } from "./appsecMalwarePolicy";
export type AppsecMalwarePolicy = import("./appsecMalwarePolicy").AppsecMalwarePolicy;
export const AppsecMalwarePolicy: typeof import("./appsecMalwarePolicy").AppsecMalwarePolicy = null as any;
utilities.lazyLoad(exports, ["AppsecMalwarePolicy"], () => require("./appsecMalwarePolicy"));

export { AppsecMalwarePolicyActionArgs, AppsecMalwarePolicyActionState } from "./appsecMalwarePolicyAction";
export type AppsecMalwarePolicyAction = import("./appsecMalwarePolicyAction").AppsecMalwarePolicyAction;
export const AppsecMalwarePolicyAction: typeof import("./appsecMalwarePolicyAction").AppsecMalwarePolicyAction = null as any;
utilities.lazyLoad(exports, ["AppsecMalwarePolicyAction"], () => require("./appsecMalwarePolicyAction"));

export { AppsecMalwarePolicyActionsArgs, AppsecMalwarePolicyActionsState } from "./appsecMalwarePolicyActions";
export type AppsecMalwarePolicyActions = import("./appsecMalwarePolicyActions").AppsecMalwarePolicyActions;
export const AppsecMalwarePolicyActions: typeof import("./appsecMalwarePolicyActions").AppsecMalwarePolicyActions = null as any;
utilities.lazyLoad(exports, ["AppsecMalwarePolicyActions"], () => require("./appsecMalwarePolicyActions"));

export { AppsecMalwareProtectionArgs, AppsecMalwareProtectionState } from "./appsecMalwareProtection";
export type AppsecMalwareProtection = import("./appsecMalwareProtection").AppsecMalwareProtection;
export const AppsecMalwareProtection: typeof import("./appsecMalwareProtection").AppsecMalwareProtection = null as any;
utilities.lazyLoad(exports, ["AppsecMalwareProtection"], () => require("./appsecMalwareProtection"));

export { AppsecMatchTargetArgs, AppsecMatchTargetState } from "./appsecMatchTarget";
export type AppsecMatchTarget = import("./appsecMatchTarget").AppsecMatchTarget;
export const AppsecMatchTarget: typeof import("./appsecMatchTarget").AppsecMatchTarget = null as any;
utilities.lazyLoad(exports, ["AppsecMatchTarget"], () => require("./appsecMatchTarget"));

export { AppsecMatchTargetSequenceArgs, AppsecMatchTargetSequenceState } from "./appsecMatchTargetSequence";
export type AppsecMatchTargetSequence = import("./appsecMatchTargetSequence").AppsecMatchTargetSequence;
export const AppsecMatchTargetSequence: typeof import("./appsecMatchTargetSequence").AppsecMatchTargetSequence = null as any;
utilities.lazyLoad(exports, ["AppsecMatchTargetSequence"], () => require("./appsecMatchTargetSequence"));

export { AppsecPenaltyBoxArgs, AppsecPenaltyBoxState } from "./appsecPenaltyBox";
export type AppsecPenaltyBox = import("./appsecPenaltyBox").AppsecPenaltyBox;
export const AppsecPenaltyBox: typeof import("./appsecPenaltyBox").AppsecPenaltyBox = null as any;
utilities.lazyLoad(exports, ["AppsecPenaltyBox"], () => require("./appsecPenaltyBox"));

export { AppsecPenaltyBoxConditionsArgs, AppsecPenaltyBoxConditionsState } from "./appsecPenaltyBoxConditions";
export type AppsecPenaltyBoxConditions = import("./appsecPenaltyBoxConditions").AppsecPenaltyBoxConditions;
export const AppsecPenaltyBoxConditions: typeof import("./appsecPenaltyBoxConditions").AppsecPenaltyBoxConditions = null as any;
utilities.lazyLoad(exports, ["AppsecPenaltyBoxConditions"], () => require("./appsecPenaltyBoxConditions"));

export { AppsecRatePolicyArgs, AppsecRatePolicyState } from "./appsecRatePolicy";
export type AppsecRatePolicy = import("./appsecRatePolicy").AppsecRatePolicy;
export const AppsecRatePolicy: typeof import("./appsecRatePolicy").AppsecRatePolicy = null as any;
utilities.lazyLoad(exports, ["AppsecRatePolicy"], () => require("./appsecRatePolicy"));

export { AppsecRatePolicyActionArgs, AppsecRatePolicyActionState } from "./appsecRatePolicyAction";
export type AppsecRatePolicyAction = import("./appsecRatePolicyAction").AppsecRatePolicyAction;
export const AppsecRatePolicyAction: typeof import("./appsecRatePolicyAction").AppsecRatePolicyAction = null as any;
utilities.lazyLoad(exports, ["AppsecRatePolicyAction"], () => require("./appsecRatePolicyAction"));

export { AppsecRateProtectionArgs, AppsecRateProtectionState } from "./appsecRateProtection";
export type AppsecRateProtection = import("./appsecRateProtection").AppsecRateProtection;
export const AppsecRateProtection: typeof import("./appsecRateProtection").AppsecRateProtection = null as any;
utilities.lazyLoad(exports, ["AppsecRateProtection"], () => require("./appsecRateProtection"));

export { AppsecReputationProfileArgs, AppsecReputationProfileState } from "./appsecReputationProfile";
export type AppsecReputationProfile = import("./appsecReputationProfile").AppsecReputationProfile;
export const AppsecReputationProfile: typeof import("./appsecReputationProfile").AppsecReputationProfile = null as any;
utilities.lazyLoad(exports, ["AppsecReputationProfile"], () => require("./appsecReputationProfile"));

export { AppsecReputationProfileActionArgs, AppsecReputationProfileActionState } from "./appsecReputationProfileAction";
export type AppsecReputationProfileAction = import("./appsecReputationProfileAction").AppsecReputationProfileAction;
export const AppsecReputationProfileAction: typeof import("./appsecReputationProfileAction").AppsecReputationProfileAction = null as any;
utilities.lazyLoad(exports, ["AppsecReputationProfileAction"], () => require("./appsecReputationProfileAction"));

export { AppsecReputationProfileAnalysisArgs, AppsecReputationProfileAnalysisState } from "./appsecReputationProfileAnalysis";
export type AppsecReputationProfileAnalysis = import("./appsecReputationProfileAnalysis").AppsecReputationProfileAnalysis;
export const AppsecReputationProfileAnalysis: typeof import("./appsecReputationProfileAnalysis").AppsecReputationProfileAnalysis = null as any;
utilities.lazyLoad(exports, ["AppsecReputationProfileAnalysis"], () => require("./appsecReputationProfileAnalysis"));

export { AppsecReputationProtectionArgs, AppsecReputationProtectionState } from "./appsecReputationProtection";
export type AppsecReputationProtection = import("./appsecReputationProtection").AppsecReputationProtection;
export const AppsecReputationProtection: typeof import("./appsecReputationProtection").AppsecReputationProtection = null as any;
utilities.lazyLoad(exports, ["AppsecReputationProtection"], () => require("./appsecReputationProtection"));

export { AppsecRuleArgs, AppsecRuleState } from "./appsecRule";
export type AppsecRule = import("./appsecRule").AppsecRule;
export const AppsecRule: typeof import("./appsecRule").AppsecRule = null as any;
utilities.lazyLoad(exports, ["AppsecRule"], () => require("./appsecRule"));

export { AppsecRuleUpgradeArgs, AppsecRuleUpgradeState } from "./appsecRuleUpgrade";
export type AppsecRuleUpgrade = import("./appsecRuleUpgrade").AppsecRuleUpgrade;
export const AppsecRuleUpgrade: typeof import("./appsecRuleUpgrade").AppsecRuleUpgrade = null as any;
utilities.lazyLoad(exports, ["AppsecRuleUpgrade"], () => require("./appsecRuleUpgrade"));

export { AppsecSecurityPolicyArgs, AppsecSecurityPolicyState } from "./appsecSecurityPolicy";
export type AppsecSecurityPolicy = import("./appsecSecurityPolicy").AppsecSecurityPolicy;
export const AppsecSecurityPolicy: typeof import("./appsecSecurityPolicy").AppsecSecurityPolicy = null as any;
utilities.lazyLoad(exports, ["AppsecSecurityPolicy"], () => require("./appsecSecurityPolicy"));

export { AppsecSecurityPolicyDefaultProtectionsArgs, AppsecSecurityPolicyDefaultProtectionsState } from "./appsecSecurityPolicyDefaultProtections";
export type AppsecSecurityPolicyDefaultProtections = import("./appsecSecurityPolicyDefaultProtections").AppsecSecurityPolicyDefaultProtections;
export const AppsecSecurityPolicyDefaultProtections: typeof import("./appsecSecurityPolicyDefaultProtections").AppsecSecurityPolicyDefaultProtections = null as any;
utilities.lazyLoad(exports, ["AppsecSecurityPolicyDefaultProtections"], () => require("./appsecSecurityPolicyDefaultProtections"));

export { AppsecSecurityPolicyRenameArgs, AppsecSecurityPolicyRenameState } from "./appsecSecurityPolicyRename";
export type AppsecSecurityPolicyRename = import("./appsecSecurityPolicyRename").AppsecSecurityPolicyRename;
export const AppsecSecurityPolicyRename: typeof import("./appsecSecurityPolicyRename").AppsecSecurityPolicyRename = null as any;
utilities.lazyLoad(exports, ["AppsecSecurityPolicyRename"], () => require("./appsecSecurityPolicyRename"));

export { AppsecSelectedHostnamesArgs, AppsecSelectedHostnamesState } from "./appsecSelectedHostnames";
export type AppsecSelectedHostnames = import("./appsecSelectedHostnames").AppsecSelectedHostnames;
export const AppsecSelectedHostnames: typeof import("./appsecSelectedHostnames").AppsecSelectedHostnames = null as any;
utilities.lazyLoad(exports, ["AppsecSelectedHostnames"], () => require("./appsecSelectedHostnames"));

export { AppsecSiemSettingsArgs, AppsecSiemSettingsState } from "./appsecSiemSettings";
export type AppsecSiemSettings = import("./appsecSiemSettings").AppsecSiemSettings;
export const AppsecSiemSettings: typeof import("./appsecSiemSettings").AppsecSiemSettings = null as any;
utilities.lazyLoad(exports, ["AppsecSiemSettings"], () => require("./appsecSiemSettings"));

export { AppsecSlowPostArgs, AppsecSlowPostState } from "./appsecSlowPost";
export type AppsecSlowPost = import("./appsecSlowPost").AppsecSlowPost;
export const AppsecSlowPost: typeof import("./appsecSlowPost").AppsecSlowPost = null as any;
utilities.lazyLoad(exports, ["AppsecSlowPost"], () => require("./appsecSlowPost"));

export { AppsecSlowpostProtectionArgs, AppsecSlowpostProtectionState } from "./appsecSlowpostProtection";
export type AppsecSlowpostProtection = import("./appsecSlowpostProtection").AppsecSlowpostProtection;
export const AppsecSlowpostProtection: typeof import("./appsecSlowpostProtection").AppsecSlowpostProtection = null as any;
utilities.lazyLoad(exports, ["AppsecSlowpostProtection"], () => require("./appsecSlowpostProtection"));

export { AppsecThreatIntelArgs, AppsecThreatIntelState } from "./appsecThreatIntel";
export type AppsecThreatIntel = import("./appsecThreatIntel").AppsecThreatIntel;
export const AppsecThreatIntel: typeof import("./appsecThreatIntel").AppsecThreatIntel = null as any;
utilities.lazyLoad(exports, ["AppsecThreatIntel"], () => require("./appsecThreatIntel"));

export { AppsecVersionNotesArgs, AppsecVersionNotesState } from "./appsecVersionNotes";
export type AppsecVersionNotes = import("./appsecVersionNotes").AppsecVersionNotes;
export const AppsecVersionNotes: typeof import("./appsecVersionNotes").AppsecVersionNotes = null as any;
utilities.lazyLoad(exports, ["AppsecVersionNotes"], () => require("./appsecVersionNotes"));

export { AppsecWafModeArgs, AppsecWafModeState } from "./appsecWafMode";
export type AppsecWafMode = import("./appsecWafMode").AppsecWafMode;
export const AppsecWafMode: typeof import("./appsecWafMode").AppsecWafMode = null as any;
utilities.lazyLoad(exports, ["AppsecWafMode"], () => require("./appsecWafMode"));

export { AppsecWafProtectionArgs, AppsecWafProtectionState } from "./appsecWafProtection";
export type AppsecWafProtection = import("./appsecWafProtection").AppsecWafProtection;
export const AppsecWafProtection: typeof import("./appsecWafProtection").AppsecWafProtection = null as any;
utilities.lazyLoad(exports, ["AppsecWafProtection"], () => require("./appsecWafProtection"));

export { AppsecWapSelectedHostnamesArgs, AppsecWapSelectedHostnamesState } from "./appsecWapSelectedHostnames";
export type AppsecWapSelectedHostnames = import("./appsecWapSelectedHostnames").AppsecWapSelectedHostnames;
export const AppsecWapSelectedHostnames: typeof import("./appsecWapSelectedHostnames").AppsecWapSelectedHostnames = null as any;
utilities.lazyLoad(exports, ["AppsecWapSelectedHostnames"], () => require("./appsecWapSelectedHostnames"));

export { BotmanAkamaiBotCategoryActionArgs, BotmanAkamaiBotCategoryActionState } from "./botmanAkamaiBotCategoryAction";
export type BotmanAkamaiBotCategoryAction = import("./botmanAkamaiBotCategoryAction").BotmanAkamaiBotCategoryAction;
export const BotmanAkamaiBotCategoryAction: typeof import("./botmanAkamaiBotCategoryAction").BotmanAkamaiBotCategoryAction = null as any;
utilities.lazyLoad(exports, ["BotmanAkamaiBotCategoryAction"], () => require("./botmanAkamaiBotCategoryAction"));

export { BotmanBotAnalyticsCookieArgs, BotmanBotAnalyticsCookieState } from "./botmanBotAnalyticsCookie";
export type BotmanBotAnalyticsCookie = import("./botmanBotAnalyticsCookie").BotmanBotAnalyticsCookie;
export const BotmanBotAnalyticsCookie: typeof import("./botmanBotAnalyticsCookie").BotmanBotAnalyticsCookie = null as any;
utilities.lazyLoad(exports, ["BotmanBotAnalyticsCookie"], () => require("./botmanBotAnalyticsCookie"));

export { BotmanBotCategoryExceptionArgs, BotmanBotCategoryExceptionState } from "./botmanBotCategoryException";
export type BotmanBotCategoryException = import("./botmanBotCategoryException").BotmanBotCategoryException;
export const BotmanBotCategoryException: typeof import("./botmanBotCategoryException").BotmanBotCategoryException = null as any;
utilities.lazyLoad(exports, ["BotmanBotCategoryException"], () => require("./botmanBotCategoryException"));

export { BotmanBotDetectionActionArgs, BotmanBotDetectionActionState } from "./botmanBotDetectionAction";
export type BotmanBotDetectionAction = import("./botmanBotDetectionAction").BotmanBotDetectionAction;
export const BotmanBotDetectionAction: typeof import("./botmanBotDetectionAction").BotmanBotDetectionAction = null as any;
utilities.lazyLoad(exports, ["BotmanBotDetectionAction"], () => require("./botmanBotDetectionAction"));

export { BotmanBotManagementSettingsArgs, BotmanBotManagementSettingsState } from "./botmanBotManagementSettings";
export type BotmanBotManagementSettings = import("./botmanBotManagementSettings").BotmanBotManagementSettings;
export const BotmanBotManagementSettings: typeof import("./botmanBotManagementSettings").BotmanBotManagementSettings = null as any;
utilities.lazyLoad(exports, ["BotmanBotManagementSettings"], () => require("./botmanBotManagementSettings"));

export { BotmanChallengeActionArgs, BotmanChallengeActionState } from "./botmanChallengeAction";
export type BotmanChallengeAction = import("./botmanChallengeAction").BotmanChallengeAction;
export const BotmanChallengeAction: typeof import("./botmanChallengeAction").BotmanChallengeAction = null as any;
utilities.lazyLoad(exports, ["BotmanChallengeAction"], () => require("./botmanChallengeAction"));

export { BotmanChallengeInjectionRulesArgs, BotmanChallengeInjectionRulesState } from "./botmanChallengeInjectionRules";
export type BotmanChallengeInjectionRules = import("./botmanChallengeInjectionRules").BotmanChallengeInjectionRules;
export const BotmanChallengeInjectionRules: typeof import("./botmanChallengeInjectionRules").BotmanChallengeInjectionRules = null as any;
utilities.lazyLoad(exports, ["BotmanChallengeInjectionRules"], () => require("./botmanChallengeInjectionRules"));

export { BotmanChallengeInterceptionRulesArgs, BotmanChallengeInterceptionRulesState } from "./botmanChallengeInterceptionRules";
export type BotmanChallengeInterceptionRules = import("./botmanChallengeInterceptionRules").BotmanChallengeInterceptionRules;
export const BotmanChallengeInterceptionRules: typeof import("./botmanChallengeInterceptionRules").BotmanChallengeInterceptionRules = null as any;
utilities.lazyLoad(exports, ["BotmanChallengeInterceptionRules"], () => require("./botmanChallengeInterceptionRules"));

export { BotmanClientSideSecurityArgs, BotmanClientSideSecurityState } from "./botmanClientSideSecurity";
export type BotmanClientSideSecurity = import("./botmanClientSideSecurity").BotmanClientSideSecurity;
export const BotmanClientSideSecurity: typeof import("./botmanClientSideSecurity").BotmanClientSideSecurity = null as any;
utilities.lazyLoad(exports, ["BotmanClientSideSecurity"], () => require("./botmanClientSideSecurity"));

export { BotmanConditionalActionArgs, BotmanConditionalActionState } from "./botmanConditionalAction";
export type BotmanConditionalAction = import("./botmanConditionalAction").BotmanConditionalAction;
export const BotmanConditionalAction: typeof import("./botmanConditionalAction").BotmanConditionalAction = null as any;
utilities.lazyLoad(exports, ["BotmanConditionalAction"], () => require("./botmanConditionalAction"));

export { BotmanContentProtectionJavascriptInjectionRuleArgs, BotmanContentProtectionJavascriptInjectionRuleState } from "./botmanContentProtectionJavascriptInjectionRule";
export type BotmanContentProtectionJavascriptInjectionRule = import("./botmanContentProtectionJavascriptInjectionRule").BotmanContentProtectionJavascriptInjectionRule;
export const BotmanContentProtectionJavascriptInjectionRule: typeof import("./botmanContentProtectionJavascriptInjectionRule").BotmanContentProtectionJavascriptInjectionRule = null as any;
utilities.lazyLoad(exports, ["BotmanContentProtectionJavascriptInjectionRule"], () => require("./botmanContentProtectionJavascriptInjectionRule"));

export { BotmanContentProtectionRuleArgs, BotmanContentProtectionRuleState } from "./botmanContentProtectionRule";
export type BotmanContentProtectionRule = import("./botmanContentProtectionRule").BotmanContentProtectionRule;
export const BotmanContentProtectionRule: typeof import("./botmanContentProtectionRule").BotmanContentProtectionRule = null as any;
utilities.lazyLoad(exports, ["BotmanContentProtectionRule"], () => require("./botmanContentProtectionRule"));

export { BotmanContentProtectionRuleSequenceArgs, BotmanContentProtectionRuleSequenceState } from "./botmanContentProtectionRuleSequence";
export type BotmanContentProtectionRuleSequence = import("./botmanContentProtectionRuleSequence").BotmanContentProtectionRuleSequence;
export const BotmanContentProtectionRuleSequence: typeof import("./botmanContentProtectionRuleSequence").BotmanContentProtectionRuleSequence = null as any;
utilities.lazyLoad(exports, ["BotmanContentProtectionRuleSequence"], () => require("./botmanContentProtectionRuleSequence"));

export { BotmanCustomBotCategoryArgs, BotmanCustomBotCategoryState } from "./botmanCustomBotCategory";
export type BotmanCustomBotCategory = import("./botmanCustomBotCategory").BotmanCustomBotCategory;
export const BotmanCustomBotCategory: typeof import("./botmanCustomBotCategory").BotmanCustomBotCategory = null as any;
utilities.lazyLoad(exports, ["BotmanCustomBotCategory"], () => require("./botmanCustomBotCategory"));

export { BotmanCustomBotCategoryActionArgs, BotmanCustomBotCategoryActionState } from "./botmanCustomBotCategoryAction";
export type BotmanCustomBotCategoryAction = import("./botmanCustomBotCategoryAction").BotmanCustomBotCategoryAction;
export const BotmanCustomBotCategoryAction: typeof import("./botmanCustomBotCategoryAction").BotmanCustomBotCategoryAction = null as any;
utilities.lazyLoad(exports, ["BotmanCustomBotCategoryAction"], () => require("./botmanCustomBotCategoryAction"));

export { BotmanCustomBotCategoryItemSequenceArgs, BotmanCustomBotCategoryItemSequenceState } from "./botmanCustomBotCategoryItemSequence";
export type BotmanCustomBotCategoryItemSequence = import("./botmanCustomBotCategoryItemSequence").BotmanCustomBotCategoryItemSequence;
export const BotmanCustomBotCategoryItemSequence: typeof import("./botmanCustomBotCategoryItemSequence").BotmanCustomBotCategoryItemSequence = null as any;
utilities.lazyLoad(exports, ["BotmanCustomBotCategoryItemSequence"], () => require("./botmanCustomBotCategoryItemSequence"));

export { BotmanCustomBotCategorySequenceArgs, BotmanCustomBotCategorySequenceState } from "./botmanCustomBotCategorySequence";
export type BotmanCustomBotCategorySequence = import("./botmanCustomBotCategorySequence").BotmanCustomBotCategorySequence;
export const BotmanCustomBotCategorySequence: typeof import("./botmanCustomBotCategorySequence").BotmanCustomBotCategorySequence = null as any;
utilities.lazyLoad(exports, ["BotmanCustomBotCategorySequence"], () => require("./botmanCustomBotCategorySequence"));

export { BotmanCustomClientArgs, BotmanCustomClientState } from "./botmanCustomClient";
export type BotmanCustomClient = import("./botmanCustomClient").BotmanCustomClient;
export const BotmanCustomClient: typeof import("./botmanCustomClient").BotmanCustomClient = null as any;
utilities.lazyLoad(exports, ["BotmanCustomClient"], () => require("./botmanCustomClient"));

export { BotmanCustomClientSequenceArgs, BotmanCustomClientSequenceState } from "./botmanCustomClientSequence";
export type BotmanCustomClientSequence = import("./botmanCustomClientSequence").BotmanCustomClientSequence;
export const BotmanCustomClientSequence: typeof import("./botmanCustomClientSequence").BotmanCustomClientSequence = null as any;
utilities.lazyLoad(exports, ["BotmanCustomClientSequence"], () => require("./botmanCustomClientSequence"));

export { BotmanCustomCodeArgs, BotmanCustomCodeState } from "./botmanCustomCode";
export type BotmanCustomCode = import("./botmanCustomCode").BotmanCustomCode;
export const BotmanCustomCode: typeof import("./botmanCustomCode").BotmanCustomCode = null as any;
utilities.lazyLoad(exports, ["BotmanCustomCode"], () => require("./botmanCustomCode"));

export { BotmanCustomDefinedBotArgs, BotmanCustomDefinedBotState } from "./botmanCustomDefinedBot";
export type BotmanCustomDefinedBot = import("./botmanCustomDefinedBot").BotmanCustomDefinedBot;
export const BotmanCustomDefinedBot: typeof import("./botmanCustomDefinedBot").BotmanCustomDefinedBot = null as any;
utilities.lazyLoad(exports, ["BotmanCustomDefinedBot"], () => require("./botmanCustomDefinedBot"));

export { BotmanCustomDenyActionArgs, BotmanCustomDenyActionState } from "./botmanCustomDenyAction";
export type BotmanCustomDenyAction = import("./botmanCustomDenyAction").BotmanCustomDenyAction;
export const BotmanCustomDenyAction: typeof import("./botmanCustomDenyAction").BotmanCustomDenyAction = null as any;
utilities.lazyLoad(exports, ["BotmanCustomDenyAction"], () => require("./botmanCustomDenyAction"));

export { BotmanJavascriptInjectionArgs, BotmanJavascriptInjectionState } from "./botmanJavascriptInjection";
export type BotmanJavascriptInjection = import("./botmanJavascriptInjection").BotmanJavascriptInjection;
export const BotmanJavascriptInjection: typeof import("./botmanJavascriptInjection").BotmanJavascriptInjection = null as any;
utilities.lazyLoad(exports, ["BotmanJavascriptInjection"], () => require("./botmanJavascriptInjection"));

export { BotmanRecategorizedAkamaiDefinedBotArgs, BotmanRecategorizedAkamaiDefinedBotState } from "./botmanRecategorizedAkamaiDefinedBot";
export type BotmanRecategorizedAkamaiDefinedBot = import("./botmanRecategorizedAkamaiDefinedBot").BotmanRecategorizedAkamaiDefinedBot;
export const BotmanRecategorizedAkamaiDefinedBot: typeof import("./botmanRecategorizedAkamaiDefinedBot").BotmanRecategorizedAkamaiDefinedBot = null as any;
utilities.lazyLoad(exports, ["BotmanRecategorizedAkamaiDefinedBot"], () => require("./botmanRecategorizedAkamaiDefinedBot"));

export { BotmanServeAlternateActionArgs, BotmanServeAlternateActionState } from "./botmanServeAlternateAction";
export type BotmanServeAlternateAction = import("./botmanServeAlternateAction").BotmanServeAlternateAction;
export const BotmanServeAlternateAction: typeof import("./botmanServeAlternateAction").BotmanServeAlternateAction = null as any;
utilities.lazyLoad(exports, ["BotmanServeAlternateAction"], () => require("./botmanServeAlternateAction"));

export { BotmanTransactionalEndpointArgs, BotmanTransactionalEndpointState } from "./botmanTransactionalEndpoint";
export type BotmanTransactionalEndpoint = import("./botmanTransactionalEndpoint").BotmanTransactionalEndpoint;
export const BotmanTransactionalEndpoint: typeof import("./botmanTransactionalEndpoint").BotmanTransactionalEndpoint = null as any;
utilities.lazyLoad(exports, ["BotmanTransactionalEndpoint"], () => require("./botmanTransactionalEndpoint"));

export { BotmanTransactionalEndpointProtectionArgs, BotmanTransactionalEndpointProtectionState } from "./botmanTransactionalEndpointProtection";
export type BotmanTransactionalEndpointProtection = import("./botmanTransactionalEndpointProtection").BotmanTransactionalEndpointProtection;
export const BotmanTransactionalEndpointProtection: typeof import("./botmanTransactionalEndpointProtection").BotmanTransactionalEndpointProtection = null as any;
utilities.lazyLoad(exports, ["BotmanTransactionalEndpointProtection"], () => require("./botmanTransactionalEndpointProtection"));

export { ClientlistActivationArgs, ClientlistActivationState } from "./clientlistActivation";
export type ClientlistActivation = import("./clientlistActivation").ClientlistActivation;
export const ClientlistActivation: typeof import("./clientlistActivation").ClientlistActivation = null as any;
utilities.lazyLoad(exports, ["ClientlistActivation"], () => require("./clientlistActivation"));

export { ClientlistListArgs, ClientlistListState } from "./clientlistList";
export type ClientlistList = import("./clientlistList").ClientlistList;
export const ClientlistList: typeof import("./clientlistList").ClientlistList = null as any;
utilities.lazyLoad(exports, ["ClientlistList"], () => require("./clientlistList"));

export { CloudaccessKeyArgs, CloudaccessKeyState } from "./cloudaccessKey";
export type CloudaccessKey = import("./cloudaccessKey").CloudaccessKey;
export const CloudaccessKey: typeof import("./cloudaccessKey").CloudaccessKey = null as any;
utilities.lazyLoad(exports, ["CloudaccessKey"], () => require("./cloudaccessKey"));

export { CloudletsApplicationLoadBalancerArgs, CloudletsApplicationLoadBalancerState } from "./cloudletsApplicationLoadBalancer";
export type CloudletsApplicationLoadBalancer = import("./cloudletsApplicationLoadBalancer").CloudletsApplicationLoadBalancer;
export const CloudletsApplicationLoadBalancer: typeof import("./cloudletsApplicationLoadBalancer").CloudletsApplicationLoadBalancer = null as any;
utilities.lazyLoad(exports, ["CloudletsApplicationLoadBalancer"], () => require("./cloudletsApplicationLoadBalancer"));

export { CloudletsApplicationLoadBalancerActivationArgs, CloudletsApplicationLoadBalancerActivationState } from "./cloudletsApplicationLoadBalancerActivation";
export type CloudletsApplicationLoadBalancerActivation = import("./cloudletsApplicationLoadBalancerActivation").CloudletsApplicationLoadBalancerActivation;
export const CloudletsApplicationLoadBalancerActivation: typeof import("./cloudletsApplicationLoadBalancerActivation").CloudletsApplicationLoadBalancerActivation = null as any;
utilities.lazyLoad(exports, ["CloudletsApplicationLoadBalancerActivation"], () => require("./cloudletsApplicationLoadBalancerActivation"));

export { CloudletsPolicyArgs, CloudletsPolicyState } from "./cloudletsPolicy";
export type CloudletsPolicy = import("./cloudletsPolicy").CloudletsPolicy;
export const CloudletsPolicy: typeof import("./cloudletsPolicy").CloudletsPolicy = null as any;
utilities.lazyLoad(exports, ["CloudletsPolicy"], () => require("./cloudletsPolicy"));

export { CloudletsPolicyActivationArgs, CloudletsPolicyActivationState } from "./cloudletsPolicyActivation";
export type CloudletsPolicyActivation = import("./cloudletsPolicyActivation").CloudletsPolicyActivation;
export const CloudletsPolicyActivation: typeof import("./cloudletsPolicyActivation").CloudletsPolicyActivation = null as any;
utilities.lazyLoad(exports, ["CloudletsPolicyActivation"], () => require("./cloudletsPolicyActivation"));

export { CloudwrapperActivationArgs, CloudwrapperActivationState } from "./cloudwrapperActivation";
export type CloudwrapperActivation = import("./cloudwrapperActivation").CloudwrapperActivation;
export const CloudwrapperActivation: typeof import("./cloudwrapperActivation").CloudwrapperActivation = null as any;
utilities.lazyLoad(exports, ["CloudwrapperActivation"], () => require("./cloudwrapperActivation"));

export { CloudwrapperConfigurationArgs, CloudwrapperConfigurationState } from "./cloudwrapperConfiguration";
export type CloudwrapperConfiguration = import("./cloudwrapperConfiguration").CloudwrapperConfiguration;
export const CloudwrapperConfiguration: typeof import("./cloudwrapperConfiguration").CloudwrapperConfiguration = null as any;
utilities.lazyLoad(exports, ["CloudwrapperConfiguration"], () => require("./cloudwrapperConfiguration"));

export { CpCodeArgs, CpCodeState } from "./cpCode";
export type CpCode = import("./cpCode").CpCode;
export const CpCode: typeof import("./cpCode").CpCode = null as any;
utilities.lazyLoad(exports, ["CpCode"], () => require("./cpCode"));

export { CpsDvEnrollmentArgs, CpsDvEnrollmentState } from "./cpsDvEnrollment";
export type CpsDvEnrollment = import("./cpsDvEnrollment").CpsDvEnrollment;
export const CpsDvEnrollment: typeof import("./cpsDvEnrollment").CpsDvEnrollment = null as any;
utilities.lazyLoad(exports, ["CpsDvEnrollment"], () => require("./cpsDvEnrollment"));

export { CpsDvValidationArgs, CpsDvValidationState } from "./cpsDvValidation";
export type CpsDvValidation = import("./cpsDvValidation").CpsDvValidation;
export const CpsDvValidation: typeof import("./cpsDvValidation").CpsDvValidation = null as any;
utilities.lazyLoad(exports, ["CpsDvValidation"], () => require("./cpsDvValidation"));

export { CpsThirdPartyEnrollmentArgs, CpsThirdPartyEnrollmentState } from "./cpsThirdPartyEnrollment";
export type CpsThirdPartyEnrollment = import("./cpsThirdPartyEnrollment").CpsThirdPartyEnrollment;
export const CpsThirdPartyEnrollment: typeof import("./cpsThirdPartyEnrollment").CpsThirdPartyEnrollment = null as any;
utilities.lazyLoad(exports, ["CpsThirdPartyEnrollment"], () => require("./cpsThirdPartyEnrollment"));

export { CpsUploadCertificateArgs, CpsUploadCertificateState } from "./cpsUploadCertificate";
export type CpsUploadCertificate = import("./cpsUploadCertificate").CpsUploadCertificate;
export const CpsUploadCertificate: typeof import("./cpsUploadCertificate").CpsUploadCertificate = null as any;
utilities.lazyLoad(exports, ["CpsUploadCertificate"], () => require("./cpsUploadCertificate"));

export { DatastreamArgs, DatastreamState } from "./datastream";
export type Datastream = import("./datastream").Datastream;
export const Datastream: typeof import("./datastream").Datastream = null as any;
utilities.lazyLoad(exports, ["Datastream"], () => require("./datastream"));

export { DnsRecordArgs, DnsRecordState } from "./dnsRecord";
export type DnsRecord = import("./dnsRecord").DnsRecord;
export const DnsRecord: typeof import("./dnsRecord").DnsRecord = null as any;
utilities.lazyLoad(exports, ["DnsRecord"], () => require("./dnsRecord"));

export { DnsZoneArgs, DnsZoneState } from "./dnsZone";
export type DnsZone = import("./dnsZone").DnsZone;
export const DnsZone: typeof import("./dnsZone").DnsZone = null as any;
utilities.lazyLoad(exports, ["DnsZone"], () => require("./dnsZone"));

export { EdgeHostnameArgs, EdgeHostnameState } from "./edgeHostname";
export type EdgeHostname = import("./edgeHostname").EdgeHostname;
export const EdgeHostname: typeof import("./edgeHostname").EdgeHostname = null as any;
utilities.lazyLoad(exports, ["EdgeHostname"], () => require("./edgeHostname"));

export { EdgekvArgs, EdgekvState } from "./edgekv";
export type Edgekv = import("./edgekv").Edgekv;
export const Edgekv: typeof import("./edgekv").Edgekv = null as any;
utilities.lazyLoad(exports, ["Edgekv"], () => require("./edgekv"));

export { EdgekvGroupItemsArgs, EdgekvGroupItemsState } from "./edgekvGroupItems";
export type EdgekvGroupItems = import("./edgekvGroupItems").EdgekvGroupItems;
export const EdgekvGroupItems: typeof import("./edgekvGroupItems").EdgekvGroupItems = null as any;
utilities.lazyLoad(exports, ["EdgekvGroupItems"], () => require("./edgekvGroupItems"));

export { EdgeworkerArgs, EdgeworkerState } from "./edgeworker";
export type Edgeworker = import("./edgeworker").Edgeworker;
export const Edgeworker: typeof import("./edgeworker").Edgeworker = null as any;
utilities.lazyLoad(exports, ["Edgeworker"], () => require("./edgeworker"));

export { EdgeworkersActivationArgs, EdgeworkersActivationState } from "./edgeworkersActivation";
export type EdgeworkersActivation = import("./edgeworkersActivation").EdgeworkersActivation;
export const EdgeworkersActivation: typeof import("./edgeworkersActivation").EdgeworkersActivation = null as any;
utilities.lazyLoad(exports, ["EdgeworkersActivation"], () => require("./edgeworkersActivation"));

export { GetAppsecAdvancedSettingsAttackPayloadLoggingArgs, GetAppsecAdvancedSettingsAttackPayloadLoggingResult, GetAppsecAdvancedSettingsAttackPayloadLoggingOutputArgs } from "./getAppsecAdvancedSettingsAttackPayloadLogging";
export const getAppsecAdvancedSettingsAttackPayloadLogging: typeof import("./getAppsecAdvancedSettingsAttackPayloadLogging").getAppsecAdvancedSettingsAttackPayloadLogging = null as any;
export const getAppsecAdvancedSettingsAttackPayloadLoggingOutput: typeof import("./getAppsecAdvancedSettingsAttackPayloadLogging").getAppsecAdvancedSettingsAttackPayloadLoggingOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecAdvancedSettingsAttackPayloadLogging","getAppsecAdvancedSettingsAttackPayloadLoggingOutput"], () => require("./getAppsecAdvancedSettingsAttackPayloadLogging"));

export { GetAppsecAdvancedSettingsEvasivePathMatchArgs, GetAppsecAdvancedSettingsEvasivePathMatchResult, GetAppsecAdvancedSettingsEvasivePathMatchOutputArgs } from "./getAppsecAdvancedSettingsEvasivePathMatch";
export const getAppsecAdvancedSettingsEvasivePathMatch: typeof import("./getAppsecAdvancedSettingsEvasivePathMatch").getAppsecAdvancedSettingsEvasivePathMatch = null as any;
export const getAppsecAdvancedSettingsEvasivePathMatchOutput: typeof import("./getAppsecAdvancedSettingsEvasivePathMatch").getAppsecAdvancedSettingsEvasivePathMatchOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecAdvancedSettingsEvasivePathMatch","getAppsecAdvancedSettingsEvasivePathMatchOutput"], () => require("./getAppsecAdvancedSettingsEvasivePathMatch"));

export { GetAppsecAdvancedSettingsLoggingArgs, GetAppsecAdvancedSettingsLoggingResult, GetAppsecAdvancedSettingsLoggingOutputArgs } from "./getAppsecAdvancedSettingsLogging";
export const getAppsecAdvancedSettingsLogging: typeof import("./getAppsecAdvancedSettingsLogging").getAppsecAdvancedSettingsLogging = null as any;
export const getAppsecAdvancedSettingsLoggingOutput: typeof import("./getAppsecAdvancedSettingsLogging").getAppsecAdvancedSettingsLoggingOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecAdvancedSettingsLogging","getAppsecAdvancedSettingsLoggingOutput"], () => require("./getAppsecAdvancedSettingsLogging"));

export { GetAppsecAdvancedSettingsPiiLearningArgs, GetAppsecAdvancedSettingsPiiLearningResult, GetAppsecAdvancedSettingsPiiLearningOutputArgs } from "./getAppsecAdvancedSettingsPiiLearning";
export const getAppsecAdvancedSettingsPiiLearning: typeof import("./getAppsecAdvancedSettingsPiiLearning").getAppsecAdvancedSettingsPiiLearning = null as any;
export const getAppsecAdvancedSettingsPiiLearningOutput: typeof import("./getAppsecAdvancedSettingsPiiLearning").getAppsecAdvancedSettingsPiiLearningOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecAdvancedSettingsPiiLearning","getAppsecAdvancedSettingsPiiLearningOutput"], () => require("./getAppsecAdvancedSettingsPiiLearning"));

export { GetAppsecAdvancedSettingsPragmaHeaderArgs, GetAppsecAdvancedSettingsPragmaHeaderResult, GetAppsecAdvancedSettingsPragmaHeaderOutputArgs } from "./getAppsecAdvancedSettingsPragmaHeader";
export const getAppsecAdvancedSettingsPragmaHeader: typeof import("./getAppsecAdvancedSettingsPragmaHeader").getAppsecAdvancedSettingsPragmaHeader = null as any;
export const getAppsecAdvancedSettingsPragmaHeaderOutput: typeof import("./getAppsecAdvancedSettingsPragmaHeader").getAppsecAdvancedSettingsPragmaHeaderOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecAdvancedSettingsPragmaHeader","getAppsecAdvancedSettingsPragmaHeaderOutput"], () => require("./getAppsecAdvancedSettingsPragmaHeader"));

export { GetAppsecAdvancedSettingsPrefetchArgs, GetAppsecAdvancedSettingsPrefetchResult, GetAppsecAdvancedSettingsPrefetchOutputArgs } from "./getAppsecAdvancedSettingsPrefetch";
export const getAppsecAdvancedSettingsPrefetch: typeof import("./getAppsecAdvancedSettingsPrefetch").getAppsecAdvancedSettingsPrefetch = null as any;
export const getAppsecAdvancedSettingsPrefetchOutput: typeof import("./getAppsecAdvancedSettingsPrefetch").getAppsecAdvancedSettingsPrefetchOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecAdvancedSettingsPrefetch","getAppsecAdvancedSettingsPrefetchOutput"], () => require("./getAppsecAdvancedSettingsPrefetch"));

export { GetAppsecAdvancedSettingsRequestBodyArgs, GetAppsecAdvancedSettingsRequestBodyResult, GetAppsecAdvancedSettingsRequestBodyOutputArgs } from "./getAppsecAdvancedSettingsRequestBody";
export const getAppsecAdvancedSettingsRequestBody: typeof import("./getAppsecAdvancedSettingsRequestBody").getAppsecAdvancedSettingsRequestBody = null as any;
export const getAppsecAdvancedSettingsRequestBodyOutput: typeof import("./getAppsecAdvancedSettingsRequestBody").getAppsecAdvancedSettingsRequestBodyOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecAdvancedSettingsRequestBody","getAppsecAdvancedSettingsRequestBodyOutput"], () => require("./getAppsecAdvancedSettingsRequestBody"));

export { GetAppsecApiEndpointsArgs, GetAppsecApiEndpointsResult, GetAppsecApiEndpointsOutputArgs } from "./getAppsecApiEndpoints";
export const getAppsecApiEndpoints: typeof import("./getAppsecApiEndpoints").getAppsecApiEndpoints = null as any;
export const getAppsecApiEndpointsOutput: typeof import("./getAppsecApiEndpoints").getAppsecApiEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecApiEndpoints","getAppsecApiEndpointsOutput"], () => require("./getAppsecApiEndpoints"));

export { GetAppsecApiRequestConstraintsArgs, GetAppsecApiRequestConstraintsResult, GetAppsecApiRequestConstraintsOutputArgs } from "./getAppsecApiRequestConstraints";
export const getAppsecApiRequestConstraints: typeof import("./getAppsecApiRequestConstraints").getAppsecApiRequestConstraints = null as any;
export const getAppsecApiRequestConstraintsOutput: typeof import("./getAppsecApiRequestConstraints").getAppsecApiRequestConstraintsOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecApiRequestConstraints","getAppsecApiRequestConstraintsOutput"], () => require("./getAppsecApiRequestConstraints"));

export { GetAppsecAttackGroupsArgs, GetAppsecAttackGroupsResult, GetAppsecAttackGroupsOutputArgs } from "./getAppsecAttackGroups";
export const getAppsecAttackGroups: typeof import("./getAppsecAttackGroups").getAppsecAttackGroups = null as any;
export const getAppsecAttackGroupsOutput: typeof import("./getAppsecAttackGroups").getAppsecAttackGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecAttackGroups","getAppsecAttackGroupsOutput"], () => require("./getAppsecAttackGroups"));

export { GetAppsecBypassNetworkListsArgs, GetAppsecBypassNetworkListsResult, GetAppsecBypassNetworkListsOutputArgs } from "./getAppsecBypassNetworkLists";
export const getAppsecBypassNetworkLists: typeof import("./getAppsecBypassNetworkLists").getAppsecBypassNetworkLists = null as any;
export const getAppsecBypassNetworkListsOutput: typeof import("./getAppsecBypassNetworkLists").getAppsecBypassNetworkListsOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecBypassNetworkLists","getAppsecBypassNetworkListsOutput"], () => require("./getAppsecBypassNetworkLists"));

export { GetAppsecConfigurationArgs, GetAppsecConfigurationResult, GetAppsecConfigurationOutputArgs } from "./getAppsecConfiguration";
export const getAppsecConfiguration: typeof import("./getAppsecConfiguration").getAppsecConfiguration = null as any;
export const getAppsecConfigurationOutput: typeof import("./getAppsecConfiguration").getAppsecConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecConfiguration","getAppsecConfigurationOutput"], () => require("./getAppsecConfiguration"));

export { GetAppsecConfigurationVersionArgs, GetAppsecConfigurationVersionResult, GetAppsecConfigurationVersionOutputArgs } from "./getAppsecConfigurationVersion";
export const getAppsecConfigurationVersion: typeof import("./getAppsecConfigurationVersion").getAppsecConfigurationVersion = null as any;
export const getAppsecConfigurationVersionOutput: typeof import("./getAppsecConfigurationVersion").getAppsecConfigurationVersionOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecConfigurationVersion","getAppsecConfigurationVersionOutput"], () => require("./getAppsecConfigurationVersion"));

export { GetAppsecContractsGroupsArgs, GetAppsecContractsGroupsResult, GetAppsecContractsGroupsOutputArgs } from "./getAppsecContractsGroups";
export const getAppsecContractsGroups: typeof import("./getAppsecContractsGroups").getAppsecContractsGroups = null as any;
export const getAppsecContractsGroupsOutput: typeof import("./getAppsecContractsGroups").getAppsecContractsGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecContractsGroups","getAppsecContractsGroupsOutput"], () => require("./getAppsecContractsGroups"));

export { GetAppsecCustomDenyArgs, GetAppsecCustomDenyResult, GetAppsecCustomDenyOutputArgs } from "./getAppsecCustomDeny";
export const getAppsecCustomDeny: typeof import("./getAppsecCustomDeny").getAppsecCustomDeny = null as any;
export const getAppsecCustomDenyOutput: typeof import("./getAppsecCustomDeny").getAppsecCustomDenyOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecCustomDeny","getAppsecCustomDenyOutput"], () => require("./getAppsecCustomDeny"));

export { GetAppsecCustomRuleActionsArgs, GetAppsecCustomRuleActionsResult, GetAppsecCustomRuleActionsOutputArgs } from "./getAppsecCustomRuleActions";
export const getAppsecCustomRuleActions: typeof import("./getAppsecCustomRuleActions").getAppsecCustomRuleActions = null as any;
export const getAppsecCustomRuleActionsOutput: typeof import("./getAppsecCustomRuleActions").getAppsecCustomRuleActionsOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecCustomRuleActions","getAppsecCustomRuleActionsOutput"], () => require("./getAppsecCustomRuleActions"));

export { GetAppsecCustomRulesArgs, GetAppsecCustomRulesResult, GetAppsecCustomRulesOutputArgs } from "./getAppsecCustomRules";
export const getAppsecCustomRules: typeof import("./getAppsecCustomRules").getAppsecCustomRules = null as any;
export const getAppsecCustomRulesOutput: typeof import("./getAppsecCustomRules").getAppsecCustomRulesOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecCustomRules","getAppsecCustomRulesOutput"], () => require("./getAppsecCustomRules"));

export { GetAppsecEvalArgs, GetAppsecEvalResult, GetAppsecEvalOutputArgs } from "./getAppsecEval";
export const getAppsecEval: typeof import("./getAppsecEval").getAppsecEval = null as any;
export const getAppsecEvalOutput: typeof import("./getAppsecEval").getAppsecEvalOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecEval","getAppsecEvalOutput"], () => require("./getAppsecEval"));

export { GetAppsecEvalGroupsArgs, GetAppsecEvalGroupsResult, GetAppsecEvalGroupsOutputArgs } from "./getAppsecEvalGroups";
export const getAppsecEvalGroups: typeof import("./getAppsecEvalGroups").getAppsecEvalGroups = null as any;
export const getAppsecEvalGroupsOutput: typeof import("./getAppsecEvalGroups").getAppsecEvalGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecEvalGroups","getAppsecEvalGroupsOutput"], () => require("./getAppsecEvalGroups"));

export { GetAppsecEvalPenaltyBoxArgs, GetAppsecEvalPenaltyBoxResult, GetAppsecEvalPenaltyBoxOutputArgs } from "./getAppsecEvalPenaltyBox";
export const getAppsecEvalPenaltyBox: typeof import("./getAppsecEvalPenaltyBox").getAppsecEvalPenaltyBox = null as any;
export const getAppsecEvalPenaltyBoxOutput: typeof import("./getAppsecEvalPenaltyBox").getAppsecEvalPenaltyBoxOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecEvalPenaltyBox","getAppsecEvalPenaltyBoxOutput"], () => require("./getAppsecEvalPenaltyBox"));

export { GetAppsecEvalPenaltyBoxConditionsArgs, GetAppsecEvalPenaltyBoxConditionsResult, GetAppsecEvalPenaltyBoxConditionsOutputArgs } from "./getAppsecEvalPenaltyBoxConditions";
export const getAppsecEvalPenaltyBoxConditions: typeof import("./getAppsecEvalPenaltyBoxConditions").getAppsecEvalPenaltyBoxConditions = null as any;
export const getAppsecEvalPenaltyBoxConditionsOutput: typeof import("./getAppsecEvalPenaltyBoxConditions").getAppsecEvalPenaltyBoxConditionsOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecEvalPenaltyBoxConditions","getAppsecEvalPenaltyBoxConditionsOutput"], () => require("./getAppsecEvalPenaltyBoxConditions"));

export { GetAppsecEvalRulesArgs, GetAppsecEvalRulesResult, GetAppsecEvalRulesOutputArgs } from "./getAppsecEvalRules";
export const getAppsecEvalRules: typeof import("./getAppsecEvalRules").getAppsecEvalRules = null as any;
export const getAppsecEvalRulesOutput: typeof import("./getAppsecEvalRules").getAppsecEvalRulesOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecEvalRules","getAppsecEvalRulesOutput"], () => require("./getAppsecEvalRules"));

export { GetAppsecExportConfigurationArgs, GetAppsecExportConfigurationResult, GetAppsecExportConfigurationOutputArgs } from "./getAppsecExportConfiguration";
export const getAppsecExportConfiguration: typeof import("./getAppsecExportConfiguration").getAppsecExportConfiguration = null as any;
export const getAppsecExportConfigurationOutput: typeof import("./getAppsecExportConfiguration").getAppsecExportConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecExportConfiguration","getAppsecExportConfigurationOutput"], () => require("./getAppsecExportConfiguration"));

export { GetAppsecFailoverHostnamesArgs, GetAppsecFailoverHostnamesResult, GetAppsecFailoverHostnamesOutputArgs } from "./getAppsecFailoverHostnames";
export const getAppsecFailoverHostnames: typeof import("./getAppsecFailoverHostnames").getAppsecFailoverHostnames = null as any;
export const getAppsecFailoverHostnamesOutput: typeof import("./getAppsecFailoverHostnames").getAppsecFailoverHostnamesOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecFailoverHostnames","getAppsecFailoverHostnamesOutput"], () => require("./getAppsecFailoverHostnames"));

export { GetAppsecHostnameCoverageArgs, GetAppsecHostnameCoverageResult, GetAppsecHostnameCoverageOutputArgs } from "./getAppsecHostnameCoverage";
export const getAppsecHostnameCoverage: typeof import("./getAppsecHostnameCoverage").getAppsecHostnameCoverage = null as any;
export const getAppsecHostnameCoverageOutput: typeof import("./getAppsecHostnameCoverage").getAppsecHostnameCoverageOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecHostnameCoverage","getAppsecHostnameCoverageOutput"], () => require("./getAppsecHostnameCoverage"));

export { GetAppsecHostnameCoverageMatchTargetsArgs, GetAppsecHostnameCoverageMatchTargetsResult, GetAppsecHostnameCoverageMatchTargetsOutputArgs } from "./getAppsecHostnameCoverageMatchTargets";
export const getAppsecHostnameCoverageMatchTargets: typeof import("./getAppsecHostnameCoverageMatchTargets").getAppsecHostnameCoverageMatchTargets = null as any;
export const getAppsecHostnameCoverageMatchTargetsOutput: typeof import("./getAppsecHostnameCoverageMatchTargets").getAppsecHostnameCoverageMatchTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecHostnameCoverageMatchTargets","getAppsecHostnameCoverageMatchTargetsOutput"], () => require("./getAppsecHostnameCoverageMatchTargets"));

export { GetAppsecHostnameCoverageOverlappingArgs, GetAppsecHostnameCoverageOverlappingResult, GetAppsecHostnameCoverageOverlappingOutputArgs } from "./getAppsecHostnameCoverageOverlapping";
export const getAppsecHostnameCoverageOverlapping: typeof import("./getAppsecHostnameCoverageOverlapping").getAppsecHostnameCoverageOverlapping = null as any;
export const getAppsecHostnameCoverageOverlappingOutput: typeof import("./getAppsecHostnameCoverageOverlapping").getAppsecHostnameCoverageOverlappingOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecHostnameCoverageOverlapping","getAppsecHostnameCoverageOverlappingOutput"], () => require("./getAppsecHostnameCoverageOverlapping"));

export { GetAppsecIpGeoArgs, GetAppsecIpGeoResult, GetAppsecIpGeoOutputArgs } from "./getAppsecIpGeo";
export const getAppsecIpGeo: typeof import("./getAppsecIpGeo").getAppsecIpGeo = null as any;
export const getAppsecIpGeoOutput: typeof import("./getAppsecIpGeo").getAppsecIpGeoOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecIpGeo","getAppsecIpGeoOutput"], () => require("./getAppsecIpGeo"));

export { GetAppsecMalwareContentTypesArgs, GetAppsecMalwareContentTypesResult, GetAppsecMalwareContentTypesOutputArgs } from "./getAppsecMalwareContentTypes";
export const getAppsecMalwareContentTypes: typeof import("./getAppsecMalwareContentTypes").getAppsecMalwareContentTypes = null as any;
export const getAppsecMalwareContentTypesOutput: typeof import("./getAppsecMalwareContentTypes").getAppsecMalwareContentTypesOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecMalwareContentTypes","getAppsecMalwareContentTypesOutput"], () => require("./getAppsecMalwareContentTypes"));

export { GetAppsecMalwarePoliciesArgs, GetAppsecMalwarePoliciesResult, GetAppsecMalwarePoliciesOutputArgs } from "./getAppsecMalwarePolicies";
export const getAppsecMalwarePolicies: typeof import("./getAppsecMalwarePolicies").getAppsecMalwarePolicies = null as any;
export const getAppsecMalwarePoliciesOutput: typeof import("./getAppsecMalwarePolicies").getAppsecMalwarePoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecMalwarePolicies","getAppsecMalwarePoliciesOutput"], () => require("./getAppsecMalwarePolicies"));

export { GetAppsecMalwarePolicyActionsArgs, GetAppsecMalwarePolicyActionsResult, GetAppsecMalwarePolicyActionsOutputArgs } from "./getAppsecMalwarePolicyActions";
export const getAppsecMalwarePolicyActions: typeof import("./getAppsecMalwarePolicyActions").getAppsecMalwarePolicyActions = null as any;
export const getAppsecMalwarePolicyActionsOutput: typeof import("./getAppsecMalwarePolicyActions").getAppsecMalwarePolicyActionsOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecMalwarePolicyActions","getAppsecMalwarePolicyActionsOutput"], () => require("./getAppsecMalwarePolicyActions"));

export { GetAppsecMatchTargetsArgs, GetAppsecMatchTargetsResult, GetAppsecMatchTargetsOutputArgs } from "./getAppsecMatchTargets";
export const getAppsecMatchTargets: typeof import("./getAppsecMatchTargets").getAppsecMatchTargets = null as any;
export const getAppsecMatchTargetsOutput: typeof import("./getAppsecMatchTargets").getAppsecMatchTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecMatchTargets","getAppsecMatchTargetsOutput"], () => require("./getAppsecMatchTargets"));

export { GetAppsecPenaltyBoxArgs, GetAppsecPenaltyBoxResult, GetAppsecPenaltyBoxOutputArgs } from "./getAppsecPenaltyBox";
export const getAppsecPenaltyBox: typeof import("./getAppsecPenaltyBox").getAppsecPenaltyBox = null as any;
export const getAppsecPenaltyBoxOutput: typeof import("./getAppsecPenaltyBox").getAppsecPenaltyBoxOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecPenaltyBox","getAppsecPenaltyBoxOutput"], () => require("./getAppsecPenaltyBox"));

export { GetAppsecPenaltyBoxConditionsArgs, GetAppsecPenaltyBoxConditionsResult, GetAppsecPenaltyBoxConditionsOutputArgs } from "./getAppsecPenaltyBoxConditions";
export const getAppsecPenaltyBoxConditions: typeof import("./getAppsecPenaltyBoxConditions").getAppsecPenaltyBoxConditions = null as any;
export const getAppsecPenaltyBoxConditionsOutput: typeof import("./getAppsecPenaltyBoxConditions").getAppsecPenaltyBoxConditionsOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecPenaltyBoxConditions","getAppsecPenaltyBoxConditionsOutput"], () => require("./getAppsecPenaltyBoxConditions"));

export { GetAppsecRatePoliciesArgs, GetAppsecRatePoliciesResult, GetAppsecRatePoliciesOutputArgs } from "./getAppsecRatePolicies";
export const getAppsecRatePolicies: typeof import("./getAppsecRatePolicies").getAppsecRatePolicies = null as any;
export const getAppsecRatePoliciesOutput: typeof import("./getAppsecRatePolicies").getAppsecRatePoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecRatePolicies","getAppsecRatePoliciesOutput"], () => require("./getAppsecRatePolicies"));

export { GetAppsecRatePolicyActionsArgs, GetAppsecRatePolicyActionsResult, GetAppsecRatePolicyActionsOutputArgs } from "./getAppsecRatePolicyActions";
export const getAppsecRatePolicyActions: typeof import("./getAppsecRatePolicyActions").getAppsecRatePolicyActions = null as any;
export const getAppsecRatePolicyActionsOutput: typeof import("./getAppsecRatePolicyActions").getAppsecRatePolicyActionsOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecRatePolicyActions","getAppsecRatePolicyActionsOutput"], () => require("./getAppsecRatePolicyActions"));

export { GetAppsecReputationProfileActionsArgs, GetAppsecReputationProfileActionsResult, GetAppsecReputationProfileActionsOutputArgs } from "./getAppsecReputationProfileActions";
export const getAppsecReputationProfileActions: typeof import("./getAppsecReputationProfileActions").getAppsecReputationProfileActions = null as any;
export const getAppsecReputationProfileActionsOutput: typeof import("./getAppsecReputationProfileActions").getAppsecReputationProfileActionsOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecReputationProfileActions","getAppsecReputationProfileActionsOutput"], () => require("./getAppsecReputationProfileActions"));

export { GetAppsecReputationProfileAnalysisArgs, GetAppsecReputationProfileAnalysisResult, GetAppsecReputationProfileAnalysisOutputArgs } from "./getAppsecReputationProfileAnalysis";
export const getAppsecReputationProfileAnalysis: typeof import("./getAppsecReputationProfileAnalysis").getAppsecReputationProfileAnalysis = null as any;
export const getAppsecReputationProfileAnalysisOutput: typeof import("./getAppsecReputationProfileAnalysis").getAppsecReputationProfileAnalysisOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecReputationProfileAnalysis","getAppsecReputationProfileAnalysisOutput"], () => require("./getAppsecReputationProfileAnalysis"));

export { GetAppsecReputationProfilesArgs, GetAppsecReputationProfilesResult, GetAppsecReputationProfilesOutputArgs } from "./getAppsecReputationProfiles";
export const getAppsecReputationProfiles: typeof import("./getAppsecReputationProfiles").getAppsecReputationProfiles = null as any;
export const getAppsecReputationProfilesOutput: typeof import("./getAppsecReputationProfiles").getAppsecReputationProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecReputationProfiles","getAppsecReputationProfilesOutput"], () => require("./getAppsecReputationProfiles"));

export { GetAppsecRuleUpgradeDetailsArgs, GetAppsecRuleUpgradeDetailsResult, GetAppsecRuleUpgradeDetailsOutputArgs } from "./getAppsecRuleUpgradeDetails";
export const getAppsecRuleUpgradeDetails: typeof import("./getAppsecRuleUpgradeDetails").getAppsecRuleUpgradeDetails = null as any;
export const getAppsecRuleUpgradeDetailsOutput: typeof import("./getAppsecRuleUpgradeDetails").getAppsecRuleUpgradeDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecRuleUpgradeDetails","getAppsecRuleUpgradeDetailsOutput"], () => require("./getAppsecRuleUpgradeDetails"));

export { GetAppsecRulesArgs, GetAppsecRulesResult, GetAppsecRulesOutputArgs } from "./getAppsecRules";
export const getAppsecRules: typeof import("./getAppsecRules").getAppsecRules = null as any;
export const getAppsecRulesOutput: typeof import("./getAppsecRules").getAppsecRulesOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecRules","getAppsecRulesOutput"], () => require("./getAppsecRules"));

export { GetAppsecSecurityPolicyArgs, GetAppsecSecurityPolicyResult, GetAppsecSecurityPolicyOutputArgs } from "./getAppsecSecurityPolicy";
export const getAppsecSecurityPolicy: typeof import("./getAppsecSecurityPolicy").getAppsecSecurityPolicy = null as any;
export const getAppsecSecurityPolicyOutput: typeof import("./getAppsecSecurityPolicy").getAppsecSecurityPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecSecurityPolicy","getAppsecSecurityPolicyOutput"], () => require("./getAppsecSecurityPolicy"));

export { GetAppsecSecurityPolicyProtectionsArgs, GetAppsecSecurityPolicyProtectionsResult, GetAppsecSecurityPolicyProtectionsOutputArgs } from "./getAppsecSecurityPolicyProtections";
export const getAppsecSecurityPolicyProtections: typeof import("./getAppsecSecurityPolicyProtections").getAppsecSecurityPolicyProtections = null as any;
export const getAppsecSecurityPolicyProtectionsOutput: typeof import("./getAppsecSecurityPolicyProtections").getAppsecSecurityPolicyProtectionsOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecSecurityPolicyProtections","getAppsecSecurityPolicyProtectionsOutput"], () => require("./getAppsecSecurityPolicyProtections"));

export { GetAppsecSelectableHostnamesArgs, GetAppsecSelectableHostnamesResult, GetAppsecSelectableHostnamesOutputArgs } from "./getAppsecSelectableHostnames";
export const getAppsecSelectableHostnames: typeof import("./getAppsecSelectableHostnames").getAppsecSelectableHostnames = null as any;
export const getAppsecSelectableHostnamesOutput: typeof import("./getAppsecSelectableHostnames").getAppsecSelectableHostnamesOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecSelectableHostnames","getAppsecSelectableHostnamesOutput"], () => require("./getAppsecSelectableHostnames"));

export { GetAppsecSelectedHostnamesArgs, GetAppsecSelectedHostnamesResult, GetAppsecSelectedHostnamesOutputArgs } from "./getAppsecSelectedHostnames";
export const getAppsecSelectedHostnames: typeof import("./getAppsecSelectedHostnames").getAppsecSelectedHostnames = null as any;
export const getAppsecSelectedHostnamesOutput: typeof import("./getAppsecSelectedHostnames").getAppsecSelectedHostnamesOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecSelectedHostnames","getAppsecSelectedHostnamesOutput"], () => require("./getAppsecSelectedHostnames"));

export { GetAppsecSiemDefinitionsArgs, GetAppsecSiemDefinitionsResult, GetAppsecSiemDefinitionsOutputArgs } from "./getAppsecSiemDefinitions";
export const getAppsecSiemDefinitions: typeof import("./getAppsecSiemDefinitions").getAppsecSiemDefinitions = null as any;
export const getAppsecSiemDefinitionsOutput: typeof import("./getAppsecSiemDefinitions").getAppsecSiemDefinitionsOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecSiemDefinitions","getAppsecSiemDefinitionsOutput"], () => require("./getAppsecSiemDefinitions"));

export { GetAppsecSiemSettingsArgs, GetAppsecSiemSettingsResult, GetAppsecSiemSettingsOutputArgs } from "./getAppsecSiemSettings";
export const getAppsecSiemSettings: typeof import("./getAppsecSiemSettings").getAppsecSiemSettings = null as any;
export const getAppsecSiemSettingsOutput: typeof import("./getAppsecSiemSettings").getAppsecSiemSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecSiemSettings","getAppsecSiemSettingsOutput"], () => require("./getAppsecSiemSettings"));

export { GetAppsecSlowPostArgs, GetAppsecSlowPostResult, GetAppsecSlowPostOutputArgs } from "./getAppsecSlowPost";
export const getAppsecSlowPost: typeof import("./getAppsecSlowPost").getAppsecSlowPost = null as any;
export const getAppsecSlowPostOutput: typeof import("./getAppsecSlowPost").getAppsecSlowPostOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecSlowPost","getAppsecSlowPostOutput"], () => require("./getAppsecSlowPost"));

export { GetAppsecThreatIntelArgs, GetAppsecThreatIntelResult, GetAppsecThreatIntelOutputArgs } from "./getAppsecThreatIntel";
export const getAppsecThreatIntel: typeof import("./getAppsecThreatIntel").getAppsecThreatIntel = null as any;
export const getAppsecThreatIntelOutput: typeof import("./getAppsecThreatIntel").getAppsecThreatIntelOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecThreatIntel","getAppsecThreatIntelOutput"], () => require("./getAppsecThreatIntel"));

export { GetAppsecTuningRecommendationsArgs, GetAppsecTuningRecommendationsResult, GetAppsecTuningRecommendationsOutputArgs } from "./getAppsecTuningRecommendations";
export const getAppsecTuningRecommendations: typeof import("./getAppsecTuningRecommendations").getAppsecTuningRecommendations = null as any;
export const getAppsecTuningRecommendationsOutput: typeof import("./getAppsecTuningRecommendations").getAppsecTuningRecommendationsOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecTuningRecommendations","getAppsecTuningRecommendationsOutput"], () => require("./getAppsecTuningRecommendations"));

export { GetAppsecVersionNotesArgs, GetAppsecVersionNotesResult, GetAppsecVersionNotesOutputArgs } from "./getAppsecVersionNotes";
export const getAppsecVersionNotes: typeof import("./getAppsecVersionNotes").getAppsecVersionNotes = null as any;
export const getAppsecVersionNotesOutput: typeof import("./getAppsecVersionNotes").getAppsecVersionNotesOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecVersionNotes","getAppsecVersionNotesOutput"], () => require("./getAppsecVersionNotes"));

export { GetAppsecWafModeArgs, GetAppsecWafModeResult, GetAppsecWafModeOutputArgs } from "./getAppsecWafMode";
export const getAppsecWafMode: typeof import("./getAppsecWafMode").getAppsecWafMode = null as any;
export const getAppsecWafModeOutput: typeof import("./getAppsecWafMode").getAppsecWafModeOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecWafMode","getAppsecWafModeOutput"], () => require("./getAppsecWafMode"));

export { GetAppsecWapSelectedHostnamesArgs, GetAppsecWapSelectedHostnamesResult, GetAppsecWapSelectedHostnamesOutputArgs } from "./getAppsecWapSelectedHostnames";
export const getAppsecWapSelectedHostnames: typeof import("./getAppsecWapSelectedHostnames").getAppsecWapSelectedHostnames = null as any;
export const getAppsecWapSelectedHostnamesOutput: typeof import("./getAppsecWapSelectedHostnames").getAppsecWapSelectedHostnamesOutput = null as any;
utilities.lazyLoad(exports, ["getAppsecWapSelectedHostnames","getAppsecWapSelectedHostnamesOutput"], () => require("./getAppsecWapSelectedHostnames"));

export { GetAuthoritiesSetArgs, GetAuthoritiesSetResult, GetAuthoritiesSetOutputArgs } from "./getAuthoritiesSet";
export const getAuthoritiesSet: typeof import("./getAuthoritiesSet").getAuthoritiesSet = null as any;
export const getAuthoritiesSetOutput: typeof import("./getAuthoritiesSet").getAuthoritiesSetOutput = null as any;
utilities.lazyLoad(exports, ["getAuthoritiesSet","getAuthoritiesSetOutput"], () => require("./getAuthoritiesSet"));

export { GetBotmanAkamaiBotCategoryArgs, GetBotmanAkamaiBotCategoryResult, GetBotmanAkamaiBotCategoryOutputArgs } from "./getBotmanAkamaiBotCategory";
export const getBotmanAkamaiBotCategory: typeof import("./getBotmanAkamaiBotCategory").getBotmanAkamaiBotCategory = null as any;
export const getBotmanAkamaiBotCategoryOutput: typeof import("./getBotmanAkamaiBotCategory").getBotmanAkamaiBotCategoryOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanAkamaiBotCategory","getBotmanAkamaiBotCategoryOutput"], () => require("./getBotmanAkamaiBotCategory"));

export { GetBotmanAkamaiBotCategoryActionArgs, GetBotmanAkamaiBotCategoryActionResult, GetBotmanAkamaiBotCategoryActionOutputArgs } from "./getBotmanAkamaiBotCategoryAction";
export const getBotmanAkamaiBotCategoryAction: typeof import("./getBotmanAkamaiBotCategoryAction").getBotmanAkamaiBotCategoryAction = null as any;
export const getBotmanAkamaiBotCategoryActionOutput: typeof import("./getBotmanAkamaiBotCategoryAction").getBotmanAkamaiBotCategoryActionOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanAkamaiBotCategoryAction","getBotmanAkamaiBotCategoryActionOutput"], () => require("./getBotmanAkamaiBotCategoryAction"));

export { GetBotmanAkamaiDefinedBotArgs, GetBotmanAkamaiDefinedBotResult, GetBotmanAkamaiDefinedBotOutputArgs } from "./getBotmanAkamaiDefinedBot";
export const getBotmanAkamaiDefinedBot: typeof import("./getBotmanAkamaiDefinedBot").getBotmanAkamaiDefinedBot = null as any;
export const getBotmanAkamaiDefinedBotOutput: typeof import("./getBotmanAkamaiDefinedBot").getBotmanAkamaiDefinedBotOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanAkamaiDefinedBot","getBotmanAkamaiDefinedBotOutput"], () => require("./getBotmanAkamaiDefinedBot"));

export { GetBotmanBotAnalyticsCookieArgs, GetBotmanBotAnalyticsCookieResult, GetBotmanBotAnalyticsCookieOutputArgs } from "./getBotmanBotAnalyticsCookie";
export const getBotmanBotAnalyticsCookie: typeof import("./getBotmanBotAnalyticsCookie").getBotmanBotAnalyticsCookie = null as any;
export const getBotmanBotAnalyticsCookieOutput: typeof import("./getBotmanBotAnalyticsCookie").getBotmanBotAnalyticsCookieOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanBotAnalyticsCookie","getBotmanBotAnalyticsCookieOutput"], () => require("./getBotmanBotAnalyticsCookie"));

export { GetBotmanBotAnalyticsCookieValuesArgs, GetBotmanBotAnalyticsCookieValuesResult, GetBotmanBotAnalyticsCookieValuesOutputArgs } from "./getBotmanBotAnalyticsCookieValues";
export const getBotmanBotAnalyticsCookieValues: typeof import("./getBotmanBotAnalyticsCookieValues").getBotmanBotAnalyticsCookieValues = null as any;
export const getBotmanBotAnalyticsCookieValuesOutput: typeof import("./getBotmanBotAnalyticsCookieValues").getBotmanBotAnalyticsCookieValuesOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanBotAnalyticsCookieValues","getBotmanBotAnalyticsCookieValuesOutput"], () => require("./getBotmanBotAnalyticsCookieValues"));

export { GetBotmanBotCategoryExceptionArgs, GetBotmanBotCategoryExceptionResult, GetBotmanBotCategoryExceptionOutputArgs } from "./getBotmanBotCategoryException";
export const getBotmanBotCategoryException: typeof import("./getBotmanBotCategoryException").getBotmanBotCategoryException = null as any;
export const getBotmanBotCategoryExceptionOutput: typeof import("./getBotmanBotCategoryException").getBotmanBotCategoryExceptionOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanBotCategoryException","getBotmanBotCategoryExceptionOutput"], () => require("./getBotmanBotCategoryException"));

export { GetBotmanBotDetectionArgs, GetBotmanBotDetectionResult, GetBotmanBotDetectionOutputArgs } from "./getBotmanBotDetection";
export const getBotmanBotDetection: typeof import("./getBotmanBotDetection").getBotmanBotDetection = null as any;
export const getBotmanBotDetectionOutput: typeof import("./getBotmanBotDetection").getBotmanBotDetectionOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanBotDetection","getBotmanBotDetectionOutput"], () => require("./getBotmanBotDetection"));

export { GetBotmanBotDetectionActionArgs, GetBotmanBotDetectionActionResult, GetBotmanBotDetectionActionOutputArgs } from "./getBotmanBotDetectionAction";
export const getBotmanBotDetectionAction: typeof import("./getBotmanBotDetectionAction").getBotmanBotDetectionAction = null as any;
export const getBotmanBotDetectionActionOutput: typeof import("./getBotmanBotDetectionAction").getBotmanBotDetectionActionOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanBotDetectionAction","getBotmanBotDetectionActionOutput"], () => require("./getBotmanBotDetectionAction"));

export { GetBotmanBotEndpointCoverageReportArgs, GetBotmanBotEndpointCoverageReportResult, GetBotmanBotEndpointCoverageReportOutputArgs } from "./getBotmanBotEndpointCoverageReport";
export const getBotmanBotEndpointCoverageReport: typeof import("./getBotmanBotEndpointCoverageReport").getBotmanBotEndpointCoverageReport = null as any;
export const getBotmanBotEndpointCoverageReportOutput: typeof import("./getBotmanBotEndpointCoverageReport").getBotmanBotEndpointCoverageReportOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanBotEndpointCoverageReport","getBotmanBotEndpointCoverageReportOutput"], () => require("./getBotmanBotEndpointCoverageReport"));

export { GetBotmanBotManagementSettingsArgs, GetBotmanBotManagementSettingsResult, GetBotmanBotManagementSettingsOutputArgs } from "./getBotmanBotManagementSettings";
export const getBotmanBotManagementSettings: typeof import("./getBotmanBotManagementSettings").getBotmanBotManagementSettings = null as any;
export const getBotmanBotManagementSettingsOutput: typeof import("./getBotmanBotManagementSettings").getBotmanBotManagementSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanBotManagementSettings","getBotmanBotManagementSettingsOutput"], () => require("./getBotmanBotManagementSettings"));

export { GetBotmanChallengeActionArgs, GetBotmanChallengeActionResult, GetBotmanChallengeActionOutputArgs } from "./getBotmanChallengeAction";
export const getBotmanChallengeAction: typeof import("./getBotmanChallengeAction").getBotmanChallengeAction = null as any;
export const getBotmanChallengeActionOutput: typeof import("./getBotmanChallengeAction").getBotmanChallengeActionOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanChallengeAction","getBotmanChallengeActionOutput"], () => require("./getBotmanChallengeAction"));

export { GetBotmanChallengeInjectionRulesArgs, GetBotmanChallengeInjectionRulesResult, GetBotmanChallengeInjectionRulesOutputArgs } from "./getBotmanChallengeInjectionRules";
export const getBotmanChallengeInjectionRules: typeof import("./getBotmanChallengeInjectionRules").getBotmanChallengeInjectionRules = null as any;
export const getBotmanChallengeInjectionRulesOutput: typeof import("./getBotmanChallengeInjectionRules").getBotmanChallengeInjectionRulesOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanChallengeInjectionRules","getBotmanChallengeInjectionRulesOutput"], () => require("./getBotmanChallengeInjectionRules"));

export { GetBotmanChallengeInterceptionRulesArgs, GetBotmanChallengeInterceptionRulesResult, GetBotmanChallengeInterceptionRulesOutputArgs } from "./getBotmanChallengeInterceptionRules";
export const getBotmanChallengeInterceptionRules: typeof import("./getBotmanChallengeInterceptionRules").getBotmanChallengeInterceptionRules = null as any;
export const getBotmanChallengeInterceptionRulesOutput: typeof import("./getBotmanChallengeInterceptionRules").getBotmanChallengeInterceptionRulesOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanChallengeInterceptionRules","getBotmanChallengeInterceptionRulesOutput"], () => require("./getBotmanChallengeInterceptionRules"));

export { GetBotmanClientSideSecurityArgs, GetBotmanClientSideSecurityResult, GetBotmanClientSideSecurityOutputArgs } from "./getBotmanClientSideSecurity";
export const getBotmanClientSideSecurity: typeof import("./getBotmanClientSideSecurity").getBotmanClientSideSecurity = null as any;
export const getBotmanClientSideSecurityOutput: typeof import("./getBotmanClientSideSecurity").getBotmanClientSideSecurityOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanClientSideSecurity","getBotmanClientSideSecurityOutput"], () => require("./getBotmanClientSideSecurity"));

export { GetBotmanConditionalActionArgs, GetBotmanConditionalActionResult, GetBotmanConditionalActionOutputArgs } from "./getBotmanConditionalAction";
export const getBotmanConditionalAction: typeof import("./getBotmanConditionalAction").getBotmanConditionalAction = null as any;
export const getBotmanConditionalActionOutput: typeof import("./getBotmanConditionalAction").getBotmanConditionalActionOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanConditionalAction","getBotmanConditionalActionOutput"], () => require("./getBotmanConditionalAction"));

export { GetBotmanContentProtectionJavascriptInjectionRuleArgs, GetBotmanContentProtectionJavascriptInjectionRuleResult, GetBotmanContentProtectionJavascriptInjectionRuleOutputArgs } from "./getBotmanContentProtectionJavascriptInjectionRule";
export const getBotmanContentProtectionJavascriptInjectionRule: typeof import("./getBotmanContentProtectionJavascriptInjectionRule").getBotmanContentProtectionJavascriptInjectionRule = null as any;
export const getBotmanContentProtectionJavascriptInjectionRuleOutput: typeof import("./getBotmanContentProtectionJavascriptInjectionRule").getBotmanContentProtectionJavascriptInjectionRuleOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanContentProtectionJavascriptInjectionRule","getBotmanContentProtectionJavascriptInjectionRuleOutput"], () => require("./getBotmanContentProtectionJavascriptInjectionRule"));

export { GetBotmanContentProtectionRuleArgs, GetBotmanContentProtectionRuleResult, GetBotmanContentProtectionRuleOutputArgs } from "./getBotmanContentProtectionRule";
export const getBotmanContentProtectionRule: typeof import("./getBotmanContentProtectionRule").getBotmanContentProtectionRule = null as any;
export const getBotmanContentProtectionRuleOutput: typeof import("./getBotmanContentProtectionRule").getBotmanContentProtectionRuleOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanContentProtectionRule","getBotmanContentProtectionRuleOutput"], () => require("./getBotmanContentProtectionRule"));

export { GetBotmanContentProtectionRuleSequenceArgs, GetBotmanContentProtectionRuleSequenceResult, GetBotmanContentProtectionRuleSequenceOutputArgs } from "./getBotmanContentProtectionRuleSequence";
export const getBotmanContentProtectionRuleSequence: typeof import("./getBotmanContentProtectionRuleSequence").getBotmanContentProtectionRuleSequence = null as any;
export const getBotmanContentProtectionRuleSequenceOutput: typeof import("./getBotmanContentProtectionRuleSequence").getBotmanContentProtectionRuleSequenceOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanContentProtectionRuleSequence","getBotmanContentProtectionRuleSequenceOutput"], () => require("./getBotmanContentProtectionRuleSequence"));

export { GetBotmanCustomBotCategoryArgs, GetBotmanCustomBotCategoryResult, GetBotmanCustomBotCategoryOutputArgs } from "./getBotmanCustomBotCategory";
export const getBotmanCustomBotCategory: typeof import("./getBotmanCustomBotCategory").getBotmanCustomBotCategory = null as any;
export const getBotmanCustomBotCategoryOutput: typeof import("./getBotmanCustomBotCategory").getBotmanCustomBotCategoryOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanCustomBotCategory","getBotmanCustomBotCategoryOutput"], () => require("./getBotmanCustomBotCategory"));

export { GetBotmanCustomBotCategoryActionArgs, GetBotmanCustomBotCategoryActionResult, GetBotmanCustomBotCategoryActionOutputArgs } from "./getBotmanCustomBotCategoryAction";
export const getBotmanCustomBotCategoryAction: typeof import("./getBotmanCustomBotCategoryAction").getBotmanCustomBotCategoryAction = null as any;
export const getBotmanCustomBotCategoryActionOutput: typeof import("./getBotmanCustomBotCategoryAction").getBotmanCustomBotCategoryActionOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanCustomBotCategoryAction","getBotmanCustomBotCategoryActionOutput"], () => require("./getBotmanCustomBotCategoryAction"));

export { GetBotmanCustomBotCategoryItemSequenceArgs, GetBotmanCustomBotCategoryItemSequenceResult, GetBotmanCustomBotCategoryItemSequenceOutputArgs } from "./getBotmanCustomBotCategoryItemSequence";
export const getBotmanCustomBotCategoryItemSequence: typeof import("./getBotmanCustomBotCategoryItemSequence").getBotmanCustomBotCategoryItemSequence = null as any;
export const getBotmanCustomBotCategoryItemSequenceOutput: typeof import("./getBotmanCustomBotCategoryItemSequence").getBotmanCustomBotCategoryItemSequenceOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanCustomBotCategoryItemSequence","getBotmanCustomBotCategoryItemSequenceOutput"], () => require("./getBotmanCustomBotCategoryItemSequence"));

export { GetBotmanCustomBotCategorySequenceArgs, GetBotmanCustomBotCategorySequenceResult, GetBotmanCustomBotCategorySequenceOutputArgs } from "./getBotmanCustomBotCategorySequence";
export const getBotmanCustomBotCategorySequence: typeof import("./getBotmanCustomBotCategorySequence").getBotmanCustomBotCategorySequence = null as any;
export const getBotmanCustomBotCategorySequenceOutput: typeof import("./getBotmanCustomBotCategorySequence").getBotmanCustomBotCategorySequenceOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanCustomBotCategorySequence","getBotmanCustomBotCategorySequenceOutput"], () => require("./getBotmanCustomBotCategorySequence"));

export { GetBotmanCustomClientArgs, GetBotmanCustomClientResult, GetBotmanCustomClientOutputArgs } from "./getBotmanCustomClient";
export const getBotmanCustomClient: typeof import("./getBotmanCustomClient").getBotmanCustomClient = null as any;
export const getBotmanCustomClientOutput: typeof import("./getBotmanCustomClient").getBotmanCustomClientOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanCustomClient","getBotmanCustomClientOutput"], () => require("./getBotmanCustomClient"));

export { GetBotmanCustomClientSequenceArgs, GetBotmanCustomClientSequenceResult, GetBotmanCustomClientSequenceOutputArgs } from "./getBotmanCustomClientSequence";
export const getBotmanCustomClientSequence: typeof import("./getBotmanCustomClientSequence").getBotmanCustomClientSequence = null as any;
export const getBotmanCustomClientSequenceOutput: typeof import("./getBotmanCustomClientSequence").getBotmanCustomClientSequenceOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanCustomClientSequence","getBotmanCustomClientSequenceOutput"], () => require("./getBotmanCustomClientSequence"));

export { GetBotmanCustomCodeArgs, GetBotmanCustomCodeResult, GetBotmanCustomCodeOutputArgs } from "./getBotmanCustomCode";
export const getBotmanCustomCode: typeof import("./getBotmanCustomCode").getBotmanCustomCode = null as any;
export const getBotmanCustomCodeOutput: typeof import("./getBotmanCustomCode").getBotmanCustomCodeOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanCustomCode","getBotmanCustomCodeOutput"], () => require("./getBotmanCustomCode"));

export { GetBotmanCustomDefinedBotArgs, GetBotmanCustomDefinedBotResult, GetBotmanCustomDefinedBotOutputArgs } from "./getBotmanCustomDefinedBot";
export const getBotmanCustomDefinedBot: typeof import("./getBotmanCustomDefinedBot").getBotmanCustomDefinedBot = null as any;
export const getBotmanCustomDefinedBotOutput: typeof import("./getBotmanCustomDefinedBot").getBotmanCustomDefinedBotOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanCustomDefinedBot","getBotmanCustomDefinedBotOutput"], () => require("./getBotmanCustomDefinedBot"));

export { GetBotmanCustomDenyActionArgs, GetBotmanCustomDenyActionResult, GetBotmanCustomDenyActionOutputArgs } from "./getBotmanCustomDenyAction";
export const getBotmanCustomDenyAction: typeof import("./getBotmanCustomDenyAction").getBotmanCustomDenyAction = null as any;
export const getBotmanCustomDenyActionOutput: typeof import("./getBotmanCustomDenyAction").getBotmanCustomDenyActionOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanCustomDenyAction","getBotmanCustomDenyActionOutput"], () => require("./getBotmanCustomDenyAction"));

export { GetBotmanJavascriptInjectionArgs, GetBotmanJavascriptInjectionResult, GetBotmanJavascriptInjectionOutputArgs } from "./getBotmanJavascriptInjection";
export const getBotmanJavascriptInjection: typeof import("./getBotmanJavascriptInjection").getBotmanJavascriptInjection = null as any;
export const getBotmanJavascriptInjectionOutput: typeof import("./getBotmanJavascriptInjection").getBotmanJavascriptInjectionOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanJavascriptInjection","getBotmanJavascriptInjectionOutput"], () => require("./getBotmanJavascriptInjection"));

export { GetBotmanRecategorizedAkamaiDefinedBotArgs, GetBotmanRecategorizedAkamaiDefinedBotResult, GetBotmanRecategorizedAkamaiDefinedBotOutputArgs } from "./getBotmanRecategorizedAkamaiDefinedBot";
export const getBotmanRecategorizedAkamaiDefinedBot: typeof import("./getBotmanRecategorizedAkamaiDefinedBot").getBotmanRecategorizedAkamaiDefinedBot = null as any;
export const getBotmanRecategorizedAkamaiDefinedBotOutput: typeof import("./getBotmanRecategorizedAkamaiDefinedBot").getBotmanRecategorizedAkamaiDefinedBotOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanRecategorizedAkamaiDefinedBot","getBotmanRecategorizedAkamaiDefinedBotOutput"], () => require("./getBotmanRecategorizedAkamaiDefinedBot"));

export { GetBotmanResponseActionArgs, GetBotmanResponseActionResult, GetBotmanResponseActionOutputArgs } from "./getBotmanResponseAction";
export const getBotmanResponseAction: typeof import("./getBotmanResponseAction").getBotmanResponseAction = null as any;
export const getBotmanResponseActionOutput: typeof import("./getBotmanResponseAction").getBotmanResponseActionOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanResponseAction","getBotmanResponseActionOutput"], () => require("./getBotmanResponseAction"));

export { GetBotmanServeAlternateActionArgs, GetBotmanServeAlternateActionResult, GetBotmanServeAlternateActionOutputArgs } from "./getBotmanServeAlternateAction";
export const getBotmanServeAlternateAction: typeof import("./getBotmanServeAlternateAction").getBotmanServeAlternateAction = null as any;
export const getBotmanServeAlternateActionOutput: typeof import("./getBotmanServeAlternateAction").getBotmanServeAlternateActionOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanServeAlternateAction","getBotmanServeAlternateActionOutput"], () => require("./getBotmanServeAlternateAction"));

export { GetBotmanTransactionalEndpointArgs, GetBotmanTransactionalEndpointResult, GetBotmanTransactionalEndpointOutputArgs } from "./getBotmanTransactionalEndpoint";
export const getBotmanTransactionalEndpoint: typeof import("./getBotmanTransactionalEndpoint").getBotmanTransactionalEndpoint = null as any;
export const getBotmanTransactionalEndpointOutput: typeof import("./getBotmanTransactionalEndpoint").getBotmanTransactionalEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanTransactionalEndpoint","getBotmanTransactionalEndpointOutput"], () => require("./getBotmanTransactionalEndpoint"));

export { GetBotmanTransactionalEndpointProtectionArgs, GetBotmanTransactionalEndpointProtectionResult, GetBotmanTransactionalEndpointProtectionOutputArgs } from "./getBotmanTransactionalEndpointProtection";
export const getBotmanTransactionalEndpointProtection: typeof import("./getBotmanTransactionalEndpointProtection").getBotmanTransactionalEndpointProtection = null as any;
export const getBotmanTransactionalEndpointProtectionOutput: typeof import("./getBotmanTransactionalEndpointProtection").getBotmanTransactionalEndpointProtectionOutput = null as any;
utilities.lazyLoad(exports, ["getBotmanTransactionalEndpointProtection","getBotmanTransactionalEndpointProtectionOutput"], () => require("./getBotmanTransactionalEndpointProtection"));

export { GetClientlistListsArgs, GetClientlistListsResult, GetClientlistListsOutputArgs } from "./getClientlistLists";
export const getClientlistLists: typeof import("./getClientlistLists").getClientlistLists = null as any;
export const getClientlistListsOutput: typeof import("./getClientlistLists").getClientlistListsOutput = null as any;
utilities.lazyLoad(exports, ["getClientlistLists","getClientlistListsOutput"], () => require("./getClientlistLists"));

export { GetCloudaccessKeyArgs, GetCloudaccessKeyResult, GetCloudaccessKeyOutputArgs } from "./getCloudaccessKey";
export const getCloudaccessKey: typeof import("./getCloudaccessKey").getCloudaccessKey = null as any;
export const getCloudaccessKeyOutput: typeof import("./getCloudaccessKey").getCloudaccessKeyOutput = null as any;
utilities.lazyLoad(exports, ["getCloudaccessKey","getCloudaccessKeyOutput"], () => require("./getCloudaccessKey"));

export { GetCloudaccessKeyPropertiesArgs, GetCloudaccessKeyPropertiesResult, GetCloudaccessKeyPropertiesOutputArgs } from "./getCloudaccessKeyProperties";
export const getCloudaccessKeyProperties: typeof import("./getCloudaccessKeyProperties").getCloudaccessKeyProperties = null as any;
export const getCloudaccessKeyPropertiesOutput: typeof import("./getCloudaccessKeyProperties").getCloudaccessKeyPropertiesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudaccessKeyProperties","getCloudaccessKeyPropertiesOutput"], () => require("./getCloudaccessKeyProperties"));

export { GetCloudaccessKeyVersionsArgs, GetCloudaccessKeyVersionsResult, GetCloudaccessKeyVersionsOutputArgs } from "./getCloudaccessKeyVersions";
export const getCloudaccessKeyVersions: typeof import("./getCloudaccessKeyVersions").getCloudaccessKeyVersions = null as any;
export const getCloudaccessKeyVersionsOutput: typeof import("./getCloudaccessKeyVersions").getCloudaccessKeyVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudaccessKeyVersions","getCloudaccessKeyVersionsOutput"], () => require("./getCloudaccessKeyVersions"));

export { GetCloudaccessKeysResult } from "./getCloudaccessKeys";
export const getCloudaccessKeys: typeof import("./getCloudaccessKeys").getCloudaccessKeys = null as any;
export const getCloudaccessKeysOutput: typeof import("./getCloudaccessKeys").getCloudaccessKeysOutput = null as any;
utilities.lazyLoad(exports, ["getCloudaccessKeys","getCloudaccessKeysOutput"], () => require("./getCloudaccessKeys"));

export { GetCloudletsApiPrioritizationMatchRuleArgs, GetCloudletsApiPrioritizationMatchRuleResult, GetCloudletsApiPrioritizationMatchRuleOutputArgs } from "./getCloudletsApiPrioritizationMatchRule";
export const getCloudletsApiPrioritizationMatchRule: typeof import("./getCloudletsApiPrioritizationMatchRule").getCloudletsApiPrioritizationMatchRule = null as any;
export const getCloudletsApiPrioritizationMatchRuleOutput: typeof import("./getCloudletsApiPrioritizationMatchRule").getCloudletsApiPrioritizationMatchRuleOutput = null as any;
utilities.lazyLoad(exports, ["getCloudletsApiPrioritizationMatchRule","getCloudletsApiPrioritizationMatchRuleOutput"], () => require("./getCloudletsApiPrioritizationMatchRule"));

export { GetCloudletsApplicationLoadBalancerArgs, GetCloudletsApplicationLoadBalancerResult, GetCloudletsApplicationLoadBalancerOutputArgs } from "./getCloudletsApplicationLoadBalancer";
export const getCloudletsApplicationLoadBalancer: typeof import("./getCloudletsApplicationLoadBalancer").getCloudletsApplicationLoadBalancer = null as any;
export const getCloudletsApplicationLoadBalancerOutput: typeof import("./getCloudletsApplicationLoadBalancer").getCloudletsApplicationLoadBalancerOutput = null as any;
utilities.lazyLoad(exports, ["getCloudletsApplicationLoadBalancer","getCloudletsApplicationLoadBalancerOutput"], () => require("./getCloudletsApplicationLoadBalancer"));

export { GetCloudletsApplicationLoadBalancerMatchRuleArgs, GetCloudletsApplicationLoadBalancerMatchRuleResult, GetCloudletsApplicationLoadBalancerMatchRuleOutputArgs } from "./getCloudletsApplicationLoadBalancerMatchRule";
export const getCloudletsApplicationLoadBalancerMatchRule: typeof import("./getCloudletsApplicationLoadBalancerMatchRule").getCloudletsApplicationLoadBalancerMatchRule = null as any;
export const getCloudletsApplicationLoadBalancerMatchRuleOutput: typeof import("./getCloudletsApplicationLoadBalancerMatchRule").getCloudletsApplicationLoadBalancerMatchRuleOutput = null as any;
utilities.lazyLoad(exports, ["getCloudletsApplicationLoadBalancerMatchRule","getCloudletsApplicationLoadBalancerMatchRuleOutput"], () => require("./getCloudletsApplicationLoadBalancerMatchRule"));

export { GetCloudletsAudienceSegmentationMatchRuleArgs, GetCloudletsAudienceSegmentationMatchRuleResult, GetCloudletsAudienceSegmentationMatchRuleOutputArgs } from "./getCloudletsAudienceSegmentationMatchRule";
export const getCloudletsAudienceSegmentationMatchRule: typeof import("./getCloudletsAudienceSegmentationMatchRule").getCloudletsAudienceSegmentationMatchRule = null as any;
export const getCloudletsAudienceSegmentationMatchRuleOutput: typeof import("./getCloudletsAudienceSegmentationMatchRule").getCloudletsAudienceSegmentationMatchRuleOutput = null as any;
utilities.lazyLoad(exports, ["getCloudletsAudienceSegmentationMatchRule","getCloudletsAudienceSegmentationMatchRuleOutput"], () => require("./getCloudletsAudienceSegmentationMatchRule"));

export { GetCloudletsEdgeRedirectorMatchRuleArgs, GetCloudletsEdgeRedirectorMatchRuleResult, GetCloudletsEdgeRedirectorMatchRuleOutputArgs } from "./getCloudletsEdgeRedirectorMatchRule";
export const getCloudletsEdgeRedirectorMatchRule: typeof import("./getCloudletsEdgeRedirectorMatchRule").getCloudletsEdgeRedirectorMatchRule = null as any;
export const getCloudletsEdgeRedirectorMatchRuleOutput: typeof import("./getCloudletsEdgeRedirectorMatchRule").getCloudletsEdgeRedirectorMatchRuleOutput = null as any;
utilities.lazyLoad(exports, ["getCloudletsEdgeRedirectorMatchRule","getCloudletsEdgeRedirectorMatchRuleOutput"], () => require("./getCloudletsEdgeRedirectorMatchRule"));

export { GetCloudletsForwardRewriteMatchRuleArgs, GetCloudletsForwardRewriteMatchRuleResult, GetCloudletsForwardRewriteMatchRuleOutputArgs } from "./getCloudletsForwardRewriteMatchRule";
export const getCloudletsForwardRewriteMatchRule: typeof import("./getCloudletsForwardRewriteMatchRule").getCloudletsForwardRewriteMatchRule = null as any;
export const getCloudletsForwardRewriteMatchRuleOutput: typeof import("./getCloudletsForwardRewriteMatchRule").getCloudletsForwardRewriteMatchRuleOutput = null as any;
utilities.lazyLoad(exports, ["getCloudletsForwardRewriteMatchRule","getCloudletsForwardRewriteMatchRuleOutput"], () => require("./getCloudletsForwardRewriteMatchRule"));

export { GetCloudletsPhasedReleaseMatchRuleArgs, GetCloudletsPhasedReleaseMatchRuleResult, GetCloudletsPhasedReleaseMatchRuleOutputArgs } from "./getCloudletsPhasedReleaseMatchRule";
export const getCloudletsPhasedReleaseMatchRule: typeof import("./getCloudletsPhasedReleaseMatchRule").getCloudletsPhasedReleaseMatchRule = null as any;
export const getCloudletsPhasedReleaseMatchRuleOutput: typeof import("./getCloudletsPhasedReleaseMatchRule").getCloudletsPhasedReleaseMatchRuleOutput = null as any;
utilities.lazyLoad(exports, ["getCloudletsPhasedReleaseMatchRule","getCloudletsPhasedReleaseMatchRuleOutput"], () => require("./getCloudletsPhasedReleaseMatchRule"));

export { GetCloudletsPolicyArgs, GetCloudletsPolicyResult, GetCloudletsPolicyOutputArgs } from "./getCloudletsPolicy";
export const getCloudletsPolicy: typeof import("./getCloudletsPolicy").getCloudletsPolicy = null as any;
export const getCloudletsPolicyOutput: typeof import("./getCloudletsPolicy").getCloudletsPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCloudletsPolicy","getCloudletsPolicyOutput"], () => require("./getCloudletsPolicy"));

export { GetCloudletsPolicyActivationArgs, GetCloudletsPolicyActivationResult, GetCloudletsPolicyActivationOutputArgs } from "./getCloudletsPolicyActivation";
export const getCloudletsPolicyActivation: typeof import("./getCloudletsPolicyActivation").getCloudletsPolicyActivation = null as any;
export const getCloudletsPolicyActivationOutput: typeof import("./getCloudletsPolicyActivation").getCloudletsPolicyActivationOutput = null as any;
utilities.lazyLoad(exports, ["getCloudletsPolicyActivation","getCloudletsPolicyActivationOutput"], () => require("./getCloudletsPolicyActivation"));

export { GetCloudletsRequestControlMatchRuleArgs, GetCloudletsRequestControlMatchRuleResult, GetCloudletsRequestControlMatchRuleOutputArgs } from "./getCloudletsRequestControlMatchRule";
export const getCloudletsRequestControlMatchRule: typeof import("./getCloudletsRequestControlMatchRule").getCloudletsRequestControlMatchRule = null as any;
export const getCloudletsRequestControlMatchRuleOutput: typeof import("./getCloudletsRequestControlMatchRule").getCloudletsRequestControlMatchRuleOutput = null as any;
utilities.lazyLoad(exports, ["getCloudletsRequestControlMatchRule","getCloudletsRequestControlMatchRuleOutput"], () => require("./getCloudletsRequestControlMatchRule"));

export { GetCloudletsSharedPolicyArgs, GetCloudletsSharedPolicyResult, GetCloudletsSharedPolicyOutputArgs } from "./getCloudletsSharedPolicy";
export const getCloudletsSharedPolicy: typeof import("./getCloudletsSharedPolicy").getCloudletsSharedPolicy = null as any;
export const getCloudletsSharedPolicyOutput: typeof import("./getCloudletsSharedPolicy").getCloudletsSharedPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCloudletsSharedPolicy","getCloudletsSharedPolicyOutput"], () => require("./getCloudletsSharedPolicy"));

export { GetCloudletsVisitorPrioritizationMatchRuleArgs, GetCloudletsVisitorPrioritizationMatchRuleResult, GetCloudletsVisitorPrioritizationMatchRuleOutputArgs } from "./getCloudletsVisitorPrioritizationMatchRule";
export const getCloudletsVisitorPrioritizationMatchRule: typeof import("./getCloudletsVisitorPrioritizationMatchRule").getCloudletsVisitorPrioritizationMatchRule = null as any;
export const getCloudletsVisitorPrioritizationMatchRuleOutput: typeof import("./getCloudletsVisitorPrioritizationMatchRule").getCloudletsVisitorPrioritizationMatchRuleOutput = null as any;
utilities.lazyLoad(exports, ["getCloudletsVisitorPrioritizationMatchRule","getCloudletsVisitorPrioritizationMatchRuleOutput"], () => require("./getCloudletsVisitorPrioritizationMatchRule"));

export { GetCloudwrapperCapacitiesArgs, GetCloudwrapperCapacitiesResult, GetCloudwrapperCapacitiesOutputArgs } from "./getCloudwrapperCapacities";
export const getCloudwrapperCapacities: typeof import("./getCloudwrapperCapacities").getCloudwrapperCapacities = null as any;
export const getCloudwrapperCapacitiesOutput: typeof import("./getCloudwrapperCapacities").getCloudwrapperCapacitiesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudwrapperCapacities","getCloudwrapperCapacitiesOutput"], () => require("./getCloudwrapperCapacities"));

export { GetCloudwrapperConfigurationArgs, GetCloudwrapperConfigurationResult, GetCloudwrapperConfigurationOutputArgs } from "./getCloudwrapperConfiguration";
export const getCloudwrapperConfiguration: typeof import("./getCloudwrapperConfiguration").getCloudwrapperConfiguration = null as any;
export const getCloudwrapperConfigurationOutput: typeof import("./getCloudwrapperConfiguration").getCloudwrapperConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getCloudwrapperConfiguration","getCloudwrapperConfigurationOutput"], () => require("./getCloudwrapperConfiguration"));

export { GetCloudwrapperConfigurationsArgs, GetCloudwrapperConfigurationsResult, GetCloudwrapperConfigurationsOutputArgs } from "./getCloudwrapperConfigurations";
export const getCloudwrapperConfigurations: typeof import("./getCloudwrapperConfigurations").getCloudwrapperConfigurations = null as any;
export const getCloudwrapperConfigurationsOutput: typeof import("./getCloudwrapperConfigurations").getCloudwrapperConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudwrapperConfigurations","getCloudwrapperConfigurationsOutput"], () => require("./getCloudwrapperConfigurations"));

export { GetCloudwrapperLocationArgs, GetCloudwrapperLocationResult, GetCloudwrapperLocationOutputArgs } from "./getCloudwrapperLocation";
export const getCloudwrapperLocation: typeof import("./getCloudwrapperLocation").getCloudwrapperLocation = null as any;
export const getCloudwrapperLocationOutput: typeof import("./getCloudwrapperLocation").getCloudwrapperLocationOutput = null as any;
utilities.lazyLoad(exports, ["getCloudwrapperLocation","getCloudwrapperLocationOutput"], () => require("./getCloudwrapperLocation"));

export { GetCloudwrapperLocationsArgs, GetCloudwrapperLocationsResult, GetCloudwrapperLocationsOutputArgs } from "./getCloudwrapperLocations";
export const getCloudwrapperLocations: typeof import("./getCloudwrapperLocations").getCloudwrapperLocations = null as any;
export const getCloudwrapperLocationsOutput: typeof import("./getCloudwrapperLocations").getCloudwrapperLocationsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudwrapperLocations","getCloudwrapperLocationsOutput"], () => require("./getCloudwrapperLocations"));

export { GetCloudwrapperPropertiesArgs, GetCloudwrapperPropertiesResult, GetCloudwrapperPropertiesOutputArgs } from "./getCloudwrapperProperties";
export const getCloudwrapperProperties: typeof import("./getCloudwrapperProperties").getCloudwrapperProperties = null as any;
export const getCloudwrapperPropertiesOutput: typeof import("./getCloudwrapperProperties").getCloudwrapperPropertiesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudwrapperProperties","getCloudwrapperPropertiesOutput"], () => require("./getCloudwrapperProperties"));

export { GetContractArgs, GetContractResult, GetContractOutputArgs } from "./getContract";
export const getContract: typeof import("./getContract").getContract = null as any;
export const getContractOutput: typeof import("./getContract").getContractOutput = null as any;
utilities.lazyLoad(exports, ["getContract","getContractOutput"], () => require("./getContract"));

export { GetContractsArgs, GetContractsResult, GetContractsOutputArgs } from "./getContracts";
export const getContracts: typeof import("./getContracts").getContracts = null as any;
export const getContractsOutput: typeof import("./getContracts").getContractsOutput = null as any;
utilities.lazyLoad(exports, ["getContracts","getContractsOutput"], () => require("./getContracts"));

export { GetCpCodeArgs, GetCpCodeResult, GetCpCodeOutputArgs } from "./getCpCode";
export const getCpCode: typeof import("./getCpCode").getCpCode = null as any;
export const getCpCodeOutput: typeof import("./getCpCode").getCpCodeOutput = null as any;
utilities.lazyLoad(exports, ["getCpCode","getCpCodeOutput"], () => require("./getCpCode"));

export { GetCpsCsrArgs, GetCpsCsrResult, GetCpsCsrOutputArgs } from "./getCpsCsr";
export const getCpsCsr: typeof import("./getCpsCsr").getCpsCsr = null as any;
export const getCpsCsrOutput: typeof import("./getCpsCsr").getCpsCsrOutput = null as any;
utilities.lazyLoad(exports, ["getCpsCsr","getCpsCsrOutput"], () => require("./getCpsCsr"));

export { GetCpsDeploymentsArgs, GetCpsDeploymentsResult, GetCpsDeploymentsOutputArgs } from "./getCpsDeployments";
export const getCpsDeployments: typeof import("./getCpsDeployments").getCpsDeployments = null as any;
export const getCpsDeploymentsOutput: typeof import("./getCpsDeployments").getCpsDeploymentsOutput = null as any;
utilities.lazyLoad(exports, ["getCpsDeployments","getCpsDeploymentsOutput"], () => require("./getCpsDeployments"));

export { GetCpsEnrollmentArgs, GetCpsEnrollmentResult, GetCpsEnrollmentOutputArgs } from "./getCpsEnrollment";
export const getCpsEnrollment: typeof import("./getCpsEnrollment").getCpsEnrollment = null as any;
export const getCpsEnrollmentOutput: typeof import("./getCpsEnrollment").getCpsEnrollmentOutput = null as any;
utilities.lazyLoad(exports, ["getCpsEnrollment","getCpsEnrollmentOutput"], () => require("./getCpsEnrollment"));

export { GetCpsEnrollmentsArgs, GetCpsEnrollmentsResult, GetCpsEnrollmentsOutputArgs } from "./getCpsEnrollments";
export const getCpsEnrollments: typeof import("./getCpsEnrollments").getCpsEnrollments = null as any;
export const getCpsEnrollmentsOutput: typeof import("./getCpsEnrollments").getCpsEnrollmentsOutput = null as any;
utilities.lazyLoad(exports, ["getCpsEnrollments","getCpsEnrollmentsOutput"], () => require("./getCpsEnrollments"));

export { GetCpsWarningsArgs, GetCpsWarningsResult, GetCpsWarningsOutputArgs } from "./getCpsWarnings";
export const getCpsWarnings: typeof import("./getCpsWarnings").getCpsWarnings = null as any;
export const getCpsWarningsOutput: typeof import("./getCpsWarnings").getCpsWarningsOutput = null as any;
utilities.lazyLoad(exports, ["getCpsWarnings","getCpsWarningsOutput"], () => require("./getCpsWarnings"));

export { GetDatastreamActivationHistoryArgs, GetDatastreamActivationHistoryResult, GetDatastreamActivationHistoryOutputArgs } from "./getDatastreamActivationHistory";
export const getDatastreamActivationHistory: typeof import("./getDatastreamActivationHistory").getDatastreamActivationHistory = null as any;
export const getDatastreamActivationHistoryOutput: typeof import("./getDatastreamActivationHistory").getDatastreamActivationHistoryOutput = null as any;
utilities.lazyLoad(exports, ["getDatastreamActivationHistory","getDatastreamActivationHistoryOutput"], () => require("./getDatastreamActivationHistory"));

export { GetDatastreamDatasetFieldsArgs, GetDatastreamDatasetFieldsResult, GetDatastreamDatasetFieldsOutputArgs } from "./getDatastreamDatasetFields";
export const getDatastreamDatasetFields: typeof import("./getDatastreamDatasetFields").getDatastreamDatasetFields = null as any;
export const getDatastreamDatasetFieldsOutput: typeof import("./getDatastreamDatasetFields").getDatastreamDatasetFieldsOutput = null as any;
utilities.lazyLoad(exports, ["getDatastreamDatasetFields","getDatastreamDatasetFieldsOutput"], () => require("./getDatastreamDatasetFields"));

export { GetDatastreamsArgs, GetDatastreamsResult, GetDatastreamsOutputArgs } from "./getDatastreams";
export const getDatastreams: typeof import("./getDatastreams").getDatastreams = null as any;
export const getDatastreamsOutput: typeof import("./getDatastreams").getDatastreamsOutput = null as any;
utilities.lazyLoad(exports, ["getDatastreams","getDatastreamsOutput"], () => require("./getDatastreams"));

export { GetDnsRecordSetArgs, GetDnsRecordSetResult, GetDnsRecordSetOutputArgs } from "./getDnsRecordSet";
export const getDnsRecordSet: typeof import("./getDnsRecordSet").getDnsRecordSet = null as any;
export const getDnsRecordSetOutput: typeof import("./getDnsRecordSet").getDnsRecordSetOutput = null as any;
utilities.lazyLoad(exports, ["getDnsRecordSet","getDnsRecordSetOutput"], () => require("./getDnsRecordSet"));

export { GetEdgekvGroupItemsArgs, GetEdgekvGroupItemsResult, GetEdgekvGroupItemsOutputArgs } from "./getEdgekvGroupItems";
export const getEdgekvGroupItems: typeof import("./getEdgekvGroupItems").getEdgekvGroupItems = null as any;
export const getEdgekvGroupItemsOutput: typeof import("./getEdgekvGroupItems").getEdgekvGroupItemsOutput = null as any;
utilities.lazyLoad(exports, ["getEdgekvGroupItems","getEdgekvGroupItemsOutput"], () => require("./getEdgekvGroupItems"));

export { GetEdgekvGroupsArgs, GetEdgekvGroupsResult, GetEdgekvGroupsOutputArgs } from "./getEdgekvGroups";
export const getEdgekvGroups: typeof import("./getEdgekvGroups").getEdgekvGroups = null as any;
export const getEdgekvGroupsOutput: typeof import("./getEdgekvGroups").getEdgekvGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getEdgekvGroups","getEdgekvGroupsOutput"], () => require("./getEdgekvGroups"));

export { GetEdgeworkerArgs, GetEdgeworkerResult, GetEdgeworkerOutputArgs } from "./getEdgeworker";
export const getEdgeworker: typeof import("./getEdgeworker").getEdgeworker = null as any;
export const getEdgeworkerOutput: typeof import("./getEdgeworker").getEdgeworkerOutput = null as any;
utilities.lazyLoad(exports, ["getEdgeworker","getEdgeworkerOutput"], () => require("./getEdgeworker"));

export { GetEdgeworkerActivationArgs, GetEdgeworkerActivationResult, GetEdgeworkerActivationOutputArgs } from "./getEdgeworkerActivation";
export const getEdgeworkerActivation: typeof import("./getEdgeworkerActivation").getEdgeworkerActivation = null as any;
export const getEdgeworkerActivationOutput: typeof import("./getEdgeworkerActivation").getEdgeworkerActivationOutput = null as any;
utilities.lazyLoad(exports, ["getEdgeworkerActivation","getEdgeworkerActivationOutput"], () => require("./getEdgeworkerActivation"));

export { GetEdgeworkersPropertyRulesArgs, GetEdgeworkersPropertyRulesResult, GetEdgeworkersPropertyRulesOutputArgs } from "./getEdgeworkersPropertyRules";
export const getEdgeworkersPropertyRules: typeof import("./getEdgeworkersPropertyRules").getEdgeworkersPropertyRules = null as any;
export const getEdgeworkersPropertyRulesOutput: typeof import("./getEdgeworkersPropertyRules").getEdgeworkersPropertyRulesOutput = null as any;
utilities.lazyLoad(exports, ["getEdgeworkersPropertyRules","getEdgeworkersPropertyRulesOutput"], () => require("./getEdgeworkersPropertyRules"));

export { GetEdgeworkersResourceTierArgs, GetEdgeworkersResourceTierResult, GetEdgeworkersResourceTierOutputArgs } from "./getEdgeworkersResourceTier";
export const getEdgeworkersResourceTier: typeof import("./getEdgeworkersResourceTier").getEdgeworkersResourceTier = null as any;
export const getEdgeworkersResourceTierOutput: typeof import("./getEdgeworkersResourceTier").getEdgeworkersResourceTierOutput = null as any;
utilities.lazyLoad(exports, ["getEdgeworkersResourceTier","getEdgeworkersResourceTierOutput"], () => require("./getEdgeworkersResourceTier"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetGroupsArgs, GetGroupsResult, GetGroupsOutputArgs } from "./getGroups";
export const getGroups: typeof import("./getGroups").getGroups = null as any;
export const getGroupsOutput: typeof import("./getGroups").getGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGroups","getGroupsOutput"], () => require("./getGroups"));

export { GetGtmAsmapArgs, GetGtmAsmapResult, GetGtmAsmapOutputArgs } from "./getGtmAsmap";
export const getGtmAsmap: typeof import("./getGtmAsmap").getGtmAsmap = null as any;
export const getGtmAsmapOutput: typeof import("./getGtmAsmap").getGtmAsmapOutput = null as any;
utilities.lazyLoad(exports, ["getGtmAsmap","getGtmAsmapOutput"], () => require("./getGtmAsmap"));

export { GetGtmCidrmapArgs, GetGtmCidrmapResult, GetGtmCidrmapOutputArgs } from "./getGtmCidrmap";
export const getGtmCidrmap: typeof import("./getGtmCidrmap").getGtmCidrmap = null as any;
export const getGtmCidrmapOutput: typeof import("./getGtmCidrmap").getGtmCidrmapOutput = null as any;
utilities.lazyLoad(exports, ["getGtmCidrmap","getGtmCidrmapOutput"], () => require("./getGtmCidrmap"));

export { GetGtmDatacenterArgs, GetGtmDatacenterResult, GetGtmDatacenterOutputArgs } from "./getGtmDatacenter";
export const getGtmDatacenter: typeof import("./getGtmDatacenter").getGtmDatacenter = null as any;
export const getGtmDatacenterOutput: typeof import("./getGtmDatacenter").getGtmDatacenterOutput = null as any;
utilities.lazyLoad(exports, ["getGtmDatacenter","getGtmDatacenterOutput"], () => require("./getGtmDatacenter"));

export { GetGtmDatacentersArgs, GetGtmDatacentersResult, GetGtmDatacentersOutputArgs } from "./getGtmDatacenters";
export const getGtmDatacenters: typeof import("./getGtmDatacenters").getGtmDatacenters = null as any;
export const getGtmDatacentersOutput: typeof import("./getGtmDatacenters").getGtmDatacentersOutput = null as any;
utilities.lazyLoad(exports, ["getGtmDatacenters","getGtmDatacentersOutput"], () => require("./getGtmDatacenters"));

export { GetGtmDefaultDatacenterArgs, GetGtmDefaultDatacenterResult, GetGtmDefaultDatacenterOutputArgs } from "./getGtmDefaultDatacenter";
export const getGtmDefaultDatacenter: typeof import("./getGtmDefaultDatacenter").getGtmDefaultDatacenter = null as any;
export const getGtmDefaultDatacenterOutput: typeof import("./getGtmDefaultDatacenter").getGtmDefaultDatacenterOutput = null as any;
utilities.lazyLoad(exports, ["getGtmDefaultDatacenter","getGtmDefaultDatacenterOutput"], () => require("./getGtmDefaultDatacenter"));

export { GetGtmDomainArgs, GetGtmDomainResult, GetGtmDomainOutputArgs } from "./getGtmDomain";
export const getGtmDomain: typeof import("./getGtmDomain").getGtmDomain = null as any;
export const getGtmDomainOutput: typeof import("./getGtmDomain").getGtmDomainOutput = null as any;
utilities.lazyLoad(exports, ["getGtmDomain","getGtmDomainOutput"], () => require("./getGtmDomain"));

export { GetGtmDomainsArgs, GetGtmDomainsResult, GetGtmDomainsOutputArgs } from "./getGtmDomains";
export const getGtmDomains: typeof import("./getGtmDomains").getGtmDomains = null as any;
export const getGtmDomainsOutput: typeof import("./getGtmDomains").getGtmDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getGtmDomains","getGtmDomainsOutput"], () => require("./getGtmDomains"));

export { GetGtmGeomapArgs, GetGtmGeomapResult, GetGtmGeomapOutputArgs } from "./getGtmGeomap";
export const getGtmGeomap: typeof import("./getGtmGeomap").getGtmGeomap = null as any;
export const getGtmGeomapOutput: typeof import("./getGtmGeomap").getGtmGeomapOutput = null as any;
utilities.lazyLoad(exports, ["getGtmGeomap","getGtmGeomapOutput"], () => require("./getGtmGeomap"));

export { GetGtmGeomapsArgs, GetGtmGeomapsResult, GetGtmGeomapsOutputArgs } from "./getGtmGeomaps";
export const getGtmGeomaps: typeof import("./getGtmGeomaps").getGtmGeomaps = null as any;
export const getGtmGeomapsOutput: typeof import("./getGtmGeomaps").getGtmGeomapsOutput = null as any;
utilities.lazyLoad(exports, ["getGtmGeomaps","getGtmGeomapsOutput"], () => require("./getGtmGeomaps"));

export { GetGtmResourceArgs, GetGtmResourceResult, GetGtmResourceOutputArgs } from "./getGtmResource";
export const getGtmResource: typeof import("./getGtmResource").getGtmResource = null as any;
export const getGtmResourceOutput: typeof import("./getGtmResource").getGtmResourceOutput = null as any;
utilities.lazyLoad(exports, ["getGtmResource","getGtmResourceOutput"], () => require("./getGtmResource"));

export { GetGtmResourcesArgs, GetGtmResourcesResult, GetGtmResourcesOutputArgs } from "./getGtmResources";
export const getGtmResources: typeof import("./getGtmResources").getGtmResources = null as any;
export const getGtmResourcesOutput: typeof import("./getGtmResources").getGtmResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getGtmResources","getGtmResourcesOutput"], () => require("./getGtmResources"));

export { GetIamContactTypesArgs, GetIamContactTypesResult, GetIamContactTypesOutputArgs } from "./getIamContactTypes";
export const getIamContactTypes: typeof import("./getIamContactTypes").getIamContactTypes = null as any;
export const getIamContactTypesOutput: typeof import("./getIamContactTypes").getIamContactTypesOutput = null as any;
utilities.lazyLoad(exports, ["getIamContactTypes","getIamContactTypesOutput"], () => require("./getIamContactTypes"));

export { GetIamCountriesArgs, GetIamCountriesResult, GetIamCountriesOutputArgs } from "./getIamCountries";
export const getIamCountries: typeof import("./getIamCountries").getIamCountries = null as any;
export const getIamCountriesOutput: typeof import("./getIamCountries").getIamCountriesOutput = null as any;
utilities.lazyLoad(exports, ["getIamCountries","getIamCountriesOutput"], () => require("./getIamCountries"));

export { GetIamGrantableRolesArgs, GetIamGrantableRolesResult, GetIamGrantableRolesOutputArgs } from "./getIamGrantableRoles";
export const getIamGrantableRoles: typeof import("./getIamGrantableRoles").getIamGrantableRoles = null as any;
export const getIamGrantableRolesOutput: typeof import("./getIamGrantableRoles").getIamGrantableRolesOutput = null as any;
utilities.lazyLoad(exports, ["getIamGrantableRoles","getIamGrantableRolesOutput"], () => require("./getIamGrantableRoles"));

export { GetIamGroupsArgs, GetIamGroupsResult, GetIamGroupsOutputArgs } from "./getIamGroups";
export const getIamGroups: typeof import("./getIamGroups").getIamGroups = null as any;
export const getIamGroupsOutput: typeof import("./getIamGroups").getIamGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getIamGroups","getIamGroupsOutput"], () => require("./getIamGroups"));

export { GetIamRolesArgs, GetIamRolesResult, GetIamRolesOutputArgs } from "./getIamRoles";
export const getIamRoles: typeof import("./getIamRoles").getIamRoles = null as any;
export const getIamRolesOutput: typeof import("./getIamRoles").getIamRolesOutput = null as any;
utilities.lazyLoad(exports, ["getIamRoles","getIamRolesOutput"], () => require("./getIamRoles"));

export { GetIamStatesArgs, GetIamStatesResult, GetIamStatesOutputArgs } from "./getIamStates";
export const getIamStates: typeof import("./getIamStates").getIamStates = null as any;
export const getIamStatesOutput: typeof import("./getIamStates").getIamStatesOutput = null as any;
utilities.lazyLoad(exports, ["getIamStates","getIamStatesOutput"], () => require("./getIamStates"));

export { GetIamSupportedLangsArgs, GetIamSupportedLangsResult, GetIamSupportedLangsOutputArgs } from "./getIamSupportedLangs";
export const getIamSupportedLangs: typeof import("./getIamSupportedLangs").getIamSupportedLangs = null as any;
export const getIamSupportedLangsOutput: typeof import("./getIamSupportedLangs").getIamSupportedLangsOutput = null as any;
utilities.lazyLoad(exports, ["getIamSupportedLangs","getIamSupportedLangsOutput"], () => require("./getIamSupportedLangs"));

export { GetIamTimeoutPoliciesArgs, GetIamTimeoutPoliciesResult, GetIamTimeoutPoliciesOutputArgs } from "./getIamTimeoutPolicies";
export const getIamTimeoutPolicies: typeof import("./getIamTimeoutPolicies").getIamTimeoutPolicies = null as any;
export const getIamTimeoutPoliciesOutput: typeof import("./getIamTimeoutPolicies").getIamTimeoutPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getIamTimeoutPolicies","getIamTimeoutPoliciesOutput"], () => require("./getIamTimeoutPolicies"));

export { GetIamTimezonesArgs, GetIamTimezonesResult, GetIamTimezonesOutputArgs } from "./getIamTimezones";
export const getIamTimezones: typeof import("./getIamTimezones").getIamTimezones = null as any;
export const getIamTimezonesOutput: typeof import("./getIamTimezones").getIamTimezonesOutput = null as any;
utilities.lazyLoad(exports, ["getIamTimezones","getIamTimezonesOutput"], () => require("./getIamTimezones"));

export { GetImagingPolicyImageArgs, GetImagingPolicyImageResult, GetImagingPolicyImageOutputArgs } from "./getImagingPolicyImage";
export const getImagingPolicyImage: typeof import("./getImagingPolicyImage").getImagingPolicyImage = null as any;
export const getImagingPolicyImageOutput: typeof import("./getImagingPolicyImage").getImagingPolicyImageOutput = null as any;
utilities.lazyLoad(exports, ["getImagingPolicyImage","getImagingPolicyImageOutput"], () => require("./getImagingPolicyImage"));

export { GetImagingPolicyVideoArgs, GetImagingPolicyVideoResult, GetImagingPolicyVideoOutputArgs } from "./getImagingPolicyVideo";
export const getImagingPolicyVideo: typeof import("./getImagingPolicyVideo").getImagingPolicyVideo = null as any;
export const getImagingPolicyVideoOutput: typeof import("./getImagingPolicyVideo").getImagingPolicyVideoOutput = null as any;
utilities.lazyLoad(exports, ["getImagingPolicyVideo","getImagingPolicyVideoOutput"], () => require("./getImagingPolicyVideo"));

export { GetNetworklistNetworkListsArgs, GetNetworklistNetworkListsResult, GetNetworklistNetworkListsOutputArgs } from "./getNetworklistNetworkLists";
export const getNetworklistNetworkLists: typeof import("./getNetworklistNetworkLists").getNetworklistNetworkLists = null as any;
export const getNetworklistNetworkListsOutput: typeof import("./getNetworklistNetworkLists").getNetworklistNetworkListsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworklistNetworkLists","getNetworklistNetworkListsOutput"], () => require("./getNetworklistNetworkLists"));

export { GetPropertiesArgs, GetPropertiesResult, GetPropertiesOutputArgs } from "./getProperties";
export const getProperties: typeof import("./getProperties").getProperties = null as any;
export const getPropertiesOutput: typeof import("./getProperties").getPropertiesOutput = null as any;
utilities.lazyLoad(exports, ["getProperties","getPropertiesOutput"], () => require("./getProperties"));

export { GetPropertiesSearchArgs, GetPropertiesSearchResult, GetPropertiesSearchOutputArgs } from "./getPropertiesSearch";
export const getPropertiesSearch: typeof import("./getPropertiesSearch").getPropertiesSearch = null as any;
export const getPropertiesSearchOutput: typeof import("./getPropertiesSearch").getPropertiesSearchOutput = null as any;
utilities.lazyLoad(exports, ["getPropertiesSearch","getPropertiesSearchOutput"], () => require("./getPropertiesSearch"));

export { GetPropertyArgs, GetPropertyResult, GetPropertyOutputArgs } from "./getProperty";
export const getProperty: typeof import("./getProperty").getProperty = null as any;
export const getPropertyOutput: typeof import("./getProperty").getPropertyOutput = null as any;
utilities.lazyLoad(exports, ["getProperty","getPropertyOutput"], () => require("./getProperty"));

export { GetPropertyActivationArgs, GetPropertyActivationResult, GetPropertyActivationOutputArgs } from "./getPropertyActivation";
export const getPropertyActivation: typeof import("./getPropertyActivation").getPropertyActivation = null as any;
export const getPropertyActivationOutput: typeof import("./getPropertyActivation").getPropertyActivationOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyActivation","getPropertyActivationOutput"], () => require("./getPropertyActivation"));

export { GetPropertyHostnamesArgs, GetPropertyHostnamesResult, GetPropertyHostnamesOutputArgs } from "./getPropertyHostnames";
export const getPropertyHostnames: typeof import("./getPropertyHostnames").getPropertyHostnames = null as any;
export const getPropertyHostnamesOutput: typeof import("./getPropertyHostnames").getPropertyHostnamesOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyHostnames","getPropertyHostnamesOutput"], () => require("./getPropertyHostnames"));

export { GetPropertyIncludeArgs, GetPropertyIncludeResult, GetPropertyIncludeOutputArgs } from "./getPropertyInclude";
export const getPropertyInclude: typeof import("./getPropertyInclude").getPropertyInclude = null as any;
export const getPropertyIncludeOutput: typeof import("./getPropertyInclude").getPropertyIncludeOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyInclude","getPropertyIncludeOutput"], () => require("./getPropertyInclude"));

export { GetPropertyIncludeActivationArgs, GetPropertyIncludeActivationResult, GetPropertyIncludeActivationOutputArgs } from "./getPropertyIncludeActivation";
export const getPropertyIncludeActivation: typeof import("./getPropertyIncludeActivation").getPropertyIncludeActivation = null as any;
export const getPropertyIncludeActivationOutput: typeof import("./getPropertyIncludeActivation").getPropertyIncludeActivationOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyIncludeActivation","getPropertyIncludeActivationOutput"], () => require("./getPropertyIncludeActivation"));

export { GetPropertyIncludeParentsArgs, GetPropertyIncludeParentsResult, GetPropertyIncludeParentsOutputArgs } from "./getPropertyIncludeParents";
export const getPropertyIncludeParents: typeof import("./getPropertyIncludeParents").getPropertyIncludeParents = null as any;
export const getPropertyIncludeParentsOutput: typeof import("./getPropertyIncludeParents").getPropertyIncludeParentsOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyIncludeParents","getPropertyIncludeParentsOutput"], () => require("./getPropertyIncludeParents"));

export { GetPropertyIncludeRulesArgs, GetPropertyIncludeRulesResult, GetPropertyIncludeRulesOutputArgs } from "./getPropertyIncludeRules";
export const getPropertyIncludeRules: typeof import("./getPropertyIncludeRules").getPropertyIncludeRules = null as any;
export const getPropertyIncludeRulesOutput: typeof import("./getPropertyIncludeRules").getPropertyIncludeRulesOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyIncludeRules","getPropertyIncludeRulesOutput"], () => require("./getPropertyIncludeRules"));

export { GetPropertyIncludesArgs, GetPropertyIncludesResult, GetPropertyIncludesOutputArgs } from "./getPropertyIncludes";
export const getPropertyIncludes: typeof import("./getPropertyIncludes").getPropertyIncludes = null as any;
export const getPropertyIncludesOutput: typeof import("./getPropertyIncludes").getPropertyIncludesOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyIncludes","getPropertyIncludesOutput"], () => require("./getPropertyIncludes"));

export { GetPropertyProductsArgs, GetPropertyProductsResult, GetPropertyProductsOutputArgs } from "./getPropertyProducts";
export const getPropertyProducts: typeof import("./getPropertyProducts").getPropertyProducts = null as any;
export const getPropertyProductsOutput: typeof import("./getPropertyProducts").getPropertyProductsOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyProducts","getPropertyProductsOutput"], () => require("./getPropertyProducts"));

export { GetPropertyRuleFormatsArgs, GetPropertyRuleFormatsResult, GetPropertyRuleFormatsOutputArgs } from "./getPropertyRuleFormats";
export const getPropertyRuleFormats: typeof import("./getPropertyRuleFormats").getPropertyRuleFormats = null as any;
export const getPropertyRuleFormatsOutput: typeof import("./getPropertyRuleFormats").getPropertyRuleFormatsOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyRuleFormats","getPropertyRuleFormatsOutput"], () => require("./getPropertyRuleFormats"));

export { GetPropertyRulesArgs, GetPropertyRulesResult, GetPropertyRulesOutputArgs } from "./getPropertyRules";
export const getPropertyRules: typeof import("./getPropertyRules").getPropertyRules = null as any;
export const getPropertyRulesOutput: typeof import("./getPropertyRules").getPropertyRulesOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyRules","getPropertyRulesOutput"], () => require("./getPropertyRules"));

export { GetPropertyRulesBuilderArgs, GetPropertyRulesBuilderResult, GetPropertyRulesBuilderOutputArgs } from "./getPropertyRulesBuilder";
export const getPropertyRulesBuilder: typeof import("./getPropertyRulesBuilder").getPropertyRulesBuilder = null as any;
export const getPropertyRulesBuilderOutput: typeof import("./getPropertyRulesBuilder").getPropertyRulesBuilderOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyRulesBuilder","getPropertyRulesBuilderOutput"], () => require("./getPropertyRulesBuilder"));

export { GetPropertyRulesTemplateArgs, GetPropertyRulesTemplateResult, GetPropertyRulesTemplateOutputArgs } from "./getPropertyRulesTemplate";
export const getPropertyRulesTemplate: typeof import("./getPropertyRulesTemplate").getPropertyRulesTemplate = null as any;
export const getPropertyRulesTemplateOutput: typeof import("./getPropertyRulesTemplate").getPropertyRulesTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getPropertyRulesTemplate","getPropertyRulesTemplateOutput"], () => require("./getPropertyRulesTemplate"));

export { GetZoneDnssecStatusArgs, GetZoneDnssecStatusResult, GetZoneDnssecStatusOutputArgs } from "./getZoneDnssecStatus";
export const getZoneDnssecStatus: typeof import("./getZoneDnssecStatus").getZoneDnssecStatus = null as any;
export const getZoneDnssecStatusOutput: typeof import("./getZoneDnssecStatus").getZoneDnssecStatusOutput = null as any;
utilities.lazyLoad(exports, ["getZoneDnssecStatus","getZoneDnssecStatusOutput"], () => require("./getZoneDnssecStatus"));

export { GtmAsmapArgs, GtmAsmapState } from "./gtmAsmap";
export type GtmAsmap = import("./gtmAsmap").GtmAsmap;
export const GtmAsmap: typeof import("./gtmAsmap").GtmAsmap = null as any;
utilities.lazyLoad(exports, ["GtmAsmap"], () => require("./gtmAsmap"));

export { GtmCidrmapArgs, GtmCidrmapState } from "./gtmCidrmap";
export type GtmCidrmap = import("./gtmCidrmap").GtmCidrmap;
export const GtmCidrmap: typeof import("./gtmCidrmap").GtmCidrmap = null as any;
utilities.lazyLoad(exports, ["GtmCidrmap"], () => require("./gtmCidrmap"));

export { GtmDatacenterArgs, GtmDatacenterState } from "./gtmDatacenter";
export type GtmDatacenter = import("./gtmDatacenter").GtmDatacenter;
export const GtmDatacenter: typeof import("./gtmDatacenter").GtmDatacenter = null as any;
utilities.lazyLoad(exports, ["GtmDatacenter"], () => require("./gtmDatacenter"));

export { GtmDomainArgs, GtmDomainState } from "./gtmDomain";
export type GtmDomain = import("./gtmDomain").GtmDomain;
export const GtmDomain: typeof import("./gtmDomain").GtmDomain = null as any;
utilities.lazyLoad(exports, ["GtmDomain"], () => require("./gtmDomain"));

export { GtmGeomapArgs, GtmGeomapState } from "./gtmGeomap";
export type GtmGeomap = import("./gtmGeomap").GtmGeomap;
export const GtmGeomap: typeof import("./gtmGeomap").GtmGeomap = null as any;
utilities.lazyLoad(exports, ["GtmGeomap"], () => require("./gtmGeomap"));

export { GtmPropertyArgs, GtmPropertyState } from "./gtmProperty";
export type GtmProperty = import("./gtmProperty").GtmProperty;
export const GtmProperty: typeof import("./gtmProperty").GtmProperty = null as any;
utilities.lazyLoad(exports, ["GtmProperty"], () => require("./gtmProperty"));

export { GtmResourceArgs, GtmResourceState } from "./gtmResource";
export type GtmResource = import("./gtmResource").GtmResource;
export const GtmResource: typeof import("./gtmResource").GtmResource = null as any;
utilities.lazyLoad(exports, ["GtmResource"], () => require("./gtmResource"));

export { IamBlockedUserPropertiesArgs, IamBlockedUserPropertiesState } from "./iamBlockedUserProperties";
export type IamBlockedUserProperties = import("./iamBlockedUserProperties").IamBlockedUserProperties;
export const IamBlockedUserProperties: typeof import("./iamBlockedUserProperties").IamBlockedUserProperties = null as any;
utilities.lazyLoad(exports, ["IamBlockedUserProperties"], () => require("./iamBlockedUserProperties"));

export { IamGroupArgs, IamGroupState } from "./iamGroup";
export type IamGroup = import("./iamGroup").IamGroup;
export const IamGroup: typeof import("./iamGroup").IamGroup = null as any;
utilities.lazyLoad(exports, ["IamGroup"], () => require("./iamGroup"));

export { IamRoleArgs, IamRoleState } from "./iamRole";
export type IamRole = import("./iamRole").IamRole;
export const IamRole: typeof import("./iamRole").IamRole = null as any;
utilities.lazyLoad(exports, ["IamRole"], () => require("./iamRole"));

export { IamUserArgs, IamUserState } from "./iamUser";
export type IamUser = import("./iamUser").IamUser;
export const IamUser: typeof import("./iamUser").IamUser = null as any;
utilities.lazyLoad(exports, ["IamUser"], () => require("./iamUser"));

export { ImagingPolicyImageArgs, ImagingPolicyImageState } from "./imagingPolicyImage";
export type ImagingPolicyImage = import("./imagingPolicyImage").ImagingPolicyImage;
export const ImagingPolicyImage: typeof import("./imagingPolicyImage").ImagingPolicyImage = null as any;
utilities.lazyLoad(exports, ["ImagingPolicyImage"], () => require("./imagingPolicyImage"));

export { ImagingPolicySetArgs, ImagingPolicySetState } from "./imagingPolicySet";
export type ImagingPolicySet = import("./imagingPolicySet").ImagingPolicySet;
export const ImagingPolicySet: typeof import("./imagingPolicySet").ImagingPolicySet = null as any;
utilities.lazyLoad(exports, ["ImagingPolicySet"], () => require("./imagingPolicySet"));

export { ImagingPolicyVideoArgs, ImagingPolicyVideoState } from "./imagingPolicyVideo";
export type ImagingPolicyVideo = import("./imagingPolicyVideo").ImagingPolicyVideo;
export const ImagingPolicyVideo: typeof import("./imagingPolicyVideo").ImagingPolicyVideo = null as any;
utilities.lazyLoad(exports, ["ImagingPolicyVideo"], () => require("./imagingPolicyVideo"));

export { NetworklistActivationsArgs, NetworklistActivationsState } from "./networklistActivations";
export type NetworklistActivations = import("./networklistActivations").NetworklistActivations;
export const NetworklistActivations: typeof import("./networklistActivations").NetworklistActivations = null as any;
utilities.lazyLoad(exports, ["NetworklistActivations"], () => require("./networklistActivations"));

export { NetworklistDescriptionArgs, NetworklistDescriptionState } from "./networklistDescription";
export type NetworklistDescription = import("./networklistDescription").NetworklistDescription;
export const NetworklistDescription: typeof import("./networklistDescription").NetworklistDescription = null as any;
utilities.lazyLoad(exports, ["NetworklistDescription"], () => require("./networklistDescription"));

export { NetworklistNetworkListArgs, NetworklistNetworkListState } from "./networklistNetworkList";
export type NetworklistNetworkList = import("./networklistNetworkList").NetworklistNetworkList;
export const NetworklistNetworkList: typeof import("./networklistNetworkList").NetworklistNetworkList = null as any;
utilities.lazyLoad(exports, ["NetworklistNetworkList"], () => require("./networklistNetworkList"));

export { NetworklistSubscriptionArgs, NetworklistSubscriptionState } from "./networklistSubscription";
export type NetworklistSubscription = import("./networklistSubscription").NetworklistSubscription;
export const NetworklistSubscription: typeof import("./networklistSubscription").NetworklistSubscription = null as any;
utilities.lazyLoad(exports, ["NetworklistSubscription"], () => require("./networklistSubscription"));

export { PropertyArgs, PropertyState } from "./property";
export type Property = import("./property").Property;
export const Property: typeof import("./property").Property = null as any;
utilities.lazyLoad(exports, ["Property"], () => require("./property"));

export { PropertyActivationArgs, PropertyActivationState } from "./propertyActivation";
export type PropertyActivation = import("./propertyActivation").PropertyActivation;
export const PropertyActivation: typeof import("./propertyActivation").PropertyActivation = null as any;
utilities.lazyLoad(exports, ["PropertyActivation"], () => require("./propertyActivation"));

export { PropertyBootstrapArgs, PropertyBootstrapState } from "./propertyBootstrap";
export type PropertyBootstrap = import("./propertyBootstrap").PropertyBootstrap;
export const PropertyBootstrap: typeof import("./propertyBootstrap").PropertyBootstrap = null as any;
utilities.lazyLoad(exports, ["PropertyBootstrap"], () => require("./propertyBootstrap"));

export { PropertyIncludeArgs, PropertyIncludeState } from "./propertyInclude";
export type PropertyInclude = import("./propertyInclude").PropertyInclude;
export const PropertyInclude: typeof import("./propertyInclude").PropertyInclude = null as any;
utilities.lazyLoad(exports, ["PropertyInclude"], () => require("./propertyInclude"));

export { PropertyIncludeActivationArgs, PropertyIncludeActivationState } from "./propertyIncludeActivation";
export type PropertyIncludeActivation = import("./propertyIncludeActivation").PropertyIncludeActivation;
export const PropertyIncludeActivation: typeof import("./propertyIncludeActivation").PropertyIncludeActivation = null as any;
utilities.lazyLoad(exports, ["PropertyIncludeActivation"], () => require("./propertyIncludeActivation"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "akamai:index/appsecActivations:AppsecActivations":
                return new AppsecActivations(name, <any>undefined, { urn })
            case "akamai:index/appsecAdvancedSettingsAttackPayloadLogging:AppsecAdvancedSettingsAttackPayloadLogging":
                return new AppsecAdvancedSettingsAttackPayloadLogging(name, <any>undefined, { urn })
            case "akamai:index/appsecAdvancedSettingsEvasivePathMatch:AppsecAdvancedSettingsEvasivePathMatch":
                return new AppsecAdvancedSettingsEvasivePathMatch(name, <any>undefined, { urn })
            case "akamai:index/appsecAdvancedSettingsLogging:AppsecAdvancedSettingsLogging":
                return new AppsecAdvancedSettingsLogging(name, <any>undefined, { urn })
            case "akamai:index/appsecAdvancedSettingsPiiLearning:AppsecAdvancedSettingsPiiLearning":
                return new AppsecAdvancedSettingsPiiLearning(name, <any>undefined, { urn })
            case "akamai:index/appsecAdvancedSettingsPragmaHeader:AppsecAdvancedSettingsPragmaHeader":
                return new AppsecAdvancedSettingsPragmaHeader(name, <any>undefined, { urn })
            case "akamai:index/appsecAdvancedSettingsPrefetch:AppsecAdvancedSettingsPrefetch":
                return new AppsecAdvancedSettingsPrefetch(name, <any>undefined, { urn })
            case "akamai:index/appsecAdvancedSettingsRequestBody:AppsecAdvancedSettingsRequestBody":
                return new AppsecAdvancedSettingsRequestBody(name, <any>undefined, { urn })
            case "akamai:index/appsecApiConstraintsProtection:AppsecApiConstraintsProtection":
                return new AppsecApiConstraintsProtection(name, <any>undefined, { urn })
            case "akamai:index/appsecApiRequestConstraints:AppsecApiRequestConstraints":
                return new AppsecApiRequestConstraints(name, <any>undefined, { urn })
            case "akamai:index/appsecAttackGroup:AppsecAttackGroup":
                return new AppsecAttackGroup(name, <any>undefined, { urn })
            case "akamai:index/appsecBypassNetworkLists:AppsecBypassNetworkLists":
                return new AppsecBypassNetworkLists(name, <any>undefined, { urn })
            case "akamai:index/appsecConfiguration:AppsecConfiguration":
                return new AppsecConfiguration(name, <any>undefined, { urn })
            case "akamai:index/appsecConfigurationRename:AppsecConfigurationRename":
                return new AppsecConfigurationRename(name, <any>undefined, { urn })
            case "akamai:index/appsecCustomDeny:AppsecCustomDeny":
                return new AppsecCustomDeny(name, <any>undefined, { urn })
            case "akamai:index/appsecCustomRule:AppsecCustomRule":
                return new AppsecCustomRule(name, <any>undefined, { urn })
            case "akamai:index/appsecCustomRuleAction:AppsecCustomRuleAction":
                return new AppsecCustomRuleAction(name, <any>undefined, { urn })
            case "akamai:index/appsecEval:AppsecEval":
                return new AppsecEval(name, <any>undefined, { urn })
            case "akamai:index/appsecEvalGroup:AppsecEvalGroup":
                return new AppsecEvalGroup(name, <any>undefined, { urn })
            case "akamai:index/appsecEvalPenaltyBox:AppsecEvalPenaltyBox":
                return new AppsecEvalPenaltyBox(name, <any>undefined, { urn })
            case "akamai:index/appsecEvalPenaltyBoxConditions:AppsecEvalPenaltyBoxConditions":
                return new AppsecEvalPenaltyBoxConditions(name, <any>undefined, { urn })
            case "akamai:index/appsecEvalRule:AppsecEvalRule":
                return new AppsecEvalRule(name, <any>undefined, { urn })
            case "akamai:index/appsecIpGeo:AppsecIpGeo":
                return new AppsecIpGeo(name, <any>undefined, { urn })
            case "akamai:index/appsecIpGeoProtection:AppsecIpGeoProtection":
                return new AppsecIpGeoProtection(name, <any>undefined, { urn })
            case "akamai:index/appsecMalwarePolicy:AppsecMalwarePolicy":
                return new AppsecMalwarePolicy(name, <any>undefined, { urn })
            case "akamai:index/appsecMalwarePolicyAction:AppsecMalwarePolicyAction":
                return new AppsecMalwarePolicyAction(name, <any>undefined, { urn })
            case "akamai:index/appsecMalwarePolicyActions:AppsecMalwarePolicyActions":
                return new AppsecMalwarePolicyActions(name, <any>undefined, { urn })
            case "akamai:index/appsecMalwareProtection:AppsecMalwareProtection":
                return new AppsecMalwareProtection(name, <any>undefined, { urn })
            case "akamai:index/appsecMatchTarget:AppsecMatchTarget":
                return new AppsecMatchTarget(name, <any>undefined, { urn })
            case "akamai:index/appsecMatchTargetSequence:AppsecMatchTargetSequence":
                return new AppsecMatchTargetSequence(name, <any>undefined, { urn })
            case "akamai:index/appsecPenaltyBox:AppsecPenaltyBox":
                return new AppsecPenaltyBox(name, <any>undefined, { urn })
            case "akamai:index/appsecPenaltyBoxConditions:AppsecPenaltyBoxConditions":
                return new AppsecPenaltyBoxConditions(name, <any>undefined, { urn })
            case "akamai:index/appsecRatePolicy:AppsecRatePolicy":
                return new AppsecRatePolicy(name, <any>undefined, { urn })
            case "akamai:index/appsecRatePolicyAction:AppsecRatePolicyAction":
                return new AppsecRatePolicyAction(name, <any>undefined, { urn })
            case "akamai:index/appsecRateProtection:AppsecRateProtection":
                return new AppsecRateProtection(name, <any>undefined, { urn })
            case "akamai:index/appsecReputationProfile:AppsecReputationProfile":
                return new AppsecReputationProfile(name, <any>undefined, { urn })
            case "akamai:index/appsecReputationProfileAction:AppsecReputationProfileAction":
                return new AppsecReputationProfileAction(name, <any>undefined, { urn })
            case "akamai:index/appsecReputationProfileAnalysis:AppsecReputationProfileAnalysis":
                return new AppsecReputationProfileAnalysis(name, <any>undefined, { urn })
            case "akamai:index/appsecReputationProtection:AppsecReputationProtection":
                return new AppsecReputationProtection(name, <any>undefined, { urn })
            case "akamai:index/appsecRule:AppsecRule":
                return new AppsecRule(name, <any>undefined, { urn })
            case "akamai:index/appsecRuleUpgrade:AppsecRuleUpgrade":
                return new AppsecRuleUpgrade(name, <any>undefined, { urn })
            case "akamai:index/appsecSecurityPolicy:AppsecSecurityPolicy":
                return new AppsecSecurityPolicy(name, <any>undefined, { urn })
            case "akamai:index/appsecSecurityPolicyDefaultProtections:AppsecSecurityPolicyDefaultProtections":
                return new AppsecSecurityPolicyDefaultProtections(name, <any>undefined, { urn })
            case "akamai:index/appsecSecurityPolicyRename:AppsecSecurityPolicyRename":
                return new AppsecSecurityPolicyRename(name, <any>undefined, { urn })
            case "akamai:index/appsecSelectedHostnames:AppsecSelectedHostnames":
                return new AppsecSelectedHostnames(name, <any>undefined, { urn })
            case "akamai:index/appsecSiemSettings:AppsecSiemSettings":
                return new AppsecSiemSettings(name, <any>undefined, { urn })
            case "akamai:index/appsecSlowPost:AppsecSlowPost":
                return new AppsecSlowPost(name, <any>undefined, { urn })
            case "akamai:index/appsecSlowpostProtection:AppsecSlowpostProtection":
                return new AppsecSlowpostProtection(name, <any>undefined, { urn })
            case "akamai:index/appsecThreatIntel:AppsecThreatIntel":
                return new AppsecThreatIntel(name, <any>undefined, { urn })
            case "akamai:index/appsecVersionNotes:AppsecVersionNotes":
                return new AppsecVersionNotes(name, <any>undefined, { urn })
            case "akamai:index/appsecWafMode:AppsecWafMode":
                return new AppsecWafMode(name, <any>undefined, { urn })
            case "akamai:index/appsecWafProtection:AppsecWafProtection":
                return new AppsecWafProtection(name, <any>undefined, { urn })
            case "akamai:index/appsecWapSelectedHostnames:AppsecWapSelectedHostnames":
                return new AppsecWapSelectedHostnames(name, <any>undefined, { urn })
            case "akamai:index/botmanAkamaiBotCategoryAction:BotmanAkamaiBotCategoryAction":
                return new BotmanAkamaiBotCategoryAction(name, <any>undefined, { urn })
            case "akamai:index/botmanBotAnalyticsCookie:BotmanBotAnalyticsCookie":
                return new BotmanBotAnalyticsCookie(name, <any>undefined, { urn })
            case "akamai:index/botmanBotCategoryException:BotmanBotCategoryException":
                return new BotmanBotCategoryException(name, <any>undefined, { urn })
            case "akamai:index/botmanBotDetectionAction:BotmanBotDetectionAction":
                return new BotmanBotDetectionAction(name, <any>undefined, { urn })
            case "akamai:index/botmanBotManagementSettings:BotmanBotManagementSettings":
                return new BotmanBotManagementSettings(name, <any>undefined, { urn })
            case "akamai:index/botmanChallengeAction:BotmanChallengeAction":
                return new BotmanChallengeAction(name, <any>undefined, { urn })
            case "akamai:index/botmanChallengeInjectionRules:BotmanChallengeInjectionRules":
                return new BotmanChallengeInjectionRules(name, <any>undefined, { urn })
            case "akamai:index/botmanChallengeInterceptionRules:BotmanChallengeInterceptionRules":
                return new BotmanChallengeInterceptionRules(name, <any>undefined, { urn })
            case "akamai:index/botmanClientSideSecurity:BotmanClientSideSecurity":
                return new BotmanClientSideSecurity(name, <any>undefined, { urn })
            case "akamai:index/botmanConditionalAction:BotmanConditionalAction":
                return new BotmanConditionalAction(name, <any>undefined, { urn })
            case "akamai:index/botmanContentProtectionJavascriptInjectionRule:BotmanContentProtectionJavascriptInjectionRule":
                return new BotmanContentProtectionJavascriptInjectionRule(name, <any>undefined, { urn })
            case "akamai:index/botmanContentProtectionRule:BotmanContentProtectionRule":
                return new BotmanContentProtectionRule(name, <any>undefined, { urn })
            case "akamai:index/botmanContentProtectionRuleSequence:BotmanContentProtectionRuleSequence":
                return new BotmanContentProtectionRuleSequence(name, <any>undefined, { urn })
            case "akamai:index/botmanCustomBotCategory:BotmanCustomBotCategory":
                return new BotmanCustomBotCategory(name, <any>undefined, { urn })
            case "akamai:index/botmanCustomBotCategoryAction:BotmanCustomBotCategoryAction":
                return new BotmanCustomBotCategoryAction(name, <any>undefined, { urn })
            case "akamai:index/botmanCustomBotCategoryItemSequence:BotmanCustomBotCategoryItemSequence":
                return new BotmanCustomBotCategoryItemSequence(name, <any>undefined, { urn })
            case "akamai:index/botmanCustomBotCategorySequence:BotmanCustomBotCategorySequence":
                return new BotmanCustomBotCategorySequence(name, <any>undefined, { urn })
            case "akamai:index/botmanCustomClient:BotmanCustomClient":
                return new BotmanCustomClient(name, <any>undefined, { urn })
            case "akamai:index/botmanCustomClientSequence:BotmanCustomClientSequence":
                return new BotmanCustomClientSequence(name, <any>undefined, { urn })
            case "akamai:index/botmanCustomCode:BotmanCustomCode":
                return new BotmanCustomCode(name, <any>undefined, { urn })
            case "akamai:index/botmanCustomDefinedBot:BotmanCustomDefinedBot":
                return new BotmanCustomDefinedBot(name, <any>undefined, { urn })
            case "akamai:index/botmanCustomDenyAction:BotmanCustomDenyAction":
                return new BotmanCustomDenyAction(name, <any>undefined, { urn })
            case "akamai:index/botmanJavascriptInjection:BotmanJavascriptInjection":
                return new BotmanJavascriptInjection(name, <any>undefined, { urn })
            case "akamai:index/botmanRecategorizedAkamaiDefinedBot:BotmanRecategorizedAkamaiDefinedBot":
                return new BotmanRecategorizedAkamaiDefinedBot(name, <any>undefined, { urn })
            case "akamai:index/botmanServeAlternateAction:BotmanServeAlternateAction":
                return new BotmanServeAlternateAction(name, <any>undefined, { urn })
            case "akamai:index/botmanTransactionalEndpoint:BotmanTransactionalEndpoint":
                return new BotmanTransactionalEndpoint(name, <any>undefined, { urn })
            case "akamai:index/botmanTransactionalEndpointProtection:BotmanTransactionalEndpointProtection":
                return new BotmanTransactionalEndpointProtection(name, <any>undefined, { urn })
            case "akamai:index/clientlistActivation:ClientlistActivation":
                return new ClientlistActivation(name, <any>undefined, { urn })
            case "akamai:index/clientlistList:ClientlistList":
                return new ClientlistList(name, <any>undefined, { urn })
            case "akamai:index/cloudaccessKey:CloudaccessKey":
                return new CloudaccessKey(name, <any>undefined, { urn })
            case "akamai:index/cloudletsApplicationLoadBalancer:CloudletsApplicationLoadBalancer":
                return new CloudletsApplicationLoadBalancer(name, <any>undefined, { urn })
            case "akamai:index/cloudletsApplicationLoadBalancerActivation:CloudletsApplicationLoadBalancerActivation":
                return new CloudletsApplicationLoadBalancerActivation(name, <any>undefined, { urn })
            case "akamai:index/cloudletsPolicy:CloudletsPolicy":
                return new CloudletsPolicy(name, <any>undefined, { urn })
            case "akamai:index/cloudletsPolicyActivation:CloudletsPolicyActivation":
                return new CloudletsPolicyActivation(name, <any>undefined, { urn })
            case "akamai:index/cloudwrapperActivation:CloudwrapperActivation":
                return new CloudwrapperActivation(name, <any>undefined, { urn })
            case "akamai:index/cloudwrapperConfiguration:CloudwrapperConfiguration":
                return new CloudwrapperConfiguration(name, <any>undefined, { urn })
            case "akamai:index/cpCode:CpCode":
                return new CpCode(name, <any>undefined, { urn })
            case "akamai:index/cpsDvEnrollment:CpsDvEnrollment":
                return new CpsDvEnrollment(name, <any>undefined, { urn })
            case "akamai:index/cpsDvValidation:CpsDvValidation":
                return new CpsDvValidation(name, <any>undefined, { urn })
            case "akamai:index/cpsThirdPartyEnrollment:CpsThirdPartyEnrollment":
                return new CpsThirdPartyEnrollment(name, <any>undefined, { urn })
            case "akamai:index/cpsUploadCertificate:CpsUploadCertificate":
                return new CpsUploadCertificate(name, <any>undefined, { urn })
            case "akamai:index/datastream:Datastream":
                return new Datastream(name, <any>undefined, { urn })
            case "akamai:index/dnsRecord:DnsRecord":
                return new DnsRecord(name, <any>undefined, { urn })
            case "akamai:index/dnsZone:DnsZone":
                return new DnsZone(name, <any>undefined, { urn })
            case "akamai:index/edgeHostname:EdgeHostname":
                return new EdgeHostname(name, <any>undefined, { urn })
            case "akamai:index/edgekv:Edgekv":
                return new Edgekv(name, <any>undefined, { urn })
            case "akamai:index/edgekvGroupItems:EdgekvGroupItems":
                return new EdgekvGroupItems(name, <any>undefined, { urn })
            case "akamai:index/edgeworker:Edgeworker":
                return new Edgeworker(name, <any>undefined, { urn })
            case "akamai:index/edgeworkersActivation:EdgeworkersActivation":
                return new EdgeworkersActivation(name, <any>undefined, { urn })
            case "akamai:index/gtmAsmap:GtmAsmap":
                return new GtmAsmap(name, <any>undefined, { urn })
            case "akamai:index/gtmCidrmap:GtmCidrmap":
                return new GtmCidrmap(name, <any>undefined, { urn })
            case "akamai:index/gtmDatacenter:GtmDatacenter":
                return new GtmDatacenter(name, <any>undefined, { urn })
            case "akamai:index/gtmDomain:GtmDomain":
                return new GtmDomain(name, <any>undefined, { urn })
            case "akamai:index/gtmGeomap:GtmGeomap":
                return new GtmGeomap(name, <any>undefined, { urn })
            case "akamai:index/gtmProperty:GtmProperty":
                return new GtmProperty(name, <any>undefined, { urn })
            case "akamai:index/gtmResource:GtmResource":
                return new GtmResource(name, <any>undefined, { urn })
            case "akamai:index/iamBlockedUserProperties:IamBlockedUserProperties":
                return new IamBlockedUserProperties(name, <any>undefined, { urn })
            case "akamai:index/iamGroup:IamGroup":
                return new IamGroup(name, <any>undefined, { urn })
            case "akamai:index/iamRole:IamRole":
                return new IamRole(name, <any>undefined, { urn })
            case "akamai:index/iamUser:IamUser":
                return new IamUser(name, <any>undefined, { urn })
            case "akamai:index/imagingPolicyImage:ImagingPolicyImage":
                return new ImagingPolicyImage(name, <any>undefined, { urn })
            case "akamai:index/imagingPolicySet:ImagingPolicySet":
                return new ImagingPolicySet(name, <any>undefined, { urn })
            case "akamai:index/imagingPolicyVideo:ImagingPolicyVideo":
                return new ImagingPolicyVideo(name, <any>undefined, { urn })
            case "akamai:index/networklistActivations:NetworklistActivations":
                return new NetworklistActivations(name, <any>undefined, { urn })
            case "akamai:index/networklistDescription:NetworklistDescription":
                return new NetworklistDescription(name, <any>undefined, { urn })
            case "akamai:index/networklistNetworkList:NetworklistNetworkList":
                return new NetworklistNetworkList(name, <any>undefined, { urn })
            case "akamai:index/networklistSubscription:NetworklistSubscription":
                return new NetworklistSubscription(name, <any>undefined, { urn })
            case "akamai:index/property:Property":
                return new Property(name, <any>undefined, { urn })
            case "akamai:index/propertyActivation:PropertyActivation":
                return new PropertyActivation(name, <any>undefined, { urn })
            case "akamai:index/propertyBootstrap:PropertyBootstrap":
                return new PropertyBootstrap(name, <any>undefined, { urn })
            case "akamai:index/propertyInclude:PropertyInclude":
                return new PropertyInclude(name, <any>undefined, { urn })
            case "akamai:index/propertyIncludeActivation:PropertyIncludeActivation":
                return new PropertyIncludeActivation(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("akamai", "index/appsecActivations", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecAdvancedSettingsAttackPayloadLogging", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecAdvancedSettingsEvasivePathMatch", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecAdvancedSettingsLogging", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecAdvancedSettingsPiiLearning", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecAdvancedSettingsPragmaHeader", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecAdvancedSettingsPrefetch", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecAdvancedSettingsRequestBody", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecApiConstraintsProtection", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecApiRequestConstraints", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecAttackGroup", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecBypassNetworkLists", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecConfiguration", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecConfigurationRename", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecCustomDeny", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecCustomRule", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecCustomRuleAction", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecEval", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecEvalGroup", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecEvalPenaltyBox", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecEvalPenaltyBoxConditions", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecEvalRule", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecIpGeo", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecIpGeoProtection", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecMalwarePolicy", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecMalwarePolicyAction", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecMalwarePolicyActions", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecMalwareProtection", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecMatchTarget", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecMatchTargetSequence", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecPenaltyBox", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecPenaltyBoxConditions", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecRatePolicy", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecRatePolicyAction", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecRateProtection", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecReputationProfile", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecReputationProfileAction", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecReputationProfileAnalysis", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecReputationProtection", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecRule", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecRuleUpgrade", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecSecurityPolicy", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecSecurityPolicyDefaultProtections", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecSecurityPolicyRename", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecSelectedHostnames", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecSiemSettings", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecSlowPost", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecSlowpostProtection", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecThreatIntel", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecVersionNotes", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecWafMode", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecWafProtection", _module)
pulumi.runtime.registerResourceModule("akamai", "index/appsecWapSelectedHostnames", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanAkamaiBotCategoryAction", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanBotAnalyticsCookie", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanBotCategoryException", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanBotDetectionAction", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanBotManagementSettings", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanChallengeAction", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanChallengeInjectionRules", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanChallengeInterceptionRules", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanClientSideSecurity", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanConditionalAction", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanContentProtectionJavascriptInjectionRule", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanContentProtectionRule", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanContentProtectionRuleSequence", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanCustomBotCategory", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanCustomBotCategoryAction", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanCustomBotCategoryItemSequence", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanCustomBotCategorySequence", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanCustomClient", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanCustomClientSequence", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanCustomCode", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanCustomDefinedBot", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanCustomDenyAction", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanJavascriptInjection", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanRecategorizedAkamaiDefinedBot", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanServeAlternateAction", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanTransactionalEndpoint", _module)
pulumi.runtime.registerResourceModule("akamai", "index/botmanTransactionalEndpointProtection", _module)
pulumi.runtime.registerResourceModule("akamai", "index/clientlistActivation", _module)
pulumi.runtime.registerResourceModule("akamai", "index/clientlistList", _module)
pulumi.runtime.registerResourceModule("akamai", "index/cloudaccessKey", _module)
pulumi.runtime.registerResourceModule("akamai", "index/cloudletsApplicationLoadBalancer", _module)
pulumi.runtime.registerResourceModule("akamai", "index/cloudletsApplicationLoadBalancerActivation", _module)
pulumi.runtime.registerResourceModule("akamai", "index/cloudletsPolicy", _module)
pulumi.runtime.registerResourceModule("akamai", "index/cloudletsPolicyActivation", _module)
pulumi.runtime.registerResourceModule("akamai", "index/cloudwrapperActivation", _module)
pulumi.runtime.registerResourceModule("akamai", "index/cloudwrapperConfiguration", _module)
pulumi.runtime.registerResourceModule("akamai", "index/cpCode", _module)
pulumi.runtime.registerResourceModule("akamai", "index/cpsDvEnrollment", _module)
pulumi.runtime.registerResourceModule("akamai", "index/cpsDvValidation", _module)
pulumi.runtime.registerResourceModule("akamai", "index/cpsThirdPartyEnrollment", _module)
pulumi.runtime.registerResourceModule("akamai", "index/cpsUploadCertificate", _module)
pulumi.runtime.registerResourceModule("akamai", "index/datastream", _module)
pulumi.runtime.registerResourceModule("akamai", "index/dnsRecord", _module)
pulumi.runtime.registerResourceModule("akamai", "index/dnsZone", _module)
pulumi.runtime.registerResourceModule("akamai", "index/edgeHostname", _module)
pulumi.runtime.registerResourceModule("akamai", "index/edgekv", _module)
pulumi.runtime.registerResourceModule("akamai", "index/edgekvGroupItems", _module)
pulumi.runtime.registerResourceModule("akamai", "index/edgeworker", _module)
pulumi.runtime.registerResourceModule("akamai", "index/edgeworkersActivation", _module)
pulumi.runtime.registerResourceModule("akamai", "index/gtmAsmap", _module)
pulumi.runtime.registerResourceModule("akamai", "index/gtmCidrmap", _module)
pulumi.runtime.registerResourceModule("akamai", "index/gtmDatacenter", _module)
pulumi.runtime.registerResourceModule("akamai", "index/gtmDomain", _module)
pulumi.runtime.registerResourceModule("akamai", "index/gtmGeomap", _module)
pulumi.runtime.registerResourceModule("akamai", "index/gtmProperty", _module)
pulumi.runtime.registerResourceModule("akamai", "index/gtmResource", _module)
pulumi.runtime.registerResourceModule("akamai", "index/iamBlockedUserProperties", _module)
pulumi.runtime.registerResourceModule("akamai", "index/iamGroup", _module)
pulumi.runtime.registerResourceModule("akamai", "index/iamRole", _module)
pulumi.runtime.registerResourceModule("akamai", "index/iamUser", _module)
pulumi.runtime.registerResourceModule("akamai", "index/imagingPolicyImage", _module)
pulumi.runtime.registerResourceModule("akamai", "index/imagingPolicySet", _module)
pulumi.runtime.registerResourceModule("akamai", "index/imagingPolicyVideo", _module)
pulumi.runtime.registerResourceModule("akamai", "index/networklistActivations", _module)
pulumi.runtime.registerResourceModule("akamai", "index/networklistDescription", _module)
pulumi.runtime.registerResourceModule("akamai", "index/networklistNetworkList", _module)
pulumi.runtime.registerResourceModule("akamai", "index/networklistSubscription", _module)
pulumi.runtime.registerResourceModule("akamai", "index/property", _module)
pulumi.runtime.registerResourceModule("akamai", "index/propertyActivation", _module)
pulumi.runtime.registerResourceModule("akamai", "index/propertyBootstrap", _module)
pulumi.runtime.registerResourceModule("akamai", "index/propertyInclude", _module)
pulumi.runtime.registerResourceModule("akamai", "index/propertyIncludeActivation", _module)
pulumi.runtime.registerResourcePackage("akamai", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:akamai") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
