// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCloudletsPolicy(args: GetCloudletsPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetCloudletsPolicyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("akamai:index/getCloudletsPolicy:getCloudletsPolicy", {
        "id": args.id,
        "policyId": args.policyId,
        "version": args.version,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCloudletsPolicy.
 */
export interface GetCloudletsPolicyArgs {
    id?: string;
    policyId: number;
    version?: number;
}

/**
 * A collection of values returned by getCloudletsPolicy.
 */
export interface GetCloudletsPolicyResult {
    readonly activations: outputs.GetCloudletsPolicyActivation[];
    readonly apiVersion: string;
    readonly cloudletCode: string;
    readonly cloudletId: number;
    readonly description: string;
    readonly groupId: number;
    readonly id: string;
    readonly matchRuleFormat: string;
    readonly matchRules: string;
    readonly name: string;
    readonly policyId: number;
    readonly revisionId: number;
    readonly rulesLocked: boolean;
    readonly version?: number;
    readonly versionDescription: string;
    readonly warnings: string;
}
export function getCloudletsPolicyOutput(args: GetCloudletsPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCloudletsPolicyResult> {
    return pulumi.output(args).apply((a: any) => getCloudletsPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getCloudletsPolicy.
 */
export interface GetCloudletsPolicyOutputArgs {
    id?: pulumi.Input<string>;
    policyId: pulumi.Input<number>;
    version?: pulumi.Input<number>;
}
