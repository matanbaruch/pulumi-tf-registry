// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudaccessKey extends pulumi.CustomResource {
    /**
     * Get an existing CloudaccessKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudaccessKeyState, opts?: pulumi.CustomResourceOptions): CloudaccessKey {
        return new CloudaccessKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'akamai:index/cloudaccessKey:CloudaccessKey';

    /**
     * Returns true if the given object is an instance of CloudaccessKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudaccessKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudaccessKey.__pulumiType;
    }

    /**
     * Name of the access key.
     */
    public readonly accessKeyName!: pulumi.Output<string>;
    /**
     * The unique identifier Akamai assigns to an access key.
     */
    public /*out*/ readonly accessKeyUid!: pulumi.Output<number>;
    /**
     * The type of cloud provider signing process used to authenticate API requests. Two options are available:
     * "AWS4_HMAC_SHA256" or "GOOG4_HMAC_SHA256".
     */
    public readonly authenticationMethod!: pulumi.Output<string>;
    /**
     * The unique identifier for the contract assigned to the access key
     */
    public readonly contractId!: pulumi.Output<string>;
    /**
     * The combination of a `cloud_access_key_id` and a `cloud_secret_access_key` used to sign API requests. This pair can be
     * identified as access key version. Access key can contain only two access key versions at specific time (defined as
     * credentialsA and credentialsB).
     */
    public readonly credentialsA!: pulumi.Output<outputs.CloudaccessKeyCredentialsA | undefined>;
    /**
     * The combination of a `cloud_access_key_id` and a `cloud_secret_access_key` used to sign API requests. This pair can be
     * identified as access key version. Access key can contain only two access key versions at specific time (defined as
     * credentialsA and credentialsB).
     */
    public readonly credentialsB!: pulumi.Output<outputs.CloudaccessKeyCredentialsB | undefined>;
    /**
     * The unique identifier assigned to the access control group assigned to the access key
     */
    public readonly groupId!: pulumi.Output<number>;
    /**
     * The secure networks that you assigned the access key to during creation
     */
    public readonly networkConfiguration!: pulumi.Output<outputs.CloudaccessKeyNetworkConfiguration>;
    /**
     * Value of `version_guid` field for credentials marked as primary
     */
    public /*out*/ readonly primaryGuid!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CloudaccessKeyTimeouts | undefined>;

    /**
     * Create a CloudaccessKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudaccessKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudaccessKeyArgs | CloudaccessKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudaccessKeyState | undefined;
            resourceInputs["accessKeyName"] = state ? state.accessKeyName : undefined;
            resourceInputs["accessKeyUid"] = state ? state.accessKeyUid : undefined;
            resourceInputs["authenticationMethod"] = state ? state.authenticationMethod : undefined;
            resourceInputs["contractId"] = state ? state.contractId : undefined;
            resourceInputs["credentialsA"] = state ? state.credentialsA : undefined;
            resourceInputs["credentialsB"] = state ? state.credentialsB : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["networkConfiguration"] = state ? state.networkConfiguration : undefined;
            resourceInputs["primaryGuid"] = state ? state.primaryGuid : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as CloudaccessKeyArgs | undefined;
            if ((!args || args.accessKeyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessKeyName'");
            }
            if ((!args || args.authenticationMethod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authenticationMethod'");
            }
            if ((!args || args.contractId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contractId'");
            }
            if ((!args || args.groupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if ((!args || args.networkConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkConfiguration'");
            }
            resourceInputs["accessKeyName"] = args ? args.accessKeyName : undefined;
            resourceInputs["authenticationMethod"] = args ? args.authenticationMethod : undefined;
            resourceInputs["contractId"] = args ? args.contractId : undefined;
            resourceInputs["credentialsA"] = args ? args.credentialsA : undefined;
            resourceInputs["credentialsB"] = args ? args.credentialsB : undefined;
            resourceInputs["groupId"] = args ? args.groupId : undefined;
            resourceInputs["networkConfiguration"] = args ? args.networkConfiguration : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["accessKeyUid"] = undefined /*out*/;
            resourceInputs["primaryGuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudaccessKey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudaccessKey resources.
 */
export interface CloudaccessKeyState {
    /**
     * Name of the access key.
     */
    accessKeyName?: pulumi.Input<string>;
    /**
     * The unique identifier Akamai assigns to an access key.
     */
    accessKeyUid?: pulumi.Input<number>;
    /**
     * The type of cloud provider signing process used to authenticate API requests. Two options are available:
     * "AWS4_HMAC_SHA256" or "GOOG4_HMAC_SHA256".
     */
    authenticationMethod?: pulumi.Input<string>;
    /**
     * The unique identifier for the contract assigned to the access key
     */
    contractId?: pulumi.Input<string>;
    /**
     * The combination of a `cloud_access_key_id` and a `cloud_secret_access_key` used to sign API requests. This pair can be
     * identified as access key version. Access key can contain only two access key versions at specific time (defined as
     * credentialsA and credentialsB).
     */
    credentialsA?: pulumi.Input<inputs.CloudaccessKeyCredentialsA>;
    /**
     * The combination of a `cloud_access_key_id` and a `cloud_secret_access_key` used to sign API requests. This pair can be
     * identified as access key version. Access key can contain only two access key versions at specific time (defined as
     * credentialsA and credentialsB).
     */
    credentialsB?: pulumi.Input<inputs.CloudaccessKeyCredentialsB>;
    /**
     * The unique identifier assigned to the access control group assigned to the access key
     */
    groupId?: pulumi.Input<number>;
    /**
     * The secure networks that you assigned the access key to during creation
     */
    networkConfiguration?: pulumi.Input<inputs.CloudaccessKeyNetworkConfiguration>;
    /**
     * Value of `version_guid` field for credentials marked as primary
     */
    primaryGuid?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CloudaccessKeyTimeouts>;
}

/**
 * The set of arguments for constructing a CloudaccessKey resource.
 */
export interface CloudaccessKeyArgs {
    /**
     * Name of the access key.
     */
    accessKeyName: pulumi.Input<string>;
    /**
     * The type of cloud provider signing process used to authenticate API requests. Two options are available:
     * "AWS4_HMAC_SHA256" or "GOOG4_HMAC_SHA256".
     */
    authenticationMethod: pulumi.Input<string>;
    /**
     * The unique identifier for the contract assigned to the access key
     */
    contractId: pulumi.Input<string>;
    /**
     * The combination of a `cloud_access_key_id` and a `cloud_secret_access_key` used to sign API requests. This pair can be
     * identified as access key version. Access key can contain only two access key versions at specific time (defined as
     * credentialsA and credentialsB).
     */
    credentialsA?: pulumi.Input<inputs.CloudaccessKeyCredentialsA>;
    /**
     * The combination of a `cloud_access_key_id` and a `cloud_secret_access_key` used to sign API requests. This pair can be
     * identified as access key version. Access key can contain only two access key versions at specific time (defined as
     * credentialsA and credentialsB).
     */
    credentialsB?: pulumi.Input<inputs.CloudaccessKeyCredentialsB>;
    /**
     * The unique identifier assigned to the access control group assigned to the access key
     */
    groupId: pulumi.Input<number>;
    /**
     * The secure networks that you assigned the access key to during creation
     */
    networkConfiguration: pulumi.Input<inputs.CloudaccessKeyNetworkConfiguration>;
    timeouts?: pulumi.Input<inputs.CloudaccessKeyTimeouts>;
}
