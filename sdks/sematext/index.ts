// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AppAkkaArgs, AppAkkaState } from "./appAkka";
export type AppAkka = import("./appAkka").AppAkka;
export const AppAkka: typeof import("./appAkka").AppAkka = null as any;
utilities.lazyLoad(exports, ["AppAkka"], () => require("./appAkka"));

export { AppApacheArgs, AppApacheState } from "./appApache";
export type AppApache = import("./appApache").AppApache;
export const AppApache: typeof import("./appApache").AppApache = null as any;
utilities.lazyLoad(exports, ["AppApache"], () => require("./appApache"));

export { AppAwsebsArgs, AppAwsebsState } from "./appAwsebs";
export type AppAwsebs = import("./appAwsebs").AppAwsebs;
export const AppAwsebs: typeof import("./appAwsebs").AppAwsebs = null as any;
utilities.lazyLoad(exports, ["AppAwsebs"], () => require("./appAwsebs"));

export { AppAwsec2Args, AppAwsec2State } from "./appAwsec2";
export type AppAwsec2 = import("./appAwsec2").AppAwsec2;
export const AppAwsec2: typeof import("./appAwsec2").AppAwsec2 = null as any;
utilities.lazyLoad(exports, ["AppAwsec2"], () => require("./appAwsec2"));

export { AppAwselbArgs, AppAwselbState } from "./appAwselb";
export type AppAwselb = import("./appAwselb").AppAwselb;
export const AppAwselb: typeof import("./appAwselb").AppAwselb = null as any;
utilities.lazyLoad(exports, ["AppAwselb"], () => require("./appAwselb"));

export { AppCassandraArgs, AppCassandraState } from "./appCassandra";
export type AppCassandra = import("./appCassandra").AppCassandra;
export const AppCassandra: typeof import("./appCassandra").AppCassandra = null as any;
utilities.lazyLoad(exports, ["AppCassandra"], () => require("./appCassandra"));

export { AppClickhouseArgs, AppClickhouseState } from "./appClickhouse";
export type AppClickhouse = import("./appClickhouse").AppClickhouse;
export const AppClickhouse: typeof import("./appClickhouse").AppClickhouse = null as any;
utilities.lazyLoad(exports, ["AppClickhouse"], () => require("./appClickhouse"));

export { AppElasticsearchArgs, AppElasticsearchState } from "./appElasticsearch";
export type AppElasticsearch = import("./appElasticsearch").AppElasticsearch;
export const AppElasticsearch: typeof import("./appElasticsearch").AppElasticsearch = null as any;
utilities.lazyLoad(exports, ["AppElasticsearch"], () => require("./appElasticsearch"));

export { AppHadoopmrv1Args, AppHadoopmrv1State } from "./appHadoopmrv1";
export type AppHadoopmrv1 = import("./appHadoopmrv1").AppHadoopmrv1;
export const AppHadoopmrv1: typeof import("./appHadoopmrv1").AppHadoopmrv1 = null as any;
utilities.lazyLoad(exports, ["AppHadoopmrv1"], () => require("./appHadoopmrv1"));

export { AppHadoopyarnArgs, AppHadoopyarnState } from "./appHadoopyarn";
export type AppHadoopyarn = import("./appHadoopyarn").AppHadoopyarn;
export const AppHadoopyarn: typeof import("./appHadoopyarn").AppHadoopyarn = null as any;
utilities.lazyLoad(exports, ["AppHadoopyarn"], () => require("./appHadoopyarn"));

export { AppHaproxyArgs, AppHaproxyState } from "./appHaproxy";
export type AppHaproxy = import("./appHaproxy").AppHaproxy;
export const AppHaproxy: typeof import("./appHaproxy").AppHaproxy = null as any;
utilities.lazyLoad(exports, ["AppHaproxy"], () => require("./appHaproxy"));

export { AppHbaseArgs, AppHbaseState } from "./appHbase";
export type AppHbase = import("./appHbase").AppHbase;
export const AppHbase: typeof import("./appHbase").AppHbase = null as any;
utilities.lazyLoad(exports, ["AppHbase"], () => require("./appHbase"));

export { AppInfraArgs, AppInfraState } from "./appInfra";
export type AppInfra = import("./appInfra").AppInfra;
export const AppInfra: typeof import("./appInfra").AppInfra = null as any;
utilities.lazyLoad(exports, ["AppInfra"], () => require("./appInfra"));

export { AppJvmArgs, AppJvmState } from "./appJvm";
export type AppJvm = import("./appJvm").AppJvm;
export const AppJvm: typeof import("./appJvm").AppJvm = null as any;
utilities.lazyLoad(exports, ["AppJvm"], () => require("./appJvm"));

export { AppKafkaArgs, AppKafkaState } from "./appKafka";
export type AppKafka = import("./appKafka").AppKafka;
export const AppKafka: typeof import("./appKafka").AppKafka = null as any;
utilities.lazyLoad(exports, ["AppKafka"], () => require("./appKafka"));

export { AppLogseneArgs, AppLogseneState } from "./appLogsene";
export type AppLogsene = import("./appLogsene").AppLogsene;
export const AppLogsene: typeof import("./appLogsene").AppLogsene = null as any;
utilities.lazyLoad(exports, ["AppLogsene"], () => require("./appLogsene"));

export { AppMobilelogsArgs, AppMobilelogsState } from "./appMobilelogs";
export type AppMobilelogs = import("./appMobilelogs").AppMobilelogs;
export const AppMobilelogs: typeof import("./appMobilelogs").AppMobilelogs = null as any;
utilities.lazyLoad(exports, ["AppMobilelogs"], () => require("./appMobilelogs"));

export { AppMongodbArgs, AppMongodbState } from "./appMongodb";
export type AppMongodb = import("./appMongodb").AppMongodb;
export const AppMongodb: typeof import("./appMongodb").AppMongodb = null as any;
utilities.lazyLoad(exports, ["AppMongodb"], () => require("./appMongodb"));

export { AppMysqlArgs, AppMysqlState } from "./appMysql";
export type AppMysql = import("./appMysql").AppMysql;
export const AppMysql: typeof import("./appMysql").AppMysql = null as any;
utilities.lazyLoad(exports, ["AppMysql"], () => require("./appMysql"));

export { AppNginxArgs, AppNginxState } from "./appNginx";
export type AppNginx = import("./appNginx").AppNginx;
export const AppNginx: typeof import("./appNginx").AppNginx = null as any;
utilities.lazyLoad(exports, ["AppNginx"], () => require("./appNginx"));

export { AppNginxplusArgs, AppNginxplusState } from "./appNginxplus";
export type AppNginxplus = import("./appNginxplus").AppNginxplus;
export const AppNginxplus: typeof import("./appNginxplus").AppNginxplus = null as any;
utilities.lazyLoad(exports, ["AppNginxplus"], () => require("./appNginxplus"));

export { AppNodejsArgs, AppNodejsState } from "./appNodejs";
export type AppNodejs = import("./appNodejs").AppNodejs;
export const AppNodejs: typeof import("./appNodejs").AppNodejs = null as any;
utilities.lazyLoad(exports, ["AppNodejs"], () => require("./appNodejs"));

export { AppPostgresqlArgs, AppPostgresqlState } from "./appPostgresql";
export type AppPostgresql = import("./appPostgresql").AppPostgresql;
export const AppPostgresql: typeof import("./appPostgresql").AppPostgresql = null as any;
utilities.lazyLoad(exports, ["AppPostgresql"], () => require("./appPostgresql"));

export { AppRabbitmqArgs, AppRabbitmqState } from "./appRabbitmq";
export type AppRabbitmq = import("./appRabbitmq").AppRabbitmq;
export const AppRabbitmq: typeof import("./appRabbitmq").AppRabbitmq = null as any;
utilities.lazyLoad(exports, ["AppRabbitmq"], () => require("./appRabbitmq"));

export { AppRedisArgs, AppRedisState } from "./appRedis";
export type AppRedis = import("./appRedis").AppRedis;
export const AppRedis: typeof import("./appRedis").AppRedis = null as any;
utilities.lazyLoad(exports, ["AppRedis"], () => require("./appRedis"));

export { AppSolrArgs, AppSolrState } from "./appSolr";
export type AppSolr = import("./appSolr").AppSolr;
export const AppSolr: typeof import("./appSolr").AppSolr = null as any;
utilities.lazyLoad(exports, ["AppSolr"], () => require("./appSolr"));

export { AppSolrcloudArgs, AppSolrcloudState } from "./appSolrcloud";
export type AppSolrcloud = import("./appSolrcloud").AppSolrcloud;
export const AppSolrcloud: typeof import("./appSolrcloud").AppSolrcloud = null as any;
utilities.lazyLoad(exports, ["AppSolrcloud"], () => require("./appSolrcloud"));

export { AppSparkArgs, AppSparkState } from "./appSpark";
export type AppSpark = import("./appSpark").AppSpark;
export const AppSpark: typeof import("./appSpark").AppSpark = null as any;
utilities.lazyLoad(exports, ["AppSpark"], () => require("./appSpark"));

export { AppStormArgs, AppStormState } from "./appStorm";
export type AppStorm = import("./appStorm").AppStorm;
export const AppStorm: typeof import("./appStorm").AppStorm = null as any;
utilities.lazyLoad(exports, ["AppStorm"], () => require("./appStorm"));

export { AppTomcatArgs, AppTomcatState } from "./appTomcat";
export type AppTomcat = import("./appTomcat").AppTomcat;
export const AppTomcat: typeof import("./appTomcat").AppTomcat = null as any;
utilities.lazyLoad(exports, ["AppTomcat"], () => require("./appTomcat"));

export { AppZookeeperArgs, AppZookeeperState } from "./appZookeeper";
export type AppZookeeper = import("./appZookeeper").AppZookeeper;
export const AppZookeeper: typeof import("./appZookeeper").AppZookeeper = null as any;
utilities.lazyLoad(exports, ["AppZookeeper"], () => require("./appZookeeper"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "sematext:index/appAkka:AppAkka":
                return new AppAkka(name, <any>undefined, { urn })
            case "sematext:index/appApache:AppApache":
                return new AppApache(name, <any>undefined, { urn })
            case "sematext:index/appAwsebs:AppAwsebs":
                return new AppAwsebs(name, <any>undefined, { urn })
            case "sematext:index/appAwsec2:AppAwsec2":
                return new AppAwsec2(name, <any>undefined, { urn })
            case "sematext:index/appAwselb:AppAwselb":
                return new AppAwselb(name, <any>undefined, { urn })
            case "sematext:index/appCassandra:AppCassandra":
                return new AppCassandra(name, <any>undefined, { urn })
            case "sematext:index/appClickhouse:AppClickhouse":
                return new AppClickhouse(name, <any>undefined, { urn })
            case "sematext:index/appElasticsearch:AppElasticsearch":
                return new AppElasticsearch(name, <any>undefined, { urn })
            case "sematext:index/appHadoopmrv1:AppHadoopmrv1":
                return new AppHadoopmrv1(name, <any>undefined, { urn })
            case "sematext:index/appHadoopyarn:AppHadoopyarn":
                return new AppHadoopyarn(name, <any>undefined, { urn })
            case "sematext:index/appHaproxy:AppHaproxy":
                return new AppHaproxy(name, <any>undefined, { urn })
            case "sematext:index/appHbase:AppHbase":
                return new AppHbase(name, <any>undefined, { urn })
            case "sematext:index/appInfra:AppInfra":
                return new AppInfra(name, <any>undefined, { urn })
            case "sematext:index/appJvm:AppJvm":
                return new AppJvm(name, <any>undefined, { urn })
            case "sematext:index/appKafka:AppKafka":
                return new AppKafka(name, <any>undefined, { urn })
            case "sematext:index/appLogsene:AppLogsene":
                return new AppLogsene(name, <any>undefined, { urn })
            case "sematext:index/appMobilelogs:AppMobilelogs":
                return new AppMobilelogs(name, <any>undefined, { urn })
            case "sematext:index/appMongodb:AppMongodb":
                return new AppMongodb(name, <any>undefined, { urn })
            case "sematext:index/appMysql:AppMysql":
                return new AppMysql(name, <any>undefined, { urn })
            case "sematext:index/appNginx:AppNginx":
                return new AppNginx(name, <any>undefined, { urn })
            case "sematext:index/appNginxplus:AppNginxplus":
                return new AppNginxplus(name, <any>undefined, { urn })
            case "sematext:index/appNodejs:AppNodejs":
                return new AppNodejs(name, <any>undefined, { urn })
            case "sematext:index/appPostgresql:AppPostgresql":
                return new AppPostgresql(name, <any>undefined, { urn })
            case "sematext:index/appRabbitmq:AppRabbitmq":
                return new AppRabbitmq(name, <any>undefined, { urn })
            case "sematext:index/appRedis:AppRedis":
                return new AppRedis(name, <any>undefined, { urn })
            case "sematext:index/appSolr:AppSolr":
                return new AppSolr(name, <any>undefined, { urn })
            case "sematext:index/appSolrcloud:AppSolrcloud":
                return new AppSolrcloud(name, <any>undefined, { urn })
            case "sematext:index/appSpark:AppSpark":
                return new AppSpark(name, <any>undefined, { urn })
            case "sematext:index/appStorm:AppStorm":
                return new AppStorm(name, <any>undefined, { urn })
            case "sematext:index/appTomcat:AppTomcat":
                return new AppTomcat(name, <any>undefined, { urn })
            case "sematext:index/appZookeeper:AppZookeeper":
                return new AppZookeeper(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("sematext", "index/appAkka", _module)
pulumi.runtime.registerResourceModule("sematext", "index/appApache", _module)
pulumi.runtime.registerResourceModule("sematext", "index/appAwsebs", _module)
pulumi.runtime.registerResourceModule("sematext", "index/appAwsec2", _module)
pulumi.runtime.registerResourceModule("sematext", "index/appAwselb", _module)
pulumi.runtime.registerResourceModule("sematext", "index/appCassandra", _module)
pulumi.runtime.registerResourceModule("sematext", "index/appClickhouse", _module)
pulumi.runtime.registerResourceModule("sematext", "index/appElasticsearch", _module)
pulumi.runtime.registerResourceModule("sematext", "index/appHadoopmrv1", _module)
pulumi.runtime.registerResourceModule("sematext", "index/appHadoopyarn", _module)
pulumi.runtime.registerResourceModule("sematext", "index/appHaproxy", _module)
pulumi.runtime.registerResourceModule("sematext", "index/appHbase", _module)
pulumi.runtime.registerResourceModule("sematext", "index/appInfra", _module)
pulumi.runtime.registerResourceModule("sematext", "index/appJvm", _module)
pulumi.runtime.registerResourceModule("sematext", "index/appKafka", _module)
pulumi.runtime.registerResourceModule("sematext", "index/appLogsene", _module)
pulumi.runtime.registerResourceModule("sematext", "index/appMobilelogs", _module)
pulumi.runtime.registerResourceModule("sematext", "index/appMongodb", _module)
pulumi.runtime.registerResourceModule("sematext", "index/appMysql", _module)
pulumi.runtime.registerResourceModule("sematext", "index/appNginx", _module)
pulumi.runtime.registerResourceModule("sematext", "index/appNginxplus", _module)
pulumi.runtime.registerResourceModule("sematext", "index/appNodejs", _module)
pulumi.runtime.registerResourceModule("sematext", "index/appPostgresql", _module)
pulumi.runtime.registerResourceModule("sematext", "index/appRabbitmq", _module)
pulumi.runtime.registerResourceModule("sematext", "index/appRedis", _module)
pulumi.runtime.registerResourceModule("sematext", "index/appSolr", _module)
pulumi.runtime.registerResourceModule("sematext", "index/appSolrcloud", _module)
pulumi.runtime.registerResourceModule("sematext", "index/appSpark", _module)
pulumi.runtime.registerResourceModule("sematext", "index/appStorm", _module)
pulumi.runtime.registerResourceModule("sematext", "index/appTomcat", _module)
pulumi.runtime.registerResourceModule("sematext", "index/appZookeeper", _module)
pulumi.runtime.registerResourcePackage("sematext", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:sematext") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
