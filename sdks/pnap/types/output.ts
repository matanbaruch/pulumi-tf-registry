// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetEventsEvent {
    name: string;
    timestamp: string;
    userInfos: outputs.GetEventsEventUserInfo[];
}

export interface GetEventsEventUserInfo {
    accountId: string;
    clientId: string;
    username: string;
}

export interface GetInvoicesPaginatedInvoice {
    limit: number;
    offset: number;
    results: outputs.GetInvoicesPaginatedInvoiceResult[];
    total: number;
}

export interface GetInvoicesPaginatedInvoiceResult {
    amount: number;
    currency: string;
    dueDate: string;
    id: string;
    number: string;
    outstandingAmount: number;
    sentOn: string;
    status: string;
}

export interface GetIpBlockTag {
    createdBy: string;
    id: string;
    isBillingTag: boolean;
    name: string;
    value: string;
}

export interface GetLocationsLocation {
    location: string;
    locationDescription: string;
    productCategories: outputs.GetLocationsLocationProductCategory[];
}

export interface GetLocationsLocationProductCategory {
    productCategory: string;
    productCategoryDescription: string;
}

export interface GetPrivateNetworkMembership {
    ips: string[];
    resourceId: string;
    resourceType: string;
}

export interface GetPrivateNetworkServer {
    id: string;
    ips: string[];
}

export interface GetProductAvailabilityProductAvailability {
    locationAvailabilityDetails: outputs.GetProductAvailabilityProductAvailabilityLocationAvailabilityDetail[];
    productCategory: string;
    productCode: string;
}

export interface GetProductAvailabilityProductAvailabilityLocationAvailabilityDetail {
    availableQuantity: number;
    location: string;
    minQuantityAvailable: boolean;
    minQuantityRequested: number;
    solutions: string[];
}

export interface GetProductsProduct {
    metadatas: outputs.GetProductsProductMetadata[];
    plans: outputs.GetProductsProductPlan[];
    productCategory: string;
    productCode: string;
}

export interface GetProductsProductMetadata {
    coresPerCpu: number;
    cpu: string;
    cpuCount: number;
    cpuFrequency: number;
    network: string;
    ramInGb: number;
    storage: string;
}

export interface GetProductsProductPlan {
    correlatedProductCode: string;
    location: string;
    packageQuantity: number;
    packageUnit: string;
    price: number;
    priceUnit: string;
    pricingModel: string;
    sku: string;
    skuDescription: string;
}

export interface GetPublicNetworkIpBlock {
    id: string;
}

export interface GetPublicNetworkMembership {
    ips: string[];
    resourceId: string;
    resourceType: string;
}

export interface GetQuotaQuotaEditLimitRequestDetail {
    limit: number;
    reason: string;
    requestedOn: string;
}

export interface GetRancherClusterMetadata {
    url: string;
}

export interface GetRancherClusterNodePool {
    name: string;
    nodeCount: number;
    nodes: outputs.GetRancherClusterNodePoolNode[];
    serverType: string;
}

export interface GetRancherClusterNodePoolNode {
    serverId: string;
}

export interface GetServerEsxi {
    datastoreConfigurations: outputs.GetServerEsxiDatastoreConfiguration[];
}

export interface GetServerEsxiDatastoreConfiguration {
    datastoreName: string;
}

export interface GetServerNetrisController {
    hostOs: string;
}

export interface GetServerNetrisSoftgate {
    hostOs: string;
}

export interface GetServerNetworkConfiguration {
    gatewayAddress: string;
    ipBlocksConfigurations: outputs.GetServerNetworkConfigurationIpBlocksConfiguration[];
    privateNetworkConfigurations: outputs.GetServerNetworkConfigurationPrivateNetworkConfiguration[];
    publicNetworkConfigurations: outputs.GetServerNetworkConfigurationPublicNetworkConfiguration[];
}

export interface GetServerNetworkConfigurationIpBlocksConfiguration {
    configurationType: string;
    ipBlocks: outputs.GetServerNetworkConfigurationIpBlocksConfigurationIpBlock[];
}

export interface GetServerNetworkConfigurationIpBlocksConfigurationIpBlock {
    id: string;
    vlanId: number;
}

export interface GetServerNetworkConfigurationPrivateNetworkConfiguration {
    configurationType: string;
    privateNetworks: outputs.GetServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork[];
}

export interface GetServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork {
    dhcp: boolean;
    id: string;
    ips: string[];
    statusDescription: string;
}

export interface GetServerNetworkConfigurationPublicNetworkConfiguration {
    publicNetworks: outputs.GetServerNetworkConfigurationPublicNetworkConfigurationPublicNetwork[];
}

export interface GetServerNetworkConfigurationPublicNetworkConfigurationPublicNetwork {
    id: string;
    ips: string[];
    statusDescription: string;
}

export interface GetServerStorageConfiguration {
    rootPartitions: outputs.GetServerStorageConfigurationRootPartition[];
}

export interface GetServerStorageConfigurationRootPartition {
    raid: string;
    size: number;
}

export interface GetServerTag {
    createdBy: string;
    id: string;
    isBillingTag: boolean;
    name: string;
    value: string;
}

export interface GetStorageNetworkVolume {
    capacityInGb: number;
    createdOn: string;
    deleteRequestedOn: string;
    description: string;
    id: string;
    name: string;
    path: string;
    pathSuffix: string;
    permissions: outputs.GetStorageNetworkVolumePermission[];
    protocol: string;
    status: string;
    tags: outputs.GetStorageNetworkVolumeTag[];
    usedCapacityInGb: number;
}

export interface GetStorageNetworkVolumePermission {
    nfs: outputs.GetStorageNetworkVolumePermissionNf[];
}

export interface GetStorageNetworkVolumePermissionNf {
    allSquashes: string[];
    noSquashes: string[];
    readOnlies: string[];
    readWrites: string[];
    rootSquashes: string[];
}

export interface GetStorageNetworkVolumeTag {
    createdBy: string;
    id: string;
    isBillingTag: boolean;
    name: string;
    value: string;
}

export interface GetTagResourceAssignment {
    resourceName: string;
    value: string;
}

export interface GetTransactionsPaginatedTransaction {
    limit: number;
    offset: number;
    results: outputs.GetTransactionsPaginatedTransactionResult[];
    total: number;
}

export interface GetTransactionsPaginatedTransactionResult {
    amount: number;
    cardPaymentMethodDetails: outputs.GetTransactionsPaginatedTransactionResultCardPaymentMethodDetail[];
    currency: string;
    date: string;
    details: string;
    id: string;
    metadatas: outputs.GetTransactionsPaginatedTransactionResultMetadata[];
    status: string;
}

export interface GetTransactionsPaginatedTransactionResultCardPaymentMethodDetail {
    cardType: string;
    lastFourDigits: string;
}

export interface GetTransactionsPaginatedTransactionResultMetadata {
    invoiceId: string;
    invoiceNumber: string;
    isAutoCharge: boolean;
}

export interface IpBlockTag {
    tagAssignment?: outputs.IpBlockTagTagAssignment;
}

export interface IpBlockTagTagAssignment {
    createdBy: string;
    id: string;
    isBillingTag: boolean;
    name: string;
    value?: string;
}

export interface IpBlockTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface PrivateNetworkMembership {
    ips: string[];
    resourceId: string;
    resourceType: string;
}

export interface PrivateNetworkServer {
    id: string;
    ips: string[];
}

export interface PrivateNetworkTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface PublicNetworkIpBlock {
    publicNetworkIpBlock?: outputs.PublicNetworkIpBlockPublicNetworkIpBlock;
}

export interface PublicNetworkIpBlockPublicNetworkIpBlock {
    id: string;
}

export interface PublicNetworkMembership {
    ips: string[];
    resourceId: string;
    resourceType: string;
}

export interface PublicNetworkTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface RancherClusterConfiguration {
    certificates?: outputs.RancherClusterConfigurationCertificates;
    clusterDomain?: string;
    etcdSnapshotRetention?: number;
    etcdSnapshotScheduleCron?: string;
    nodeTaint?: string;
    tlsSan?: string;
    token?: string;
}

export interface RancherClusterConfigurationCertificates {
    caCertificate?: string;
    certificate?: string;
    certificateKey?: string;
}

export interface RancherClusterMetadata {
    password: string;
    url: string;
    username: string;
}

export interface RancherClusterNodePools {
    name: string;
    nodeCount: number;
    nodes: outputs.RancherClusterNodePoolsNode[];
    serverType: string;
    sshConfig?: outputs.RancherClusterNodePoolsSshConfig;
}

export interface RancherClusterNodePoolsNode {
    serverId: string;
}

export interface RancherClusterNodePoolsSshConfig {
    installDefaultKeys?: boolean;
    keyIds: string[];
    keys: string[];
}

export interface RancherClusterTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface RancherClusterWorkloadConfiguration {
    location: string;
    name?: string;
    serverCount?: number;
    serverType: string;
}

export interface ReservationTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ServerCloudInit {
    userData?: string;
}

export interface ServerEsxi {
    datastoreConfiguration?: outputs.ServerEsxiDatastoreConfiguration;
}

export interface ServerEsxiDatastoreConfiguration {
    datastoreName: string;
}

export interface ServerNetrisController {
    hostOs: string;
    netrisUserPassword: string;
    netrisWebConsoleUrl: string;
}

export interface ServerNetrisSoftgate {
    controllerAddress?: string;
    controllerAuthKey?: string;
    controllerVersion?: string;
    hostOs: string;
}

export interface ServerNetworkConfiguration {
    gatewayAddress: string;
    ipBlocksConfiguration?: outputs.ServerNetworkConfigurationIpBlocksConfiguration;
    privateNetworkConfiguration?: outputs.ServerNetworkConfigurationPrivateNetworkConfiguration;
    publicNetworkConfiguration?: outputs.ServerNetworkConfigurationPublicNetworkConfiguration;
}

export interface ServerNetworkConfigurationIpBlocksConfiguration {
    configurationType: string;
    ipBlocks?: outputs.ServerNetworkConfigurationIpBlocksConfigurationIpBlock[];
}

export interface ServerNetworkConfigurationIpBlocksConfigurationIpBlock {
    serverIpBlock?: outputs.ServerNetworkConfigurationIpBlocksConfigurationIpBlockServerIpBlock;
}

export interface ServerNetworkConfigurationIpBlocksConfigurationIpBlockServerIpBlock {
    id: string;
    vlanId: number;
}

export interface ServerNetworkConfigurationPrivateNetworkConfiguration {
    configurationType: string;
    gatewayAddress: string;
    privateNetworks?: outputs.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork[];
}

export interface ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork {
    serverPrivateNetwork?: outputs.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetwork;
}

export interface ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetwork {
    dhcp: boolean;
    id: string;
    ips: string[];
    statusDescription: string;
}

export interface ServerNetworkConfigurationPublicNetworkConfiguration {
    publicNetworks?: outputs.ServerNetworkConfigurationPublicNetworkConfigurationPublicNetwork[];
}

export interface ServerNetworkConfigurationPublicNetworkConfigurationPublicNetwork {
    serverPublicNetwork?: outputs.ServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkServerPublicNetwork;
}

export interface ServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkServerPublicNetwork {
    id: string;
    ips: string[];
    statusDescription: string;
}

export interface ServerStorageConfiguration {
    rootPartition?: outputs.ServerStorageConfigurationRootPartition;
}

export interface ServerStorageConfigurationRootPartition {
    raid?: string;
    size?: number;
}

export interface ServerTag {
    tagAssignment?: outputs.ServerTagTagAssignment;
}

export interface ServerTagTagAssignment {
    createdBy: string;
    id: string;
    isBillingTag: boolean;
    name: string;
    value?: string;
}

export interface ServerTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface SshKeyTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface StorageNetworkTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface StorageNetworkVolume {
    volume: outputs.StorageNetworkVolumeVolume;
}

export interface StorageNetworkVolumeVolume {
    capacityInGb: number;
    createdOn: string;
    deleteRequestedOn: string;
    description?: string;
    id: string;
    name: string;
    path: string;
    pathSuffix: string;
    permissions: outputs.StorageNetworkVolumeVolumePermission[];
    protocol: string;
    status: string;
    tags?: outputs.StorageNetworkVolumeVolumeTag[];
    usedCapacityInGb: number;
}

export interface StorageNetworkVolumeVolumePermission {
    nfs: outputs.StorageNetworkVolumeVolumePermissionNf[];
}

export interface StorageNetworkVolumeVolumePermissionNf {
    allSquashes: string[];
    noSquashes: string[];
    readOnlies: string[];
    readWrites: string[];
    rootSquashes: string[];
}

export interface StorageNetworkVolumeVolumeTag {
    tagAssignment?: outputs.StorageNetworkVolumeVolumeTagTagAssignment;
}

export interface StorageNetworkVolumeVolumeTagTagAssignment {
    createdBy: string;
    id: string;
    isBillingTag: boolean;
    name: string;
    value?: string;
}

export interface TagResourceAssignment {
    resourceName: string;
    value: string;
}

export interface TagTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

