// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetEventsEvent {
    name?: string;
    timestamp?: string;
    userInfos?: inputs.GetEventsEventUserInfo[];
}

export interface GetEventsEventArgs {
    name?: pulumi.Input<string>;
    timestamp?: pulumi.Input<string>;
    userInfos?: pulumi.Input<pulumi.Input<inputs.GetEventsEventUserInfoArgs>[]>;
}

export interface GetEventsEventUserInfo {
    accountId: string;
    clientId: string;
    username: string;
}

export interface GetEventsEventUserInfoArgs {
    accountId: pulumi.Input<string>;
    clientId: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface IpBlockTag {
    tagAssignment?: pulumi.Input<inputs.IpBlockTagTagAssignment>;
}

export interface IpBlockTagTagAssignment {
    createdBy?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    isBillingTag?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface IpBlockTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface PrivateNetworkMembership {
    ips: pulumi.Input<pulumi.Input<string>[]>;
    resourceId: pulumi.Input<string>;
    resourceType: pulumi.Input<string>;
}

export interface PrivateNetworkServer {
    id: pulumi.Input<string>;
    ips: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PrivateNetworkTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface PublicNetworkIpBlock {
    publicNetworkIpBlock?: pulumi.Input<inputs.PublicNetworkIpBlockPublicNetworkIpBlock>;
}

export interface PublicNetworkIpBlockPublicNetworkIpBlock {
    id: pulumi.Input<string>;
}

export interface PublicNetworkMembership {
    ips: pulumi.Input<pulumi.Input<string>[]>;
    resourceId: pulumi.Input<string>;
    resourceType: pulumi.Input<string>;
}

export interface PublicNetworkTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface RancherClusterConfiguration {
    certificates?: pulumi.Input<inputs.RancherClusterConfigurationCertificates>;
    clusterDomain?: pulumi.Input<string>;
    etcdSnapshotRetention?: pulumi.Input<number>;
    etcdSnapshotScheduleCron?: pulumi.Input<string>;
    nodeTaint?: pulumi.Input<string>;
    tlsSan?: pulumi.Input<string>;
    token?: pulumi.Input<string>;
}

export interface RancherClusterConfigurationCertificates {
    caCertificate?: pulumi.Input<string>;
    certificate?: pulumi.Input<string>;
    certificateKey?: pulumi.Input<string>;
}

export interface RancherClusterMetadata {
    password: pulumi.Input<string>;
    url: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface RancherClusterNodePools {
    name?: pulumi.Input<string>;
    nodeCount?: pulumi.Input<number>;
    nodes?: pulumi.Input<pulumi.Input<inputs.RancherClusterNodePoolsNode>[]>;
    serverType?: pulumi.Input<string>;
    sshConfig?: pulumi.Input<inputs.RancherClusterNodePoolsSshConfig>;
}

export interface RancherClusterNodePoolsNode {
    serverId: pulumi.Input<string>;
}

export interface RancherClusterNodePoolsSshConfig {
    installDefaultKeys?: pulumi.Input<boolean>;
    keyIds?: pulumi.Input<pulumi.Input<string>[]>;
    keys?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface RancherClusterTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface RancherClusterWorkloadConfiguration {
    location: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    serverCount?: pulumi.Input<number>;
    serverType: pulumi.Input<string>;
}

export interface ReservationTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ServerCloudInit {
    userData?: pulumi.Input<string>;
}

export interface ServerEsxi {
    datastoreConfiguration?: pulumi.Input<inputs.ServerEsxiDatastoreConfiguration>;
}

export interface ServerEsxiDatastoreConfiguration {
    datastoreName?: pulumi.Input<string>;
}

export interface ServerNetrisController {
    hostOs: pulumi.Input<string>;
    netrisUserPassword: pulumi.Input<string>;
    netrisWebConsoleUrl: pulumi.Input<string>;
}

export interface ServerNetrisSoftgate {
    controllerAddress?: pulumi.Input<string>;
    controllerAuthKey?: pulumi.Input<string>;
    controllerVersion?: pulumi.Input<string>;
    hostOs?: pulumi.Input<string>;
}

export interface ServerNetworkConfiguration {
    gatewayAddress?: pulumi.Input<string>;
    ipBlocksConfiguration?: pulumi.Input<inputs.ServerNetworkConfigurationIpBlocksConfiguration>;
    privateNetworkConfiguration?: pulumi.Input<inputs.ServerNetworkConfigurationPrivateNetworkConfiguration>;
    publicNetworkConfiguration?: pulumi.Input<inputs.ServerNetworkConfigurationPublicNetworkConfiguration>;
}

export interface ServerNetworkConfigurationIpBlocksConfiguration {
    configurationType?: pulumi.Input<string>;
    ipBlocks?: pulumi.Input<pulumi.Input<inputs.ServerNetworkConfigurationIpBlocksConfigurationIpBlock>[]>;
}

export interface ServerNetworkConfigurationIpBlocksConfigurationIpBlock {
    serverIpBlock?: pulumi.Input<inputs.ServerNetworkConfigurationIpBlocksConfigurationIpBlockServerIpBlock>;
}

export interface ServerNetworkConfigurationIpBlocksConfigurationIpBlockServerIpBlock {
    id: pulumi.Input<string>;
    vlanId?: pulumi.Input<number>;
}

export interface ServerNetworkConfigurationPrivateNetworkConfiguration {
    configurationType?: pulumi.Input<string>;
    gatewayAddress?: pulumi.Input<string>;
    privateNetworks?: pulumi.Input<pulumi.Input<inputs.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork>[]>;
}

export interface ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetwork {
    serverPrivateNetwork?: pulumi.Input<inputs.ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetwork>;
}

export interface ServerNetworkConfigurationPrivateNetworkConfigurationPrivateNetworkServerPrivateNetwork {
    dhcp?: pulumi.Input<boolean>;
    id: pulumi.Input<string>;
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    statusDescription?: pulumi.Input<string>;
}

export interface ServerNetworkConfigurationPublicNetworkConfiguration {
    publicNetworks?: pulumi.Input<pulumi.Input<inputs.ServerNetworkConfigurationPublicNetworkConfigurationPublicNetwork>[]>;
}

export interface ServerNetworkConfigurationPublicNetworkConfigurationPublicNetwork {
    serverPublicNetwork?: pulumi.Input<inputs.ServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkServerPublicNetwork>;
}

export interface ServerNetworkConfigurationPublicNetworkConfigurationPublicNetworkServerPublicNetwork {
    id: pulumi.Input<string>;
    ips: pulumi.Input<pulumi.Input<string>[]>;
    statusDescription?: pulumi.Input<string>;
}

export interface ServerStorageConfiguration {
    rootPartition?: pulumi.Input<inputs.ServerStorageConfigurationRootPartition>;
}

export interface ServerStorageConfigurationRootPartition {
    raid?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
}

export interface ServerTag {
    tagAssignment?: pulumi.Input<inputs.ServerTagTagAssignment>;
}

export interface ServerTagTagAssignment {
    createdBy?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    isBillingTag?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ServerTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface SshKeyTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface StorageNetworkTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface StorageNetworkVolume {
    volume: pulumi.Input<inputs.StorageNetworkVolumeVolume>;
}

export interface StorageNetworkVolumeVolume {
    capacityInGb: pulumi.Input<number>;
    createdOn?: pulumi.Input<string>;
    deleteRequestedOn?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    pathSuffix?: pulumi.Input<string>;
    permissions?: pulumi.Input<pulumi.Input<inputs.StorageNetworkVolumeVolumePermission>[]>;
    protocol?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.StorageNetworkVolumeVolumeTag>[]>;
    usedCapacityInGb?: pulumi.Input<number>;
}

export interface StorageNetworkVolumeVolumePermission {
    nfs: pulumi.Input<pulumi.Input<inputs.StorageNetworkVolumeVolumePermissionNf>[]>;
}

export interface StorageNetworkVolumeVolumePermissionNf {
    allSquashes: pulumi.Input<pulumi.Input<string>[]>;
    noSquashes: pulumi.Input<pulumi.Input<string>[]>;
    readOnlies: pulumi.Input<pulumi.Input<string>[]>;
    readWrites: pulumi.Input<pulumi.Input<string>[]>;
    rootSquashes: pulumi.Input<pulumi.Input<string>[]>;
}

export interface StorageNetworkVolumeVolumeTag {
    tagAssignment?: pulumi.Input<inputs.StorageNetworkVolumeVolumeTagTagAssignment>;
}

export interface StorageNetworkVolumeVolumeTagTagAssignment {
    createdBy?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    isBillingTag?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface TagResourceAssignment {
    resourceName: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface TagTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}
