// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Server extends pulumi.CustomResource {
    /**
     * Get an existing Server resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerState, opts?: pulumi.CustomResourceOptions): Server {
        return new Server(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pnap:index/server:Server';

    /**
     * Returns true if the given object is an instance of Server.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Server {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Server.__pulumiType;
    }

    public readonly action!: pulumi.Output<string | undefined>;
    public readonly cloudInit!: pulumi.Output<outputs.ServerCloudInit | undefined>;
    public /*out*/ readonly clusterId!: pulumi.Output<string>;
    public /*out*/ readonly coresPerCpu!: pulumi.Output<number>;
    public /*out*/ readonly cpu!: pulumi.Output<string>;
    public /*out*/ readonly cpuCount!: pulumi.Output<number>;
    public /*out*/ readonly cpuFrequencyInGhz!: pulumi.Output<number>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly esxi!: pulumi.Output<outputs.ServerEsxi | undefined>;
    public readonly force!: pulumi.Output<boolean | undefined>;
    public readonly hostname!: pulumi.Output<string>;
    public readonly installDefaultSshKeys!: pulumi.Output<boolean | undefined>;
    public readonly installOsToRam!: pulumi.Output<boolean>;
    public readonly location!: pulumi.Output<string>;
    public readonly managementAccessAllowedIps!: pulumi.Output<string[]>;
    public /*out*/ readonly managementUiUrl!: pulumi.Output<string>;
    public /*out*/ readonly netrisControllers!: pulumi.Output<outputs.ServerNetrisController[]>;
    public readonly netrisSoftgate!: pulumi.Output<outputs.ServerNetrisSoftgate | undefined>;
    public readonly networkConfiguration!: pulumi.Output<outputs.ServerNetworkConfiguration | undefined>;
    public readonly networkType!: pulumi.Output<string>;
    public readonly os!: pulumi.Output<string>;
    public /*out*/ readonly password!: pulumi.Output<string>;
    public readonly pricingModel!: pulumi.Output<string>;
    public /*out*/ readonly privateIpAddresses!: pulumi.Output<string[]>;
    public /*out*/ readonly provisionedOn!: pulumi.Output<string>;
    public /*out*/ readonly publicIpAddresses!: pulumi.Output<string[]>;
    public /*out*/ readonly ram!: pulumi.Output<string>;
    public readonly rdpAllowedIps!: pulumi.Output<string[]>;
    public readonly reservationId!: pulumi.Output<string>;
    public /*out*/ readonly rootPassword!: pulumi.Output<string>;
    public readonly sshKeyIds!: pulumi.Output<string[] | undefined>;
    public readonly sshKeys!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public /*out*/ readonly storage!: pulumi.Output<string>;
    public readonly storageConfiguration!: pulumi.Output<outputs.ServerStorageConfiguration | undefined>;
    public /*out*/ readonly supersededBy!: pulumi.Output<string>;
    public /*out*/ readonly supersedes!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.ServerTag[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ServerTimeouts | undefined>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Server resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerArgs | ServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["cloudInit"] = state ? state.cloudInit : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["coresPerCpu"] = state ? state.coresPerCpu : undefined;
            resourceInputs["cpu"] = state ? state.cpu : undefined;
            resourceInputs["cpuCount"] = state ? state.cpuCount : undefined;
            resourceInputs["cpuFrequencyInGhz"] = state ? state.cpuFrequencyInGhz : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["esxi"] = state ? state.esxi : undefined;
            resourceInputs["force"] = state ? state.force : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["installDefaultSshKeys"] = state ? state.installDefaultSshKeys : undefined;
            resourceInputs["installOsToRam"] = state ? state.installOsToRam : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["managementAccessAllowedIps"] = state ? state.managementAccessAllowedIps : undefined;
            resourceInputs["managementUiUrl"] = state ? state.managementUiUrl : undefined;
            resourceInputs["netrisControllers"] = state ? state.netrisControllers : undefined;
            resourceInputs["netrisSoftgate"] = state ? state.netrisSoftgate : undefined;
            resourceInputs["networkConfiguration"] = state ? state.networkConfiguration : undefined;
            resourceInputs["networkType"] = state ? state.networkType : undefined;
            resourceInputs["os"] = state ? state.os : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["pricingModel"] = state ? state.pricingModel : undefined;
            resourceInputs["privateIpAddresses"] = state ? state.privateIpAddresses : undefined;
            resourceInputs["provisionedOn"] = state ? state.provisionedOn : undefined;
            resourceInputs["publicIpAddresses"] = state ? state.publicIpAddresses : undefined;
            resourceInputs["ram"] = state ? state.ram : undefined;
            resourceInputs["rdpAllowedIps"] = state ? state.rdpAllowedIps : undefined;
            resourceInputs["reservationId"] = state ? state.reservationId : undefined;
            resourceInputs["rootPassword"] = state ? state.rootPassword : undefined;
            resourceInputs["sshKeyIds"] = state ? state.sshKeyIds : undefined;
            resourceInputs["sshKeys"] = state ? state.sshKeys : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storage"] = state ? state.storage : undefined;
            resourceInputs["storageConfiguration"] = state ? state.storageConfiguration : undefined;
            resourceInputs["supersededBy"] = state ? state.supersededBy : undefined;
            resourceInputs["supersedes"] = state ? state.supersedes : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ServerArgs | undefined;
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.os === undefined) && !opts.urn) {
                throw new Error("Missing required property 'os'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["cloudInit"] = args ? args.cloudInit : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["esxi"] = args ? args.esxi : undefined;
            resourceInputs["force"] = args ? args.force : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["installDefaultSshKeys"] = args ? args.installDefaultSshKeys : undefined;
            resourceInputs["installOsToRam"] = args ? args.installOsToRam : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["managementAccessAllowedIps"] = args ? args.managementAccessAllowedIps : undefined;
            resourceInputs["netrisSoftgate"] = args ? args.netrisSoftgate : undefined;
            resourceInputs["networkConfiguration"] = args ? args.networkConfiguration : undefined;
            resourceInputs["networkType"] = args ? args.networkType : undefined;
            resourceInputs["os"] = args ? args.os : undefined;
            resourceInputs["pricingModel"] = args ? args.pricingModel : undefined;
            resourceInputs["rdpAllowedIps"] = args ? args.rdpAllowedIps : undefined;
            resourceInputs["reservationId"] = args ? args.reservationId : undefined;
            resourceInputs["sshKeyIds"] = args ? args.sshKeyIds : undefined;
            resourceInputs["sshKeys"] = args ? args.sshKeys : undefined;
            resourceInputs["storageConfiguration"] = args ? args.storageConfiguration : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["clusterId"] = undefined /*out*/;
            resourceInputs["coresPerCpu"] = undefined /*out*/;
            resourceInputs["cpu"] = undefined /*out*/;
            resourceInputs["cpuCount"] = undefined /*out*/;
            resourceInputs["cpuFrequencyInGhz"] = undefined /*out*/;
            resourceInputs["managementUiUrl"] = undefined /*out*/;
            resourceInputs["netrisControllers"] = undefined /*out*/;
            resourceInputs["password"] = undefined /*out*/;
            resourceInputs["privateIpAddresses"] = undefined /*out*/;
            resourceInputs["provisionedOn"] = undefined /*out*/;
            resourceInputs["publicIpAddresses"] = undefined /*out*/;
            resourceInputs["ram"] = undefined /*out*/;
            resourceInputs["rootPassword"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["storage"] = undefined /*out*/;
            resourceInputs["supersededBy"] = undefined /*out*/;
            resourceInputs["supersedes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Server.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Server resources.
 */
export interface ServerState {
    action?: pulumi.Input<string>;
    cloudInit?: pulumi.Input<inputs.ServerCloudInit>;
    clusterId?: pulumi.Input<string>;
    coresPerCpu?: pulumi.Input<number>;
    cpu?: pulumi.Input<string>;
    cpuCount?: pulumi.Input<number>;
    cpuFrequencyInGhz?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    esxi?: pulumi.Input<inputs.ServerEsxi>;
    force?: pulumi.Input<boolean>;
    hostname?: pulumi.Input<string>;
    installDefaultSshKeys?: pulumi.Input<boolean>;
    installOsToRam?: pulumi.Input<boolean>;
    location?: pulumi.Input<string>;
    managementAccessAllowedIps?: pulumi.Input<pulumi.Input<string>[]>;
    managementUiUrl?: pulumi.Input<string>;
    netrisControllers?: pulumi.Input<pulumi.Input<inputs.ServerNetrisController>[]>;
    netrisSoftgate?: pulumi.Input<inputs.ServerNetrisSoftgate>;
    networkConfiguration?: pulumi.Input<inputs.ServerNetworkConfiguration>;
    networkType?: pulumi.Input<string>;
    os?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    pricingModel?: pulumi.Input<string>;
    privateIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    provisionedOn?: pulumi.Input<string>;
    publicIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    ram?: pulumi.Input<string>;
    rdpAllowedIps?: pulumi.Input<pulumi.Input<string>[]>;
    reservationId?: pulumi.Input<string>;
    rootPassword?: pulumi.Input<string>;
    sshKeyIds?: pulumi.Input<pulumi.Input<string>[]>;
    sshKeys?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    storage?: pulumi.Input<string>;
    storageConfiguration?: pulumi.Input<inputs.ServerStorageConfiguration>;
    supersededBy?: pulumi.Input<string>;
    supersedes?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.ServerTag>[]>;
    timeouts?: pulumi.Input<inputs.ServerTimeouts>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Server resource.
 */
export interface ServerArgs {
    action?: pulumi.Input<string>;
    cloudInit?: pulumi.Input<inputs.ServerCloudInit>;
    description?: pulumi.Input<string>;
    esxi?: pulumi.Input<inputs.ServerEsxi>;
    force?: pulumi.Input<boolean>;
    hostname: pulumi.Input<string>;
    installDefaultSshKeys?: pulumi.Input<boolean>;
    installOsToRam?: pulumi.Input<boolean>;
    location: pulumi.Input<string>;
    managementAccessAllowedIps?: pulumi.Input<pulumi.Input<string>[]>;
    netrisSoftgate?: pulumi.Input<inputs.ServerNetrisSoftgate>;
    networkConfiguration?: pulumi.Input<inputs.ServerNetworkConfiguration>;
    networkType?: pulumi.Input<string>;
    os: pulumi.Input<string>;
    pricingModel?: pulumi.Input<string>;
    rdpAllowedIps?: pulumi.Input<pulumi.Input<string>[]>;
    reservationId?: pulumi.Input<string>;
    sshKeyIds?: pulumi.Input<pulumi.Input<string>[]>;
    sshKeys?: pulumi.Input<pulumi.Input<string>[]>;
    storageConfiguration?: pulumi.Input<inputs.ServerStorageConfiguration>;
    tags?: pulumi.Input<pulumi.Input<inputs.ServerTag>[]>;
    timeouts?: pulumi.Input<inputs.ServerTimeouts>;
    type: pulumi.Input<string>;
}
