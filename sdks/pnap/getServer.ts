// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getServer(args?: GetServerArgs, opts?: pulumi.InvokeOptions): Promise<GetServerResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pnap:index/getServer:getServer", {
        "hostname": args.hostname,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getServer.
 */
export interface GetServerArgs {
    hostname?: string;
    id?: string;
}

/**
 * A collection of values returned by getServer.
 */
export interface GetServerResult {
    readonly esxis: outputs.GetServerEsxi[];
    readonly hostname: string;
    readonly id: string;
    readonly location: string;
    readonly netrisControllers: outputs.GetServerNetrisController[];
    readonly netrisSoftgates: outputs.GetServerNetrisSoftgate[];
    readonly networkConfigurations: outputs.GetServerNetworkConfiguration[];
    readonly networkType: string;
    readonly os: string;
    readonly primaryIpAddress: string;
    readonly privateIpAddresses: string[];
    readonly publicIpAddresses: string[];
    readonly status: string;
    readonly storageConfigurations: outputs.GetServerStorageConfiguration[];
    readonly supersededBy: string;
    readonly supersedes: string;
    readonly tags: outputs.GetServerTag[];
    readonly type: string;
}
export function getServerOutput(args?: GetServerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServerResult> {
    return pulumi.output(args).apply((a: any) => getServer(a, opts))
}

/**
 * A collection of arguments for invoking getServer.
 */
export interface GetServerOutputArgs {
    hostname?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
}
