// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetEventsArgs, GetEventsResult, GetEventsOutputArgs } from "./getEvents";
export const getEvents: typeof import("./getEvents").getEvents = null as any;
export const getEventsOutput: typeof import("./getEvents").getEventsOutput = null as any;
utilities.lazyLoad(exports, ["getEvents","getEventsOutput"], () => require("./getEvents"));

export { GetInvoicesArgs, GetInvoicesResult, GetInvoicesOutputArgs } from "./getInvoices";
export const getInvoices: typeof import("./getInvoices").getInvoices = null as any;
export const getInvoicesOutput: typeof import("./getInvoices").getInvoicesOutput = null as any;
utilities.lazyLoad(exports, ["getInvoices","getInvoicesOutput"], () => require("./getInvoices"));

export { GetIpBlockArgs, GetIpBlockResult, GetIpBlockOutputArgs } from "./getIpBlock";
export const getIpBlock: typeof import("./getIpBlock").getIpBlock = null as any;
export const getIpBlockOutput: typeof import("./getIpBlock").getIpBlockOutput = null as any;
utilities.lazyLoad(exports, ["getIpBlock","getIpBlockOutput"], () => require("./getIpBlock"));

export { GetLocationsArgs, GetLocationsResult, GetLocationsOutputArgs } from "./getLocations";
export const getLocations: typeof import("./getLocations").getLocations = null as any;
export const getLocationsOutput: typeof import("./getLocations").getLocationsOutput = null as any;
utilities.lazyLoad(exports, ["getLocations","getLocationsOutput"], () => require("./getLocations"));

export { GetPrivateNetworkArgs, GetPrivateNetworkResult, GetPrivateNetworkOutputArgs } from "./getPrivateNetwork";
export const getPrivateNetwork: typeof import("./getPrivateNetwork").getPrivateNetwork = null as any;
export const getPrivateNetworkOutput: typeof import("./getPrivateNetwork").getPrivateNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateNetwork","getPrivateNetworkOutput"], () => require("./getPrivateNetwork"));

export { GetProductAvailabilityArgs, GetProductAvailabilityResult, GetProductAvailabilityOutputArgs } from "./getProductAvailability";
export const getProductAvailability: typeof import("./getProductAvailability").getProductAvailability = null as any;
export const getProductAvailabilityOutput: typeof import("./getProductAvailability").getProductAvailabilityOutput = null as any;
utilities.lazyLoad(exports, ["getProductAvailability","getProductAvailabilityOutput"], () => require("./getProductAvailability"));

export { GetProductsArgs, GetProductsResult, GetProductsOutputArgs } from "./getProducts";
export const getProducts: typeof import("./getProducts").getProducts = null as any;
export const getProductsOutput: typeof import("./getProducts").getProductsOutput = null as any;
utilities.lazyLoad(exports, ["getProducts","getProductsOutput"], () => require("./getProducts"));

export { GetPublicNetworkArgs, GetPublicNetworkResult, GetPublicNetworkOutputArgs } from "./getPublicNetwork";
export const getPublicNetwork: typeof import("./getPublicNetwork").getPublicNetwork = null as any;
export const getPublicNetworkOutput: typeof import("./getPublicNetwork").getPublicNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getPublicNetwork","getPublicNetworkOutput"], () => require("./getPublicNetwork"));

export { GetQuotaArgs, GetQuotaResult, GetQuotaOutputArgs } from "./getQuota";
export const getQuota: typeof import("./getQuota").getQuota = null as any;
export const getQuotaOutput: typeof import("./getQuota").getQuotaOutput = null as any;
utilities.lazyLoad(exports, ["getQuota","getQuotaOutput"], () => require("./getQuota"));

export { GetRancherClusterArgs, GetRancherClusterResult, GetRancherClusterOutputArgs } from "./getRancherCluster";
export const getRancherCluster: typeof import("./getRancherCluster").getRancherCluster = null as any;
export const getRancherClusterOutput: typeof import("./getRancherCluster").getRancherClusterOutput = null as any;
utilities.lazyLoad(exports, ["getRancherCluster","getRancherClusterOutput"], () => require("./getRancherCluster"));

export { GetReservationArgs, GetReservationResult, GetReservationOutputArgs } from "./getReservation";
export const getReservation: typeof import("./getReservation").getReservation = null as any;
export const getReservationOutput: typeof import("./getReservation").getReservationOutput = null as any;
utilities.lazyLoad(exports, ["getReservation","getReservationOutput"], () => require("./getReservation"));

export { GetServerArgs, GetServerResult, GetServerOutputArgs } from "./getServer";
export const getServer: typeof import("./getServer").getServer = null as any;
export const getServerOutput: typeof import("./getServer").getServerOutput = null as any;
utilities.lazyLoad(exports, ["getServer","getServerOutput"], () => require("./getServer"));

export { GetSshKeyArgs, GetSshKeyResult, GetSshKeyOutputArgs } from "./getSshKey";
export const getSshKey: typeof import("./getSshKey").getSshKey = null as any;
export const getSshKeyOutput: typeof import("./getSshKey").getSshKeyOutput = null as any;
utilities.lazyLoad(exports, ["getSshKey","getSshKeyOutput"], () => require("./getSshKey"));

export { GetStorageNetworkArgs, GetStorageNetworkResult, GetStorageNetworkOutputArgs } from "./getStorageNetwork";
export const getStorageNetwork: typeof import("./getStorageNetwork").getStorageNetwork = null as any;
export const getStorageNetworkOutput: typeof import("./getStorageNetwork").getStorageNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getStorageNetwork","getStorageNetworkOutput"], () => require("./getStorageNetwork"));

export { GetTagArgs, GetTagResult, GetTagOutputArgs } from "./getTag";
export const getTag: typeof import("./getTag").getTag = null as any;
export const getTagOutput: typeof import("./getTag").getTagOutput = null as any;
utilities.lazyLoad(exports, ["getTag","getTagOutput"], () => require("./getTag"));

export { GetTransactionsArgs, GetTransactionsResult, GetTransactionsOutputArgs } from "./getTransactions";
export const getTransactions: typeof import("./getTransactions").getTransactions = null as any;
export const getTransactionsOutput: typeof import("./getTransactions").getTransactionsOutput = null as any;
utilities.lazyLoad(exports, ["getTransactions","getTransactionsOutput"], () => require("./getTransactions"));

export { IpBlockArgs, IpBlockState } from "./ipBlock";
export type IpBlock = import("./ipBlock").IpBlock;
export const IpBlock: typeof import("./ipBlock").IpBlock = null as any;
utilities.lazyLoad(exports, ["IpBlock"], () => require("./ipBlock"));

export { PrivateNetworkArgs, PrivateNetworkState } from "./privateNetwork";
export type PrivateNetwork = import("./privateNetwork").PrivateNetwork;
export const PrivateNetwork: typeof import("./privateNetwork").PrivateNetwork = null as any;
utilities.lazyLoad(exports, ["PrivateNetwork"], () => require("./privateNetwork"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { PublicNetworkArgs, PublicNetworkState } from "./publicNetwork";
export type PublicNetwork = import("./publicNetwork").PublicNetwork;
export const PublicNetwork: typeof import("./publicNetwork").PublicNetwork = null as any;
utilities.lazyLoad(exports, ["PublicNetwork"], () => require("./publicNetwork"));

export { RancherClusterArgs, RancherClusterState } from "./rancherCluster";
export type RancherCluster = import("./rancherCluster").RancherCluster;
export const RancherCluster: typeof import("./rancherCluster").RancherCluster = null as any;
utilities.lazyLoad(exports, ["RancherCluster"], () => require("./rancherCluster"));

export { ReservationArgs, ReservationState } from "./reservation";
export type Reservation = import("./reservation").Reservation;
export const Reservation: typeof import("./reservation").Reservation = null as any;
utilities.lazyLoad(exports, ["Reservation"], () => require("./reservation"));

export { ServerArgs, ServerState } from "./server";
export type Server = import("./server").Server;
export const Server: typeof import("./server").Server = null as any;
utilities.lazyLoad(exports, ["Server"], () => require("./server"));

export { SshKeyArgs, SshKeyState } from "./sshKey";
export type SshKey = import("./sshKey").SshKey;
export const SshKey: typeof import("./sshKey").SshKey = null as any;
utilities.lazyLoad(exports, ["SshKey"], () => require("./sshKey"));

export { StorageNetworkArgs, StorageNetworkState } from "./storageNetwork";
export type StorageNetwork = import("./storageNetwork").StorageNetwork;
export const StorageNetwork: typeof import("./storageNetwork").StorageNetwork = null as any;
utilities.lazyLoad(exports, ["StorageNetwork"], () => require("./storageNetwork"));

export { TagArgs, TagState } from "./tag";
export type Tag = import("./tag").Tag;
export const Tag: typeof import("./tag").Tag = null as any;
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "pnap:index/ipBlock:IpBlock":
                return new IpBlock(name, <any>undefined, { urn })
            case "pnap:index/privateNetwork:PrivateNetwork":
                return new PrivateNetwork(name, <any>undefined, { urn })
            case "pnap:index/publicNetwork:PublicNetwork":
                return new PublicNetwork(name, <any>undefined, { urn })
            case "pnap:index/rancherCluster:RancherCluster":
                return new RancherCluster(name, <any>undefined, { urn })
            case "pnap:index/reservation:Reservation":
                return new Reservation(name, <any>undefined, { urn })
            case "pnap:index/server:Server":
                return new Server(name, <any>undefined, { urn })
            case "pnap:index/sshKey:SshKey":
                return new SshKey(name, <any>undefined, { urn })
            case "pnap:index/storageNetwork:StorageNetwork":
                return new StorageNetwork(name, <any>undefined, { urn })
            case "pnap:index/tag:Tag":
                return new Tag(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("pnap", "index/ipBlock", _module)
pulumi.runtime.registerResourceModule("pnap", "index/privateNetwork", _module)
pulumi.runtime.registerResourceModule("pnap", "index/publicNetwork", _module)
pulumi.runtime.registerResourceModule("pnap", "index/rancherCluster", _module)
pulumi.runtime.registerResourceModule("pnap", "index/reservation", _module)
pulumi.runtime.registerResourceModule("pnap", "index/server", _module)
pulumi.runtime.registerResourceModule("pnap", "index/sshKey", _module)
pulumi.runtime.registerResourceModule("pnap", "index/storageNetwork", _module)
pulumi.runtime.registerResourceModule("pnap", "index/tag", _module)
pulumi.runtime.registerResourcePackage("pnap", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:pnap") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
