// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IpBlock extends pulumi.CustomResource {
    /**
     * Get an existing IpBlock resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpBlockState, opts?: pulumi.CustomResourceOptions): IpBlock {
        return new IpBlock(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pnap:index/ipBlock:IpBlock';

    /**
     * Returns true if the given object is an instance of IpBlock.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IpBlock {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpBlock.__pulumiType;
    }

    public /*out*/ readonly assignedResourceId!: pulumi.Output<string>;
    public /*out*/ readonly assignedResourceType!: pulumi.Output<string>;
    public /*out*/ readonly cidr!: pulumi.Output<string>;
    public readonly cidrBlockSize!: pulumi.Output<string>;
    public /*out*/ readonly createdOn!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly isBringYourOwn!: pulumi.Output<boolean>;
    public readonly location!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.IpBlockTag[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.IpBlockTimeouts | undefined>;

    /**
     * Create a IpBlock resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IpBlockArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpBlockArgs | IpBlockState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpBlockState | undefined;
            resourceInputs["assignedResourceId"] = state ? state.assignedResourceId : undefined;
            resourceInputs["assignedResourceType"] = state ? state.assignedResourceType : undefined;
            resourceInputs["cidr"] = state ? state.cidr : undefined;
            resourceInputs["cidrBlockSize"] = state ? state.cidrBlockSize : undefined;
            resourceInputs["createdOn"] = state ? state.createdOn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["isBringYourOwn"] = state ? state.isBringYourOwn : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as IpBlockArgs | undefined;
            if ((!args || args.cidrBlockSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cidrBlockSize'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["cidrBlockSize"] = args ? args.cidrBlockSize : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["assignedResourceId"] = undefined /*out*/;
            resourceInputs["assignedResourceType"] = undefined /*out*/;
            resourceInputs["cidr"] = undefined /*out*/;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["isBringYourOwn"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpBlock.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IpBlock resources.
 */
export interface IpBlockState {
    assignedResourceId?: pulumi.Input<string>;
    assignedResourceType?: pulumi.Input<string>;
    cidr?: pulumi.Input<string>;
    cidrBlockSize?: pulumi.Input<string>;
    createdOn?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    isBringYourOwn?: pulumi.Input<boolean>;
    location?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.IpBlockTag>[]>;
    timeouts?: pulumi.Input<inputs.IpBlockTimeouts>;
}

/**
 * The set of arguments for constructing a IpBlock resource.
 */
export interface IpBlockArgs {
    cidrBlockSize: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    location: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.IpBlockTag>[]>;
    timeouts?: pulumi.Input<inputs.IpBlockTimeouts>;
}
