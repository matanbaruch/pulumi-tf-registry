// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getPermission(args: GetPermissionArgs, opts?: pulumi.InvokeOptions): Promise<GetPermissionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("buddy:index/getPermission:getPermission", {
        "domain": args.domain,
        "name": args.name,
        "permissionId": args.permissionId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPermission.
 */
export interface GetPermissionArgs {
    domain: string;
    name?: string;
    permissionId?: number;
}

/**
 * A collection of values returned by getPermission.
 */
export interface GetPermissionResult {
    readonly description: string;
    readonly domain: string;
    readonly htmlUrl: string;
    readonly id: string;
    readonly name: string;
    readonly permissionId: number;
    readonly pipelineAccessLevel: string;
    readonly projectTeamAccessLevel: string;
    readonly repositoryAccessLevel: string;
    readonly sandboxAccessLevel: string;
    readonly type: string;
}
export function getPermissionOutput(args: GetPermissionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPermissionResult> {
    return pulumi.output(args).apply((a: any) => getPermission(a, opts))
}

/**
 * A collection of arguments for invoking getPermission.
 */
export interface GetPermissionOutputArgs {
    domain: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    permissionId?: pulumi.Input<number>;
}
