// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Variable extends pulumi.CustomResource {
    /**
     * Get an existing Variable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VariableState, opts?: pulumi.CustomResourceOptions): Variable {
        return new Variable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'buddy:index/variable:Variable';

    /**
     * Returns true if the given object is an instance of Variable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Variable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Variable.__pulumiType;
    }

    /**
     * The variable's action ID
     */
    public readonly actionId!: pulumi.Output<number | undefined>;
    /**
     * The variable's description
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The workspace's URL handle
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * Is the variable's value encrypted
     */
    public readonly encrypted!: pulumi.Output<boolean>;
    /**
     * The variable's name
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * The variable's pipeline ID
     */
    public readonly pipelineId!: pulumi.Output<number | undefined>;
    /**
     * The variable's project name
     */
    public readonly projectName!: pulumi.Output<string | undefined>;
    /**
     * Is the variable's value changeable
     */
    public readonly settable!: pulumi.Output<boolean>;
    /**
     * The variable's value
     */
    public readonly value!: pulumi.Output<string>;
    /**
     * The variable's processed value. Encrypted if **encrypted** == true
     */
    public /*out*/ readonly valueProcessed!: pulumi.Output<string>;
    /**
     * The variable's ID
     */
    public /*out*/ readonly variableId!: pulumi.Output<number>;

    /**
     * Create a Variable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VariableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VariableArgs | VariableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VariableState | undefined;
            resourceInputs["actionId"] = state ? state.actionId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["encrypted"] = state ? state.encrypted : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["pipelineId"] = state ? state.pipelineId : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["settable"] = state ? state.settable : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
            resourceInputs["valueProcessed"] = state ? state.valueProcessed : undefined;
            resourceInputs["variableId"] = state ? state.variableId : undefined;
        } else {
            const args = argsOrState as VariableArgs | undefined;
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["actionId"] = args ? args.actionId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["encrypted"] = args ? args.encrypted : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["pipelineId"] = args ? args.pipelineId : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["settable"] = args ? args.settable : undefined;
            resourceInputs["value"] = args?.value ? pulumi.secret(args.value) : undefined;
            resourceInputs["valueProcessed"] = undefined /*out*/;
            resourceInputs["variableId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["value", "valueProcessed"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Variable.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Variable resources.
 */
export interface VariableState {
    /**
     * The variable's action ID
     */
    actionId?: pulumi.Input<number>;
    /**
     * The variable's description
     */
    description?: pulumi.Input<string>;
    /**
     * The workspace's URL handle
     */
    domain?: pulumi.Input<string>;
    /**
     * Is the variable's value encrypted
     */
    encrypted?: pulumi.Input<boolean>;
    /**
     * The variable's name
     */
    key?: pulumi.Input<string>;
    /**
     * The variable's pipeline ID
     */
    pipelineId?: pulumi.Input<number>;
    /**
     * The variable's project name
     */
    projectName?: pulumi.Input<string>;
    /**
     * Is the variable's value changeable
     */
    settable?: pulumi.Input<boolean>;
    /**
     * The variable's value
     */
    value?: pulumi.Input<string>;
    /**
     * The variable's processed value. Encrypted if **encrypted** == true
     */
    valueProcessed?: pulumi.Input<string>;
    /**
     * The variable's ID
     */
    variableId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Variable resource.
 */
export interface VariableArgs {
    /**
     * The variable's action ID
     */
    actionId?: pulumi.Input<number>;
    /**
     * The variable's description
     */
    description?: pulumi.Input<string>;
    /**
     * The workspace's URL handle
     */
    domain: pulumi.Input<string>;
    /**
     * Is the variable's value encrypted
     */
    encrypted?: pulumi.Input<boolean>;
    /**
     * The variable's name
     */
    key: pulumi.Input<string>;
    /**
     * The variable's pipeline ID
     */
    pipelineId?: pulumi.Input<number>;
    /**
     * The variable's project name
     */
    projectName?: pulumi.Input<string>;
    /**
     * Is the variable's value changeable
     */
    settable?: pulumi.Input<boolean>;
    /**
     * The variable's value
     */
    value: pulumi.Input<string>;
}
