// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getProjectGroups(args: GetProjectGroupsArgs, opts?: pulumi.InvokeOptions): Promise<GetProjectGroupsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("buddy:index/getProjectGroups:getProjectGroups", {
        "domain": args.domain,
        "nameRegex": args.nameRegex,
        "projectName": args.projectName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getProjectGroups.
 */
export interface GetProjectGroupsArgs {
    domain: string;
    nameRegex?: string;
    projectName: string;
}

/**
 * A collection of values returned by getProjectGroups.
 */
export interface GetProjectGroupsResult {
    readonly domain: string;
    readonly groups: outputs.GetProjectGroupsGroup[];
    readonly id: string;
    readonly nameRegex?: string;
    readonly projectName: string;
}
export function getProjectGroupsOutput(args: GetProjectGroupsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetProjectGroupsResult> {
    return pulumi.output(args).apply((a: any) => getProjectGroups(a, opts))
}

/**
 * A collection of arguments for invoking getProjectGroups.
 */
export interface GetProjectGroupsOutputArgs {
    domain: pulumi.Input<string>;
    nameRegex?: pulumi.Input<string>;
    projectName: pulumi.Input<string>;
}
