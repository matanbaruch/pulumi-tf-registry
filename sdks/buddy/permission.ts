// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Permission extends pulumi.CustomResource {
    /**
     * Get an existing Permission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PermissionState, opts?: pulumi.CustomResourceOptions): Permission {
        return new Permission(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'buddy:index/permission:Permission';

    /**
     * Returns true if the given object is an instance of Permission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Permission {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Permission.__pulumiType;
    }

    /**
     * The permission's description
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The workspace's URL handle
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * The permission's URL
     */
    public /*out*/ readonly htmlUrl!: pulumi.Output<string>;
    /**
     * The permission's name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The permission's ID
     */
    public /*out*/ readonly permissionId!: pulumi.Output<number>;
    /**
     * The permission's access level to pipelines. Allowed: `DENIED`, `READ_ONLY`, `RUN_ONLY`, `READ_WRITE`
     */
    public readonly pipelineAccessLevel!: pulumi.Output<string>;
    /**
     * The permission's access level to team. Allowed: `READ_ONLY`, `MANAGE`
     */
    public readonly projectTeamAccessLevel!: pulumi.Output<string>;
    /**
     * The permission's access level to repository. Allowed: `READ_ONLY`, `READ_WRITE`, `MANAGE`
     */
    public readonly repositoryAccessLevel!: pulumi.Output<string>;
    /**
     * The permission's access level to sandboxes. Allowed: `DENIED`, `READ_ONLY`, `READ_WRITE`
     */
    public readonly sandboxAccessLevel!: pulumi.Output<string>;
    /**
     * The permission's type
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a Permission resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PermissionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PermissionArgs | PermissionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PermissionState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["htmlUrl"] = state ? state.htmlUrl : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["permissionId"] = state ? state.permissionId : undefined;
            resourceInputs["pipelineAccessLevel"] = state ? state.pipelineAccessLevel : undefined;
            resourceInputs["projectTeamAccessLevel"] = state ? state.projectTeamAccessLevel : undefined;
            resourceInputs["repositoryAccessLevel"] = state ? state.repositoryAccessLevel : undefined;
            resourceInputs["sandboxAccessLevel"] = state ? state.sandboxAccessLevel : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as PermissionArgs | undefined;
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.pipelineAccessLevel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pipelineAccessLevel'");
            }
            if ((!args || args.repositoryAccessLevel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repositoryAccessLevel'");
            }
            if ((!args || args.sandboxAccessLevel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sandboxAccessLevel'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pipelineAccessLevel"] = args ? args.pipelineAccessLevel : undefined;
            resourceInputs["projectTeamAccessLevel"] = args ? args.projectTeamAccessLevel : undefined;
            resourceInputs["repositoryAccessLevel"] = args ? args.repositoryAccessLevel : undefined;
            resourceInputs["sandboxAccessLevel"] = args ? args.sandboxAccessLevel : undefined;
            resourceInputs["htmlUrl"] = undefined /*out*/;
            resourceInputs["permissionId"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Permission.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Permission resources.
 */
export interface PermissionState {
    /**
     * The permission's description
     */
    description?: pulumi.Input<string>;
    /**
     * The workspace's URL handle
     */
    domain?: pulumi.Input<string>;
    /**
     * The permission's URL
     */
    htmlUrl?: pulumi.Input<string>;
    /**
     * The permission's name
     */
    name?: pulumi.Input<string>;
    /**
     * The permission's ID
     */
    permissionId?: pulumi.Input<number>;
    /**
     * The permission's access level to pipelines. Allowed: `DENIED`, `READ_ONLY`, `RUN_ONLY`, `READ_WRITE`
     */
    pipelineAccessLevel?: pulumi.Input<string>;
    /**
     * The permission's access level to team. Allowed: `READ_ONLY`, `MANAGE`
     */
    projectTeamAccessLevel?: pulumi.Input<string>;
    /**
     * The permission's access level to repository. Allowed: `READ_ONLY`, `READ_WRITE`, `MANAGE`
     */
    repositoryAccessLevel?: pulumi.Input<string>;
    /**
     * The permission's access level to sandboxes. Allowed: `DENIED`, `READ_ONLY`, `READ_WRITE`
     */
    sandboxAccessLevel?: pulumi.Input<string>;
    /**
     * The permission's type
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Permission resource.
 */
export interface PermissionArgs {
    /**
     * The permission's description
     */
    description?: pulumi.Input<string>;
    /**
     * The workspace's URL handle
     */
    domain: pulumi.Input<string>;
    /**
     * The permission's name
     */
    name?: pulumi.Input<string>;
    /**
     * The permission's access level to pipelines. Allowed: `DENIED`, `READ_ONLY`, `RUN_ONLY`, `READ_WRITE`
     */
    pipelineAccessLevel: pulumi.Input<string>;
    /**
     * The permission's access level to team. Allowed: `READ_ONLY`, `MANAGE`
     */
    projectTeamAccessLevel?: pulumi.Input<string>;
    /**
     * The permission's access level to repository. Allowed: `READ_ONLY`, `READ_WRITE`, `MANAGE`
     */
    repositoryAccessLevel: pulumi.Input<string>;
    /**
     * The permission's access level to sandboxes. Allowed: `DENIED`, `READ_ONLY`, `READ_WRITE`
     */
    sandboxAccessLevel: pulumi.Input<string>;
}
