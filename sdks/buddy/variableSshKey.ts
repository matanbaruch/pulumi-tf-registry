// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VariableSshKey extends pulumi.CustomResource {
    /**
     * Get an existing VariableSshKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VariableSshKeyState, opts?: pulumi.CustomResourceOptions): VariableSshKey {
        return new VariableSshKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'buddy:index/variableSshKey:VariableSshKey';

    /**
     * Returns true if the given object is an instance of VariableSshKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VariableSshKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VariableSshKey.__pulumiType;
    }

    /**
     * The variable's action ID
     */
    public readonly actionId!: pulumi.Output<number | undefined>;
    /**
     * The variable's checksum
     */
    public /*out*/ readonly checksum!: pulumi.Output<string>;
    /**
     * The variable's description
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The workspace's URL handle
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * Is the variable's value encrypted, always true for buddy_variable_ssh_key
     */
    public /*out*/ readonly encrypted!: pulumi.Output<boolean>;
    /**
     * The variable's file permission in an action's container
     */
    public readonly fileChmod!: pulumi.Output<string>;
    /**
     * The variable's path in the action's container
     */
    public readonly filePath!: pulumi.Output<string>;
    /**
     * Should the variable's be copied to an action's container in **file_path** (`CONTAINER`, `NONE`)
     */
    public readonly filePlace!: pulumi.Output<string>;
    /**
     * The variable's name
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * The variable's fingerprint
     */
    public /*out*/ readonly keyFingerprint!: pulumi.Output<string>;
    /**
     * The variable's pipeline ID
     */
    public readonly pipelineId!: pulumi.Output<number | undefined>;
    /**
     * The variable's project name
     */
    public readonly projectName!: pulumi.Output<string | undefined>;
    /**
     * The variable's public key
     */
    public /*out*/ readonly publicValue!: pulumi.Output<string>;
    /**
     * Is the variable's value changeable, always false for buddy_variable_ssh_key
     */
    public /*out*/ readonly settable!: pulumi.Output<boolean>;
    /**
     * The variable's value
     */
    public readonly value!: pulumi.Output<string>;
    /**
     * The variable's value, always encrypted for buddy_variable_ssh_key
     */
    public /*out*/ readonly valueProcessed!: pulumi.Output<string>;
    /**
     * The variable's ID
     */
    public /*out*/ readonly variableId!: pulumi.Output<number>;

    /**
     * Create a VariableSshKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VariableSshKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VariableSshKeyArgs | VariableSshKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VariableSshKeyState | undefined;
            resourceInputs["actionId"] = state ? state.actionId : undefined;
            resourceInputs["checksum"] = state ? state.checksum : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["encrypted"] = state ? state.encrypted : undefined;
            resourceInputs["fileChmod"] = state ? state.fileChmod : undefined;
            resourceInputs["filePath"] = state ? state.filePath : undefined;
            resourceInputs["filePlace"] = state ? state.filePlace : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["keyFingerprint"] = state ? state.keyFingerprint : undefined;
            resourceInputs["pipelineId"] = state ? state.pipelineId : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["publicValue"] = state ? state.publicValue : undefined;
            resourceInputs["settable"] = state ? state.settable : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
            resourceInputs["valueProcessed"] = state ? state.valueProcessed : undefined;
            resourceInputs["variableId"] = state ? state.variableId : undefined;
        } else {
            const args = argsOrState as VariableSshKeyArgs | undefined;
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.fileChmod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileChmod'");
            }
            if ((!args || args.filePath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filePath'");
            }
            if ((!args || args.filePlace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filePlace'");
            }
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["actionId"] = args ? args.actionId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["fileChmod"] = args ? args.fileChmod : undefined;
            resourceInputs["filePath"] = args ? args.filePath : undefined;
            resourceInputs["filePlace"] = args ? args.filePlace : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["pipelineId"] = args ? args.pipelineId : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["value"] = args?.value ? pulumi.secret(args.value) : undefined;
            resourceInputs["checksum"] = undefined /*out*/;
            resourceInputs["encrypted"] = undefined /*out*/;
            resourceInputs["keyFingerprint"] = undefined /*out*/;
            resourceInputs["publicValue"] = undefined /*out*/;
            resourceInputs["settable"] = undefined /*out*/;
            resourceInputs["valueProcessed"] = undefined /*out*/;
            resourceInputs["variableId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["value", "valueProcessed"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(VariableSshKey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VariableSshKey resources.
 */
export interface VariableSshKeyState {
    /**
     * The variable's action ID
     */
    actionId?: pulumi.Input<number>;
    /**
     * The variable's checksum
     */
    checksum?: pulumi.Input<string>;
    /**
     * The variable's description
     */
    description?: pulumi.Input<string>;
    /**
     * The workspace's URL handle
     */
    domain?: pulumi.Input<string>;
    /**
     * Is the variable's value encrypted, always true for buddy_variable_ssh_key
     */
    encrypted?: pulumi.Input<boolean>;
    /**
     * The variable's file permission in an action's container
     */
    fileChmod?: pulumi.Input<string>;
    /**
     * The variable's path in the action's container
     */
    filePath?: pulumi.Input<string>;
    /**
     * Should the variable's be copied to an action's container in **file_path** (`CONTAINER`, `NONE`)
     */
    filePlace?: pulumi.Input<string>;
    /**
     * The variable's name
     */
    key?: pulumi.Input<string>;
    /**
     * The variable's fingerprint
     */
    keyFingerprint?: pulumi.Input<string>;
    /**
     * The variable's pipeline ID
     */
    pipelineId?: pulumi.Input<number>;
    /**
     * The variable's project name
     */
    projectName?: pulumi.Input<string>;
    /**
     * The variable's public key
     */
    publicValue?: pulumi.Input<string>;
    /**
     * Is the variable's value changeable, always false for buddy_variable_ssh_key
     */
    settable?: pulumi.Input<boolean>;
    /**
     * The variable's value
     */
    value?: pulumi.Input<string>;
    /**
     * The variable's value, always encrypted for buddy_variable_ssh_key
     */
    valueProcessed?: pulumi.Input<string>;
    /**
     * The variable's ID
     */
    variableId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a VariableSshKey resource.
 */
export interface VariableSshKeyArgs {
    /**
     * The variable's action ID
     */
    actionId?: pulumi.Input<number>;
    /**
     * The variable's description
     */
    description?: pulumi.Input<string>;
    /**
     * The workspace's URL handle
     */
    domain: pulumi.Input<string>;
    /**
     * The variable's file permission in an action's container
     */
    fileChmod: pulumi.Input<string>;
    /**
     * The variable's path in the action's container
     */
    filePath: pulumi.Input<string>;
    /**
     * Should the variable's be copied to an action's container in **file_path** (`CONTAINER`, `NONE`)
     */
    filePlace: pulumi.Input<string>;
    /**
     * The variable's name
     */
    key: pulumi.Input<string>;
    /**
     * The variable's pipeline ID
     */
    pipelineId?: pulumi.Input<number>;
    /**
     * The variable's project name
     */
    projectName?: pulumi.Input<string>;
    /**
     * The variable's value
     */
    value: pulumi.Input<string>;
}
