// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getProjectGroup(args: GetProjectGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetProjectGroupResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("buddy:index/getProjectGroup:getProjectGroup", {
        "domain": args.domain,
        "groupId": args.groupId,
        "projectName": args.projectName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getProjectGroup.
 */
export interface GetProjectGroupArgs {
    domain: string;
    groupId: number;
    projectName: string;
}

/**
 * A collection of values returned by getProjectGroup.
 */
export interface GetProjectGroupResult {
    readonly domain: string;
    readonly groupId: number;
    readonly htmlUrl: string;
    readonly id: string;
    readonly name: string;
    readonly permissions: outputs.GetProjectGroupPermission[];
    readonly projectName: string;
}
export function getProjectGroupOutput(args: GetProjectGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetProjectGroupResult> {
    return pulumi.output(args).apply((a: any) => getProjectGroup(a, opts))
}

/**
 * A collection of arguments for invoking getProjectGroup.
 */
export interface GetProjectGroupOutputArgs {
    domain: pulumi.Input<string>;
    groupId: pulumi.Input<number>;
    projectName: pulumi.Input<string>;
}
