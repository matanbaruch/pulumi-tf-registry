// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getVariableSshKey(args: GetVariableSshKeyArgs, opts?: pulumi.InvokeOptions): Promise<GetVariableSshKeyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("buddy:index/getVariableSshKey:getVariableSshKey", {
        "actionId": args.actionId,
        "domain": args.domain,
        "key": args.key,
        "pipelineId": args.pipelineId,
        "projectName": args.projectName,
        "variableId": args.variableId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVariableSshKey.
 */
export interface GetVariableSshKeyArgs {
    actionId?: number;
    domain: string;
    key?: string;
    pipelineId?: number;
    projectName?: string;
    variableId?: number;
}

/**
 * A collection of values returned by getVariableSshKey.
 */
export interface GetVariableSshKeyResult {
    readonly actionId?: number;
    readonly checksum: string;
    readonly description: string;
    readonly domain: string;
    readonly encrypted: boolean;
    readonly fileChmod: string;
    readonly filePath: string;
    readonly filePlace: string;
    readonly id: string;
    readonly key: string;
    readonly keyFingerprint: string;
    readonly pipelineId?: number;
    readonly projectName?: string;
    readonly publicValue: string;
    readonly settable: boolean;
    readonly value: string;
    readonly variableId: number;
}
export function getVariableSshKeyOutput(args: GetVariableSshKeyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVariableSshKeyResult> {
    return pulumi.output(args).apply((a: any) => getVariableSshKey(a, opts))
}

/**
 * A collection of arguments for invoking getVariableSshKey.
 */
export interface GetVariableSshKeyOutputArgs {
    actionId?: pulumi.Input<number>;
    domain: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    pipelineId?: pulumi.Input<number>;
    projectName?: pulumi.Input<string>;
    variableId?: pulumi.Input<number>;
}
