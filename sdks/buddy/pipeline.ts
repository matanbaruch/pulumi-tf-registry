// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Pipeline extends pulumi.CustomResource {
    /**
     * Get an existing Pipeline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PipelineState, opts?: pulumi.CustomResourceOptions): Pipeline {
        return new Pipeline(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'buddy:index/pipeline:Pipeline';

    /**
     * Returns true if the given object is an instance of Pipeline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Pipeline {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Pipeline.__pulumiType;
    }

    /**
     * Defines whether or not to upload everything from scratch on every run
     */
    public readonly alwaysFromScratch!: pulumi.Output<boolean>;
    /**
     * Defines whether or not to automatically clear cache before running the pipeline
     */
    public readonly autoClearCache!: pulumi.Output<boolean>;
    /**
     * The pipeline's filesystem clone depth. Creates a shallow clone with a history truncated to the specified number of
     * commits
     */
    public readonly cloneDepth!: pulumi.Output<number>;
    /**
     * The pipeline's date of creation
     */
    public /*out*/ readonly createDate!: pulumi.Output<string>;
    /**
     * The pipeline's creator
     */
    public /*out*/ readonly creators!: pulumi.Output<outputs.PipelineCreator[]>;
    /**
     * The pipeline's CRON expression. Required if the pipeline is set to `on: SCHEDULE` and neither `start_date` nor `delay`
     * is specified
     */
    public readonly cron!: pulumi.Output<string>;
    /**
     * The pipeline's definition source. Allowed: `LOCAL`, `REMOTE`
     */
    public readonly definitionSource!: pulumi.Output<string>;
    /**
     * The pipeline's runs interval (in minutes). Required if the pipeline is set to `on: SCHEDULE` and no `cron` is specified
     */
    public readonly delay!: pulumi.Output<number>;
    /**
     * Defines wheter or not the pipeline can be run
     */
    public readonly disabled!: pulumi.Output<boolean>;
    /**
     * The pipeline's disabling reason
     */
    public readonly disablingReason!: pulumi.Output<string>;
    /**
     * Defines whether or not to omit sending commit statuses to GitHub or GitLab upon execution
     */
    public readonly doNotCreateCommitStatus!: pulumi.Output<boolean>;
    /**
     * The workspace's URL handle
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * The pipeline's list of events. Set it if `on: EVENT`
     */
    public readonly events!: pulumi.Output<outputs.PipelineEvent[] | undefined>;
    /**
     * The pipeline's run title. Default: `$BUDDY_EXECUTION_REVISION_SUBJECT`
     */
    public readonly executionMessageTemplate!: pulumi.Output<string>;
    /**
     * Defines either or not run should fail if any warning occurs in prepare environment
     */
    public readonly failOnPrepareEnvWarning!: pulumi.Output<boolean>;
    /**
     * Defines whether or not fetch all refs from repository
     */
    public readonly fetchAllRefs!: pulumi.Output<boolean>;
    /**
     * The pipeline's GIT configuration spec for `git_config_ref` = `FIXED`
     */
    public readonly gitConfig!: pulumi.Output<outputs.PipelineGitConfig>;
    /**
     * The pipeline's GIT configuration type. Allowed: `NONE`, `FIXED`, `DYNAMIC`
     */
    public readonly gitConfigRef!: pulumi.Output<string>;
    /**
     * The pipeline's URL
     */
    public /*out*/ readonly htmlUrl!: pulumi.Output<string>;
    /**
     * If set to true the status of a given pipeline will be ignored on the projects' dashboard
     */
    public readonly ignoreFailOnProjectStatus!: pulumi.Output<boolean>;
    /**
     * The pipeline's last run revision
     */
    public /*out*/ readonly lastExecutionRevision!: pulumi.Output<string>;
    /**
     * The pipeline's last run status
     */
    public /*out*/ readonly lastExecutionStatus!: pulumi.Output<string>;
    /**
     * The pipeline's name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Defines whether or not to skip run to the most recent run
     */
    public readonly noSkipToMostRecent!: pulumi.Output<boolean>;
    /**
     * The pipeline's trigger mode. Required when not using remote definition. Allowed: `CLICK`, `EVENT`, `SCHEDULE`
     */
    public readonly on!: pulumi.Output<string>;
    /**
     * The pipeine's max failed executions before it is paused. Restricted to `on: SCHEDULE`
     */
    public readonly pauseOnRepeatedFailures!: pulumi.Output<number>;
    /**
     * Is the pipeline's run paused. Restricted to `on: SCHEDULE`
     */
    public readonly paused!: pulumi.Output<boolean>;
    /**
     * The pipeline's permissions
     */
    public readonly permissions!: pulumi.Output<outputs.PipelinePermission[] | undefined>;
    /**
     * The pipeline's ID
     */
    public /*out*/ readonly pipelineId!: pulumi.Output<number>;
    /**
     * The pipeline's priority. Allowed: `LOW`, `NORMAL`, `HIGH`
     */
    public readonly priority!: pulumi.Output<string>;
    /**
     * The project's name
     */
    public readonly projectName!: pulumi.Output<string>;
    /**
     * The pipeline's project
     */
    public /*out*/ readonly projects!: pulumi.Output<outputs.PipelineProject[]>;
    /**
     * The pipeline's list of refs. Set it if `on: CLICK`
     */
    public readonly refs!: pulumi.Output<string[]>;
    /**
     * The pipeline's remote definition branch name. Set it if `definition_source: REMOTE`
     */
    public readonly remoteBranch!: pulumi.Output<string>;
    /**
     * The pipeline's remote definition parameters. Set it if `definition_source: REMOTE`
     */
    public readonly remoteParameters!: pulumi.Output<outputs.PipelineRemoteParameter[] | undefined>;
    /**
     * The pipeline's remote definition path. Set it if `definition_source: REMOTE`
     */
    public readonly remotePath!: pulumi.Output<string>;
    /**
     * The pipeline's remote definition project name. Set it if `definition_source: REMOTE`
     */
    public readonly remoteProjectName!: pulumi.Output<string>;
    /**
     * The pipeline's start date. Required if the pipeline is set to `on: SCHEDULE` and no `cron` is specified. Format:
     * `2016-11-18T12:38:16.000Z`
     */
    public readonly startDate!: pulumi.Output<string>;
    /**
     * The pipeline's list of tags. Only for `Buddy Enterprise`
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * The pipeline's website target URL
     */
    public readonly targetSiteUrl!: pulumi.Output<string>;
    /**
     * The pipeline's list of trigger conditions
     */
    public readonly triggerConditions!: pulumi.Output<outputs.PipelineTriggerCondition[] | undefined>;
    /**
     * The pipeline's worker name. Only for `Buddy Enterprise`
     */
    public readonly worker!: pulumi.Output<string | undefined>;

    /**
     * Create a Pipeline resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PipelineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PipelineArgs | PipelineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PipelineState | undefined;
            resourceInputs["alwaysFromScratch"] = state ? state.alwaysFromScratch : undefined;
            resourceInputs["autoClearCache"] = state ? state.autoClearCache : undefined;
            resourceInputs["cloneDepth"] = state ? state.cloneDepth : undefined;
            resourceInputs["createDate"] = state ? state.createDate : undefined;
            resourceInputs["creators"] = state ? state.creators : undefined;
            resourceInputs["cron"] = state ? state.cron : undefined;
            resourceInputs["definitionSource"] = state ? state.definitionSource : undefined;
            resourceInputs["delay"] = state ? state.delay : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["disablingReason"] = state ? state.disablingReason : undefined;
            resourceInputs["doNotCreateCommitStatus"] = state ? state.doNotCreateCommitStatus : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["events"] = state ? state.events : undefined;
            resourceInputs["executionMessageTemplate"] = state ? state.executionMessageTemplate : undefined;
            resourceInputs["failOnPrepareEnvWarning"] = state ? state.failOnPrepareEnvWarning : undefined;
            resourceInputs["fetchAllRefs"] = state ? state.fetchAllRefs : undefined;
            resourceInputs["gitConfig"] = state ? state.gitConfig : undefined;
            resourceInputs["gitConfigRef"] = state ? state.gitConfigRef : undefined;
            resourceInputs["htmlUrl"] = state ? state.htmlUrl : undefined;
            resourceInputs["ignoreFailOnProjectStatus"] = state ? state.ignoreFailOnProjectStatus : undefined;
            resourceInputs["lastExecutionRevision"] = state ? state.lastExecutionRevision : undefined;
            resourceInputs["lastExecutionStatus"] = state ? state.lastExecutionStatus : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["noSkipToMostRecent"] = state ? state.noSkipToMostRecent : undefined;
            resourceInputs["on"] = state ? state.on : undefined;
            resourceInputs["pauseOnRepeatedFailures"] = state ? state.pauseOnRepeatedFailures : undefined;
            resourceInputs["paused"] = state ? state.paused : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["pipelineId"] = state ? state.pipelineId : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["projects"] = state ? state.projects : undefined;
            resourceInputs["refs"] = state ? state.refs : undefined;
            resourceInputs["remoteBranch"] = state ? state.remoteBranch : undefined;
            resourceInputs["remoteParameters"] = state ? state.remoteParameters : undefined;
            resourceInputs["remotePath"] = state ? state.remotePath : undefined;
            resourceInputs["remoteProjectName"] = state ? state.remoteProjectName : undefined;
            resourceInputs["startDate"] = state ? state.startDate : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["targetSiteUrl"] = state ? state.targetSiteUrl : undefined;
            resourceInputs["triggerConditions"] = state ? state.triggerConditions : undefined;
            resourceInputs["worker"] = state ? state.worker : undefined;
        } else {
            const args = argsOrState as PipelineArgs | undefined;
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.projectName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectName'");
            }
            resourceInputs["alwaysFromScratch"] = args ? args.alwaysFromScratch : undefined;
            resourceInputs["autoClearCache"] = args ? args.autoClearCache : undefined;
            resourceInputs["cloneDepth"] = args ? args.cloneDepth : undefined;
            resourceInputs["cron"] = args ? args.cron : undefined;
            resourceInputs["definitionSource"] = args ? args.definitionSource : undefined;
            resourceInputs["delay"] = args ? args.delay : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["disablingReason"] = args ? args.disablingReason : undefined;
            resourceInputs["doNotCreateCommitStatus"] = args ? args.doNotCreateCommitStatus : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["events"] = args ? args.events : undefined;
            resourceInputs["executionMessageTemplate"] = args ? args.executionMessageTemplate : undefined;
            resourceInputs["failOnPrepareEnvWarning"] = args ? args.failOnPrepareEnvWarning : undefined;
            resourceInputs["fetchAllRefs"] = args ? args.fetchAllRefs : undefined;
            resourceInputs["gitConfig"] = args ? args.gitConfig : undefined;
            resourceInputs["gitConfigRef"] = args ? args.gitConfigRef : undefined;
            resourceInputs["ignoreFailOnProjectStatus"] = args ? args.ignoreFailOnProjectStatus : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["noSkipToMostRecent"] = args ? args.noSkipToMostRecent : undefined;
            resourceInputs["on"] = args ? args.on : undefined;
            resourceInputs["pauseOnRepeatedFailures"] = args ? args.pauseOnRepeatedFailures : undefined;
            resourceInputs["paused"] = args ? args.paused : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["refs"] = args ? args.refs : undefined;
            resourceInputs["remoteBranch"] = args ? args.remoteBranch : undefined;
            resourceInputs["remoteParameters"] = args ? args.remoteParameters : undefined;
            resourceInputs["remotePath"] = args ? args.remotePath : undefined;
            resourceInputs["remoteProjectName"] = args ? args.remoteProjectName : undefined;
            resourceInputs["startDate"] = args ? args.startDate : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["targetSiteUrl"] = args ? args.targetSiteUrl : undefined;
            resourceInputs["triggerConditions"] = args ? args.triggerConditions : undefined;
            resourceInputs["worker"] = args ? args.worker : undefined;
            resourceInputs["createDate"] = undefined /*out*/;
            resourceInputs["creators"] = undefined /*out*/;
            resourceInputs["htmlUrl"] = undefined /*out*/;
            resourceInputs["lastExecutionRevision"] = undefined /*out*/;
            resourceInputs["lastExecutionStatus"] = undefined /*out*/;
            resourceInputs["pipelineId"] = undefined /*out*/;
            resourceInputs["projects"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Pipeline.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Pipeline resources.
 */
export interface PipelineState {
    /**
     * Defines whether or not to upload everything from scratch on every run
     */
    alwaysFromScratch?: pulumi.Input<boolean>;
    /**
     * Defines whether or not to automatically clear cache before running the pipeline
     */
    autoClearCache?: pulumi.Input<boolean>;
    /**
     * The pipeline's filesystem clone depth. Creates a shallow clone with a history truncated to the specified number of
     * commits
     */
    cloneDepth?: pulumi.Input<number>;
    /**
     * The pipeline's date of creation
     */
    createDate?: pulumi.Input<string>;
    /**
     * The pipeline's creator
     */
    creators?: pulumi.Input<pulumi.Input<inputs.PipelineCreator>[]>;
    /**
     * The pipeline's CRON expression. Required if the pipeline is set to `on: SCHEDULE` and neither `start_date` nor `delay`
     * is specified
     */
    cron?: pulumi.Input<string>;
    /**
     * The pipeline's definition source. Allowed: `LOCAL`, `REMOTE`
     */
    definitionSource?: pulumi.Input<string>;
    /**
     * The pipeline's runs interval (in minutes). Required if the pipeline is set to `on: SCHEDULE` and no `cron` is specified
     */
    delay?: pulumi.Input<number>;
    /**
     * Defines wheter or not the pipeline can be run
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The pipeline's disabling reason
     */
    disablingReason?: pulumi.Input<string>;
    /**
     * Defines whether or not to omit sending commit statuses to GitHub or GitLab upon execution
     */
    doNotCreateCommitStatus?: pulumi.Input<boolean>;
    /**
     * The workspace's URL handle
     */
    domain?: pulumi.Input<string>;
    /**
     * The pipeline's list of events. Set it if `on: EVENT`
     */
    events?: pulumi.Input<pulumi.Input<inputs.PipelineEvent>[]>;
    /**
     * The pipeline's run title. Default: `$BUDDY_EXECUTION_REVISION_SUBJECT`
     */
    executionMessageTemplate?: pulumi.Input<string>;
    /**
     * Defines either or not run should fail if any warning occurs in prepare environment
     */
    failOnPrepareEnvWarning?: pulumi.Input<boolean>;
    /**
     * Defines whether or not fetch all refs from repository
     */
    fetchAllRefs?: pulumi.Input<boolean>;
    /**
     * The pipeline's GIT configuration spec for `git_config_ref` = `FIXED`
     */
    gitConfig?: pulumi.Input<inputs.PipelineGitConfig>;
    /**
     * The pipeline's GIT configuration type. Allowed: `NONE`, `FIXED`, `DYNAMIC`
     */
    gitConfigRef?: pulumi.Input<string>;
    /**
     * The pipeline's URL
     */
    htmlUrl?: pulumi.Input<string>;
    /**
     * If set to true the status of a given pipeline will be ignored on the projects' dashboard
     */
    ignoreFailOnProjectStatus?: pulumi.Input<boolean>;
    /**
     * The pipeline's last run revision
     */
    lastExecutionRevision?: pulumi.Input<string>;
    /**
     * The pipeline's last run status
     */
    lastExecutionStatus?: pulumi.Input<string>;
    /**
     * The pipeline's name
     */
    name?: pulumi.Input<string>;
    /**
     * Defines whether or not to skip run to the most recent run
     */
    noSkipToMostRecent?: pulumi.Input<boolean>;
    /**
     * The pipeline's trigger mode. Required when not using remote definition. Allowed: `CLICK`, `EVENT`, `SCHEDULE`
     */
    on?: pulumi.Input<string>;
    /**
     * The pipeine's max failed executions before it is paused. Restricted to `on: SCHEDULE`
     */
    pauseOnRepeatedFailures?: pulumi.Input<number>;
    /**
     * Is the pipeline's run paused. Restricted to `on: SCHEDULE`
     */
    paused?: pulumi.Input<boolean>;
    /**
     * The pipeline's permissions
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.PipelinePermission>[]>;
    /**
     * The pipeline's ID
     */
    pipelineId?: pulumi.Input<number>;
    /**
     * The pipeline's priority. Allowed: `LOW`, `NORMAL`, `HIGH`
     */
    priority?: pulumi.Input<string>;
    /**
     * The project's name
     */
    projectName?: pulumi.Input<string>;
    /**
     * The pipeline's project
     */
    projects?: pulumi.Input<pulumi.Input<inputs.PipelineProject>[]>;
    /**
     * The pipeline's list of refs. Set it if `on: CLICK`
     */
    refs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The pipeline's remote definition branch name. Set it if `definition_source: REMOTE`
     */
    remoteBranch?: pulumi.Input<string>;
    /**
     * The pipeline's remote definition parameters. Set it if `definition_source: REMOTE`
     */
    remoteParameters?: pulumi.Input<pulumi.Input<inputs.PipelineRemoteParameter>[]>;
    /**
     * The pipeline's remote definition path. Set it if `definition_source: REMOTE`
     */
    remotePath?: pulumi.Input<string>;
    /**
     * The pipeline's remote definition project name. Set it if `definition_source: REMOTE`
     */
    remoteProjectName?: pulumi.Input<string>;
    /**
     * The pipeline's start date. Required if the pipeline is set to `on: SCHEDULE` and no `cron` is specified. Format:
     * `2016-11-18T12:38:16.000Z`
     */
    startDate?: pulumi.Input<string>;
    /**
     * The pipeline's list of tags. Only for `Buddy Enterprise`
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The pipeline's website target URL
     */
    targetSiteUrl?: pulumi.Input<string>;
    /**
     * The pipeline's list of trigger conditions
     */
    triggerConditions?: pulumi.Input<pulumi.Input<inputs.PipelineTriggerCondition>[]>;
    /**
     * The pipeline's worker name. Only for `Buddy Enterprise`
     */
    worker?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Pipeline resource.
 */
export interface PipelineArgs {
    /**
     * Defines whether or not to upload everything from scratch on every run
     */
    alwaysFromScratch?: pulumi.Input<boolean>;
    /**
     * Defines whether or not to automatically clear cache before running the pipeline
     */
    autoClearCache?: pulumi.Input<boolean>;
    /**
     * The pipeline's filesystem clone depth. Creates a shallow clone with a history truncated to the specified number of
     * commits
     */
    cloneDepth?: pulumi.Input<number>;
    /**
     * The pipeline's CRON expression. Required if the pipeline is set to `on: SCHEDULE` and neither `start_date` nor `delay`
     * is specified
     */
    cron?: pulumi.Input<string>;
    /**
     * The pipeline's definition source. Allowed: `LOCAL`, `REMOTE`
     */
    definitionSource?: pulumi.Input<string>;
    /**
     * The pipeline's runs interval (in minutes). Required if the pipeline is set to `on: SCHEDULE` and no `cron` is specified
     */
    delay?: pulumi.Input<number>;
    /**
     * Defines wheter or not the pipeline can be run
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * The pipeline's disabling reason
     */
    disablingReason?: pulumi.Input<string>;
    /**
     * Defines whether or not to omit sending commit statuses to GitHub or GitLab upon execution
     */
    doNotCreateCommitStatus?: pulumi.Input<boolean>;
    /**
     * The workspace's URL handle
     */
    domain: pulumi.Input<string>;
    /**
     * The pipeline's list of events. Set it if `on: EVENT`
     */
    events?: pulumi.Input<pulumi.Input<inputs.PipelineEvent>[]>;
    /**
     * The pipeline's run title. Default: `$BUDDY_EXECUTION_REVISION_SUBJECT`
     */
    executionMessageTemplate?: pulumi.Input<string>;
    /**
     * Defines either or not run should fail if any warning occurs in prepare environment
     */
    failOnPrepareEnvWarning?: pulumi.Input<boolean>;
    /**
     * Defines whether or not fetch all refs from repository
     */
    fetchAllRefs?: pulumi.Input<boolean>;
    /**
     * The pipeline's GIT configuration spec for `git_config_ref` = `FIXED`
     */
    gitConfig?: pulumi.Input<inputs.PipelineGitConfig>;
    /**
     * The pipeline's GIT configuration type. Allowed: `NONE`, `FIXED`, `DYNAMIC`
     */
    gitConfigRef?: pulumi.Input<string>;
    /**
     * If set to true the status of a given pipeline will be ignored on the projects' dashboard
     */
    ignoreFailOnProjectStatus?: pulumi.Input<boolean>;
    /**
     * The pipeline's name
     */
    name?: pulumi.Input<string>;
    /**
     * Defines whether or not to skip run to the most recent run
     */
    noSkipToMostRecent?: pulumi.Input<boolean>;
    /**
     * The pipeline's trigger mode. Required when not using remote definition. Allowed: `CLICK`, `EVENT`, `SCHEDULE`
     */
    on?: pulumi.Input<string>;
    /**
     * The pipeine's max failed executions before it is paused. Restricted to `on: SCHEDULE`
     */
    pauseOnRepeatedFailures?: pulumi.Input<number>;
    /**
     * Is the pipeline's run paused. Restricted to `on: SCHEDULE`
     */
    paused?: pulumi.Input<boolean>;
    /**
     * The pipeline's permissions
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.PipelinePermission>[]>;
    /**
     * The pipeline's priority. Allowed: `LOW`, `NORMAL`, `HIGH`
     */
    priority?: pulumi.Input<string>;
    /**
     * The project's name
     */
    projectName: pulumi.Input<string>;
    /**
     * The pipeline's list of refs. Set it if `on: CLICK`
     */
    refs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The pipeline's remote definition branch name. Set it if `definition_source: REMOTE`
     */
    remoteBranch?: pulumi.Input<string>;
    /**
     * The pipeline's remote definition parameters. Set it if `definition_source: REMOTE`
     */
    remoteParameters?: pulumi.Input<pulumi.Input<inputs.PipelineRemoteParameter>[]>;
    /**
     * The pipeline's remote definition path. Set it if `definition_source: REMOTE`
     */
    remotePath?: pulumi.Input<string>;
    /**
     * The pipeline's remote definition project name. Set it if `definition_source: REMOTE`
     */
    remoteProjectName?: pulumi.Input<string>;
    /**
     * The pipeline's start date. Required if the pipeline is set to `on: SCHEDULE` and no `cron` is specified. Format:
     * `2016-11-18T12:38:16.000Z`
     */
    startDate?: pulumi.Input<string>;
    /**
     * The pipeline's list of tags. Only for `Buddy Enterprise`
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The pipeline's website target URL
     */
    targetSiteUrl?: pulumi.Input<string>;
    /**
     * The pipeline's list of trigger conditions
     */
    triggerConditions?: pulumi.Input<pulumi.Input<inputs.PipelineTriggerCondition>[]>;
    /**
     * The pipeline's worker name. Only for `Buddy Enterprise`
     */
    worker?: pulumi.Input<string>;
}
