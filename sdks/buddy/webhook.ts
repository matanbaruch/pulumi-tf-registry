// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Webhook extends pulumi.CustomResource {
    /**
     * Get an existing Webhook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebhookState, opts?: pulumi.CustomResourceOptions): Webhook {
        return new Webhook(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'buddy:index/webhook:Webhook';

    /**
     * Returns true if the given object is an instance of Webhook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Webhook {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Webhook.__pulumiType;
    }

    /**
     * The workspace's URL handle
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * The webhook's event's list. Allowed: `PUSH`, `EXECUTION_STARTED`, `EXECUTION_SUCCESSFUL`, `EXECUTION_FAILED`,
     * `EXECUTION_FINISHED`
     */
    public readonly events!: pulumi.Output<string[]>;
    /**
     * The webhook's URL
     */
    public /*out*/ readonly htmlUrl!: pulumi.Output<string>;
    /**
     * To which projects the webhook should be assigned. If left empty all projects will be used
     */
    public readonly projects!: pulumi.Output<string[]>;
    /**
     * The webhook's secret value sent in the payload
     */
    public readonly secretKey!: pulumi.Output<string>;
    /**
     * The webhook's target URL
     */
    public readonly targetUrl!: pulumi.Output<string>;
    /**
     * The webhook's ID
     */
    public /*out*/ readonly webhookId!: pulumi.Output<number>;

    /**
     * Create a Webhook resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WebhookArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebhookArgs | WebhookState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebhookState | undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["events"] = state ? state.events : undefined;
            resourceInputs["htmlUrl"] = state ? state.htmlUrl : undefined;
            resourceInputs["projects"] = state ? state.projects : undefined;
            resourceInputs["secretKey"] = state ? state.secretKey : undefined;
            resourceInputs["targetUrl"] = state ? state.targetUrl : undefined;
            resourceInputs["webhookId"] = state ? state.webhookId : undefined;
        } else {
            const args = argsOrState as WebhookArgs | undefined;
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.events === undefined) && !opts.urn) {
                throw new Error("Missing required property 'events'");
            }
            if ((!args || args.projects === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projects'");
            }
            if ((!args || args.targetUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetUrl'");
            }
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["events"] = args ? args.events : undefined;
            resourceInputs["projects"] = args ? args.projects : undefined;
            resourceInputs["secretKey"] = args?.secretKey ? pulumi.secret(args.secretKey) : undefined;
            resourceInputs["targetUrl"] = args ? args.targetUrl : undefined;
            resourceInputs["htmlUrl"] = undefined /*out*/;
            resourceInputs["webhookId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secretKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Webhook.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Webhook resources.
 */
export interface WebhookState {
    /**
     * The workspace's URL handle
     */
    domain?: pulumi.Input<string>;
    /**
     * The webhook's event's list. Allowed: `PUSH`, `EXECUTION_STARTED`, `EXECUTION_SUCCESSFUL`, `EXECUTION_FAILED`,
     * `EXECUTION_FINISHED`
     */
    events?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The webhook's URL
     */
    htmlUrl?: pulumi.Input<string>;
    /**
     * To which projects the webhook should be assigned. If left empty all projects will be used
     */
    projects?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The webhook's secret value sent in the payload
     */
    secretKey?: pulumi.Input<string>;
    /**
     * The webhook's target URL
     */
    targetUrl?: pulumi.Input<string>;
    /**
     * The webhook's ID
     */
    webhookId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Webhook resource.
 */
export interface WebhookArgs {
    /**
     * The workspace's URL handle
     */
    domain: pulumi.Input<string>;
    /**
     * The webhook's event's list. Allowed: `PUSH`, `EXECUTION_STARTED`, `EXECUTION_SUCCESSFUL`, `EXECUTION_FAILED`,
     * `EXECUTION_FINISHED`
     */
    events: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * To which projects the webhook should be assigned. If left empty all projects will be used
     */
    projects: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The webhook's secret value sent in the payload
     */
    secretKey?: pulumi.Input<string>;
    /**
     * The webhook's target URL
     */
    targetUrl: pulumi.Input<string>;
}
