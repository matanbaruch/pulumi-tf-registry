// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getProjectMember(args: GetProjectMemberArgs, opts?: pulumi.InvokeOptions): Promise<GetProjectMemberResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("buddy:index/getProjectMember:getProjectMember", {
        "domain": args.domain,
        "memberId": args.memberId,
        "projectName": args.projectName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getProjectMember.
 */
export interface GetProjectMemberArgs {
    domain: string;
    memberId: number;
    projectName: string;
}

/**
 * A collection of values returned by getProjectMember.
 */
export interface GetProjectMemberResult {
    readonly admin: boolean;
    readonly avatarUrl: string;
    readonly domain: string;
    readonly email: string;
    readonly htmlUrl: string;
    readonly id: string;
    readonly memberId: number;
    readonly name: string;
    readonly permissions: outputs.GetProjectMemberPermission[];
    readonly projectName: string;
    readonly workspaceOwner: boolean;
}
export function getProjectMemberOutput(args: GetProjectMemberOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetProjectMemberResult> {
    return pulumi.output(args).apply((a: any) => getProjectMember(a, opts))
}

/**
 * A collection of arguments for invoking getProjectMember.
 */
export interface GetProjectMemberOutputArgs {
    domain: pulumi.Input<string>;
    memberId: pulumi.Input<number>;
    projectName: pulumi.Input<string>;
}
