// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Sso extends pulumi.CustomResource {
    /**
     * Get an existing Sso resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SsoState, opts?: pulumi.CustomResourceOptions): Sso {
        return new Sso(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'buddy:index/sso:Sso';

    /**
     * Returns true if the given object is an instance of Sso.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Sso {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Sso.__pulumiType;
    }

    /**
     * The identity provider certificate
     */
    public readonly certificate!: pulumi.Output<string>;
    /**
     * The OIDC application's Client ID
     */
    public readonly clientId!: pulumi.Output<string | undefined>;
    /**
     * The OIDC application's Client Secret
     */
    public readonly clientSecret!: pulumi.Output<string | undefined>;
    /**
     * The SAML digest algorithm. Allowed: `sha1`, `sha256`, `sha512`
     */
    public readonly digest!: pulumi.Output<string>;
    /**
     * The workspace's URL handle
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * The Sso's URL
     */
    public /*out*/ readonly htmlUrl!: pulumi.Output<string>;
    /**
     * The identity provider issuer url
     */
    public readonly issuer!: pulumi.Output<string>;
    /**
     * Enable mandatory SAML SSO authentication for all workspace members
     */
    public readonly requireForAll!: pulumi.Output<boolean>;
    /**
     * The SAML signature algorithm. Allowed: `sha1`, `sha256`, `sha512`
     */
    public readonly signature!: pulumi.Output<string>;
    /**
     * The identity provider single sign-on url
     */
    public readonly ssoUrl!: pulumi.Output<string>;
    /**
     * The SSO type. Allowed: `SAML`, `OIDC`. Default: `SAML`
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Sso resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SsoArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SsoArgs | SsoState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SsoState | undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["clientSecret"] = state ? state.clientSecret : undefined;
            resourceInputs["digest"] = state ? state.digest : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["htmlUrl"] = state ? state.htmlUrl : undefined;
            resourceInputs["issuer"] = state ? state.issuer : undefined;
            resourceInputs["requireForAll"] = state ? state.requireForAll : undefined;
            resourceInputs["signature"] = state ? state.signature : undefined;
            resourceInputs["ssoUrl"] = state ? state.ssoUrl : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as SsoArgs | undefined;
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.issuer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'issuer'");
            }
            resourceInputs["certificate"] = args?.certificate ? pulumi.secret(args.certificate) : undefined;
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["clientSecret"] = args?.clientSecret ? pulumi.secret(args.clientSecret) : undefined;
            resourceInputs["digest"] = args ? args.digest : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["issuer"] = args ? args.issuer : undefined;
            resourceInputs["requireForAll"] = args ? args.requireForAll : undefined;
            resourceInputs["signature"] = args ? args.signature : undefined;
            resourceInputs["ssoUrl"] = args ? args.ssoUrl : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["htmlUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["certificate", "clientSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Sso.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Sso resources.
 */
export interface SsoState {
    /**
     * The identity provider certificate
     */
    certificate?: pulumi.Input<string>;
    /**
     * The OIDC application's Client ID
     */
    clientId?: pulumi.Input<string>;
    /**
     * The OIDC application's Client Secret
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * The SAML digest algorithm. Allowed: `sha1`, `sha256`, `sha512`
     */
    digest?: pulumi.Input<string>;
    /**
     * The workspace's URL handle
     */
    domain?: pulumi.Input<string>;
    /**
     * The Sso's URL
     */
    htmlUrl?: pulumi.Input<string>;
    /**
     * The identity provider issuer url
     */
    issuer?: pulumi.Input<string>;
    /**
     * Enable mandatory SAML SSO authentication for all workspace members
     */
    requireForAll?: pulumi.Input<boolean>;
    /**
     * The SAML signature algorithm. Allowed: `sha1`, `sha256`, `sha512`
     */
    signature?: pulumi.Input<string>;
    /**
     * The identity provider single sign-on url
     */
    ssoUrl?: pulumi.Input<string>;
    /**
     * The SSO type. Allowed: `SAML`, `OIDC`. Default: `SAML`
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Sso resource.
 */
export interface SsoArgs {
    /**
     * The identity provider certificate
     */
    certificate?: pulumi.Input<string>;
    /**
     * The OIDC application's Client ID
     */
    clientId?: pulumi.Input<string>;
    /**
     * The OIDC application's Client Secret
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * The SAML digest algorithm. Allowed: `sha1`, `sha256`, `sha512`
     */
    digest?: pulumi.Input<string>;
    /**
     * The workspace's URL handle
     */
    domain: pulumi.Input<string>;
    /**
     * The identity provider issuer url
     */
    issuer: pulumi.Input<string>;
    /**
     * Enable mandatory SAML SSO authentication for all workspace members
     */
    requireForAll?: pulumi.Input<boolean>;
    /**
     * The SAML signature algorithm. Allowed: `sha1`, `sha256`, `sha512`
     */
    signature?: pulumi.Input<string>;
    /**
     * The identity provider single sign-on url
     */
    ssoUrl?: pulumi.Input<string>;
    /**
     * The SSO type. Allowed: `SAML`, `OIDC`. Default: `SAML`
     */
    type?: pulumi.Input<string>;
}
