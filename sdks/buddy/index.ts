// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetGroupMembersArgs, GetGroupMembersResult, GetGroupMembersOutputArgs } from "./getGroupMembers";
export const getGroupMembers: typeof import("./getGroupMembers").getGroupMembers = null as any;
export const getGroupMembersOutput: typeof import("./getGroupMembers").getGroupMembersOutput = null as any;
utilities.lazyLoad(exports, ["getGroupMembers","getGroupMembersOutput"], () => require("./getGroupMembers"));

export { GetGroupsArgs, GetGroupsResult, GetGroupsOutputArgs } from "./getGroups";
export const getGroups: typeof import("./getGroups").getGroups = null as any;
export const getGroupsOutput: typeof import("./getGroups").getGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGroups","getGroupsOutput"], () => require("./getGroups"));

export { GetIntegrationArgs, GetIntegrationResult, GetIntegrationOutputArgs } from "./getIntegration";
export const getIntegration: typeof import("./getIntegration").getIntegration = null as any;
export const getIntegrationOutput: typeof import("./getIntegration").getIntegrationOutput = null as any;
utilities.lazyLoad(exports, ["getIntegration","getIntegrationOutput"], () => require("./getIntegration"));

export { GetIntegrationsArgs, GetIntegrationsResult, GetIntegrationsOutputArgs } from "./getIntegrations";
export const getIntegrations: typeof import("./getIntegrations").getIntegrations = null as any;
export const getIntegrationsOutput: typeof import("./getIntegrations").getIntegrationsOutput = null as any;
utilities.lazyLoad(exports, ["getIntegrations","getIntegrationsOutput"], () => require("./getIntegrations"));

export { GetMemberArgs, GetMemberResult, GetMemberOutputArgs } from "./getMember";
export const getMember: typeof import("./getMember").getMember = null as any;
export const getMemberOutput: typeof import("./getMember").getMemberOutput = null as any;
utilities.lazyLoad(exports, ["getMember","getMemberOutput"], () => require("./getMember"));

export { GetMembersArgs, GetMembersResult, GetMembersOutputArgs } from "./getMembers";
export const getMembers: typeof import("./getMembers").getMembers = null as any;
export const getMembersOutput: typeof import("./getMembers").getMembersOutput = null as any;
utilities.lazyLoad(exports, ["getMembers","getMembersOutput"], () => require("./getMembers"));

export { GetPermissionArgs, GetPermissionResult, GetPermissionOutputArgs } from "./getPermission";
export const getPermission: typeof import("./getPermission").getPermission = null as any;
export const getPermissionOutput: typeof import("./getPermission").getPermissionOutput = null as any;
utilities.lazyLoad(exports, ["getPermission","getPermissionOutput"], () => require("./getPermission"));

export { GetPermissionsArgs, GetPermissionsResult, GetPermissionsOutputArgs } from "./getPermissions";
export const getPermissions: typeof import("./getPermissions").getPermissions = null as any;
export const getPermissionsOutput: typeof import("./getPermissions").getPermissionsOutput = null as any;
utilities.lazyLoad(exports, ["getPermissions","getPermissionsOutput"], () => require("./getPermissions"));

export { GetPipelineArgs, GetPipelineResult, GetPipelineOutputArgs } from "./getPipeline";
export const getPipeline: typeof import("./getPipeline").getPipeline = null as any;
export const getPipelineOutput: typeof import("./getPipeline").getPipelineOutput = null as any;
utilities.lazyLoad(exports, ["getPipeline","getPipelineOutput"], () => require("./getPipeline"));

export { GetPipelinesArgs, GetPipelinesResult, GetPipelinesOutputArgs } from "./getPipelines";
export const getPipelines: typeof import("./getPipelines").getPipelines = null as any;
export const getPipelinesOutput: typeof import("./getPipelines").getPipelinesOutput = null as any;
utilities.lazyLoad(exports, ["getPipelines","getPipelinesOutput"], () => require("./getPipelines"));

export { GetProfileResult } from "./getProfile";
export const getProfile: typeof import("./getProfile").getProfile = null as any;
export const getProfileOutput: typeof import("./getProfile").getProfileOutput = null as any;
utilities.lazyLoad(exports, ["getProfile","getProfileOutput"], () => require("./getProfile"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetProjectGroupArgs, GetProjectGroupResult, GetProjectGroupOutputArgs } from "./getProjectGroup";
export const getProjectGroup: typeof import("./getProjectGroup").getProjectGroup = null as any;
export const getProjectGroupOutput: typeof import("./getProjectGroup").getProjectGroupOutput = null as any;
utilities.lazyLoad(exports, ["getProjectGroup","getProjectGroupOutput"], () => require("./getProjectGroup"));

export { GetProjectGroupsArgs, GetProjectGroupsResult, GetProjectGroupsOutputArgs } from "./getProjectGroups";
export const getProjectGroups: typeof import("./getProjectGroups").getProjectGroups = null as any;
export const getProjectGroupsOutput: typeof import("./getProjectGroups").getProjectGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getProjectGroups","getProjectGroupsOutput"], () => require("./getProjectGroups"));

export { GetProjectMemberArgs, GetProjectMemberResult, GetProjectMemberOutputArgs } from "./getProjectMember";
export const getProjectMember: typeof import("./getProjectMember").getProjectMember = null as any;
export const getProjectMemberOutput: typeof import("./getProjectMember").getProjectMemberOutput = null as any;
utilities.lazyLoad(exports, ["getProjectMember","getProjectMemberOutput"], () => require("./getProjectMember"));

export { GetProjectMembersArgs, GetProjectMembersResult, GetProjectMembersOutputArgs } from "./getProjectMembers";
export const getProjectMembers: typeof import("./getProjectMembers").getProjectMembers = null as any;
export const getProjectMembersOutput: typeof import("./getProjectMembers").getProjectMembersOutput = null as any;
utilities.lazyLoad(exports, ["getProjectMembers","getProjectMembersOutput"], () => require("./getProjectMembers"));

export { GetProjectsArgs, GetProjectsResult, GetProjectsOutputArgs } from "./getProjects";
export const getProjects: typeof import("./getProjects").getProjects = null as any;
export const getProjectsOutput: typeof import("./getProjects").getProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getProjects","getProjectsOutput"], () => require("./getProjects"));

export { GetVariableArgs, GetVariableResult, GetVariableOutputArgs } from "./getVariable";
export const getVariable: typeof import("./getVariable").getVariable = null as any;
export const getVariableOutput: typeof import("./getVariable").getVariableOutput = null as any;
utilities.lazyLoad(exports, ["getVariable","getVariableOutput"], () => require("./getVariable"));

export { GetVariableSshKeyArgs, GetVariableSshKeyResult, GetVariableSshKeyOutputArgs } from "./getVariableSshKey";
export const getVariableSshKey: typeof import("./getVariableSshKey").getVariableSshKey = null as any;
export const getVariableSshKeyOutput: typeof import("./getVariableSshKey").getVariableSshKeyOutput = null as any;
utilities.lazyLoad(exports, ["getVariableSshKey","getVariableSshKeyOutput"], () => require("./getVariableSshKey"));

export { GetVariablesArgs, GetVariablesResult, GetVariablesOutputArgs } from "./getVariables";
export const getVariables: typeof import("./getVariables").getVariables = null as any;
export const getVariablesOutput: typeof import("./getVariables").getVariablesOutput = null as any;
utilities.lazyLoad(exports, ["getVariables","getVariablesOutput"], () => require("./getVariables"));

export { GetVariablesSshKeysArgs, GetVariablesSshKeysResult, GetVariablesSshKeysOutputArgs } from "./getVariablesSshKeys";
export const getVariablesSshKeys: typeof import("./getVariablesSshKeys").getVariablesSshKeys = null as any;
export const getVariablesSshKeysOutput: typeof import("./getVariablesSshKeys").getVariablesSshKeysOutput = null as any;
utilities.lazyLoad(exports, ["getVariablesSshKeys","getVariablesSshKeysOutput"], () => require("./getVariablesSshKeys"));

export { GetWebhookArgs, GetWebhookResult, GetWebhookOutputArgs } from "./getWebhook";
export const getWebhook: typeof import("./getWebhook").getWebhook = null as any;
export const getWebhookOutput: typeof import("./getWebhook").getWebhookOutput = null as any;
utilities.lazyLoad(exports, ["getWebhook","getWebhookOutput"], () => require("./getWebhook"));

export { GetWebhooksArgs, GetWebhooksResult, GetWebhooksOutputArgs } from "./getWebhooks";
export const getWebhooks: typeof import("./getWebhooks").getWebhooks = null as any;
export const getWebhooksOutput: typeof import("./getWebhooks").getWebhooksOutput = null as any;
utilities.lazyLoad(exports, ["getWebhooks","getWebhooksOutput"], () => require("./getWebhooks"));

export { GetWorkspaceArgs, GetWorkspaceResult, GetWorkspaceOutputArgs } from "./getWorkspace";
export const getWorkspace: typeof import("./getWorkspace").getWorkspace = null as any;
export const getWorkspaceOutput: typeof import("./getWorkspace").getWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspace","getWorkspaceOutput"], () => require("./getWorkspace"));

export { GetWorkspacesArgs, GetWorkspacesResult, GetWorkspacesOutputArgs } from "./getWorkspaces";
export const getWorkspaces: typeof import("./getWorkspaces").getWorkspaces = null as any;
export const getWorkspacesOutput: typeof import("./getWorkspaces").getWorkspacesOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaces","getWorkspacesOutput"], () => require("./getWorkspaces"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { GroupMemberArgs, GroupMemberState } from "./groupMember";
export type GroupMember = import("./groupMember").GroupMember;
export const GroupMember: typeof import("./groupMember").GroupMember = null as any;
utilities.lazyLoad(exports, ["GroupMember"], () => require("./groupMember"));

export { IntegrationArgs, IntegrationState } from "./integration";
export type Integration = import("./integration").Integration;
export const Integration: typeof import("./integration").Integration = null as any;
utilities.lazyLoad(exports, ["Integration"], () => require("./integration"));

export { MemberArgs, MemberState } from "./member";
export type Member = import("./member").Member;
export const Member: typeof import("./member").Member = null as any;
utilities.lazyLoad(exports, ["Member"], () => require("./member"));

export { PermissionArgs, PermissionState } from "./permission";
export type Permission = import("./permission").Permission;
export const Permission: typeof import("./permission").Permission = null as any;
utilities.lazyLoad(exports, ["Permission"], () => require("./permission"));

export { PipelineArgs, PipelineState } from "./pipeline";
export type Pipeline = import("./pipeline").Pipeline;
export const Pipeline: typeof import("./pipeline").Pipeline = null as any;
utilities.lazyLoad(exports, ["Pipeline"], () => require("./pipeline"));

export { ProfileArgs, ProfileState } from "./profile";
export type Profile = import("./profile").Profile;
export const Profile: typeof import("./profile").Profile = null as any;
utilities.lazyLoad(exports, ["Profile"], () => require("./profile"));

export { ProfileEmailArgs, ProfileEmailState } from "./profileEmail";
export type ProfileEmail = import("./profileEmail").ProfileEmail;
export const ProfileEmail: typeof import("./profileEmail").ProfileEmail = null as any;
utilities.lazyLoad(exports, ["ProfileEmail"], () => require("./profileEmail"));

export { ProfilePublicKeyArgs, ProfilePublicKeyState } from "./profilePublicKey";
export type ProfilePublicKey = import("./profilePublicKey").ProfilePublicKey;
export const ProfilePublicKey: typeof import("./profilePublicKey").ProfilePublicKey = null as any;
utilities.lazyLoad(exports, ["ProfilePublicKey"], () => require("./profilePublicKey"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProjectGroupArgs, ProjectGroupState } from "./projectGroup";
export type ProjectGroup = import("./projectGroup").ProjectGroup;
export const ProjectGroup: typeof import("./projectGroup").ProjectGroup = null as any;
utilities.lazyLoad(exports, ["ProjectGroup"], () => require("./projectGroup"));

export { ProjectMemberArgs, ProjectMemberState } from "./projectMember";
export type ProjectMember = import("./projectMember").ProjectMember;
export const ProjectMember: typeof import("./projectMember").ProjectMember = null as any;
utilities.lazyLoad(exports, ["ProjectMember"], () => require("./projectMember"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SsoArgs, SsoState } from "./sso";
export type Sso = import("./sso").Sso;
export const Sso: typeof import("./sso").Sso = null as any;
utilities.lazyLoad(exports, ["Sso"], () => require("./sso"));

export { VariableArgs, VariableState } from "./variable";
export type Variable = import("./variable").Variable;
export const Variable: typeof import("./variable").Variable = null as any;
utilities.lazyLoad(exports, ["Variable"], () => require("./variable"));

export { VariableSshKeyArgs, VariableSshKeyState } from "./variableSshKey";
export type VariableSshKey = import("./variableSshKey").VariableSshKey;
export const VariableSshKey: typeof import("./variableSshKey").VariableSshKey = null as any;
utilities.lazyLoad(exports, ["VariableSshKey"], () => require("./variableSshKey"));

export { WebhookArgs, WebhookState } from "./webhook";
export type Webhook = import("./webhook").Webhook;
export const Webhook: typeof import("./webhook").Webhook = null as any;
utilities.lazyLoad(exports, ["Webhook"], () => require("./webhook"));

export { WorkspaceArgs, WorkspaceState } from "./workspace";
export type Workspace = import("./workspace").Workspace;
export const Workspace: typeof import("./workspace").Workspace = null as any;
utilities.lazyLoad(exports, ["Workspace"], () => require("./workspace"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "buddy:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "buddy:index/groupMember:GroupMember":
                return new GroupMember(name, <any>undefined, { urn })
            case "buddy:index/integration:Integration":
                return new Integration(name, <any>undefined, { urn })
            case "buddy:index/member:Member":
                return new Member(name, <any>undefined, { urn })
            case "buddy:index/permission:Permission":
                return new Permission(name, <any>undefined, { urn })
            case "buddy:index/pipeline:Pipeline":
                return new Pipeline(name, <any>undefined, { urn })
            case "buddy:index/profile:Profile":
                return new Profile(name, <any>undefined, { urn })
            case "buddy:index/profileEmail:ProfileEmail":
                return new ProfileEmail(name, <any>undefined, { urn })
            case "buddy:index/profilePublicKey:ProfilePublicKey":
                return new ProfilePublicKey(name, <any>undefined, { urn })
            case "buddy:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "buddy:index/projectGroup:ProjectGroup":
                return new ProjectGroup(name, <any>undefined, { urn })
            case "buddy:index/projectMember:ProjectMember":
                return new ProjectMember(name, <any>undefined, { urn })
            case "buddy:index/sso:Sso":
                return new Sso(name, <any>undefined, { urn })
            case "buddy:index/variable:Variable":
                return new Variable(name, <any>undefined, { urn })
            case "buddy:index/variableSshKey:VariableSshKey":
                return new VariableSshKey(name, <any>undefined, { urn })
            case "buddy:index/webhook:Webhook":
                return new Webhook(name, <any>undefined, { urn })
            case "buddy:index/workspace:Workspace":
                return new Workspace(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("buddy", "index/group", _module)
pulumi.runtime.registerResourceModule("buddy", "index/groupMember", _module)
pulumi.runtime.registerResourceModule("buddy", "index/integration", _module)
pulumi.runtime.registerResourceModule("buddy", "index/member", _module)
pulumi.runtime.registerResourceModule("buddy", "index/permission", _module)
pulumi.runtime.registerResourceModule("buddy", "index/pipeline", _module)
pulumi.runtime.registerResourceModule("buddy", "index/profile", _module)
pulumi.runtime.registerResourceModule("buddy", "index/profileEmail", _module)
pulumi.runtime.registerResourceModule("buddy", "index/profilePublicKey", _module)
pulumi.runtime.registerResourceModule("buddy", "index/project", _module)
pulumi.runtime.registerResourceModule("buddy", "index/projectGroup", _module)
pulumi.runtime.registerResourceModule("buddy", "index/projectMember", _module)
pulumi.runtime.registerResourceModule("buddy", "index/sso", _module)
pulumi.runtime.registerResourceModule("buddy", "index/variable", _module)
pulumi.runtime.registerResourceModule("buddy", "index/variableSshKey", _module)
pulumi.runtime.registerResourceModule("buddy", "index/webhook", _module)
pulumi.runtime.registerResourceModule("buddy", "index/workspace", _module)
pulumi.runtime.registerResourcePackage("buddy", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:buddy") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
