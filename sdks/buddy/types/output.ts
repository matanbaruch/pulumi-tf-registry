// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetGroupMembersMember {
    admin: boolean;
    avatarUrl: string;
    email: string;
    htmlUrl: string;
    memberId: number;
    name: string;
    status: string;
    workspaceOwner: boolean;
}

export interface GetGroupsGroup {
    groupId: number;
    htmlUrl: string;
    name: string;
}

export interface GetIntegrationsIntegration {
    htmlUrl: string;
    identifier: string;
    integrationId: string;
    name: string;
    type: string;
}

export interface GetMembersMember {
    admin: boolean;
    avatarUrl: string;
    email: string;
    htmlUrl: string;
    memberId: number;
    name: string;
    status: string;
    workspaceOwner: boolean;
}

export interface GetPermissionsPermission {
    htmlUrl: string;
    name: string;
    permissionId: number;
    pipelineAccessLevel: string;
    projectTeamAccessLevel: string;
    repositoryAccessLevel: string;
    sandboxAccessLevel: string;
    type: string;
}

export interface GetPipelineEvent {
    refs: string[];
    type: string;
}

export interface GetPipelineGitConfig {
    branch: string;
    path: string;
    project: string;
}

export interface GetPipelineRemoteParameter {
    key: string;
    value: string;
}

export interface GetPipelinesPipeline {
    definitionSource: string;
    disabled: boolean;
    disablingReason: string;
    events: outputs.GetPipelinesPipelineEvent[];
    gitConfig: outputs.GetPipelinesPipelineGitConfig;
    gitConfigRef: string;
    htmlUrl: string;
    lastExecutionRevision: string;
    lastExecutionStatus: string;
    name: string;
    on: string;
    pipelineId: number;
    priority: string;
    refs: string[];
    remoteBranch: string;
    remoteParameters: outputs.GetPipelinesPipelineRemoteParameter[];
    remotePath: string;
    remoteProjectName: string;
    tags: string[];
}

export interface GetPipelinesPipelineEvent {
    refs: string[];
    type: string;
}

export interface GetPipelinesPipelineGitConfig {
    branch: string;
    path: string;
    project: string;
}

export interface GetPipelinesPipelineRemoteParameter {
    key: string;
    value: string;
}

export interface GetProjectGroupPermission {
    htmlUrl: string;
    name: string;
    permissionId: number;
    pipelineAccessLevel: string;
    projectTeamAccessLevel: string;
    repositoryAccessLevel: string;
    sandboxAccessLevel: string;
    type: string;
}

export interface GetProjectGroupsGroup {
    groupId: number;
    htmlUrl: string;
    name: string;
}

export interface GetProjectMemberPermission {
    htmlUrl: string;
    name: string;
    permissionId: number;
    pipelineAccessLevel: string;
    projectTeamAccessLevel: string;
    repositoryAccessLevel: string;
    sandboxAccessLevel: string;
    type: string;
}

export interface GetProjectMembersMember {
    admin: boolean;
    avatarUrl: string;
    email: string;
    htmlUrl: string;
    memberId: number;
    name: string;
    status: string;
    workspaceOwner: boolean;
}

export interface GetProjectsProject {
    displayName: string;
    htmlUrl: string;
    name: string;
    status: string;
}

export interface GetVariablesSshKeysVariable {
    checksum: string;
    description: string;
    encrypted: boolean;
    fileChmod: string;
    filePath: string;
    filePlace: string;
    key: string;
    keyFingerprint: string;
    publicValue: string;
    settable: boolean;
    value: string;
    variableId: number;
}

export interface GetVariablesVariable {
    description: string;
    encrypted: boolean;
    key: string;
    settable: boolean;
    value: string;
    variableId: number;
}

export interface GetWebhooksWebhook {
    htmlUrl: string;
    targetUrl: string;
    webhookId: number;
}

export interface GetWorkspacesWorkspace {
    domain: string;
    htmlUrl: string;
    name: string;
    workspaceId: number;
}

export interface IntegrationPermission {
    admins?: string;
    groups?: outputs.IntegrationPermissionGroup[];
    others?: string;
    users?: outputs.IntegrationPermissionUser[];
}

export interface IntegrationPermissionGroup {
    accessLevel: string;
    id: number;
}

export interface IntegrationPermissionUser {
    accessLevel: string;
    id: number;
}

export interface IntegrationRoleAssumption {
    /**
     * The integration's AWS role ARN to assume
     */
    arn: string;
    /**
     * The integration's AWS session duration in seconds
     */
    duration?: number;
    /**
     * The integration's AWS external ID to send when assuming AWS role
     */
    externalId?: string;
}

export interface PipelineCreator {
    admin: boolean;
    avatarUrl: string;
    email: string;
    htmlUrl: string;
    memberId: number;
    name: string;
    status: string;
    workspaceOwner: boolean;
}

export interface PipelineEvent {
    refs: string[];
    type: string;
}

export interface PipelineGitConfig {
    branch: string;
    path: string;
    project: string;
}

export interface PipelinePermission {
    groups?: outputs.PipelinePermissionGroup[];
    others?: string;
    users?: outputs.PipelinePermissionUser[];
}

export interface PipelinePermissionGroup {
    accessLevel: string;
    id: number;
}

export interface PipelinePermissionUser {
    accessLevel: string;
    id: number;
}

export interface PipelineProject {
    displayName: string;
    htmlUrl: string;
    name: string;
    status: string;
}

export interface PipelineRemoteParameter {
    key: string;
    value: string;
}

export interface PipelineTriggerCondition {
    condition: string;
    days?: number[];
    hours?: number[];
    paths?: string[];
    pipelineName?: string;
    projectName?: string;
    triggerGroup?: string;
    triggerUser?: string;
    variableKey?: string;
    variableValue?: string;
    zoneId?: string;
}

export interface ProjectCreatedBy {
    admin: boolean;
    avatarUrl: string;
    email: string;
    htmlUrl: string;
    memberId: number;
    name: string;
    status: string;
    workspaceOwner: boolean;
}

export interface ProjectGroupPermission {
    htmlUrl: string;
    name: string;
    permissionId: number;
    pipelineAccessLevel: string;
    projectTeamAccessLevel: string;
    repositoryAccessLevel: string;
    sandboxAccessLevel: string;
    type: string;
}

export interface ProjectMemberPermission {
    htmlUrl: string;
    name: string;
    permissionId: number;
    pipelineAccessLevel: string;
    projectTeamAccessLevel: string;
    repositoryAccessLevel: string;
    sandboxAccessLevel: string;
    type: string;
}

