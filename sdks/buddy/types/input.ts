// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface IntegrationPermission {
    admins?: pulumi.Input<string>;
    groups?: pulumi.Input<pulumi.Input<inputs.IntegrationPermissionGroup>[]>;
    others?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<inputs.IntegrationPermissionUser>[]>;
}

export interface IntegrationPermissionGroup {
    accessLevel: pulumi.Input<string>;
    id: pulumi.Input<number>;
}

export interface IntegrationPermissionUser {
    accessLevel: pulumi.Input<string>;
    id: pulumi.Input<number>;
}

export interface IntegrationRoleAssumption {
    /**
     * The integration's AWS role ARN to assume
     */
    arn: pulumi.Input<string>;
    /**
     * The integration's AWS session duration in seconds
     */
    duration?: pulumi.Input<number>;
    /**
     * The integration's AWS external ID to send when assuming AWS role
     */
    externalId?: pulumi.Input<string>;
}

export interface PipelineCreator {
    admin?: pulumi.Input<boolean>;
    avatarUrl?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    htmlUrl?: pulumi.Input<string>;
    memberId?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    workspaceOwner?: pulumi.Input<boolean>;
}

export interface PipelineEvent {
    refs: pulumi.Input<pulumi.Input<string>[]>;
    type: pulumi.Input<string>;
}

export interface PipelineGitConfig {
    branch: pulumi.Input<string>;
    path: pulumi.Input<string>;
    project: pulumi.Input<string>;
}

export interface PipelinePermission {
    groups?: pulumi.Input<pulumi.Input<inputs.PipelinePermissionGroup>[]>;
    others?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<inputs.PipelinePermissionUser>[]>;
}

export interface PipelinePermissionGroup {
    accessLevel: pulumi.Input<string>;
    id: pulumi.Input<number>;
}

export interface PipelinePermissionUser {
    accessLevel: pulumi.Input<string>;
    id: pulumi.Input<number>;
}

export interface PipelineProject {
    displayName?: pulumi.Input<string>;
    htmlUrl?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface PipelineRemoteParameter {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface PipelineTriggerCondition {
    condition: pulumi.Input<string>;
    days?: pulumi.Input<pulumi.Input<number>[]>;
    hours?: pulumi.Input<pulumi.Input<number>[]>;
    paths?: pulumi.Input<pulumi.Input<string>[]>;
    pipelineName?: pulumi.Input<string>;
    projectName?: pulumi.Input<string>;
    triggerGroup?: pulumi.Input<string>;
    triggerUser?: pulumi.Input<string>;
    variableKey?: pulumi.Input<string>;
    variableValue?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

export interface ProjectCreatedBy {
    admin?: pulumi.Input<boolean>;
    avatarUrl?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    htmlUrl?: pulumi.Input<string>;
    memberId?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    workspaceOwner?: pulumi.Input<boolean>;
}

export interface ProjectGroupPermission {
    htmlUrl?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    permissionId?: pulumi.Input<number>;
    pipelineAccessLevel?: pulumi.Input<string>;
    projectTeamAccessLevel?: pulumi.Input<string>;
    repositoryAccessLevel?: pulumi.Input<string>;
    sandboxAccessLevel?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ProjectMemberPermission {
    htmlUrl?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    permissionId?: pulumi.Input<number>;
    pipelineAccessLevel?: pulumi.Input<string>;
    projectTeamAccessLevel?: pulumi.Input<string>;
    repositoryAccessLevel?: pulumi.Input<string>;
    sandboxAccessLevel?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}
