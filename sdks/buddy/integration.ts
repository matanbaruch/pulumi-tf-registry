// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Integration extends pulumi.CustomResource {
    /**
     * Get an existing Integration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationState, opts?: pulumi.CustomResourceOptions): Integration {
        return new Integration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'buddy:index/integration:Integration';

    /**
     * Returns true if the given object is an instance of Integration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Integration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Integration.__pulumiType;
    }

    /**
     * The integration's access key. Provide for: `DO_SPACES`, `AMAZON`, `PUSHOVER`
     */
    public readonly accessKey!: pulumi.Output<string | undefined>;
    /**
     * Defines whether or not integration can be used in all pipelines
     */
    public readonly allPipelinesAllowed!: pulumi.Output<boolean>;
    /**
     * List of pipeline IDs that is allowed to use the integration
     */
    public readonly allowedPipelines!: pulumi.Output<number[]>;
    /**
     * The integration's API key. Provide for: `CLOUDFLARE`, `GOOGLE_SERVICE_ACCOUNT`, `STACK_HAWK`
     */
    public readonly apiKey!: pulumi.Output<string | undefined>;
    /**
     * The integration's application's ID. Provide for: `AZURE_CLOUD`
     */
    public readonly appId!: pulumi.Output<string | undefined>;
    /**
     * The integration's audience. Provide for OIDC with: `AMAZON`, `AZURE_CLOUD`, `GOOGLE_SERVICE_ACCOUNT`
     */
    public readonly audience!: pulumi.Output<string | undefined>;
    /**
     * The integration's auth type. Provide for: `AMAZON`, `AZURE_CLOUD`, `GOOGLE_SERVICE_ACCOUNT`. Allowed: `DEFAULT, TRUSTED,
     * OIDC`
     */
    public readonly authType!: pulumi.Output<string>;
    /**
     * The workspace's URL handle
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * The integration's email. Provide for: `CLOUDFLARE`
     */
    public readonly email!: pulumi.Output<string | undefined>;
    /**
     * The integration's google config. Provide for `GOOGLE_SERVICE_ACCOUNT` OIDC
     */
    public readonly googleConfig!: pulumi.Output<string | undefined>;
    /**
     * The integration's google project. Provide for `GOOGLE_SERVICE_ACCOUNT` OIDC
     */
    public readonly googleProject!: pulumi.Output<string | undefined>;
    /**
     * The integration's URL
     */
    public /*out*/ readonly htmlUrl!: pulumi.Output<string>;
    /**
     * The integration's identifier
     */
    public readonly identifier!: pulumi.Output<string>;
    /**
     * The integration's ID
     */
    public /*out*/ readonly integrationId!: pulumi.Output<string>;
    /**
     * The integration's name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The integration's partner token. Provide for: `SHOPIFY`
     */
    public readonly partnerToken!: pulumi.Output<string | undefined>;
    /**
     * The integration's password. Provide for: `AZURE_CLOUD`, `UPCLOUD`, `DOCKER_HUB`
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * The integration's permissions
     */
    public readonly permissions!: pulumi.Output<outputs.IntegrationPermission[] | undefined>;
    /**
     * The project's name. Provide along with scopes: `PROJECT`
     */
    public readonly projectName!: pulumi.Output<string>;
    /**
     * The integration's AWS role to assume. Provide for: `AMAZON`
     */
    public readonly roleAssumptions!: pulumi.Output<outputs.IntegrationRoleAssumption[] | undefined>;
    /**
     * The integration's scope. Allowed: `WORKSPACE` - all workspace members can use the integration `PROJECT` - only project
     * members can use the integration
     */
    public readonly scope!: pulumi.Output<string>;
    /**
     * The integration's secret key. Provide for: `DO_SPACES`, `AMAZON`
     */
    public readonly secretKey!: pulumi.Output<string | undefined>;
    /**
     * The integration's shop. Provide for: `SHOPIFY`
     */
    public readonly shop!: pulumi.Output<string | undefined>;
    /**
     * The integration's tenant's ID. Provide for: `AZURE_CLOUD`
     */
    public readonly tenantId!: pulumi.Output<string | undefined>;
    /**
     * The integration's token. Provide for: `DIGITAL_OCEAN`, `SHOPIFY`, `RACKSPACE`, `CLOUDFLARE`, `NEW_RELIC`, `SENTRY`,
     * `ROLLBAR`, `DATADOG`, `HONEYBADGER`, `VULTR`, `SENTRY_ENTERPRISE`, `LOGGLY`, `FIREBASE`, `GHOST_INSPECTOR`, `PUSHOVER`,
     * `GIT_LAB`, `GIT_HUB`
     */
    public readonly token!: pulumi.Output<string | undefined>;
    /**
     * The integration's type. Allowed: `DIGITAL_OCEAN`, `AMAZON`, `SHOPIFY`, `PUSHOVER`, `RACKSPACE`, `CLOUDFLARE`,
     * `NEW_RELIC`, `SENTRY`, `ROLLBAR`, `DATADOG`, `DO_SPACES`, `HONEYBADGER`, `VULTR`, `SENTRY_ENTERPRISE`, `LOGGLY`,
     * `FIREBASE`, `UPCLOUD`, `GHOST_INSPECTOR`, `AZURE_CLOUD`, `DOCKER_HUB`, `GOOGLE_SERVICE_ACCOUNT`, `GIT_HUB`, `GIT_LAB`,
     * `STACK_HAWK`
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The integration's username. Provide for: `UPCLOUD`, `RACKSPACE`, `DOCKER_HUB`
     */
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a Integration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationArgs | IntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationState | undefined;
            resourceInputs["accessKey"] = state ? state.accessKey : undefined;
            resourceInputs["allPipelinesAllowed"] = state ? state.allPipelinesAllowed : undefined;
            resourceInputs["allowedPipelines"] = state ? state.allowedPipelines : undefined;
            resourceInputs["apiKey"] = state ? state.apiKey : undefined;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["audience"] = state ? state.audience : undefined;
            resourceInputs["authType"] = state ? state.authType : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["googleConfig"] = state ? state.googleConfig : undefined;
            resourceInputs["googleProject"] = state ? state.googleProject : undefined;
            resourceInputs["htmlUrl"] = state ? state.htmlUrl : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["integrationId"] = state ? state.integrationId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["partnerToken"] = state ? state.partnerToken : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["roleAssumptions"] = state ? state.roleAssumptions : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["secretKey"] = state ? state.secretKey : undefined;
            resourceInputs["shop"] = state ? state.shop : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as IntegrationArgs | undefined;
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["accessKey"] = args?.accessKey ? pulumi.secret(args.accessKey) : undefined;
            resourceInputs["allPipelinesAllowed"] = args ? args.allPipelinesAllowed : undefined;
            resourceInputs["allowedPipelines"] = args ? args.allowedPipelines : undefined;
            resourceInputs["apiKey"] = args?.apiKey ? pulumi.secret(args.apiKey) : undefined;
            resourceInputs["appId"] = args ? args.appId : undefined;
            resourceInputs["audience"] = args ? args.audience : undefined;
            resourceInputs["authType"] = args ? args.authType : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["email"] = args?.email ? pulumi.secret(args.email) : undefined;
            resourceInputs["googleConfig"] = args ? args.googleConfig : undefined;
            resourceInputs["googleProject"] = args ? args.googleProject : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["partnerToken"] = args?.partnerToken ? pulumi.secret(args.partnerToken) : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["roleAssumptions"] = args ? args.roleAssumptions : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["secretKey"] = args?.secretKey ? pulumi.secret(args.secretKey) : undefined;
            resourceInputs["shop"] = args ? args.shop : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["token"] = args?.token ? pulumi.secret(args.token) : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["htmlUrl"] = undefined /*out*/;
            resourceInputs["integrationId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accessKey", "apiKey", "email", "partnerToken", "password", "secretKey", "token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Integration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Integration resources.
 */
export interface IntegrationState {
    /**
     * The integration's access key. Provide for: `DO_SPACES`, `AMAZON`, `PUSHOVER`
     */
    accessKey?: pulumi.Input<string>;
    /**
     * Defines whether or not integration can be used in all pipelines
     */
    allPipelinesAllowed?: pulumi.Input<boolean>;
    /**
     * List of pipeline IDs that is allowed to use the integration
     */
    allowedPipelines?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The integration's API key. Provide for: `CLOUDFLARE`, `GOOGLE_SERVICE_ACCOUNT`, `STACK_HAWK`
     */
    apiKey?: pulumi.Input<string>;
    /**
     * The integration's application's ID. Provide for: `AZURE_CLOUD`
     */
    appId?: pulumi.Input<string>;
    /**
     * The integration's audience. Provide for OIDC with: `AMAZON`, `AZURE_CLOUD`, `GOOGLE_SERVICE_ACCOUNT`
     */
    audience?: pulumi.Input<string>;
    /**
     * The integration's auth type. Provide for: `AMAZON`, `AZURE_CLOUD`, `GOOGLE_SERVICE_ACCOUNT`. Allowed: `DEFAULT, TRUSTED,
     * OIDC`
     */
    authType?: pulumi.Input<string>;
    /**
     * The workspace's URL handle
     */
    domain?: pulumi.Input<string>;
    /**
     * The integration's email. Provide for: `CLOUDFLARE`
     */
    email?: pulumi.Input<string>;
    /**
     * The integration's google config. Provide for `GOOGLE_SERVICE_ACCOUNT` OIDC
     */
    googleConfig?: pulumi.Input<string>;
    /**
     * The integration's google project. Provide for `GOOGLE_SERVICE_ACCOUNT` OIDC
     */
    googleProject?: pulumi.Input<string>;
    /**
     * The integration's URL
     */
    htmlUrl?: pulumi.Input<string>;
    /**
     * The integration's identifier
     */
    identifier?: pulumi.Input<string>;
    /**
     * The integration's ID
     */
    integrationId?: pulumi.Input<string>;
    /**
     * The integration's name
     */
    name?: pulumi.Input<string>;
    /**
     * The integration's partner token. Provide for: `SHOPIFY`
     */
    partnerToken?: pulumi.Input<string>;
    /**
     * The integration's password. Provide for: `AZURE_CLOUD`, `UPCLOUD`, `DOCKER_HUB`
     */
    password?: pulumi.Input<string>;
    /**
     * The integration's permissions
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.IntegrationPermission>[]>;
    /**
     * The project's name. Provide along with scopes: `PROJECT`
     */
    projectName?: pulumi.Input<string>;
    /**
     * The integration's AWS role to assume. Provide for: `AMAZON`
     */
    roleAssumptions?: pulumi.Input<pulumi.Input<inputs.IntegrationRoleAssumption>[]>;
    /**
     * The integration's scope. Allowed: `WORKSPACE` - all workspace members can use the integration `PROJECT` - only project
     * members can use the integration
     */
    scope?: pulumi.Input<string>;
    /**
     * The integration's secret key. Provide for: `DO_SPACES`, `AMAZON`
     */
    secretKey?: pulumi.Input<string>;
    /**
     * The integration's shop. Provide for: `SHOPIFY`
     */
    shop?: pulumi.Input<string>;
    /**
     * The integration's tenant's ID. Provide for: `AZURE_CLOUD`
     */
    tenantId?: pulumi.Input<string>;
    /**
     * The integration's token. Provide for: `DIGITAL_OCEAN`, `SHOPIFY`, `RACKSPACE`, `CLOUDFLARE`, `NEW_RELIC`, `SENTRY`,
     * `ROLLBAR`, `DATADOG`, `HONEYBADGER`, `VULTR`, `SENTRY_ENTERPRISE`, `LOGGLY`, `FIREBASE`, `GHOST_INSPECTOR`, `PUSHOVER`,
     * `GIT_LAB`, `GIT_HUB`
     */
    token?: pulumi.Input<string>;
    /**
     * The integration's type. Allowed: `DIGITAL_OCEAN`, `AMAZON`, `SHOPIFY`, `PUSHOVER`, `RACKSPACE`, `CLOUDFLARE`,
     * `NEW_RELIC`, `SENTRY`, `ROLLBAR`, `DATADOG`, `DO_SPACES`, `HONEYBADGER`, `VULTR`, `SENTRY_ENTERPRISE`, `LOGGLY`,
     * `FIREBASE`, `UPCLOUD`, `GHOST_INSPECTOR`, `AZURE_CLOUD`, `DOCKER_HUB`, `GOOGLE_SERVICE_ACCOUNT`, `GIT_HUB`, `GIT_LAB`,
     * `STACK_HAWK`
     */
    type?: pulumi.Input<string>;
    /**
     * The integration's username. Provide for: `UPCLOUD`, `RACKSPACE`, `DOCKER_HUB`
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Integration resource.
 */
export interface IntegrationArgs {
    /**
     * The integration's access key. Provide for: `DO_SPACES`, `AMAZON`, `PUSHOVER`
     */
    accessKey?: pulumi.Input<string>;
    /**
     * Defines whether or not integration can be used in all pipelines
     */
    allPipelinesAllowed?: pulumi.Input<boolean>;
    /**
     * List of pipeline IDs that is allowed to use the integration
     */
    allowedPipelines?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The integration's API key. Provide for: `CLOUDFLARE`, `GOOGLE_SERVICE_ACCOUNT`, `STACK_HAWK`
     */
    apiKey?: pulumi.Input<string>;
    /**
     * The integration's application's ID. Provide for: `AZURE_CLOUD`
     */
    appId?: pulumi.Input<string>;
    /**
     * The integration's audience. Provide for OIDC with: `AMAZON`, `AZURE_CLOUD`, `GOOGLE_SERVICE_ACCOUNT`
     */
    audience?: pulumi.Input<string>;
    /**
     * The integration's auth type. Provide for: `AMAZON`, `AZURE_CLOUD`, `GOOGLE_SERVICE_ACCOUNT`. Allowed: `DEFAULT, TRUSTED,
     * OIDC`
     */
    authType?: pulumi.Input<string>;
    /**
     * The workspace's URL handle
     */
    domain: pulumi.Input<string>;
    /**
     * The integration's email. Provide for: `CLOUDFLARE`
     */
    email?: pulumi.Input<string>;
    /**
     * The integration's google config. Provide for `GOOGLE_SERVICE_ACCOUNT` OIDC
     */
    googleConfig?: pulumi.Input<string>;
    /**
     * The integration's google project. Provide for `GOOGLE_SERVICE_ACCOUNT` OIDC
     */
    googleProject?: pulumi.Input<string>;
    /**
     * The integration's identifier
     */
    identifier?: pulumi.Input<string>;
    /**
     * The integration's name
     */
    name?: pulumi.Input<string>;
    /**
     * The integration's partner token. Provide for: `SHOPIFY`
     */
    partnerToken?: pulumi.Input<string>;
    /**
     * The integration's password. Provide for: `AZURE_CLOUD`, `UPCLOUD`, `DOCKER_HUB`
     */
    password?: pulumi.Input<string>;
    /**
     * The integration's permissions
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.IntegrationPermission>[]>;
    /**
     * The project's name. Provide along with scopes: `PROJECT`
     */
    projectName?: pulumi.Input<string>;
    /**
     * The integration's AWS role to assume. Provide for: `AMAZON`
     */
    roleAssumptions?: pulumi.Input<pulumi.Input<inputs.IntegrationRoleAssumption>[]>;
    /**
     * The integration's scope. Allowed: `WORKSPACE` - all workspace members can use the integration `PROJECT` - only project
     * members can use the integration
     */
    scope: pulumi.Input<string>;
    /**
     * The integration's secret key. Provide for: `DO_SPACES`, `AMAZON`
     */
    secretKey?: pulumi.Input<string>;
    /**
     * The integration's shop. Provide for: `SHOPIFY`
     */
    shop?: pulumi.Input<string>;
    /**
     * The integration's tenant's ID. Provide for: `AZURE_CLOUD`
     */
    tenantId?: pulumi.Input<string>;
    /**
     * The integration's token. Provide for: `DIGITAL_OCEAN`, `SHOPIFY`, `RACKSPACE`, `CLOUDFLARE`, `NEW_RELIC`, `SENTRY`,
     * `ROLLBAR`, `DATADOG`, `HONEYBADGER`, `VULTR`, `SENTRY_ENTERPRISE`, `LOGGLY`, `FIREBASE`, `GHOST_INSPECTOR`, `PUSHOVER`,
     * `GIT_LAB`, `GIT_HUB`
     */
    token?: pulumi.Input<string>;
    /**
     * The integration's type. Allowed: `DIGITAL_OCEAN`, `AMAZON`, `SHOPIFY`, `PUSHOVER`, `RACKSPACE`, `CLOUDFLARE`,
     * `NEW_RELIC`, `SENTRY`, `ROLLBAR`, `DATADOG`, `DO_SPACES`, `HONEYBADGER`, `VULTR`, `SENTRY_ENTERPRISE`, `LOGGLY`,
     * `FIREBASE`, `UPCLOUD`, `GHOST_INSPECTOR`, `AZURE_CLOUD`, `DOCKER_HUB`, `GOOGLE_SERVICE_ACCOUNT`, `GIT_HUB`, `GIT_LAB`,
     * `STACK_HAWK`
     */
    type: pulumi.Input<string>;
    /**
     * The integration's username. Provide for: `UPCLOUD`, `RACKSPACE`, `DOCKER_HUB`
     */
    username?: pulumi.Input<string>;
}
