// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Device extends pulumi.CustomResource {
    /**
     * Get an existing Device resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeviceState, opts?: pulumi.CustomResourceOptions): Device {
        return new Device(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nso:index/device:Device';

    /**
     * Returns true if the given object is an instance of Device.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Device {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Device.__pulumiType;
    }

    /**
     * IP address or host name for the management interface on the device.
     */
    public readonly address!: pulumi.Output<string | undefined>;
    /**
     * Administrative state. - Choices: `locked`, `unlocked`, `southbound-locked`, `config-locked`, `call-home`
     */
    public readonly adminState!: pulumi.Output<string | undefined>;
    /**
     * The authentication credentials used when connecting to this managed device.
     */
    public readonly authgroup!: pulumi.Output<string | undefined>;
    /**
     * CLI NED ID.
     */
    public readonly cliNedId!: pulumi.Output<string | undefined>;
    /**
     * An instance name from the provider configuration.
     */
    public readonly instance!: pulumi.Output<string | undefined>;
    /**
     * A string uniquely identifying the managed device.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * NETCONF NED ID.
     */
    public readonly netconfNetId!: pulumi.Output<string | undefined>;
    /**
     * Port for the management interface on the device. If this leaf is not configured, NCS will use a default value based on
     * the type of device. For example, a NETCONF device uses port 830, a CLI device over SSH uses port 22, and an SNMP device
     * uses port 161. - Range: `0`-`65535`
     */
    public readonly port!: pulumi.Output<number | undefined>;

    /**
     * Create a Device resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DeviceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeviceArgs | DeviceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeviceState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["adminState"] = state ? state.adminState : undefined;
            resourceInputs["authgroup"] = state ? state.authgroup : undefined;
            resourceInputs["cliNedId"] = state ? state.cliNedId : undefined;
            resourceInputs["instance"] = state ? state.instance : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["netconfNetId"] = state ? state.netconfNetId : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
        } else {
            const args = argsOrState as DeviceArgs | undefined;
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["adminState"] = args ? args.adminState : undefined;
            resourceInputs["authgroup"] = args ? args.authgroup : undefined;
            resourceInputs["cliNedId"] = args ? args.cliNedId : undefined;
            resourceInputs["instance"] = args ? args.instance : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["netconfNetId"] = args ? args.netconfNetId : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Device.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Device resources.
 */
export interface DeviceState {
    /**
     * IP address or host name for the management interface on the device.
     */
    address?: pulumi.Input<string>;
    /**
     * Administrative state. - Choices: `locked`, `unlocked`, `southbound-locked`, `config-locked`, `call-home`
     */
    adminState?: pulumi.Input<string>;
    /**
     * The authentication credentials used when connecting to this managed device.
     */
    authgroup?: pulumi.Input<string>;
    /**
     * CLI NED ID.
     */
    cliNedId?: pulumi.Input<string>;
    /**
     * An instance name from the provider configuration.
     */
    instance?: pulumi.Input<string>;
    /**
     * A string uniquely identifying the managed device.
     */
    name?: pulumi.Input<string>;
    /**
     * NETCONF NED ID.
     */
    netconfNetId?: pulumi.Input<string>;
    /**
     * Port for the management interface on the device. If this leaf is not configured, NCS will use a default value based on
     * the type of device. For example, a NETCONF device uses port 830, a CLI device over SSH uses port 22, and an SNMP device
     * uses port 161. - Range: `0`-`65535`
     */
    port?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Device resource.
 */
export interface DeviceArgs {
    /**
     * IP address or host name for the management interface on the device.
     */
    address?: pulumi.Input<string>;
    /**
     * Administrative state. - Choices: `locked`, `unlocked`, `southbound-locked`, `config-locked`, `call-home`
     */
    adminState?: pulumi.Input<string>;
    /**
     * The authentication credentials used when connecting to this managed device.
     */
    authgroup?: pulumi.Input<string>;
    /**
     * CLI NED ID.
     */
    cliNedId?: pulumi.Input<string>;
    /**
     * An instance name from the provider configuration.
     */
    instance?: pulumi.Input<string>;
    /**
     * A string uniquely identifying the managed device.
     */
    name?: pulumi.Input<string>;
    /**
     * NETCONF NED ID.
     */
    netconfNetId?: pulumi.Input<string>;
    /**
     * Port for the management interface on the device. If this leaf is not configured, NCS will use a default value based on
     * the type of device. For example, a NETCONF device uses port 830, a CLI device over SSH uses port 22, and an SNMP device
     * uses port 161. - Range: `0`-`65535`
     */
    port?: pulumi.Input<number>;
}
