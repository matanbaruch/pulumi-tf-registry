// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DeviceArgs, DeviceState } from "./device";
export type Device = import("./device").Device;
export const Device: typeof import("./device").Device = null as any;
utilities.lazyLoad(exports, ["Device"], () => require("./device"));

export { DeviceConfigArgs, DeviceConfigState } from "./deviceConfig";
export type DeviceConfig = import("./deviceConfig").DeviceConfig;
export const DeviceConfig: typeof import("./deviceConfig").DeviceConfig = null as any;
utilities.lazyLoad(exports, ["DeviceConfig"], () => require("./deviceConfig"));

export { DeviceGroupArgs, DeviceGroupState } from "./deviceGroup";
export type DeviceGroup = import("./deviceGroup").DeviceGroup;
export const DeviceGroup: typeof import("./deviceGroup").DeviceGroup = null as any;
utilities.lazyLoad(exports, ["DeviceGroup"], () => require("./deviceGroup"));

export { GetDeviceArgs, GetDeviceResult, GetDeviceOutputArgs } from "./getDevice";
export const getDevice: typeof import("./getDevice").getDevice = null as any;
export const getDeviceOutput: typeof import("./getDevice").getDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getDevice","getDeviceOutput"], () => require("./getDevice"));

export { GetDeviceConfigArgs, GetDeviceConfigResult, GetDeviceConfigOutputArgs } from "./getDeviceConfig";
export const getDeviceConfig: typeof import("./getDeviceConfig").getDeviceConfig = null as any;
export const getDeviceConfigOutput: typeof import("./getDeviceConfig").getDeviceConfigOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceConfig","getDeviceConfigOutput"], () => require("./getDeviceConfig"));

export { GetDeviceGroupArgs, GetDeviceGroupResult, GetDeviceGroupOutputArgs } from "./getDeviceGroup";
export const getDeviceGroup: typeof import("./getDeviceGroup").getDeviceGroup = null as any;
export const getDeviceGroupOutput: typeof import("./getDeviceGroup").getDeviceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceGroup","getDeviceGroupOutput"], () => require("./getDeviceGroup"));

export { GetRestconfArgs, GetRestconfResult, GetRestconfOutputArgs } from "./getRestconf";
export const getRestconf: typeof import("./getRestconf").getRestconf = null as any;
export const getRestconfOutput: typeof import("./getRestconf").getRestconfOutput = null as any;
utilities.lazyLoad(exports, ["getRestconf","getRestconfOutput"], () => require("./getRestconf"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RestconfArgs, RestconfState } from "./restconf";
export type Restconf = import("./restconf").Restconf;
export const Restconf: typeof import("./restconf").Restconf = null as any;
utilities.lazyLoad(exports, ["Restconf"], () => require("./restconf"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "nso:index/device:Device":
                return new Device(name, <any>undefined, { urn })
            case "nso:index/deviceConfig:DeviceConfig":
                return new DeviceConfig(name, <any>undefined, { urn })
            case "nso:index/deviceGroup:DeviceGroup":
                return new DeviceGroup(name, <any>undefined, { urn })
            case "nso:index/restconf:Restconf":
                return new Restconf(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("nso", "index/device", _module)
pulumi.runtime.registerResourceModule("nso", "index/deviceConfig", _module)
pulumi.runtime.registerResourceModule("nso", "index/deviceGroup", _module)
pulumi.runtime.registerResourceModule("nso", "index/restconf", _module)
pulumi.runtime.registerResourcePackage("nso", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:nso") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
