// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Task extends pulumi.CustomResource {
    /**
     * Get an existing Task resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TaskState, opts?: pulumi.CustomResourceOptions): Task {
        return new Task(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'iterative:index/task:Task';

    /**
     * Returns true if the given object is an instance of Task.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Task {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Task.__pulumiType;
    }

    public /*out*/ readonly addresses!: pulumi.Output<string[]>;
    public readonly cloud!: pulumi.Output<string>;
    public readonly diskSize!: pulumi.Output<number | undefined>;
    public readonly environment!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly events!: pulumi.Output<string[]>;
    public readonly image!: pulumi.Output<string | undefined>;
    public /*out*/ readonly logs!: pulumi.Output<string[]>;
    public readonly machine!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly parallelism!: pulumi.Output<number | undefined>;
    public readonly permissionSet!: pulumi.Output<string | undefined>;
    public readonly region!: pulumi.Output<string | undefined>;
    public readonly script!: pulumi.Output<string>;
    public readonly spot!: pulumi.Output<number | undefined>;
    public /*out*/ readonly sshPrivateKey!: pulumi.Output<string>;
    public /*out*/ readonly sshPublicKey!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<{[key: string]: number}>;
    public readonly storages!: pulumi.Output<outputs.TaskStorage[] | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeout!: pulumi.Output<number | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.TaskTimeouts | undefined>;

    /**
     * Create a Task resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TaskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TaskArgs | TaskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TaskState | undefined;
            resourceInputs["addresses"] = state ? state.addresses : undefined;
            resourceInputs["cloud"] = state ? state.cloud : undefined;
            resourceInputs["diskSize"] = state ? state.diskSize : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["events"] = state ? state.events : undefined;
            resourceInputs["image"] = state ? state.image : undefined;
            resourceInputs["logs"] = state ? state.logs : undefined;
            resourceInputs["machine"] = state ? state.machine : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parallelism"] = state ? state.parallelism : undefined;
            resourceInputs["permissionSet"] = state ? state.permissionSet : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["script"] = state ? state.script : undefined;
            resourceInputs["spot"] = state ? state.spot : undefined;
            resourceInputs["sshPrivateKey"] = state ? state.sshPrivateKey : undefined;
            resourceInputs["sshPublicKey"] = state ? state.sshPublicKey : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storages"] = state ? state.storages : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as TaskArgs | undefined;
            if ((!args || args.cloud === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloud'");
            }
            if ((!args || args.script === undefined) && !opts.urn) {
                throw new Error("Missing required property 'script'");
            }
            resourceInputs["cloud"] = args ? args.cloud : undefined;
            resourceInputs["diskSize"] = args ? args.diskSize : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["image"] = args ? args.image : undefined;
            resourceInputs["machine"] = args ? args.machine : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parallelism"] = args ? args.parallelism : undefined;
            resourceInputs["permissionSet"] = args ? args.permissionSet : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["script"] = args ? args.script : undefined;
            resourceInputs["spot"] = args ? args.spot : undefined;
            resourceInputs["storages"] = args ? args.storages : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["addresses"] = undefined /*out*/;
            resourceInputs["events"] = undefined /*out*/;
            resourceInputs["logs"] = undefined /*out*/;
            resourceInputs["sshPrivateKey"] = undefined /*out*/;
            resourceInputs["sshPublicKey"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["sshPrivateKey", "sshPublicKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Task.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Task resources.
 */
export interface TaskState {
    addresses?: pulumi.Input<pulumi.Input<string>[]>;
    cloud?: pulumi.Input<string>;
    diskSize?: pulumi.Input<number>;
    environment?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    events?: pulumi.Input<pulumi.Input<string>[]>;
    image?: pulumi.Input<string>;
    logs?: pulumi.Input<pulumi.Input<string>[]>;
    machine?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parallelism?: pulumi.Input<number>;
    permissionSet?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    script?: pulumi.Input<string>;
    spot?: pulumi.Input<number>;
    sshPrivateKey?: pulumi.Input<string>;
    sshPublicKey?: pulumi.Input<string>;
    status?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    storages?: pulumi.Input<pulumi.Input<inputs.TaskStorage>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeout?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.TaskTimeouts>;
}

/**
 * The set of arguments for constructing a Task resource.
 */
export interface TaskArgs {
    cloud: pulumi.Input<string>;
    diskSize?: pulumi.Input<number>;
    environment?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    image?: pulumi.Input<string>;
    machine?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parallelism?: pulumi.Input<number>;
    permissionSet?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    script: pulumi.Input<string>;
    spot?: pulumi.Input<number>;
    storages?: pulumi.Input<pulumi.Input<inputs.TaskStorage>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeout?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.TaskTimeouts>;
}
