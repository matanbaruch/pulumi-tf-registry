// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { CmlRunnerArgs, CmlRunnerState } from "./cmlRunner";
export type CmlRunner = import("./cmlRunner").CmlRunner;
export const CmlRunner: typeof import("./cmlRunner").CmlRunner = null as any;
utilities.lazyLoad(exports, ["CmlRunner"], () => require("./cmlRunner"));

export { MachineArgs, MachineState } from "./machine";
export type Machine = import("./machine").Machine;
export const Machine: typeof import("./machine").Machine = null as any;
utilities.lazyLoad(exports, ["Machine"], () => require("./machine"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { TaskArgs, TaskState } from "./task";
export type Task = import("./task").Task;
export const Task: typeof import("./task").Task = null as any;
utilities.lazyLoad(exports, ["Task"], () => require("./task"));


// Export sub-modules:
import * as types from "./types";

export {
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "iterative:index/cmlRunner:CmlRunner":
                return new CmlRunner(name, <any>undefined, { urn })
            case "iterative:index/machine:Machine":
                return new Machine(name, <any>undefined, { urn })
            case "iterative:index/task:Task":
                return new Task(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("iterative", "index/cmlRunner", _module)
pulumi.runtime.registerResourceModule("iterative", "index/machine", _module)
pulumi.runtime.registerResourceModule("iterative", "index/task", _module)
pulumi.runtime.registerResourcePackage("iterative", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:iterative") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
