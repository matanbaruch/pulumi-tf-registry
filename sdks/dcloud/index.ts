// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DocumentationArgs, DocumentationState } from "./documentation";
export type Documentation = import("./documentation").Documentation;
export const Documentation: typeof import("./documentation").Documentation = null as any;
utilities.lazyLoad(exports, ["Documentation"], () => require("./documentation"));

export { ExternalDnsArgs, ExternalDnsState } from "./externalDns";
export type ExternalDns = import("./externalDns").ExternalDns;
export const ExternalDns: typeof import("./externalDns").ExternalDns = null as any;
utilities.lazyLoad(exports, ["ExternalDns"], () => require("./externalDns"));

export { GetExternalDnsArgs, GetExternalDnsResult, GetExternalDnsOutputArgs } from "./getExternalDns";
export const getExternalDns: typeof import("./getExternalDns").getExternalDns = null as any;
export const getExternalDnsOutput: typeof import("./getExternalDns").getExternalDnsOutput = null as any;
utilities.lazyLoad(exports, ["getExternalDns","getExternalDnsOutput"], () => require("./getExternalDns"));

export { GetHwsArgs, GetHwsResult, GetHwsOutputArgs } from "./getHws";
export const getHws: typeof import("./getHws").getHws = null as any;
export const getHwsOutput: typeof import("./getHws").getHwsOutput = null as any;
utilities.lazyLoad(exports, ["getHws","getHwsOutput"], () => require("./getHws"));

export { GetInboundProxyRulesArgs, GetInboundProxyRulesResult, GetInboundProxyRulesOutputArgs } from "./getInboundProxyRules";
export const getInboundProxyRules: typeof import("./getInboundProxyRules").getInboundProxyRules = null as any;
export const getInboundProxyRulesOutput: typeof import("./getInboundProxyRules").getInboundProxyRulesOutput = null as any;
utilities.lazyLoad(exports, ["getInboundProxyRules","getInboundProxyRulesOutput"], () => require("./getInboundProxyRules"));

export { GetInventoryDnsAssetsArgs, GetInventoryDnsAssetsResult, GetInventoryDnsAssetsOutputArgs } from "./getInventoryDnsAssets";
export const getInventoryDnsAssets: typeof import("./getInventoryDnsAssets").getInventoryDnsAssets = null as any;
export const getInventoryDnsAssetsOutput: typeof import("./getInventoryDnsAssets").getInventoryDnsAssetsOutput = null as any;
utilities.lazyLoad(exports, ["getInventoryDnsAssets","getInventoryDnsAssetsOutput"], () => require("./getInventoryDnsAssets"));

export { GetInventoryHwScriptsArgs, GetInventoryHwScriptsResult, GetInventoryHwScriptsOutputArgs } from "./getInventoryHwScripts";
export const getInventoryHwScripts: typeof import("./getInventoryHwScripts").getInventoryHwScripts = null as any;
export const getInventoryHwScriptsOutput: typeof import("./getInventoryHwScripts").getInventoryHwScriptsOutput = null as any;
utilities.lazyLoad(exports, ["getInventoryHwScripts","getInventoryHwScriptsOutput"], () => require("./getInventoryHwScripts"));

export { GetInventoryHwTemplateConfigsArgs, GetInventoryHwTemplateConfigsResult, GetInventoryHwTemplateConfigsOutputArgs } from "./getInventoryHwTemplateConfigs";
export const getInventoryHwTemplateConfigs: typeof import("./getInventoryHwTemplateConfigs").getInventoryHwTemplateConfigs = null as any;
export const getInventoryHwTemplateConfigsOutput: typeof import("./getInventoryHwTemplateConfigs").getInventoryHwTemplateConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getInventoryHwTemplateConfigs","getInventoryHwTemplateConfigsOutput"], () => require("./getInventoryHwTemplateConfigs"));

export { GetInventoryHwsArgs, GetInventoryHwsResult, GetInventoryHwsOutputArgs } from "./getInventoryHws";
export const getInventoryHws: typeof import("./getInventoryHws").getInventoryHws = null as any;
export const getInventoryHwsOutput: typeof import("./getInventoryHws").getInventoryHwsOutput = null as any;
utilities.lazyLoad(exports, ["getInventoryHws","getInventoryHwsOutput"], () => require("./getInventoryHws"));

export { GetInventoryLicensesArgs, GetInventoryLicensesResult, GetInventoryLicensesOutputArgs } from "./getInventoryLicenses";
export const getInventoryLicenses: typeof import("./getInventoryLicenses").getInventoryLicenses = null as any;
export const getInventoryLicensesOutput: typeof import("./getInventoryLicenses").getInventoryLicensesOutput = null as any;
utilities.lazyLoad(exports, ["getInventoryLicenses","getInventoryLicensesOutput"], () => require("./getInventoryLicenses"));

export { GetInventoryNetworksArgs, GetInventoryNetworksResult, GetInventoryNetworksOutputArgs } from "./getInventoryNetworks";
export const getInventoryNetworks: typeof import("./getInventoryNetworks").getInventoryNetworks = null as any;
export const getInventoryNetworksOutput: typeof import("./getInventoryNetworks").getInventoryNetworksOutput = null as any;
utilities.lazyLoad(exports, ["getInventoryNetworks","getInventoryNetworksOutput"], () => require("./getInventoryNetworks"));

export { GetInventorySrvProtocolsArgs, GetInventorySrvProtocolsResult, GetInventorySrvProtocolsOutputArgs } from "./getInventorySrvProtocols";
export const getInventorySrvProtocols: typeof import("./getInventorySrvProtocols").getInventorySrvProtocols = null as any;
export const getInventorySrvProtocolsOutput: typeof import("./getInventorySrvProtocols").getInventorySrvProtocolsOutput = null as any;
utilities.lazyLoad(exports, ["getInventorySrvProtocols","getInventorySrvProtocolsOutput"], () => require("./getInventorySrvProtocols"));

export { GetInventoryTelephonyArgs, GetInventoryTelephonyResult, GetInventoryTelephonyOutputArgs } from "./getInventoryTelephony";
export const getInventoryTelephony: typeof import("./getInventoryTelephony").getInventoryTelephony = null as any;
export const getInventoryTelephonyOutput: typeof import("./getInventoryTelephony").getInventoryTelephonyOutput = null as any;
utilities.lazyLoad(exports, ["getInventoryTelephony","getInventoryTelephonyOutput"], () => require("./getInventoryTelephony"));

export { GetInventoryVmsArgs, GetInventoryVmsResult, GetInventoryVmsOutputArgs } from "./getInventoryVms";
export const getInventoryVms: typeof import("./getInventoryVms").getInventoryVms = null as any;
export const getInventoryVmsOutput: typeof import("./getInventoryVms").getInventoryVmsOutput = null as any;
utilities.lazyLoad(exports, ["getInventoryVms","getInventoryVmsOutput"], () => require("./getInventoryVms"));

export { GetIpNatRulesArgs, GetIpNatRulesResult, GetIpNatRulesOutputArgs } from "./getIpNatRules";
export const getIpNatRules: typeof import("./getIpNatRules").getIpNatRules = null as any;
export const getIpNatRulesOutput: typeof import("./getIpNatRules").getIpNatRulesOutput = null as any;
utilities.lazyLoad(exports, ["getIpNatRules","getIpNatRulesOutput"], () => require("./getIpNatRules"));

export { GetLicensesArgs, GetLicensesResult, GetLicensesOutputArgs } from "./getLicenses";
export const getLicenses: typeof import("./getLicenses").getLicenses = null as any;
export const getLicensesOutput: typeof import("./getLicenses").getLicensesOutput = null as any;
utilities.lazyLoad(exports, ["getLicenses","getLicensesOutput"], () => require("./getLicenses"));

export { GetMailServersArgs, GetMailServersResult, GetMailServersOutputArgs } from "./getMailServers";
export const getMailServers: typeof import("./getMailServers").getMailServers = null as any;
export const getMailServersOutput: typeof import("./getMailServers").getMailServersOutput = null as any;
utilities.lazyLoad(exports, ["getMailServers","getMailServersOutput"], () => require("./getMailServers"));

export { GetNetworksArgs, GetNetworksResult, GetNetworksOutputArgs } from "./getNetworks";
export const getNetworks: typeof import("./getNetworks").getNetworks = null as any;
export const getNetworksOutput: typeof import("./getNetworks").getNetworksOutput = null as any;
utilities.lazyLoad(exports, ["getNetworks","getNetworksOutput"], () => require("./getNetworks"));

export { GetNicTypesArgs, GetNicTypesResult, GetNicTypesOutputArgs } from "./getNicTypes";
export const getNicTypes: typeof import("./getNicTypes").getNicTypes = null as any;
export const getNicTypesOutput: typeof import("./getNicTypes").getNicTypesOutput = null as any;
utilities.lazyLoad(exports, ["getNicTypes","getNicTypesOutput"], () => require("./getNicTypes"));

export { GetOsFamiliesArgs, GetOsFamiliesResult, GetOsFamiliesOutputArgs } from "./getOsFamilies";
export const getOsFamilies: typeof import("./getOsFamilies").getOsFamilies = null as any;
export const getOsFamiliesOutput: typeof import("./getOsFamilies").getOsFamiliesOutput = null as any;
utilities.lazyLoad(exports, ["getOsFamilies","getOsFamiliesOutput"], () => require("./getOsFamilies"));

export { GetTelephonyArgs, GetTelephonyResult, GetTelephonyOutputArgs } from "./getTelephony";
export const getTelephony: typeof import("./getTelephony").getTelephony = null as any;
export const getTelephonyOutput: typeof import("./getTelephony").getTelephonyOutput = null as any;
utilities.lazyLoad(exports, ["getTelephony","getTelephonyOutput"], () => require("./getTelephony"));

export { GetTopologiesArgs, GetTopologiesResult, GetTopologiesOutputArgs } from "./getTopologies";
export const getTopologies: typeof import("./getTopologies").getTopologies = null as any;
export const getTopologiesOutput: typeof import("./getTopologies").getTopologiesOutput = null as any;
utilities.lazyLoad(exports, ["getTopologies","getTopologiesOutput"], () => require("./getTopologies"));

export { GetVmNatRulesArgs, GetVmNatRulesResult, GetVmNatRulesOutputArgs } from "./getVmNatRules";
export const getVmNatRules: typeof import("./getVmNatRules").getVmNatRules = null as any;
export const getVmNatRulesOutput: typeof import("./getVmNatRules").getVmNatRulesOutput = null as any;
utilities.lazyLoad(exports, ["getVmNatRules","getVmNatRulesOutput"], () => require("./getVmNatRules"));

export { GetVmsArgs, GetVmsResult, GetVmsOutputArgs } from "./getVms";
export const getVms: typeof import("./getVms").getVms = null as any;
export const getVmsOutput: typeof import("./getVms").getVmsOutput = null as any;
utilities.lazyLoad(exports, ["getVms","getVmsOutput"], () => require("./getVms"));

export { HwArgs, HwState } from "./hw";
export type Hw = import("./hw").Hw;
export const Hw: typeof import("./hw").Hw = null as any;
utilities.lazyLoad(exports, ["Hw"], () => require("./hw"));

export { HwStartOrderArgs, HwStartOrderState } from "./hwStartOrder";
export type HwStartOrder = import("./hwStartOrder").HwStartOrder;
export const HwStartOrder: typeof import("./hwStartOrder").HwStartOrder = null as any;
utilities.lazyLoad(exports, ["HwStartOrder"], () => require("./hwStartOrder"));

export { InboundProxyRuleArgs, InboundProxyRuleState } from "./inboundProxyRule";
export type InboundProxyRule = import("./inboundProxyRule").InboundProxyRule;
export const InboundProxyRule: typeof import("./inboundProxyRule").InboundProxyRule = null as any;
utilities.lazyLoad(exports, ["InboundProxyRule"], () => require("./inboundProxyRule"));

export { IpNatRuleArgs, IpNatRuleState } from "./ipNatRule";
export type IpNatRule = import("./ipNatRule").IpNatRule;
export const IpNatRule: typeof import("./ipNatRule").IpNatRule = null as any;
utilities.lazyLoad(exports, ["IpNatRule"], () => require("./ipNatRule"));

export { LicenseArgs, LicenseState } from "./license";
export type License = import("./license").License;
export const License: typeof import("./license").License = null as any;
utilities.lazyLoad(exports, ["License"], () => require("./license"));

export { MailServerArgs, MailServerState } from "./mailServer";
export type MailServer = import("./mailServer").MailServer;
export const MailServer: typeof import("./mailServer").MailServer = null as any;
utilities.lazyLoad(exports, ["MailServer"], () => require("./mailServer"));

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RemoteAccessArgs, RemoteAccessState } from "./remoteAccess";
export type RemoteAccess = import("./remoteAccess").RemoteAccess;
export const RemoteAccess: typeof import("./remoteAccess").RemoteAccess = null as any;
utilities.lazyLoad(exports, ["RemoteAccess"], () => require("./remoteAccess"));

export { ScenarioArgs, ScenarioState } from "./scenario";
export type Scenario = import("./scenario").Scenario;
export const Scenario: typeof import("./scenario").Scenario = null as any;
utilities.lazyLoad(exports, ["Scenario"], () => require("./scenario"));

export { TelephonyArgs, TelephonyState } from "./telephony";
export type Telephony = import("./telephony").Telephony;
export const Telephony: typeof import("./telephony").Telephony = null as any;
utilities.lazyLoad(exports, ["Telephony"], () => require("./telephony"));

export { TopologyArgs, TopologyState } from "./topology";
export type Topology = import("./topology").Topology;
export const Topology: typeof import("./topology").Topology = null as any;
utilities.lazyLoad(exports, ["Topology"], () => require("./topology"));

export { VmArgs, VmState } from "./vm";
export type Vm = import("./vm").Vm;
export const Vm: typeof import("./vm").Vm = null as any;
utilities.lazyLoad(exports, ["Vm"], () => require("./vm"));

export { VmNatRuleArgs, VmNatRuleState } from "./vmNatRule";
export type VmNatRule = import("./vmNatRule").VmNatRule;
export const VmNatRule: typeof import("./vmNatRule").VmNatRule = null as any;
utilities.lazyLoad(exports, ["VmNatRule"], () => require("./vmNatRule"));

export { VmStartOrderArgs, VmStartOrderState } from "./vmStartOrder";
export type VmStartOrder = import("./vmStartOrder").VmStartOrder;
export const VmStartOrder: typeof import("./vmStartOrder").VmStartOrder = null as any;
utilities.lazyLoad(exports, ["VmStartOrder"], () => require("./vmStartOrder"));

export { VmStopOrderArgs, VmStopOrderState } from "./vmStopOrder";
export type VmStopOrder = import("./vmStopOrder").VmStopOrder;
export const VmStopOrder: typeof import("./vmStopOrder").VmStopOrder = null as any;
utilities.lazyLoad(exports, ["VmStopOrder"], () => require("./vmStopOrder"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "dcloud:index/documentation:Documentation":
                return new Documentation(name, <any>undefined, { urn })
            case "dcloud:index/externalDns:ExternalDns":
                return new ExternalDns(name, <any>undefined, { urn })
            case "dcloud:index/hw:Hw":
                return new Hw(name, <any>undefined, { urn })
            case "dcloud:index/hwStartOrder:HwStartOrder":
                return new HwStartOrder(name, <any>undefined, { urn })
            case "dcloud:index/inboundProxyRule:InboundProxyRule":
                return new InboundProxyRule(name, <any>undefined, { urn })
            case "dcloud:index/ipNatRule:IpNatRule":
                return new IpNatRule(name, <any>undefined, { urn })
            case "dcloud:index/license:License":
                return new License(name, <any>undefined, { urn })
            case "dcloud:index/mailServer:MailServer":
                return new MailServer(name, <any>undefined, { urn })
            case "dcloud:index/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "dcloud:index/remoteAccess:RemoteAccess":
                return new RemoteAccess(name, <any>undefined, { urn })
            case "dcloud:index/scenario:Scenario":
                return new Scenario(name, <any>undefined, { urn })
            case "dcloud:index/telephony:Telephony":
                return new Telephony(name, <any>undefined, { urn })
            case "dcloud:index/topology:Topology":
                return new Topology(name, <any>undefined, { urn })
            case "dcloud:index/vm:Vm":
                return new Vm(name, <any>undefined, { urn })
            case "dcloud:index/vmNatRule:VmNatRule":
                return new VmNatRule(name, <any>undefined, { urn })
            case "dcloud:index/vmStartOrder:VmStartOrder":
                return new VmStartOrder(name, <any>undefined, { urn })
            case "dcloud:index/vmStopOrder:VmStopOrder":
                return new VmStopOrder(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("dcloud", "index/documentation", _module)
pulumi.runtime.registerResourceModule("dcloud", "index/externalDns", _module)
pulumi.runtime.registerResourceModule("dcloud", "index/hw", _module)
pulumi.runtime.registerResourceModule("dcloud", "index/hwStartOrder", _module)
pulumi.runtime.registerResourceModule("dcloud", "index/inboundProxyRule", _module)
pulumi.runtime.registerResourceModule("dcloud", "index/ipNatRule", _module)
pulumi.runtime.registerResourceModule("dcloud", "index/license", _module)
pulumi.runtime.registerResourceModule("dcloud", "index/mailServer", _module)
pulumi.runtime.registerResourceModule("dcloud", "index/network", _module)
pulumi.runtime.registerResourceModule("dcloud", "index/remoteAccess", _module)
pulumi.runtime.registerResourceModule("dcloud", "index/scenario", _module)
pulumi.runtime.registerResourceModule("dcloud", "index/telephony", _module)
pulumi.runtime.registerResourceModule("dcloud", "index/topology", _module)
pulumi.runtime.registerResourceModule("dcloud", "index/vm", _module)
pulumi.runtime.registerResourceModule("dcloud", "index/vmNatRule", _module)
pulumi.runtime.registerResourceModule("dcloud", "index/vmStartOrder", _module)
pulumi.runtime.registerResourceModule("dcloud", "index/vmStopOrder", _module)
pulumi.runtime.registerResourcePackage("dcloud", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:dcloud") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
