// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ExternalDnsSrvRecord {
    port: number;
    protocol: string;
    service: string;
    uid: string;
}

export interface GetExternalDnsExternalDn {
    aRecord: string;
    hostname: string;
    natRuleId: string;
    srvRecords: outputs.GetExternalDnsExternalDnSrvRecord[];
    topologyUid: string;
    uid: string;
}

export interface GetExternalDnsExternalDnSrvRecord {
    port: number;
    protocol: string;
    service: string;
    uid: string;
}

export interface GetHwsHw {
    customScriptUid: string;
    hardwareConsoleEnabled: boolean;
    inventoryHwId: string;
    name: string;
    networkInterfaces: outputs.GetHwsHwNetworkInterface[];
    powerControlEnabled: boolean;
    shutdownScriptUid: string;
    startupScriptUid: string;
    templateConfigScriptUid: string;
    topologyUid: string;
    uid: string;
}

export interface GetHwsHwNetworkInterface {
    networkInterfaceId: string;
    networkUid: string;
    uid: string;
}

export interface GetInboundProxyRulesInboundProxyRule {
    hyperlink: string;
    nicIpAddress: string;
    nicUid: string;
    showHyperlink: boolean;
    ssl: boolean;
    targetVmName: string;
    tcpPort: number;
    topologyUid: string;
    uid: string;
    urlPath: string;
}

export interface GetInventoryDnsAssetsInventoryDnsAsset {
    id: string;
    name: string;
}

export interface GetInventoryHwScriptsHwScript {
    name: string;
    uid: string;
}

export interface GetInventoryHwTemplateConfigsHwTemplateConfig {
    name: string;
    uid: string;
}

export interface GetInventoryHwsInventoryHw {
    description: string;
    hardwareConsoleAvailable: boolean;
    id: string;
    name: string;
    networkInterfaces: outputs.GetInventoryHwsInventoryHwNetworkInterface[];
    powerControlAvailable: boolean;
}

export interface GetInventoryHwsInventoryHwNetworkInterface {
    id: string;
}

export interface GetInventoryLicensesInventoryLicense {
    id: string;
    name: string;
    quantity: number;
}

export interface GetInventoryNetworksInventoryNetwork {
    id: string;
    subnet: string;
    type: string;
}

export interface GetInventorySrvProtocolsInventorySrvProtocol {
    id: string;
    protocol: string;
}

export interface GetInventoryTelephonyInventoryTelephony {
    description: string;
    id: string;
    name: string;
}

export interface GetInventoryVmsInventoryVm {
    cpuQty: number;
    datacenter: string;
    id: string;
    memoryMb: number;
    networkInterfaces: outputs.GetInventoryVmsInventoryVmNetworkInterface[];
    originalDescription: string;
    originalName: string;
    remoteAccessRdpAutoLogin: boolean;
    remoteAccessRdpEnabled: boolean;
    remoteAccessRdpSshEnabled: boolean;
}

export interface GetInventoryVmsInventoryVmNetworkInterface {
    inventoryNetworkId: string;
    ipAddress: string;
    macAddress: string;
    name: string;
    rdpEnabled: boolean;
    sshEnabled: boolean;
    type: string;
}

export interface GetIpNatRulesIpNatRule {
    eastWest: boolean;
    scope: string;
    targetIpAddress: string;
    targetName: string;
    topologyUid: string;
    uid: string;
}

export interface GetLicensesLicense {
    inventoryLicenseId: string;
    inventoryLicenseName: string;
    quantity: number;
    topologyUid: string;
    uid: string;
}

export interface GetMailServersMailServer {
    dnsAssetId: string;
    dnsAssetName: string;
    nicUid: string;
    topologyUid: string;
    uid: string;
}

export interface GetNetworksNetwork {
    description: string;
    inventoryNetworkId: string;
    inventoryNetworkSubnet: string;
    inventoryNetworkType: string;
    name: string;
    topologyUid: string;
    uid: string;
}

export interface GetNicTypesNicType {
    id: string;
    name: string;
}

export interface GetOsFamiliesOsFamily {
    id: string;
    name: string;
}

export interface GetTelephonyTelephonyItem {
    inventoryTelephonyDescription: string;
    inventoryTelephonyId: string;
    inventoryTelephonyName: string;
    name: string;
    topologyUid: string;
    uid: string;
}

export interface GetTopologiesTopology {
    datacenter: string;
    description: string;
    name: string;
    notes: string;
    status: string;
    uid: string;
}

export interface GetVmNatRulesVmNatRule {
    eastWest: boolean;
    nicUid: string;
    scope: string;
    targetIpAddress: string;
    targetName: string;
    topologyUid: string;
    uid: string;
}

export interface GetVmsVm {
    advancedSettings: outputs.GetVmsVmAdvancedSetting[];
    cpuQty: number;
    description: string;
    guestAutomations: outputs.GetVmsVmGuestAutomation[];
    inventoryVmId: string;
    memoryMb: number;
    name: string;
    nestedHypervisor: boolean;
    networkInterfaces: outputs.GetVmsVmNetworkInterface[];
    osFamily: string;
    remoteAccesses: outputs.GetVmsVmRemoteAccess[];
    topologyUid: string;
    uid: string;
}

export interface GetVmsVmAdvancedSetting {
    allDisksNonPersistent: boolean;
    biosUuid: string;
    nameInHypervisor: string;
    notStarted: boolean;
}

export interface GetVmsVmGuestAutomation {
    command: string;
    delaySeconds: number;
}

export interface GetVmsVmNetworkInterface {
    ipAddress: string;
    macAddress: string;
    name: string;
    networkUid: string;
    rdpAutoLogin: boolean;
    rdpEnabled: boolean;
    sshEnabled: boolean;
    type: string;
    uid: string;
}

export interface GetVmsVmRemoteAccess {
    displayCredentials: outputs.GetVmsVmRemoteAccessDisplayCredential[];
    internalUrls: outputs.GetVmsVmRemoteAccessInternalUrl[];
    password: string;
    username: string;
    vmConsoleEnabled: boolean;
}

export interface GetVmsVmRemoteAccessDisplayCredential {
    password: string;
    username: string;
}

export interface GetVmsVmRemoteAccessInternalUrl {
    description: string;
    location: string;
}

export interface HwNetworkInterface {
    networkInterfaceId: string;
    networkUid: string;
    uid: string;
}

export interface HwStartOrderStartPosition {
    delaySeconds: number;
    hwName: string;
    hwUid: string;
    position: number;
}

export interface ScenarioOption {
    displayName: string;
    internalName: string;
    uid: string;
}

export interface VmAdvancedSettings {
    allDisksNonPersistent: boolean;
    biosUuid: string;
    nameInHypervisor: string;
    notStarted: boolean;
}

export interface VmGuestAutomation {
    command: string;
    delaySeconds: number;
}

export interface VmNetworkInterface {
    ipAddress?: string;
    macAddress?: string;
    name: string;
    networkUid: string;
    rdpAutoLogin?: boolean;
    rdpEnabled?: boolean;
    sshEnabled?: boolean;
    type: string;
    uid: string;
}

export interface VmRemoteAccess {
    displayCredentials?: outputs.VmRemoteAccessDisplayCredentials;
    internalUrls?: outputs.VmRemoteAccessInternalUrl[];
    password?: string;
    username?: string;
    vmConsoleEnabled: boolean;
}

export interface VmRemoteAccessDisplayCredentials {
    password: string;
    username: string;
}

export interface VmRemoteAccessInternalUrl {
    description: string;
    location: string;
}

export interface VmStartOrderStartPosition {
    delaySeconds: number;
    position: number;
    vmName: string;
    vmUid: string;
}

export interface VmStopOrderStopPosition {
    position: number;
    vmName: string;
    vmUid: string;
}

