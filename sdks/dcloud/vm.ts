// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Vm extends pulumi.CustomResource {
    /**
     * Get an existing Vm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmState, opts?: pulumi.CustomResourceOptions): Vm {
        return new Vm(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dcloud:index/vm:Vm';

    /**
     * Returns true if the given object is an instance of Vm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vm.__pulumiType;
    }

    public readonly advancedSettings!: pulumi.Output<outputs.VmAdvancedSettings | undefined>;
    public readonly cpuQty!: pulumi.Output<number | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly guestAutomation!: pulumi.Output<outputs.VmGuestAutomation | undefined>;
    public readonly inventoryVmId!: pulumi.Output<string>;
    public readonly memoryMb!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nestedHypervisor!: pulumi.Output<boolean | undefined>;
    public readonly networkInterfaces!: pulumi.Output<outputs.VmNetworkInterface[]>;
    public readonly osFamily!: pulumi.Output<string | undefined>;
    public readonly remoteAccess!: pulumi.Output<outputs.VmRemoteAccess | undefined>;
    public readonly topologyUid!: pulumi.Output<string>;
    public /*out*/ readonly uid!: pulumi.Output<string>;

    /**
     * Create a Vm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmArgs | VmState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmState | undefined;
            resourceInputs["advancedSettings"] = state ? state.advancedSettings : undefined;
            resourceInputs["cpuQty"] = state ? state.cpuQty : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["guestAutomation"] = state ? state.guestAutomation : undefined;
            resourceInputs["inventoryVmId"] = state ? state.inventoryVmId : undefined;
            resourceInputs["memoryMb"] = state ? state.memoryMb : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nestedHypervisor"] = state ? state.nestedHypervisor : undefined;
            resourceInputs["networkInterfaces"] = state ? state.networkInterfaces : undefined;
            resourceInputs["osFamily"] = state ? state.osFamily : undefined;
            resourceInputs["remoteAccess"] = state ? state.remoteAccess : undefined;
            resourceInputs["topologyUid"] = state ? state.topologyUid : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
        } else {
            const args = argsOrState as VmArgs | undefined;
            if ((!args || args.inventoryVmId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inventoryVmId'");
            }
            if ((!args || args.networkInterfaces === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkInterfaces'");
            }
            if ((!args || args.topologyUid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topologyUid'");
            }
            resourceInputs["advancedSettings"] = args ? args.advancedSettings : undefined;
            resourceInputs["cpuQty"] = args ? args.cpuQty : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["guestAutomation"] = args ? args.guestAutomation : undefined;
            resourceInputs["inventoryVmId"] = args ? args.inventoryVmId : undefined;
            resourceInputs["memoryMb"] = args ? args.memoryMb : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nestedHypervisor"] = args ? args.nestedHypervisor : undefined;
            resourceInputs["networkInterfaces"] = args ? args.networkInterfaces : undefined;
            resourceInputs["osFamily"] = args ? args.osFamily : undefined;
            resourceInputs["remoteAccess"] = args ? args.remoteAccess : undefined;
            resourceInputs["topologyUid"] = args ? args.topologyUid : undefined;
            resourceInputs["uid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vm.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Vm resources.
 */
export interface VmState {
    advancedSettings?: pulumi.Input<inputs.VmAdvancedSettings>;
    cpuQty?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    guestAutomation?: pulumi.Input<inputs.VmGuestAutomation>;
    inventoryVmId?: pulumi.Input<string>;
    memoryMb?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    nestedHypervisor?: pulumi.Input<boolean>;
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.VmNetworkInterface>[]>;
    osFamily?: pulumi.Input<string>;
    remoteAccess?: pulumi.Input<inputs.VmRemoteAccess>;
    topologyUid?: pulumi.Input<string>;
    uid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vm resource.
 */
export interface VmArgs {
    advancedSettings?: pulumi.Input<inputs.VmAdvancedSettings>;
    cpuQty?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    guestAutomation?: pulumi.Input<inputs.VmGuestAutomation>;
    inventoryVmId: pulumi.Input<string>;
    memoryMb?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    nestedHypervisor?: pulumi.Input<boolean>;
    networkInterfaces: pulumi.Input<pulumi.Input<inputs.VmNetworkInterface>[]>;
    osFamily?: pulumi.Input<string>;
    remoteAccess?: pulumi.Input<inputs.VmRemoteAccess>;
    topologyUid: pulumi.Input<string>;
}
