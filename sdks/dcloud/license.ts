// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class License extends pulumi.CustomResource {
    /**
     * Get an existing License resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LicenseState, opts?: pulumi.CustomResourceOptions): License {
        return new License(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dcloud:index/license:License';

    /**
     * Returns true if the given object is an instance of License.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is License {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === License.__pulumiType;
    }

    public readonly inventoryLicenseId!: pulumi.Output<string>;
    public /*out*/ readonly inventoryLicenseName!: pulumi.Output<string>;
    public readonly quantity!: pulumi.Output<number>;
    public readonly topologyUid!: pulumi.Output<string>;
    public /*out*/ readonly uid!: pulumi.Output<string>;

    /**
     * Create a License resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LicenseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LicenseArgs | LicenseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LicenseState | undefined;
            resourceInputs["inventoryLicenseId"] = state ? state.inventoryLicenseId : undefined;
            resourceInputs["inventoryLicenseName"] = state ? state.inventoryLicenseName : undefined;
            resourceInputs["quantity"] = state ? state.quantity : undefined;
            resourceInputs["topologyUid"] = state ? state.topologyUid : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
        } else {
            const args = argsOrState as LicenseArgs | undefined;
            if ((!args || args.inventoryLicenseId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inventoryLicenseId'");
            }
            if ((!args || args.quantity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'quantity'");
            }
            if ((!args || args.topologyUid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topologyUid'");
            }
            resourceInputs["inventoryLicenseId"] = args ? args.inventoryLicenseId : undefined;
            resourceInputs["quantity"] = args ? args.quantity : undefined;
            resourceInputs["topologyUid"] = args ? args.topologyUid : undefined;
            resourceInputs["inventoryLicenseName"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(License.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering License resources.
 */
export interface LicenseState {
    inventoryLicenseId?: pulumi.Input<string>;
    inventoryLicenseName?: pulumi.Input<string>;
    quantity?: pulumi.Input<number>;
    topologyUid?: pulumi.Input<string>;
    uid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a License resource.
 */
export interface LicenseArgs {
    inventoryLicenseId: pulumi.Input<string>;
    quantity: pulumi.Input<number>;
    topologyUid: pulumi.Input<string>;
}
