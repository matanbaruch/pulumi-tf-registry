// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { BytesArgs, BytesState } from "./bytes";
export type Bytes = import("./bytes").Bytes;
export const Bytes: typeof import("./bytes").Bytes = null as any;
utilities.lazyLoad(exports, ["Bytes"], () => require("./bytes"));

export { IdArgs, IdState } from "./id";
export type Id = import("./id").Id;
export const Id: typeof import("./id").Id = null as any;
utilities.lazyLoad(exports, ["Id"], () => require("./id"));

export { IntegerArgs, IntegerState } from "./integer";
export type Integer = import("./integer").Integer;
export const Integer: typeof import("./integer").Integer = null as any;
utilities.lazyLoad(exports, ["Integer"], () => require("./integer"));

export { PasswordArgs, PasswordState } from "./password";
export type Password = import("./password").Password;
export const Password: typeof import("./password").Password = null as any;
utilities.lazyLoad(exports, ["Password"], () => require("./password"));

export { PetArgs, PetState } from "./pet";
export type Pet = import("./pet").Pet;
export const Pet: typeof import("./pet").Pet = null as any;
utilities.lazyLoad(exports, ["Pet"], () => require("./pet"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ShuffleArgs, ShuffleState } from "./shuffle";
export type Shuffle = import("./shuffle").Shuffle;
export const Shuffle: typeof import("./shuffle").Shuffle = null as any;
utilities.lazyLoad(exports, ["Shuffle"], () => require("./shuffle"));

export { StringArgs, StringState } from "./string";
export type String = import("./string").String;
export const String: typeof import("./string").String = null as any;
utilities.lazyLoad(exports, ["String"], () => require("./string"));

export { UuidArgs, UuidState } from "./uuid";
export type Uuid = import("./uuid").Uuid;
export const Uuid: typeof import("./uuid").Uuid = null as any;
utilities.lazyLoad(exports, ["Uuid"], () => require("./uuid"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "random:index/bytes:Bytes":
                return new Bytes(name, <any>undefined, { urn })
            case "random:index/id:Id":
                return new Id(name, <any>undefined, { urn })
            case "random:index/integer:Integer":
                return new Integer(name, <any>undefined, { urn })
            case "random:index/password:Password":
                return new Password(name, <any>undefined, { urn })
            case "random:index/pet:Pet":
                return new Pet(name, <any>undefined, { urn })
            case "random:index/shuffle:Shuffle":
                return new Shuffle(name, <any>undefined, { urn })
            case "random:index/string:String":
                return new String(name, <any>undefined, { urn })
            case "random:index/uuid:Uuid":
                return new Uuid(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("random", "index/bytes", _module)
pulumi.runtime.registerResourceModule("random", "index/id", _module)
pulumi.runtime.registerResourceModule("random", "index/integer", _module)
pulumi.runtime.registerResourceModule("random", "index/password", _module)
pulumi.runtime.registerResourceModule("random", "index/pet", _module)
pulumi.runtime.registerResourceModule("random", "index/shuffle", _module)
pulumi.runtime.registerResourceModule("random", "index/string", _module)
pulumi.runtime.registerResourceModule("random", "index/uuid", _module)
pulumi.runtime.registerResourcePackage("random", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:random") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
