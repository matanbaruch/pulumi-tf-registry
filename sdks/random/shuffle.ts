// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Shuffle extends pulumi.CustomResource {
    /**
     * Get an existing Shuffle resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ShuffleState, opts?: pulumi.CustomResourceOptions): Shuffle {
        return new Shuffle(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'random:index/shuffle:Shuffle';

    /**
     * Returns true if the given object is an instance of Shuffle.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Shuffle {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Shuffle.__pulumiType;
    }

    /**
     * The list of strings to shuffle.
     */
    public readonly inputs!: pulumi.Output<string[]>;
    /**
     * Arbitrary map of values that, when changed, will trigger recreation of resource. See the main provider documentation for
     * more information.
     */
    public readonly keepers!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The number of results to return. Defaults to the number of items in the `input` list. If fewer items are requested, some
     * elements will be excluded from the result. If more items are requested, items will be repeated in the result but not
     * more frequently than the number of items in the input list.
     */
    public readonly resultCount!: pulumi.Output<number | undefined>;
    /**
     * Random permutation of the list of strings given in `input`. The number of elements is determined by `result_count` if
     * set, or the number of elements in `input`.
     */
    public /*out*/ readonly results!: pulumi.Output<string[]>;
    public readonly seed!: pulumi.Output<string | undefined>;

    /**
     * Create a Shuffle resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ShuffleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ShuffleArgs | ShuffleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ShuffleState | undefined;
            resourceInputs["inputs"] = state ? state.inputs : undefined;
            resourceInputs["keepers"] = state ? state.keepers : undefined;
            resourceInputs["resultCount"] = state ? state.resultCount : undefined;
            resourceInputs["results"] = state ? state.results : undefined;
            resourceInputs["seed"] = state ? state.seed : undefined;
        } else {
            const args = argsOrState as ShuffleArgs | undefined;
            if ((!args || args.inputs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inputs'");
            }
            resourceInputs["inputs"] = args ? args.inputs : undefined;
            resourceInputs["keepers"] = args ? args.keepers : undefined;
            resourceInputs["resultCount"] = args ? args.resultCount : undefined;
            resourceInputs["seed"] = args ? args.seed : undefined;
            resourceInputs["results"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Shuffle.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Shuffle resources.
 */
export interface ShuffleState {
    /**
     * The list of strings to shuffle.
     */
    inputs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Arbitrary map of values that, when changed, will trigger recreation of resource. See the main provider documentation for
     * more information.
     */
    keepers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The number of results to return. Defaults to the number of items in the `input` list. If fewer items are requested, some
     * elements will be excluded from the result. If more items are requested, items will be repeated in the result but not
     * more frequently than the number of items in the input list.
     */
    resultCount?: pulumi.Input<number>;
    /**
     * Random permutation of the list of strings given in `input`. The number of elements is determined by `result_count` if
     * set, or the number of elements in `input`.
     */
    results?: pulumi.Input<pulumi.Input<string>[]>;
    seed?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Shuffle resource.
 */
export interface ShuffleArgs {
    /**
     * The list of strings to shuffle.
     */
    inputs: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Arbitrary map of values that, when changed, will trigger recreation of resource. See the main provider documentation for
     * more information.
     */
    keepers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The number of results to return. Defaults to the number of items in the `input` list. If fewer items are requested, some
     * elements will be excluded from the result. If more items are requested, items will be repeated in the result but not
     * more frequently than the number of items in the input list.
     */
    resultCount?: pulumi.Input<number>;
    seed?: pulumi.Input<string>;
}
