// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StoragePool extends pulumi.CustomResource {
    /**
     * Get an existing StoragePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StoragePoolState, opts?: pulumi.CustomResourceOptions): StoragePool {
        return new StoragePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netapp-gcp:index/storagePool:StoragePool';

    /**
     * Returns true if the given object is an instance of StoragePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StoragePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StoragePool.__pulumiType;
    }

    public readonly billingLabels!: pulumi.Output<outputs.StoragePoolBillingLabel[] | undefined>;
    public readonly globalAdAccess!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly managedPool!: pulumi.Output<boolean>;
    public readonly name!: pulumi.Output<string>;
    public readonly network!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly regionalHa!: pulumi.Output<boolean | undefined>;
    public readonly secondaryZone!: pulumi.Output<string | undefined>;
    public readonly serviceLevel!: pulumi.Output<string>;
    public readonly sharedVpcProjectNumber!: pulumi.Output<string | undefined>;
    public readonly size!: pulumi.Output<number>;
    public readonly storageClass!: pulumi.Output<string | undefined>;
    public readonly zone!: pulumi.Output<string | undefined>;

    /**
     * Create a StoragePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StoragePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StoragePoolArgs | StoragePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StoragePoolState | undefined;
            resourceInputs["billingLabels"] = state ? state.billingLabels : undefined;
            resourceInputs["globalAdAccess"] = state ? state.globalAdAccess : undefined;
            resourceInputs["managedPool"] = state ? state.managedPool : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["regionalHa"] = state ? state.regionalHa : undefined;
            resourceInputs["secondaryZone"] = state ? state.secondaryZone : undefined;
            resourceInputs["serviceLevel"] = state ? state.serviceLevel : undefined;
            resourceInputs["sharedVpcProjectNumber"] = state ? state.sharedVpcProjectNumber : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["storageClass"] = state ? state.storageClass : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as StoragePoolArgs | undefined;
            if ((!args || args.network === undefined) && !opts.urn) {
                throw new Error("Missing required property 'network'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.serviceLevel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceLevel'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["billingLabels"] = args ? args.billingLabels : undefined;
            resourceInputs["globalAdAccess"] = args ? args.globalAdAccess : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["regionalHa"] = args ? args.regionalHa : undefined;
            resourceInputs["secondaryZone"] = args ? args.secondaryZone : undefined;
            resourceInputs["serviceLevel"] = args ? args.serviceLevel : undefined;
            resourceInputs["sharedVpcProjectNumber"] = args ? args.sharedVpcProjectNumber : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["storageClass"] = args ? args.storageClass : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["managedPool"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StoragePool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StoragePool resources.
 */
export interface StoragePoolState {
    billingLabels?: pulumi.Input<pulumi.Input<inputs.StoragePoolBillingLabel>[]>;
    globalAdAccess?: pulumi.Input<boolean>;
    managedPool?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    network?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    regionalHa?: pulumi.Input<boolean>;
    secondaryZone?: pulumi.Input<string>;
    serviceLevel?: pulumi.Input<string>;
    sharedVpcProjectNumber?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    storageClass?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StoragePool resource.
 */
export interface StoragePoolArgs {
    billingLabels?: pulumi.Input<pulumi.Input<inputs.StoragePoolBillingLabel>[]>;
    globalAdAccess?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    network: pulumi.Input<string>;
    region: pulumi.Input<string>;
    regionalHa?: pulumi.Input<boolean>;
    secondaryZone?: pulumi.Input<string>;
    serviceLevel: pulumi.Input<string>;
    sharedVpcProjectNumber?: pulumi.Input<string>;
    size: pulumi.Input<number>;
    storageClass?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}
