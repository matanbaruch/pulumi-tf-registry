// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getActiveDirectory(args: GetActiveDirectoryArgs, opts?: pulumi.InvokeOptions): Promise<GetActiveDirectoryResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("netapp-gcp:index/getActiveDirectory:getActiveDirectory", {
        "adServer": args.adServer,
        "aesEncryption": args.aesEncryption,
        "allowLocalNfsUsersWithLdap": args.allowLocalNfsUsersWithLdap,
        "backupOperators": args.backupOperators,
        "connectionType": args.connectionType,
        "dnsServer": args.dnsServer,
        "domain": args.domain,
        "id": args.id,
        "kdcIp": args.kdcIp,
        "ldapSigning": args.ldapSigning,
        "managedAd": args.managedAd,
        "netBios": args.netBios,
        "organizationalUnit": args.organizationalUnit,
        "password": args.password,
        "region": args.region,
        "securityOperators": args.securityOperators,
        "site": args.site,
        "username": args.username,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getActiveDirectory.
 */
export interface GetActiveDirectoryArgs {
    adServer?: string;
    aesEncryption?: boolean;
    allowLocalNfsUsersWithLdap?: boolean;
    backupOperators?: string[];
    connectionType?: string;
    dnsServer?: string;
    domain?: string;
    id?: string;
    kdcIp?: string;
    ldapSigning?: boolean;
    managedAd?: boolean;
    netBios?: string;
    organizationalUnit?: string;
    password?: string;
    region: string;
    securityOperators?: string[];
    site?: string;
    username?: string;
}

/**
 * A collection of values returned by getActiveDirectory.
 */
export interface GetActiveDirectoryResult {
    readonly adServer?: string;
    readonly aesEncryption?: boolean;
    readonly allowLocalNfsUsersWithLdap?: boolean;
    readonly backupOperators?: string[];
    readonly connectionType?: string;
    readonly dnsServer?: string;
    readonly domain?: string;
    readonly id: string;
    readonly kdcIp?: string;
    readonly ldapSigning?: boolean;
    readonly managedAd?: boolean;
    readonly netBios?: string;
    readonly organizationalUnit?: string;
    readonly password?: string;
    readonly region: string;
    readonly securityOperators?: string[];
    readonly site?: string;
    readonly username?: string;
    readonly uuid: string;
}
export function getActiveDirectoryOutput(args: GetActiveDirectoryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetActiveDirectoryResult> {
    return pulumi.output(args).apply((a: any) => getActiveDirectory(a, opts))
}

/**
 * A collection of arguments for invoking getActiveDirectory.
 */
export interface GetActiveDirectoryOutputArgs {
    adServer?: pulumi.Input<string>;
    aesEncryption?: pulumi.Input<boolean>;
    allowLocalNfsUsersWithLdap?: pulumi.Input<boolean>;
    backupOperators?: pulumi.Input<pulumi.Input<string>[]>;
    connectionType?: pulumi.Input<string>;
    dnsServer?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    kdcIp?: pulumi.Input<string>;
    ldapSigning?: pulumi.Input<boolean>;
    managedAd?: pulumi.Input<boolean>;
    netBios?: pulumi.Input<string>;
    organizationalUnit?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    region: pulumi.Input<string>;
    securityOperators?: pulumi.Input<pulumi.Input<string>[]>;
    site?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}
