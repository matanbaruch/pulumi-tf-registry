// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VolumeReplication extends pulumi.CustomResource {
    /**
     * Get an existing VolumeReplication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeReplicationState, opts?: pulumi.CustomResourceOptions): VolumeReplication {
        return new VolumeReplication(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netapp-gcp:index/volumeReplication:VolumeReplication';

    /**
     * Returns true if the given object is an instance of VolumeReplication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VolumeReplication {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VolumeReplication.__pulumiType;
    }

    public readonly bandwidth!: pulumi.Output<string | undefined>;
    public readonly destinationVolumeId!: pulumi.Output<string>;
    public readonly endpointType!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly policy!: pulumi.Output<string | undefined>;
    public readonly region!: pulumi.Output<string>;
    public readonly remoteRegion!: pulumi.Output<string>;
    public readonly schedule!: pulumi.Output<string>;
    public readonly sourceVolumeId!: pulumi.Output<string>;

    /**
     * Create a VolumeReplication resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeReplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeReplicationArgs | VolumeReplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumeReplicationState | undefined;
            resourceInputs["bandwidth"] = state ? state.bandwidth : undefined;
            resourceInputs["destinationVolumeId"] = state ? state.destinationVolumeId : undefined;
            resourceInputs["endpointType"] = state ? state.endpointType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["remoteRegion"] = state ? state.remoteRegion : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["sourceVolumeId"] = state ? state.sourceVolumeId : undefined;
        } else {
            const args = argsOrState as VolumeReplicationArgs | undefined;
            if ((!args || args.destinationVolumeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationVolumeId'");
            }
            if ((!args || args.endpointType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointType'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.remoteRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteRegion'");
            }
            if ((!args || args.schedule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schedule'");
            }
            if ((!args || args.sourceVolumeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceVolumeId'");
            }
            resourceInputs["bandwidth"] = args ? args.bandwidth : undefined;
            resourceInputs["destinationVolumeId"] = args ? args.destinationVolumeId : undefined;
            resourceInputs["endpointType"] = args ? args.endpointType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["remoteRegion"] = args ? args.remoteRegion : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["sourceVolumeId"] = args ? args.sourceVolumeId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VolumeReplication.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VolumeReplication resources.
 */
export interface VolumeReplicationState {
    bandwidth?: pulumi.Input<string>;
    destinationVolumeId?: pulumi.Input<string>;
    endpointType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    policy?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    remoteRegion?: pulumi.Input<string>;
    schedule?: pulumi.Input<string>;
    sourceVolumeId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VolumeReplication resource.
 */
export interface VolumeReplicationArgs {
    bandwidth?: pulumi.Input<string>;
    destinationVolumeId: pulumi.Input<string>;
    endpointType: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    policy?: pulumi.Input<string>;
    region: pulumi.Input<string>;
    remoteRegion: pulumi.Input<string>;
    schedule: pulumi.Input<string>;
    sourceVolumeId: pulumi.Input<string>;
}
