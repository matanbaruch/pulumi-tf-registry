// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ActiveDirectory extends pulumi.CustomResource {
    /**
     * Get an existing ActiveDirectory resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ActiveDirectoryState, opts?: pulumi.CustomResourceOptions): ActiveDirectory {
        return new ActiveDirectory(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netapp-gcp:index/activeDirectory:ActiveDirectory';

    /**
     * Returns true if the given object is an instance of ActiveDirectory.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ActiveDirectory {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ActiveDirectory.__pulumiType;
    }

    public readonly adServer!: pulumi.Output<string | undefined>;
    public readonly aesEncryption!: pulumi.Output<boolean | undefined>;
    public readonly allowLocalNfsUsersWithLdap!: pulumi.Output<boolean | undefined>;
    public readonly backupOperators!: pulumi.Output<string[] | undefined>;
    public readonly connectionType!: pulumi.Output<string>;
    public readonly dnsServer!: pulumi.Output<string>;
    public readonly domain!: pulumi.Output<string>;
    public readonly kdcIp!: pulumi.Output<string | undefined>;
    public readonly ldapSigning!: pulumi.Output<boolean | undefined>;
    public readonly managedAd!: pulumi.Output<boolean | undefined>;
    public readonly netBios!: pulumi.Output<string>;
    public readonly organizationalUnit!: pulumi.Output<string | undefined>;
    public readonly password!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly securityOperators!: pulumi.Output<string[] | undefined>;
    public readonly site!: pulumi.Output<string | undefined>;
    public readonly username!: pulumi.Output<string>;
    public /*out*/ readonly uuid!: pulumi.Output<string>;

    /**
     * Create a ActiveDirectory resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ActiveDirectoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ActiveDirectoryArgs | ActiveDirectoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ActiveDirectoryState | undefined;
            resourceInputs["adServer"] = state ? state.adServer : undefined;
            resourceInputs["aesEncryption"] = state ? state.aesEncryption : undefined;
            resourceInputs["allowLocalNfsUsersWithLdap"] = state ? state.allowLocalNfsUsersWithLdap : undefined;
            resourceInputs["backupOperators"] = state ? state.backupOperators : undefined;
            resourceInputs["connectionType"] = state ? state.connectionType : undefined;
            resourceInputs["dnsServer"] = state ? state.dnsServer : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["kdcIp"] = state ? state.kdcIp : undefined;
            resourceInputs["ldapSigning"] = state ? state.ldapSigning : undefined;
            resourceInputs["managedAd"] = state ? state.managedAd : undefined;
            resourceInputs["netBios"] = state ? state.netBios : undefined;
            resourceInputs["organizationalUnit"] = state ? state.organizationalUnit : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["securityOperators"] = state ? state.securityOperators : undefined;
            resourceInputs["site"] = state ? state.site : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as ActiveDirectoryArgs | undefined;
            if ((!args || args.connectionType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionType'");
            }
            if ((!args || args.dnsServer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dnsServer'");
            }
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.netBios === undefined) && !opts.urn) {
                throw new Error("Missing required property 'netBios'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["adServer"] = args ? args.adServer : undefined;
            resourceInputs["aesEncryption"] = args ? args.aesEncryption : undefined;
            resourceInputs["allowLocalNfsUsersWithLdap"] = args ? args.allowLocalNfsUsersWithLdap : undefined;
            resourceInputs["backupOperators"] = args ? args.backupOperators : undefined;
            resourceInputs["connectionType"] = args ? args.connectionType : undefined;
            resourceInputs["dnsServer"] = args ? args.dnsServer : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["kdcIp"] = args ? args.kdcIp : undefined;
            resourceInputs["ldapSigning"] = args ? args.ldapSigning : undefined;
            resourceInputs["managedAd"] = args ? args.managedAd : undefined;
            resourceInputs["netBios"] = args ? args.netBios : undefined;
            resourceInputs["organizationalUnit"] = args ? args.organizationalUnit : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["securityOperators"] = args ? args.securityOperators : undefined;
            resourceInputs["site"] = args ? args.site : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ActiveDirectory.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ActiveDirectory resources.
 */
export interface ActiveDirectoryState {
    adServer?: pulumi.Input<string>;
    aesEncryption?: pulumi.Input<boolean>;
    allowLocalNfsUsersWithLdap?: pulumi.Input<boolean>;
    backupOperators?: pulumi.Input<pulumi.Input<string>[]>;
    connectionType?: pulumi.Input<string>;
    dnsServer?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    kdcIp?: pulumi.Input<string>;
    ldapSigning?: pulumi.Input<boolean>;
    managedAd?: pulumi.Input<boolean>;
    netBios?: pulumi.Input<string>;
    organizationalUnit?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    securityOperators?: pulumi.Input<pulumi.Input<string>[]>;
    site?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ActiveDirectory resource.
 */
export interface ActiveDirectoryArgs {
    adServer?: pulumi.Input<string>;
    aesEncryption?: pulumi.Input<boolean>;
    allowLocalNfsUsersWithLdap?: pulumi.Input<boolean>;
    backupOperators?: pulumi.Input<pulumi.Input<string>[]>;
    connectionType: pulumi.Input<string>;
    dnsServer: pulumi.Input<string>;
    domain: pulumi.Input<string>;
    kdcIp?: pulumi.Input<string>;
    ldapSigning?: pulumi.Input<boolean>;
    managedAd?: pulumi.Input<boolean>;
    netBios: pulumi.Input<string>;
    organizationalUnit?: pulumi.Input<string>;
    password: pulumi.Input<string>;
    region: pulumi.Input<string>;
    securityOperators?: pulumi.Input<pulumi.Input<string>[]>;
    site?: pulumi.Input<string>;
    username: pulumi.Input<string>;
}
