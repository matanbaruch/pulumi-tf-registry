// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetArchitectureArgs, GetArchitectureResult, GetArchitectureOutputArgs } from "./getArchitecture";
export const getArchitecture: typeof import("./getArchitecture").getArchitecture = null as any;
export const getArchitectureOutput: typeof import("./getArchitecture").getArchitectureOutput = null as any;
utilities.lazyLoad(exports, ["getArchitecture","getArchitectureOutput"], () => require("./getArchitecture"));

export { PolicyRoleAssignmentsArgs, PolicyRoleAssignmentsState } from "./policyRoleAssignments";
export type PolicyRoleAssignments = import("./policyRoleAssignments").PolicyRoleAssignments;
export const PolicyRoleAssignments: typeof import("./policyRoleAssignments").PolicyRoleAssignments = null as any;
utilities.lazyLoad(exports, ["PolicyRoleAssignments"], () => require("./policyRoleAssignments"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "alz:index/policyRoleAssignments:PolicyRoleAssignments":
                return new PolicyRoleAssignments(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("alz", "index/policyRoleAssignments", _module)
pulumi.runtime.registerResourcePackage("alz", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:alz") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
