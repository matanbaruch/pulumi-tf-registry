// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("alz");

/**
 * A list of auxiliary tenant ids which should be used. If not specified, value will be attempted to be read from the
 * `ARM_AUXILIARY_TENANT_IDS` environment variable. When configuring from the environment, use a semicolon as a delimiter.
 */
export declare const auxiliaryTenantIds: string[] | undefined;
Object.defineProperty(exports, "auxiliaryTenantIds", {
    get() {
        return __config.getObject<string[]>("auxiliaryTenantIds");
    },
    enumerable: true,
});

/**
 * The password associated with the client certificate. For use when authenticating as a service principal using a client
 * certificate. If not specified, value will be attempted to be read from the `ARM_CLIENT_CERTIFICATE_PASSWORD` environment
 * variable.
 */
export declare const clientCertificatePassword: string | undefined;
Object.defineProperty(exports, "clientCertificatePassword", {
    get() {
        return __config.get("clientCertificatePassword");
    },
    enumerable: true,
});

/**
 * The path to the client certificate associated with the service principal for use when authenticating as a service
 * principal using a client certificate. If not specified, value will be attempted to be read from the
 * `ARM_CLIENT_CERTIFICATE_PATH` environment variable.
 */
export declare const clientCertificatePath: string | undefined;
Object.defineProperty(exports, "clientCertificatePath", {
    get() {
        return __config.get("clientCertificatePath");
    },
    enumerable: true,
});

/**
 * The client id which should be used. For use when authenticating as a service principal. If not specified, value will be
 * attempted to be read from the `ARM_CLIENT_ID` environment variable.
 */
export declare const clientId: string | undefined;
Object.defineProperty(exports, "clientId", {
    get() {
        return __config.get("clientId");
    },
    enumerable: true,
});

/**
 * The client secret which should be used. For use when authenticating as a service principal using a client secret. If not
 * specified, value will be attempted to be read from the `ARM_CLIENT_SECRET` environment variable.
 */
export declare const clientSecret: string | undefined;
Object.defineProperty(exports, "clientSecret", {
    get() {
        return __config.get("clientSecret");
    },
    enumerable: true,
});

export declare const environment: string | undefined;
Object.defineProperty(exports, "environment", {
    get() {
        return __config.get("environment");
    },
    enumerable: true,
});

/**
 * Whether to allow overwriting of the library by other lib directories. Default is `false`.
 */
export declare const libOverwriteEnabled: boolean | undefined;
Object.defineProperty(exports, "libOverwriteEnabled", {
    get() {
        return __config.getObject<boolean>("libOverwriteEnabled");
    },
    enumerable: true,
});

/**
 * A list of references to the [ALZ library](https://aka.ms/alz/library) to use. Each reference should either contain the
 * `path` (e.g. `platform/alz`) and the `ref` (e.g. `2024.03.03`), or a `custom_url` to be supplied to go-getter. If this
 * value is not specified, the default value will be used, which is: ```terraform alz_library_references = [ { path =
 * "platform/alz", tag = "2024.03.03" }, ] ```
 */
export declare const libraryReferences: outputs.config.LibraryReferences[] | undefined;
Object.defineProperty(exports, "libraryReferences", {
    get() {
        return __config.getObject<outputs.config.LibraryReferences[]>("libraryReferences");
    },
    enumerable: true,
});

/**
 * The bearer token for the request to the OIDC provider. For use when authenticating using OpenID Connect. If not
 * specified, value will be attempted to be read from the first non-empty value of the `ARM_OIDC_REQUEST_TOKEN` and
 * `ACTIONS_ID_TOKEN_REQUEST_TOKEN` environment variables.
 */
export declare const oidcRequestToken: string | undefined;
Object.defineProperty(exports, "oidcRequestToken", {
    get() {
        return __config.get("oidcRequestToken");
    },
    enumerable: true,
});

/**
 * The URL for the OIDC provider from which to request an id token. For use when authenticating as a service principal
 * using OpenID Connect. If not specified, value will be attempted to be read from the first non-empty value of the
 * `ARM_OIDC_REQUEST_URL` and `ACTIONS_ID_TOKEN_REQUEST_URL` environment variables.
 */
export declare const oidcRequestUrl: string | undefined;
Object.defineProperty(exports, "oidcRequestUrl", {
    get() {
        return __config.get("oidcRequestUrl");
    },
    enumerable: true,
});

/**
 * The OIDC id token for use when authenticating as a service principal using OpenID Connect. If not specified, value will
 * be attempted to be read from the `ARM_OIDC_TOKEN` environment variable.
 */
export declare const oidcToken: string | undefined;
Object.defineProperty(exports, "oidcToken", {
    get() {
        return __config.get("oidcToken");
    },
    enumerable: true,
});

/**
 * The path to a file containing an OIDC id token for use when authenticating using OpenID Connect. If not specified, value
 * will be attempted to be read from the `ARM_OIDC_TOKEN_FILE_PATH` environment variable.
 */
export declare const oidcTokenFilePath: string | undefined;
Object.defineProperty(exports, "oidcTokenFilePath", {
    get() {
        return __config.get("oidcTokenFilePath");
    },
    enumerable: true,
});

/**
 * Should the provider skip registering all of the resource providers that it supports, if they're not already registered?
 * Default is `false`. If not specified, value will be attempted to be read from the `ARM_SKIP_PROVIDER_REGISTRATION`
 * environment variable.
 */
export declare const skipProviderRegistration: boolean | undefined;
Object.defineProperty(exports, "skipProviderRegistration", {
    get() {
        return __config.getObject<boolean>("skipProviderRegistration");
    },
    enumerable: true,
});

/**
 * The Tenant ID which should be used. If not specified, value will be attempted to be read from the `ARM_TENANT_ID`
 * environment variable.
 */
export declare const tenantId: string | undefined;
Object.defineProperty(exports, "tenantId", {
    get() {
        return __config.get("tenantId");
    },
    enumerable: true,
});

/**
 * Allow Azure CLI to be used for authentication. Default is `true`. If not specified, value will be attempted to be read
 * from the `ARM_USE_CLI` environment variable.
 */
export declare const useCli: boolean | undefined;
Object.defineProperty(exports, "useCli", {
    get() {
        return __config.getObject<boolean>("useCli");
    },
    enumerable: true,
});

/**
 * Allow managed service identity to be used for authentication. Default is `false`. If not specified, value will be
 * attempted to be read from the `ARM_USE_MSI` environment variable.
 */
export declare const useMsi: boolean | undefined;
Object.defineProperty(exports, "useMsi", {
    get() {
        return __config.getObject<boolean>("useMsi");
    },
    enumerable: true,
});

/**
 * Allow OpenID Connect to be used for authentication. Default is `false`. If not specified, value will be attempted to be
 * read from the `ARM_USE_OIDC` environment variable.
 */
export declare const useOidc: boolean | undefined;
Object.defineProperty(exports, "useOidc", {
    get() {
        return __config.getObject<boolean>("useOidc");
    },
    enumerable: true,
});

