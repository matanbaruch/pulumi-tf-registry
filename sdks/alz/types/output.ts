// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetArchitectureManagementGroup {
    /**
     * The display name of the management group.
     */
    displayName: string;
    /**
     * Whether the management group already exists or not. Used to determine if the management group should be created or just have policy/role resources created within.
     */
    exists: boolean;
    /**
     * The id of the management group. This the last segment of the resource id.
     */
    id: string;
    /**
     * The level of the management group in the hierarchy, relative to the supplied root management group. The level starts at zero.
     */
    level: number;
    /**
     * The parent management group id.
     */
    parentId: string;
    /**
     * The policy assignments to apply to the management group. The key is the policy assignment name, and the value is the policy assignment JSON as a string.
     */
    policyAssignments: {[key: string]: string};
    /**
     * The policy definitions to apply to the management group. The key is the policy definition name, and the value is the policy definition JSON as a string.
     */
    policyDefinitions: {[key: string]: string};
    /**
     * The policy set definitions to apply to the management group. The key is the policy set definition name, and the value is the policy set definition JSON as a string.
     */
    policySetDefinitions: {[key: string]: string};
    /**
     * The role definitions to apply to the management group. The key is the role definition name, and the value is the role definition JSON as a string.
     */
    roleDefinitions: {[key: string]: string};
}

export interface GetArchitecturePolicyAssignmentsToModify {
    /**
     * A map of policy assignments to modify. The key is the policy assignment name, and the value is an object containing the modifications to make.
     */
    policyAssignments?: {[key: string]: outputs.GetArchitecturePolicyAssignmentsToModifyPolicyAssignments};
}

export interface GetArchitecturePolicyAssignmentsToModifyPolicyAssignments {
    /**
     * The enforcement mode for the policy assignment. Valid values are `Default` and `DoNotEnforce`.
     */
    enforcementMode?: string;
    /**
     * The identity type. Must be one of `SystemAssigned` or `UserAssigned`.
     */
    identity?: string;
    /**
     * A set of zero or one identity ids to assign to the policy assignment. Required if `identity` is `UserAssigned`. **Do not** pass in computed values, instead construct the resource id yourself.
     */
    identityIds?: string[];
    /**
     * The non-compliance messages to use for the policy assignment.
     */
    nonComplianceMessages?: outputs.GetArchitecturePolicyAssignmentsToModifyPolicyAssignmentsNonComplianceMessage[];
    /**
     * The overrides for this policy assignment. There are a maximum of 10 overrides allowed per assignment. If specified here the overrides will replace the existing overrides.
     */
    overrides?: outputs.GetArchitecturePolicyAssignmentsToModifyPolicyAssignmentsOverride[];
    parameters?: {[key: string]: string};
    /**
     * The resource selectors to use for the policy assignment. A maximum of 10 resource selectors are allowed per assignment. If specified here the resource selectors will replace any existing resource selectors.
     */
    resourceSelectors?: outputs.GetArchitecturePolicyAssignmentsToModifyPolicyAssignmentsResourceSelector[];
}

export interface GetArchitecturePolicyAssignmentsToModifyPolicyAssignmentsNonComplianceMessage {
    /**
     * The non-compliance message to use for the policy assignment.
     */
    message: string;
    /**
     * The policy definition reference id (not the resource id) to use for the non compliance message. This references the definition within the policy set.
     */
    policyDefinitionReferenceId?: string;
}

export interface GetArchitecturePolicyAssignmentsToModifyPolicyAssignmentsOverride {
    /**
     * The property the assignment will override. The supported kind is `policyEffect`.
     */
    kind: string;
    /**
     * The selectors to use for the override.
     */
    overrideSelectors?: outputs.GetArchitecturePolicyAssignmentsToModifyPolicyAssignmentsOverrideOverrideSelector[];
    /**
     * The new value which will override the existing value. The supported values are: `addToNetworkGroup`, `append`, `audit`, `auditIfNotExists`, `deny`, `denyAction`, `deployIfNotExists`, `disabled`, `manual`, `modify`, `mutate`. <https://learn.microsoft.com/azure/governance/policy/concepts/effects>
     */
    value: string;
}

export interface GetArchitecturePolicyAssignmentsToModifyPolicyAssignmentsOverrideOverrideSelector {
    /**
     * The list of values that the selector will match. Conflicts with `not_in`.
     */
    ins?: string[];
    /**
     * The property of a selector that describes what characteristic will narrow down the scope of the override. Allowed value for kind: `policyEffect` is: `policyDefinitionReferenceId`.
     */
    kind: string;
    /**
     * The list of values that the selector will not match. Conflicts with `in`.
     */
    notIns?: string[];
}

export interface GetArchitecturePolicyAssignmentsToModifyPolicyAssignmentsResourceSelector {
    /**
     * The name of the resource selector. The name must be unique within the assignment.
     */
    name: string;
    /**
     * The selectors to use for the resource selector.
     */
    resourceSelectorSelectors?: outputs.GetArchitecturePolicyAssignmentsToModifyPolicyAssignmentsResourceSelectorResourceSelectorSelector[];
}

export interface GetArchitecturePolicyAssignmentsToModifyPolicyAssignmentsResourceSelectorResourceSelectorSelector {
    /**
     * The list of values that the selector will match. Conflicts with `not_in`.
     */
    ins?: string[];
    /**
     * The property of a selector that describes what characteristic will narrow down the set of evaluated resources. Each kind can only be used once in a single resource selector. Allowed values are: `resourceLocation`, `resourceType`, `resourceWithoutLocation`. `resourceWithoutLocation` cannot be used in the same resource selector as `resourceLocation`.
     */
    kind: string;
    /**
     * The list of values that the selector will not match. Conflicts with `in`.
     */
    notIns?: string[];
}

export interface GetArchitecturePolicyRoleAssignment {
    /**
     * The id of the management group where the policy assignment will be created.
     */
    managementGroupId: string;
    /**
     * The name of the policy assignment to enable retrieval of the identity id.
     */
    policyAssignmentName: string;
    /**
     * The role definition id to assign.
     */
    roleDefinitionId: string;
    /**
     * The scope of the assignment.
     */
    scope: string;
}

export interface GetArchitectureTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    read?: string;
}

export interface PolicyRoleAssignmentsAssignment {
    /**
     * The principal id to assign the role to.
     */
    principalId: string;
    /**
     * The resource id of the role assignment.
     */
    resourceId: string;
    /**
     * The role definition id to assign.
     */
    roleDefinitionId: string;
    /**
     * The scope of the assignment.
     */
    scope: string;
}

export namespace config {
    export interface LibraryReferences {
        customUrl?: string;
        /**
         * The path in the ALZ Library, e.g. `platform/alz`. Also requires `ref`. Conflicts with `custom_url`.
         */
        path?: string;
        /**
         * This is the version of the library to use, e.g. `2024.03.03`. Also requires `path`. Conflicts with `custom_url`.
         */
        ref?: string;
    }

}
