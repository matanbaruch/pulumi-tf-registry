// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getRemoteNetwork(args: GetRemoteNetworkArgs, opts?: pulumi.InvokeOptions): Promise<GetRemoteNetworkResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("scm:index/getRemoteNetwork:getRemoteNetwork", {
        "folder": args.folder,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRemoteNetwork.
 */
export interface GetRemoteNetworkArgs {
    folder?: string;
    id: string;
}

/**
 * A collection of values returned by getRemoteNetwork.
 */
export interface GetRemoteNetworkResult {
    readonly ecmpLoadBalancing: string;
    readonly ecmpTunnels: outputs.GetRemoteNetworkEcmpTunnel[];
    readonly folder: string;
    readonly id: string;
    readonly ipsecTunnel: string;
    readonly licenseType: string;
    readonly name: string;
    readonly protocol: outputs.GetRemoteNetworkProtocol;
    readonly region: string;
    readonly secondaryIpsecTunnel: string;
    readonly spnName: string;
    readonly subnets: string[];
    readonly tfid: string;
}
export function getRemoteNetworkOutput(args: GetRemoteNetworkOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRemoteNetworkResult> {
    return pulumi.output(args).apply((a: any) => getRemoteNetwork(a, opts))
}

/**
 * A collection of arguments for invoking getRemoteNetwork.
 */
export interface GetRemoteNetworkOutputArgs {
    folder?: pulumi.Input<string>;
    id: pulumi.Input<string>;
}
