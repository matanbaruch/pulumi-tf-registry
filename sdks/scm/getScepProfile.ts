// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getScepProfile(args: GetScepProfileArgs, opts?: pulumi.InvokeOptions): Promise<GetScepProfileResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("scm:index/getScepProfile:getScepProfile", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getScepProfile.
 */
export interface GetScepProfileArgs {
    id: string;
}

/**
 * A collection of values returned by getScepProfile.
 */
export interface GetScepProfileResult {
    readonly algorithm: outputs.GetScepProfileAlgorithm;
    readonly caIdentityName: string;
    readonly certificateAttributes: outputs.GetScepProfileCertificateAttributes;
    readonly digest: string;
    readonly fingerprint: string;
    readonly id: string;
    readonly name: string;
    readonly scepCaCert: string;
    readonly scepChallenge: outputs.GetScepProfileScepChallenge;
    readonly scepClientCert: string;
    readonly scepUrl: string;
    readonly subject: string;
    readonly tfid: string;
    readonly useAsDigitalSignature: boolean;
    readonly useForKeyEncipherment: boolean;
}
export function getScepProfileOutput(args: GetScepProfileOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetScepProfileResult> {
    return pulumi.output(args).apply((a: any) => getScepProfile(a, opts))
}

/**
 * A collection of arguments for invoking getScepProfile.
 */
export interface GetScepProfileOutputArgs {
    id: pulumi.Input<string>;
}
