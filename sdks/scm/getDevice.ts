// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDevice(args: GetDeviceArgs, opts?: pulumi.InvokeOptions): Promise<GetDeviceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("scm:index/getDevice:getDevice", {
        "serial": args.serial,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDevice.
 */
export interface GetDeviceArgs {
    serial: string;
}

/**
 * A collection of values returned by getDevice.
 */
export interface GetDeviceResult {
    readonly antiVirusVersion: string;
    readonly appReleaseDate: string;
    readonly appVersion: string;
    readonly avReleaseDate: string;
    readonly availableLicensesses: outputs.GetDeviceAvailableLicensess[];
    readonly connectedSince: string;
    readonly devCertDetail: string;
    readonly devCertExpiryDate: string;
    readonly family: string;
    readonly gpClientVerion: string;
    readonly gpDataVersion: string;
    readonly haPeerSerial: string;
    readonly haPeerState: string;
    readonly haState: string;
    readonly hostname: string;
    readonly id: string;
    readonly installedLicenses: outputs.GetDeviceInstalledLicense[];
    readonly iotReleaseDate: string;
    readonly iotVersion: string;
    readonly ipAddress: string;
    readonly ipV6Address: string;
    readonly isConnected: boolean;
    readonly licenseMatch: boolean;
    readonly logDbVersion: string;
    readonly macAddress: string;
    readonly model: string;
    readonly serial: string;
    readonly softwareVersion: string;
    readonly tfid: string;
    readonly threatReleaseDate: string;
    readonly threatVersion: string;
    readonly uptime: string;
    readonly urlDbType: string;
    readonly urlDbVer: string;
    readonly vmState: string;
    readonly wfReleaseDate: string;
    readonly wfVer: string;
}
export function getDeviceOutput(args: GetDeviceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDeviceResult> {
    return pulumi.output(args).apply((a: any) => getDevice(a, opts))
}

/**
 * A collection of arguments for invoking getDevice.
 */
export interface GetDeviceOutputArgs {
    serial: pulumi.Input<string>;
}
