// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getApplicationFilter(args: GetApplicationFilterArgs, opts?: pulumi.InvokeOptions): Promise<GetApplicationFilterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("scm:index/getApplicationFilter:getApplicationFilter", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getApplicationFilter.
 */
export interface GetApplicationFilterArgs {
    id: string;
}

/**
 * A collection of values returned by getApplicationFilter.
 */
export interface GetApplicationFilterResult {
    readonly categories: string[];
    readonly evasive: boolean;
    readonly excessiveBandwidthUse: boolean;
    readonly excludes: string[];
    readonly hasKnownVulnerabilities: boolean;
    readonly id: string;
    readonly isSaas: boolean;
    readonly name: string;
    readonly newAppid: boolean;
    readonly pervasive: boolean;
    readonly proneToMisuse: boolean;
    readonly risks: number[];
    readonly saasCertifications: string[];
    readonly saasRisks: string[];
    readonly subcategories: string[];
    readonly tagging: outputs.GetApplicationFilterTagging;
    readonly technologies: string[];
    readonly tfid: string;
    readonly transfersFiles: boolean;
    readonly tunnelsOtherApps: boolean;
    readonly usedByMalware: boolean;
}
export function getApplicationFilterOutput(args: GetApplicationFilterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetApplicationFilterResult> {
    return pulumi.output(args).apply((a: any) => getApplicationFilter(a, opts))
}

/**
 * A collection of arguments for invoking getApplicationFilter.
 */
export interface GetApplicationFilterOutputArgs {
    id: pulumi.Input<string>;
}
