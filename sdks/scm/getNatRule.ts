// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNatRule(args: GetNatRuleArgs, opts?: pulumi.InvokeOptions): Promise<GetNatRuleResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("scm:index/getNatRule:getNatRule", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNatRule.
 */
export interface GetNatRuleArgs {
    id: string;
}

/**
 * A collection of values returned by getNatRule.
 */
export interface GetNatRuleResult {
    readonly activeActiveDeviceBinding: string;
    readonly description: string;
    readonly destinationTranslation: outputs.GetNatRuleDestinationTranslation;
    readonly destinations: string[];
    readonly device: string;
    readonly disabled: boolean;
    readonly dynamicDestinationTranslation: outputs.GetNatRuleDynamicDestinationTranslation;
    readonly folder: string;
    readonly froms: string[];
    readonly groupTag: string;
    readonly id: string;
    readonly name: string;
    readonly natType: string;
    readonly service: string;
    readonly snippet: string;
    readonly sourceTranslation: outputs.GetNatRuleSourceTranslation;
    readonly sources: string[];
    readonly tags: string[];
    readonly target: outputs.GetNatRuleTarget;
    readonly tfid: string;
    readonly toInterface: string;
    readonly tos: string[];
}
export function getNatRuleOutput(args: GetNatRuleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNatRuleResult> {
    return pulumi.output(args).apply((a: any) => getNatRule(a, opts))
}

/**
 * A collection of arguments for invoking getNatRule.
 */
export interface GetNatRuleOutputArgs {
    id: pulumi.Input<string>;
}
