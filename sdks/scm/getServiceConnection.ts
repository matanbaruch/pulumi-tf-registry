// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getServiceConnection(args: GetServiceConnectionArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceConnectionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("scm:index/getServiceConnection:getServiceConnection", {
        "folder": args.folder,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getServiceConnection.
 */
export interface GetServiceConnectionArgs {
    folder?: string;
    id: string;
}

/**
 * A collection of values returned by getServiceConnection.
 */
export interface GetServiceConnectionResult {
    readonly backupSC: string;
    readonly bgpPeer: outputs.GetServiceConnectionBgpPeer;
    readonly folder: string;
    readonly id: string;
    readonly ipsecTunnel: string;
    readonly name: string;
    readonly natPool: string;
    readonly noExportCommunity: string;
    readonly onboardingType: string;
    readonly protocol: outputs.GetServiceConnectionProtocol;
    readonly qos: outputs.GetServiceConnectionQos;
    readonly region: string;
    readonly secondaryIpsecTunnel: string;
    readonly sourceNat: boolean;
    readonly subnets: string[];
    readonly tfid: string;
}
export function getServiceConnectionOutput(args: GetServiceConnectionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceConnectionResult> {
    return pulumi.output(args).apply((a: any) => getServiceConnection(a, opts))
}

/**
 * A collection of arguments for invoking getServiceConnection.
 */
export interface GetServiceConnectionOutputArgs {
    folder?: pulumi.Input<string>;
    id: pulumi.Input<string>;
}
