// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getServiceConnectionGroup(args: GetServiceConnectionGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceConnectionGroupResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("scm:index/getServiceConnectionGroup:getServiceConnectionGroup", {
        "folder": args.folder,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getServiceConnectionGroup.
 */
export interface GetServiceConnectionGroupArgs {
    folder?: string;
    id: string;
}

/**
 * A collection of values returned by getServiceConnectionGroup.
 */
export interface GetServiceConnectionGroupResult {
    readonly disableSnat: boolean;
    readonly folder: string;
    readonly id: string;
    readonly name: string;
    readonly pbfOnly: boolean;
    readonly targets: string[];
    readonly tfid: string;
}
export function getServiceConnectionGroupOutput(args: GetServiceConnectionGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceConnectionGroupResult> {
    return pulumi.output(args).apply((a: any) => getServiceConnectionGroup(a, opts))
}

/**
 * A collection of arguments for invoking getServiceConnectionGroup.
 */
export interface GetServiceConnectionGroupOutputArgs {
    folder?: pulumi.Input<string>;
    id: pulumi.Input<string>;
}
