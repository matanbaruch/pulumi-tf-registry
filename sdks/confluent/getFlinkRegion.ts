// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getFlinkRegion(args: GetFlinkRegionArgs, opts?: pulumi.InvokeOptions): Promise<GetFlinkRegionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("confluent:index/getFlinkRegion:getFlinkRegion", {
        "cloud": args.cloud,
        "region": args.region,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFlinkRegion.
 */
export interface GetFlinkRegionArgs {
    cloud: string;
    region: string;
}

/**
 * A collection of values returned by getFlinkRegion.
 */
export interface GetFlinkRegionResult {
    readonly apiVersion: string;
    readonly cloud: string;
    readonly id: string;
    readonly kind: string;
    readonly privateRestEndpoint: string;
    readonly region: string;
    readonly restEndpoint: string;
}
export function getFlinkRegionOutput(args: GetFlinkRegionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFlinkRegionResult> {
    return pulumi.output(args).apply((a: any) => getFlinkRegion(a, opts))
}

/**
 * A collection of arguments for invoking getFlinkRegion.
 */
export interface GetFlinkRegionOutputArgs {
    cloud: pulumi.Input<string>;
    region: pulumi.Input<string>;
}
