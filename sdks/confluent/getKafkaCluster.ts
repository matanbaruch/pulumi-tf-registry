// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getKafkaCluster(args: GetKafkaClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetKafkaClusterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("confluent:index/getKafkaCluster:getKafkaCluster", {
        "basics": args.basics,
        "dedicated": args.dedicated,
        "displayName": args.displayName,
        "enterprises": args.enterprises,
        "environment": args.environment,
        "freights": args.freights,
        "id": args.id,
        "standards": args.standards,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getKafkaCluster.
 */
export interface GetKafkaClusterArgs {
    basics?: inputs.GetKafkaClusterBasic[];
    dedicated?: inputs.GetKafkaClusterDedicated;
    displayName?: string;
    enterprises?: inputs.GetKafkaClusterEnterprise[];
    environment: inputs.GetKafkaClusterEnvironment;
    freights?: inputs.GetKafkaClusterFreight[];
    id?: string;
    standards?: inputs.GetKafkaClusterStandard[];
}

/**
 * A collection of values returned by getKafkaCluster.
 */
export interface GetKafkaClusterResult {
    readonly apiVersion: string;
    readonly availability: string;
    readonly basics?: outputs.GetKafkaClusterBasic[];
    readonly bootstrapEndpoint: string;
    readonly byokKeys: outputs.GetKafkaClusterByokKey[];
    readonly cloud: string;
    readonly dedicated?: outputs.GetKafkaClusterDedicated;
    readonly displayName: string;
    readonly enterprises?: outputs.GetKafkaClusterEnterprise[];
    readonly environment: outputs.GetKafkaClusterEnvironment;
    readonly freights?: outputs.GetKafkaClusterFreight[];
    readonly id: string;
    readonly kind: string;
    readonly networks: outputs.GetKafkaClusterNetwork[];
    readonly rbacCrn: string;
    readonly region: string;
    readonly restEndpoint: string;
    readonly standards?: outputs.GetKafkaClusterStandard[];
}
export function getKafkaClusterOutput(args: GetKafkaClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetKafkaClusterResult> {
    return pulumi.output(args).apply((a: any) => getKafkaCluster(a, opts))
}

/**
 * A collection of arguments for invoking getKafkaCluster.
 */
export interface GetKafkaClusterOutputArgs {
    basics?: pulumi.Input<pulumi.Input<inputs.GetKafkaClusterBasicArgs>[]>;
    dedicated?: pulumi.Input<inputs.GetKafkaClusterDedicatedArgs>;
    displayName?: pulumi.Input<string>;
    enterprises?: pulumi.Input<pulumi.Input<inputs.GetKafkaClusterEnterpriseArgs>[]>;
    environment: pulumi.Input<inputs.GetKafkaClusterEnvironmentArgs>;
    freights?: pulumi.Input<pulumi.Input<inputs.GetKafkaClusterFreightArgs>[]>;
    id?: pulumi.Input<string>;
    standards?: pulumi.Input<pulumi.Input<inputs.GetKafkaClusterStandardArgs>[]>;
}
