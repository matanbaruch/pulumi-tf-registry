// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getKafkaTopic(args: GetKafkaTopicArgs, opts?: pulumi.InvokeOptions): Promise<GetKafkaTopicResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("confluent:index/getKafkaTopic:getKafkaTopic", {
        "credentials": args.credentials,
        "id": args.id,
        "kafkaCluster": args.kafkaCluster,
        "restEndpoint": args.restEndpoint,
        "topicName": args.topicName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getKafkaTopic.
 */
export interface GetKafkaTopicArgs {
    credentials?: inputs.GetKafkaTopicCredentials;
    id?: string;
    kafkaCluster?: inputs.GetKafkaTopicKafkaCluster;
    restEndpoint: string;
    topicName: string;
}

/**
 * A collection of values returned by getKafkaTopic.
 */
export interface GetKafkaTopicResult {
    readonly config: {[key: string]: string};
    readonly credentials?: outputs.GetKafkaTopicCredentials;
    readonly id: string;
    readonly kafkaCluster?: outputs.GetKafkaTopicKafkaCluster;
    readonly partitionsCount: number;
    readonly restEndpoint: string;
    readonly topicName: string;
}
export function getKafkaTopicOutput(args: GetKafkaTopicOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetKafkaTopicResult> {
    return pulumi.output(args).apply((a: any) => getKafkaTopic(a, opts))
}

/**
 * A collection of arguments for invoking getKafkaTopic.
 */
export interface GetKafkaTopicOutputArgs {
    credentials?: pulumi.Input<inputs.GetKafkaTopicCredentialsArgs>;
    id?: pulumi.Input<string>;
    kafkaCluster?: pulumi.Input<inputs.GetKafkaTopicKafkaClusterArgs>;
    restEndpoint: pulumi.Input<string>;
    topicName: pulumi.Input<string>;
}
