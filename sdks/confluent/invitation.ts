// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Invitation extends pulumi.CustomResource {
    /**
     * Get an existing Invitation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InvitationState, opts?: pulumi.CustomResourceOptions): Invitation {
        return new Invitation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'confluent:index/invitation:Invitation';

    /**
     * Returns true if the given object is an instance of Invitation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Invitation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Invitation.__pulumiType;
    }

    public /*out*/ readonly acceptedAt!: pulumi.Output<string>;
    /**
     * Defaults to `false`.
     */
    public readonly allowDeletion!: pulumi.Output<boolean | undefined>;
    public readonly authType!: pulumi.Output<string>;
    public /*out*/ readonly creators!: pulumi.Output<outputs.InvitationCreator[]>;
    public readonly email!: pulumi.Output<string>;
    public /*out*/ readonly expiresAt!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public /*out*/ readonly users!: pulumi.Output<outputs.InvitationUser[]>;

    /**
     * Create a Invitation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InvitationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InvitationArgs | InvitationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InvitationState | undefined;
            resourceInputs["acceptedAt"] = state ? state.acceptedAt : undefined;
            resourceInputs["allowDeletion"] = state ? state.allowDeletion : undefined;
            resourceInputs["authType"] = state ? state.authType : undefined;
            resourceInputs["creators"] = state ? state.creators : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["expiresAt"] = state ? state.expiresAt : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
        } else {
            const args = argsOrState as InvitationArgs | undefined;
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            resourceInputs["allowDeletion"] = args ? args.allowDeletion : undefined;
            resourceInputs["authType"] = args ? args.authType : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["acceptedAt"] = undefined /*out*/;
            resourceInputs["creators"] = undefined /*out*/;
            resourceInputs["expiresAt"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["users"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Invitation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Invitation resources.
 */
export interface InvitationState {
    acceptedAt?: pulumi.Input<string>;
    /**
     * Defaults to `false`.
     */
    allowDeletion?: pulumi.Input<boolean>;
    authType?: pulumi.Input<string>;
    creators?: pulumi.Input<pulumi.Input<inputs.InvitationCreator>[]>;
    email?: pulumi.Input<string>;
    expiresAt?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<inputs.InvitationUser>[]>;
}

/**
 * The set of arguments for constructing a Invitation resource.
 */
export interface InvitationArgs {
    /**
     * Defaults to `false`.
     */
    allowDeletion?: pulumi.Input<boolean>;
    authType?: pulumi.Input<string>;
    email: pulumi.Input<string>;
}
