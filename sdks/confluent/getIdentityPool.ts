// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIdentityPool(args: GetIdentityPoolArgs, opts?: pulumi.InvokeOptions): Promise<GetIdentityPoolResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("confluent:index/getIdentityPool:getIdentityPool", {
        "displayName": args.displayName,
        "id": args.id,
        "identityProvider": args.identityProvider,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIdentityPool.
 */
export interface GetIdentityPoolArgs {
    displayName?: string;
    id?: string;
    identityProvider: inputs.GetIdentityPoolIdentityProvider;
}

/**
 * A collection of values returned by getIdentityPool.
 */
export interface GetIdentityPoolResult {
    readonly description: string;
    readonly displayName: string;
    readonly filter: string;
    readonly id: string;
    readonly identityClaim: string;
    readonly identityProvider: outputs.GetIdentityPoolIdentityProvider;
}
export function getIdentityPoolOutput(args: GetIdentityPoolOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIdentityPoolResult> {
    return pulumi.output(args).apply((a: any) => getIdentityPool(a, opts))
}

/**
 * A collection of arguments for invoking getIdentityPool.
 */
export interface GetIdentityPoolOutputArgs {
    displayName?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    identityProvider: pulumi.Input<inputs.GetIdentityPoolIdentityProviderArgs>;
}
