// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AccessPointAwsEgressPrivateLinkEndpoint {
    /**
     * Defaults to `false`.
     */
    enableHighAvailability?: boolean;
    vpcEndpointDnsName: string;
    vpcEndpointId: string;
    vpcEndpointServiceName: string;
}

export interface AccessPointAzureEgressPrivateLinkEndpoint {
    privateEndpointCustomDnsConfigDomains: string[];
    privateEndpointDomain: string;
    privateEndpointIpAddress: string;
    privateEndpointResourceId: string;
    privateLinkServiceResourceId: string;
    privateLinkSubresourceName?: string;
}

export interface AccessPointEnvironment {
    /**
     * The unique identifier for the environment.
     */
    id: string;
}

export interface AccessPointGateway {
    /**
     * The unique identifier for the gateway.
     */
    id: string;
}

export interface ApiKeyManagedResource {
    /**
     * The API version of the referred owner.
     */
    apiVersion: string;
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     */
    environment: outputs.ApiKeyManagedResourceEnvironment;
    /**
     * The unique identifier for the referred resource.
     */
    id: string;
    /**
     * The kind of the referred resource.
     */
    kind: string;
}

export interface ApiKeyManagedResourceEnvironment {
    /**
     * The unique identifier for the environment.
     */
    id: string;
}

export interface ApiKeyOwner {
    /**
     * The API version of the referred owner.
     */
    apiVersion: string;
    /**
     * The unique identifier for the referred owner.
     */
    id: string;
    /**
     * The kind of the referred owner.
     */
    kind: string;
}

export interface BusinessMetadataAttributeDefinition {
    defaultValue: string;
    description: string;
    isOptional: boolean;
    name: string;
    options: {[key: string]: string};
    type: string;
}

export interface BusinessMetadataBindingCredentials {
    /**
     * The Cluster API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Cluster API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface BusinessMetadataBindingSchemaRegistryCluster {
    /**
     * The Schema Registry cluster ID (e.g., `lsrc-abc123`).
     */
    id: string;
}

export interface BusinessMetadataCredentials {
    /**
     * The Cluster API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Cluster API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface BusinessMetadataSchemaRegistryCluster {
    /**
     * The Schema Registry cluster ID (e.g., `lsrc-abc123`).
     */
    id: string;
}

export interface ByokKeyAws {
    keyArn: string;
    roles: string[];
}

export interface ByokKeyAzure {
    applicationId: string;
    keyIdentifier: string;
    keyVaultId: string;
    tenantId: string;
}

export interface ByokKeyGcp {
    keyId: string;
    securityGroup: string;
}

export interface CatalogEntityAttributesCredentials {
    /**
     * The Cluster API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Cluster API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface CatalogEntityAttributesSchemaRegistryCluster {
    /**
     * The Schema Registry cluster ID (e.g., `lsrc-abc123`).
     */
    id: string;
}

export interface ClusterLinkDestinationKafkaCluster {
    /**
     * The bootstrap endpoint used by Kafka clients to connect to the Kafka cluster. (e.g., `SASL_SSL://pkc-00000.us-central1.gcp.confluent.cloud:9092` or pkc-00000.us-central1.gcp.confluent.cloud:9092`).
     */
    bootstrapEndpoint?: string;
    /**
     * The Kafka API Credentials.
     */
    credentials?: outputs.ClusterLinkDestinationKafkaClusterCredentials;
    /**
     * The unique identifier for the referred Kafka cluster.
     */
    id: string;
    /**
     * The REST endpoint of the Kafka cluster (e.g., `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
     */
    restEndpoint?: string;
}

export interface ClusterLinkDestinationKafkaClusterCredentials {
    /**
     * The Kafka API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Kafka API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface ClusterLinkLocalKafkaCluster {
    /**
     * The bootstrap endpoint used by Kafka clients to connect to the Kafka cluster. (e.g., `SASL_SSL://pkc-00000.us-central1.gcp.confluent.cloud:9092` or pkc-00000.us-central1.gcp.confluent.cloud:9092`).
     */
    bootstrapEndpoint?: string;
    /**
     * The Kafka API Credentials.
     */
    credentials?: outputs.ClusterLinkLocalKafkaClusterCredentials;
    /**
     * The unique identifier for the referred Kafka cluster.
     */
    id: string;
    /**
     * The REST endpoint of the Kafka cluster (e.g., `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
     */
    restEndpoint?: string;
}

export interface ClusterLinkLocalKafkaClusterCredentials {
    /**
     * The Kafka API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Kafka API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface ClusterLinkRemoteKafkaCluster {
    /**
     * The bootstrap endpoint used by Kafka clients to connect to the Kafka cluster. (e.g., `SASL_SSL://pkc-00000.us-central1.gcp.confluent.cloud:9092` or pkc-00000.us-central1.gcp.confluent.cloud:9092`).
     */
    bootstrapEndpoint?: string;
    /**
     * The Kafka API Credentials.
     */
    credentials?: outputs.ClusterLinkRemoteKafkaClusterCredentials;
    /**
     * The unique identifier for the referred Kafka cluster.
     */
    id: string;
    /**
     * The REST endpoint of the Kafka cluster (e.g., `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
     */
    restEndpoint?: string;
}

export interface ClusterLinkRemoteKafkaClusterCredentials {
    /**
     * The Kafka API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Kafka API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface ClusterLinkSourceKafkaCluster {
    /**
     * The bootstrap endpoint used by Kafka clients to connect to the Kafka cluster. (e.g., `SASL_SSL://pkc-00000.us-central1.gcp.confluent.cloud:9092` or pkc-00000.us-central1.gcp.confluent.cloud:9092`).
     */
    bootstrapEndpoint?: string;
    /**
     * The Kafka API Credentials.
     */
    credentials?: outputs.ClusterLinkSourceKafkaClusterCredentials;
    /**
     * The unique identifier for the referred Kafka cluster.
     */
    id: string;
    /**
     * The REST endpoint of the Kafka cluster (e.g., `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
     */
    restEndpoint?: string;
}

export interface ClusterLinkSourceKafkaClusterCredentials {
    /**
     * The Kafka API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Kafka API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface ConnectorEnvironment {
    /**
     * The unique identifier for the environment.
     */
    id: string;
}

export interface ConnectorKafkaCluster {
    /**
     * The Kafka cluster ID (e.g., `lkc-12345`).
     */
    id: string;
}

export interface ConnectorTimeouts {
    create?: string;
}

export interface DnsForwarderEnvironment {
    /**
     * The unique identifier for the environment.
     */
    id: string;
}

export interface DnsForwarderForwardViaIp {
    dnsServerIps: string[];
}

export interface DnsForwarderGateway {
    /**
     * The unique identifier for the gateway.
     */
    id: string;
}

export interface DnsRecordEnvironment {
    /**
     * The unique identifier for the environment.
     */
    id: string;
}

export interface DnsRecordGateway {
    /**
     * The unique identifier for the gateway.
     */
    id: string;
}

export interface DnsRecordPrivateLinkAccessPoint {
    id: string;
}

export interface EnvironmentStreamGovernance {
    /**
     * Stream Governance Package. 'ESSENTIALS' or 'ADVANCED'
     */
    package: string;
}

export interface FlinkComputePoolEnvironment {
    /**
     * The unique identifier for the environment.
     */
    id: string;
}

export interface FlinkComputePoolTimeouts {
    create?: string;
    delete?: string;
}

export interface FlinkStatementComputePool {
    id: string;
}

export interface FlinkStatementCredentials {
    /**
     * The Cluster API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Cluster API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface FlinkStatementEnvironment {
    id: string;
}

export interface FlinkStatementOrganization {
    id: string;
}

export interface FlinkStatementPrincipal {
    id: string;
}

export interface FlinkStatementTimeouts {
    create?: string;
}

export interface GetAccessPointAwsEgressPrivateLinkEndpoint {
    enableHighAvailability: boolean;
    vpcEndpointDnsName: string;
    vpcEndpointId: string;
    vpcEndpointServiceName: string;
}

export interface GetAccessPointAzureEgressPrivateLinkEndpoint {
    privateEndpointCustomDnsConfigDomains: string[];
    privateEndpointDomain: string;
    privateEndpointIpAddress: string;
    privateEndpointResourceId: string;
    privateLinkServiceResourceId: string;
    privateLinkSubresourceName: string;
}

export interface GetAccessPointEnvironment {
    id: string;
}

export interface GetAccessPointGateway {
    id: string;
}

export interface GetBusinessMetadataAttributeDefinition {
    defaultValue: string;
    description: string;
    isOptional: boolean;
    name: string;
    options: {[key: string]: string};
    type: string;
}

export interface GetBusinessMetadataBindingCredentials {
    /**
     * The Cluster API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Cluster API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface GetBusinessMetadataBindingSchemaRegistryCluster {
    /**
     * The Schema Registry cluster ID (e.g., `lsrc-abc123`).
     */
    id: string;
}

export interface GetBusinessMetadataCredentials {
    /**
     * The Cluster API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Cluster API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface GetBusinessMetadataSchemaRegistryCluster {
    /**
     * The Schema Registry cluster ID (e.g., `lsrc-abc123`).
     */
    id: string;
}

export interface GetByokKeyAw {
    keyArn: string;
    roles: string[];
}

export interface GetByokKeyAzure {
    applicationId: string;
    keyIdentifier: string;
    keyVaultId: string;
    tenantId: string;
}

export interface GetByokKeyGcp {
    keyId: string;
    securityGroup: string;
}

export interface GetDnsRecordEnvironment {
    id: string;
}

export interface GetDnsRecordGateway {
    id: string;
}

export interface GetDnsRecordPrivateLinkAccessPoint {
    id: string;
}

export interface GetEnvironmentStreamGovernance {
    /**
     * Stream Governance Package. 'ESSENTIALS' or 'ADVANCED'
     */
    package: string;
}

export interface GetFlinkComputePoolEnvironment {
    id: string;
}

export interface GetGatewayAwsEgressPrivateLinkGateway {
    principalArn: string;
    region: string;
}

export interface GetGatewayAwsPeeringGateway {
    region: string;
}

export interface GetGatewayAzureEgressPrivateLinkGateway {
    region: string;
    subscription: string;
}

export interface GetGatewayAzurePeeringGateway {
    region: string;
}

export interface GetGatewayEnvironment {
    id: string;
}

export interface GetIdentityPoolIdentityProvider {
    id: string;
}

export interface GetInvitationCreator {
    id: string;
}

export interface GetInvitationUser {
    id: string;
}

export interface GetIpAddressesFilter {
    /**
     * Filter the results by exact match for address_type. Pass multiple times to see results matching any of the values.
     */
    addressTypes?: string[];
    /**
     * Filter the results by exact match for cloud. Pass multiple times to see results matching any of the values.
     */
    clouds?: string[];
    /**
     * Filter the results by exact match for region. Pass multiple times to see results matching any of the values.
     */
    regions?: string[];
    /**
     * Filter the results by exact match for services. Pass multiple times to see results matching any of the values.
     */
    services?: string[];
}

export interface GetIpAddressesIpAddress {
    addressType: string;
    apiVersion: string;
    cloud: string;
    ipPrefix: string;
    kind: string;
    region: string;
    services: string[];
}

export interface GetKafkaClientQuotaEnvironment {
    id: string;
}

export interface GetKafkaClientQuotaKafkaCluster {
    id: string;
}

export interface GetKafkaClientQuotaThroughput {
    egressByteRate: string;
    ingressByteRate: string;
}

export interface GetKafkaClusterBasic {
}

export interface GetKafkaClusterByokKey {
    id: string;
}

export interface GetKafkaClusterDedicated {
    /**
     * The number of Confluent Kafka Units (CKUs) for Dedicated cluster types. MULTI_ZONE dedicated clusters must have at least two CKUs.
     */
    cku: number;
    /**
     * The ID of the encryption key that is used to encrypt the data in the Kafka cluster.
     */
    encryptionKey: string;
    /**
     * The list of zones the cluster is in.
     */
    zones: string[];
}

export interface GetKafkaClusterEnterprise {
}

export interface GetKafkaClusterEnvironment {
    id: string;
}

export interface GetKafkaClusterFreight {
    /**
     * The list of zones the cluster is in.
     */
    zones: string[];
}

export interface GetKafkaClusterNetwork {
    id: string;
}

export interface GetKafkaClusterStandard {
}

export interface GetKafkaTopicCredentials {
    /**
     * The Cluster API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Cluster API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface GetKafkaTopicKafkaCluster {
    id: string;
}

export interface GetKsqlClusterCredentialIdentity {
    id: string;
}

export interface GetKsqlClusterEnvironment {
    id: string;
}

export interface GetKsqlClusterKafkaCluster {
    id: string;
}

export interface GetNetworkAw {
    /**
     * The AWS account ID associated with the Confluent Cloud VPC.
     */
    account: string;
    /**
     * The endpoint service of the Confluent Cloud VPC (used for PrivateLink) if available.
     */
    privateLinkEndpointService: string;
    /**
     * The Confluent Cloud VPC ID.
     */
    vpc: string;
}

export interface GetNetworkAzure {
    privateLinkServiceAliases: {[key: string]: string};
}

export interface GetNetworkDnsConfig {
    /**
     * Network DNS resolution.
     */
    resolution: string;
}

export interface GetNetworkEnvironment {
    id: string;
}

export interface GetNetworkGateway {
    id: string;
}

export interface GetNetworkGcp {
    /**
     * The mapping of zones to Private Service Connect service attachments if available. Keys are zones and values are [GCP Private Service Connect service attachment](https://cloud.google.com/vpc/docs/configure-private-service-connect-producer#api_7).
     */
    privateServiceConnectServiceAttachments: {[key: string]: string};
    /**
     * The GCP project.
     */
    project: string;
    /**
     * The GCP VPC network name.
     */
    vpcNetwork: string;
}

export interface GetNetworkLinkEndpointEnvironment {
    id: string;
}

export interface GetNetworkLinkEndpointNetwork {
    id: string;
}

export interface GetNetworkLinkEndpointNetworkLinkService {
    id: string;
}

export interface GetNetworkLinkServiceAccept {
    environments: string[];
    networks: string[];
}

export interface GetNetworkLinkServiceEnvironment {
    id: string;
}

export interface GetNetworkLinkServiceNetwork {
    id: string;
}

export interface GetNetworkZoneInfo {
    cidr: string;
    zoneId: string;
}

export interface GetPeeringAw {
    account: string;
    customerRegion: string;
    routes: string[];
    vpc: string;
}

export interface GetPeeringAzure {
    customerRegion: string;
    tenant: string;
    vnet: string;
}

export interface GetPeeringEnvironment {
    id: string;
}

export interface GetPeeringGcp {
    importCustomRoutes: boolean;
    project: string;
    vpcNetwork: string;
}

export interface GetPeeringNetwork {
    id: string;
}

export interface GetPrivateLinkAccessAw {
    account: string;
}

export interface GetPrivateLinkAccessAzure {
    subscription: string;
}

export interface GetPrivateLinkAccessEnvironment {
    id: string;
}

export interface GetPrivateLinkAccessGcp {
    project: string;
}

export interface GetPrivateLinkAccessNetwork {
    id: string;
}

export interface GetPrivateLinkAttachmentAw {
    vpcEndpointServiceName: string;
}

export interface GetPrivateLinkAttachmentAzure {
    privateLinkServiceAlias: string;
    privateLinkServiceResourceId: string;
}

export interface GetPrivateLinkAttachmentConnectionAw {
    vpcEndpointId: string;
}

export interface GetPrivateLinkAttachmentConnectionAzure {
    privateEndpointResourceId: string;
}

export interface GetPrivateLinkAttachmentConnectionEnvironment {
    id: string;
}

export interface GetPrivateLinkAttachmentConnectionGcp {
    privateServiceConnectConnectionId: string;
}

export interface GetPrivateLinkAttachmentConnectionPrivateLinkAttachment {
    id: string;
}

export interface GetPrivateLinkAttachmentEnvironment {
    id: string;
}

export interface GetPrivateLinkAttachmentGcp {
    privateServiceConnectServiceAttachment: string;
    zone: string;
}

export interface GetSchemaCredentials {
    /**
     * The Cluster API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Cluster API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface GetSchemaMetadata {
    properties: {[key: string]: string};
    sensitives: string[];
    tags?: outputs.GetSchemaMetadataTag[];
}

export interface GetSchemaMetadataTag {
    key: string;
    values: string[];
}

export interface GetSchemaRegistryClusterConfigCredentials {
    /**
     * The Cluster API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Cluster API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface GetSchemaRegistryClusterConfigSchemaRegistryCluster {
    /**
     * The Schema Registry cluster ID (e.g., `lsrc-abc123`).
     */
    id: string;
}

export interface GetSchemaRegistryClusterEnvironment {
    id: string;
}

export interface GetSchemaRegistryClusterModeCredentials {
    /**
     * The Cluster API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Cluster API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface GetSchemaRegistryClusterModeSchemaRegistryCluster {
    /**
     * The Schema Registry cluster ID (e.g., `lsrc-abc123`).
     */
    id: string;
}

export interface GetSchemaRegistryClustersCluster {
    apiVersion: string;
    cloud: string;
    displayName: string;
    environments: outputs.GetSchemaRegistryClustersClusterEnvironment[];
    id: string;
    kind: string;
    package: string;
    region: string;
    resourceName: string;
    restEndpoint: string;
}

export interface GetSchemaRegistryClustersClusterEnvironment {
    id: string;
}

export interface GetSchemaRegistryClustersEnvironment {
    id: string;
}

export interface GetSchemaRegistryDekCredentials {
    /**
     * The Cluster API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Cluster API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface GetSchemaRegistryDekSchemaRegistryCluster {
    /**
     * The Schema Registry cluster ID (e.g., `lsrc-abc123`).
     */
    id: string;
}

export interface GetSchemaRegistryKekCredentials {
    /**
     * The Cluster API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Cluster API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface GetSchemaRegistryKekSchemaRegistryCluster {
    /**
     * The Schema Registry cluster ID (e.g., `lsrc-abc123`).
     */
    id: string;
}

export interface GetSchemaRuleset {
    domainRules?: outputs.GetSchemaRulesetDomainRule[];
    migrationRules?: outputs.GetSchemaRulesetMigrationRule[];
}

export interface GetSchemaRulesetDomainRule {
    doc: string;
    expr: string;
    kind: string;
    mode: string;
    name: string;
    onFailure: string;
    onSuccess: string;
    params: {[key: string]: string};
    tags: string[];
    type: string;
}

export interface GetSchemaRulesetMigrationRule {
    doc: string;
    expr: string;
    kind: string;
    mode: string;
    name: string;
    onFailure: string;
    onSuccess: string;
    params: {[key: string]: string};
    tags: string[];
    type: string;
}

export interface GetSchemaSchemaReference {
    name: string;
    subjectName: string;
    version: number;
}

export interface GetSchemaSchemaRegistryCluster {
    /**
     * The Schema Registry cluster ID (e.g., `lsrc-abc123`).
     */
    id: string;
}

export interface GetSchemasCredentials {
    /**
     * The Cluster API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Cluster API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface GetSchemasFilter {
    /**
     * Whether to return latest schema versions only for each matching subject. Defaults to `false`.
     */
    deleted?: boolean;
    /**
     * Whether to return soft deleted schemas. Defaults to `false`.
     */
    latestOnly?: boolean;
    /**
     * The prefix of the Schema Registry Subject.
     */
    subjectPrefix?: string;
}

export interface GetSchemasSchema {
    format: string;
    schema: string;
    schemaIdentifier: number;
    schemaReferences: outputs.GetSchemasSchemaSchemaReference[];
    subjectName: string;
    version: number;
}

export interface GetSchemasSchemaRegistryCluster {
    /**
     * The Schema Registry cluster ID (e.g., `lsrc-abc123`).
     */
    id: string;
}

export interface GetSchemasSchemaSchemaReference {
    name: string;
    subjectName: string;
    version: number;
}

export interface GetSubjectConfigCredentials {
    /**
     * The Cluster API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Cluster API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface GetSubjectConfigSchemaRegistryCluster {
    /**
     * The Schema Registry cluster ID (e.g., `lsrc-abc123`).
     */
    id: string;
}

export interface GetSubjectModeCredentials {
    /**
     * The Cluster API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Cluster API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface GetSubjectModeSchemaRegistryCluster {
    /**
     * The Schema Registry cluster ID (e.g., `lsrc-abc123`).
     */
    id: string;
}

export interface GetTagBindingCredentials {
    /**
     * The Cluster API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Cluster API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface GetTagBindingSchemaRegistryCluster {
    /**
     * The Schema Registry cluster ID (e.g., `lsrc-abc123`).
     */
    id: string;
}

export interface GetTagCredentials {
    /**
     * The Cluster API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Cluster API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface GetTagSchemaRegistryCluster {
    /**
     * The Schema Registry cluster ID (e.g., `lsrc-abc123`).
     */
    id: string;
}

export interface GetTransitGatewayAttachmentAw {
    ramResourceShareArn: string;
    routes: string[];
    transitGatewayAttachmentId: string;
    transitGatewayId: string;
}

export interface GetTransitGatewayAttachmentEnvironment {
    id: string;
}

export interface GetTransitGatewayAttachmentNetwork {
    id: string;
}

export interface IdentityPoolIdentityProvider {
    /**
     * The unique identifier for the Identity Provider.
     */
    id: string;
}

export interface InvitationCreator {
    id: string;
}

export interface InvitationUser {
    id: string;
}

export interface KafkaAclCredentials {
    /**
     * The Cluster API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Cluster API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface KafkaAclKafkaCluster {
    /**
     * The Kafka cluster ID (e.g., `lkc-12345`).
     */
    id: string;
}

export interface KafkaClientQuotaEnvironment {
    /**
     * The unique identifier for the environment.
     */
    id: string;
}

export interface KafkaClientQuotaKafkaCluster {
    /**
     * The Kafka cluster ID (e.g., `lkc-12345`).
     */
    id: string;
}

export interface KafkaClientQuotaThroughput {
    /**
     * The egress throughput limit in bytes per second.
     */
    egressByteRate: string;
    /**
     * The ingress throughput limit in bytes per second.
     */
    ingressByteRate: string;
}

export interface KafkaClusterBasic {
}

export interface KafkaClusterByokKey {
    /**
     * The ID of the Confluent key that is used to encrypt the data in the Kafka cluster.
     */
    id: string;
}

export interface KafkaClusterConfigCredentials {
    /**
     * The Cluster API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Cluster API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface KafkaClusterConfigKafkaCluster {
    /**
     * The Kafka cluster ID (e.g., `lkc-12345`).
     */
    id: string;
}

export interface KafkaClusterDedicated {
    /**
     * The number of Confluent Kafka Units (CKUs) for Dedicated cluster types. MULTI_ZONE dedicated clusters must have at least two CKUs.
     */
    cku: number;
    /**
     * The ID of the encryption key that is used to encrypt the data in the Kafka cluster.
     */
    encryptionKey: string;
    /**
     * The list of zones the cluster is in.
     */
    zones: string[];
}

export interface KafkaClusterEnterprise {
}

export interface KafkaClusterEnvironment {
    /**
     * The unique identifier for the environment.
     */
    id: string;
}

export interface KafkaClusterFreight {
    /**
     * The list of zones the cluster is in.
     */
    zones: string[];
}

export interface KafkaClusterNetwork {
    /**
     * The unique identifier for the network.
     */
    id: string;
}

export interface KafkaClusterStandard {
}

export interface KafkaClusterTimeouts {
    create?: string;
    update?: string;
}

export interface KafkaMirrorTopicClusterLink {
    /**
     * The name of the Cluster Link.
     */
    linkName: string;
}

export interface KafkaMirrorTopicKafkaCluster {
    /**
     * The Kafka API Credentials.
     */
    credentials?: outputs.KafkaMirrorTopicKafkaClusterCredentials;
    /**
     * The unique identifier for the referred Kafka cluster.
     */
    id: string;
    /**
     * The REST endpoint of the Kafka cluster (e.g., `https://pkc-00000.us-central1.gcp.confluent.cloud:443`).
     */
    restEndpoint?: string;
}

export interface KafkaMirrorTopicKafkaClusterCredentials {
    /**
     * The Kafka API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Kafka API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface KafkaMirrorTopicSourceKafkaTopic {
    /**
     * The name of the Source Kafka topic.
     */
    topicName: string;
}

export interface KafkaTopicCredentials {
    /**
     * The Cluster API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Cluster API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface KafkaTopicKafkaCluster {
    /**
     * The Kafka cluster ID (e.g., `lkc-12345`).
     */
    id: string;
}

export interface KsqlClusterCredentialIdentity {
    /**
     * The credential_identity to which this belongs. The credential_identity can be one of iam.v2.User, iam.v2.ServiceAccount.
     */
    id: string;
}

export interface KsqlClusterEnvironment {
    /**
     * The unique identifier for the environment.
     */
    id: string;
}

export interface KsqlClusterKafkaCluster {
    /**
     * The Kafka cluster ID (e.g., `lkc-12345`).
     */
    id: string;
}

export interface KsqlClusterTimeouts {
    create?: string;
}

export interface NetworkAw {
    /**
     * The AWS account ID associated with the Confluent Cloud VPC.
     */
    account: string;
    /**
     * The endpoint service of the Confluent Cloud VPC (used for PrivateLink) if available.
     */
    privateLinkEndpointService: string;
    /**
     * The Confluent Cloud VPC ID.
     */
    vpc: string;
}

export interface NetworkAzure {
    privateLinkServiceAliases: {[key: string]: string};
}

export interface NetworkDnsConfig {
    /**
     * Network DNS resolution.
     */
    resolution: string;
}

export interface NetworkEnvironment {
    /**
     * The unique identifier for the environment.
     */
    id: string;
}

export interface NetworkGateway {
    id: string;
}

export interface NetworkGcp {
    /**
     * The mapping of zones to Private Service Connect service attachments if available. Keys are zones and values are [GCP Private Service Connect service attachment](https://cloud.google.com/vpc/docs/configure-private-service-connect-producer#api_7).
     */
    privateServiceConnectServiceAttachments: {[key: string]: string};
    /**
     * The GCP project.
     */
    project: string;
    /**
     * The GCP VPC network name.
     */
    vpcNetwork: string;
}

export interface NetworkLinkEndpointEnvironment {
    /**
     * The unique identifier for the environment.
     */
    id: string;
}

export interface NetworkLinkEndpointNetwork {
    /**
     * The unique identifier for the network.
     */
    id: string;
}

export interface NetworkLinkEndpointNetworkLinkService {
    /**
     * The unique identifier for the Network Link Endpoint.
     */
    id: string;
}

export interface NetworkLinkServiceAccept {
    environments: string[];
    networks: string[];
}

export interface NetworkLinkServiceEnvironment {
    /**
     * The unique identifier for the environment.
     */
    id: string;
}

export interface NetworkLinkServiceNetwork {
    /**
     * The unique identifier for the network.
     */
    id: string;
}

export interface NetworkTimeouts {
    create?: string;
    delete?: string;
}

export interface NetworkZoneInfo {
    cidr: string;
    zoneId: string;
}

export interface PeeringAws {
    /**
     * AWS account for VPC to peer with the network.
     */
    account: string;
    /**
     * Region of customer VPC.
     */
    customerRegion: string;
    /**
     * List of routes for the peering.
     */
    routes: string[];
    /**
     * The id of the AWS VPC to peer with.
     */
    vpc: string;
}

export interface PeeringAzure {
    /**
     * Region of customer VNet.
     */
    customerRegion: string;
    /**
     * Customer Azure tenant.
     */
    tenant: string;
    /**
     * Customer VNet to peer with.
     */
    vnet: string;
}

export interface PeeringEnvironment {
    /**
     * The unique identifier for the environment.
     */
    id: string;
}

export interface PeeringGcp {
    /**
     * Enable customer route import. Defaults to `false`.
     */
    importCustomRoutes?: boolean;
    /**
     * The name of the GCP project.
     */
    project: string;
    /**
     * The name of the GCP VPC network to peer with.
     */
    vpcNetwork: string;
}

export interface PeeringNetwork {
    /**
     * The unique identifier for the network.
     */
    id: string;
}

export interface PeeringTimeouts {
    create?: string;
    delete?: string;
}

export interface PrivateLinkAccessAws {
    /**
     * AWS Account ID to allow for PrivateLink access. Find here (https://console.aws.amazon.com/billing/home?#/account) under My Account in your AWS Management Console.
     */
    account: string;
}

export interface PrivateLinkAccessAzure {
    /**
     * Azure subscription to allow for PrivateLink access.
     */
    subscription: string;
}

export interface PrivateLinkAccessEnvironment {
    /**
     * The unique identifier for the environment.
     */
    id: string;
}

export interface PrivateLinkAccessGcp {
    /**
     * The GCP project ID to allow for Private Service Connect access.
     */
    project: string;
}

export interface PrivateLinkAccessNetwork {
    /**
     * The unique identifier for the network.
     */
    id: string;
}

export interface PrivateLinkAccessTimeouts {
    create?: string;
    delete?: string;
}

export interface PrivateLinkAttachmentAw {
    vpcEndpointServiceName: string;
}

export interface PrivateLinkAttachmentAzure {
    privateLinkServiceAlias: string;
    privateLinkServiceResourceId: string;
}

export interface PrivateLinkAttachmentConnectionAws {
    /**
     * Id of a VPC Endpoint that is connected to the VPC Endpoint service.
     */
    vpcEndpointId: string;
}

export interface PrivateLinkAttachmentConnectionAzure {
    /**
     * Resource Id of the PrivateEndpoint that is connected to the PrivateLink service.
     */
    privateEndpointResourceId: string;
}

export interface PrivateLinkAttachmentConnectionEnvironment {
    /**
     * The unique identifier for the environment.
     */
    id: string;
}

export interface PrivateLinkAttachmentConnectionGcp {
    /**
     * Id of the Private Service connection.
     */
    privateServiceConnectConnectionId: string;
}

export interface PrivateLinkAttachmentConnectionPrivateLinkAttachment {
    /**
     * The unique identifier for the private link attachment.
     */
    id: string;
}

export interface PrivateLinkAttachmentEnvironment {
    /**
     * The unique identifier for the environment.
     */
    id: string;
}

export interface PrivateLinkAttachmentGcp {
    privateServiceConnectServiceAttachment: string;
    zone: string;
}

export interface SchemaCredentials {
    /**
     * The Cluster API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Cluster API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface SchemaExporterCredentials {
    /**
     * The Cluster API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Cluster API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface SchemaExporterDestinationSchemaRegistryCluster {
    credentials: outputs.SchemaExporterDestinationSchemaRegistryClusterCredentials;
    restEndpoint: string;
}

export interface SchemaExporterDestinationSchemaRegistryClusterCredentials {
    key: string;
    secret: string;
}

export interface SchemaExporterSchemaRegistryCluster {
    /**
     * The Schema Registry cluster ID (e.g., `lsrc-abc123`).
     */
    id: string;
}

export interface SchemaMetadata {
    properties: {[key: string]: string};
    sensitives: string[];
    tags?: outputs.SchemaMetadataTag[];
}

export interface SchemaMetadataTag {
    key: string;
    values: string[];
}

export interface SchemaRegistryClusterConfigCredentials {
    /**
     * The Cluster API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Cluster API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface SchemaRegistryClusterConfigSchemaRegistryCluster {
    /**
     * The Schema Registry cluster ID (e.g., `lsrc-abc123`).
     */
    id: string;
}

export interface SchemaRegistryClusterModeCredentials {
    /**
     * The Cluster API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Cluster API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface SchemaRegistryClusterModeSchemaRegistryCluster {
    /**
     * The Schema Registry cluster ID (e.g., `lsrc-abc123`).
     */
    id: string;
}

export interface SchemaRegistryDekCredentials {
    /**
     * The Cluster API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Cluster API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface SchemaRegistryDekSchemaRegistryCluster {
    /**
     * The Schema Registry cluster ID (e.g., `lsrc-abc123`).
     */
    id: string;
}

export interface SchemaRegistryKekCredentials {
    /**
     * The Cluster API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Cluster API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface SchemaRegistryKekSchemaRegistryCluster {
    /**
     * The Schema Registry cluster ID (e.g., `lsrc-abc123`).
     */
    id: string;
}

export interface SchemaRuleset {
    domainRules?: outputs.SchemaRulesetDomainRule[];
    migrationRules?: outputs.SchemaRulesetMigrationRule[];
}

export interface SchemaRulesetDomainRule {
    doc: string;
    expr: string;
    kind: string;
    mode: string;
    name: string;
    onFailure: string;
    onSuccess: string;
    params: {[key: string]: string};
    tags: string[];
    type: string;
}

export interface SchemaRulesetMigrationRule {
    doc: string;
    expr: string;
    kind: string;
    mode: string;
    name: string;
    onFailure: string;
    onSuccess: string;
    params: {[key: string]: string};
    tags: string[];
    type: string;
}

export interface SchemaSchemaReference {
    /**
     * The name of the Schema references (for example, "io.confluent.kafka.example.User"). For Avro, the reference name is the fully qualified schema name, for JSON Schema it is a URL, and for Protobuf, it is the name of another Protobuf file.
     */
    name: string;
    /**
     * The name of the referenced Schema Registry Subject (for example, "User").
     */
    subjectName: string;
    /**
     * The version of the referenced Schema.
     */
    version: number;
}

export interface SchemaSchemaRegistryCluster {
    /**
     * The Schema Registry cluster ID (e.g., `lsrc-abc123`).
     */
    id: string;
}

export interface SubjectConfigCredentials {
    /**
     * The Cluster API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Cluster API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface SubjectConfigSchemaRegistryCluster {
    /**
     * The Schema Registry cluster ID (e.g., `lsrc-abc123`).
     */
    id: string;
}

export interface SubjectModeCredentials {
    /**
     * The Cluster API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Cluster API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface SubjectModeSchemaRegistryCluster {
    /**
     * The Schema Registry cluster ID (e.g., `lsrc-abc123`).
     */
    id: string;
}

export interface TagBindingCredentials {
    /**
     * The Cluster API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Cluster API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface TagBindingSchemaRegistryCluster {
    /**
     * The Schema Registry cluster ID (e.g., `lsrc-abc123`).
     */
    id: string;
}

export interface TagCredentials {
    /**
     * The Cluster API Key for your Confluent Cloud cluster.
     */
    key: string;
    /**
     * The Cluster API Secret for your Confluent Cloud cluster.
     */
    secret: string;
}

export interface TagSchemaRegistryCluster {
    /**
     * The Schema Registry cluster ID (e.g., `lsrc-abc123`).
     */
    id: string;
}

export interface TransitGatewayAttachmentAws {
    /**
     * The Amazon Resource Name (ARN) of the Resource Access Manager (RAM) Resource Share of the transit gateway your Confluent Cloud network attaches to.
     */
    ramResourceShareArn: string;
    /**
     * List of destination routes for traffic from Confluent VPC to customer VPC via Transit Gateway.
     */
    routes: string[];
    /**
     * The ID of the AWS Transit Gateway VPC Attachment that attaches Confluent VPC to Transit Gateway.
     */
    transitGatewayAttachmentId: string;
    /**
     * The ID of the AWS Transit Gateway that your Confluent Cloud network attaches to.
     */
    transitGatewayId: string;
}

export interface TransitGatewayAttachmentEnvironment {
    /**
     * The unique identifier for the environment.
     */
    id: string;
}

export interface TransitGatewayAttachmentNetwork {
    /**
     * The unique identifier for the network.
     */
    id: string;
}

export interface TransitGatewayAttachmentTimeouts {
    create?: string;
    delete?: string;
}

