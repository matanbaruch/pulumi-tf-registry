// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getKsqlCluster(args: GetKsqlClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetKsqlClusterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("confluent:index/getKsqlCluster:getKsqlCluster", {
        "displayName": args.displayName,
        "environment": args.environment,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getKsqlCluster.
 */
export interface GetKsqlClusterArgs {
    displayName?: string;
    environment: inputs.GetKsqlClusterEnvironment;
    id?: string;
}

/**
 * A collection of values returned by getKsqlCluster.
 */
export interface GetKsqlClusterResult {
    readonly apiVersion: string;
    readonly credentialIdentities: outputs.GetKsqlClusterCredentialIdentity[];
    readonly csu: number;
    readonly displayName: string;
    readonly environment: outputs.GetKsqlClusterEnvironment;
    readonly id: string;
    readonly kafkaClusters: outputs.GetKsqlClusterKafkaCluster[];
    readonly kind: string;
    readonly resourceName: string;
    readonly restEndpoint: string;
    readonly storage: number;
    readonly topicPrefix: string;
    readonly useDetailedProcessingLog: boolean;
}
export function getKsqlClusterOutput(args: GetKsqlClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetKsqlClusterResult> {
    return pulumi.output(args).apply((a: any) => getKsqlCluster(a, opts))
}

/**
 * A collection of arguments for invoking getKsqlCluster.
 */
export interface GetKsqlClusterOutputArgs {
    displayName?: pulumi.Input<string>;
    environment: pulumi.Input<inputs.GetKsqlClusterEnvironmentArgs>;
    id?: pulumi.Input<string>;
}
