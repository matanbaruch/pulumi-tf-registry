// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FlinkComputePool extends pulumi.CustomResource {
    /**
     * Get an existing FlinkComputePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FlinkComputePoolState, opts?: pulumi.CustomResourceOptions): FlinkComputePool {
        return new FlinkComputePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'confluent:index/flinkComputePool:FlinkComputePool';

    /**
     * Returns true if the given object is an instance of FlinkComputePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FlinkComputePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FlinkComputePool.__pulumiType;
    }

    public /*out*/ readonly apiVersion!: pulumi.Output<string>;
    /**
     * The cloud service provider that runs the compute pool.
     */
    public readonly cloud!: pulumi.Output<string>;
    /**
     * The name of the Flink compute pool.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     */
    public readonly environment!: pulumi.Output<outputs.FlinkComputePoolEnvironment>;
    public /*out*/ readonly kind!: pulumi.Output<string>;
    /**
     * Maximum number of Confluent Flink Units (CFUs) that the Flink compute pool should auto-scale to.
     */
    public readonly maxCfu!: pulumi.Output<number>;
    /**
     * The cloud service provider region that hosts the Flink compute pool.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The Confluent Resource Name of the Flink compute pool.
     */
    public /*out*/ readonly resourceName!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.FlinkComputePoolTimeouts | undefined>;

    /**
     * Create a FlinkComputePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FlinkComputePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FlinkComputePoolArgs | FlinkComputePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FlinkComputePoolState | undefined;
            resourceInputs["apiVersion"] = state ? state.apiVersion : undefined;
            resourceInputs["cloud"] = state ? state.cloud : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["maxCfu"] = state ? state.maxCfu : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["resourceName"] = state ? state.resourceName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as FlinkComputePoolArgs | undefined;
            if ((!args || args.cloud === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloud'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.environment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["cloud"] = args ? args.cloud : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["maxCfu"] = args ? args.maxCfu : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["apiVersion"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["resourceName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FlinkComputePool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FlinkComputePool resources.
 */
export interface FlinkComputePoolState {
    apiVersion?: pulumi.Input<string>;
    /**
     * The cloud service provider that runs the compute pool.
     */
    cloud?: pulumi.Input<string>;
    /**
     * The name of the Flink compute pool.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     */
    environment?: pulumi.Input<inputs.FlinkComputePoolEnvironment>;
    kind?: pulumi.Input<string>;
    /**
     * Maximum number of Confluent Flink Units (CFUs) that the Flink compute pool should auto-scale to.
     */
    maxCfu?: pulumi.Input<number>;
    /**
     * The cloud service provider region that hosts the Flink compute pool.
     */
    region?: pulumi.Input<string>;
    /**
     * The Confluent Resource Name of the Flink compute pool.
     */
    resourceName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FlinkComputePoolTimeouts>;
}

/**
 * The set of arguments for constructing a FlinkComputePool resource.
 */
export interface FlinkComputePoolArgs {
    /**
     * The cloud service provider that runs the compute pool.
     */
    cloud: pulumi.Input<string>;
    /**
     * The name of the Flink compute pool.
     */
    displayName: pulumi.Input<string>;
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     */
    environment: pulumi.Input<inputs.FlinkComputePoolEnvironment>;
    /**
     * Maximum number of Confluent Flink Units (CFUs) that the Flink compute pool should auto-scale to.
     */
    maxCfu?: pulumi.Input<number>;
    /**
     * The cloud service provider region that hosts the Flink compute pool.
     */
    region: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.FlinkComputePoolTimeouts>;
}
