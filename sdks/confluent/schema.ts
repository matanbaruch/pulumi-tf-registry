// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Schema extends pulumi.CustomResource {
    /**
     * Get an existing Schema resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SchemaState, opts?: pulumi.CustomResourceOptions): Schema {
        return new Schema(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'confluent:index/schema:Schema';

    /**
     * Returns true if the given object is an instance of Schema.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Schema {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Schema.__pulumiType;
    }

    /**
     * The Cluster API Credentials.
     */
    public readonly credentials!: pulumi.Output<outputs.SchemaCredentials | undefined>;
    /**
     * The format of the Schema.
     */
    public readonly format!: pulumi.Output<string>;
    /**
     * Controls whether a schema should be soft or hard deleted. Set it to `true` if you want to hard delete a schema on
     * destroy. Defaults to `false` (soft delete). Defaults to `false`.
     */
    public readonly hardDelete!: pulumi.Output<boolean | undefined>;
    public readonly metadata!: pulumi.Output<outputs.SchemaMetadata | undefined>;
    /**
     * Controls whether a schema should be recreated on update. Defaults to `false`.
     */
    public readonly recreateOnUpdate!: pulumi.Output<boolean | undefined>;
    /**
     * The REST endpoint of the Schema Registry cluster, for example,
     * `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
     */
    public readonly restEndpoint!: pulumi.Output<string | undefined>;
    public readonly ruleset!: pulumi.Output<outputs.SchemaRuleset | undefined>;
    /**
     * The definition of the Schema.
     */
    public readonly schema!: pulumi.Output<string>;
    /**
     * Globally unique identifier of the Schema returned for a creation request. It should be used to retrieve this schema from
     * the schemas resource and is different from the schema’s version which is associated with the subject.
     */
    public /*out*/ readonly schemaIdentifier!: pulumi.Output<number>;
    /**
     * The list of references to other Schemas.
     */
    public readonly schemaReferences!: pulumi.Output<outputs.SchemaSchemaReference[] | undefined>;
    public readonly schemaRegistryCluster!: pulumi.Output<outputs.SchemaSchemaRegistryCluster | undefined>;
    public readonly skipValidationDuringPlan!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the Schema Registry Subject.
     */
    public readonly subjectName!: pulumi.Output<string>;
    /**
     * The version number of the Schema.
     */
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a Schema resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SchemaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SchemaArgs | SchemaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SchemaState | undefined;
            resourceInputs["credentials"] = state ? state.credentials : undefined;
            resourceInputs["format"] = state ? state.format : undefined;
            resourceInputs["hardDelete"] = state ? state.hardDelete : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["recreateOnUpdate"] = state ? state.recreateOnUpdate : undefined;
            resourceInputs["restEndpoint"] = state ? state.restEndpoint : undefined;
            resourceInputs["ruleset"] = state ? state.ruleset : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["schemaIdentifier"] = state ? state.schemaIdentifier : undefined;
            resourceInputs["schemaReferences"] = state ? state.schemaReferences : undefined;
            resourceInputs["schemaRegistryCluster"] = state ? state.schemaRegistryCluster : undefined;
            resourceInputs["skipValidationDuringPlan"] = state ? state.skipValidationDuringPlan : undefined;
            resourceInputs["subjectName"] = state ? state.subjectName : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as SchemaArgs | undefined;
            if ((!args || args.format === undefined) && !opts.urn) {
                throw new Error("Missing required property 'format'");
            }
            if ((!args || args.subjectName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subjectName'");
            }
            resourceInputs["credentials"] = args ? args.credentials : undefined;
            resourceInputs["format"] = args ? args.format : undefined;
            resourceInputs["hardDelete"] = args ? args.hardDelete : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["recreateOnUpdate"] = args ? args.recreateOnUpdate : undefined;
            resourceInputs["restEndpoint"] = args ? args.restEndpoint : undefined;
            resourceInputs["ruleset"] = args ? args.ruleset : undefined;
            resourceInputs["schema"] = args ? args.schema : undefined;
            resourceInputs["schemaReferences"] = args ? args.schemaReferences : undefined;
            resourceInputs["schemaRegistryCluster"] = args ? args.schemaRegistryCluster : undefined;
            resourceInputs["skipValidationDuringPlan"] = args ? args.skipValidationDuringPlan : undefined;
            resourceInputs["subjectName"] = args ? args.subjectName : undefined;
            resourceInputs["schemaIdentifier"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Schema.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Schema resources.
 */
export interface SchemaState {
    /**
     * The Cluster API Credentials.
     */
    credentials?: pulumi.Input<inputs.SchemaCredentials>;
    /**
     * The format of the Schema.
     */
    format?: pulumi.Input<string>;
    /**
     * Controls whether a schema should be soft or hard deleted. Set it to `true` if you want to hard delete a schema on
     * destroy. Defaults to `false` (soft delete). Defaults to `false`.
     */
    hardDelete?: pulumi.Input<boolean>;
    metadata?: pulumi.Input<inputs.SchemaMetadata>;
    /**
     * Controls whether a schema should be recreated on update. Defaults to `false`.
     */
    recreateOnUpdate?: pulumi.Input<boolean>;
    /**
     * The REST endpoint of the Schema Registry cluster, for example,
     * `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
     */
    restEndpoint?: pulumi.Input<string>;
    ruleset?: pulumi.Input<inputs.SchemaRuleset>;
    /**
     * The definition of the Schema.
     */
    schema?: pulumi.Input<string>;
    /**
     * Globally unique identifier of the Schema returned for a creation request. It should be used to retrieve this schema from
     * the schemas resource and is different from the schema’s version which is associated with the subject.
     */
    schemaIdentifier?: pulumi.Input<number>;
    /**
     * The list of references to other Schemas.
     */
    schemaReferences?: pulumi.Input<pulumi.Input<inputs.SchemaSchemaReference>[]>;
    schemaRegistryCluster?: pulumi.Input<inputs.SchemaSchemaRegistryCluster>;
    skipValidationDuringPlan?: pulumi.Input<boolean>;
    /**
     * The name of the Schema Registry Subject.
     */
    subjectName?: pulumi.Input<string>;
    /**
     * The version number of the Schema.
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Schema resource.
 */
export interface SchemaArgs {
    /**
     * The Cluster API Credentials.
     */
    credentials?: pulumi.Input<inputs.SchemaCredentials>;
    /**
     * The format of the Schema.
     */
    format: pulumi.Input<string>;
    /**
     * Controls whether a schema should be soft or hard deleted. Set it to `true` if you want to hard delete a schema on
     * destroy. Defaults to `false` (soft delete). Defaults to `false`.
     */
    hardDelete?: pulumi.Input<boolean>;
    metadata?: pulumi.Input<inputs.SchemaMetadata>;
    /**
     * Controls whether a schema should be recreated on update. Defaults to `false`.
     */
    recreateOnUpdate?: pulumi.Input<boolean>;
    /**
     * The REST endpoint of the Schema Registry cluster, for example,
     * `https://psrc-00000.us-central1.gcp.confluent.cloud:443`).
     */
    restEndpoint?: pulumi.Input<string>;
    ruleset?: pulumi.Input<inputs.SchemaRuleset>;
    /**
     * The definition of the Schema.
     */
    schema?: pulumi.Input<string>;
    /**
     * The list of references to other Schemas.
     */
    schemaReferences?: pulumi.Input<pulumi.Input<inputs.SchemaSchemaReference>[]>;
    schemaRegistryCluster?: pulumi.Input<inputs.SchemaSchemaRegistryCluster>;
    skipValidationDuringPlan?: pulumi.Input<boolean>;
    /**
     * The name of the Schema Registry Subject.
     */
    subjectName: pulumi.Input<string>;
}
