// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KafkaCluster extends pulumi.CustomResource {
    /**
     * Get an existing KafkaCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KafkaClusterState, opts?: pulumi.CustomResourceOptions): KafkaCluster {
        return new KafkaCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'confluent:index/kafkaCluster:KafkaCluster';

    /**
     * Returns true if the given object is an instance of KafkaCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KafkaCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KafkaCluster.__pulumiType;
    }

    /**
     * API Version defines the schema version of this representation of a Kafka cluster.
     */
    public /*out*/ readonly apiVersion!: pulumi.Output<string>;
    /**
     * The availability zone configuration of the Kafka cluster.
     */
    public readonly availability!: pulumi.Output<string>;
    public readonly basics!: pulumi.Output<outputs.KafkaClusterBasic[] | undefined>;
    /**
     * The bootstrap endpoint used by Kafka clients to connect to the Kafka cluster.
     */
    public /*out*/ readonly bootstrapEndpoint!: pulumi.Output<string>;
    public readonly byokKey!: pulumi.Output<outputs.KafkaClusterByokKey | undefined>;
    /**
     * The cloud service provider that runs the Kafka cluster.
     */
    public readonly cloud!: pulumi.Output<string>;
    public readonly dedicated!: pulumi.Output<outputs.KafkaClusterDedicated | undefined>;
    /**
     * The name of the Kafka cluster.
     */
    public readonly displayName!: pulumi.Output<string>;
    public readonly enterprises!: pulumi.Output<outputs.KafkaClusterEnterprise[] | undefined>;
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     */
    public readonly environment!: pulumi.Output<outputs.KafkaClusterEnvironment>;
    public readonly freights!: pulumi.Output<outputs.KafkaClusterFreight[] | undefined>;
    /**
     * Kind defines the object Kafka cluster represents.
     */
    public /*out*/ readonly kind!: pulumi.Output<string>;
    /**
     * Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider
     * accounts.
     */
    public readonly network!: pulumi.Output<outputs.KafkaClusterNetwork | undefined>;
    /**
     * The Confluent Resource Name of the Kafka cluster suitable for confluent_role_binding's crn_pattern.
     */
    public /*out*/ readonly rbacCrn!: pulumi.Output<string>;
    /**
     * The cloud service provider region where the Kafka cluster is running.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The REST endpoint of the Kafka cluster.
     */
    public /*out*/ readonly restEndpoint!: pulumi.Output<string>;
    public readonly standards!: pulumi.Output<outputs.KafkaClusterStandard[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.KafkaClusterTimeouts | undefined>;

    /**
     * Create a KafkaCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KafkaClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KafkaClusterArgs | KafkaClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KafkaClusterState | undefined;
            resourceInputs["apiVersion"] = state ? state.apiVersion : undefined;
            resourceInputs["availability"] = state ? state.availability : undefined;
            resourceInputs["basics"] = state ? state.basics : undefined;
            resourceInputs["bootstrapEndpoint"] = state ? state.bootstrapEndpoint : undefined;
            resourceInputs["byokKey"] = state ? state.byokKey : undefined;
            resourceInputs["cloud"] = state ? state.cloud : undefined;
            resourceInputs["dedicated"] = state ? state.dedicated : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["enterprises"] = state ? state.enterprises : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["freights"] = state ? state.freights : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["rbacCrn"] = state ? state.rbacCrn : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["restEndpoint"] = state ? state.restEndpoint : undefined;
            resourceInputs["standards"] = state ? state.standards : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as KafkaClusterArgs | undefined;
            if ((!args || args.availability === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availability'");
            }
            if ((!args || args.cloud === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloud'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.environment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["availability"] = args ? args.availability : undefined;
            resourceInputs["basics"] = args ? args.basics : undefined;
            resourceInputs["byokKey"] = args ? args.byokKey : undefined;
            resourceInputs["cloud"] = args ? args.cloud : undefined;
            resourceInputs["dedicated"] = args ? args.dedicated : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["enterprises"] = args ? args.enterprises : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["freights"] = args ? args.freights : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["standards"] = args ? args.standards : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["apiVersion"] = undefined /*out*/;
            resourceInputs["bootstrapEndpoint"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["rbacCrn"] = undefined /*out*/;
            resourceInputs["restEndpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KafkaCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KafkaCluster resources.
 */
export interface KafkaClusterState {
    /**
     * API Version defines the schema version of this representation of a Kafka cluster.
     */
    apiVersion?: pulumi.Input<string>;
    /**
     * The availability zone configuration of the Kafka cluster.
     */
    availability?: pulumi.Input<string>;
    basics?: pulumi.Input<pulumi.Input<inputs.KafkaClusterBasic>[]>;
    /**
     * The bootstrap endpoint used by Kafka clients to connect to the Kafka cluster.
     */
    bootstrapEndpoint?: pulumi.Input<string>;
    byokKey?: pulumi.Input<inputs.KafkaClusterByokKey>;
    /**
     * The cloud service provider that runs the Kafka cluster.
     */
    cloud?: pulumi.Input<string>;
    dedicated?: pulumi.Input<inputs.KafkaClusterDedicated>;
    /**
     * The name of the Kafka cluster.
     */
    displayName?: pulumi.Input<string>;
    enterprises?: pulumi.Input<pulumi.Input<inputs.KafkaClusterEnterprise>[]>;
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     */
    environment?: pulumi.Input<inputs.KafkaClusterEnvironment>;
    freights?: pulumi.Input<pulumi.Input<inputs.KafkaClusterFreight>[]>;
    /**
     * Kind defines the object Kafka cluster represents.
     */
    kind?: pulumi.Input<string>;
    /**
     * Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider
     * accounts.
     */
    network?: pulumi.Input<inputs.KafkaClusterNetwork>;
    /**
     * The Confluent Resource Name of the Kafka cluster suitable for confluent_role_binding's crn_pattern.
     */
    rbacCrn?: pulumi.Input<string>;
    /**
     * The cloud service provider region where the Kafka cluster is running.
     */
    region?: pulumi.Input<string>;
    /**
     * The REST endpoint of the Kafka cluster.
     */
    restEndpoint?: pulumi.Input<string>;
    standards?: pulumi.Input<pulumi.Input<inputs.KafkaClusterStandard>[]>;
    timeouts?: pulumi.Input<inputs.KafkaClusterTimeouts>;
}

/**
 * The set of arguments for constructing a KafkaCluster resource.
 */
export interface KafkaClusterArgs {
    /**
     * The availability zone configuration of the Kafka cluster.
     */
    availability: pulumi.Input<string>;
    basics?: pulumi.Input<pulumi.Input<inputs.KafkaClusterBasic>[]>;
    byokKey?: pulumi.Input<inputs.KafkaClusterByokKey>;
    /**
     * The cloud service provider that runs the Kafka cluster.
     */
    cloud: pulumi.Input<string>;
    dedicated?: pulumi.Input<inputs.KafkaClusterDedicated>;
    /**
     * The name of the Kafka cluster.
     */
    displayName: pulumi.Input<string>;
    enterprises?: pulumi.Input<pulumi.Input<inputs.KafkaClusterEnterprise>[]>;
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     */
    environment: pulumi.Input<inputs.KafkaClusterEnvironment>;
    freights?: pulumi.Input<pulumi.Input<inputs.KafkaClusterFreight>[]>;
    /**
     * Network represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud provider
     * accounts.
     */
    network?: pulumi.Input<inputs.KafkaClusterNetwork>;
    /**
     * The cloud service provider region where the Kafka cluster is running.
     */
    region: pulumi.Input<string>;
    standards?: pulumi.Input<pulumi.Input<inputs.KafkaClusterStandard>[]>;
    timeouts?: pulumi.Input<inputs.KafkaClusterTimeouts>;
}
