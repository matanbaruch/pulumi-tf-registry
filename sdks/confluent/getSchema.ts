// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSchema(args: GetSchemaArgs, opts?: pulumi.InvokeOptions): Promise<GetSchemaResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("confluent:index/getSchema:getSchema", {
        "credentials": args.credentials,
        "id": args.id,
        "metadata": args.metadata,
        "restEndpoint": args.restEndpoint,
        "ruleset": args.ruleset,
        "schemaIdentifier": args.schemaIdentifier,
        "schemaRegistryCluster": args.schemaRegistryCluster,
        "subjectName": args.subjectName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSchema.
 */
export interface GetSchemaArgs {
    credentials?: inputs.GetSchemaCredentials;
    id?: string;
    metadata?: inputs.GetSchemaMetadata;
    restEndpoint?: string;
    ruleset?: inputs.GetSchemaRuleset;
    schemaIdentifier: number;
    schemaRegistryCluster?: inputs.GetSchemaSchemaRegistryCluster;
    subjectName: string;
}

/**
 * A collection of values returned by getSchema.
 */
export interface GetSchemaResult {
    readonly credentials?: outputs.GetSchemaCredentials;
    readonly format: string;
    readonly hardDelete: boolean;
    readonly id: string;
    readonly metadata?: outputs.GetSchemaMetadata;
    readonly recreateOnUpdate: boolean;
    readonly restEndpoint?: string;
    readonly ruleset?: outputs.GetSchemaRuleset;
    readonly schema: string;
    readonly schemaIdentifier: number;
    readonly schemaReferences: outputs.GetSchemaSchemaReference[];
    readonly schemaRegistryCluster?: outputs.GetSchemaSchemaRegistryCluster;
    readonly skipValidationDuringPlan: boolean;
    readonly subjectName: string;
    readonly version: number;
}
export function getSchemaOutput(args: GetSchemaOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSchemaResult> {
    return pulumi.output(args).apply((a: any) => getSchema(a, opts))
}

/**
 * A collection of arguments for invoking getSchema.
 */
export interface GetSchemaOutputArgs {
    credentials?: pulumi.Input<inputs.GetSchemaCredentialsArgs>;
    id?: pulumi.Input<string>;
    metadata?: pulumi.Input<inputs.GetSchemaMetadataArgs>;
    restEndpoint?: pulumi.Input<string>;
    ruleset?: pulumi.Input<inputs.GetSchemaRulesetArgs>;
    schemaIdentifier: pulumi.Input<number>;
    schemaRegistryCluster?: pulumi.Input<inputs.GetSchemaSchemaRegistryClusterArgs>;
    subjectName: pulumi.Input<string>;
}
