// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FlinkStatement extends pulumi.CustomResource {
    /**
     * Get an existing FlinkStatement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FlinkStatementState, opts?: pulumi.CustomResourceOptions): FlinkStatement {
        return new FlinkStatement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'confluent:index/flinkStatement:FlinkStatement';

    /**
     * Returns true if the given object is an instance of FlinkStatement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FlinkStatement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FlinkStatement.__pulumiType;
    }

    public readonly computePool!: pulumi.Output<outputs.FlinkStatementComputePool | undefined>;
    /**
     * The Cluster API Credentials.
     */
    public readonly credentials!: pulumi.Output<outputs.FlinkStatementCredentials | undefined>;
    public readonly environment!: pulumi.Output<outputs.FlinkStatementEnvironment | undefined>;
    public readonly organization!: pulumi.Output<outputs.FlinkStatementOrganization | undefined>;
    public readonly principal!: pulumi.Output<outputs.FlinkStatementPrincipal | undefined>;
    public readonly properties!: pulumi.Output<{[key: string]: string}>;
    /**
     * The REST endpoint of the Flink Compute Pool cluster, for example,
     * `https://flink.us-east-1.aws.confluent.cloud/sql/v1/organizations/1111aaaa-11aa-11aa-11aa-111111aaaaaa/environments/env-abc123`).
     */
    public readonly restEndpoint!: pulumi.Output<string | undefined>;
    /**
     * The raw SQL text of the Statement.
     */
    public readonly statement!: pulumi.Output<string>;
    /**
     * The unique identifier of the Statement.
     */
    public readonly statementName!: pulumi.Output<string>;
    /**
     * Indicates whether the statement should be stopped.
     */
    public readonly stopped!: pulumi.Output<boolean>;
    public readonly timeouts!: pulumi.Output<outputs.FlinkStatementTimeouts | undefined>;

    /**
     * Create a FlinkStatement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FlinkStatementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FlinkStatementArgs | FlinkStatementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FlinkStatementState | undefined;
            resourceInputs["computePool"] = state ? state.computePool : undefined;
            resourceInputs["credentials"] = state ? state.credentials : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["principal"] = state ? state.principal : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["restEndpoint"] = state ? state.restEndpoint : undefined;
            resourceInputs["statement"] = state ? state.statement : undefined;
            resourceInputs["statementName"] = state ? state.statementName : undefined;
            resourceInputs["stopped"] = state ? state.stopped : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as FlinkStatementArgs | undefined;
            if ((!args || args.statement === undefined) && !opts.urn) {
                throw new Error("Missing required property 'statement'");
            }
            resourceInputs["computePool"] = args ? args.computePool : undefined;
            resourceInputs["credentials"] = args ? args.credentials : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["principal"] = args ? args.principal : undefined;
            resourceInputs["properties"] = args ? args.properties : undefined;
            resourceInputs["restEndpoint"] = args ? args.restEndpoint : undefined;
            resourceInputs["statement"] = args ? args.statement : undefined;
            resourceInputs["statementName"] = args ? args.statementName : undefined;
            resourceInputs["stopped"] = args ? args.stopped : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FlinkStatement.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FlinkStatement resources.
 */
export interface FlinkStatementState {
    computePool?: pulumi.Input<inputs.FlinkStatementComputePool>;
    /**
     * The Cluster API Credentials.
     */
    credentials?: pulumi.Input<inputs.FlinkStatementCredentials>;
    environment?: pulumi.Input<inputs.FlinkStatementEnvironment>;
    organization?: pulumi.Input<inputs.FlinkStatementOrganization>;
    principal?: pulumi.Input<inputs.FlinkStatementPrincipal>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The REST endpoint of the Flink Compute Pool cluster, for example,
     * `https://flink.us-east-1.aws.confluent.cloud/sql/v1/organizations/1111aaaa-11aa-11aa-11aa-111111aaaaaa/environments/env-abc123`).
     */
    restEndpoint?: pulumi.Input<string>;
    /**
     * The raw SQL text of the Statement.
     */
    statement?: pulumi.Input<string>;
    /**
     * The unique identifier of the Statement.
     */
    statementName?: pulumi.Input<string>;
    /**
     * Indicates whether the statement should be stopped.
     */
    stopped?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.FlinkStatementTimeouts>;
}

/**
 * The set of arguments for constructing a FlinkStatement resource.
 */
export interface FlinkStatementArgs {
    computePool?: pulumi.Input<inputs.FlinkStatementComputePool>;
    /**
     * The Cluster API Credentials.
     */
    credentials?: pulumi.Input<inputs.FlinkStatementCredentials>;
    environment?: pulumi.Input<inputs.FlinkStatementEnvironment>;
    organization?: pulumi.Input<inputs.FlinkStatementOrganization>;
    principal?: pulumi.Input<inputs.FlinkStatementPrincipal>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The REST endpoint of the Flink Compute Pool cluster, for example,
     * `https://flink.us-east-1.aws.confluent.cloud/sql/v1/organizations/1111aaaa-11aa-11aa-11aa-111111aaaaaa/environments/env-abc123`).
     */
    restEndpoint?: pulumi.Input<string>;
    /**
     * The raw SQL text of the Statement.
     */
    statement: pulumi.Input<string>;
    /**
     * The unique identifier of the Statement.
     */
    statementName?: pulumi.Input<string>;
    /**
     * Indicates whether the statement should be stopped.
     */
    stopped?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.FlinkStatementTimeouts>;
}
