// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSchemaRegistryCluster(args: GetSchemaRegistryClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetSchemaRegistryClusterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("confluent:index/getSchemaRegistryCluster:getSchemaRegistryCluster", {
        "displayName": args.displayName,
        "environment": args.environment,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSchemaRegistryCluster.
 */
export interface GetSchemaRegistryClusterArgs {
    displayName?: string;
    environment: inputs.GetSchemaRegistryClusterEnvironment;
    id?: string;
}

/**
 * A collection of values returned by getSchemaRegistryCluster.
 */
export interface GetSchemaRegistryClusterResult {
    readonly apiVersion: string;
    readonly cloud: string;
    readonly displayName: string;
    readonly environment: outputs.GetSchemaRegistryClusterEnvironment;
    readonly id: string;
    readonly kind: string;
    readonly package: string;
    readonly region: string;
    readonly resourceName: string;
    readonly restEndpoint: string;
}
export function getSchemaRegistryClusterOutput(args: GetSchemaRegistryClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSchemaRegistryClusterResult> {
    return pulumi.output(args).apply((a: any) => getSchemaRegistryCluster(a, opts))
}

/**
 * A collection of arguments for invoking getSchemaRegistryCluster.
 */
export interface GetSchemaRegistryClusterOutputArgs {
    displayName?: pulumi.Input<string>;
    environment: pulumi.Input<inputs.GetSchemaRegistryClusterEnvironmentArgs>;
    id?: pulumi.Input<string>;
}
