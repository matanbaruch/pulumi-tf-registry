// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CustomConnectorPlugin extends pulumi.CustomResource {
    /**
     * Get an existing CustomConnectorPlugin resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomConnectorPluginState, opts?: pulumi.CustomResourceOptions): CustomConnectorPlugin {
        return new CustomConnectorPlugin(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'confluent:index/customConnectorPlugin:CustomConnectorPlugin';

    /**
     * Returns true if the given object is an instance of CustomConnectorPlugin.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomConnectorPlugin {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomConnectorPlugin.__pulumiType;
    }

    public readonly cloud!: pulumi.Output<string>;
    /**
     * Java class or alias for connector. You can get connector class from connector documentation provided by developer.
     */
    public readonly connectorClass!: pulumi.Output<string>;
    /**
     * Custom Connector type.
     */
    public readonly connectorType!: pulumi.Output<string>;
    /**
     * A free-form description of the Custom Connector Plugin.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A human-readable name for the Custom Connector Plugin.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * A documentation link of the Custom Connector Plugin.
     */
    public readonly documentationLink!: pulumi.Output<string | undefined>;
    /**
     * The path to the file that will be created.
     */
    public readonly filename!: pulumi.Output<string>;
    /**
     * A list of sensitive properties where a sensitive property is a connector configuration property that must be hidden
     * after a user enters property value when setting up connector.
     */
    public readonly sensitiveConfigProperties!: pulumi.Output<string[] | undefined>;

    /**
     * Create a CustomConnectorPlugin resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomConnectorPluginArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomConnectorPluginArgs | CustomConnectorPluginState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomConnectorPluginState | undefined;
            resourceInputs["cloud"] = state ? state.cloud : undefined;
            resourceInputs["connectorClass"] = state ? state.connectorClass : undefined;
            resourceInputs["connectorType"] = state ? state.connectorType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["documentationLink"] = state ? state.documentationLink : undefined;
            resourceInputs["filename"] = state ? state.filename : undefined;
            resourceInputs["sensitiveConfigProperties"] = state ? state.sensitiveConfigProperties : undefined;
        } else {
            const args = argsOrState as CustomConnectorPluginArgs | undefined;
            if ((!args || args.connectorClass === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectorClass'");
            }
            if ((!args || args.connectorType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectorType'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.filename === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filename'");
            }
            resourceInputs["cloud"] = args ? args.cloud : undefined;
            resourceInputs["connectorClass"] = args ? args.connectorClass : undefined;
            resourceInputs["connectorType"] = args ? args.connectorType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["documentationLink"] = args ? args.documentationLink : undefined;
            resourceInputs["filename"] = args ? args.filename : undefined;
            resourceInputs["sensitiveConfigProperties"] = args ? args.sensitiveConfigProperties : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomConnectorPlugin.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CustomConnectorPlugin resources.
 */
export interface CustomConnectorPluginState {
    cloud?: pulumi.Input<string>;
    /**
     * Java class or alias for connector. You can get connector class from connector documentation provided by developer.
     */
    connectorClass?: pulumi.Input<string>;
    /**
     * Custom Connector type.
     */
    connectorType?: pulumi.Input<string>;
    /**
     * A free-form description of the Custom Connector Plugin.
     */
    description?: pulumi.Input<string>;
    /**
     * A human-readable name for the Custom Connector Plugin.
     */
    displayName?: pulumi.Input<string>;
    /**
     * A documentation link of the Custom Connector Plugin.
     */
    documentationLink?: pulumi.Input<string>;
    /**
     * The path to the file that will be created.
     */
    filename?: pulumi.Input<string>;
    /**
     * A list of sensitive properties where a sensitive property is a connector configuration property that must be hidden
     * after a user enters property value when setting up connector.
     */
    sensitiveConfigProperties?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a CustomConnectorPlugin resource.
 */
export interface CustomConnectorPluginArgs {
    cloud?: pulumi.Input<string>;
    /**
     * Java class or alias for connector. You can get connector class from connector documentation provided by developer.
     */
    connectorClass: pulumi.Input<string>;
    /**
     * Custom Connector type.
     */
    connectorType: pulumi.Input<string>;
    /**
     * A free-form description of the Custom Connector Plugin.
     */
    description?: pulumi.Input<string>;
    /**
     * A human-readable name for the Custom Connector Plugin.
     */
    displayName: pulumi.Input<string>;
    /**
     * A documentation link of the Custom Connector Plugin.
     */
    documentationLink?: pulumi.Input<string>;
    /**
     * The path to the file that will be created.
     */
    filename: pulumi.Input<string>;
    /**
     * A list of sensitive properties where a sensitive property is a connector configuration property that must be hidden
     * after a user enters property value when setting up connector.
     */
    sensitiveConfigProperties?: pulumi.Input<pulumi.Input<string>[]>;
}
