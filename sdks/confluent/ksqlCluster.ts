// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KsqlCluster extends pulumi.CustomResource {
    /**
     * Get an existing KsqlCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KsqlClusterState, opts?: pulumi.CustomResourceOptions): KsqlCluster {
        return new KsqlCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'confluent:index/ksqlCluster:KsqlCluster';

    /**
     * Returns true if the given object is an instance of KsqlCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KsqlCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KsqlCluster.__pulumiType;
    }

    public /*out*/ readonly apiVersion!: pulumi.Output<string>;
    public readonly credentialIdentity!: pulumi.Output<outputs.KsqlClusterCredentialIdentity>;
    /**
     * The number of Confluent Streaming Units (CSUs) for the ksqlDB cluster.
     */
    public readonly csu!: pulumi.Output<number>;
    /**
     * The name of the ksqlDB cluster.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     */
    public readonly environment!: pulumi.Output<outputs.KsqlClusterEnvironment>;
    public readonly kafkaCluster!: pulumi.Output<outputs.KsqlClusterKafkaCluster>;
    public /*out*/ readonly kind!: pulumi.Output<string>;
    /**
     * The Confluent Resource Name of the ksqlDB cluster.
     */
    public /*out*/ readonly resourceName!: pulumi.Output<string>;
    /**
     * The API endpoint of the ksqlDB cluster.
     */
    public /*out*/ readonly restEndpoint!: pulumi.Output<string>;
    /**
     * The amount of storage (in GB) provisioned to the ksqlDB cluster.
     */
    public /*out*/ readonly storage!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.KsqlClusterTimeouts | undefined>;
    /**
     * Topic name prefix used by this ksqlDB cluster. Used to assign ACLs for this ksqlDB cluster to use.
     */
    public /*out*/ readonly topicPrefix!: pulumi.Output<string>;
    /**
     * Controls whether the row data should be included in the processing log topic. Set it to `false` if you don't want to
     * emit sensitive information to the processing log. Defaults to `true`. Defaults to `true`.
     */
    public readonly useDetailedProcessingLog!: pulumi.Output<boolean | undefined>;

    /**
     * Create a KsqlCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KsqlClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KsqlClusterArgs | KsqlClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KsqlClusterState | undefined;
            resourceInputs["apiVersion"] = state ? state.apiVersion : undefined;
            resourceInputs["credentialIdentity"] = state ? state.credentialIdentity : undefined;
            resourceInputs["csu"] = state ? state.csu : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["kafkaCluster"] = state ? state.kafkaCluster : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["resourceName"] = state ? state.resourceName : undefined;
            resourceInputs["restEndpoint"] = state ? state.restEndpoint : undefined;
            resourceInputs["storage"] = state ? state.storage : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["topicPrefix"] = state ? state.topicPrefix : undefined;
            resourceInputs["useDetailedProcessingLog"] = state ? state.useDetailedProcessingLog : undefined;
        } else {
            const args = argsOrState as KsqlClusterArgs | undefined;
            if ((!args || args.credentialIdentity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'credentialIdentity'");
            }
            if ((!args || args.csu === undefined) && !opts.urn) {
                throw new Error("Missing required property 'csu'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.environment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if ((!args || args.kafkaCluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaCluster'");
            }
            resourceInputs["credentialIdentity"] = args ? args.credentialIdentity : undefined;
            resourceInputs["csu"] = args ? args.csu : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["kafkaCluster"] = args ? args.kafkaCluster : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["useDetailedProcessingLog"] = args ? args.useDetailedProcessingLog : undefined;
            resourceInputs["apiVersion"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["resourceName"] = undefined /*out*/;
            resourceInputs["restEndpoint"] = undefined /*out*/;
            resourceInputs["storage"] = undefined /*out*/;
            resourceInputs["topicPrefix"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KsqlCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KsqlCluster resources.
 */
export interface KsqlClusterState {
    apiVersion?: pulumi.Input<string>;
    credentialIdentity?: pulumi.Input<inputs.KsqlClusterCredentialIdentity>;
    /**
     * The number of Confluent Streaming Units (CSUs) for the ksqlDB cluster.
     */
    csu?: pulumi.Input<number>;
    /**
     * The name of the ksqlDB cluster.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     */
    environment?: pulumi.Input<inputs.KsqlClusterEnvironment>;
    kafkaCluster?: pulumi.Input<inputs.KsqlClusterKafkaCluster>;
    kind?: pulumi.Input<string>;
    /**
     * The Confluent Resource Name of the ksqlDB cluster.
     */
    resourceName?: pulumi.Input<string>;
    /**
     * The API endpoint of the ksqlDB cluster.
     */
    restEndpoint?: pulumi.Input<string>;
    /**
     * The amount of storage (in GB) provisioned to the ksqlDB cluster.
     */
    storage?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.KsqlClusterTimeouts>;
    /**
     * Topic name prefix used by this ksqlDB cluster. Used to assign ACLs for this ksqlDB cluster to use.
     */
    topicPrefix?: pulumi.Input<string>;
    /**
     * Controls whether the row data should be included in the processing log topic. Set it to `false` if you don't want to
     * emit sensitive information to the processing log. Defaults to `true`. Defaults to `true`.
     */
    useDetailedProcessingLog?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a KsqlCluster resource.
 */
export interface KsqlClusterArgs {
    credentialIdentity: pulumi.Input<inputs.KsqlClusterCredentialIdentity>;
    /**
     * The number of Confluent Streaming Units (CSUs) for the ksqlDB cluster.
     */
    csu: pulumi.Input<number>;
    /**
     * The name of the ksqlDB cluster.
     */
    displayName: pulumi.Input<string>;
    /**
     * Environment objects represent an isolated namespace for your Confluent resources for organizational purposes.
     */
    environment: pulumi.Input<inputs.KsqlClusterEnvironment>;
    kafkaCluster: pulumi.Input<inputs.KsqlClusterKafkaCluster>;
    timeouts?: pulumi.Input<inputs.KsqlClusterTimeouts>;
    /**
     * Controls whether the row data should be included in the processing log topic. Set it to `false` if you don't want to
     * emit sensitive information to the processing log. Defaults to `true`. Defaults to `true`.
     */
    useDetailedProcessingLog?: pulumi.Input<boolean>;
}
