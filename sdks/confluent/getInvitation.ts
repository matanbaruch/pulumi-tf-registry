// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getInvitation(args: GetInvitationArgs, opts?: pulumi.InvokeOptions): Promise<GetInvitationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("confluent:index/getInvitation:getInvitation", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getInvitation.
 */
export interface GetInvitationArgs {
    id: string;
}

/**
 * A collection of values returned by getInvitation.
 */
export interface GetInvitationResult {
    readonly acceptedAt: string;
    readonly authType: string;
    readonly creators: outputs.GetInvitationCreator[];
    readonly email: string;
    readonly expiresAt: string;
    readonly id: string;
    readonly status: string;
    readonly users: outputs.GetInvitationUser[];
}
export function getInvitationOutput(args: GetInvitationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetInvitationResult> {
    return pulumi.output(args).apply((a: any) => getInvitation(a, opts))
}

/**
 * A collection of arguments for invoking getInvitation.
 */
export interface GetInvitationOutputArgs {
    id: pulumi.Input<string>;
}
