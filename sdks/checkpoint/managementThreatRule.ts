// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ManagementThreatRule extends pulumi.CustomResource {
    /**
     * Get an existing ManagementThreatRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagementThreatRuleState, opts?: pulumi.CustomResourceOptions): ManagementThreatRule {
        return new ManagementThreatRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkpoint:index/managementThreatRule:ManagementThreatRule';

    /**
     * Returns true if the given object is an instance of ManagementThreatRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementThreatRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementThreatRule.__pulumiType;
    }

    /**
     * Action-the enforced profile.
     */
    public readonly action!: pulumi.Output<string | undefined>;
    /**
     * Comments string.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * True if negate is set for destination.
     */
    public readonly destinationNegate!: pulumi.Output<boolean | undefined>;
    /**
     * Collection of Network objects identified by the name or UID.
     */
    public readonly destinations!: pulumi.Output<string[] | undefined>;
    /**
     * Enable/Disable the rule.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Collection of rule's exceptions identified by UID
     */
    public /*out*/ readonly exceptions!: pulumi.Output<string[]>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    public readonly ignoreErrors!: pulumi.Output<boolean | undefined>;
    /**
     * Apply changes ignoring warnings.
     */
    public readonly ignoreWarnings!: pulumi.Output<boolean | undefined>;
    /**
     * Which Gateways identified by the name or UID to install the policy on.
     */
    public readonly installOns!: pulumi.Output<string[] | undefined>;
    /**
     * Layer that the rule belongs to identified by the name or UID.
     */
    public readonly layer!: pulumi.Output<string>;
    /**
     * Rule name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Position in the rulebase.
     */
    public readonly position!: pulumi.Output<{[key: string]: string}>;
    /**
     * True if negate is set for Protected Scope.
     */
    public readonly protectedScopeNegate!: pulumi.Output<boolean | undefined>;
    /**
     * Collection of objects defining Protected Scope identified by the name or UID.
     */
    public readonly protectedScopes!: pulumi.Output<string[] | undefined>;
    /**
     * True if negate is set for service.
     */
    public readonly serviceNegate!: pulumi.Output<boolean | undefined>;
    /**
     * Collection of Network objects identified by the name or UID.
     */
    public readonly services!: pulumi.Output<string[] | undefined>;
    /**
     * True if negate is set for source.
     */
    public readonly sourceNegate!: pulumi.Output<boolean | undefined>;
    /**
     * Collection of Network objects identified by the name or UID.
     */
    public readonly sources!: pulumi.Output<string[] | undefined>;
    /**
     * Packet tracking.
     */
    public readonly track!: pulumi.Output<string | undefined>;
    /**
     * Threat rule track settings.
     */
    public readonly trackSettings!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a ManagementThreatRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagementThreatRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagementThreatRuleArgs | ManagementThreatRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagementThreatRuleState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["destinationNegate"] = state ? state.destinationNegate : undefined;
            resourceInputs["destinations"] = state ? state.destinations : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["exceptions"] = state ? state.exceptions : undefined;
            resourceInputs["ignoreErrors"] = state ? state.ignoreErrors : undefined;
            resourceInputs["ignoreWarnings"] = state ? state.ignoreWarnings : undefined;
            resourceInputs["installOns"] = state ? state.installOns : undefined;
            resourceInputs["layer"] = state ? state.layer : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["position"] = state ? state.position : undefined;
            resourceInputs["protectedScopeNegate"] = state ? state.protectedScopeNegate : undefined;
            resourceInputs["protectedScopes"] = state ? state.protectedScopes : undefined;
            resourceInputs["serviceNegate"] = state ? state.serviceNegate : undefined;
            resourceInputs["services"] = state ? state.services : undefined;
            resourceInputs["sourceNegate"] = state ? state.sourceNegate : undefined;
            resourceInputs["sources"] = state ? state.sources : undefined;
            resourceInputs["track"] = state ? state.track : undefined;
            resourceInputs["trackSettings"] = state ? state.trackSettings : undefined;
        } else {
            const args = argsOrState as ManagementThreatRuleArgs | undefined;
            if ((!args || args.layer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'layer'");
            }
            if ((!args || args.position === undefined) && !opts.urn) {
                throw new Error("Missing required property 'position'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["destinationNegate"] = args ? args.destinationNegate : undefined;
            resourceInputs["destinations"] = args ? args.destinations : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["ignoreErrors"] = args ? args.ignoreErrors : undefined;
            resourceInputs["ignoreWarnings"] = args ? args.ignoreWarnings : undefined;
            resourceInputs["installOns"] = args ? args.installOns : undefined;
            resourceInputs["layer"] = args ? args.layer : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["position"] = args ? args.position : undefined;
            resourceInputs["protectedScopeNegate"] = args ? args.protectedScopeNegate : undefined;
            resourceInputs["protectedScopes"] = args ? args.protectedScopes : undefined;
            resourceInputs["serviceNegate"] = args ? args.serviceNegate : undefined;
            resourceInputs["services"] = args ? args.services : undefined;
            resourceInputs["sourceNegate"] = args ? args.sourceNegate : undefined;
            resourceInputs["sources"] = args ? args.sources : undefined;
            resourceInputs["track"] = args ? args.track : undefined;
            resourceInputs["trackSettings"] = args ? args.trackSettings : undefined;
            resourceInputs["exceptions"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagementThreatRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagementThreatRule resources.
 */
export interface ManagementThreatRuleState {
    /**
     * Action-the enforced profile.
     */
    action?: pulumi.Input<string>;
    /**
     * Comments string.
     */
    comments?: pulumi.Input<string>;
    /**
     * True if negate is set for destination.
     */
    destinationNegate?: pulumi.Input<boolean>;
    /**
     * Collection of Network objects identified by the name or UID.
     */
    destinations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable/Disable the rule.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Collection of rule's exceptions identified by UID
     */
    exceptions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    ignoreErrors?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring warnings.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * Which Gateways identified by the name or UID to install the policy on.
     */
    installOns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Layer that the rule belongs to identified by the name or UID.
     */
    layer?: pulumi.Input<string>;
    /**
     * Rule name.
     */
    name?: pulumi.Input<string>;
    /**
     * Position in the rulebase.
     */
    position?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * True if negate is set for Protected Scope.
     */
    protectedScopeNegate?: pulumi.Input<boolean>;
    /**
     * Collection of objects defining Protected Scope identified by the name or UID.
     */
    protectedScopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * True if negate is set for service.
     */
    serviceNegate?: pulumi.Input<boolean>;
    /**
     * Collection of Network objects identified by the name or UID.
     */
    services?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * True if negate is set for source.
     */
    sourceNegate?: pulumi.Input<boolean>;
    /**
     * Collection of Network objects identified by the name or UID.
     */
    sources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Packet tracking.
     */
    track?: pulumi.Input<string>;
    /**
     * Threat rule track settings.
     */
    trackSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a ManagementThreatRule resource.
 */
export interface ManagementThreatRuleArgs {
    /**
     * Action-the enforced profile.
     */
    action?: pulumi.Input<string>;
    /**
     * Comments string.
     */
    comments?: pulumi.Input<string>;
    /**
     * True if negate is set for destination.
     */
    destinationNegate?: pulumi.Input<boolean>;
    /**
     * Collection of Network objects identified by the name or UID.
     */
    destinations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable/Disable the rule.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    ignoreErrors?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring warnings.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * Which Gateways identified by the name or UID to install the policy on.
     */
    installOns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Layer that the rule belongs to identified by the name or UID.
     */
    layer: pulumi.Input<string>;
    /**
     * Rule name.
     */
    name?: pulumi.Input<string>;
    /**
     * Position in the rulebase.
     */
    position: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * True if negate is set for Protected Scope.
     */
    protectedScopeNegate?: pulumi.Input<boolean>;
    /**
     * Collection of objects defining Protected Scope identified by the name or UID.
     */
    protectedScopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * True if negate is set for service.
     */
    serviceNegate?: pulumi.Input<boolean>;
    /**
     * Collection of Network objects identified by the name or UID.
     */
    services?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * True if negate is set for source.
     */
    sourceNegate?: pulumi.Input<boolean>;
    /**
     * Collection of Network objects identified by the name or UID.
     */
    sources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Packet tracking.
     */
    track?: pulumi.Input<string>;
    /**
     * Threat rule track settings.
     */
    trackSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
