// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ManagementAdministrator extends pulumi.CustomResource {
    /**
     * Get an existing ManagementAdministrator resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagementAdministratorState, opts?: pulumi.CustomResourceOptions): ManagementAdministrator {
        return new ManagementAdministrator(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkpoint:index/managementAdministrator:ManagementAdministrator';

    /**
     * Returns true if the given object is an instance of ManagementAdministrator.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementAdministrator {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementAdministrator.__pulumiType;
    }

    /**
     * Authentication method.
     */
    public readonly authenticationMethod!: pulumi.Output<string | undefined>;
    /**
     * Color of the object. Should be one of existing colors.
     */
    public readonly color!: pulumi.Output<string | undefined>;
    /**
     * Comments string.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * Administrator email.
     */
    public readonly email!: pulumi.Output<string | undefined>;
    /**
     * Format: YYYY-MM-DD, YYYY-mm-ddThh:mm:ss.
     */
    public readonly expirationDate!: pulumi.Output<string | undefined>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    public readonly ignoreErrors!: pulumi.Output<boolean | undefined>;
    /**
     * Apply changes ignoring warnings. Apply changes ignoring warnings.
     */
    public readonly ignoreWarnings!: pulumi.Output<boolean | undefined>;
    /**
     * Administrator multi-domain profile.
     */
    public readonly multiDomainProfile!: pulumi.Output<string | undefined>;
    /**
     * True if administrator must change password on the next login.
     */
    public readonly mustChangePassword!: pulumi.Output<boolean | undefined>;
    /**
     * Object name. Should be unique in the domain.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Administrator password.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Administrator password hash.
     */
    public readonly passwordHash!: pulumi.Output<string | undefined>;
    /**
     * Administrator permissions profile. Permissions profile should not be provided when multi-domain-profile is set to
     * "Multi-Domain Super User" or "Domain Super User".
     */
    public readonly permissionsProfiles!: pulumi.Output<outputs.ManagementAdministratorPermissionsProfile[] | undefined>;
    /**
     * Administrator phone number.
     */
    public readonly phoneNumber!: pulumi.Output<string | undefined>;
    /**
     * RADIUS server object identified by the name or UID. Must be set when "authentication-method" was selected to be
     * "RADIUS".
     */
    public readonly radiusServer!: pulumi.Output<string | undefined>;
    /**
     * Name of the Secure Internal Connection Trust.
     */
    public /*out*/ readonly sicName!: pulumi.Output<string>;
    /**
     * TACACS server object identified by the name or UID. Must be set when "authentication-method" was selected to be
     * "TACACS".
     */
    public readonly tacacsServer!: pulumi.Output<string | undefined>;
    /**
     * Collection of tag identifiers.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;

    /**
     * Create a ManagementAdministrator resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ManagementAdministratorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagementAdministratorArgs | ManagementAdministratorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagementAdministratorState | undefined;
            resourceInputs["authenticationMethod"] = state ? state.authenticationMethod : undefined;
            resourceInputs["color"] = state ? state.color : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["expirationDate"] = state ? state.expirationDate : undefined;
            resourceInputs["ignoreErrors"] = state ? state.ignoreErrors : undefined;
            resourceInputs["ignoreWarnings"] = state ? state.ignoreWarnings : undefined;
            resourceInputs["multiDomainProfile"] = state ? state.multiDomainProfile : undefined;
            resourceInputs["mustChangePassword"] = state ? state.mustChangePassword : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["passwordHash"] = state ? state.passwordHash : undefined;
            resourceInputs["permissionsProfiles"] = state ? state.permissionsProfiles : undefined;
            resourceInputs["phoneNumber"] = state ? state.phoneNumber : undefined;
            resourceInputs["radiusServer"] = state ? state.radiusServer : undefined;
            resourceInputs["sicName"] = state ? state.sicName : undefined;
            resourceInputs["tacacsServer"] = state ? state.tacacsServer : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ManagementAdministratorArgs | undefined;
            resourceInputs["authenticationMethod"] = args ? args.authenticationMethod : undefined;
            resourceInputs["color"] = args ? args.color : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["expirationDate"] = args ? args.expirationDate : undefined;
            resourceInputs["ignoreErrors"] = args ? args.ignoreErrors : undefined;
            resourceInputs["ignoreWarnings"] = args ? args.ignoreWarnings : undefined;
            resourceInputs["multiDomainProfile"] = args ? args.multiDomainProfile : undefined;
            resourceInputs["mustChangePassword"] = args ? args.mustChangePassword : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["passwordHash"] = args?.passwordHash ? pulumi.secret(args.passwordHash) : undefined;
            resourceInputs["permissionsProfiles"] = args ? args.permissionsProfiles : undefined;
            resourceInputs["phoneNumber"] = args ? args.phoneNumber : undefined;
            resourceInputs["radiusServer"] = args ? args.radiusServer : undefined;
            resourceInputs["tacacsServer"] = args ? args.tacacsServer : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["sicName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password", "passwordHash"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ManagementAdministrator.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagementAdministrator resources.
 */
export interface ManagementAdministratorState {
    /**
     * Authentication method.
     */
    authenticationMethod?: pulumi.Input<string>;
    /**
     * Color of the object. Should be one of existing colors.
     */
    color?: pulumi.Input<string>;
    /**
     * Comments string.
     */
    comments?: pulumi.Input<string>;
    /**
     * Administrator email.
     */
    email?: pulumi.Input<string>;
    /**
     * Format: YYYY-MM-DD, YYYY-mm-ddThh:mm:ss.
     */
    expirationDate?: pulumi.Input<string>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    ignoreErrors?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring warnings. Apply changes ignoring warnings.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * Administrator multi-domain profile.
     */
    multiDomainProfile?: pulumi.Input<string>;
    /**
     * True if administrator must change password on the next login.
     */
    mustChangePassword?: pulumi.Input<boolean>;
    /**
     * Object name. Should be unique in the domain.
     */
    name?: pulumi.Input<string>;
    /**
     * Administrator password.
     */
    password?: pulumi.Input<string>;
    /**
     * Administrator password hash.
     */
    passwordHash?: pulumi.Input<string>;
    /**
     * Administrator permissions profile. Permissions profile should not be provided when multi-domain-profile is set to
     * "Multi-Domain Super User" or "Domain Super User".
     */
    permissionsProfiles?: pulumi.Input<pulumi.Input<inputs.ManagementAdministratorPermissionsProfile>[]>;
    /**
     * Administrator phone number.
     */
    phoneNumber?: pulumi.Input<string>;
    /**
     * RADIUS server object identified by the name or UID. Must be set when "authentication-method" was selected to be
     * "RADIUS".
     */
    radiusServer?: pulumi.Input<string>;
    /**
     * Name of the Secure Internal Connection Trust.
     */
    sicName?: pulumi.Input<string>;
    /**
     * TACACS server object identified by the name or UID. Must be set when "authentication-method" was selected to be
     * "TACACS".
     */
    tacacsServer?: pulumi.Input<string>;
    /**
     * Collection of tag identifiers.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ManagementAdministrator resource.
 */
export interface ManagementAdministratorArgs {
    /**
     * Authentication method.
     */
    authenticationMethod?: pulumi.Input<string>;
    /**
     * Color of the object. Should be one of existing colors.
     */
    color?: pulumi.Input<string>;
    /**
     * Comments string.
     */
    comments?: pulumi.Input<string>;
    /**
     * Administrator email.
     */
    email?: pulumi.Input<string>;
    /**
     * Format: YYYY-MM-DD, YYYY-mm-ddThh:mm:ss.
     */
    expirationDate?: pulumi.Input<string>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    ignoreErrors?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring warnings. Apply changes ignoring warnings.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * Administrator multi-domain profile.
     */
    multiDomainProfile?: pulumi.Input<string>;
    /**
     * True if administrator must change password on the next login.
     */
    mustChangePassword?: pulumi.Input<boolean>;
    /**
     * Object name. Should be unique in the domain.
     */
    name?: pulumi.Input<string>;
    /**
     * Administrator password.
     */
    password?: pulumi.Input<string>;
    /**
     * Administrator password hash.
     */
    passwordHash?: pulumi.Input<string>;
    /**
     * Administrator permissions profile. Permissions profile should not be provided when multi-domain-profile is set to
     * "Multi-Domain Super User" or "Domain Super User".
     */
    permissionsProfiles?: pulumi.Input<pulumi.Input<inputs.ManagementAdministratorPermissionsProfile>[]>;
    /**
     * Administrator phone number.
     */
    phoneNumber?: pulumi.Input<string>;
    /**
     * RADIUS server object identified by the name or UID. Must be set when "authentication-method" was selected to be
     * "RADIUS".
     */
    radiusServer?: pulumi.Input<string>;
    /**
     * TACACS server object identified by the name or UID. Must be set when "authentication-method" was selected to be
     * "TACACS".
     */
    tacacsServer?: pulumi.Input<string>;
    /**
     * Collection of tag identifiers.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
