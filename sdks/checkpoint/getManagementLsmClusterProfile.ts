// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getManagementLsmClusterProfile(args?: GetManagementLsmClusterProfileArgs, opts?: pulumi.InvokeOptions): Promise<GetManagementLsmClusterProfileResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("checkpoint:index/getManagementLsmClusterProfile:getManagementLsmClusterProfile", {
        "id": args.id,
        "name": args.name,
        "osName": args.osName,
        "uid": args.uid,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getManagementLsmClusterProfile.
 */
export interface GetManagementLsmClusterProfileArgs {
    id?: string;
    name?: string;
    osName?: string;
    uid?: string;
}

/**
 * A collection of values returned by getManagementLsmClusterProfile.
 */
export interface GetManagementLsmClusterProfileResult {
    readonly advancedSettings: outputs.GetManagementLsmClusterProfileAdvancedSetting[];
    readonly antiBot: boolean;
    readonly antiVirus: boolean;
    readonly applicationControl: boolean;
    readonly applicationControlAndUrlFilteringSettings: outputs.GetManagementLsmClusterProfileApplicationControlAndUrlFilteringSetting[];
    readonly clusterInterfaces: outputs.GetManagementLsmClusterProfileClusterInterface[];
    readonly clusterMembers: outputs.GetManagementLsmClusterProfileClusterMember[];
    readonly color: string;
    readonly comments: string;
    readonly contentAwareness: boolean;
    readonly dataLossPrevention: boolean;
    readonly dynamicIp: boolean;
    readonly enableHttpsInspection: boolean;
    readonly firewall: boolean;
    readonly groups: outputs.GetManagementLsmClusterProfileGroup[];
    readonly hitCount: boolean;
    readonly httpsInspections: outputs.GetManagementLsmClusterProfileHttpsInspection[];
    readonly id: string;
    readonly interfaces: string[];
    readonly ips: boolean;
    readonly name?: string;
    readonly natHideInternalInterfaces: boolean;
    readonly natSettings: {[key: string]: string};
    readonly osName?: string;
    readonly proxySettings: {[key: string]: string};
    readonly qos: boolean;
    readonly saveLogsLocally: boolean;
    readonly sendAlertsToServers: string[];
    readonly sendLogsToBackupServers: string[];
    readonly sendLogsToServers: string[];
    readonly tags: string[];
    readonly threatEmulation: boolean;
    readonly threatExtraction: boolean;
    readonly threatPreventionMode: string;
    readonly type: string;
    readonly uid?: string;
    readonly urlFiltering: boolean;
    readonly version: string;
    readonly vpn: boolean;
    readonly zeroPhishing: boolean;
    readonly zeroPhishingFqdn: string;
}
export function getManagementLsmClusterProfileOutput(args?: GetManagementLsmClusterProfileOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetManagementLsmClusterProfileResult> {
    return pulumi.output(args).apply((a: any) => getManagementLsmClusterProfile(a, opts))
}

/**
 * A collection of arguments for invoking getManagementLsmClusterProfile.
 */
export interface GetManagementLsmClusterProfileOutputArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    osName?: pulumi.Input<string>;
    uid?: pulumi.Input<string>;
}
