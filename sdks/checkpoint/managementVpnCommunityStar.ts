// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ManagementVpnCommunityStar extends pulumi.CustomResource {
    /**
     * Get an existing ManagementVpnCommunityStar resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagementVpnCommunityStarState, opts?: pulumi.CustomResourceOptions): ManagementVpnCommunityStar {
        return new ManagementVpnCommunityStar(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkpoint:index/managementVpnCommunityStar:ManagementVpnCommunityStar';

    /**
     * Returns true if the given object is an instance of ManagementVpnCommunityStar.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementVpnCommunityStar {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementVpnCommunityStar.__pulumiType;
    }

    /**
     * Collection of Gateway objects representing center gateways identified by the name or UID.
     */
    public readonly centerGateways!: pulumi.Output<string[] | undefined>;
    /**
     * Color of the object. Should be one of existing colors.
     */
    public readonly color!: pulumi.Output<string | undefined>;
    /**
     * Comments string.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * The encryption method to be used.
     */
    public readonly encryptionMethod!: pulumi.Output<string | undefined>;
    /**
     * The encryption suite to be used.
     */
    public readonly encryptionSuite!: pulumi.Output<string | undefined>;
    /**
     * VPN granular encryption settings.
     */
    public readonly granularEncryptions!: pulumi.Output<outputs.ManagementVpnCommunityStarGranularEncryption[] | undefined>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    public readonly ignoreErrors!: pulumi.Output<boolean | undefined>;
    /**
     * Apply changes ignoring warnings.
     */
    public readonly ignoreWarnings!: pulumi.Output<boolean | undefined>;
    /**
     * Ike Phase 1 settings. Only applicable when the encryption-suite is set to [custom].
     */
    public readonly ikePhase1!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Ike Phase 2 settings. Only applicable when the encryption-suite is set to [custom].
     */
    public readonly ikePhase2!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Indicates whether the meshed community is in center.
     */
    public readonly meshCenterGateways!: pulumi.Output<boolean | undefined>;
    /**
     * Object name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The Overrides VPN Domains of the participants GWs.
     */
    public readonly overrideVpnDomains!: pulumi.Output<outputs.ManagementVpnCommunityStarOverrideVpnDomain[] | undefined>;
    /**
     * Collection of Gateway objects representing satellite gateways identified by the name or UID.
     */
    public readonly satelliteGateways!: pulumi.Output<string[] | undefined>;
    /**
     * Shared secrets for external gateways.
     */
    public readonly sharedSecrets!: pulumi.Output<outputs.ManagementVpnCommunityStarSharedSecret[] | undefined>;
    /**
     * Collection of tag identifiers.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * VPN tunnel sharing option to be used.
     */
    public readonly tunnelGranularity!: pulumi.Output<string | undefined>;
    /**
     * Indicates whether the shared secret should be used for all external gateways.
     */
    public readonly useSharedSecret!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ManagementVpnCommunityStar resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ManagementVpnCommunityStarArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagementVpnCommunityStarArgs | ManagementVpnCommunityStarState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagementVpnCommunityStarState | undefined;
            resourceInputs["centerGateways"] = state ? state.centerGateways : undefined;
            resourceInputs["color"] = state ? state.color : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["encryptionMethod"] = state ? state.encryptionMethod : undefined;
            resourceInputs["encryptionSuite"] = state ? state.encryptionSuite : undefined;
            resourceInputs["granularEncryptions"] = state ? state.granularEncryptions : undefined;
            resourceInputs["ignoreErrors"] = state ? state.ignoreErrors : undefined;
            resourceInputs["ignoreWarnings"] = state ? state.ignoreWarnings : undefined;
            resourceInputs["ikePhase1"] = state ? state.ikePhase1 : undefined;
            resourceInputs["ikePhase2"] = state ? state.ikePhase2 : undefined;
            resourceInputs["meshCenterGateways"] = state ? state.meshCenterGateways : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["overrideVpnDomains"] = state ? state.overrideVpnDomains : undefined;
            resourceInputs["satelliteGateways"] = state ? state.satelliteGateways : undefined;
            resourceInputs["sharedSecrets"] = state ? state.sharedSecrets : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tunnelGranularity"] = state ? state.tunnelGranularity : undefined;
            resourceInputs["useSharedSecret"] = state ? state.useSharedSecret : undefined;
        } else {
            const args = argsOrState as ManagementVpnCommunityStarArgs | undefined;
            resourceInputs["centerGateways"] = args ? args.centerGateways : undefined;
            resourceInputs["color"] = args ? args.color : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["encryptionMethod"] = args ? args.encryptionMethod : undefined;
            resourceInputs["encryptionSuite"] = args ? args.encryptionSuite : undefined;
            resourceInputs["granularEncryptions"] = args ? args.granularEncryptions : undefined;
            resourceInputs["ignoreErrors"] = args ? args.ignoreErrors : undefined;
            resourceInputs["ignoreWarnings"] = args ? args.ignoreWarnings : undefined;
            resourceInputs["ikePhase1"] = args ? args.ikePhase1 : undefined;
            resourceInputs["ikePhase2"] = args ? args.ikePhase2 : undefined;
            resourceInputs["meshCenterGateways"] = args ? args.meshCenterGateways : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["overrideVpnDomains"] = args ? args.overrideVpnDomains : undefined;
            resourceInputs["satelliteGateways"] = args ? args.satelliteGateways : undefined;
            resourceInputs["sharedSecrets"] = args ? args.sharedSecrets : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tunnelGranularity"] = args ? args.tunnelGranularity : undefined;
            resourceInputs["useSharedSecret"] = args ? args.useSharedSecret : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagementVpnCommunityStar.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagementVpnCommunityStar resources.
 */
export interface ManagementVpnCommunityStarState {
    /**
     * Collection of Gateway objects representing center gateways identified by the name or UID.
     */
    centerGateways?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Color of the object. Should be one of existing colors.
     */
    color?: pulumi.Input<string>;
    /**
     * Comments string.
     */
    comments?: pulumi.Input<string>;
    /**
     * The encryption method to be used.
     */
    encryptionMethod?: pulumi.Input<string>;
    /**
     * The encryption suite to be used.
     */
    encryptionSuite?: pulumi.Input<string>;
    /**
     * VPN granular encryption settings.
     */
    granularEncryptions?: pulumi.Input<pulumi.Input<inputs.ManagementVpnCommunityStarGranularEncryption>[]>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    ignoreErrors?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring warnings.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * Ike Phase 1 settings. Only applicable when the encryption-suite is set to [custom].
     */
    ikePhase1?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Ike Phase 2 settings. Only applicable when the encryption-suite is set to [custom].
     */
    ikePhase2?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Indicates whether the meshed community is in center.
     */
    meshCenterGateways?: pulumi.Input<boolean>;
    /**
     * Object name.
     */
    name?: pulumi.Input<string>;
    /**
     * The Overrides VPN Domains of the participants GWs.
     */
    overrideVpnDomains?: pulumi.Input<pulumi.Input<inputs.ManagementVpnCommunityStarOverrideVpnDomain>[]>;
    /**
     * Collection of Gateway objects representing satellite gateways identified by the name or UID.
     */
    satelliteGateways?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Shared secrets for external gateways.
     */
    sharedSecrets?: pulumi.Input<pulumi.Input<inputs.ManagementVpnCommunityStarSharedSecret>[]>;
    /**
     * Collection of tag identifiers.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * VPN tunnel sharing option to be used.
     */
    tunnelGranularity?: pulumi.Input<string>;
    /**
     * Indicates whether the shared secret should be used for all external gateways.
     */
    useSharedSecret?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ManagementVpnCommunityStar resource.
 */
export interface ManagementVpnCommunityStarArgs {
    /**
     * Collection of Gateway objects representing center gateways identified by the name or UID.
     */
    centerGateways?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Color of the object. Should be one of existing colors.
     */
    color?: pulumi.Input<string>;
    /**
     * Comments string.
     */
    comments?: pulumi.Input<string>;
    /**
     * The encryption method to be used.
     */
    encryptionMethod?: pulumi.Input<string>;
    /**
     * The encryption suite to be used.
     */
    encryptionSuite?: pulumi.Input<string>;
    /**
     * VPN granular encryption settings.
     */
    granularEncryptions?: pulumi.Input<pulumi.Input<inputs.ManagementVpnCommunityStarGranularEncryption>[]>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    ignoreErrors?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring warnings.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * Ike Phase 1 settings. Only applicable when the encryption-suite is set to [custom].
     */
    ikePhase1?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Ike Phase 2 settings. Only applicable when the encryption-suite is set to [custom].
     */
    ikePhase2?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Indicates whether the meshed community is in center.
     */
    meshCenterGateways?: pulumi.Input<boolean>;
    /**
     * Object name.
     */
    name?: pulumi.Input<string>;
    /**
     * The Overrides VPN Domains of the participants GWs.
     */
    overrideVpnDomains?: pulumi.Input<pulumi.Input<inputs.ManagementVpnCommunityStarOverrideVpnDomain>[]>;
    /**
     * Collection of Gateway objects representing satellite gateways identified by the name or UID.
     */
    satelliteGateways?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Shared secrets for external gateways.
     */
    sharedSecrets?: pulumi.Input<pulumi.Input<inputs.ManagementVpnCommunityStarSharedSecret>[]>;
    /**
     * Collection of tag identifiers.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * VPN tunnel sharing option to be used.
     */
    tunnelGranularity?: pulumi.Input<string>;
    /**
     * Indicates whether the shared secret should be used for all external gateways.
     */
    useSharedSecret?: pulumi.Input<boolean>;
}
