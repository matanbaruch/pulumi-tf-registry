// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ManagementSetAutomaticPurge extends pulumi.CustomResource {
    /**
     * Get an existing ManagementSetAutomaticPurge resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagementSetAutomaticPurgeState, opts?: pulumi.CustomResourceOptions): ManagementSetAutomaticPurge {
        return new ManagementSetAutomaticPurge(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkpoint:index/managementSetAutomaticPurge:ManagementSetAutomaticPurge';

    /**
     * Returns true if the given object is an instance of ManagementSetAutomaticPurge.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementSetAutomaticPurge {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementSetAutomaticPurge.__pulumiType;
    }

    /**
     * Turn on/off the automatic-purge feature.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Whether or not to keep the latest N sessions. Note: when the automatic purge feature is enabled, this field and/or the
     * "keep-sessions-by-date" field must be set to 'true'.
     */
    public readonly keepSessionsByCount!: pulumi.Output<boolean | undefined>;
    /**
     * Whether or not to keep the sessions for D days. Note: when the automatic purge feature is enabled, this field and/or the
     * "keep-sessions-by-count" field must be set to 'true'.
     */
    public readonly keepSessionsByDays!: pulumi.Output<boolean | undefined>;
    /**
     * When "keep-sessions-by-days = true" this sets the number of days to keep the sessions.
     */
    public readonly numberOfDaysToKeep!: pulumi.Output<number | undefined>;
    /**
     * When "keep-sessions-by-count = true" this sets the number of newest sessions to preserve, by the sessions's publish
     * date.
     */
    public readonly numberOfSessionsToKeep!: pulumi.Output<number | undefined>;
    /**
     * When to purge sessions that do not meet the "keep" criteria. Note: when the automatic purge feature is enabled, this
     * field must be set.
     */
    public readonly scheduling!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a ManagementSetAutomaticPurge resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagementSetAutomaticPurgeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagementSetAutomaticPurgeArgs | ManagementSetAutomaticPurgeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagementSetAutomaticPurgeState | undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["keepSessionsByCount"] = state ? state.keepSessionsByCount : undefined;
            resourceInputs["keepSessionsByDays"] = state ? state.keepSessionsByDays : undefined;
            resourceInputs["numberOfDaysToKeep"] = state ? state.numberOfDaysToKeep : undefined;
            resourceInputs["numberOfSessionsToKeep"] = state ? state.numberOfSessionsToKeep : undefined;
            resourceInputs["scheduling"] = state ? state.scheduling : undefined;
        } else {
            const args = argsOrState as ManagementSetAutomaticPurgeArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["keepSessionsByCount"] = args ? args.keepSessionsByCount : undefined;
            resourceInputs["keepSessionsByDays"] = args ? args.keepSessionsByDays : undefined;
            resourceInputs["numberOfDaysToKeep"] = args ? args.numberOfDaysToKeep : undefined;
            resourceInputs["numberOfSessionsToKeep"] = args ? args.numberOfSessionsToKeep : undefined;
            resourceInputs["scheduling"] = args ? args.scheduling : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagementSetAutomaticPurge.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagementSetAutomaticPurge resources.
 */
export interface ManagementSetAutomaticPurgeState {
    /**
     * Turn on/off the automatic-purge feature.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Whether or not to keep the latest N sessions. Note: when the automatic purge feature is enabled, this field and/or the
     * "keep-sessions-by-date" field must be set to 'true'.
     */
    keepSessionsByCount?: pulumi.Input<boolean>;
    /**
     * Whether or not to keep the sessions for D days. Note: when the automatic purge feature is enabled, this field and/or the
     * "keep-sessions-by-count" field must be set to 'true'.
     */
    keepSessionsByDays?: pulumi.Input<boolean>;
    /**
     * When "keep-sessions-by-days = true" this sets the number of days to keep the sessions.
     */
    numberOfDaysToKeep?: pulumi.Input<number>;
    /**
     * When "keep-sessions-by-count = true" this sets the number of newest sessions to preserve, by the sessions's publish
     * date.
     */
    numberOfSessionsToKeep?: pulumi.Input<number>;
    /**
     * When to purge sessions that do not meet the "keep" criteria. Note: when the automatic purge feature is enabled, this
     * field must be set.
     */
    scheduling?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a ManagementSetAutomaticPurge resource.
 */
export interface ManagementSetAutomaticPurgeArgs {
    /**
     * Turn on/off the automatic-purge feature.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Whether or not to keep the latest N sessions. Note: when the automatic purge feature is enabled, this field and/or the
     * "keep-sessions-by-date" field must be set to 'true'.
     */
    keepSessionsByCount?: pulumi.Input<boolean>;
    /**
     * Whether or not to keep the sessions for D days. Note: when the automatic purge feature is enabled, this field and/or the
     * "keep-sessions-by-count" field must be set to 'true'.
     */
    keepSessionsByDays?: pulumi.Input<boolean>;
    /**
     * When "keep-sessions-by-days = true" this sets the number of days to keep the sessions.
     */
    numberOfDaysToKeep?: pulumi.Input<number>;
    /**
     * When "keep-sessions-by-count = true" this sets the number of newest sessions to preserve, by the sessions's publish
     * date.
     */
    numberOfSessionsToKeep?: pulumi.Input<number>;
    /**
     * When to purge sessions that do not meet the "keep" criteria. Note: when the automatic purge feature is enabled, this
     * field must be set.
     */
    scheduling?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
