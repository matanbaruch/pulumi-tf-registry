// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ManagementCommandGaiaApi extends pulumi.CustomResource {
    /**
     * Get an existing ManagementCommandGaiaApi resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagementCommandGaiaApiState, opts?: pulumi.CustomResourceOptions): ManagementCommandGaiaApi {
        return new ManagementCommandGaiaApi(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkpoint:index/managementCommandGaiaApi:ManagementCommandGaiaApi';

    /**
     * Returns true if the given object is an instance of ManagementCommandGaiaApi.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementCommandGaiaApi {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementCommandGaiaApi.__pulumiType;
    }

    /**
     * Target's api command.
     */
    public readonly commandName!: pulumi.Output<string>;
    /**
     * Other input parameters that gateway needs it.
     */
    public readonly otherParameter!: pulumi.Output<string | undefined>;
    /**
     * Response's object from the target in json format.
     */
    public /*out*/ readonly responseMessage!: pulumi.Output<string>;
    /**
     * Gateway-object-name or gateway-ip-address or gateway-UID.
     */
    public readonly target!: pulumi.Output<string>;

    /**
     * Create a ManagementCommandGaiaApi resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagementCommandGaiaApiArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagementCommandGaiaApiArgs | ManagementCommandGaiaApiState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagementCommandGaiaApiState | undefined;
            resourceInputs["commandName"] = state ? state.commandName : undefined;
            resourceInputs["otherParameter"] = state ? state.otherParameter : undefined;
            resourceInputs["responseMessage"] = state ? state.responseMessage : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
        } else {
            const args = argsOrState as ManagementCommandGaiaApiArgs | undefined;
            if ((!args || args.commandName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'commandName'");
            }
            if ((!args || args.target === undefined) && !opts.urn) {
                throw new Error("Missing required property 'target'");
            }
            resourceInputs["commandName"] = args ? args.commandName : undefined;
            resourceInputs["otherParameter"] = args ? args.otherParameter : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["responseMessage"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagementCommandGaiaApi.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagementCommandGaiaApi resources.
 */
export interface ManagementCommandGaiaApiState {
    /**
     * Target's api command.
     */
    commandName?: pulumi.Input<string>;
    /**
     * Other input parameters that gateway needs it.
     */
    otherParameter?: pulumi.Input<string>;
    /**
     * Response's object from the target in json format.
     */
    responseMessage?: pulumi.Input<string>;
    /**
     * Gateway-object-name or gateway-ip-address or gateway-UID.
     */
    target?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagementCommandGaiaApi resource.
 */
export interface ManagementCommandGaiaApiArgs {
    /**
     * Target's api command.
     */
    commandName: pulumi.Input<string>;
    /**
     * Other input parameters that gateway needs it.
     */
    otherParameter?: pulumi.Input<string>;
    /**
     * Gateway-object-name or gateway-ip-address or gateway-UID.
     */
    target: pulumi.Input<string>;
}
