// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getManagementThreatException(args: GetManagementThreatExceptionArgs, opts?: pulumi.InvokeOptions): Promise<GetManagementThreatExceptionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("checkpoint:index/getManagementThreatException:getManagementThreatException", {
        "exceptionGroupName": args.exceptionGroupName,
        "exceptionGroupUid": args.exceptionGroupUid,
        "id": args.id,
        "layer": args.layer,
        "name": args.name,
        "ruleName": args.ruleName,
        "ruleUid": args.ruleUid,
        "uid": args.uid,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getManagementThreatException.
 */
export interface GetManagementThreatExceptionArgs {
    exceptionGroupName?: string;
    exceptionGroupUid?: string;
    id?: string;
    layer: string;
    name?: string;
    ruleName?: string;
    ruleUid?: string;
    uid?: string;
}

/**
 * A collection of values returned by getManagementThreatException.
 */
export interface GetManagementThreatExceptionResult {
    readonly action: string;
    readonly comments: string;
    readonly destinationNegate: boolean;
    readonly destinations: string[];
    readonly enabled: boolean;
    readonly exceptionGroupName?: string;
    readonly exceptionGroupUid?: string;
    readonly id: string;
    readonly installOns: string[];
    readonly layer: string;
    readonly name?: string;
    readonly owner: string;
    readonly protectedScopeNegate: boolean;
    readonly protectedScopes: string[];
    readonly protectionOrSites: string[];
    readonly ruleName?: string;
    readonly ruleUid?: string;
    readonly serviceNegate: boolean;
    readonly services: string[];
    readonly sourceNegate: boolean;
    readonly sources: string[];
    readonly track: string;
    readonly uid?: string;
}
export function getManagementThreatExceptionOutput(args: GetManagementThreatExceptionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetManagementThreatExceptionResult> {
    return pulumi.output(args).apply((a: any) => getManagementThreatException(a, opts))
}

/**
 * A collection of arguments for invoking getManagementThreatException.
 */
export interface GetManagementThreatExceptionOutputArgs {
    exceptionGroupName?: pulumi.Input<string>;
    exceptionGroupUid?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    layer: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ruleName?: pulumi.Input<string>;
    ruleUid?: pulumi.Input<string>;
    uid?: pulumi.Input<string>;
}
