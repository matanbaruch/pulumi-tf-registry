// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The provider type for the checkpoint package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'checkpoint';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    /**
     * Administrator API key
     */
    public readonly apiKey!: pulumi.Output<string | undefined>;
    /**
     * Smart-1 Cloud management UID
     */
    public readonly cloudMgmtId!: pulumi.Output<string | undefined>;
    /**
     * Check Point access context - gaia_api or web_api
     */
    public readonly context!: pulumi.Output<string | undefined>;
    /**
     * login to specific domain. Domain can be identified by name or UID
     */
    public readonly domain!: pulumi.Output<string | undefined>;
    /**
     * Check Point Management admin password
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * HTTP proxy server address (without "http://")
     */
    public readonly proxyHost!: pulumi.Output<string | undefined>;
    /**
     * Check Point Management server IP
     */
    public readonly server!: pulumi.Output<string | undefined>;
    /**
     * Session purpose description
     */
    public readonly sessionDescription!: pulumi.Output<string | undefined>;
    /**
     * File name used to store the current session id
     */
    public readonly sessionFileName!: pulumi.Output<string | undefined>;
    /**
     * Session unique name
     */
    public readonly sessionName!: pulumi.Output<string | undefined>;
    /**
     * Check Point Management admin name
     */
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            resourceInputs["apiKey"] = args ? args.apiKey : undefined;
            resourceInputs["autoPublishBatchSize"] = pulumi.output(args ? args.autoPublishBatchSize : undefined).apply(JSON.stringify);
            resourceInputs["cloudMgmtId"] = args ? args.cloudMgmtId : undefined;
            resourceInputs["context"] = args ? args.context : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["port"] = pulumi.output(args ? args.port : undefined).apply(JSON.stringify);
            resourceInputs["proxyHost"] = args ? args.proxyHost : undefined;
            resourceInputs["proxyPort"] = pulumi.output(args ? args.proxyPort : undefined).apply(JSON.stringify);
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["sessionDescription"] = args ? args.sessionDescription : undefined;
            resourceInputs["sessionFileName"] = args ? args.sessionFileName : undefined;
            resourceInputs["sessionName"] = args ? args.sessionName : undefined;
            resourceInputs["sessionTimeout"] = pulumi.output(args ? args.sessionTimeout : undefined).apply(JSON.stringify);
            resourceInputs["timeout"] = pulumi.output(args ? args.timeout : undefined).apply(JSON.stringify);
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Provider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * Administrator API key
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Number of batch size to automatically run publish
     */
    autoPublishBatchSize?: pulumi.Input<number>;
    /**
     * Smart-1 Cloud management UID
     */
    cloudMgmtId?: pulumi.Input<string>;
    /**
     * Check Point access context - gaia_api or web_api
     */
    context?: pulumi.Input<string>;
    /**
     * login to specific domain. Domain can be identified by name or UID
     */
    domain?: pulumi.Input<string>;
    /**
     * Check Point Management admin password
     */
    password?: pulumi.Input<string>;
    /**
     * Port used for connection to the API server
     */
    port?: pulumi.Input<number>;
    /**
     * HTTP proxy server address (without "http://")
     */
    proxyHost?: pulumi.Input<string>;
    /**
     * HTTP proxy port
     */
    proxyPort?: pulumi.Input<number>;
    /**
     * Check Point Management server IP
     */
    server?: pulumi.Input<string>;
    /**
     * Session purpose description
     */
    sessionDescription?: pulumi.Input<string>;
    /**
     * File name used to store the current session id
     */
    sessionFileName?: pulumi.Input<string>;
    /**
     * Session unique name
     */
    sessionName?: pulumi.Input<string>;
    /**
     * Timeout for the Check Point session in seconds. Can be 10-3600
     */
    sessionTimeout?: pulumi.Input<number>;
    /**
     * Timeout in seconds for the Go SDK to complete a transaction
     */
    timeout?: pulumi.Input<number>;
    /**
     * Check Point Management admin name
     */
    username?: pulumi.Input<string>;
}
