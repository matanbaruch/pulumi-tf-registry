// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ManagementAddDataCenterObject extends pulumi.CustomResource {
    /**
     * Get an existing ManagementAddDataCenterObject resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagementAddDataCenterObjectState, opts?: pulumi.CustomResourceOptions): ManagementAddDataCenterObject {
        return new ManagementAddDataCenterObject(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkpoint:index/managementAddDataCenterObject:ManagementAddDataCenterObject';

    /**
     * Returns true if the given object is an instance of ManagementAddDataCenterObject.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementAddDataCenterObject {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementAddDataCenterObject.__pulumiType;
    }

    /**
     * Color of the object. Should be one of existing colors.
     */
    public readonly color!: pulumi.Output<string | undefined>;
    /**
     * Comments string.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * Name of the Data Center Server the object is in.
     */
    public readonly dataCenterName!: pulumi.Output<string | undefined>;
    /**
     * Unique identifier of the Data Center Server the object is in.
     */
    public readonly dataCenterUid!: pulumi.Output<string | undefined>;
    /**
     * Collection of group identifiers.
     */
    public readonly groups!: pulumi.Output<string[] | undefined>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    public readonly ignoreErrors!: pulumi.Output<boolean | undefined>;
    /**
     * Apply changes ignoring warnings.
     */
    public readonly ignoreWarnings!: pulumi.Output<boolean | undefined>;
    /**
     * Override default name on data-center.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Collection of tag identifiers.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Unique identifier of the object in the Data Center Server.
     */
    public readonly uidInDataCenter!: pulumi.Output<string | undefined>;
    /**
     * URI of the object in the Data Center Server.
     */
    public readonly uri!: pulumi.Output<string | undefined>;

    /**
     * Create a ManagementAddDataCenterObject resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ManagementAddDataCenterObjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagementAddDataCenterObjectArgs | ManagementAddDataCenterObjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagementAddDataCenterObjectState | undefined;
            resourceInputs["color"] = state ? state.color : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["dataCenterName"] = state ? state.dataCenterName : undefined;
            resourceInputs["dataCenterUid"] = state ? state.dataCenterUid : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["ignoreErrors"] = state ? state.ignoreErrors : undefined;
            resourceInputs["ignoreWarnings"] = state ? state.ignoreWarnings : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["uidInDataCenter"] = state ? state.uidInDataCenter : undefined;
            resourceInputs["uri"] = state ? state.uri : undefined;
        } else {
            const args = argsOrState as ManagementAddDataCenterObjectArgs | undefined;
            resourceInputs["color"] = args ? args.color : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["dataCenterName"] = args ? args.dataCenterName : undefined;
            resourceInputs["dataCenterUid"] = args ? args.dataCenterUid : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["ignoreErrors"] = args ? args.ignoreErrors : undefined;
            resourceInputs["ignoreWarnings"] = args ? args.ignoreWarnings : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["uidInDataCenter"] = args ? args.uidInDataCenter : undefined;
            resourceInputs["uri"] = args ? args.uri : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagementAddDataCenterObject.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagementAddDataCenterObject resources.
 */
export interface ManagementAddDataCenterObjectState {
    /**
     * Color of the object. Should be one of existing colors.
     */
    color?: pulumi.Input<string>;
    /**
     * Comments string.
     */
    comments?: pulumi.Input<string>;
    /**
     * Name of the Data Center Server the object is in.
     */
    dataCenterName?: pulumi.Input<string>;
    /**
     * Unique identifier of the Data Center Server the object is in.
     */
    dataCenterUid?: pulumi.Input<string>;
    /**
     * Collection of group identifiers.
     */
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    ignoreErrors?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring warnings.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * Override default name on data-center.
     */
    name?: pulumi.Input<string>;
    /**
     * Collection of tag identifiers.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unique identifier of the object in the Data Center Server.
     */
    uidInDataCenter?: pulumi.Input<string>;
    /**
     * URI of the object in the Data Center Server.
     */
    uri?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagementAddDataCenterObject resource.
 */
export interface ManagementAddDataCenterObjectArgs {
    /**
     * Color of the object. Should be one of existing colors.
     */
    color?: pulumi.Input<string>;
    /**
     * Comments string.
     */
    comments?: pulumi.Input<string>;
    /**
     * Name of the Data Center Server the object is in.
     */
    dataCenterName?: pulumi.Input<string>;
    /**
     * Unique identifier of the Data Center Server the object is in.
     */
    dataCenterUid?: pulumi.Input<string>;
    /**
     * Collection of group identifiers.
     */
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    ignoreErrors?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring warnings.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * Override default name on data-center.
     */
    name?: pulumi.Input<string>;
    /**
     * Collection of tag identifiers.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unique identifier of the object in the Data Center Server.
     */
    uidInDataCenter?: pulumi.Input<string>;
    /**
     * URI of the object in the Data Center Server.
     */
    uri?: pulumi.Input<string>;
}
