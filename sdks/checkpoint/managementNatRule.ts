// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ManagementNatRule extends pulumi.CustomResource {
    /**
     * Get an existing ManagementNatRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagementNatRuleState, opts?: pulumi.CustomResourceOptions): ManagementNatRule {
        return new ManagementNatRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkpoint:index/managementNatRule:ManagementNatRule';

    /**
     * Returns true if the given object is an instance of ManagementNatRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementNatRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementNatRule.__pulumiType;
    }

    /**
     * Auto generated.
     */
    public /*out*/ readonly autoGenerated!: pulumi.Output<boolean>;
    /**
     * Comments string.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * Enable/Disable the rule.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    public readonly ignoreErrors!: pulumi.Output<boolean | undefined>;
    /**
     * Apply changes ignoring warnings.
     */
    public readonly ignoreWarnings!: pulumi.Output<boolean | undefined>;
    /**
     * Which Gateways identified by the name or UID to install the policy on.
     */
    public readonly installOns!: pulumi.Output<string[] | undefined>;
    /**
     * Nat method.
     */
    public readonly method!: pulumi.Output<string | undefined>;
    /**
     * Rule name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Original destination.
     */
    public readonly originalDestination!: pulumi.Output<string | undefined>;
    /**
     * Original service.
     */
    public readonly originalService!: pulumi.Output<string | undefined>;
    /**
     * Original source.
     */
    public readonly originalSource!: pulumi.Output<string | undefined>;
    /**
     * Name of the package.
     */
    public readonly package!: pulumi.Output<string>;
    /**
     * Position in the rulebase.
     */
    public readonly position!: pulumi.Output<{[key: string]: string}>;
    /**
     * Translated destination.
     */
    public readonly translatedDestination!: pulumi.Output<string | undefined>;
    /**
     * Translated service.
     */
    public readonly translatedService!: pulumi.Output<string | undefined>;
    /**
     * Translated source.
     */
    public readonly translatedSource!: pulumi.Output<string | undefined>;

    /**
     * Create a ManagementNatRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagementNatRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagementNatRuleArgs | ManagementNatRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagementNatRuleState | undefined;
            resourceInputs["autoGenerated"] = state ? state.autoGenerated : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["ignoreErrors"] = state ? state.ignoreErrors : undefined;
            resourceInputs["ignoreWarnings"] = state ? state.ignoreWarnings : undefined;
            resourceInputs["installOns"] = state ? state.installOns : undefined;
            resourceInputs["method"] = state ? state.method : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["originalDestination"] = state ? state.originalDestination : undefined;
            resourceInputs["originalService"] = state ? state.originalService : undefined;
            resourceInputs["originalSource"] = state ? state.originalSource : undefined;
            resourceInputs["package"] = state ? state.package : undefined;
            resourceInputs["position"] = state ? state.position : undefined;
            resourceInputs["translatedDestination"] = state ? state.translatedDestination : undefined;
            resourceInputs["translatedService"] = state ? state.translatedService : undefined;
            resourceInputs["translatedSource"] = state ? state.translatedSource : undefined;
        } else {
            const args = argsOrState as ManagementNatRuleArgs | undefined;
            if ((!args || args.package === undefined) && !opts.urn) {
                throw new Error("Missing required property 'package'");
            }
            if ((!args || args.position === undefined) && !opts.urn) {
                throw new Error("Missing required property 'position'");
            }
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["ignoreErrors"] = args ? args.ignoreErrors : undefined;
            resourceInputs["ignoreWarnings"] = args ? args.ignoreWarnings : undefined;
            resourceInputs["installOns"] = args ? args.installOns : undefined;
            resourceInputs["method"] = args ? args.method : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["originalDestination"] = args ? args.originalDestination : undefined;
            resourceInputs["originalService"] = args ? args.originalService : undefined;
            resourceInputs["originalSource"] = args ? args.originalSource : undefined;
            resourceInputs["package"] = args ? args.package : undefined;
            resourceInputs["position"] = args ? args.position : undefined;
            resourceInputs["translatedDestination"] = args ? args.translatedDestination : undefined;
            resourceInputs["translatedService"] = args ? args.translatedService : undefined;
            resourceInputs["translatedSource"] = args ? args.translatedSource : undefined;
            resourceInputs["autoGenerated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagementNatRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagementNatRule resources.
 */
export interface ManagementNatRuleState {
    /**
     * Auto generated.
     */
    autoGenerated?: pulumi.Input<boolean>;
    /**
     * Comments string.
     */
    comments?: pulumi.Input<string>;
    /**
     * Enable/Disable the rule.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    ignoreErrors?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring warnings.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * Which Gateways identified by the name or UID to install the policy on.
     */
    installOns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Nat method.
     */
    method?: pulumi.Input<string>;
    /**
     * Rule name.
     */
    name?: pulumi.Input<string>;
    /**
     * Original destination.
     */
    originalDestination?: pulumi.Input<string>;
    /**
     * Original service.
     */
    originalService?: pulumi.Input<string>;
    /**
     * Original source.
     */
    originalSource?: pulumi.Input<string>;
    /**
     * Name of the package.
     */
    package?: pulumi.Input<string>;
    /**
     * Position in the rulebase.
     */
    position?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Translated destination.
     */
    translatedDestination?: pulumi.Input<string>;
    /**
     * Translated service.
     */
    translatedService?: pulumi.Input<string>;
    /**
     * Translated source.
     */
    translatedSource?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagementNatRule resource.
 */
export interface ManagementNatRuleArgs {
    /**
     * Comments string.
     */
    comments?: pulumi.Input<string>;
    /**
     * Enable/Disable the rule.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    ignoreErrors?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring warnings.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * Which Gateways identified by the name or UID to install the policy on.
     */
    installOns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Nat method.
     */
    method?: pulumi.Input<string>;
    /**
     * Rule name.
     */
    name?: pulumi.Input<string>;
    /**
     * Original destination.
     */
    originalDestination?: pulumi.Input<string>;
    /**
     * Original service.
     */
    originalService?: pulumi.Input<string>;
    /**
     * Original source.
     */
    originalSource?: pulumi.Input<string>;
    /**
     * Name of the package.
     */
    package: pulumi.Input<string>;
    /**
     * Position in the rulebase.
     */
    position: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Translated destination.
     */
    translatedDestination?: pulumi.Input<string>;
    /**
     * Translated service.
     */
    translatedService?: pulumi.Input<string>;
    /**
     * Translated source.
     */
    translatedSource?: pulumi.Input<string>;
}
