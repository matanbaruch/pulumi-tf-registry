// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ManagementUserTemplate extends pulumi.CustomResource {
    /**
     * Get an existing ManagementUserTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagementUserTemplateState, opts?: pulumi.CustomResourceOptions): ManagementUserTemplate {
        return new ManagementUserTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkpoint:index/managementUserTemplate:ManagementUserTemplate';

    /**
     * Returns true if the given object is an instance of ManagementUserTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementUserTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementUserTemplate.__pulumiType;
    }

    /**
     * User allowed locations.
     */
    public readonly allowedLocations!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Authentication method.
     */
    public readonly authenticationMethod!: pulumi.Output<string | undefined>;
    /**
     * Color of the object. Should be one of existing colors.
     */
    public readonly color!: pulumi.Output<string | undefined>;
    /**
     * Comments string.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * Connect every day.
     */
    public readonly connectDaily!: pulumi.Output<boolean | undefined>;
    /**
     * Days users allow to connect.
     */
    public readonly connectOnDays!: pulumi.Output<string[] | undefined>;
    /**
     * User encryption.
     */
    public readonly encryption!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Expiration date according to global properties.
     */
    public readonly expirationByGlobalProperties!: pulumi.Output<boolean | undefined>;
    /**
     * Expiration date in format: yyyy-MM-dd.
     */
    public readonly expirationDate!: pulumi.Output<string | undefined>;
    /**
     * Allow users connect from hour.
     */
    public readonly fromHour!: pulumi.Output<string | undefined>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    public readonly ignoreErrors!: pulumi.Output<boolean | undefined>;
    /**
     * Apply changes ignoring warnings.
     */
    public readonly ignoreWarnings!: pulumi.Output<boolean | undefined>;
    /**
     * Object name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * RADIUS server object identified by the name or UID. Must be set when "authentication-method" was selected to be
     * "RADIUS".
     */
    public readonly radiusServer!: pulumi.Output<string | undefined>;
    /**
     * TACACS server object identified by the name or UID. Must be set when "authentication-method" was selected to be
     * "TACACS".
     */
    public readonly tacacsServer!: pulumi.Output<string | undefined>;
    /**
     * Collection of tag identifiers.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Allow users connect until hour.
     */
    public readonly toHour!: pulumi.Output<string | undefined>;

    /**
     * Create a ManagementUserTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ManagementUserTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagementUserTemplateArgs | ManagementUserTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagementUserTemplateState | undefined;
            resourceInputs["allowedLocations"] = state ? state.allowedLocations : undefined;
            resourceInputs["authenticationMethod"] = state ? state.authenticationMethod : undefined;
            resourceInputs["color"] = state ? state.color : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["connectDaily"] = state ? state.connectDaily : undefined;
            resourceInputs["connectOnDays"] = state ? state.connectOnDays : undefined;
            resourceInputs["encryption"] = state ? state.encryption : undefined;
            resourceInputs["expirationByGlobalProperties"] = state ? state.expirationByGlobalProperties : undefined;
            resourceInputs["expirationDate"] = state ? state.expirationDate : undefined;
            resourceInputs["fromHour"] = state ? state.fromHour : undefined;
            resourceInputs["ignoreErrors"] = state ? state.ignoreErrors : undefined;
            resourceInputs["ignoreWarnings"] = state ? state.ignoreWarnings : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["radiusServer"] = state ? state.radiusServer : undefined;
            resourceInputs["tacacsServer"] = state ? state.tacacsServer : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["toHour"] = state ? state.toHour : undefined;
        } else {
            const args = argsOrState as ManagementUserTemplateArgs | undefined;
            resourceInputs["allowedLocations"] = args ? args.allowedLocations : undefined;
            resourceInputs["authenticationMethod"] = args ? args.authenticationMethod : undefined;
            resourceInputs["color"] = args ? args.color : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["connectDaily"] = args ? args.connectDaily : undefined;
            resourceInputs["connectOnDays"] = args ? args.connectOnDays : undefined;
            resourceInputs["encryption"] = args ? args.encryption : undefined;
            resourceInputs["expirationByGlobalProperties"] = args ? args.expirationByGlobalProperties : undefined;
            resourceInputs["expirationDate"] = args ? args.expirationDate : undefined;
            resourceInputs["fromHour"] = args ? args.fromHour : undefined;
            resourceInputs["ignoreErrors"] = args ? args.ignoreErrors : undefined;
            resourceInputs["ignoreWarnings"] = args ? args.ignoreWarnings : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["radiusServer"] = args ? args.radiusServer : undefined;
            resourceInputs["tacacsServer"] = args ? args.tacacsServer : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["toHour"] = args ? args.toHour : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagementUserTemplate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagementUserTemplate resources.
 */
export interface ManagementUserTemplateState {
    /**
     * User allowed locations.
     */
    allowedLocations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Authentication method.
     */
    authenticationMethod?: pulumi.Input<string>;
    /**
     * Color of the object. Should be one of existing colors.
     */
    color?: pulumi.Input<string>;
    /**
     * Comments string.
     */
    comments?: pulumi.Input<string>;
    /**
     * Connect every day.
     */
    connectDaily?: pulumi.Input<boolean>;
    /**
     * Days users allow to connect.
     */
    connectOnDays?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User encryption.
     */
    encryption?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Expiration date according to global properties.
     */
    expirationByGlobalProperties?: pulumi.Input<boolean>;
    /**
     * Expiration date in format: yyyy-MM-dd.
     */
    expirationDate?: pulumi.Input<string>;
    /**
     * Allow users connect from hour.
     */
    fromHour?: pulumi.Input<string>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    ignoreErrors?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring warnings.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * Object name.
     */
    name?: pulumi.Input<string>;
    /**
     * RADIUS server object identified by the name or UID. Must be set when "authentication-method" was selected to be
     * "RADIUS".
     */
    radiusServer?: pulumi.Input<string>;
    /**
     * TACACS server object identified by the name or UID. Must be set when "authentication-method" was selected to be
     * "TACACS".
     */
    tacacsServer?: pulumi.Input<string>;
    /**
     * Collection of tag identifiers.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Allow users connect until hour.
     */
    toHour?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagementUserTemplate resource.
 */
export interface ManagementUserTemplateArgs {
    /**
     * User allowed locations.
     */
    allowedLocations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Authentication method.
     */
    authenticationMethod?: pulumi.Input<string>;
    /**
     * Color of the object. Should be one of existing colors.
     */
    color?: pulumi.Input<string>;
    /**
     * Comments string.
     */
    comments?: pulumi.Input<string>;
    /**
     * Connect every day.
     */
    connectDaily?: pulumi.Input<boolean>;
    /**
     * Days users allow to connect.
     */
    connectOnDays?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User encryption.
     */
    encryption?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Expiration date according to global properties.
     */
    expirationByGlobalProperties?: pulumi.Input<boolean>;
    /**
     * Expiration date in format: yyyy-MM-dd.
     */
    expirationDate?: pulumi.Input<string>;
    /**
     * Allow users connect from hour.
     */
    fromHour?: pulumi.Input<string>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    ignoreErrors?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring warnings.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * Object name.
     */
    name?: pulumi.Input<string>;
    /**
     * RADIUS server object identified by the name or UID. Must be set when "authentication-method" was selected to be
     * "RADIUS".
     */
    radiusServer?: pulumi.Input<string>;
    /**
     * TACACS server object identified by the name or UID. Must be set when "authentication-method" was selected to be
     * "TACACS".
     */
    tacacsServer?: pulumi.Input<string>;
    /**
     * Collection of tag identifiers.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Allow users connect until hour.
     */
    toHour?: pulumi.Input<string>;
}
