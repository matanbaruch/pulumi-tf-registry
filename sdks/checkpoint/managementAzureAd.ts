// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ManagementAzureAd extends pulumi.CustomResource {
    /**
     * Get an existing ManagementAzureAd resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagementAzureAdState, opts?: pulumi.CustomResourceOptions): ManagementAzureAd {
        return new ManagementAzureAd(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkpoint:index/managementAzureAd:ManagementAzureAd';

    /**
     * Returns true if the given object is an instance of ManagementAzureAd.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementAzureAd {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementAzureAd.__pulumiType;
    }

    /**
     * The Application ID of the Service Principal, in UUID format. Required for authentication-method:
     * service-principal-authentication.
     */
    public readonly applicationId!: pulumi.Output<string>;
    /**
     * The key created for the Service Principal. Required for authentication-method: service-principal-authentication.
     */
    public readonly applicationKey!: pulumi.Output<string>;
    /**
     * user-authentication uses the Azure AD User to authenticate. service-principal-authentication uses the Service Principal
     * to authenticate.
     */
    public readonly authenticationMethod!: pulumi.Output<string>;
    /**
     * Color of the object. Should be one of existing colors.
     */
    public readonly color!: pulumi.Output<string | undefined>;
    /**
     * Comments string.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * The Directory ID of the Azure AD, in UUID format. Required for authentication-method: service-principal-authentication.
     */
    public readonly directoryId!: pulumi.Output<string>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    public readonly ignoreErrors!: pulumi.Output<boolean | undefined>;
    /**
     * Apply changes ignoring warnings.
     */
    public readonly ignoreWarnings!: pulumi.Output<boolean | undefined>;
    /**
     * Object name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Password of the Azure account. Required for authentication-method: user-authentication.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Collection of tag identifiers.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Azure AD Operation task-id, use show-task command to check the progress of the task.
     */
    public /*out*/ readonly taskId!: pulumi.Output<string>;
    /**
     * An Azure Active Directory user Format <username>@<domain>. Required for authentication-method: user-authentication
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a ManagementAzureAd resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagementAzureAdArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagementAzureAdArgs | ManagementAzureAdState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagementAzureAdState | undefined;
            resourceInputs["applicationId"] = state ? state.applicationId : undefined;
            resourceInputs["applicationKey"] = state ? state.applicationKey : undefined;
            resourceInputs["authenticationMethod"] = state ? state.authenticationMethod : undefined;
            resourceInputs["color"] = state ? state.color : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["directoryId"] = state ? state.directoryId : undefined;
            resourceInputs["ignoreErrors"] = state ? state.ignoreErrors : undefined;
            resourceInputs["ignoreWarnings"] = state ? state.ignoreWarnings : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["taskId"] = state ? state.taskId : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as ManagementAzureAdArgs | undefined;
            if ((!args || args.applicationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationId'");
            }
            if ((!args || args.applicationKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationKey'");
            }
            if ((!args || args.authenticationMethod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authenticationMethod'");
            }
            if ((!args || args.directoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'directoryId'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["applicationId"] = args ? args.applicationId : undefined;
            resourceInputs["applicationKey"] = args ? args.applicationKey : undefined;
            resourceInputs["authenticationMethod"] = args ? args.authenticationMethod : undefined;
            resourceInputs["color"] = args ? args.color : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["directoryId"] = args ? args.directoryId : undefined;
            resourceInputs["ignoreErrors"] = args ? args.ignoreErrors : undefined;
            resourceInputs["ignoreWarnings"] = args ? args.ignoreWarnings : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["taskId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ManagementAzureAd.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagementAzureAd resources.
 */
export interface ManagementAzureAdState {
    /**
     * The Application ID of the Service Principal, in UUID format. Required for authentication-method:
     * service-principal-authentication.
     */
    applicationId?: pulumi.Input<string>;
    /**
     * The key created for the Service Principal. Required for authentication-method: service-principal-authentication.
     */
    applicationKey?: pulumi.Input<string>;
    /**
     * user-authentication uses the Azure AD User to authenticate. service-principal-authentication uses the Service Principal
     * to authenticate.
     */
    authenticationMethod?: pulumi.Input<string>;
    /**
     * Color of the object. Should be one of existing colors.
     */
    color?: pulumi.Input<string>;
    /**
     * Comments string.
     */
    comments?: pulumi.Input<string>;
    /**
     * The Directory ID of the Azure AD, in UUID format. Required for authentication-method: service-principal-authentication.
     */
    directoryId?: pulumi.Input<string>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    ignoreErrors?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring warnings.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * Object name.
     */
    name?: pulumi.Input<string>;
    /**
     * Password of the Azure account. Required for authentication-method: user-authentication.
     */
    password?: pulumi.Input<string>;
    /**
     * Collection of tag identifiers.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Azure AD Operation task-id, use show-task command to check the progress of the task.
     */
    taskId?: pulumi.Input<string>;
    /**
     * An Azure Active Directory user Format <username>@<domain>. Required for authentication-method: user-authentication
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagementAzureAd resource.
 */
export interface ManagementAzureAdArgs {
    /**
     * The Application ID of the Service Principal, in UUID format. Required for authentication-method:
     * service-principal-authentication.
     */
    applicationId: pulumi.Input<string>;
    /**
     * The key created for the Service Principal. Required for authentication-method: service-principal-authentication.
     */
    applicationKey: pulumi.Input<string>;
    /**
     * user-authentication uses the Azure AD User to authenticate. service-principal-authentication uses the Service Principal
     * to authenticate.
     */
    authenticationMethod: pulumi.Input<string>;
    /**
     * Color of the object. Should be one of existing colors.
     */
    color?: pulumi.Input<string>;
    /**
     * Comments string.
     */
    comments?: pulumi.Input<string>;
    /**
     * The Directory ID of the Azure AD, in UUID format. Required for authentication-method: service-principal-authentication.
     */
    directoryId: pulumi.Input<string>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    ignoreErrors?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring warnings.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * Object name.
     */
    name?: pulumi.Input<string>;
    /**
     * Password of the Azure account. Required for authentication-method: user-authentication.
     */
    password: pulumi.Input<string>;
    /**
     * Collection of tag identifiers.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An Azure Active Directory user Format <username>@<domain>. Required for authentication-method: user-authentication
     */
    username: pulumi.Input<string>;
}
