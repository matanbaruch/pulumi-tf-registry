// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ManagementMdPermissionsProfile extends pulumi.CustomResource {
    /**
     * Get an existing ManagementMdPermissionsProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagementMdPermissionsProfileState, opts?: pulumi.CustomResourceOptions): ManagementMdPermissionsProfile {
        return new ManagementMdPermissionsProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkpoint:index/managementMdPermissionsProfile:ManagementMdPermissionsProfile';

    /**
     * Returns true if the given object is an instance of ManagementMdPermissionsProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementMdPermissionsProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementMdPermissionsProfile.__pulumiType;
    }

    /**
     * Permission to read / edit the Cloud Management Extension (CME) configuration.
     */
    public readonly cmeOperations!: pulumi.Output<string | undefined>;
    /**
     * Color of the object. Should be one of existing colors.
     */
    public readonly color!: pulumi.Output<string | undefined>;
    /**
     * Comments string.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * Name or UID of the required default profile for all global domains.
     */
    public readonly defaultProfileGlobalDomains!: pulumi.Output<string | undefined>;
    /**
     * Name or UID of the required default profile for all local domains.
     */
    public readonly defaultProfileLocalDomains!: pulumi.Output<string | undefined>;
    /**
     * Indicates which domains to process the commands on. It cannot be used with the details-level full, must be run from the
     * System Domain only and with ignore-warnings true. Valid values are: CURRENT_DOMAIN, ALL_DOMAINS_ON_THIS_SERVER.
     */
    public readonly domainsToProcesses!: pulumi.Output<string[] | undefined>;
    /**
     * Enable the option to specify a default profile for all global domains.
     */
    public readonly enableDefaultProfileForGlobalDomains!: pulumi.Output<boolean | undefined>;
    /**
     * Enable the option to specify a default profile for all local domains.
     */
    public readonly enableDefaultProfileForLocalDomains!: pulumi.Output<boolean | undefined>;
    /**
     * Lets the administrator select Enable global use for a Security Gateway shown in the MDS Gateways & Servers view.<br>Only
     * a 'Manager' permission-level profile can edit this permission.
     */
    public readonly globalVpnManagement!: pulumi.Output<boolean | undefined>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    public readonly ignoreErrors!: pulumi.Output<boolean | undefined>;
    /**
     * Apply changes ignoring warnings.
     */
    public readonly ignoreWarnings!: pulumi.Output<boolean | undefined>;
    /**
     * Create and manage Multi-Domain Security Management administrators with the same or lower permission level. For example,
     * a Domain manager cannot create Superusers or global managers.<br>Only a 'Manager' permission-level profile can edit this
     * permission.
     */
    public readonly manageAdmins!: pulumi.Output<boolean | undefined>;
    /**
     * Controls the ability to create, edit and delete global assignment and not the ability to reassign, which is set
     * according to the specific Domain's permission profile.
     */
    public readonly manageGlobalAssignments!: pulumi.Output<boolean | undefined>;
    /**
     * Connect/disconnect Domain sessions, publish changes, and delete other administrator sessions.<br>Only a 'Manager'
     * permission-level profile can edit this permission.
     */
    public readonly manageSessions!: pulumi.Output<boolean | undefined>;
    /**
     * Permission to log in to the Security Management Server and run API commands using these tools: mgmt_cli (Linux and
     * Windows binaries), Gaia CLI (clish) and Web Services (REST). Useful if you want to prevent administrators from running
     * automatic scripts on the Management.<br>Note: This permission is not required to run commands from within the API
     * terminal in SmartConsole.
     */
    public readonly managementApiLogin!: pulumi.Output<boolean | undefined>;
    /**
     * Create and manage Multi-Domain Servers and Multi-Domain Log Servers.<br>Only a "Super User" permission-level profile can
     * select this option.
     */
    public readonly mdsProvisioning!: pulumi.Output<boolean | undefined>;
    /**
     * Object name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The level of the Multi Domain Permissions Profile.<br>The level cannot be changed after creation.
     */
    public readonly permissionLevel!: pulumi.Output<string | undefined>;
    /**
     * Collection of tag identifiers.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Lets an administrator with no global objects permissions view the global objects in the domain. This option is required
     * for valid domain management.
     */
    public readonly viewGlobalObjectsInDomain!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ManagementMdPermissionsProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ManagementMdPermissionsProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagementMdPermissionsProfileArgs | ManagementMdPermissionsProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagementMdPermissionsProfileState | undefined;
            resourceInputs["cmeOperations"] = state ? state.cmeOperations : undefined;
            resourceInputs["color"] = state ? state.color : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["defaultProfileGlobalDomains"] = state ? state.defaultProfileGlobalDomains : undefined;
            resourceInputs["defaultProfileLocalDomains"] = state ? state.defaultProfileLocalDomains : undefined;
            resourceInputs["domainsToProcesses"] = state ? state.domainsToProcesses : undefined;
            resourceInputs["enableDefaultProfileForGlobalDomains"] = state ? state.enableDefaultProfileForGlobalDomains : undefined;
            resourceInputs["enableDefaultProfileForLocalDomains"] = state ? state.enableDefaultProfileForLocalDomains : undefined;
            resourceInputs["globalVpnManagement"] = state ? state.globalVpnManagement : undefined;
            resourceInputs["ignoreErrors"] = state ? state.ignoreErrors : undefined;
            resourceInputs["ignoreWarnings"] = state ? state.ignoreWarnings : undefined;
            resourceInputs["manageAdmins"] = state ? state.manageAdmins : undefined;
            resourceInputs["manageGlobalAssignments"] = state ? state.manageGlobalAssignments : undefined;
            resourceInputs["manageSessions"] = state ? state.manageSessions : undefined;
            resourceInputs["managementApiLogin"] = state ? state.managementApiLogin : undefined;
            resourceInputs["mdsProvisioning"] = state ? state.mdsProvisioning : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["permissionLevel"] = state ? state.permissionLevel : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["viewGlobalObjectsInDomain"] = state ? state.viewGlobalObjectsInDomain : undefined;
        } else {
            const args = argsOrState as ManagementMdPermissionsProfileArgs | undefined;
            resourceInputs["cmeOperations"] = args ? args.cmeOperations : undefined;
            resourceInputs["color"] = args ? args.color : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["defaultProfileGlobalDomains"] = args ? args.defaultProfileGlobalDomains : undefined;
            resourceInputs["defaultProfileLocalDomains"] = args ? args.defaultProfileLocalDomains : undefined;
            resourceInputs["domainsToProcesses"] = args ? args.domainsToProcesses : undefined;
            resourceInputs["enableDefaultProfileForGlobalDomains"] = args ? args.enableDefaultProfileForGlobalDomains : undefined;
            resourceInputs["enableDefaultProfileForLocalDomains"] = args ? args.enableDefaultProfileForLocalDomains : undefined;
            resourceInputs["globalVpnManagement"] = args ? args.globalVpnManagement : undefined;
            resourceInputs["ignoreErrors"] = args ? args.ignoreErrors : undefined;
            resourceInputs["ignoreWarnings"] = args ? args.ignoreWarnings : undefined;
            resourceInputs["manageAdmins"] = args ? args.manageAdmins : undefined;
            resourceInputs["manageGlobalAssignments"] = args ? args.manageGlobalAssignments : undefined;
            resourceInputs["manageSessions"] = args ? args.manageSessions : undefined;
            resourceInputs["managementApiLogin"] = args ? args.managementApiLogin : undefined;
            resourceInputs["mdsProvisioning"] = args ? args.mdsProvisioning : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["permissionLevel"] = args ? args.permissionLevel : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["viewGlobalObjectsInDomain"] = args ? args.viewGlobalObjectsInDomain : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagementMdPermissionsProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagementMdPermissionsProfile resources.
 */
export interface ManagementMdPermissionsProfileState {
    /**
     * Permission to read / edit the Cloud Management Extension (CME) configuration.
     */
    cmeOperations?: pulumi.Input<string>;
    /**
     * Color of the object. Should be one of existing colors.
     */
    color?: pulumi.Input<string>;
    /**
     * Comments string.
     */
    comments?: pulumi.Input<string>;
    /**
     * Name or UID of the required default profile for all global domains.
     */
    defaultProfileGlobalDomains?: pulumi.Input<string>;
    /**
     * Name or UID of the required default profile for all local domains.
     */
    defaultProfileLocalDomains?: pulumi.Input<string>;
    /**
     * Indicates which domains to process the commands on. It cannot be used with the details-level full, must be run from the
     * System Domain only and with ignore-warnings true. Valid values are: CURRENT_DOMAIN, ALL_DOMAINS_ON_THIS_SERVER.
     */
    domainsToProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable the option to specify a default profile for all global domains.
     */
    enableDefaultProfileForGlobalDomains?: pulumi.Input<boolean>;
    /**
     * Enable the option to specify a default profile for all local domains.
     */
    enableDefaultProfileForLocalDomains?: pulumi.Input<boolean>;
    /**
     * Lets the administrator select Enable global use for a Security Gateway shown in the MDS Gateways & Servers view.<br>Only
     * a 'Manager' permission-level profile can edit this permission.
     */
    globalVpnManagement?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    ignoreErrors?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring warnings.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * Create and manage Multi-Domain Security Management administrators with the same or lower permission level. For example,
     * a Domain manager cannot create Superusers or global managers.<br>Only a 'Manager' permission-level profile can edit this
     * permission.
     */
    manageAdmins?: pulumi.Input<boolean>;
    /**
     * Controls the ability to create, edit and delete global assignment and not the ability to reassign, which is set
     * according to the specific Domain's permission profile.
     */
    manageGlobalAssignments?: pulumi.Input<boolean>;
    /**
     * Connect/disconnect Domain sessions, publish changes, and delete other administrator sessions.<br>Only a 'Manager'
     * permission-level profile can edit this permission.
     */
    manageSessions?: pulumi.Input<boolean>;
    /**
     * Permission to log in to the Security Management Server and run API commands using these tools: mgmt_cli (Linux and
     * Windows binaries), Gaia CLI (clish) and Web Services (REST). Useful if you want to prevent administrators from running
     * automatic scripts on the Management.<br>Note: This permission is not required to run commands from within the API
     * terminal in SmartConsole.
     */
    managementApiLogin?: pulumi.Input<boolean>;
    /**
     * Create and manage Multi-Domain Servers and Multi-Domain Log Servers.<br>Only a "Super User" permission-level profile can
     * select this option.
     */
    mdsProvisioning?: pulumi.Input<boolean>;
    /**
     * Object name.
     */
    name?: pulumi.Input<string>;
    /**
     * The level of the Multi Domain Permissions Profile.<br>The level cannot be changed after creation.
     */
    permissionLevel?: pulumi.Input<string>;
    /**
     * Collection of tag identifiers.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Lets an administrator with no global objects permissions view the global objects in the domain. This option is required
     * for valid domain management.
     */
    viewGlobalObjectsInDomain?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ManagementMdPermissionsProfile resource.
 */
export interface ManagementMdPermissionsProfileArgs {
    /**
     * Permission to read / edit the Cloud Management Extension (CME) configuration.
     */
    cmeOperations?: pulumi.Input<string>;
    /**
     * Color of the object. Should be one of existing colors.
     */
    color?: pulumi.Input<string>;
    /**
     * Comments string.
     */
    comments?: pulumi.Input<string>;
    /**
     * Name or UID of the required default profile for all global domains.
     */
    defaultProfileGlobalDomains?: pulumi.Input<string>;
    /**
     * Name or UID of the required default profile for all local domains.
     */
    defaultProfileLocalDomains?: pulumi.Input<string>;
    /**
     * Indicates which domains to process the commands on. It cannot be used with the details-level full, must be run from the
     * System Domain only and with ignore-warnings true. Valid values are: CURRENT_DOMAIN, ALL_DOMAINS_ON_THIS_SERVER.
     */
    domainsToProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable the option to specify a default profile for all global domains.
     */
    enableDefaultProfileForGlobalDomains?: pulumi.Input<boolean>;
    /**
     * Enable the option to specify a default profile for all local domains.
     */
    enableDefaultProfileForLocalDomains?: pulumi.Input<boolean>;
    /**
     * Lets the administrator select Enable global use for a Security Gateway shown in the MDS Gateways & Servers view.<br>Only
     * a 'Manager' permission-level profile can edit this permission.
     */
    globalVpnManagement?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    ignoreErrors?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring warnings.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * Create and manage Multi-Domain Security Management administrators with the same or lower permission level. For example,
     * a Domain manager cannot create Superusers or global managers.<br>Only a 'Manager' permission-level profile can edit this
     * permission.
     */
    manageAdmins?: pulumi.Input<boolean>;
    /**
     * Controls the ability to create, edit and delete global assignment and not the ability to reassign, which is set
     * according to the specific Domain's permission profile.
     */
    manageGlobalAssignments?: pulumi.Input<boolean>;
    /**
     * Connect/disconnect Domain sessions, publish changes, and delete other administrator sessions.<br>Only a 'Manager'
     * permission-level profile can edit this permission.
     */
    manageSessions?: pulumi.Input<boolean>;
    /**
     * Permission to log in to the Security Management Server and run API commands using these tools: mgmt_cli (Linux and
     * Windows binaries), Gaia CLI (clish) and Web Services (REST). Useful if you want to prevent administrators from running
     * automatic scripts on the Management.<br>Note: This permission is not required to run commands from within the API
     * terminal in SmartConsole.
     */
    managementApiLogin?: pulumi.Input<boolean>;
    /**
     * Create and manage Multi-Domain Servers and Multi-Domain Log Servers.<br>Only a "Super User" permission-level profile can
     * select this option.
     */
    mdsProvisioning?: pulumi.Input<boolean>;
    /**
     * Object name.
     */
    name?: pulumi.Input<string>;
    /**
     * The level of the Multi Domain Permissions Profile.<br>The level cannot be changed after creation.
     */
    permissionLevel?: pulumi.Input<string>;
    /**
     * Collection of tag identifiers.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Lets an administrator with no global objects permissions view the global objects in the domain. This option is required
     * for valid domain management.
     */
    viewGlobalObjectsInDomain?: pulumi.Input<boolean>;
}
