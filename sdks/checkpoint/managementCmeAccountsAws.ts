// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ManagementCmeAccountsAws extends pulumi.CustomResource {
    /**
     * Get an existing ManagementCmeAccountsAws resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagementCmeAccountsAwsState, opts?: pulumi.CustomResourceOptions): ManagementCmeAccountsAws {
        return new ManagementCmeAccountsAws(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkpoint:index/managementCmeAccountsAws:ManagementCmeAccountsAws';

    /**
     * Returns true if the given object is an instance of ManagementCmeAccountsAws.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementCmeAccountsAws {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementCmeAccountsAws.__pulumiType;
    }

    /**
     * AWS access key.
     */
    public readonly accessKey!: pulumi.Output<string | undefined>;
    /**
     * AWS communities.
     */
    public readonly communities!: pulumi.Output<string[] | undefined>;
    /**
     * The credentials file.
     */
    public readonly credentialsFile!: pulumi.Output<string | undefined>;
    /**
     * The number of CME cycles to wait when the cloud provider does not return a GW until its deletion.
     */
    public readonly deletionTolerance!: pulumi.Output<number | undefined>;
    /**
     * The account's domain name in MDS environment.
     */
    public readonly domain!: pulumi.Output<string | undefined>;
    /**
     * A list of GW configurations attached to the account
     */
    public /*out*/ readonly gwConfigurations!: pulumi.Output<string[]>;
    /**
     * Unique account name for identification.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The platform of the account.
     */
    public /*out*/ readonly platform!: pulumi.Output<string>;
    /**
     * Comma-separated list of AWS regions, in which the gateways are being deployed.
     */
    public readonly regions!: pulumi.Output<string[]>;
    /**
     * Set true in order to scan gateways with AWS TGW.
     */
    public readonly scanGateways!: pulumi.Output<boolean | undefined>;
    /**
     * Set true in order to scan load balancers access and NAT rules with AWS TGW.
     */
    public readonly scanLoadBalancers!: pulumi.Output<boolean | undefined>;
    /**
     * Set true in order to scan subnets with AWS GWLB.
     */
    public readonly scanSubnets!: pulumi.Output<boolean | undefined>;
    /**
     * Set true in order to scan vpn with AWS TGW.
     */
    public readonly scanVpn!: pulumi.Output<boolean | undefined>;
    /**
     * AWS secret key.
     */
    public readonly secretKey!: pulumi.Output<string | undefined>;
    /**
     * AWS sts external id, must exist with sts role.
     */
    public readonly stsExternalId!: pulumi.Output<string | undefined>;
    /**
     * AWS sts role.
     */
    public readonly stsRole!: pulumi.Output<string | undefined>;
    /**
     * AWS sub accounts.
     */
    public readonly subAccounts!: pulumi.Output<outputs.ManagementCmeAccountsAwsSubAccount[] | undefined>;

    /**
     * Create a ManagementCmeAccountsAws resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagementCmeAccountsAwsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagementCmeAccountsAwsArgs | ManagementCmeAccountsAwsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagementCmeAccountsAwsState | undefined;
            resourceInputs["accessKey"] = state ? state.accessKey : undefined;
            resourceInputs["communities"] = state ? state.communities : undefined;
            resourceInputs["credentialsFile"] = state ? state.credentialsFile : undefined;
            resourceInputs["deletionTolerance"] = state ? state.deletionTolerance : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["gwConfigurations"] = state ? state.gwConfigurations : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["platform"] = state ? state.platform : undefined;
            resourceInputs["regions"] = state ? state.regions : undefined;
            resourceInputs["scanGateways"] = state ? state.scanGateways : undefined;
            resourceInputs["scanLoadBalancers"] = state ? state.scanLoadBalancers : undefined;
            resourceInputs["scanSubnets"] = state ? state.scanSubnets : undefined;
            resourceInputs["scanVpn"] = state ? state.scanVpn : undefined;
            resourceInputs["secretKey"] = state ? state.secretKey : undefined;
            resourceInputs["stsExternalId"] = state ? state.stsExternalId : undefined;
            resourceInputs["stsRole"] = state ? state.stsRole : undefined;
            resourceInputs["subAccounts"] = state ? state.subAccounts : undefined;
        } else {
            const args = argsOrState as ManagementCmeAccountsAwsArgs | undefined;
            if ((!args || args.regions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regions'");
            }
            resourceInputs["accessKey"] = args ? args.accessKey : undefined;
            resourceInputs["communities"] = args ? args.communities : undefined;
            resourceInputs["credentialsFile"] = args ? args.credentialsFile : undefined;
            resourceInputs["deletionTolerance"] = args ? args.deletionTolerance : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["regions"] = args ? args.regions : undefined;
            resourceInputs["scanGateways"] = args ? args.scanGateways : undefined;
            resourceInputs["scanLoadBalancers"] = args ? args.scanLoadBalancers : undefined;
            resourceInputs["scanSubnets"] = args ? args.scanSubnets : undefined;
            resourceInputs["scanVpn"] = args ? args.scanVpn : undefined;
            resourceInputs["secretKey"] = args?.secretKey ? pulumi.secret(args.secretKey) : undefined;
            resourceInputs["stsExternalId"] = args ? args.stsExternalId : undefined;
            resourceInputs["stsRole"] = args ? args.stsRole : undefined;
            resourceInputs["subAccounts"] = args ? args.subAccounts : undefined;
            resourceInputs["gwConfigurations"] = undefined /*out*/;
            resourceInputs["platform"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secretKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ManagementCmeAccountsAws.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagementCmeAccountsAws resources.
 */
export interface ManagementCmeAccountsAwsState {
    /**
     * AWS access key.
     */
    accessKey?: pulumi.Input<string>;
    /**
     * AWS communities.
     */
    communities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The credentials file.
     */
    credentialsFile?: pulumi.Input<string>;
    /**
     * The number of CME cycles to wait when the cloud provider does not return a GW until its deletion.
     */
    deletionTolerance?: pulumi.Input<number>;
    /**
     * The account's domain name in MDS environment.
     */
    domain?: pulumi.Input<string>;
    /**
     * A list of GW configurations attached to the account
     */
    gwConfigurations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unique account name for identification.
     */
    name?: pulumi.Input<string>;
    /**
     * The platform of the account.
     */
    platform?: pulumi.Input<string>;
    /**
     * Comma-separated list of AWS regions, in which the gateways are being deployed.
     */
    regions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set true in order to scan gateways with AWS TGW.
     */
    scanGateways?: pulumi.Input<boolean>;
    /**
     * Set true in order to scan load balancers access and NAT rules with AWS TGW.
     */
    scanLoadBalancers?: pulumi.Input<boolean>;
    /**
     * Set true in order to scan subnets with AWS GWLB.
     */
    scanSubnets?: pulumi.Input<boolean>;
    /**
     * Set true in order to scan vpn with AWS TGW.
     */
    scanVpn?: pulumi.Input<boolean>;
    /**
     * AWS secret key.
     */
    secretKey?: pulumi.Input<string>;
    /**
     * AWS sts external id, must exist with sts role.
     */
    stsExternalId?: pulumi.Input<string>;
    /**
     * AWS sts role.
     */
    stsRole?: pulumi.Input<string>;
    /**
     * AWS sub accounts.
     */
    subAccounts?: pulumi.Input<pulumi.Input<inputs.ManagementCmeAccountsAwsSubAccount>[]>;
}

/**
 * The set of arguments for constructing a ManagementCmeAccountsAws resource.
 */
export interface ManagementCmeAccountsAwsArgs {
    /**
     * AWS access key.
     */
    accessKey?: pulumi.Input<string>;
    /**
     * AWS communities.
     */
    communities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The credentials file.
     */
    credentialsFile?: pulumi.Input<string>;
    /**
     * The number of CME cycles to wait when the cloud provider does not return a GW until its deletion.
     */
    deletionTolerance?: pulumi.Input<number>;
    /**
     * The account's domain name in MDS environment.
     */
    domain?: pulumi.Input<string>;
    /**
     * Unique account name for identification.
     */
    name?: pulumi.Input<string>;
    /**
     * Comma-separated list of AWS regions, in which the gateways are being deployed.
     */
    regions: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set true in order to scan gateways with AWS TGW.
     */
    scanGateways?: pulumi.Input<boolean>;
    /**
     * Set true in order to scan load balancers access and NAT rules with AWS TGW.
     */
    scanLoadBalancers?: pulumi.Input<boolean>;
    /**
     * Set true in order to scan subnets with AWS GWLB.
     */
    scanSubnets?: pulumi.Input<boolean>;
    /**
     * Set true in order to scan vpn with AWS TGW.
     */
    scanVpn?: pulumi.Input<boolean>;
    /**
     * AWS secret key.
     */
    secretKey?: pulumi.Input<string>;
    /**
     * AWS sts external id, must exist with sts role.
     */
    stsExternalId?: pulumi.Input<string>;
    /**
     * AWS sts role.
     */
    stsRole?: pulumi.Input<string>;
    /**
     * AWS sub accounts.
     */
    subAccounts?: pulumi.Input<pulumi.Input<inputs.ManagementCmeAccountsAwsSubAccount>[]>;
}
