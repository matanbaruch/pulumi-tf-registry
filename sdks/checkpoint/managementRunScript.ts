// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ManagementRunScript extends pulumi.CustomResource {
    /**
     * Get an existing ManagementRunScript resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagementRunScriptState, opts?: pulumi.CustomResourceOptions): ManagementRunScript {
        return new ManagementRunScript(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkpoint:index/managementRunScript:ManagementRunScript';

    /**
     * Returns true if the given object is an instance of ManagementRunScript.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementRunScript {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementRunScript.__pulumiType;
    }

    /**
     * Script arguments.
     */
    public readonly args!: pulumi.Output<string | undefined>;
    /**
     * Comments string.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * Script body.
     */
    public readonly script!: pulumi.Output<string>;
    /**
     * Script name.
     */
    public readonly scriptName!: pulumi.Output<string>;
    /**
     * On what targets to execute this command. Targets may be identified by their name, or object unique identifier.
     */
    public readonly targets!: pulumi.Output<string[]>;
    /**
     * Command asynchronous task unique identifiers
     */
    public /*out*/ readonly tasks!: pulumi.Output<string[]>;

    /**
     * Create a ManagementRunScript resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagementRunScriptArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagementRunScriptArgs | ManagementRunScriptState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagementRunScriptState | undefined;
            resourceInputs["args"] = state ? state.args : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["script"] = state ? state.script : undefined;
            resourceInputs["scriptName"] = state ? state.scriptName : undefined;
            resourceInputs["targets"] = state ? state.targets : undefined;
            resourceInputs["tasks"] = state ? state.tasks : undefined;
        } else {
            const args = argsOrState as ManagementRunScriptArgs | undefined;
            if ((!args || args.script === undefined) && !opts.urn) {
                throw new Error("Missing required property 'script'");
            }
            if ((!args || args.scriptName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scriptName'");
            }
            if ((!args || args.targets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targets'");
            }
            resourceInputs["args"] = args ? args.args : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["script"] = args ? args.script : undefined;
            resourceInputs["scriptName"] = args ? args.scriptName : undefined;
            resourceInputs["targets"] = args ? args.targets : undefined;
            resourceInputs["tasks"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagementRunScript.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagementRunScript resources.
 */
export interface ManagementRunScriptState {
    /**
     * Script arguments.
     */
    args?: pulumi.Input<string>;
    /**
     * Comments string.
     */
    comments?: pulumi.Input<string>;
    /**
     * Script body.
     */
    script?: pulumi.Input<string>;
    /**
     * Script name.
     */
    scriptName?: pulumi.Input<string>;
    /**
     * On what targets to execute this command. Targets may be identified by their name, or object unique identifier.
     */
    targets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Command asynchronous task unique identifiers
     */
    tasks?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ManagementRunScript resource.
 */
export interface ManagementRunScriptArgs {
    /**
     * Script arguments.
     */
    args?: pulumi.Input<string>;
    /**
     * Comments string.
     */
    comments?: pulumi.Input<string>;
    /**
     * Script body.
     */
    script: pulumi.Input<string>;
    /**
     * Script name.
     */
    scriptName: pulumi.Input<string>;
    /**
     * On what targets to execute this command. Targets may be identified by their name, or object unique identifier.
     */
    targets: pulumi.Input<pulumi.Input<string>[]>;
}
