// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ManagementSimpleGateway extends pulumi.CustomResource {
    /**
     * Get an existing ManagementSimpleGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagementSimpleGatewayState, opts?: pulumi.CustomResourceOptions): ManagementSimpleGateway {
        return new ManagementSimpleGateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkpoint:index/managementSimpleGateway:ManagementSimpleGateway';

    /**
     * Returns true if the given object is an instance of ManagementSimpleGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementSimpleGateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementSimpleGateway.__pulumiType;
    }

    /**
     * N/A
     */
    public readonly advancedSettings!: pulumi.Output<outputs.ManagementSimpleGatewayAdvancedSettings | undefined>;
    /**
     * Anti-Bot blade enabled.
     */
    public readonly antiBot!: pulumi.Output<boolean | undefined>;
    /**
     * Anti-Virus blade enabled.
     */
    public readonly antiVirus!: pulumi.Output<boolean | undefined>;
    /**
     * Application Control blade enabled.
     */
    public readonly applicationControl!: pulumi.Output<boolean | undefined>;
    /**
     * Gateway Application Control and URL filtering settings.
     */
    public readonly applicationControlAndUrlFilteringSettings!: pulumi.Output<outputs.ManagementSimpleGatewayApplicationControlAndUrlFilteringSettings | undefined>;
    /**
     * Color of the object. Should be one of existing colors.
     */
    public readonly color!: pulumi.Output<string | undefined>;
    /**
     * Comments string.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * Content Awareness blade enabled.
     */
    public readonly contentAwareness!: pulumi.Output<boolean | undefined>;
    /**
     * Dynamic IP address.
     */
    public /*out*/ readonly dynamicIp!: pulumi.Output<boolean>;
    /**
     * Enable HTTPS Inspection after defining an outbound inspection certificate. <br>To define the outbound certificate use
     * outbound inspection certificate API.
     */
    public readonly enableHttpsInspection!: pulumi.Output<boolean | undefined>;
    /**
     * Security management server(s) to fetch the policy from.
     */
    public readonly fetchPolicies!: pulumi.Output<string[] | undefined>;
    /**
     * Firewall blade enabled.
     */
    public readonly firewall!: pulumi.Output<boolean | undefined>;
    /**
     * Firewall settings.
     */
    public readonly firewallSettings!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Gateway platform hardware type.
     */
    public /*out*/ readonly hardware!: pulumi.Output<string>;
    /**
     * Hit count tracks the number of connections each rule matches.
     */
    public readonly hitCount!: pulumi.Output<boolean | undefined>;
    /**
     * HTTPS inspection.
     */
    public readonly httpsInspection!: pulumi.Output<outputs.ManagementSimpleGatewayHttpsInspection | undefined>;
    /**
     * ICAP Server enabled.
     */
    public readonly icapServer!: pulumi.Output<boolean | undefined>;
    /**
     * Identity awareness blade enabled.
     */
    public readonly identityAwareness!: pulumi.Output<boolean | undefined>;
    /**
     * Gateway Identity Awareness settings.
     */
    public readonly identityAwarenessSettings!: pulumi.Output<outputs.ManagementSimpleGatewayIdentityAwarenessSettings | undefined>;
    /**
     * Apply changes ignoring warnings.
     */
    public readonly ignoreWarnings!: pulumi.Output<boolean | undefined>;
    /**
     * Network interfaces.
     */
    public readonly interfaces!: pulumi.Output<outputs.ManagementSimpleGatewayInterface[] | undefined>;
    /**
     * Intrusion Prevention System blade enabled.
     */
    public readonly ips!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies whether the IPS will be downloaded from the Management or directly to the Gateway.
     */
    public readonly ipsUpdatePolicy!: pulumi.Output<string | undefined>;
    /**
     * IPv4 address.
     */
    public readonly ipv4Address!: pulumi.Output<string | undefined>;
    /**
     * IPv6 address.
     */
    public readonly ipv6Address!: pulumi.Output<string | undefined>;
    /**
     * Logs settings.
     */
    public readonly logsSettings!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Object name. Should be unique in the domain.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Hide internal networks behind the Gateway's external IP.
     */
    public readonly natHideInternalInterfaces!: pulumi.Output<boolean | undefined>;
    /**
     * NAT settings.
     */
    public readonly natSettings!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * SIC one time password.
     */
    public readonly oneTimePassword!: pulumi.Output<string | undefined>;
    /**
     * OS name.
     */
    public readonly osName!: pulumi.Output<string | undefined>;
    /**
     * Platform portal settings.
     */
    public readonly platformPortalSettings!: pulumi.Output<outputs.ManagementSimpleGatewayPlatformPortalSettings | undefined>;
    /**
     * Proxy Server for Gateway.
     */
    public readonly proxySettings!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * QoS.
     */
    public readonly qos!: pulumi.Output<boolean | undefined>;
    /**
     * Save logs locally.
     */
    public readonly saveLogsLocally!: pulumi.Output<boolean | undefined>;
    /**
     * Server(s) to send alerts to.
     */
    public readonly sendAlertsToServers!: pulumi.Output<string[] | undefined>;
    /**
     * Backup server(s) to send logs to.
     */
    public readonly sendLogsToBackupServers!: pulumi.Output<string[] | undefined>;
    /**
     * Server(s) to send logs to.
     */
    public readonly sendLogsToServers!: pulumi.Output<string[] | undefined>;
    /**
     * Secure Internal Communication name.
     */
    public /*out*/ readonly sicName!: pulumi.Output<string>;
    /**
     * Secure Internal Communication state.
     */
    public /*out*/ readonly sicState!: pulumi.Output<string>;
    /**
     * Collection of tag identifiers.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Threat Emulation blade enabled.
     */
    public readonly threatEmulation!: pulumi.Output<boolean | undefined>;
    /**
     * Threat Extraction blade enabled.
     */
    public readonly threatExtraction!: pulumi.Output<boolean | undefined>;
    /**
     * URL Filtering blade enabled.
     */
    public readonly urlFiltering!: pulumi.Output<boolean | undefined>;
    /**
     * UserCheck portal settings.
     */
    public readonly usercheckPortalSettings!: pulumi.Output<outputs.ManagementSimpleGatewayUsercheckPortalSettings | undefined>;
    /**
     * Gateway platform version.
     */
    public readonly version!: pulumi.Output<string | undefined>;
    /**
     * VPN blade enabled.
     */
    public readonly vpn!: pulumi.Output<boolean | undefined>;
    /**
     * Gateway VPN settings.
     */
    public readonly vpnSettings!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Zero Phishing blade enabled.
     */
    public readonly zeroPhishing!: pulumi.Output<boolean | undefined>;
    /**
     * Zero Phishing gateway FQDN.
     */
    public readonly zeroPhishingFqdn!: pulumi.Output<string | undefined>;

    /**
     * Create a ManagementSimpleGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ManagementSimpleGatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagementSimpleGatewayArgs | ManagementSimpleGatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagementSimpleGatewayState | undefined;
            resourceInputs["advancedSettings"] = state ? state.advancedSettings : undefined;
            resourceInputs["antiBot"] = state ? state.antiBot : undefined;
            resourceInputs["antiVirus"] = state ? state.antiVirus : undefined;
            resourceInputs["applicationControl"] = state ? state.applicationControl : undefined;
            resourceInputs["applicationControlAndUrlFilteringSettings"] = state ? state.applicationControlAndUrlFilteringSettings : undefined;
            resourceInputs["color"] = state ? state.color : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["contentAwareness"] = state ? state.contentAwareness : undefined;
            resourceInputs["dynamicIp"] = state ? state.dynamicIp : undefined;
            resourceInputs["enableHttpsInspection"] = state ? state.enableHttpsInspection : undefined;
            resourceInputs["fetchPolicies"] = state ? state.fetchPolicies : undefined;
            resourceInputs["firewall"] = state ? state.firewall : undefined;
            resourceInputs["firewallSettings"] = state ? state.firewallSettings : undefined;
            resourceInputs["hardware"] = state ? state.hardware : undefined;
            resourceInputs["hitCount"] = state ? state.hitCount : undefined;
            resourceInputs["httpsInspection"] = state ? state.httpsInspection : undefined;
            resourceInputs["icapServer"] = state ? state.icapServer : undefined;
            resourceInputs["identityAwareness"] = state ? state.identityAwareness : undefined;
            resourceInputs["identityAwarenessSettings"] = state ? state.identityAwarenessSettings : undefined;
            resourceInputs["ignoreWarnings"] = state ? state.ignoreWarnings : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["ips"] = state ? state.ips : undefined;
            resourceInputs["ipsUpdatePolicy"] = state ? state.ipsUpdatePolicy : undefined;
            resourceInputs["ipv4Address"] = state ? state.ipv4Address : undefined;
            resourceInputs["ipv6Address"] = state ? state.ipv6Address : undefined;
            resourceInputs["logsSettings"] = state ? state.logsSettings : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["natHideInternalInterfaces"] = state ? state.natHideInternalInterfaces : undefined;
            resourceInputs["natSettings"] = state ? state.natSettings : undefined;
            resourceInputs["oneTimePassword"] = state ? state.oneTimePassword : undefined;
            resourceInputs["osName"] = state ? state.osName : undefined;
            resourceInputs["platformPortalSettings"] = state ? state.platformPortalSettings : undefined;
            resourceInputs["proxySettings"] = state ? state.proxySettings : undefined;
            resourceInputs["qos"] = state ? state.qos : undefined;
            resourceInputs["saveLogsLocally"] = state ? state.saveLogsLocally : undefined;
            resourceInputs["sendAlertsToServers"] = state ? state.sendAlertsToServers : undefined;
            resourceInputs["sendLogsToBackupServers"] = state ? state.sendLogsToBackupServers : undefined;
            resourceInputs["sendLogsToServers"] = state ? state.sendLogsToServers : undefined;
            resourceInputs["sicName"] = state ? state.sicName : undefined;
            resourceInputs["sicState"] = state ? state.sicState : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["threatEmulation"] = state ? state.threatEmulation : undefined;
            resourceInputs["threatExtraction"] = state ? state.threatExtraction : undefined;
            resourceInputs["urlFiltering"] = state ? state.urlFiltering : undefined;
            resourceInputs["usercheckPortalSettings"] = state ? state.usercheckPortalSettings : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["vpn"] = state ? state.vpn : undefined;
            resourceInputs["vpnSettings"] = state ? state.vpnSettings : undefined;
            resourceInputs["zeroPhishing"] = state ? state.zeroPhishing : undefined;
            resourceInputs["zeroPhishingFqdn"] = state ? state.zeroPhishingFqdn : undefined;
        } else {
            const args = argsOrState as ManagementSimpleGatewayArgs | undefined;
            resourceInputs["advancedSettings"] = args ? args.advancedSettings : undefined;
            resourceInputs["antiBot"] = args ? args.antiBot : undefined;
            resourceInputs["antiVirus"] = args ? args.antiVirus : undefined;
            resourceInputs["applicationControl"] = args ? args.applicationControl : undefined;
            resourceInputs["applicationControlAndUrlFilteringSettings"] = args ? args.applicationControlAndUrlFilteringSettings : undefined;
            resourceInputs["color"] = args ? args.color : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["contentAwareness"] = args ? args.contentAwareness : undefined;
            resourceInputs["enableHttpsInspection"] = args ? args.enableHttpsInspection : undefined;
            resourceInputs["fetchPolicies"] = args ? args.fetchPolicies : undefined;
            resourceInputs["firewall"] = args ? args.firewall : undefined;
            resourceInputs["firewallSettings"] = args ? args.firewallSettings : undefined;
            resourceInputs["hitCount"] = args ? args.hitCount : undefined;
            resourceInputs["httpsInspection"] = args ? args.httpsInspection : undefined;
            resourceInputs["icapServer"] = args ? args.icapServer : undefined;
            resourceInputs["identityAwareness"] = args ? args.identityAwareness : undefined;
            resourceInputs["identityAwarenessSettings"] = args ? args.identityAwarenessSettings : undefined;
            resourceInputs["ignoreWarnings"] = args ? args.ignoreWarnings : undefined;
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["ips"] = args ? args.ips : undefined;
            resourceInputs["ipsUpdatePolicy"] = args ? args.ipsUpdatePolicy : undefined;
            resourceInputs["ipv4Address"] = args ? args.ipv4Address : undefined;
            resourceInputs["ipv6Address"] = args ? args.ipv6Address : undefined;
            resourceInputs["logsSettings"] = args ? args.logsSettings : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["natHideInternalInterfaces"] = args ? args.natHideInternalInterfaces : undefined;
            resourceInputs["natSettings"] = args ? args.natSettings : undefined;
            resourceInputs["oneTimePassword"] = args?.oneTimePassword ? pulumi.secret(args.oneTimePassword) : undefined;
            resourceInputs["osName"] = args ? args.osName : undefined;
            resourceInputs["platformPortalSettings"] = args ? args.platformPortalSettings : undefined;
            resourceInputs["proxySettings"] = args ? args.proxySettings : undefined;
            resourceInputs["qos"] = args ? args.qos : undefined;
            resourceInputs["saveLogsLocally"] = args ? args.saveLogsLocally : undefined;
            resourceInputs["sendAlertsToServers"] = args ? args.sendAlertsToServers : undefined;
            resourceInputs["sendLogsToBackupServers"] = args ? args.sendLogsToBackupServers : undefined;
            resourceInputs["sendLogsToServers"] = args ? args.sendLogsToServers : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["threatEmulation"] = args ? args.threatEmulation : undefined;
            resourceInputs["threatExtraction"] = args ? args.threatExtraction : undefined;
            resourceInputs["urlFiltering"] = args ? args.urlFiltering : undefined;
            resourceInputs["usercheckPortalSettings"] = args ? args.usercheckPortalSettings : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["vpn"] = args ? args.vpn : undefined;
            resourceInputs["vpnSettings"] = args ? args.vpnSettings : undefined;
            resourceInputs["zeroPhishing"] = args ? args.zeroPhishing : undefined;
            resourceInputs["zeroPhishingFqdn"] = args ? args.zeroPhishingFqdn : undefined;
            resourceInputs["dynamicIp"] = undefined /*out*/;
            resourceInputs["hardware"] = undefined /*out*/;
            resourceInputs["sicName"] = undefined /*out*/;
            resourceInputs["sicState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["oneTimePassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ManagementSimpleGateway.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagementSimpleGateway resources.
 */
export interface ManagementSimpleGatewayState {
    /**
     * N/A
     */
    advancedSettings?: pulumi.Input<inputs.ManagementSimpleGatewayAdvancedSettings>;
    /**
     * Anti-Bot blade enabled.
     */
    antiBot?: pulumi.Input<boolean>;
    /**
     * Anti-Virus blade enabled.
     */
    antiVirus?: pulumi.Input<boolean>;
    /**
     * Application Control blade enabled.
     */
    applicationControl?: pulumi.Input<boolean>;
    /**
     * Gateway Application Control and URL filtering settings.
     */
    applicationControlAndUrlFilteringSettings?: pulumi.Input<inputs.ManagementSimpleGatewayApplicationControlAndUrlFilteringSettings>;
    /**
     * Color of the object. Should be one of existing colors.
     */
    color?: pulumi.Input<string>;
    /**
     * Comments string.
     */
    comments?: pulumi.Input<string>;
    /**
     * Content Awareness blade enabled.
     */
    contentAwareness?: pulumi.Input<boolean>;
    /**
     * Dynamic IP address.
     */
    dynamicIp?: pulumi.Input<boolean>;
    /**
     * Enable HTTPS Inspection after defining an outbound inspection certificate. <br>To define the outbound certificate use
     * outbound inspection certificate API.
     */
    enableHttpsInspection?: pulumi.Input<boolean>;
    /**
     * Security management server(s) to fetch the policy from.
     */
    fetchPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Firewall blade enabled.
     */
    firewall?: pulumi.Input<boolean>;
    /**
     * Firewall settings.
     */
    firewallSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Gateway platform hardware type.
     */
    hardware?: pulumi.Input<string>;
    /**
     * Hit count tracks the number of connections each rule matches.
     */
    hitCount?: pulumi.Input<boolean>;
    /**
     * HTTPS inspection.
     */
    httpsInspection?: pulumi.Input<inputs.ManagementSimpleGatewayHttpsInspection>;
    /**
     * ICAP Server enabled.
     */
    icapServer?: pulumi.Input<boolean>;
    /**
     * Identity awareness blade enabled.
     */
    identityAwareness?: pulumi.Input<boolean>;
    /**
     * Gateway Identity Awareness settings.
     */
    identityAwarenessSettings?: pulumi.Input<inputs.ManagementSimpleGatewayIdentityAwarenessSettings>;
    /**
     * Apply changes ignoring warnings.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * Network interfaces.
     */
    interfaces?: pulumi.Input<pulumi.Input<inputs.ManagementSimpleGatewayInterface>[]>;
    /**
     * Intrusion Prevention System blade enabled.
     */
    ips?: pulumi.Input<boolean>;
    /**
     * Specifies whether the IPS will be downloaded from the Management or directly to the Gateway.
     */
    ipsUpdatePolicy?: pulumi.Input<string>;
    /**
     * IPv4 address.
     */
    ipv4Address?: pulumi.Input<string>;
    /**
     * IPv6 address.
     */
    ipv6Address?: pulumi.Input<string>;
    /**
     * Logs settings.
     */
    logsSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Object name. Should be unique in the domain.
     */
    name?: pulumi.Input<string>;
    /**
     * Hide internal networks behind the Gateway's external IP.
     */
    natHideInternalInterfaces?: pulumi.Input<boolean>;
    /**
     * NAT settings.
     */
    natSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * SIC one time password.
     */
    oneTimePassword?: pulumi.Input<string>;
    /**
     * OS name.
     */
    osName?: pulumi.Input<string>;
    /**
     * Platform portal settings.
     */
    platformPortalSettings?: pulumi.Input<inputs.ManagementSimpleGatewayPlatformPortalSettings>;
    /**
     * Proxy Server for Gateway.
     */
    proxySettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * QoS.
     */
    qos?: pulumi.Input<boolean>;
    /**
     * Save logs locally.
     */
    saveLogsLocally?: pulumi.Input<boolean>;
    /**
     * Server(s) to send alerts to.
     */
    sendAlertsToServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Backup server(s) to send logs to.
     */
    sendLogsToBackupServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Server(s) to send logs to.
     */
    sendLogsToServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Secure Internal Communication name.
     */
    sicName?: pulumi.Input<string>;
    /**
     * Secure Internal Communication state.
     */
    sicState?: pulumi.Input<string>;
    /**
     * Collection of tag identifiers.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Threat Emulation blade enabled.
     */
    threatEmulation?: pulumi.Input<boolean>;
    /**
     * Threat Extraction blade enabled.
     */
    threatExtraction?: pulumi.Input<boolean>;
    /**
     * URL Filtering blade enabled.
     */
    urlFiltering?: pulumi.Input<boolean>;
    /**
     * UserCheck portal settings.
     */
    usercheckPortalSettings?: pulumi.Input<inputs.ManagementSimpleGatewayUsercheckPortalSettings>;
    /**
     * Gateway platform version.
     */
    version?: pulumi.Input<string>;
    /**
     * VPN blade enabled.
     */
    vpn?: pulumi.Input<boolean>;
    /**
     * Gateway VPN settings.
     */
    vpnSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Zero Phishing blade enabled.
     */
    zeroPhishing?: pulumi.Input<boolean>;
    /**
     * Zero Phishing gateway FQDN.
     */
    zeroPhishingFqdn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagementSimpleGateway resource.
 */
export interface ManagementSimpleGatewayArgs {
    /**
     * N/A
     */
    advancedSettings?: pulumi.Input<inputs.ManagementSimpleGatewayAdvancedSettings>;
    /**
     * Anti-Bot blade enabled.
     */
    antiBot?: pulumi.Input<boolean>;
    /**
     * Anti-Virus blade enabled.
     */
    antiVirus?: pulumi.Input<boolean>;
    /**
     * Application Control blade enabled.
     */
    applicationControl?: pulumi.Input<boolean>;
    /**
     * Gateway Application Control and URL filtering settings.
     */
    applicationControlAndUrlFilteringSettings?: pulumi.Input<inputs.ManagementSimpleGatewayApplicationControlAndUrlFilteringSettings>;
    /**
     * Color of the object. Should be one of existing colors.
     */
    color?: pulumi.Input<string>;
    /**
     * Comments string.
     */
    comments?: pulumi.Input<string>;
    /**
     * Content Awareness blade enabled.
     */
    contentAwareness?: pulumi.Input<boolean>;
    /**
     * Enable HTTPS Inspection after defining an outbound inspection certificate. <br>To define the outbound certificate use
     * outbound inspection certificate API.
     */
    enableHttpsInspection?: pulumi.Input<boolean>;
    /**
     * Security management server(s) to fetch the policy from.
     */
    fetchPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Firewall blade enabled.
     */
    firewall?: pulumi.Input<boolean>;
    /**
     * Firewall settings.
     */
    firewallSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Hit count tracks the number of connections each rule matches.
     */
    hitCount?: pulumi.Input<boolean>;
    /**
     * HTTPS inspection.
     */
    httpsInspection?: pulumi.Input<inputs.ManagementSimpleGatewayHttpsInspection>;
    /**
     * ICAP Server enabled.
     */
    icapServer?: pulumi.Input<boolean>;
    /**
     * Identity awareness blade enabled.
     */
    identityAwareness?: pulumi.Input<boolean>;
    /**
     * Gateway Identity Awareness settings.
     */
    identityAwarenessSettings?: pulumi.Input<inputs.ManagementSimpleGatewayIdentityAwarenessSettings>;
    /**
     * Apply changes ignoring warnings.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * Network interfaces.
     */
    interfaces?: pulumi.Input<pulumi.Input<inputs.ManagementSimpleGatewayInterface>[]>;
    /**
     * Intrusion Prevention System blade enabled.
     */
    ips?: pulumi.Input<boolean>;
    /**
     * Specifies whether the IPS will be downloaded from the Management or directly to the Gateway.
     */
    ipsUpdatePolicy?: pulumi.Input<string>;
    /**
     * IPv4 address.
     */
    ipv4Address?: pulumi.Input<string>;
    /**
     * IPv6 address.
     */
    ipv6Address?: pulumi.Input<string>;
    /**
     * Logs settings.
     */
    logsSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Object name. Should be unique in the domain.
     */
    name?: pulumi.Input<string>;
    /**
     * Hide internal networks behind the Gateway's external IP.
     */
    natHideInternalInterfaces?: pulumi.Input<boolean>;
    /**
     * NAT settings.
     */
    natSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * SIC one time password.
     */
    oneTimePassword?: pulumi.Input<string>;
    /**
     * OS name.
     */
    osName?: pulumi.Input<string>;
    /**
     * Platform portal settings.
     */
    platformPortalSettings?: pulumi.Input<inputs.ManagementSimpleGatewayPlatformPortalSettings>;
    /**
     * Proxy Server for Gateway.
     */
    proxySettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * QoS.
     */
    qos?: pulumi.Input<boolean>;
    /**
     * Save logs locally.
     */
    saveLogsLocally?: pulumi.Input<boolean>;
    /**
     * Server(s) to send alerts to.
     */
    sendAlertsToServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Backup server(s) to send logs to.
     */
    sendLogsToBackupServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Server(s) to send logs to.
     */
    sendLogsToServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Collection of tag identifiers.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Threat Emulation blade enabled.
     */
    threatEmulation?: pulumi.Input<boolean>;
    /**
     * Threat Extraction blade enabled.
     */
    threatExtraction?: pulumi.Input<boolean>;
    /**
     * URL Filtering blade enabled.
     */
    urlFiltering?: pulumi.Input<boolean>;
    /**
     * UserCheck portal settings.
     */
    usercheckPortalSettings?: pulumi.Input<inputs.ManagementSimpleGatewayUsercheckPortalSettings>;
    /**
     * Gateway platform version.
     */
    version?: pulumi.Input<string>;
    /**
     * VPN blade enabled.
     */
    vpn?: pulumi.Input<boolean>;
    /**
     * Gateway VPN settings.
     */
    vpnSettings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Zero Phishing blade enabled.
     */
    zeroPhishing?: pulumi.Input<boolean>;
    /**
     * Zero Phishing gateway FQDN.
     */
    zeroPhishingFqdn?: pulumi.Input<string>;
}
