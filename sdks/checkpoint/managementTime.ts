// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ManagementTime extends pulumi.CustomResource {
    /**
     * Get an existing ManagementTime resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagementTimeState, opts?: pulumi.CustomResourceOptions): ManagementTime {
        return new ManagementTime(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkpoint:index/managementTime:ManagementTime';

    /**
     * Returns true if the given object is an instance of ManagementTime.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementTime {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementTime.__pulumiType;
    }

    /**
     * Color of the object. Should be one of existing colors.
     */
    public readonly color!: pulumi.Output<string | undefined>;
    /**
     * Comments string.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * End time. Note: Each gateway may interpret this time differently according to its time zone.
     */
    public readonly end!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * End never.
     */
    public readonly endNever!: pulumi.Output<boolean | undefined>;
    /**
     * Hours recurrence. Note: Each gateway may interpret this time differently according to its time zone.
     */
    public readonly hoursRanges!: pulumi.Output<outputs.ManagementTimeHoursRange[] | undefined>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    public readonly ignoreErrors!: pulumi.Output<boolean | undefined>;
    /**
     * Apply changes ignoring warnings.
     */
    public readonly ignoreWarnings!: pulumi.Output<boolean | undefined>;
    /**
     * Object name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Days recurrence.
     */
    public readonly recurrence!: pulumi.Output<outputs.ManagementTimeRecurrence | undefined>;
    /**
     * Starting time. Note: Each gateway may interpret this time differently according to its time zone.
     */
    public readonly start!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Start immediately.
     */
    public readonly startNow!: pulumi.Output<boolean | undefined>;
    /**
     * Collection of tag identifiers.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;

    /**
     * Create a ManagementTime resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ManagementTimeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagementTimeArgs | ManagementTimeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagementTimeState | undefined;
            resourceInputs["color"] = state ? state.color : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["end"] = state ? state.end : undefined;
            resourceInputs["endNever"] = state ? state.endNever : undefined;
            resourceInputs["hoursRanges"] = state ? state.hoursRanges : undefined;
            resourceInputs["ignoreErrors"] = state ? state.ignoreErrors : undefined;
            resourceInputs["ignoreWarnings"] = state ? state.ignoreWarnings : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["recurrence"] = state ? state.recurrence : undefined;
            resourceInputs["start"] = state ? state.start : undefined;
            resourceInputs["startNow"] = state ? state.startNow : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ManagementTimeArgs | undefined;
            resourceInputs["color"] = args ? args.color : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["end"] = args ? args.end : undefined;
            resourceInputs["endNever"] = args ? args.endNever : undefined;
            resourceInputs["hoursRanges"] = args ? args.hoursRanges : undefined;
            resourceInputs["ignoreErrors"] = args ? args.ignoreErrors : undefined;
            resourceInputs["ignoreWarnings"] = args ? args.ignoreWarnings : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["recurrence"] = args ? args.recurrence : undefined;
            resourceInputs["start"] = args ? args.start : undefined;
            resourceInputs["startNow"] = args ? args.startNow : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagementTime.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagementTime resources.
 */
export interface ManagementTimeState {
    /**
     * Color of the object. Should be one of existing colors.
     */
    color?: pulumi.Input<string>;
    /**
     * Comments string.
     */
    comments?: pulumi.Input<string>;
    /**
     * End time. Note: Each gateway may interpret this time differently according to its time zone.
     */
    end?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * End never.
     */
    endNever?: pulumi.Input<boolean>;
    /**
     * Hours recurrence. Note: Each gateway may interpret this time differently according to its time zone.
     */
    hoursRanges?: pulumi.Input<pulumi.Input<inputs.ManagementTimeHoursRange>[]>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    ignoreErrors?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring warnings.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * Object name.
     */
    name?: pulumi.Input<string>;
    /**
     * Days recurrence.
     */
    recurrence?: pulumi.Input<inputs.ManagementTimeRecurrence>;
    /**
     * Starting time. Note: Each gateway may interpret this time differently according to its time zone.
     */
    start?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Start immediately.
     */
    startNow?: pulumi.Input<boolean>;
    /**
     * Collection of tag identifiers.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ManagementTime resource.
 */
export interface ManagementTimeArgs {
    /**
     * Color of the object. Should be one of existing colors.
     */
    color?: pulumi.Input<string>;
    /**
     * Comments string.
     */
    comments?: pulumi.Input<string>;
    /**
     * End time. Note: Each gateway may interpret this time differently according to its time zone.
     */
    end?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * End never.
     */
    endNever?: pulumi.Input<boolean>;
    /**
     * Hours recurrence. Note: Each gateway may interpret this time differently according to its time zone.
     */
    hoursRanges?: pulumi.Input<pulumi.Input<inputs.ManagementTimeHoursRange>[]>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    ignoreErrors?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring warnings.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * Object name.
     */
    name?: pulumi.Input<string>;
    /**
     * Days recurrence.
     */
    recurrence?: pulumi.Input<inputs.ManagementTimeRecurrence>;
    /**
     * Starting time. Note: Each gateway may interpret this time differently according to its time zone.
     */
    start?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Start immediately.
     */
    startNow?: pulumi.Input<boolean>;
    /**
     * Collection of tag identifiers.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
