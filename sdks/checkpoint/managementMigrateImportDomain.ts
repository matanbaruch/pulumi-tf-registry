// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ManagementMigrateImportDomain extends pulumi.CustomResource {
    /**
     * Get an existing ManagementMigrateImportDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagementMigrateImportDomainState, opts?: pulumi.CustomResourceOptions): ManagementMigrateImportDomain {
        return new ManagementMigrateImportDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkpoint:index/managementMigrateImportDomain:ManagementMigrateImportDomain';

    /**
     * Returns true if the given object is an instance of ManagementMigrateImportDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementMigrateImportDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementMigrateImportDomain.__pulumiType;
    }

    /**
     * IPv4 address.<br><font color="red">Required only for</font> importing Security Management Server into Multi-Domain
     * Server.
     */
    public readonly domainIpAddress!: pulumi.Output<string>;
    /**
     * Domain name. Should be unique in the MDS.<br><font color="red">Required only for</font> importing Security Management
     * Server into Multi-Domain Server.
     */
    public readonly domainName!: pulumi.Output<string>;
    /**
     * Multi Domain server name.<br><font color="red">Required only for</font> importing Security Management Server into
     * Multi-Domain Server.
     */
    public readonly domainServerName!: pulumi.Output<string>;
    /**
     * Path to the exported file to be imported. <br>Should be the full file path (example, "/var/log/domain1_exported.tgz").
     */
    public readonly filePath!: pulumi.Output<string>;
    /**
     * Import logs from the input package.
     */
    public readonly includeLogs!: pulumi.Output<boolean | undefined>;
    /**
     * Command asynchronous task unique identifier.
     */
    public /*out*/ readonly taskId!: pulumi.Output<string>;

    /**
     * Create a ManagementMigrateImportDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagementMigrateImportDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagementMigrateImportDomainArgs | ManagementMigrateImportDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagementMigrateImportDomainState | undefined;
            resourceInputs["domainIpAddress"] = state ? state.domainIpAddress : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["domainServerName"] = state ? state.domainServerName : undefined;
            resourceInputs["filePath"] = state ? state.filePath : undefined;
            resourceInputs["includeLogs"] = state ? state.includeLogs : undefined;
            resourceInputs["taskId"] = state ? state.taskId : undefined;
        } else {
            const args = argsOrState as ManagementMigrateImportDomainArgs | undefined;
            if ((!args || args.domainIpAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainIpAddress'");
            }
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            if ((!args || args.domainServerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainServerName'");
            }
            if ((!args || args.filePath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filePath'");
            }
            resourceInputs["domainIpAddress"] = args ? args.domainIpAddress : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["domainServerName"] = args ? args.domainServerName : undefined;
            resourceInputs["filePath"] = args ? args.filePath : undefined;
            resourceInputs["includeLogs"] = args ? args.includeLogs : undefined;
            resourceInputs["taskId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagementMigrateImportDomain.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagementMigrateImportDomain resources.
 */
export interface ManagementMigrateImportDomainState {
    /**
     * IPv4 address.<br><font color="red">Required only for</font> importing Security Management Server into Multi-Domain
     * Server.
     */
    domainIpAddress?: pulumi.Input<string>;
    /**
     * Domain name. Should be unique in the MDS.<br><font color="red">Required only for</font> importing Security Management
     * Server into Multi-Domain Server.
     */
    domainName?: pulumi.Input<string>;
    /**
     * Multi Domain server name.<br><font color="red">Required only for</font> importing Security Management Server into
     * Multi-Domain Server.
     */
    domainServerName?: pulumi.Input<string>;
    /**
     * Path to the exported file to be imported. <br>Should be the full file path (example, "/var/log/domain1_exported.tgz").
     */
    filePath?: pulumi.Input<string>;
    /**
     * Import logs from the input package.
     */
    includeLogs?: pulumi.Input<boolean>;
    /**
     * Command asynchronous task unique identifier.
     */
    taskId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagementMigrateImportDomain resource.
 */
export interface ManagementMigrateImportDomainArgs {
    /**
     * IPv4 address.<br><font color="red">Required only for</font> importing Security Management Server into Multi-Domain
     * Server.
     */
    domainIpAddress: pulumi.Input<string>;
    /**
     * Domain name. Should be unique in the MDS.<br><font color="red">Required only for</font> importing Security Management
     * Server into Multi-Domain Server.
     */
    domainName: pulumi.Input<string>;
    /**
     * Multi Domain server name.<br><font color="red">Required only for</font> importing Security Management Server into
     * Multi-Domain Server.
     */
    domainServerName: pulumi.Input<string>;
    /**
     * Path to the exported file to be imported. <br>Should be the full file path (example, "/var/log/domain1_exported.tgz").
     */
    filePath: pulumi.Input<string>;
    /**
     * Import logs from the input package.
     */
    includeLogs?: pulumi.Input<boolean>;
}
