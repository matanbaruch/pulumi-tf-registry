// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ManagementAwsDataCenterServer extends pulumi.CustomResource {
    /**
     * Get an existing ManagementAwsDataCenterServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagementAwsDataCenterServerState, opts?: pulumi.CustomResourceOptions): ManagementAwsDataCenterServer {
        return new ManagementAwsDataCenterServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkpoint:index/managementAwsDataCenterServer:ManagementAwsDataCenterServer';

    /**
     * Returns true if the given object is an instance of ManagementAwsDataCenterServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementAwsDataCenterServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementAwsDataCenterServer.__pulumiType;
    }

    /**
     * Access key ID for the AWS account. Required for authentication-method: user-authentication.
     */
    public readonly accessKeyId!: pulumi.Output<string | undefined>;
    /**
     * user-authentication Uses the Access keys to authenticate. role-authentication Uses the AWS IAM role to authenticate.
     * This option requires the Security Management Server be deployed in AWS and has an IAM Role.
     */
    public readonly authenticationMethod!: pulumi.Output<string>;
    /**
     * Color of the object. Should be one of existing colors.
     */
    public readonly color!: pulumi.Output<string | undefined>;
    /**
     * Comments string.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * Enables the STS Assume Role option. After it is enabled, the sts-role field is mandatory, whereas the sts-external-id is
     * optional.
     */
    public readonly enableStsAssumeRole!: pulumi.Output<boolean | undefined>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    public readonly ignoreErrors!: pulumi.Output<boolean | undefined>;
    /**
     * Apply changes ignoring warnings. By Setting this parameter to 'true' test connection failure will be ignored.
     */
    public readonly ignoreWarnings!: pulumi.Output<boolean | undefined>;
    /**
     * Object name. Must be unique in the domain.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Select the AWS region.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Secret access key for the AWS account. Required for authentication-method: user-authentication.
     */
    public readonly secretAccessKey!: pulumi.Output<string | undefined>;
    /**
     * An optional STS External-Id to use when assuming the role.
     */
    public readonly stsExternalId!: pulumi.Output<string | undefined>;
    /**
     * The STS RoleARN of the role to be assumed. Required for enable-sts-assume-role: true.
     */
    public readonly stsRole!: pulumi.Output<string | undefined>;
    /**
     * Collection of tag identifiers.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;

    /**
     * Create a ManagementAwsDataCenterServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagementAwsDataCenterServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagementAwsDataCenterServerArgs | ManagementAwsDataCenterServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagementAwsDataCenterServerState | undefined;
            resourceInputs["accessKeyId"] = state ? state.accessKeyId : undefined;
            resourceInputs["authenticationMethod"] = state ? state.authenticationMethod : undefined;
            resourceInputs["color"] = state ? state.color : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["enableStsAssumeRole"] = state ? state.enableStsAssumeRole : undefined;
            resourceInputs["ignoreErrors"] = state ? state.ignoreErrors : undefined;
            resourceInputs["ignoreWarnings"] = state ? state.ignoreWarnings : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["secretAccessKey"] = state ? state.secretAccessKey : undefined;
            resourceInputs["stsExternalId"] = state ? state.stsExternalId : undefined;
            resourceInputs["stsRole"] = state ? state.stsRole : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ManagementAwsDataCenterServerArgs | undefined;
            if ((!args || args.authenticationMethod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authenticationMethod'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["accessKeyId"] = args?.accessKeyId ? pulumi.secret(args.accessKeyId) : undefined;
            resourceInputs["authenticationMethod"] = args ? args.authenticationMethod : undefined;
            resourceInputs["color"] = args ? args.color : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["enableStsAssumeRole"] = args ? args.enableStsAssumeRole : undefined;
            resourceInputs["ignoreErrors"] = args ? args.ignoreErrors : undefined;
            resourceInputs["ignoreWarnings"] = args ? args.ignoreWarnings : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["secretAccessKey"] = args?.secretAccessKey ? pulumi.secret(args.secretAccessKey) : undefined;
            resourceInputs["stsExternalId"] = args ? args.stsExternalId : undefined;
            resourceInputs["stsRole"] = args ? args.stsRole : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accessKeyId", "secretAccessKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ManagementAwsDataCenterServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagementAwsDataCenterServer resources.
 */
export interface ManagementAwsDataCenterServerState {
    /**
     * Access key ID for the AWS account. Required for authentication-method: user-authentication.
     */
    accessKeyId?: pulumi.Input<string>;
    /**
     * user-authentication Uses the Access keys to authenticate. role-authentication Uses the AWS IAM role to authenticate.
     * This option requires the Security Management Server be deployed in AWS and has an IAM Role.
     */
    authenticationMethod?: pulumi.Input<string>;
    /**
     * Color of the object. Should be one of existing colors.
     */
    color?: pulumi.Input<string>;
    /**
     * Comments string.
     */
    comments?: pulumi.Input<string>;
    /**
     * Enables the STS Assume Role option. After it is enabled, the sts-role field is mandatory, whereas the sts-external-id is
     * optional.
     */
    enableStsAssumeRole?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    ignoreErrors?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring warnings. By Setting this parameter to 'true' test connection failure will be ignored.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * Object name. Must be unique in the domain.
     */
    name?: pulumi.Input<string>;
    /**
     * Select the AWS region.
     */
    region?: pulumi.Input<string>;
    /**
     * Secret access key for the AWS account. Required for authentication-method: user-authentication.
     */
    secretAccessKey?: pulumi.Input<string>;
    /**
     * An optional STS External-Id to use when assuming the role.
     */
    stsExternalId?: pulumi.Input<string>;
    /**
     * The STS RoleARN of the role to be assumed. Required for enable-sts-assume-role: true.
     */
    stsRole?: pulumi.Input<string>;
    /**
     * Collection of tag identifiers.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ManagementAwsDataCenterServer resource.
 */
export interface ManagementAwsDataCenterServerArgs {
    /**
     * Access key ID for the AWS account. Required for authentication-method: user-authentication.
     */
    accessKeyId?: pulumi.Input<string>;
    /**
     * user-authentication Uses the Access keys to authenticate. role-authentication Uses the AWS IAM role to authenticate.
     * This option requires the Security Management Server be deployed in AWS and has an IAM Role.
     */
    authenticationMethod: pulumi.Input<string>;
    /**
     * Color of the object. Should be one of existing colors.
     */
    color?: pulumi.Input<string>;
    /**
     * Comments string.
     */
    comments?: pulumi.Input<string>;
    /**
     * Enables the STS Assume Role option. After it is enabled, the sts-role field is mandatory, whereas the sts-external-id is
     * optional.
     */
    enableStsAssumeRole?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    ignoreErrors?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring warnings. By Setting this parameter to 'true' test connection failure will be ignored.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * Object name. Must be unique in the domain.
     */
    name?: pulumi.Input<string>;
    /**
     * Select the AWS region.
     */
    region: pulumi.Input<string>;
    /**
     * Secret access key for the AWS account. Required for authentication-method: user-authentication.
     */
    secretAccessKey?: pulumi.Input<string>;
    /**
     * An optional STS External-Id to use when assuming the role.
     */
    stsExternalId?: pulumi.Input<string>;
    /**
     * The STS RoleARN of the role to be assumed. Required for enable-sts-assume-role: true.
     */
    stsRole?: pulumi.Input<string>;
    /**
     * Collection of tag identifiers.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
