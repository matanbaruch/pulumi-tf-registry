// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ManagementServerCertificate extends pulumi.CustomResource {
    /**
     * Get an existing ManagementServerCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagementServerCertificateState, opts?: pulumi.CustomResourceOptions): ManagementServerCertificate {
        return new ManagementServerCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkpoint:index/managementServerCertificate:ManagementServerCertificate';

    /**
     * Returns true if the given object is an instance of ManagementServerCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementServerCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementServerCertificate.__pulumiType;
    }

    /**
     * Certificate file encoded in base64.<br/>Valid file formats: p12.
     */
    public readonly base64Certificate!: pulumi.Output<string | undefined>;
    /**
     * Base64 encoded password of the certificate file.
     */
    public readonly base64Password!: pulumi.Output<string | undefined>;
    /**
     * Server certificate comments.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * Object name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Certificate's subject.
     */
    public /*out*/ readonly subject!: pulumi.Output<string>;
    /**
     * Server certificate valid from date.
     */
    public /*out*/ readonly validFrom!: pulumi.Output<string>;
    /**
     * Server certificate valid up to date.
     */
    public /*out*/ readonly validTo!: pulumi.Output<string>;

    /**
     * Create a ManagementServerCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ManagementServerCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagementServerCertificateArgs | ManagementServerCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagementServerCertificateState | undefined;
            resourceInputs["base64Certificate"] = state ? state.base64Certificate : undefined;
            resourceInputs["base64Password"] = state ? state.base64Password : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["subject"] = state ? state.subject : undefined;
            resourceInputs["validFrom"] = state ? state.validFrom : undefined;
            resourceInputs["validTo"] = state ? state.validTo : undefined;
        } else {
            const args = argsOrState as ManagementServerCertificateArgs | undefined;
            resourceInputs["base64Certificate"] = args?.base64Certificate ? pulumi.secret(args.base64Certificate) : undefined;
            resourceInputs["base64Password"] = args?.base64Password ? pulumi.secret(args.base64Password) : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["subject"] = undefined /*out*/;
            resourceInputs["validFrom"] = undefined /*out*/;
            resourceInputs["validTo"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["base64Certificate", "base64Password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ManagementServerCertificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagementServerCertificate resources.
 */
export interface ManagementServerCertificateState {
    /**
     * Certificate file encoded in base64.<br/>Valid file formats: p12.
     */
    base64Certificate?: pulumi.Input<string>;
    /**
     * Base64 encoded password of the certificate file.
     */
    base64Password?: pulumi.Input<string>;
    /**
     * Server certificate comments.
     */
    comments?: pulumi.Input<string>;
    /**
     * Object name.
     */
    name?: pulumi.Input<string>;
    /**
     * Certificate's subject.
     */
    subject?: pulumi.Input<string>;
    /**
     * Server certificate valid from date.
     */
    validFrom?: pulumi.Input<string>;
    /**
     * Server certificate valid up to date.
     */
    validTo?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagementServerCertificate resource.
 */
export interface ManagementServerCertificateArgs {
    /**
     * Certificate file encoded in base64.<br/>Valid file formats: p12.
     */
    base64Certificate?: pulumi.Input<string>;
    /**
     * Base64 encoded password of the certificate file.
     */
    base64Password?: pulumi.Input<string>;
    /**
     * Server certificate comments.
     */
    comments?: pulumi.Input<string>;
    /**
     * Object name.
     */
    name?: pulumi.Input<string>;
}
