// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ManagementServiceOther extends pulumi.CustomResource {
    /**
     * Get an existing ManagementServiceOther resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagementServiceOtherState, opts?: pulumi.CustomResourceOptions): ManagementServiceOther {
        return new ManagementServiceOther(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkpoint:index/managementServiceOther:ManagementServiceOther';

    /**
     * Returns true if the given object is an instance of ManagementServiceOther.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementServiceOther {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementServiceOther.__pulumiType;
    }

    /**
     * Specifies whether Other Service replies are to be accepted.
     */
    public readonly acceptReplies!: pulumi.Output<boolean | undefined>;
    /**
     * Contains an INSPECT expression that defines the action to take if a rule containing this service is matched. Example:
     * set r_mhandler &open_ssl_handler sets a handler on the connection.
     */
    public readonly action!: pulumi.Output<string | undefined>;
    /**
     * Sets short (aggressive) timeouts for idle connections.
     */
    public readonly aggressiveAging!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Color of the object. Should be one of existing colors.
     */
    public readonly color!: pulumi.Output<string | undefined>;
    /**
     * Comments string.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    public readonly ignoreErrors!: pulumi.Output<boolean | undefined>;
    /**
     * Apply changes ignoring warnings.
     */
    public readonly ignoreWarnings!: pulumi.Output<boolean | undefined>;
    /**
     * IP protocol number.
     */
    public readonly ipProtocol!: pulumi.Output<number | undefined>;
    /**
     * Keep connections open after policy has been installed even if they are not allowed under the new policy. This overrides
     * the settings in the Connection Persistence page. If you change this property, the change will not affect open
     * connections, but only future connections.
     */
    public readonly keepConnectionsOpenAfterPolicyInstallation!: pulumi.Output<boolean | undefined>;
    /**
     * Contains an INSPECT expression that defines the matching criteria. The connection is examined against the expression
     * during the first packet. Example: tcp, dport = 21, direction = 0 matches incoming FTP control connections.
     */
    public readonly match!: pulumi.Output<string | undefined>;
    /**
     * Indicates whether this service is used when 'Any' is set as the rule's service and there are several service objects
     * with the same source port and protocol.
     */
    public readonly matchForAny!: pulumi.Output<boolean | undefined>;
    /**
     * Object name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Indicates whether this service is a Data Domain service which has been overridden.
     */
    public readonly overrideDefaultSettings!: pulumi.Output<boolean | undefined>;
    /**
     * Time (in seconds) before the session times out.
     */
    public readonly sessionTimeout!: pulumi.Output<number | undefined>;
    /**
     * Enables state-synchronized High Availability or Load Sharing on a ClusterXL or OPSEC-certified cluster.
     */
    public readonly syncConnectionsOnCluster!: pulumi.Output<boolean | undefined>;
    /**
     * Collection of tag identifiers.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Use default virtual session timeout.
     */
    public readonly useDefaultSessionTimeout!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ManagementServiceOther resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ManagementServiceOtherArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagementServiceOtherArgs | ManagementServiceOtherState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagementServiceOtherState | undefined;
            resourceInputs["acceptReplies"] = state ? state.acceptReplies : undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["aggressiveAging"] = state ? state.aggressiveAging : undefined;
            resourceInputs["color"] = state ? state.color : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["ignoreErrors"] = state ? state.ignoreErrors : undefined;
            resourceInputs["ignoreWarnings"] = state ? state.ignoreWarnings : undefined;
            resourceInputs["ipProtocol"] = state ? state.ipProtocol : undefined;
            resourceInputs["keepConnectionsOpenAfterPolicyInstallation"] = state ? state.keepConnectionsOpenAfterPolicyInstallation : undefined;
            resourceInputs["match"] = state ? state.match : undefined;
            resourceInputs["matchForAny"] = state ? state.matchForAny : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["overrideDefaultSettings"] = state ? state.overrideDefaultSettings : undefined;
            resourceInputs["sessionTimeout"] = state ? state.sessionTimeout : undefined;
            resourceInputs["syncConnectionsOnCluster"] = state ? state.syncConnectionsOnCluster : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["useDefaultSessionTimeout"] = state ? state.useDefaultSessionTimeout : undefined;
        } else {
            const args = argsOrState as ManagementServiceOtherArgs | undefined;
            resourceInputs["acceptReplies"] = args ? args.acceptReplies : undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["aggressiveAging"] = args ? args.aggressiveAging : undefined;
            resourceInputs["color"] = args ? args.color : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["ignoreErrors"] = args ? args.ignoreErrors : undefined;
            resourceInputs["ignoreWarnings"] = args ? args.ignoreWarnings : undefined;
            resourceInputs["ipProtocol"] = args ? args.ipProtocol : undefined;
            resourceInputs["keepConnectionsOpenAfterPolicyInstallation"] = args ? args.keepConnectionsOpenAfterPolicyInstallation : undefined;
            resourceInputs["match"] = args ? args.match : undefined;
            resourceInputs["matchForAny"] = args ? args.matchForAny : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["overrideDefaultSettings"] = args ? args.overrideDefaultSettings : undefined;
            resourceInputs["sessionTimeout"] = args ? args.sessionTimeout : undefined;
            resourceInputs["syncConnectionsOnCluster"] = args ? args.syncConnectionsOnCluster : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["useDefaultSessionTimeout"] = args ? args.useDefaultSessionTimeout : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagementServiceOther.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagementServiceOther resources.
 */
export interface ManagementServiceOtherState {
    /**
     * Specifies whether Other Service replies are to be accepted.
     */
    acceptReplies?: pulumi.Input<boolean>;
    /**
     * Contains an INSPECT expression that defines the action to take if a rule containing this service is matched. Example:
     * set r_mhandler &open_ssl_handler sets a handler on the connection.
     */
    action?: pulumi.Input<string>;
    /**
     * Sets short (aggressive) timeouts for idle connections.
     */
    aggressiveAging?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Color of the object. Should be one of existing colors.
     */
    color?: pulumi.Input<string>;
    /**
     * Comments string.
     */
    comments?: pulumi.Input<string>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    ignoreErrors?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring warnings.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * IP protocol number.
     */
    ipProtocol?: pulumi.Input<number>;
    /**
     * Keep connections open after policy has been installed even if they are not allowed under the new policy. This overrides
     * the settings in the Connection Persistence page. If you change this property, the change will not affect open
     * connections, but only future connections.
     */
    keepConnectionsOpenAfterPolicyInstallation?: pulumi.Input<boolean>;
    /**
     * Contains an INSPECT expression that defines the matching criteria. The connection is examined against the expression
     * during the first packet. Example: tcp, dport = 21, direction = 0 matches incoming FTP control connections.
     */
    match?: pulumi.Input<string>;
    /**
     * Indicates whether this service is used when 'Any' is set as the rule's service and there are several service objects
     * with the same source port and protocol.
     */
    matchForAny?: pulumi.Input<boolean>;
    /**
     * Object name.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates whether this service is a Data Domain service which has been overridden.
     */
    overrideDefaultSettings?: pulumi.Input<boolean>;
    /**
     * Time (in seconds) before the session times out.
     */
    sessionTimeout?: pulumi.Input<number>;
    /**
     * Enables state-synchronized High Availability or Load Sharing on a ClusterXL or OPSEC-certified cluster.
     */
    syncConnectionsOnCluster?: pulumi.Input<boolean>;
    /**
     * Collection of tag identifiers.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Use default virtual session timeout.
     */
    useDefaultSessionTimeout?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ManagementServiceOther resource.
 */
export interface ManagementServiceOtherArgs {
    /**
     * Specifies whether Other Service replies are to be accepted.
     */
    acceptReplies?: pulumi.Input<boolean>;
    /**
     * Contains an INSPECT expression that defines the action to take if a rule containing this service is matched. Example:
     * set r_mhandler &open_ssl_handler sets a handler on the connection.
     */
    action?: pulumi.Input<string>;
    /**
     * Sets short (aggressive) timeouts for idle connections.
     */
    aggressiveAging?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Color of the object. Should be one of existing colors.
     */
    color?: pulumi.Input<string>;
    /**
     * Comments string.
     */
    comments?: pulumi.Input<string>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    ignoreErrors?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring warnings.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * IP protocol number.
     */
    ipProtocol?: pulumi.Input<number>;
    /**
     * Keep connections open after policy has been installed even if they are not allowed under the new policy. This overrides
     * the settings in the Connection Persistence page. If you change this property, the change will not affect open
     * connections, but only future connections.
     */
    keepConnectionsOpenAfterPolicyInstallation?: pulumi.Input<boolean>;
    /**
     * Contains an INSPECT expression that defines the matching criteria. The connection is examined against the expression
     * during the first packet. Example: tcp, dport = 21, direction = 0 matches incoming FTP control connections.
     */
    match?: pulumi.Input<string>;
    /**
     * Indicates whether this service is used when 'Any' is set as the rule's service and there are several service objects
     * with the same source port and protocol.
     */
    matchForAny?: pulumi.Input<boolean>;
    /**
     * Object name.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates whether this service is a Data Domain service which has been overridden.
     */
    overrideDefaultSettings?: pulumi.Input<boolean>;
    /**
     * Time (in seconds) before the session times out.
     */
    sessionTimeout?: pulumi.Input<number>;
    /**
     * Enables state-synchronized High Availability or Load Sharing on a ClusterXL or OPSEC-certified cluster.
     */
    syncConnectionsOnCluster?: pulumi.Input<boolean>;
    /**
     * Collection of tag identifiers.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Use default virtual session timeout.
     */
    useDefaultSessionTimeout?: pulumi.Input<boolean>;
}
