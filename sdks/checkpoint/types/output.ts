// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetManagementAccessRulebaseOrder {
    /**
     * Sorts results by the given field in ascending order.
     */
    asc?: string;
    /**
     * Sorts results by the given field in descending order.
     */
    desc?: string;
}

export interface GetManagementAccessRulebaseRulebase {
    from: number;
    objectsDictionaries: outputs.GetManagementAccessRulebaseRulebaseObjectsDictionary[];
    rulebases: outputs.GetManagementAccessRulebaseRulebaseRulebase[];
    to: number;
    total: number;
}

export interface GetManagementAccessRulebaseRulebaseObjectsDictionary {
    name: string;
    type: string;
    uid: string;
}

export interface GetManagementAccessRulebaseRulebaseRulebase {
    action: string;
    actionSettings: {[key: string]: string};
    comments: string;
    contentDirection: string;
    contentNegate: boolean;
    contents: string[];
    customFields: {[key: string]: string};
    destinationNegate: boolean;
    destinations: string[];
    enabled: boolean;
    from: number;
    inlineLayer: string;
    installOns: string[];
    name: string;
    ruleNumber: number;
    rulebases: outputs.GetManagementAccessRulebaseRulebaseRulebaseRulebase[];
    serviceNegate: boolean;
    serviceResource: string;
    services: string[];
    sourceNegate: boolean;
    sources: string[];
    times: string[];
    to: number;
    track: {[key: string]: string};
    type: string;
    uid: string;
    vpns: string[];
}

export interface GetManagementAccessRulebaseRulebaseRulebaseRulebase {
    action: string;
    actionSettings: {[key: string]: string};
    comments: string;
    contentDirection: string;
    contentNegate: boolean;
    contents: string[];
    customFields: {[key: string]: string};
    destinationNegate: boolean;
    destinations: string[];
    enabled: boolean;
    inlineLayer: string;
    installOns: string[];
    name: string;
    ruleNumber: number;
    serviceNegate: boolean;
    serviceResource: string;
    services: string[];
    sourceNegate: boolean;
    sources: string[];
    times: string[];
    track: {[key: string]: string};
    type: string;
    uid: string;
    vpns: string[];
}

export interface GetManagementAdministratorPermissionsProfile {
    domain: string;
    profile: string;
}

export interface GetManagementAutomaticPurgeScheduling {
    checkInterval: number;
    lastCheck: string;
    nextCheck: string;
    startDate: string;
    timeUnits: string;
}

export interface GetManagementAzureAdContentObject {
    additionalProperties: outputs.GetManagementAzureAdContentObjectAdditionalProperty[];
    azureAdObject: string;
    name: string;
    nameInAzureAd: string;
    typeInAzureAd: string;
    uidInAzureAd: string;
}

export interface GetManagementAzureAdContentObjectAdditionalProperty {
    name: string;
    value: string;
}

export interface GetManagementAzureAdContentOrder {
    /**
     * Sorts results by the given field in ascending order.
     */
    asc?: string;
    /**
     * Sorts results by the given field in descending order.
     */
    desc?: string;
}

export interface GetManagementAzureAdProperty {
    name: string;
    value: string;
}

export interface GetManagementCheckpointHostInterface {
    color: string;
    comments: string;
    maskLength4: number;
    maskLength6: number;
    name: string;
    subnet4: string;
    subnet6: string;
    subnetMask: string;
}

export interface GetManagementCloudServicesGatewaysOnboardingSetting {
    connectionMethod: string;
    participantGateways: string;
    specificGateways: string[];
}

export interface GetManagementClusterMemberInterface {
    ipv4Address: string;
    ipv4MaskLength: number;
    ipv4NetworkMask: string;
    ipv6Address: string;
    ipv6MaskLength: number;
    ipv6NetworkMask: string;
    name: string;
    uid: string;
}

export interface GetManagementCmeAccountsAwsSubAccount {
    accessKey: string;
    credentialsFile: string;
    name: string;
    secretKey: string;
    stsExternalId: string;
    stsRole: string;
}

export interface GetManagementCmeAccountsResult {
    deletionTolerance: number;
    domain: string;
    gwConfigurations: string[];
    name: string;
    platform: string;
}

export interface GetManagementCmeGwConfigurationsAwsBlade {
    antiBot: boolean;
    antiVirus: boolean;
    applicationControl: boolean;
    autonomousThreatPrevention: boolean;
    contentAwareness: boolean;
    httpsInspection: boolean;
    identityAwareness: boolean;
    ips: boolean;
    ipsecVpn: boolean;
    threatEmulation: boolean;
    urlFiltering: boolean;
    vpn: boolean;
}

export interface GetManagementCmeGwConfigurationsAwsRepositoryGatewayScript {
    name: string;
    parameters: string;
    uid: string;
}

export interface GetManagementCmeGwConfigurationsAzureBlade {
    antiBot: boolean;
    antiVirus: boolean;
    applicationControl: boolean;
    autonomousThreatPrevention: boolean;
    contentAwareness: boolean;
    httpsInspection: boolean;
    identityAwareness: boolean;
    ips: boolean;
    ipsecVpn: boolean;
    threatEmulation: boolean;
    urlFiltering: boolean;
    vpn: boolean;
}

export interface GetManagementCmeGwConfigurationsAzureRepositoryGatewayScript {
    name: string;
    parameters: string;
    uid: string;
}

export interface GetManagementCmeGwConfigurationsGcpBlade {
    antiBot: boolean;
    antiVirus: boolean;
    applicationControl: boolean;
    autonomousThreatPrevention: boolean;
    contentAwareness: boolean;
    httpsInspection: boolean;
    identityAwareness: boolean;
    ips: boolean;
    ipsecVpn: boolean;
    threatEmulation: boolean;
    urlFiltering: boolean;
    vpn: boolean;
}

export interface GetManagementCmeGwConfigurationsGcpRepositoryGatewayScript {
    name: string;
    parameters: string;
    uid: string;
}

export interface GetManagementCmeGwConfigurationsResult {
    blades: outputs.GetManagementCmeGwConfigurationsResultBlade[];
    name: string;
    policy: string;
    relatedAccount: string;
    repositoryGatewayScripts: outputs.GetManagementCmeGwConfigurationsResultRepositoryGatewayScript[];
    sendAlertsToServers: string[];
    sendLogsToBackupServers: string[];
    sendLogsToServers: string[];
    sicKey: string;
    version: string;
}

export interface GetManagementCmeGwConfigurationsResultBlade {
    antiBot: boolean;
    antiVirus: boolean;
    applicationControl: boolean;
    autonomousThreatPrevention: boolean;
    contentAwareness: boolean;
    httpsInspection: boolean;
    identityAwareness: boolean;
    ips: boolean;
    ipsecVpn: boolean;
    threatEmulation: boolean;
    urlFiltering: boolean;
    vpn: boolean;
}

export interface GetManagementCmeGwConfigurationsResultRepositoryGatewayScript {
    name: string;
    parameters: string;
    uid: string;
}

export interface GetManagementDataAccessRoleMachine {
    baseDn: string;
    selections: string[];
    source: string;
}

export interface GetManagementDataAccessRoleUser {
    baseDn: string;
    selections: string[];
    source: string;
}

export interface GetManagementDataAccessRuleUserCheck {
    confirm: string;
    customFrequencies: outputs.GetManagementDataAccessRuleUserCheckCustomFrequency[];
    frequency: string;
    interaction: string;
}

export interface GetManagementDataAccessRuleUserCheckCustomFrequency {
    every: number;
    unit: string;
}

export interface GetManagementDataCenterContentObject {
    additionalProperties: {[key: string]: string};
    dataCenterObject: {[key: string]: string};
    name: string;
    nameInDataCenter: string;
    typeInDataCenter: string;
    uidInDataCenter: string;
}

export interface GetManagementDataCenterContentOrder {
    /**
     * Sorts results by the given field in ascending order.
     */
    asc?: string;
    /**
     * Sorts results by the given field in descending order.
     */
    desc?: string;
}

export interface GetManagementDataCenterObjectAdditionalProperty {
    name: string;
    value: string;
}

export interface GetManagementDataCenterObjectDataCenter {
    automaticRefresh: boolean;
    dataCenterType: string;
    name: string;
    properties: outputs.GetManagementDataCenterObjectDataCenterProperty[];
    uid: string;
}

export interface GetManagementDataCenterObjectDataCenterProperty {
    name: string;
    value: string;
}

export interface GetManagementDataCenterQueryQueryRule {
    key: string;
    keyType: string;
    values: string[];
}

export interface GetManagementDataHostHostServer {
    dnsServer: boolean;
    mailServer: boolean;
    webServer: boolean;
    webServerConfigs: outputs.GetManagementDataHostHostServerWebServerConfig[];
}

export interface GetManagementDataHostHostServerWebServerConfig {
    additionalPorts: string[];
    applicationEngines: string[];
    listenStandardPort: boolean;
    operatingSystem: string;
    protectedBy: string;
}

export interface GetManagementDataHostInterface {
    color: string;
    comments: string;
    maskLength4: number;
    maskLength6: number;
    name: string;
    subnet4: string;
    subnet6: string;
}

export interface GetManagementDataThreatIndicatorProfileOverride {
    action: string;
    profile: string;
}

export interface GetManagementDataVpnCommunityMeshedGranularEncryption {
    encryptionMethod: string;
    encryptionSuite: string;
    externalGateway: string;
    ikePhase1: {[key: string]: string};
    ikePhase2: {[key: string]: string};
    internalGateway: string;
}

export interface GetManagementDataVpnCommunityMeshedOverrideVpnDomain {
    gateway: string;
    vpnDomain: string;
}

export interface GetManagementDataVpnCommunityMeshedSharedSecret {
    externalGateway: string;
    sharedSecret: string;
}

export interface GetManagementDataVpnCommunityStarGranularEncryption {
    encryptionMethod: string;
    encryptionSuite: string;
    externalGateway: string;
    ikePhase1: {[key: string]: string};
    ikePhase2: {[key: string]: string};
    internalGateway: string;
}

export interface GetManagementDataVpnCommunityStarOverrideVpnDomain {
    gateway: string;
    vpnDomain: string;
}

export interface GetManagementDataVpnCommunityStarSharedSecret {
    externalGateway: string;
    sharedSecret: string;
}

export interface GetManagementDomainPermissionsProfileAccessControl {
    accessControlObjectsAndSettings: string;
    appControlAndUrlFilteringUpdate: boolean;
    dlpPolicy: string;
    geoControlPolicy: string;
    installPolicy: boolean;
    natPolicy: string;
    policyLayers: outputs.GetManagementDomainPermissionsProfileAccessControlPolicyLayer[];
    qosPolicy: string;
    showPolicy: boolean;
}

export interface GetManagementDomainPermissionsProfileAccessControlPolicyLayer {
    appControlAndUrlFiltering: boolean;
    contentAwareness: boolean;
    editLayers: string;
    firewall: boolean;
    mobileAccess: boolean;
}

export interface GetManagementDomainServer {
    active: boolean;
    ipv4Address: string;
    ipv6Address: string;
    multiDomainServer: string;
    name: string;
    skipStartDomainServer: boolean;
    type: string;
}

export interface GetManagementGaiaBestPracticeRegulation {
    regulationName: string;
    requirementDescription: string;
    requirementId: string;
    requirementStatus: string;
}

export interface GetManagementGaiaBestPracticeRelevantObject {
    enabled: boolean;
    name: string;
    status: string;
    uid: string;
}

export interface GetManagementGlobalDomainGlobalDomainAssignment {
    assignmentStatus: string;
    assignmentUpToDate: {[key: string]: string};
    color: string;
    comments: string;
    dependentDomain: {[key: string]: string};
    globalAccessPolicy: string;
    globalThreatPreventionPolicy: string;
    manageProtectionActions: boolean;
    name: string;
    tags: outputs.GetManagementGlobalDomainGlobalDomainAssignmentTag[];
    type: string;
    uid: string;
}

export interface GetManagementGlobalDomainGlobalDomainAssignmentTag {
    color: string;
    name: string;
    type: string;
    uid: string;
}

export interface GetManagementGlobalDomainServer {
    active: boolean;
    ipv4Address: string;
    ipv6Address: string;
    multiDomainServer: string;
    name: string;
    skipStartDomainServer: boolean;
    type: string;
}

export interface GetManagementGlobalDomainTag {
    color: string;
    name: string;
    type: string;
    uid: string;
}

export interface GetManagementHttpsRulebaseOrder {
    /**
     * Sorts results by the given field in ascending order.
     */
    asc?: string;
    /**
     * Sorts results by the given field in descending order.
     */
    desc?: string;
}

export interface GetManagementHttpsRulebaseRulebase {
    from: number;
    objectsDictionaries: outputs.GetManagementHttpsRulebaseRulebaseObjectsDictionary[];
    rulebases: outputs.GetManagementHttpsRulebaseRulebaseRulebase[];
    to: number;
    total: number;
}

export interface GetManagementHttpsRulebaseRulebaseObjectsDictionary {
    name: string;
    type: string;
    uid: string;
}

export interface GetManagementHttpsRulebaseRulebaseRulebase {
    action: string;
    blades: string[];
    certificate: string;
    comments: string;
    destinationNegate: boolean;
    destinations: string[];
    enabled: boolean;
    from: number;
    installOns: string[];
    layer: string;
    name: string;
    ruleNumber: number;
    rulebases: outputs.GetManagementHttpsRulebaseRulebaseRulebaseRulebase[];
    serviceNegate: boolean;
    services: string[];
    siteCategories: string[];
    siteCategoryNegate: boolean;
    sourceNegate: boolean;
    sources: string[];
    to: number;
    track: string;
    type: string;
    uid: string;
}

export interface GetManagementHttpsRulebaseRulebaseRulebaseRulebase {
    action: string;
    blades: string[];
    certificate: string;
    comments: string;
    destinationNegate: boolean;
    destinations: string[];
    enabled: boolean;
    installOns: string[];
    layer: string;
    name: string;
    ruleNumber: number;
    serviceNegate: boolean;
    services: string[];
    siteCategories: string[];
    siteCategoryNegate: boolean;
    sourceNegate: boolean;
    sources: string[];
    track: string;
    type: string;
    uid: string;
}

export interface GetManagementIdpAdministratorGroupPermissionsProfile {
    domain: string;
    profile: string;
}

export interface GetManagementInteroperableDeviceGroup {
    color: string;
    name: string;
    type: string;
    uid: string;
}

export interface GetManagementInteroperableDeviceInterface {
    color: string;
    comments: string;
    domainsToProcesses: string[];
    ignoreErrors: boolean;
    ignoreWarnings: boolean;
    ipv4Address: string;
    ipv4MaskLength: string;
    ipv4NetworkMask: string;
    ipv6Address: string;
    ipv6MaskLength: string;
    ipv6NetworkMask: string;
    name: string;
    tags: string[];
    topology: string;
    topologySettings: outputs.GetManagementInteroperableDeviceInterfaceTopologySetting[];
}

export interface GetManagementInteroperableDeviceInterfaceTopologySetting {
    interfaceLeadsToDmz: boolean;
    ipAddressBehindThisInterface: string;
    specificNetwork: string;
}

export interface GetManagementIpsProtectionExtendedAttributeValue {
    name: string;
    uid: string;
}

export interface GetManagementIpsUpdateScheduleRecurrence {
    days: string[];
    minutes: number;
    pattern: string;
    weekdays: string[];
}

export interface GetManagementLsmClusterDynamicObject {
    comments: string;
    name: string;
    resolvedIpAddresses: outputs.GetManagementLsmClusterDynamicObjectResolvedIpAddress[];
    uid: string;
}

export interface GetManagementLsmClusterDynamicObjectResolvedIpAddress {
    ipv4Address: string;
    ipv4AddressRanges: outputs.GetManagementLsmClusterDynamicObjectResolvedIpAddressIpv4AddressRange[];
}

export interface GetManagementLsmClusterDynamicObjectResolvedIpAddressIpv4AddressRange {
    fromIpv4Address: string;
    toIpv4Address: string;
}

export interface GetManagementLsmClusterInterface {
    /**
     * IP address override. Net mask is defined by the attached LSM profile.
     */
    clusterIpAddressOverride: string;
    /**
     * IP address override. Net mask is defined by the attached LSM profile.
     */
    ipAddressOverride?: string;
    /**
     * Member network override. Net mask is defined by the attached LSM profile.
     */
    memberNetworkOverride?: string;
    /**
     * Interface name.
     */
    name?: string;
    /**
     * New name. Overrides the interface name on profile.
     */
    newName: string;
}

export interface GetManagementLsmClusterMember {
    deviceId: string;
    interfaces: outputs.GetManagementLsmClusterMemberInterface[];
    mainIpAddress: string;
    memberName: string;
    memberUid: string;
    provisioningSettings: outputs.GetManagementLsmClusterMemberProvisioningSetting[];
    provisioningState: string;
    sicName: string;
    sicState: string;
}

export interface GetManagementLsmClusterMemberInterface {
    ipAddress: string;
    name: string;
}

export interface GetManagementLsmClusterMemberProvisioningSetting {
    provisioningProfile: string;
}

export interface GetManagementLsmClusterProfileAdvancedSetting {
    connectionPersistence: string;
    sams: outputs.GetManagementLsmClusterProfileAdvancedSettingSam[];
}

export interface GetManagementLsmClusterProfileAdvancedSettingSam {
    forwardToOtherSamServers: boolean;
    purgeSamFile: {[key: string]: string};
    useEarlyVersions: {[key: string]: string};
}

export interface GetManagementLsmClusterProfileApplicationControlAndUrlFilteringSetting {
    globalSettingsMode: string;
    overrideGlobalSettings: {[key: string]: string};
}

export interface GetManagementLsmClusterProfileClusterInterface {
    name: string;
    networkAddress: string;
    networkMask: string;
    networkType: string;
    topology: {[key: string]: string};
}

export interface GetManagementLsmClusterProfileClusterMember {
    comments: string;
    ipAddress: string;
    name: string;
    uid: string;
}

export interface GetManagementLsmClusterProfileGroup {
    color: string;
    name: string;
    type: string;
    uid: string;
}

export interface GetManagementLsmClusterProfileHttpsInspection {
    bypassOnFailure: {[key: string]: string};
    denyExpiredServerCert: {[key: string]: string};
    denyRevokedServerCert: {[key: string]: string};
    denyUntrustedServerCert: {[key: string]: string};
    siteCategorizationAllowMode: {[key: string]: string};
}

export interface GetManagementLsmClusterTopology {
    manualVpnDomains: outputs.GetManagementLsmClusterTopologyManualVpnDomain[];
    vpnDomain: string;
}

export interface GetManagementLsmClusterTopologyManualVpnDomain {
    comments: string;
    fromIpv4Address: string;
    toIpv4Address: string;
}

export interface GetManagementLsmGatewayDynamicObject {
    comments: string;
    name: string;
    resolvedIpAddresses: outputs.GetManagementLsmGatewayDynamicObjectResolvedIpAddress[];
    uid: string;
}

export interface GetManagementLsmGatewayDynamicObjectResolvedIpAddress {
    ipv4Address: string;
    ipv4AddressRanges: outputs.GetManagementLsmGatewayDynamicObjectResolvedIpAddressIpv4AddressRange[];
}

export interface GetManagementLsmGatewayDynamicObjectResolvedIpAddressIpv4AddressRange {
    fromIpv4Address: string;
    toIpv4Address: string;
}

export interface GetManagementLsmGatewayProfileAdvancedSetting {
    connectionPersistence: string;
    sams: outputs.GetManagementLsmGatewayProfileAdvancedSettingSam[];
}

export interface GetManagementLsmGatewayProfileAdvancedSettingSam {
    forwardToOtherSamServers: boolean;
    purgeSamFile: {[key: string]: string};
    useEarlyVersions: {[key: string]: string};
}

export interface GetManagementLsmGatewayProfileApplicationControlAndUrlFilteringSetting {
    globalSettingsMode: string;
    overrideGlobalSettings: {[key: string]: string};
}

export interface GetManagementLsmGatewayProfileGroup {
    color: string;
    name: string;
    type: string;
    uid: string;
}

export interface GetManagementLsmGatewayProfileHttpsInspection {
    bypassOnFailure: {[key: string]: string};
    denyExpiredServerCert: {[key: string]: string};
    denyRevokedServerCert: {[key: string]: string};
    denyUntrustedServerCert: {[key: string]: string};
    siteCategorizationAllowMode: {[key: string]: string};
}

export interface GetManagementLsmGatewayTopology {
    manualVpnDomains: outputs.GetManagementLsmGatewayTopologyManualVpnDomain[];
    vpnDomain: string;
}

export interface GetManagementLsmGatewayTopologyManualVpnDomain {
    comments: string;
    fromIpv4Address: string;
    toIpv4Address: string;
}

export interface GetManagementNatRulebaseOrder {
    /**
     * Sorts results by the given field in ascending order.
     */
    asc?: string;
    /**
     * Sorts results by the given field in descending order.
     */
    desc?: string;
}

export interface GetManagementNatRulebaseRulebase {
    from: number;
    objectsDictionaries: outputs.GetManagementNatRulebaseRulebaseObjectsDictionary[];
    rulebases: outputs.GetManagementNatRulebaseRulebaseRulebase[];
    to: number;
    total: number;
}

export interface GetManagementNatRulebaseRulebaseObjectsDictionary {
    name: string;
    type: string;
    uid: string;
}

export interface GetManagementNatRulebaseRulebaseRulebase {
    autoGenerated: boolean;
    comments: string;
    enabled: boolean;
    installOns: string[];
    method: string;
    name: string;
    originalDestination: string;
    originalService: string;
    originalSource: string;
    ruleNumber: number;
    rulebases: outputs.GetManagementNatRulebaseRulebaseRulebaseRulebase[];
    translatedDestination: string;
    translatedService: string;
    translatedSource: string;
    type: string;
    uid: string;
}

export interface GetManagementNatRulebaseRulebaseRulebaseRulebase {
    autoGenerated: boolean;
    comments: string;
    enabled: boolean;
    installOns: string[];
    method: string;
    name: string;
    originalDestination: string;
    originalService: string;
    originalSource: string;
    ruleNumber: number;
    translatedDestination: string;
    translatedService: string;
    translatedSource: string;
    type: string;
    uid: string;
}

export interface GetManagementNetworkFeedCustomHeader {
    headerName: string;
    headerValue: string;
}

export interface GetManagementNutanixDataCenterServerProperty {
    name: string;
    value: string;
}

export interface GetManagementObjectsObject {
    color: string;
    name: string;
    type: string;
    uid: string;
}

export interface GetManagementObjectsOrder {
    /**
     * Sorts results by the given field in ascending order.
     */
    asc?: string;
    /**
     * Sorts results by the given field in descending order.
     */
    desc?: string;
}

export interface GetManagementOracleCloudDataCenterServerProperty {
    name: string;
    value: string;
}

export interface GetManagementProvisioningProfileGroup {
    color: string;
    name: string;
    type: string;
    uid: string;
}

export interface GetManagementProvisioningProfileHost {
    hosts: outputs.GetManagementProvisioningProfileHostHost[];
    manageSettings: string;
    overrideSettings: string;
}

export interface GetManagementProvisioningProfileHostHost {
    hostIpAddress: string;
    hostName: string;
}

export interface GetManagementProvisioningProfileHotspot {
    allowUsersFromSpecificGroup: boolean;
    allowedUsersGroups: string[];
    displayTermsOfUse: boolean;
    enabled: boolean;
    manageSettings: string;
    overrideSettings: string;
    portalMessage: string;
    portalTitle: string;
    requireAuthentication: boolean;
    termsOfUse: string;
}

export interface GetManagementProvisioningProfileRadius {
    allowAdministratorsFromSpecificRadiusGroupOnly: boolean;
    allowedRadiusGroups: string[];
    enabled: boolean;
    manageSettings: string;
    overrideSettings: string;
    radiusServers: outputs.GetManagementProvisioningProfileRadiusRadiusServer[];
}

export interface GetManagementProvisioningProfileRadiusRadiusServer {
    radiusServerName: string;
}

export interface GetManagementServiceGtpRadioAccessTechnology {
    eutran: boolean;
    gan: boolean;
    geran: boolean;
    hspaEvolution: boolean;
    nbIot: boolean;
    otherTypesRanges: outputs.GetManagementServiceGtpRadioAccessTechnologyOtherTypesRange[];
    utran: boolean;
    virtual: boolean;
    wlan: boolean;
}

export interface GetManagementServiceGtpRadioAccessTechnologyOtherTypesRange {
    enable: boolean;
    types: string;
}

export interface GetManagementServiceGtpSelectionMode {
    enable: boolean;
    mode: number;
}

export interface GetManagementShowObjectsObject {
    domain: {[key: string]: string};
    name: string;
    type: string;
    uid: string;
}

export interface GetManagementShowObjectsOrder {
    /**
     * Sorts results by the given field in ascending order.
     */
    asc?: string;
    /**
     * Sorts results by the given field in descending order.
     */
    desc?: string;
}

export interface GetManagementShowUpdatableObjectsRepositoryContentObject {
    additionalProperties: {[key: string]: string};
    nameInUpdatableObjectsRepository: string;
    uidInUpdatableObjectsRepository: string;
    updatableObjects: outputs.GetManagementShowUpdatableObjectsRepositoryContentObjectUpdatableObject[];
}

export interface GetManagementShowUpdatableObjectsRepositoryContentObjectUpdatableObject {
    name: string;
    type: string;
    uid: string;
}

export interface GetManagementShowUpdatableObjectsRepositoryContentOrder {
    /**
     * Sorts results by the given field in ascending order.
     */
    asc?: string;
    /**
     * Sorts results by the given field in descending order.
     */
    desc?: string;
}

export interface GetManagementSimpleClusterAdvancedSetting {
    connectionPersistence: string;
    sams: outputs.GetManagementSimpleClusterAdvancedSettingSam[];
}

export interface GetManagementSimpleClusterAdvancedSettingSam {
    forwardToOtherSamServers: boolean;
    purgeSamFiles: outputs.GetManagementSimpleClusterAdvancedSettingSamPurgeSamFile[];
    useEarlyVersions: outputs.GetManagementSimpleClusterAdvancedSettingSamUseEarlyVersion[];
}

export interface GetManagementSimpleClusterAdvancedSettingSamPurgeSamFile {
    enabled: boolean;
    purgeWhenSizeReachesTo: number;
}

export interface GetManagementSimpleClusterAdvancedSettingSamUseEarlyVersion {
    compatibilityMode: string;
    enabled: boolean;
}

export interface GetManagementSimpleClusterHttpsInspection {
    bypassOnFailures: outputs.GetManagementSimpleClusterHttpsInspectionBypassOnFailure[];
    denyExpiredServerCerts: outputs.GetManagementSimpleClusterHttpsInspectionDenyExpiredServerCert[];
    denyRevokedServerCerts: outputs.GetManagementSimpleClusterHttpsInspectionDenyRevokedServerCert[];
    denyUntrustedServerCerts: outputs.GetManagementSimpleClusterHttpsInspectionDenyUntrustedServerCert[];
    siteCategorizationAllowModes: outputs.GetManagementSimpleClusterHttpsInspectionSiteCategorizationAllowMode[];
}

export interface GetManagementSimpleClusterHttpsInspectionBypassOnFailure {
    overrideProfile: boolean;
    value: boolean;
}

export interface GetManagementSimpleClusterHttpsInspectionDenyExpiredServerCert {
    overrideProfile: boolean;
    value: boolean;
}

export interface GetManagementSimpleClusterHttpsInspectionDenyRevokedServerCert {
    overrideProfile: boolean;
    value: boolean;
}

export interface GetManagementSimpleClusterHttpsInspectionDenyUntrustedServerCert {
    overrideProfile: boolean;
    value: boolean;
}

export interface GetManagementSimpleClusterHttpsInspectionSiteCategorizationAllowMode {
    overrideProfile: boolean;
    value: string;
}

export interface GetManagementSimpleClusterIdentityAwarenessSetting {
    browserBasedAuthentication: boolean;
    browserBasedAuthenticationSettings: outputs.GetManagementSimpleClusterIdentityAwarenessSettingBrowserBasedAuthenticationSetting[];
    identityAgent: boolean;
    identityAgentSettings: outputs.GetManagementSimpleClusterIdentityAwarenessSettingIdentityAgentSetting[];
    identityCollector: boolean;
    identityCollectorSettings: outputs.GetManagementSimpleClusterIdentityAwarenessSettingIdentityCollectorSetting[];
    identitySharingSettings: outputs.GetManagementSimpleClusterIdentityAwarenessSettingIdentitySharingSetting[];
    proxySettings: outputs.GetManagementSimpleClusterIdentityAwarenessSettingProxySetting[];
    remoteAccess: boolean;
}

export interface GetManagementSimpleClusterIdentityAwarenessSettingBrowserBasedAuthenticationSetting {
    authenticationSettings: outputs.GetManagementSimpleClusterIdentityAwarenessSettingBrowserBasedAuthenticationSettingAuthenticationSetting[];
    browserBasedAuthenticationPortalSettings: outputs.GetManagementSimpleClusterIdentityAwarenessSettingBrowserBasedAuthenticationSettingBrowserBasedAuthenticationPortalSetting[];
}

export interface GetManagementSimpleClusterIdentityAwarenessSettingBrowserBasedAuthenticationSettingAuthenticationSetting {
    authenticationMethod: string;
    identityProviders: string[];
    radius: string;
    usersDirectories: outputs.GetManagementSimpleClusterIdentityAwarenessSettingBrowserBasedAuthenticationSettingAuthenticationSettingUsersDirectory[];
}

export interface GetManagementSimpleClusterIdentityAwarenessSettingBrowserBasedAuthenticationSettingAuthenticationSettingUsersDirectory {
    externalUserProfile: boolean;
    internalUsers: boolean;
    specifics: string[];
    usersFromExternalDirectories: string;
}

export interface GetManagementSimpleClusterIdentityAwarenessSettingBrowserBasedAuthenticationSettingBrowserBasedAuthenticationPortalSetting {
    accessibilities: outputs.GetManagementSimpleClusterIdentityAwarenessSettingBrowserBasedAuthenticationSettingBrowserBasedAuthenticationPortalSettingAccessibility[];
    certificateSettings: outputs.GetManagementSimpleClusterIdentityAwarenessSettingBrowserBasedAuthenticationSettingBrowserBasedAuthenticationPortalSettingCertificateSetting[];
    portalWebSettings: outputs.GetManagementSimpleClusterIdentityAwarenessSettingBrowserBasedAuthenticationSettingBrowserBasedAuthenticationPortalSettingPortalWebSetting[];
}

export interface GetManagementSimpleClusterIdentityAwarenessSettingBrowserBasedAuthenticationSettingBrowserBasedAuthenticationPortalSettingAccessibility {
    allowAccessFrom: string;
    internalAccessSettings: outputs.GetManagementSimpleClusterIdentityAwarenessSettingBrowserBasedAuthenticationSettingBrowserBasedAuthenticationPortalSettingAccessibilityInternalAccessSetting[];
}

export interface GetManagementSimpleClusterIdentityAwarenessSettingBrowserBasedAuthenticationSettingBrowserBasedAuthenticationPortalSettingAccessibilityInternalAccessSetting {
    dmz: boolean;
    undefined: boolean;
    vpn: boolean;
}

export interface GetManagementSimpleClusterIdentityAwarenessSettingBrowserBasedAuthenticationSettingBrowserBasedAuthenticationPortalSettingCertificateSetting {
    base64Certificate: string;
    base64Password: string;
}

export interface GetManagementSimpleClusterIdentityAwarenessSettingBrowserBasedAuthenticationSettingBrowserBasedAuthenticationPortalSettingPortalWebSetting {
    aliases: string[];
    mainUrl: string;
}

export interface GetManagementSimpleClusterIdentityAwarenessSettingIdentityAgentSetting {
    agentsIntervalKeepalive: number;
    authenticationSettings: outputs.GetManagementSimpleClusterIdentityAwarenessSettingIdentityAgentSettingAuthenticationSetting[];
    identityAgentPortalSettings: outputs.GetManagementSimpleClusterIdentityAwarenessSettingIdentityAgentSettingIdentityAgentPortalSetting[];
    userReauthenticateInterval: number;
}

export interface GetManagementSimpleClusterIdentityAwarenessSettingIdentityAgentSettingAuthenticationSetting {
    authenticationMethod: string;
    radius: string;
    usersDirectories: outputs.GetManagementSimpleClusterIdentityAwarenessSettingIdentityAgentSettingAuthenticationSettingUsersDirectory[];
}

export interface GetManagementSimpleClusterIdentityAwarenessSettingIdentityAgentSettingAuthenticationSettingUsersDirectory {
    externalUserProfile: boolean;
    internalUsers: boolean;
    specifics: string[];
    usersFromExternalDirectories: string;
}

export interface GetManagementSimpleClusterIdentityAwarenessSettingIdentityAgentSettingIdentityAgentPortalSetting {
    accessibilities: outputs.GetManagementSimpleClusterIdentityAwarenessSettingIdentityAgentSettingIdentityAgentPortalSettingAccessibility[];
}

export interface GetManagementSimpleClusterIdentityAwarenessSettingIdentityAgentSettingIdentityAgentPortalSettingAccessibility {
    allowAccessFrom: string;
    internalAccessSettings: outputs.GetManagementSimpleClusterIdentityAwarenessSettingIdentityAgentSettingIdentityAgentPortalSettingAccessibilityInternalAccessSetting[];
}

export interface GetManagementSimpleClusterIdentityAwarenessSettingIdentityAgentSettingIdentityAgentPortalSettingAccessibilityInternalAccessSetting {
    dmz: boolean;
    undefined: boolean;
    vpn: boolean;
}

export interface GetManagementSimpleClusterIdentityAwarenessSettingIdentityCollectorSetting {
    authenticationSettings: outputs.GetManagementSimpleClusterIdentityAwarenessSettingIdentityCollectorSettingAuthenticationSetting[];
    authorizedClients: outputs.GetManagementSimpleClusterIdentityAwarenessSettingIdentityCollectorSettingAuthorizedClient[];
    clientAccessPermissions: outputs.GetManagementSimpleClusterIdentityAwarenessSettingIdentityCollectorSettingClientAccessPermission[];
}

export interface GetManagementSimpleClusterIdentityAwarenessSettingIdentityCollectorSettingAuthenticationSetting {
    usersDirectories: outputs.GetManagementSimpleClusterIdentityAwarenessSettingIdentityCollectorSettingAuthenticationSettingUsersDirectory[];
}

export interface GetManagementSimpleClusterIdentityAwarenessSettingIdentityCollectorSettingAuthenticationSettingUsersDirectory {
    externalUserProfile: boolean;
    internalUsers: boolean;
    specifics: string[];
    usersFromExternalDirectories: string;
}

export interface GetManagementSimpleClusterIdentityAwarenessSettingIdentityCollectorSettingAuthorizedClient {
    client: string;
    clientSecret: string;
}

export interface GetManagementSimpleClusterIdentityAwarenessSettingIdentityCollectorSettingClientAccessPermission {
    accessibilities: outputs.GetManagementSimpleClusterIdentityAwarenessSettingIdentityCollectorSettingClientAccessPermissionAccessibility[];
}

export interface GetManagementSimpleClusterIdentityAwarenessSettingIdentityCollectorSettingClientAccessPermissionAccessibility {
    allowAccessFrom: string;
    internalAccessSettings: outputs.GetManagementSimpleClusterIdentityAwarenessSettingIdentityCollectorSettingClientAccessPermissionAccessibilityInternalAccessSetting[];
}

export interface GetManagementSimpleClusterIdentityAwarenessSettingIdentityCollectorSettingClientAccessPermissionAccessibilityInternalAccessSetting {
    dmz: boolean;
    undefined: boolean;
    vpn: boolean;
}

export interface GetManagementSimpleClusterIdentityAwarenessSettingIdentitySharingSetting {
    receiveFromOtherGateways: boolean;
    receiveFroms: string[];
    shareWithOtherGateways: boolean;
}

export interface GetManagementSimpleClusterIdentityAwarenessSettingProxySetting {
    detectUsingXForwardFor: boolean;
}

export interface GetManagementSimpleClusterInterface {
    antiSpoofing: boolean;
    antiSpoofingSettings: {[key: string]: string};
    color: string;
    comments: string;
    interfaceType: string;
    ipv4Address: string;
    ipv4MaskLength: string;
    ipv4NetworkMask: string;
    ipv6Address: string;
    ipv6MaskLength: string;
    ipv6NetworkMask: string;
    multicastAddress: string;
    multicastAddressType: string;
    name: string;
    securityZone: boolean;
    securityZoneSettings: {[key: string]: string};
    topology: string;
    topologyAutomaticCalculation: string;
    topologySettings: {[key: string]: string};
}

export interface GetManagementSimpleClusterMember {
    interfaces: outputs.GetManagementSimpleClusterMemberInterface[];
    ipAddress: string;
    name: string;
    sicMessage: string;
    sicState: string;
}

export interface GetManagementSimpleClusterMemberInterface {
    ipv4Address: string;
    ipv4MaskLength: string;
    ipv4NetworkMask: string;
    ipv6Address: string;
    ipv6MaskLength: string;
    ipv6NetworkMask: string;
    name: string;
}

export interface GetManagementSimpleClusterPlatformPortalSetting {
    accessibilities: outputs.GetManagementSimpleClusterPlatformPortalSettingAccessibility[];
    certificateSettings: outputs.GetManagementSimpleClusterPlatformPortalSettingCertificateSetting[];
    portalWebSettings: outputs.GetManagementSimpleClusterPlatformPortalSettingPortalWebSetting[];
}

export interface GetManagementSimpleClusterPlatformPortalSettingAccessibility {
    allowAccessFrom: string;
    internalAccessSettings: outputs.GetManagementSimpleClusterPlatformPortalSettingAccessibilityInternalAccessSetting[];
}

export interface GetManagementSimpleClusterPlatformPortalSettingAccessibilityInternalAccessSetting {
    dmz: boolean;
    undefined: boolean;
    vpn: boolean;
}

export interface GetManagementSimpleClusterPlatformPortalSettingCertificateSetting {
    base64Certificate: string;
    base64Password: string;
}

export interface GetManagementSimpleClusterPlatformPortalSettingPortalWebSetting {
    aliases: string[];
    mainUrl: string;
}

export interface GetManagementSimpleClusterUsercheckPortalSetting {
    accessibilities: outputs.GetManagementSimpleClusterUsercheckPortalSettingAccessibility[];
    certificateSettings: outputs.GetManagementSimpleClusterUsercheckPortalSettingCertificateSetting[];
    enabled: boolean;
    portalWebSettings: outputs.GetManagementSimpleClusterUsercheckPortalSettingPortalWebSetting[];
}

export interface GetManagementSimpleClusterUsercheckPortalSettingAccessibility {
    allowAccessFrom: string;
    internalAccessSettings: outputs.GetManagementSimpleClusterUsercheckPortalSettingAccessibilityInternalAccessSetting[];
}

export interface GetManagementSimpleClusterUsercheckPortalSettingAccessibilityInternalAccessSetting {
    dmz: boolean;
    undefined: boolean;
    vpn: boolean;
}

export interface GetManagementSimpleClusterUsercheckPortalSettingCertificateSetting {
    base64Certificate: string;
    base64Password: string;
}

export interface GetManagementSimpleClusterUsercheckPortalSettingPortalWebSetting {
    aliases: string[];
    mainUrl: string;
}

export interface GetManagementSimpleGatewayAdvancedSetting {
    connectionPersistence: string;
    sams: outputs.GetManagementSimpleGatewayAdvancedSettingSam[];
}

export interface GetManagementSimpleGatewayAdvancedSettingSam {
    forwardToOtherSamServers: boolean;
    purgeSamFiles: outputs.GetManagementSimpleGatewayAdvancedSettingSamPurgeSamFile[];
    useEarlyVersions: outputs.GetManagementSimpleGatewayAdvancedSettingSamUseEarlyVersion[];
}

export interface GetManagementSimpleGatewayAdvancedSettingSamPurgeSamFile {
    enabled: boolean;
    purgeWhenSizeReachesTo: number;
}

export interface GetManagementSimpleGatewayAdvancedSettingSamUseEarlyVersion {
    compatibilityMode: string;
    enabled: boolean;
}

export interface GetManagementSimpleGatewayApplicationControlAndUrlFilteringSetting {
    globalSettingsMode: string;
    overrideGlobalSettings: {[key: string]: string};
}

export interface GetManagementSimpleGatewayHttpsInspection {
    bypassOnFailures: outputs.GetManagementSimpleGatewayHttpsInspectionBypassOnFailure[];
    denyExpiredServerCerts: outputs.GetManagementSimpleGatewayHttpsInspectionDenyExpiredServerCert[];
    denyRevokedServerCerts: outputs.GetManagementSimpleGatewayHttpsInspectionDenyRevokedServerCert[];
    denyUntrustedServerCerts: outputs.GetManagementSimpleGatewayHttpsInspectionDenyUntrustedServerCert[];
    siteCategorizationAllowModes: outputs.GetManagementSimpleGatewayHttpsInspectionSiteCategorizationAllowMode[];
}

export interface GetManagementSimpleGatewayHttpsInspectionBypassOnFailure {
    overrideProfile: boolean;
    value: boolean;
}

export interface GetManagementSimpleGatewayHttpsInspectionDenyExpiredServerCert {
    overrideProfile: boolean;
    value: boolean;
}

export interface GetManagementSimpleGatewayHttpsInspectionDenyRevokedServerCert {
    overrideProfile: boolean;
    value: boolean;
}

export interface GetManagementSimpleGatewayHttpsInspectionDenyUntrustedServerCert {
    overrideProfile: boolean;
    value: boolean;
}

export interface GetManagementSimpleGatewayHttpsInspectionSiteCategorizationAllowMode {
    overrideProfile: boolean;
    value: string;
}

export interface GetManagementSimpleGatewayIdentityAwarenessSetting {
    browserBasedAuthentication: boolean;
    browserBasedAuthenticationSettings: outputs.GetManagementSimpleGatewayIdentityAwarenessSettingBrowserBasedAuthenticationSetting[];
    identityAgent: boolean;
    identityAgentSettings: outputs.GetManagementSimpleGatewayIdentityAwarenessSettingIdentityAgentSetting[];
    identityCollector: boolean;
    identityCollectorSettings: outputs.GetManagementSimpleGatewayIdentityAwarenessSettingIdentityCollectorSetting[];
    identitySharingSettings: outputs.GetManagementSimpleGatewayIdentityAwarenessSettingIdentitySharingSetting[];
    proxySettings: outputs.GetManagementSimpleGatewayIdentityAwarenessSettingProxySetting[];
    remoteAccess: boolean;
}

export interface GetManagementSimpleGatewayIdentityAwarenessSettingBrowserBasedAuthenticationSetting {
    authenticationSettings: outputs.GetManagementSimpleGatewayIdentityAwarenessSettingBrowserBasedAuthenticationSettingAuthenticationSetting[];
    browserBasedAuthenticationPortalSettings: outputs.GetManagementSimpleGatewayIdentityAwarenessSettingBrowserBasedAuthenticationSettingBrowserBasedAuthenticationPortalSetting[];
}

export interface GetManagementSimpleGatewayIdentityAwarenessSettingBrowserBasedAuthenticationSettingAuthenticationSetting {
    authenticationMethod: string;
    identityProviders: string[];
    radius: string;
    usersDirectories: outputs.GetManagementSimpleGatewayIdentityAwarenessSettingBrowserBasedAuthenticationSettingAuthenticationSettingUsersDirectory[];
}

export interface GetManagementSimpleGatewayIdentityAwarenessSettingBrowserBasedAuthenticationSettingAuthenticationSettingUsersDirectory {
    externalUserProfile: boolean;
    internalUsers: boolean;
    specifics: string[];
    usersFromExternalDirectories: string;
}

export interface GetManagementSimpleGatewayIdentityAwarenessSettingBrowserBasedAuthenticationSettingBrowserBasedAuthenticationPortalSetting {
    accessibilities: outputs.GetManagementSimpleGatewayIdentityAwarenessSettingBrowserBasedAuthenticationSettingBrowserBasedAuthenticationPortalSettingAccessibility[];
    certificateSettings: outputs.GetManagementSimpleGatewayIdentityAwarenessSettingBrowserBasedAuthenticationSettingBrowserBasedAuthenticationPortalSettingCertificateSetting[];
    portalWebSettings: outputs.GetManagementSimpleGatewayIdentityAwarenessSettingBrowserBasedAuthenticationSettingBrowserBasedAuthenticationPortalSettingPortalWebSetting[];
}

export interface GetManagementSimpleGatewayIdentityAwarenessSettingBrowserBasedAuthenticationSettingBrowserBasedAuthenticationPortalSettingAccessibility {
    allowAccessFrom: string;
    internalAccessSettings: outputs.GetManagementSimpleGatewayIdentityAwarenessSettingBrowserBasedAuthenticationSettingBrowserBasedAuthenticationPortalSettingAccessibilityInternalAccessSetting[];
}

export interface GetManagementSimpleGatewayIdentityAwarenessSettingBrowserBasedAuthenticationSettingBrowserBasedAuthenticationPortalSettingAccessibilityInternalAccessSetting {
    dmz: boolean;
    undefined: boolean;
    vpn: boolean;
}

export interface GetManagementSimpleGatewayIdentityAwarenessSettingBrowserBasedAuthenticationSettingBrowserBasedAuthenticationPortalSettingCertificateSetting {
    base64Certificate: string;
    base64Password: string;
}

export interface GetManagementSimpleGatewayIdentityAwarenessSettingBrowserBasedAuthenticationSettingBrowserBasedAuthenticationPortalSettingPortalWebSetting {
    aliases: string[];
    mainUrl: string;
}

export interface GetManagementSimpleGatewayIdentityAwarenessSettingIdentityAgentSetting {
    agentsIntervalKeepalive: number;
    authenticationSettings: outputs.GetManagementSimpleGatewayIdentityAwarenessSettingIdentityAgentSettingAuthenticationSetting[];
    identityAgentPortalSettings: outputs.GetManagementSimpleGatewayIdentityAwarenessSettingIdentityAgentSettingIdentityAgentPortalSetting[];
    userReauthenticateInterval: number;
}

export interface GetManagementSimpleGatewayIdentityAwarenessSettingIdentityAgentSettingAuthenticationSetting {
    authenticationMethod: string;
    radius: string;
    usersDirectories: outputs.GetManagementSimpleGatewayIdentityAwarenessSettingIdentityAgentSettingAuthenticationSettingUsersDirectory[];
}

export interface GetManagementSimpleGatewayIdentityAwarenessSettingIdentityAgentSettingAuthenticationSettingUsersDirectory {
    externalUserProfile: boolean;
    internalUsers: boolean;
    specifics: string[];
    usersFromExternalDirectories: string;
}

export interface GetManagementSimpleGatewayIdentityAwarenessSettingIdentityAgentSettingIdentityAgentPortalSetting {
    accessibilities: outputs.GetManagementSimpleGatewayIdentityAwarenessSettingIdentityAgentSettingIdentityAgentPortalSettingAccessibility[];
}

export interface GetManagementSimpleGatewayIdentityAwarenessSettingIdentityAgentSettingIdentityAgentPortalSettingAccessibility {
    allowAccessFrom: string;
    internalAccessSettings: outputs.GetManagementSimpleGatewayIdentityAwarenessSettingIdentityAgentSettingIdentityAgentPortalSettingAccessibilityInternalAccessSetting[];
}

export interface GetManagementSimpleGatewayIdentityAwarenessSettingIdentityAgentSettingIdentityAgentPortalSettingAccessibilityInternalAccessSetting {
    dmz: boolean;
    undefined: boolean;
    vpn: boolean;
}

export interface GetManagementSimpleGatewayIdentityAwarenessSettingIdentityCollectorSetting {
    authenticationSettings: outputs.GetManagementSimpleGatewayIdentityAwarenessSettingIdentityCollectorSettingAuthenticationSetting[];
    authorizedClients: outputs.GetManagementSimpleGatewayIdentityAwarenessSettingIdentityCollectorSettingAuthorizedClient[];
    clientAccessPermissions: outputs.GetManagementSimpleGatewayIdentityAwarenessSettingIdentityCollectorSettingClientAccessPermission[];
}

export interface GetManagementSimpleGatewayIdentityAwarenessSettingIdentityCollectorSettingAuthenticationSetting {
    usersDirectories: outputs.GetManagementSimpleGatewayIdentityAwarenessSettingIdentityCollectorSettingAuthenticationSettingUsersDirectory[];
}

export interface GetManagementSimpleGatewayIdentityAwarenessSettingIdentityCollectorSettingAuthenticationSettingUsersDirectory {
    externalUserProfile: boolean;
    internalUsers: boolean;
    specifics: string[];
    usersFromExternalDirectories: string;
}

export interface GetManagementSimpleGatewayIdentityAwarenessSettingIdentityCollectorSettingAuthorizedClient {
    client: string;
    clientSecret: string;
}

export interface GetManagementSimpleGatewayIdentityAwarenessSettingIdentityCollectorSettingClientAccessPermission {
    accessibilities: outputs.GetManagementSimpleGatewayIdentityAwarenessSettingIdentityCollectorSettingClientAccessPermissionAccessibility[];
}

export interface GetManagementSimpleGatewayIdentityAwarenessSettingIdentityCollectorSettingClientAccessPermissionAccessibility {
    allowAccessFrom: string;
    internalAccessSettings: outputs.GetManagementSimpleGatewayIdentityAwarenessSettingIdentityCollectorSettingClientAccessPermissionAccessibilityInternalAccessSetting[];
}

export interface GetManagementSimpleGatewayIdentityAwarenessSettingIdentityCollectorSettingClientAccessPermissionAccessibilityInternalAccessSetting {
    dmz: boolean;
    undefined: boolean;
    vpn: boolean;
}

export interface GetManagementSimpleGatewayIdentityAwarenessSettingIdentitySharingSetting {
    receiveFromOtherGateways: boolean;
    receiveFroms: string[];
    shareWithOtherGateways: boolean;
}

export interface GetManagementSimpleGatewayIdentityAwarenessSettingProxySetting {
    detectUsingXForwardFor: boolean;
}

export interface GetManagementSimpleGatewayInterface {
    antiSpoofing: boolean;
    antiSpoofingSettings: {[key: string]: string};
    color: string;
    comments: string;
    ipv4Address: string;
    ipv4MaskLength: string;
    ipv4NetworkMask: string;
    ipv6Address: string;
    ipv6MaskLength: string;
    ipv6NetworkMask: string;
    name: string;
    securityZone: boolean;
    securityZoneSettings: {[key: string]: string};
    topology: string;
    topologyAutomaticCalculation: string;
    topologySettings: {[key: string]: string};
}

export interface GetManagementSimpleGatewayPlatformPortalSetting {
    accessibilities: outputs.GetManagementSimpleGatewayPlatformPortalSettingAccessibility[];
    certificateSettings: outputs.GetManagementSimpleGatewayPlatformPortalSettingCertificateSetting[];
    portalWebSettings: outputs.GetManagementSimpleGatewayPlatformPortalSettingPortalWebSetting[];
}

export interface GetManagementSimpleGatewayPlatformPortalSettingAccessibility {
    allowAccessFrom: string;
    internalAccessSettings: outputs.GetManagementSimpleGatewayPlatformPortalSettingAccessibilityInternalAccessSetting[];
}

export interface GetManagementSimpleGatewayPlatformPortalSettingAccessibilityInternalAccessSetting {
    dmz: boolean;
    undefined: boolean;
    vpn: boolean;
}

export interface GetManagementSimpleGatewayPlatformPortalSettingCertificateSetting {
    base64Certificate: string;
    base64Password: string;
}

export interface GetManagementSimpleGatewayPlatformPortalSettingPortalWebSetting {
    aliases: string[];
    mainUrl: string;
}

export interface GetManagementSimpleGatewayUsercheckPortalSetting {
    accessibilities: outputs.GetManagementSimpleGatewayUsercheckPortalSettingAccessibility[];
    certificateSettings: outputs.GetManagementSimpleGatewayUsercheckPortalSettingCertificateSetting[];
    enabled: boolean;
    portalWebSettings: outputs.GetManagementSimpleGatewayUsercheckPortalSettingPortalWebSetting[];
}

export interface GetManagementSimpleGatewayUsercheckPortalSettingAccessibility {
    allowAccessFrom: string;
    internalAccessSettings: outputs.GetManagementSimpleGatewayUsercheckPortalSettingAccessibilityInternalAccessSetting[];
}

export interface GetManagementSimpleGatewayUsercheckPortalSettingAccessibilityInternalAccessSetting {
    dmz: boolean;
    undefined: boolean;
    vpn: boolean;
}

export interface GetManagementSimpleGatewayUsercheckPortalSettingCertificateSetting {
    base64Certificate: string;
    base64Password: string;
}

export interface GetManagementSimpleGatewayUsercheckPortalSettingPortalWebSetting {
    aliases: string[];
    mainUrl: string;
}

export interface GetManagementSmartTaskAction {
    runScripts: outputs.GetManagementSmartTaskActionRunScript[];
    sendMails: outputs.GetManagementSmartTaskActionSendMail[];
    sendWebRequests: outputs.GetManagementSmartTaskActionSendWebRequest[];
}

export interface GetManagementSmartTaskActionRunScript {
    repositoryScript: string;
    targets: string[];
    timeOut: number;
}

export interface GetManagementSmartTaskActionSendMail {
    mailSettings: outputs.GetManagementSmartTaskActionSendMailMailSetting[];
    smtpServers: outputs.GetManagementSmartTaskActionSendMailSmtpServer[];
}

export interface GetManagementSmartTaskActionSendMailMailSetting {
    attachment: string;
    bccRecipients: string;
    body: string;
    ccRecipients: string;
    recipients: string;
    senderEmail: string;
    subject: string;
}

export interface GetManagementSmartTaskActionSendMailSmtpServer {
    authentication: boolean;
    encryption: string;
    name: string;
    port: number;
    server: string;
    username: string;
}

export interface GetManagementSmartTaskActionSendWebRequest {
    fingerprint: string;
    overrideProxy: boolean;
    proxyUrl: string;
    sharedSecret: string;
    timeOut: number;
    url: string;
}

export interface GetManagementTaskTask {
    comments: string;
    progressPercentage: number;
    status: string;
    suppressed: boolean;
    taskId: string;
    taskName: string;
}

export interface GetManagementThreatIocFeedCustomHeader {
    headerName: string;
    headerValue: string;
}

export interface GetManagementThreatProfileActivateProtectionsByExtendedAttribute {
    category: string;
    name: string;
    uid: string;
    values: outputs.GetManagementThreatProfileActivateProtectionsByExtendedAttributeValue[];
}

export interface GetManagementThreatProfileActivateProtectionsByExtendedAttributeValue {
    name: string;
    uid: string;
}

export interface GetManagementThreatProfileDeactivateProtectionsByExtendedAttribute {
    category: string;
    name: string;
    uid: string;
    values: outputs.GetManagementThreatProfileDeactivateProtectionsByExtendedAttributeValue[];
}

export interface GetManagementThreatProfileDeactivateProtectionsByExtendedAttributeValue {
    name: string;
    uid: string;
}

export interface GetManagementThreatProfileIndicatorOverride {
    action: string;
    indicator: string;
}

export interface GetManagementThreatProfileOverride {
    action: string;
    capturePackets: boolean;
    default: {[key: string]: string};
    final: {[key: string]: string};
    protection: string;
    protectionExternalInfos: string[];
    protectionUid: string;
    track: string;
}

export interface GetManagementThreatRuleExceptionRulebaseObjectsDictionary {
    name: string;
    type: string;
    uid: string;
}

export interface GetManagementThreatRuleExceptionRulebaseRulebase {
    from: number;
    name: string;
    rulebases: outputs.GetManagementThreatRuleExceptionRulebaseRulebaseRulebase[];
    to: number;
    type: string;
    uid: string;
}

export interface GetManagementThreatRuleExceptionRulebaseRulebaseRulebase {
    action: string;
    destinationNegate: boolean;
    destinations: string[];
    exceptionNumber: string;
    installOns: string[];
    name: string;
    protectedScopeNegate: boolean;
    protectedScopes: string[];
    protectionOrSites: string[];
    serviceNegate: boolean;
    services: string[];
    sourceNegate: boolean;
    sources: string[];
    track: string;
    type: string;
    uid: string;
}

export interface GetManagementThreatRulebaseOrder {
    /**
     * Sorts results by the given field in ascending order.
     */
    asc?: string;
    /**
     * Sorts results by the given field in descending order.
     */
    desc?: string;
}

export interface GetManagementThreatRulebaseRulebase {
    from: number;
    objectsDictionaries: outputs.GetManagementThreatRulebaseRulebaseObjectsDictionary[];
    rulebases: outputs.GetManagementThreatRulebaseRulebaseRulebase[];
    to: number;
    total: number;
}

export interface GetManagementThreatRulebaseRulebaseObjectsDictionary {
    name: string;
    type: string;
    uid: string;
}

export interface GetManagementThreatRulebaseRulebaseRulebase {
    action: string;
    comments: string;
    destinationNegate: boolean;
    destinations: string[];
    enabled: boolean;
    exceptions: string[];
    exceptionsLayer: string;
    installOns: string[];
    name: string;
    protectedScopeNegate: boolean;
    protectedScopes: string[];
    ruleNumber: number;
    serviceNegate: boolean;
    services: string[];
    sourceNegate: boolean;
    sources: string[];
    track: string;
    trackSettings: {[key: string]: string};
    type: string;
    uid: string;
}

export interface GetManagementTimeHourRange {
    enabled: boolean;
    from: string;
    index: number;
    to: string;
}

export interface GetManagementTimeRecurrence {
    days: string[];
    month: string;
    pattern: string;
    weekdays: string[];
}

export interface GetManagementUpdatableObjectUpdatableObjectMetaInfo {
    updatedOnUpdatableObjectsRepositories: outputs.GetManagementUpdatableObjectUpdatableObjectMetaInfoUpdatedOnUpdatableObjectsRepository[];
}

export interface GetManagementUpdatableObjectUpdatableObjectMetaInfoUpdatedOnUpdatableObjectsRepository {
    iso8601: string;
    posix: number;
}

export interface ManagementAccessRoleMachine {
    /**
     * When source is "Active Directory" use "base-dn" to refine the query in AD database.
     */
    baseDn?: string;
    /**
     * Name or UID of an object selected from source.
     */
    selections?: string[];
    /**
     * Active Directory name or UID or Identity Tag.
     */
    source?: string;
}

export interface ManagementAccessRoleTimeouts {
    create?: string;
}

export interface ManagementAccessRoleUser {
    /**
     * When source is "Active Directory" use "base-dn" to refine the query in AD database.
     */
    baseDn?: string;
    /**
     * Name or UID of an object selected from source.
     */
    selections?: string[];
    /**
     * Active Directory name or UID or Identity Tag  or Internal User Groups or LDAP groups or Guests.
     */
    source?: string;
}

export interface ManagementAccessRuleUserCheck {
    /**
     * N/A
     */
    confirm?: string;
    /**
     * N/A
     */
    customFrequency?: outputs.ManagementAccessRuleUserCheckCustomFrequency;
    /**
     * N/A
     */
    frequency?: string;
    /**
     * N/A
     */
    interaction?: string;
}

export interface ManagementAccessRuleUserCheckCustomFrequency {
    /**
     * N/A
     */
    every?: number;
    /**
     * N/A
     */
    unit?: string;
}

export interface ManagementAdministratorPermissionsProfile {
    domain: string;
    profile: string;
}

export interface ManagementCheckpointHostInterface {
    /**
     * Color of the object. Should be one of existing colors.
     */
    color?: string;
    /**
     * Comments string.
     */
    comments?: string;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted - warnings will also be ignored.
     */
    ignoreErrors?: boolean;
    /**
     * Apply changes ignoring warnings.
     */
    ignoreWarnings?: boolean;
    /**
     * IPv4 network mask length.
     */
    maskLength4?: number;
    /**
     * IPv6 network mask length.
     */
    maskLength6?: number;
    /**
     * Interface name.
     */
    name?: string;
    /**
     * IPv4 network address.
     */
    subnet4?: string;
    /**
     * IPv6 network address.
     */
    subnet6?: string;
    /**
     * IPv4 network mask.
     */
    subnetMask?: string;
}

export interface ManagementCmeAccountsAwsSubAccount {
    /**
     * AWS access key.
     */
    accessKey?: string;
    /**
     * The credentials file.
     */
    credentialsFile?: string;
    /**
     * Unique account name for identification.
     */
    name: string;
    /**
     * AWS secret key.
     */
    secretKey?: string;
    /**
     * AWS sts external id, must exist with sts role.
     */
    stsExternalId?: string;
    /**
     * AWS sts role.
     */
    stsRole?: string;
}

export interface ManagementCmeGwConfigurationsAwsBlades {
    /**
     * Anti-Bot blade
     */
    antiBot: boolean;
    /**
     * Anti-Virus blade
     */
    antiVirus: boolean;
    /**
     * Application Control blade
     */
    applicationControl: boolean;
    /**
     * Autonomous Threat Prevention blade.
     */
    autonomousThreatPrevention: boolean;
    /**
     * Content Awareness blade
     */
    contentAwareness: boolean;
    /**
     * HTTPS Inspection blade
     */
    httpsInspection: boolean;
    /**
     * Identity Awareness blade
     */
    identityAwareness: boolean;
    /**
     * IPS blade
     */
    ips: boolean;
    /**
     * IPsec VPN blade
     */
    ipsecVpn: boolean;
    /**
     * Threat Emulation blade
     */
    threatEmulation: boolean;
    /**
     * URL Filtering blade
     */
    urlFiltering: boolean;
    /**
     * VPN blade
     */
    vpn: boolean;
}

export interface ManagementCmeGwConfigurationsAwsRepositoryGatewayScript {
    /**
     * Script name
     */
    name: string;
    /**
     * Script parameters (separated by space)
     */
    parameters?: string;
    /**
     * Script uid
     */
    uid: string;
}

export interface ManagementCmeGwConfigurationsAzureBlades {
    /**
     * Anti-Bot blade
     */
    antiBot: boolean;
    /**
     * Anti-Virus blade
     */
    antiVirus: boolean;
    /**
     * Application Control blade
     */
    applicationControl: boolean;
    /**
     * Autonomous Threat Prevention blade.
     */
    autonomousThreatPrevention: boolean;
    /**
     * Content Awareness blade
     */
    contentAwareness: boolean;
    /**
     * HTTPS Inspection blade
     */
    httpsInspection: boolean;
    /**
     * Identity Awareness blade
     */
    identityAwareness: boolean;
    /**
     * IPS blade
     */
    ips: boolean;
    /**
     * IPsec VPN blade
     */
    ipsecVpn: boolean;
    /**
     * Threat Emulation blade
     */
    threatEmulation: boolean;
    /**
     * URL Filtering blade
     */
    urlFiltering: boolean;
    /**
     * VPN blade
     */
    vpn: boolean;
}

export interface ManagementCmeGwConfigurationsAzureRepositoryGatewayScript {
    /**
     * Script name
     */
    name: string;
    /**
     * Script parameters (separated by space)
     */
    parameters?: string;
    /**
     * Script uid
     */
    uid: string;
}

export interface ManagementCmeGwConfigurationsGcpBlades {
    /**
     * Anti-Bot blade
     */
    antiBot: boolean;
    /**
     * Anti-Virus blade
     */
    antiVirus: boolean;
    /**
     * Application Control blade
     */
    applicationControl: boolean;
    /**
     * Autonomous Threat Prevention blade.
     */
    autonomousThreatPrevention: boolean;
    /**
     * Content Awareness blade
     */
    contentAwareness: boolean;
    /**
     * HTTPS Inspection blade
     */
    httpsInspection: boolean;
    /**
     * Identity Awareness blade
     */
    identityAwareness: boolean;
    /**
     * IPS blade
     */
    ips: boolean;
    /**
     * IPsec VPN blade
     */
    ipsecVpn: boolean;
    /**
     * Threat Emulation blade
     */
    threatEmulation: boolean;
    /**
     * URL Filtering blade
     */
    urlFiltering: boolean;
    /**
     * VPN blade
     */
    vpn: boolean;
}

export interface ManagementCmeGwConfigurationsGcpRepositoryGatewayScript {
    /**
     * Script name
     */
    name: string;
    /**
     * Script parameters (separated by space)
     */
    parameters?: string;
    /**
     * Script uid
     */
    uid: string;
}

export interface ManagementCommandSetGlobalPropertiesNonUniqueIpAddressRange {
    /**
     * The type of the IP Address.
     */
    addressType?: string;
    /**
     * The first IPV4 Address in the range.
     */
    firstIpv4Address?: string;
    /**
     * The first IPV6 Address in the range.
     */
    firstIpv6Address?: string;
    /**
     * The last IPV4 Address in the range.
     */
    lastIpv4Address?: string;
    /**
     * The last IPV6 Address in the range.
     */
    lastIpv6Address?: string;
}

export interface ManagementCommandSetThreatAdvancedSettingsResourceClassification {
    /**
     * On Custom mode, custom resources classification per service.
     */
    customSettings?: outputs.ManagementCommandSetThreatAdvancedSettingsResourceClassificationCustomSettings;
    /**
     * Set all services to the same mode or choose a custom mode.
     */
    mode?: string;
    /**
     * Block connections when the web service is unavailable.
     */
    webServiceFailMode?: string;
}

export interface ManagementCommandSetThreatAdvancedSettingsResourceClassificationCustomSettings {
    /**
     * Custom Settings for Anti Bot Blade.
     */
    antiBot?: string;
    /**
     * Custom Settings for Anti Virus Blade.
     */
    antiVirus?: string;
    /**
     * Custom Settings for Zero Phishing Blade.
     */
    zeroPhishing?: string;
}

export interface ManagementDataCenterObjectAdditionalProperty {
    name: string;
    value: string;
}

export interface ManagementDataCenterObjectDataCenter {
    automaticRefresh: boolean;
    dataCenterType: string;
    name: string;
    properties: outputs.ManagementDataCenterObjectDataCenterProperty[];
    uid: string;
}

export interface ManagementDataCenterObjectDataCenterProperty {
    name: string;
    value: string;
}

export interface ManagementDataCenterQueryQueryRule {
    /**
     * Defines in which Data Center property to query.<br>For key-type "predefined", use these keys: type-in-data-center, name-in-data-center, and ip-address.<br>For key-type "tag", use the Data Center tag key to query.<br>Keys are case-insensitive.
     */
    key?: string;
    /**
     * The type of the "key" parameter.<br>Use "predefined" for these keys: type-in-data-center, name-in-data-center, and ip-address.<br>Use "tag" to query the Data Center tag�s property.
     */
    keyType?: string;
    /**
     * The value(s) of the Data Center property to match the Query Rule.<br>Values are case-insensitive.<br>There is an 'OR' operation between multiple values.<br>For key-type "predefined" and key 'ip-address', the values must be an IPv4 or IPv6 address.<br>For key-type "tag", the values must be the Data Center tag values.
     */
    values?: string[];
}

export interface ManagementDomainPermissionsProfileAccessControl {
    /**
     * Allow editing of the following objet types: VPN Community, Access Role, Custom application group,Custom application, Custom category, Limit, Application - Match Settings, Application Category - Match Settings,Override Categorization, Application and URL filtering blade - Advanced Settings, Content Awareness blade - Advanced Settings.
     */
    accessControlObjectsAndSettings?: string;
    /**
     * Install Application and URL Filtering updates.
     */
    appControlAndUrlFilteringUpdate?: boolean;
    /**
     * Configure DLP rules and Policies.
     */
    dlpPolicy?: string;
    /**
     * Work with Access Control rules that control traffic to and from specified countries.
     */
    geoControlPolicy?: string;
    /**
     * Install Access Control Policies.
     */
    installPolicy?: boolean;
    /**
     * Work with NAT in Access Control rules.
     */
    natPolicy?: string;
    /**
     * Layer editing permissions.<br>Available only if show-policy is set to true.
     */
    policyLayers?: outputs.ManagementDomainPermissionsProfileAccessControlPolicyLayers;
    /**
     * Work with QoS Policies and rules.
     */
    qosPolicy?: string;
    /**
     * Select to let administrators work with Access Control rules and NAT rules. If not selected, administrators cannot see these rules.
     */
    showPolicy?: boolean;
}

export interface ManagementDomainPermissionsProfileAccessControlPolicyLayers {
    /**
     * Use Application and URL Filtering in Access Control rules.<br>Available only if edit-layers is set to "By Software Blades".
     */
    appControlAndUrlFiltering?: boolean;
    /**
     * Use specified data types in Access Control rules.<br>Available only if edit-layers is set to "By Software Blades".
     */
    contentAwareness?: boolean;
    /**
     * "By Software Blades" - Edit Access Control layers that contain the blades enabled in the Permissions Profile.<br>"By Selected Profile In A Layer Editor" - Administrators can only edit the layer if the Access Control layer editor gives editing permission to their profiles.
     */
    editLayers?: string;
    /**
     * Work with Access Control and other Software Blades that do not have their own Policies.<br>Available only if edit-layers is set to "By Software Blades".
     */
    firewall?: boolean;
    /**
     * Work with Mobile Access rules.<br>Available only if edit-layers is set to "By Software Blades".
     */
    mobileAccess?: boolean;
}

export interface ManagementDomainServer {
    /**
     * Activate domain server. Only one domain server is allowed to be active.
     */
    active?: boolean;
    /**
     * IPv4 address.
     */
    ipv4Address?: string;
    /**
     * IPv6 address.
     */
    ipv6Address?: string;
    /**
     * Multi Domain server name or UID.
     */
    multiDomainServer: string;
    /**
     * Object name. Must be unique in the domain.
     */
    name: string;
    /**
     * Set this value to be true to prevent starting the new created domain.
     */
    skipStartDomainServer?: boolean;
    /**
     * Domain server type.
     */
    type?: string;
}

export interface ManagementExceptionGroupAppliedThreatRule {
    /**
     * The layer of the threat rule to which the group is to be attached.
     */
    layer?: string;
    /**
     * The name of the threat rule to which the group is to be attached.
     */
    name?: string;
    /**
     * Position in the rulebase.
     */
    position: {[key: string]: string};
}

export interface ManagementGaiaBestPracticeRegulation {
    regulationName: string;
    requirementDescription: string;
    requirementId: string;
    requirementStatus: string;
}

export interface ManagementGaiaBestPracticeRelevantObject {
    enabled: boolean;
    name: string;
    status: string;
    uid: string;
}

export interface ManagementHostHostServers {
    /**
     * Gets True if this server is a DNS Server.
     */
    dnsServer?: boolean;
    /**
     * Gets True if this server is a Mail Server.
     */
    mailServer?: boolean;
    /**
     * Gets True if this server is a Web Server.
     */
    webServer?: boolean;
    /**
     * Web Server configuration.
     */
    webServerConfig?: outputs.ManagementHostHostServersWebServerConfig;
}

export interface ManagementHostHostServersWebServerConfig {
    /**
     * Server additional ports.
     */
    additionalPorts?: string[];
    /**
     * Application engines of this web server.
     */
    applicationEngines?: string[];
    /**
     * Whether server listens to standard port.
     */
    listenStandardPort?: boolean;
    /**
     * Operating System.
     */
    operatingSystem?: string;
    /**
     * Network object which protects this server identified by the name or UID.
     */
    protectedBy?: string;
}

export interface ManagementHostInterface {
    /**
     * Color of the object. Should be one of existing colors.
     */
    color?: string;
    /**
     * Comments string.
     */
    comments?: string;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted - warnings will also be ignored.
     */
    ignoreErrors?: boolean;
    /**
     * Apply changes ignoring warnings.
     */
    ignoreWarnings?: boolean;
    /**
     * IPv4 network mask length.
     */
    maskLength4?: number;
    /**
     * IPv6 network mask length.
     */
    maskLength6?: number;
    /**
     * Object name. Should be unique in the domain.
     */
    name?: string;
    /**
     * IPv4 network address.
     */
    subnet4?: string;
    /**
     * IPv6 network address.
     */
    subnet6?: string;
}

export interface ManagementIdpAdministratorGroupPermissionsProfile {
    /**
     * N/A
     */
    domain?: string;
    /**
     * Permission profile.
     */
    profile?: string;
}

export interface ManagementInteroperableDeviceGroup {
    color: string;
    name: string;
    type: string;
    uid: string;
}

export interface ManagementInteroperableDeviceInterface {
    /**
     * Color of the object. Should be one of existing colors.
     */
    color?: string;
    /**
     * Comments string.
     */
    comments?: string;
    /**
     * Indicates which domains to process the commands on. It cannot be used with the details-level full, must be run from the System Domain only and with ignore-warnings true. Valid values are: CURRENT_DOMAIN, ALL_DOMAINS_ON_THIS_SERVER.
     */
    domainsToProcesses?: string[];
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted - warnings will also be ignored.
     */
    ignoreErrors?: boolean;
    /**
     * Apply changes ignoring warnings.
     */
    ignoreWarnings?: boolean;
    /**
     * IPv4 address.
     */
    ipv4Address?: string;
    /**
     * IPv4 network mask length.
     */
    ipv4MaskLength?: string;
    /**
     * IPv4 network address.
     */
    ipv4NetworkMask?: string;
    /**
     * IPv6 address.
     */
    ipv6Address?: string;
    /**
     * IPv6 network mask length.
     */
    ipv6MaskLength?: string;
    /**
     * IPv6 network address.
     */
    ipv6NetworkMask?: string;
    /**
     * Object name. Must be unique in the domain.
     */
    name?: string;
    /**
     * Collection of tag identifiers.
     */
    tags?: string[];
    /**
     * Topology configuration.
     */
    topology?: string;
    /**
     * Internal topology settings.
     */
    topologySettings?: outputs.ManagementInteroperableDeviceInterfaceTopologySettings;
}

export interface ManagementInteroperableDeviceInterfaceTopologySettings {
    /**
     * Whether this interface leads to demilitarized zone (perimeter network).
     */
    interfaceLeadsToDmz?: boolean;
    /**
     * Network settings behind this interface.
     */
    ipAddressBehindThisInterface?: string;
    /**
     * Network behind this interface.
     */
    specificNetwork?: string;
}

export interface ManagementLsmClusterDynamicObject {
    /**
     * Comments.
     */
    comments: string;
    /**
     * Object name. Must be unique in the domain.
     */
    name?: string;
    /**
     * Single IP-address or a range of addresses.
     */
    resolvedIpAddresses?: outputs.ManagementLsmClusterDynamicObjectResolvedIpAddress[];
    /**
     * UID
     */
    uid: string;
}

export interface ManagementLsmClusterDynamicObjectResolvedIpAddress {
    /**
     * IPv4 Address.
     */
    ipv4Address?: string;
    /**
     * IPv4 Address range.
     */
    ipv4AddressRange?: outputs.ManagementLsmClusterDynamicObjectResolvedIpAddressIpv4AddressRange;
}

export interface ManagementLsmClusterDynamicObjectResolvedIpAddressIpv4AddressRange {
    /**
     * First IPv4 address of the IP address range.
     */
    fromIpv4Address?: string;
    /**
     * Last IPv4 address of the IP address range.
     */
    toIpv4Address?: string;
}

export interface ManagementLsmClusterInterface {
    /**
     * IP address override. Net mask is defined by the attached LSM profile.
     */
    ipAddressOverride?: string;
    /**
     * Member network override. Net mask is defined by the attached LSM profile.
     */
    memberNetworkOverride?: string;
    /**
     * Interface name.
     */
    name?: string;
    /**
     * New name. Overrides the interface name on profile.
     */
    newName?: string;
}

export interface ManagementLsmClusterMember {
    /**
     * Device ID.
     */
    deviceId?: string;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted - warnings will also be ignored.
     */
    ignoreErrors?: boolean;
    /**
     * Apply changes ignoring warnings.
     */
    ignoreWarnings?: boolean;
    /**
     * Interfaces
     */
    interfaces: outputs.ManagementLsmClusterMemberInterface[];
    /**
     * Main ip address
     */
    mainIpAddress: string;
    /**
     * Member UID
     */
    memberUid: string;
    /**
     * Member Name. Consists of the member name in the LSM profile and the name or prefix or suffix of the cluster.
     */
    name?: string;
    /**
     * Provisioning settings. This field is relevant just for SMB clusters.
     */
    provisioningSettings?: outputs.ManagementLsmClusterMemberProvisioningSettings;
    /**
     * Provisioning state. This field is relevant just for SMB clusters. By default the state is 'manual'- enable provisioning but not attach to profile.If 'using-profile' state is provided a provisioning profile must be provided in provisioning-settings.
     */
    provisioningState?: string;
    /**
     * Secure Internal Communication.
     */
    sic?: outputs.ManagementLsmClusterMemberSic;
    /**
     * Secure Internal Communication name
     */
    sicName: string;
    /**
     * Secure Internal Communication state
     */
    sicState: string;
}

export interface ManagementLsmClusterMemberInterface {
    ipAddress: string;
    name: string;
}

export interface ManagementLsmClusterMemberProvisioningSettings {
    /**
     * Provisioning profile.
     */
    provisioningProfile?: string;
}

export interface ManagementLsmClusterMemberSic {
    /**
     * IP address. When IP address is provided- initiate trusted communication immediately using this IP address.
     */
    ipAddress?: string;
    /**
     * One-time password. When one-time password is provided without ip-address- trusted communication is automatically initiated  when the gateway connects to the Security Management server for the first time.
     */
    oneTimePassword?: string;
}

export interface ManagementLsmClusterTopology {
    /**
     * A list of IP-addresses ranges, defined the VPN community network.This field is relevant only when manual option of vpn-domain is checked.
     */
    manualVpnDomains?: outputs.ManagementLsmClusterTopologyManualVpnDomain[];
    /**
     * VPN Domain type.  'external-interfaces-only' is relevnt only for Gaia devices. 'hide-behind-gateway-external-ip-address' is relevant only for SMB devices.
     */
    vpnDomain?: string;
}

export interface ManagementLsmClusterTopologyManualVpnDomain {
    /**
     * Comments string.
     */
    comments?: string;
    /**
     * First IPv4 address of the IP address range.
     */
    fromIpv4Address?: string;
    /**
     * Last IPv4 address of the IP address range.
     */
    toIpv4Address?: string;
}

export interface ManagementLsmGatewayDynamicObject {
    /**
     * Comments.
     */
    comments: string;
    /**
     * Object name. Must be unique in the domain.
     */
    name?: string;
    /**
     * Single IP-address or a range of addresses.
     */
    resolvedIpAddresses?: outputs.ManagementLsmGatewayDynamicObjectResolvedIpAddress[];
    /**
     * UID.
     */
    uid: string;
}

export interface ManagementLsmGatewayDynamicObjectResolvedIpAddress {
    /**
     * IPv4 Address.
     */
    ipv4Address?: string;
    /**
     * IPv4 Address range.
     */
    ipv4AddressRange?: outputs.ManagementLsmGatewayDynamicObjectResolvedIpAddressIpv4AddressRange;
}

export interface ManagementLsmGatewayDynamicObjectResolvedIpAddressIpv4AddressRange {
    /**
     * First IPv4 address of the IP address range.
     */
    fromIpv4Address?: string;
    /**
     * Last IPv4 address of the IP address range.
     */
    toIpv4Address?: string;
}

export interface ManagementLsmGatewayTopology {
    /**
     * A list of IP-addresses ranges, defined the VPN community network.This field is relevant only when 'manual' option of vpn-domain is checked.
     */
    manualVpnDomains?: outputs.ManagementLsmGatewayTopologyManualVpnDomain[];
    /**
     * VPN Domain type.  'external-interfaces-only' is relevnt only for Gaia devices. 'hide-behind-gateway-external-ip-address' is relevant only for SMB devices.
     */
    vpnDomain?: string;
}

export interface ManagementLsmGatewayTopologyManualVpnDomain {
    /**
     * Comments string.
     */
    comments?: string;
    /**
     * First IPv4 address of the IP address range.
     */
    fromIpv4Address?: string;
    /**
     * Last IPv4 address of the IP address range.
     */
    toIpv4Address?: string;
}

export interface ManagementNetworkFeedCustomHeader {
    /**
     * The name of the HTTP header we wish to add.
     */
    headerName?: string;
    /**
     * The name of the HTTP value we wish to add.
     */
    headerValue?: string;
}

export interface ManagementServiceGtpRadioAccessTechnology {
    /**
     * (6).
     */
    eutran?: boolean;
    /**
     * (4).
     */
    gan?: boolean;
    /**
     * (2).
     */
    geran?: boolean;
    /**
     * (5).
     */
    hspaEvolution?: boolean;
    /**
     * (8).
     */
    nbIot?: boolean;
    /**
     * (9-255).
     */
    otherTypesRange?: outputs.ManagementServiceGtpRadioAccessTechnologyOtherTypesRange;
    /**
     * (1).
     */
    utran?: boolean;
    /**
     * (7).
     */
    virtual?: boolean;
    /**
     * (3).
     */
    wlan?: boolean;
}

export interface ManagementServiceGtpRadioAccessTechnologyOtherTypesRange {
    enable?: boolean;
    /**
     * Other RAT Types. To specify other RAT ranges, add a hyphen between the lowest and the highest numbers, for example: 11-15. Multiple Ranges can be chosen when separated with comma.
     */
    types?: string;
}

export interface ManagementServiceGtpSelectionMode {
    enable?: boolean;
    /**
     * The mode as integer. [0 - Verified, 1 - MS - Not verified, 2 - Network - Not verified].
     */
    mode?: number;
}

export interface ManagementSetThreatProtectionOverride {
    /**
     * Protection action.
     */
    action?: string;
    /**
     * Capture packets.
     */
    capturePackets?: boolean;
    /**
     * Profile name.
     */
    profile?: string;
    /**
     * Tracking method for protection.
     */
    track?: string;
}

export interface ManagementSimpleClusterAdvancedSettings {
    /**
     * Handling established connections when installing a new policy.
     */
    connectionPersistence?: string;
    /**
     * SAM.
     */
    sam?: outputs.ManagementSimpleClusterAdvancedSettingsSam;
}

export interface ManagementSimpleClusterAdvancedSettingsSam {
    /**
     * Forward SAM clients' requests to other SAM servers.
     */
    forwardToOtherSamServers?: boolean;
    /**
     * Purge SAM File.
     */
    purgeSamFile?: outputs.ManagementSimpleClusterAdvancedSettingsSamPurgeSamFile;
    /**
     * Use early versions compatibility mode.
     */
    useEarlyVersions?: outputs.ManagementSimpleClusterAdvancedSettingsSamUseEarlyVersions;
}

export interface ManagementSimpleClusterAdvancedSettingsSamPurgeSamFile {
    /**
     * Purge SAM File.
     */
    enabled?: boolean;
    /**
     * Purge SAM File When it Reaches to.
     */
    purgeWhenSizeReachesTo?: number;
}

export interface ManagementSimpleClusterAdvancedSettingsSamUseEarlyVersions {
    /**
     * Early versions compatibility mode.
     */
    compatibilityMode?: string;
    /**
     * Use early versions compatibility mode.
     */
    enabled?: boolean;
}

export interface ManagementSimpleClusterHttpsInspection {
    /**
     * Set to be true in order to bypass all requests (Fail-open) in case of internal system error.
     */
    bypassOnFailure?: outputs.ManagementSimpleClusterHttpsInspectionBypassOnFailure;
    /**
     * Set to be true in order to drop traffic from servers with expired server certificate.
     */
    denyExpiredServerCert?: outputs.ManagementSimpleClusterHttpsInspectionDenyExpiredServerCert;
    /**
     * Set to be true in order to drop traffic from servers with revoked server certificate (validate CRL).
     */
    denyRevokedServerCert?: outputs.ManagementSimpleClusterHttpsInspectionDenyRevokedServerCert;
    /**
     * Set to be true in order to drop traffic from servers with untrusted server certificate.
     */
    denyUntrustedServerCert?: outputs.ManagementSimpleClusterHttpsInspectionDenyUntrustedServerCert;
    /**
     * Set to 'background' in order to allowed requests until categorization is complete.
     */
    siteCategorizationAllowMode?: outputs.ManagementSimpleClusterHttpsInspectionSiteCategorizationAllowMode;
}

export interface ManagementSimpleClusterHttpsInspectionBypassOnFailure {
    /**
     * Override profile of global configuration.
     */
    overrideProfile?: boolean;
    /**
     * Override value.<br><font color="red">Required only for</font> 'override-profile' is True.
     */
    value?: boolean;
}

export interface ManagementSimpleClusterHttpsInspectionDenyExpiredServerCert {
    /**
     * Override profile of global configuration.
     */
    overrideProfile?: boolean;
    /**
     * Override value.<br><font color="red">Required only for</font> 'override-profile' is True.
     */
    value?: boolean;
}

export interface ManagementSimpleClusterHttpsInspectionDenyRevokedServerCert {
    /**
     * Override profile of global configuration.
     */
    overrideProfile?: boolean;
    /**
     * Override value.<br><font color="red">Required only for</font> 'override-profile' is True.
     */
    value?: boolean;
}

export interface ManagementSimpleClusterHttpsInspectionDenyUntrustedServerCert {
    /**
     * Override profile of global configuration.
     */
    overrideProfile?: boolean;
    /**
     * Override value.<br><font color="red">Required only for</font> 'override-profile' is True.
     */
    value?: boolean;
}

export interface ManagementSimpleClusterHttpsInspectionSiteCategorizationAllowMode {
    /**
     * Override profile of global configuration.
     */
    overrideProfile?: boolean;
    /**
     * Override value.<br><font color="red">Required only for</font> 'override-profile' is True.
     */
    value?: string;
}

export interface ManagementSimpleClusterIdentityAwarenessSettings {
    /**
     * Enable Browser Based Authentication source.
     */
    browserBasedAuthentication?: boolean;
    /**
     * Browser Based Authentication settings.
     */
    browserBasedAuthenticationSettings?: outputs.ManagementSimpleClusterIdentityAwarenessSettingsBrowserBasedAuthenticationSettings;
    /**
     * Enable Identity Agent source.
     */
    identityAgent?: boolean;
    /**
     * Identity Agent settings.
     */
    identityAgentSettings?: outputs.ManagementSimpleClusterIdentityAwarenessSettingsIdentityAgentSettings;
    /**
     * Enable Identity Collector source.
     */
    identityCollector?: boolean;
    /**
     * Identity Collector settings.
     */
    identityCollectorSettings?: outputs.ManagementSimpleClusterIdentityAwarenessSettingsIdentityCollectorSettings;
    /**
     * Identity sharing settings.
     */
    identitySharingSettings?: outputs.ManagementSimpleClusterIdentityAwarenessSettingsIdentitySharingSettings;
    /**
     * Identity-Awareness Proxy settings.
     */
    proxySettings?: outputs.ManagementSimpleClusterIdentityAwarenessSettingsProxySettings;
    /**
     * Enable Remote Access Identity source.
     */
    remoteAccess?: boolean;
}

export interface ManagementSimpleClusterIdentityAwarenessSettingsBrowserBasedAuthenticationSettings {
    /**
     * Authentication Settings for Browser Based Authentication.
     */
    authenticationSettings?: outputs.ManagementSimpleClusterIdentityAwarenessSettingsBrowserBasedAuthenticationSettingsAuthenticationSettings;
    /**
     * Browser Based Authentication portal settings.
     */
    browserBasedAuthenticationPortalSettings?: outputs.ManagementSimpleClusterIdentityAwarenessSettingsBrowserBasedAuthenticationSettingsBrowserBasedAuthenticationPortalSettings;
}

export interface ManagementSimpleClusterIdentityAwarenessSettingsBrowserBasedAuthenticationSettingsAuthenticationSettings {
    /**
     * Authentication method.
     */
    authenticationMethod?: string;
    /**
     * Identity provider object identified by the name or UID. Must be set when "authentication-method" was selected to be "identity provider".
     */
    identityProviders?: string[];
    /**
     * Radius server object identified by the name or UID. Must be set when "authentication-method" was selected to be "radius".
     */
    radius?: string;
    /**
     * Users directories.
     */
    usersDirectories?: outputs.ManagementSimpleClusterIdentityAwarenessSettingsBrowserBasedAuthenticationSettingsAuthenticationSettingsUsersDirectories;
}

export interface ManagementSimpleClusterIdentityAwarenessSettingsBrowserBasedAuthenticationSettingsAuthenticationSettingsUsersDirectories {
    /**
     * External user profile.
     */
    externalUserProfile?: boolean;
    /**
     * Internal users.
     */
    internalUsers?: boolean;
    /**
     * LDAP AU objects identified by the name or UID. Must be set when "users-from-external-directories" was selected to be "specific".
     */
    specifics?: string[];
    /**
     * Users from external directories.
     */
    usersFromExternalDirectories?: string;
}

export interface ManagementSimpleClusterIdentityAwarenessSettingsBrowserBasedAuthenticationSettingsBrowserBasedAuthenticationPortalSettings {
    /**
     * Configuration of the portal access settings.
     */
    accessibility?: outputs.ManagementSimpleClusterIdentityAwarenessSettingsBrowserBasedAuthenticationSettingsBrowserBasedAuthenticationPortalSettingsAccessibility;
    /**
     * Configuration of the portal certificate settings.
     */
    certificateSettings?: outputs.ManagementSimpleClusterIdentityAwarenessSettingsBrowserBasedAuthenticationSettingsBrowserBasedAuthenticationPortalSettingsCertificateSettings;
    /**
     * Configuration of the portal web settings.
     */
    portalWebSettings?: outputs.ManagementSimpleClusterIdentityAwarenessSettingsBrowserBasedAuthenticationSettingsBrowserBasedAuthenticationPortalSettingsPortalWebSettings;
}

export interface ManagementSimpleClusterIdentityAwarenessSettingsBrowserBasedAuthenticationSettingsBrowserBasedAuthenticationPortalSettingsAccessibility {
    /**
     * Allowed access to the web portal (based on interfaces, or security policy).
     */
    allowAccessFrom?: string;
    /**
     * Configuration of the additional portal access settings for internal interfaces only.
     */
    internalAccessSettings?: outputs.ManagementSimpleClusterIdentityAwarenessSettingsBrowserBasedAuthenticationSettingsBrowserBasedAuthenticationPortalSettingsAccessibilityInternalAccessSettings;
}

export interface ManagementSimpleClusterIdentityAwarenessSettingsBrowserBasedAuthenticationSettingsBrowserBasedAuthenticationPortalSettingsAccessibilityInternalAccessSettings {
    /**
     * Controls portal access settings for internal interfaces, whose topology is set to 'DMZ'.
     */
    dmz?: boolean;
    /**
     * Controls portal access settings for internal interfaces, whose topology is set to 'Undefined'.
     */
    undefined?: boolean;
    /**
     * Controls portal access settings for interfaces that are part of a VPN Encryption Domain.
     */
    vpn?: boolean;
}

export interface ManagementSimpleClusterIdentityAwarenessSettingsBrowserBasedAuthenticationSettingsBrowserBasedAuthenticationPortalSettingsCertificateSettings {
    /**
     * The certificate file encoded in Base64 with padding.  This file must be in the *.p12 format.
     */
    base64Certificate?: string;
    /**
     * Password (encoded in Base64 with padding) for the certificate file.
     */
    base64Password?: string;
}

export interface ManagementSimpleClusterIdentityAwarenessSettingsBrowserBasedAuthenticationSettingsBrowserBasedAuthenticationPortalSettingsPortalWebSettings {
    /**
     * List of URL aliases that are redirected to the main portal URL.
     */
    aliases?: string[];
    /**
     * The main URL for the web portal.
     */
    mainUrl?: string;
}

export interface ManagementSimpleClusterIdentityAwarenessSettingsIdentityAgentSettings {
    /**
     * Agents send keepalive period (minutes).
     */
    agentsIntervalKeepalive?: number;
    /**
     * Authentication Settings for Identity Agent.
     */
    authenticationSettings?: outputs.ManagementSimpleClusterIdentityAwarenessSettingsIdentityAgentSettingsAuthenticationSettings;
    /**
     * Identity Agent accessibility settings.
     */
    identityAgentPortalSettings?: outputs.ManagementSimpleClusterIdentityAwarenessSettingsIdentityAgentSettingsIdentityAgentPortalSettings;
    /**
     * Agent reauthenticate time interval (minutes).
     */
    userReauthenticateInterval?: number;
}

export interface ManagementSimpleClusterIdentityAwarenessSettingsIdentityAgentSettingsAuthenticationSettings {
    /**
     * Authentication method.
     */
    authenticationMethod?: string;
    /**
     * Radius server object identified by the name or UID. Must be set when "authentication-method" was selected to be "radius".
     */
    radius?: string;
    /**
     * Users directories.
     */
    usersDirectories?: outputs.ManagementSimpleClusterIdentityAwarenessSettingsIdentityAgentSettingsAuthenticationSettingsUsersDirectories;
}

export interface ManagementSimpleClusterIdentityAwarenessSettingsIdentityAgentSettingsAuthenticationSettingsUsersDirectories {
    /**
     * External user profile.
     */
    externalUserProfile?: boolean;
    /**
     * Internal users.
     */
    internalUsers?: boolean;
    /**
     * LDAP AU objects identified by the name or UID. Must be set when "users-from-external-directories" was selected to be "specific".
     */
    specifics?: string[];
    /**
     * Users from external directories.
     */
    usersFromExternalDirectories?: string;
}

export interface ManagementSimpleClusterIdentityAwarenessSettingsIdentityAgentSettingsIdentityAgentPortalSettings {
    /**
     * Configuration of the portal access settings.
     */
    accessibility?: outputs.ManagementSimpleClusterIdentityAwarenessSettingsIdentityAgentSettingsIdentityAgentPortalSettingsAccessibility;
}

export interface ManagementSimpleClusterIdentityAwarenessSettingsIdentityAgentSettingsIdentityAgentPortalSettingsAccessibility {
    /**
     * Allowed access to the web portal (based on interfaces, or security policy).
     */
    allowAccessFrom?: string;
    /**
     * Configuration of the additional portal access settings for internal interfaces only.
     */
    internalAccessSettings?: outputs.ManagementSimpleClusterIdentityAwarenessSettingsIdentityAgentSettingsIdentityAgentPortalSettingsAccessibilityInternalAccessSettings;
}

export interface ManagementSimpleClusterIdentityAwarenessSettingsIdentityAgentSettingsIdentityAgentPortalSettingsAccessibilityInternalAccessSettings {
    /**
     * Controls portal access settings for internal interfaces, whose topology is set to 'DMZ'.
     */
    dmz?: boolean;
    /**
     * Controls portal access settings for internal interfaces, whose topology is set to 'Undefined'.
     */
    undefined?: boolean;
    /**
     * Controls portal access settings for interfaces that are part of a VPN Encryption Domain.
     */
    vpn?: boolean;
}

export interface ManagementSimpleClusterIdentityAwarenessSettingsIdentityCollectorSettings {
    /**
     * Authentication Settings for Identity Collector.
     */
    authenticationSettings?: outputs.ManagementSimpleClusterIdentityAwarenessSettingsIdentityCollectorSettingsAuthenticationSettings;
    /**
     * Authorized Clients.
     */
    authorizedClients: outputs.ManagementSimpleClusterIdentityAwarenessSettingsIdentityCollectorSettingsAuthorizedClient[];
    /**
     * Identity Collector accessibility settings.
     */
    clientAccessPermissions?: outputs.ManagementSimpleClusterIdentityAwarenessSettingsIdentityCollectorSettingsClientAccessPermissions;
}

export interface ManagementSimpleClusterIdentityAwarenessSettingsIdentityCollectorSettingsAuthenticationSettings {
    /**
     * Users directories.
     */
    usersDirectories?: outputs.ManagementSimpleClusterIdentityAwarenessSettingsIdentityCollectorSettingsAuthenticationSettingsUsersDirectories;
}

export interface ManagementSimpleClusterIdentityAwarenessSettingsIdentityCollectorSettingsAuthenticationSettingsUsersDirectories {
    /**
     * External user profile.
     */
    externalUserProfile?: boolean;
    /**
     * Internal users.
     */
    internalUsers?: boolean;
    /**
     * LDAP AU objects identified by the name or UID. Must be set when "users-from-external-directories" was selected to be "specific".
     */
    specifics?: string[];
    /**
     * Users from external directories.
     */
    usersFromExternalDirectories?: string;
}

export interface ManagementSimpleClusterIdentityAwarenessSettingsIdentityCollectorSettingsAuthorizedClient {
    /**
     * Host / Network Group Name or UID.
     */
    client?: string;
    /**
     * Client Secret.
     */
    clientSecret?: string;
}

export interface ManagementSimpleClusterIdentityAwarenessSettingsIdentityCollectorSettingsClientAccessPermissions {
    /**
     * Configuration of the portal access settings.
     */
    accessibility?: outputs.ManagementSimpleClusterIdentityAwarenessSettingsIdentityCollectorSettingsClientAccessPermissionsAccessibility;
}

export interface ManagementSimpleClusterIdentityAwarenessSettingsIdentityCollectorSettingsClientAccessPermissionsAccessibility {
    /**
     * Allowed access to the web portal (based on interfaces, or security policy).
     */
    allowAccessFrom?: string;
    /**
     * Configuration of the additional portal access settings for internal interfaces only.
     */
    internalAccessSettings?: outputs.ManagementSimpleClusterIdentityAwarenessSettingsIdentityCollectorSettingsClientAccessPermissionsAccessibilityInternalAccessSettings;
}

export interface ManagementSimpleClusterIdentityAwarenessSettingsIdentityCollectorSettingsClientAccessPermissionsAccessibilityInternalAccessSettings {
    /**
     * Controls portal access settings for internal interfaces, whose topology is set to 'DMZ'.
     */
    dmz?: boolean;
    /**
     * Controls portal access settings for internal interfaces, whose topology is set to 'Undefined'.
     */
    undefined?: boolean;
    /**
     * Controls portal access settings for interfaces that are part of a VPN Encryption Domain.
     */
    vpn?: boolean;
}

export interface ManagementSimpleClusterIdentityAwarenessSettingsIdentitySharingSettings {
    /**
     * Enable receiving identity from other gateways.
     */
    receiveFromOtherGateways?: boolean;
    /**
     * Gateway(s) to receive identity from.
     */
    receiveFroms?: string[];
    /**
     * Enable identity sharing with other gateways.
     */
    shareWithOtherGateways?: boolean;
}

export interface ManagementSimpleClusterIdentityAwarenessSettingsProxySettings {
    /**
     * Whether to use X-Forward-For HTTP header, which is added by the proxy server to keep track of the original source IP.
     */
    detectUsingXForwardFor?: boolean;
}

export interface ManagementSimpleClusterInterface {
    /**
     * Anti spoofing.
     */
    antiSpoofing?: boolean;
    /**
     * Anti spoofing settings
     */
    antiSpoofingSettings?: {[key: string]: string};
    /**
     * Color of the object. Should be one of existing colors.
     */
    color?: string;
    /**
     * Comments string.
     */
    comments?: string;
    /**
     * Cluster interface type.
     */
    interfaceType: string;
    /**
     * IPv4 address.
     */
    ipv4Address?: string;
    /**
     * IPv4 network mask length.
     */
    ipv4MaskLength?: string;
    /**
     * IPv4 network address.
     */
    ipv4NetworkMask?: string;
    /**
     * IPv6 address.
     */
    ipv6Address?: string;
    /**
     * IPv6 network mask length.
     */
    ipv6MaskLength?: string;
    /**
     * IPv6 network address.
     */
    ipv6NetworkMask?: string;
    /**
     * Multicast IP Address.
     */
    multicastAddress?: string;
    /**
     * Multicast Address Type.
     */
    multicastAddressType?: string;
    /**
     * Object name. Should be unique in the domain.
     */
    name: string;
    /**
     * Security zone.
     */
    securityZone?: boolean;
    /**
     * Security zone settings.
     */
    securityZoneSettings?: {[key: string]: string};
    /**
     * Topology.
     */
    topology?: string;
    /**
     * Shows the automatic topology calculation.
     */
    topologyAutomaticCalculation: string;
    /**
     * Topology settings.
     */
    topologySettings?: {[key: string]: string};
}

export interface ManagementSimpleClusterMember {
    /**
     * Network interfaces.
     */
    interfaces?: outputs.ManagementSimpleClusterMemberInterface[];
    /**
     * IPv4 or IPv6 address.
     */
    ipAddress?: string;
    /**
     * Object name. Should be unique in the domain.
     */
    name: string;
    /**
     * SIC one time password.
     */
    oneTimePassword?: string;
    /**
     * The member priority on the cluster.
     */
    priority: number;
    /**
     * Secure Internal Communication state.
     */
    sicMessage: string;
    /**
     * Secure Internal Communication name.
     */
    sicState: string;
}

export interface ManagementSimpleClusterMemberInterface {
    /**
     * IPv4 address.
     */
    ipv4Address?: string;
    /**
     * IPv4 network mask length.
     */
    ipv4MaskLength?: string;
    /**
     * IPv4 network address.
     */
    ipv4NetworkMask?: string;
    /**
     * IPv6 address.
     */
    ipv6Address?: string;
    /**
     * IPv6 network mask length.
     */
    ipv6MaskLength?: string;
    /**
     * IPv6 network address.
     */
    ipv6NetworkMask?: string;
    /**
     * Object name. Should be unique in the domain.
     */
    name: string;
}

export interface ManagementSimpleClusterPlatformPortalSettings {
    /**
     * Configuration of the portal access settings.
     */
    accessibility?: outputs.ManagementSimpleClusterPlatformPortalSettingsAccessibility;
    /**
     * Configuration of the portal certificate settings.
     */
    certificateSettings?: outputs.ManagementSimpleClusterPlatformPortalSettingsCertificateSettings;
    /**
     * Configuration of the portal web settings.
     */
    portalWebSettings?: outputs.ManagementSimpleClusterPlatformPortalSettingsPortalWebSettings;
}

export interface ManagementSimpleClusterPlatformPortalSettingsAccessibility {
    /**
     * Allowed access to the web portal (based on interfaces, or security policy).
     */
    allowAccessFrom?: string;
    /**
     * Configuration of the additional portal access settings for internal interfaces only.
     */
    internalAccessSettings?: outputs.ManagementSimpleClusterPlatformPortalSettingsAccessibilityInternalAccessSettings;
}

export interface ManagementSimpleClusterPlatformPortalSettingsAccessibilityInternalAccessSettings {
    /**
     * Controls portal access settings for internal interfaces, whose topology is set to 'DMZ'.
     */
    dmz?: boolean;
    /**
     * Controls portal access settings for internal interfaces, whose topology is set to 'Undefined'.
     */
    undefined?: boolean;
    /**
     * Controls portal access settings for interfaces that are part of a VPN Encryption Domain.
     */
    vpn?: boolean;
}

export interface ManagementSimpleClusterPlatformPortalSettingsCertificateSettings {
    /**
     * The certificate file encoded in Base64 with padding.  This file must be in the *.p12 format.
     */
    base64Certificate?: string;
    /**
     * Password (encoded in Base64 with padding) for the certificate file.
     */
    base64Password?: string;
}

export interface ManagementSimpleClusterPlatformPortalSettingsPortalWebSettings {
    /**
     * List of URL aliases that are redirected to the main portal URL.
     */
    aliases?: string[];
    /**
     * The main URL for the web portal.
     */
    mainUrl?: string;
}

export interface ManagementSimpleClusterUsercheckPortalSettings {
    /**
     * Configuration of the portal access settings.
     */
    accessibility?: outputs.ManagementSimpleClusterUsercheckPortalSettingsAccessibility;
    /**
     * Configuration of the portal certificate settings.
     */
    certificateSettings?: outputs.ManagementSimpleClusterUsercheckPortalSettingsCertificateSettings;
    /**
     * State of the web portal (enabled or disabled). The supported blades are: {'Application Control', 'URL Filtering', 'Data Loss Prevention', 'Anti Virus', 'Anti Bot', 'Threat Emulation', 'Threat Extraction', 'Data Awareness'}.
     */
    enabled?: boolean;
    /**
     * Configuration of the portal web settings.
     */
    portalWebSettings?: outputs.ManagementSimpleClusterUsercheckPortalSettingsPortalWebSettings;
}

export interface ManagementSimpleClusterUsercheckPortalSettingsAccessibility {
    /**
     * Allowed access to the web portal (based on interfaces, or security policy).
     */
    allowAccessFrom?: string;
    /**
     * Configuration of the additional portal access settings for internal interfaces only.
     */
    internalAccessSettings?: outputs.ManagementSimpleClusterUsercheckPortalSettingsAccessibilityInternalAccessSettings;
}

export interface ManagementSimpleClusterUsercheckPortalSettingsAccessibilityInternalAccessSettings {
    /**
     * Controls portal access settings for internal interfaces, whose topology is set to 'DMZ'.
     */
    dmz?: boolean;
    /**
     * Controls portal access settings for internal interfaces, whose topology is set to 'Undefined'.
     */
    undefined?: boolean;
    /**
     * Controls portal access settings for interfaces that are part of a VPN Encryption Domain.
     */
    vpn?: boolean;
}

export interface ManagementSimpleClusterUsercheckPortalSettingsCertificateSettings {
    /**
     * The certificate file encoded in Base64 with padding.  This file must be in the *.p12 format.
     */
    base64Certificate?: string;
    /**
     * Password (encoded in Base64 with padding) for the certificate file.
     */
    base64Password?: string;
}

export interface ManagementSimpleClusterUsercheckPortalSettingsPortalWebSettings {
    /**
     * List of URL aliases that are redirected to the main portal URL.
     */
    aliases?: string[];
    /**
     * The main URL for the web portal.
     */
    mainUrl?: string;
}

export interface ManagementSimpleGatewayAdvancedSettings {
    /**
     * Handling established connections when installing a new policy.
     */
    connectionPersistence?: string;
    /**
     * SAM.
     */
    sam?: outputs.ManagementSimpleGatewayAdvancedSettingsSam;
}

export interface ManagementSimpleGatewayAdvancedSettingsSam {
    /**
     * Forward SAM clients' requests to other SAM servers.
     */
    forwardToOtherSamServers?: boolean;
    /**
     * Purge SAM File.
     */
    purgeSamFile?: outputs.ManagementSimpleGatewayAdvancedSettingsSamPurgeSamFile;
    /**
     * Use early versions compatibility mode.
     */
    useEarlyVersions?: outputs.ManagementSimpleGatewayAdvancedSettingsSamUseEarlyVersions;
}

export interface ManagementSimpleGatewayAdvancedSettingsSamPurgeSamFile {
    /**
     * Purge SAM File.
     */
    enabled?: boolean;
    /**
     * Purge SAM File When it Reaches to.
     */
    purgeWhenSizeReachesTo?: number;
}

export interface ManagementSimpleGatewayAdvancedSettingsSamUseEarlyVersions {
    /**
     * Early versions compatibility mode.
     */
    compatibilityMode?: string;
    /**
     * Use early versions compatibility mode.
     */
    enabled?: boolean;
}

export interface ManagementSimpleGatewayApplicationControlAndUrlFilteringSettings {
    /**
     * Whether to override global settings or not.
     */
    globalSettingsMode?: string;
    /**
     * override global settings object.
     */
    overrideGlobalSettings?: {[key: string]: string};
}

export interface ManagementSimpleGatewayHttpsInspection {
    /**
     * Set to be true in order to bypass all requests (Fail-open) in case of internal system error.
     */
    bypassOnFailure?: outputs.ManagementSimpleGatewayHttpsInspectionBypassOnFailure;
    /**
     * Set to be true in order to drop traffic from servers with expired server certificate.
     */
    denyExpiredServerCert?: outputs.ManagementSimpleGatewayHttpsInspectionDenyExpiredServerCert;
    /**
     * Set to be true in order to drop traffic from servers with revoked server certificate (validate CRL).
     */
    denyRevokedServerCert?: outputs.ManagementSimpleGatewayHttpsInspectionDenyRevokedServerCert;
    /**
     * Set to be true in order to drop traffic from servers with untrusted server certificate.
     */
    denyUntrustedServerCert?: outputs.ManagementSimpleGatewayHttpsInspectionDenyUntrustedServerCert;
    /**
     * Set to 'background' in order to allowed requests until categorization is complete.
     */
    siteCategorizationAllowMode?: outputs.ManagementSimpleGatewayHttpsInspectionSiteCategorizationAllowMode;
}

export interface ManagementSimpleGatewayHttpsInspectionBypassOnFailure {
    /**
     * Override profile of global configuration.
     */
    overrideProfile?: boolean;
    /**
     * Override value.<br><font color="red">Required only for</font> 'override-profile' is True.
     */
    value?: boolean;
}

export interface ManagementSimpleGatewayHttpsInspectionDenyExpiredServerCert {
    /**
     * Override profile of global configuration.
     */
    overrideProfile?: boolean;
    /**
     * Override value.<br><font color="red">Required only for</font> 'override-profile' is True.
     */
    value?: boolean;
}

export interface ManagementSimpleGatewayHttpsInspectionDenyRevokedServerCert {
    /**
     * Override profile of global configuration.
     */
    overrideProfile?: boolean;
    /**
     * Override value.<br><font color="red">Required only for</font> 'override-profile' is True.
     */
    value?: boolean;
}

export interface ManagementSimpleGatewayHttpsInspectionDenyUntrustedServerCert {
    /**
     * Override profile of global configuration.
     */
    overrideProfile?: boolean;
    /**
     * Override value.<br><font color="red">Required only for</font> 'override-profile' is True.
     */
    value?: boolean;
}

export interface ManagementSimpleGatewayHttpsInspectionSiteCategorizationAllowMode {
    /**
     * Override profile of global configuration.
     */
    overrideProfile?: boolean;
    /**
     * Override value.<br><font color="red">Required only for</font> 'override-profile' is True.
     */
    value?: string;
}

export interface ManagementSimpleGatewayIdentityAwarenessSettings {
    /**
     * Enable Browser Based Authentication source.
     */
    browserBasedAuthentication?: boolean;
    /**
     * Browser Based Authentication settings.
     */
    browserBasedAuthenticationSettings?: outputs.ManagementSimpleGatewayIdentityAwarenessSettingsBrowserBasedAuthenticationSettings;
    /**
     * Enable Identity Agent source.
     */
    identityAgent?: boolean;
    /**
     * Identity Agent settings.
     */
    identityAgentSettings?: outputs.ManagementSimpleGatewayIdentityAwarenessSettingsIdentityAgentSettings;
    /**
     * Enable Identity Collector source.
     */
    identityCollector?: boolean;
    /**
     * Identity Collector settings.
     */
    identityCollectorSettings?: outputs.ManagementSimpleGatewayIdentityAwarenessSettingsIdentityCollectorSettings;
    /**
     * Identity sharing settings.
     */
    identitySharingSettings?: outputs.ManagementSimpleGatewayIdentityAwarenessSettingsIdentitySharingSettings;
    /**
     * Identity-Awareness Proxy settings.
     */
    proxySettings?: outputs.ManagementSimpleGatewayIdentityAwarenessSettingsProxySettings;
    /**
     * Enable Remote Access Identity source.
     */
    remoteAccess?: boolean;
}

export interface ManagementSimpleGatewayIdentityAwarenessSettingsBrowserBasedAuthenticationSettings {
    /**
     * Authentication Settings for Browser Based Authentication.
     */
    authenticationSettings?: outputs.ManagementSimpleGatewayIdentityAwarenessSettingsBrowserBasedAuthenticationSettingsAuthenticationSettings;
    /**
     * Browser Based Authentication portal settings.
     */
    browserBasedAuthenticationPortalSettings?: outputs.ManagementSimpleGatewayIdentityAwarenessSettingsBrowserBasedAuthenticationSettingsBrowserBasedAuthenticationPortalSettings;
}

export interface ManagementSimpleGatewayIdentityAwarenessSettingsBrowserBasedAuthenticationSettingsAuthenticationSettings {
    /**
     * Authentication method.
     */
    authenticationMethod?: string;
    /**
     * Identity provider object identified by the name or UID. Must be set when "authentication-method" was selected to be "identity provider".
     */
    identityProviders?: string[];
    /**
     * Radius server object identified by the name or UID. Must be set when "authentication-method" was selected to be "radius".
     */
    radius?: string;
    /**
     * Users directories.
     */
    usersDirectories?: outputs.ManagementSimpleGatewayIdentityAwarenessSettingsBrowserBasedAuthenticationSettingsAuthenticationSettingsUsersDirectories;
}

export interface ManagementSimpleGatewayIdentityAwarenessSettingsBrowserBasedAuthenticationSettingsAuthenticationSettingsUsersDirectories {
    /**
     * External user profile.
     */
    externalUserProfile?: boolean;
    /**
     * Internal users.
     */
    internalUsers?: boolean;
    /**
     * LDAP AU objects identified by the name or UID. Must be set when "users-from-external-directories" was selected to be "specific".
     */
    specifics?: string[];
    /**
     * Users from external directories.
     */
    usersFromExternalDirectories?: string;
}

export interface ManagementSimpleGatewayIdentityAwarenessSettingsBrowserBasedAuthenticationSettingsBrowserBasedAuthenticationPortalSettings {
    /**
     * Configuration of the portal access settings.
     */
    accessibility?: outputs.ManagementSimpleGatewayIdentityAwarenessSettingsBrowserBasedAuthenticationSettingsBrowserBasedAuthenticationPortalSettingsAccessibility;
    /**
     * Configuration of the portal certificate settings.
     */
    certificateSettings?: outputs.ManagementSimpleGatewayIdentityAwarenessSettingsBrowserBasedAuthenticationSettingsBrowserBasedAuthenticationPortalSettingsCertificateSettings;
    /**
     * Configuration of the portal web settings.
     */
    portalWebSettings?: outputs.ManagementSimpleGatewayIdentityAwarenessSettingsBrowserBasedAuthenticationSettingsBrowserBasedAuthenticationPortalSettingsPortalWebSettings;
}

export interface ManagementSimpleGatewayIdentityAwarenessSettingsBrowserBasedAuthenticationSettingsBrowserBasedAuthenticationPortalSettingsAccessibility {
    /**
     * Allowed access to the web portal (based on interfaces, or security policy).
     */
    allowAccessFrom?: string;
    /**
     * Configuration of the additional portal access settings for internal interfaces only.
     */
    internalAccessSettings?: outputs.ManagementSimpleGatewayIdentityAwarenessSettingsBrowserBasedAuthenticationSettingsBrowserBasedAuthenticationPortalSettingsAccessibilityInternalAccessSettings;
}

export interface ManagementSimpleGatewayIdentityAwarenessSettingsBrowserBasedAuthenticationSettingsBrowserBasedAuthenticationPortalSettingsAccessibilityInternalAccessSettings {
    /**
     * Controls portal access settings for internal interfaces, whose topology is set to 'DMZ'.
     */
    dmz?: boolean;
    /**
     * Controls portal access settings for internal interfaces, whose topology is set to 'Undefined'.
     */
    undefined?: boolean;
    /**
     * Controls portal access settings for interfaces that are part of a VPN Encryption Domain.
     */
    vpn?: boolean;
}

export interface ManagementSimpleGatewayIdentityAwarenessSettingsBrowserBasedAuthenticationSettingsBrowserBasedAuthenticationPortalSettingsCertificateSettings {
    /**
     * The certificate file encoded in Base64 with padding.  This file must be in the *.p12 format.
     */
    base64Certificate?: string;
    /**
     * Password (encoded in Base64 with padding) for the certificate file.
     */
    base64Password?: string;
}

export interface ManagementSimpleGatewayIdentityAwarenessSettingsBrowserBasedAuthenticationSettingsBrowserBasedAuthenticationPortalSettingsPortalWebSettings {
    /**
     * List of URL aliases that are redirected to the main portal URL.
     */
    aliases?: string[];
    /**
     * The main URL for the web portal.
     */
    mainUrl?: string;
}

export interface ManagementSimpleGatewayIdentityAwarenessSettingsIdentityAgentSettings {
    /**
     * Agents send keepalive period (minutes).
     */
    agentsIntervalKeepalive?: number;
    /**
     * Authentication Settings for Identity Agent.
     */
    authenticationSettings?: outputs.ManagementSimpleGatewayIdentityAwarenessSettingsIdentityAgentSettingsAuthenticationSettings;
    /**
     * Identity Agent accessibility settings.
     */
    identityAgentPortalSettings?: outputs.ManagementSimpleGatewayIdentityAwarenessSettingsIdentityAgentSettingsIdentityAgentPortalSettings;
    /**
     * Agent reauthenticate time interval (minutes).
     */
    userReauthenticateInterval?: number;
}

export interface ManagementSimpleGatewayIdentityAwarenessSettingsIdentityAgentSettingsAuthenticationSettings {
    /**
     * Authentication method.
     */
    authenticationMethod?: string;
    /**
     * Radius server object identified by the name or UID. Must be set when "authentication-method" was selected to be "radius".
     */
    radius?: string;
    /**
     * Users directories.
     */
    usersDirectories?: outputs.ManagementSimpleGatewayIdentityAwarenessSettingsIdentityAgentSettingsAuthenticationSettingsUsersDirectories;
}

export interface ManagementSimpleGatewayIdentityAwarenessSettingsIdentityAgentSettingsAuthenticationSettingsUsersDirectories {
    /**
     * External user profile.
     */
    externalUserProfile?: boolean;
    /**
     * Internal users.
     */
    internalUsers?: boolean;
    /**
     * LDAP AU objects identified by the name or UID. Must be set when "users-from-external-directories" was selected to be "specific".
     */
    specifics?: string[];
    /**
     * Users from external directories.
     */
    usersFromExternalDirectories?: string;
}

export interface ManagementSimpleGatewayIdentityAwarenessSettingsIdentityAgentSettingsIdentityAgentPortalSettings {
    /**
     * Configuration of the portal access settings.
     */
    accessibility?: outputs.ManagementSimpleGatewayIdentityAwarenessSettingsIdentityAgentSettingsIdentityAgentPortalSettingsAccessibility;
}

export interface ManagementSimpleGatewayIdentityAwarenessSettingsIdentityAgentSettingsIdentityAgentPortalSettingsAccessibility {
    /**
     * Allowed access to the web portal (based on interfaces, or security policy).
     */
    allowAccessFrom?: string;
    /**
     * Configuration of the additional portal access settings for internal interfaces only.
     */
    internalAccessSettings?: outputs.ManagementSimpleGatewayIdentityAwarenessSettingsIdentityAgentSettingsIdentityAgentPortalSettingsAccessibilityInternalAccessSettings;
}

export interface ManagementSimpleGatewayIdentityAwarenessSettingsIdentityAgentSettingsIdentityAgentPortalSettingsAccessibilityInternalAccessSettings {
    /**
     * Controls portal access settings for internal interfaces, whose topology is set to 'DMZ'.
     */
    dmz?: boolean;
    /**
     * Controls portal access settings for internal interfaces, whose topology is set to 'Undefined'.
     */
    undefined?: boolean;
    /**
     * Controls portal access settings for interfaces that are part of a VPN Encryption Domain.
     */
    vpn?: boolean;
}

export interface ManagementSimpleGatewayIdentityAwarenessSettingsIdentityCollectorSettings {
    /**
     * Authentication Settings for Identity Collector.
     */
    authenticationSettings?: outputs.ManagementSimpleGatewayIdentityAwarenessSettingsIdentityCollectorSettingsAuthenticationSettings;
    /**
     * Authorized Clients.
     */
    authorizedClients: outputs.ManagementSimpleGatewayIdentityAwarenessSettingsIdentityCollectorSettingsAuthorizedClient[];
    /**
     * Identity Collector accessibility settings.
     */
    clientAccessPermissions?: outputs.ManagementSimpleGatewayIdentityAwarenessSettingsIdentityCollectorSettingsClientAccessPermissions;
}

export interface ManagementSimpleGatewayIdentityAwarenessSettingsIdentityCollectorSettingsAuthenticationSettings {
    /**
     * Users directories.
     */
    usersDirectories?: outputs.ManagementSimpleGatewayIdentityAwarenessSettingsIdentityCollectorSettingsAuthenticationSettingsUsersDirectories;
}

export interface ManagementSimpleGatewayIdentityAwarenessSettingsIdentityCollectorSettingsAuthenticationSettingsUsersDirectories {
    /**
     * External user profile.
     */
    externalUserProfile?: boolean;
    /**
     * Internal users.
     */
    internalUsers?: boolean;
    /**
     * LDAP AU objects identified by the name or UID. Must be set when "users-from-external-directories" was selected to be "specific".
     */
    specifics?: string[];
    /**
     * Users from external directories.
     */
    usersFromExternalDirectories?: string;
}

export interface ManagementSimpleGatewayIdentityAwarenessSettingsIdentityCollectorSettingsAuthorizedClient {
    /**
     * Host / Network Group Name or UID.
     */
    client?: string;
    /**
     * Client Secret.
     */
    clientSecret?: string;
}

export interface ManagementSimpleGatewayIdentityAwarenessSettingsIdentityCollectorSettingsClientAccessPermissions {
    /**
     * Configuration of the portal access settings.
     */
    accessibility?: outputs.ManagementSimpleGatewayIdentityAwarenessSettingsIdentityCollectorSettingsClientAccessPermissionsAccessibility;
}

export interface ManagementSimpleGatewayIdentityAwarenessSettingsIdentityCollectorSettingsClientAccessPermissionsAccessibility {
    /**
     * Allowed access to the web portal (based on interfaces, or security policy).
     */
    allowAccessFrom?: string;
    /**
     * Configuration of the additional portal access settings for internal interfaces only.
     */
    internalAccessSettings?: outputs.ManagementSimpleGatewayIdentityAwarenessSettingsIdentityCollectorSettingsClientAccessPermissionsAccessibilityInternalAccessSettings;
}

export interface ManagementSimpleGatewayIdentityAwarenessSettingsIdentityCollectorSettingsClientAccessPermissionsAccessibilityInternalAccessSettings {
    /**
     * Controls portal access settings for internal interfaces, whose topology is set to 'DMZ'.
     */
    dmz?: boolean;
    /**
     * Controls portal access settings for internal interfaces, whose topology is set to 'Undefined'.
     */
    undefined?: boolean;
    /**
     * Controls portal access settings for interfaces that are part of a VPN Encryption Domain.
     */
    vpn?: boolean;
}

export interface ManagementSimpleGatewayIdentityAwarenessSettingsIdentitySharingSettings {
    /**
     * Enable receiving identity from other gateways.
     */
    receiveFromOtherGateways?: boolean;
    /**
     * Gateway(s) to receive identity from.
     */
    receiveFroms?: string[];
    /**
     * Enable identity sharing with other gateways.
     */
    shareWithOtherGateways?: boolean;
}

export interface ManagementSimpleGatewayIdentityAwarenessSettingsProxySettings {
    /**
     * Whether to use X-Forward-For HTTP header, which is added by the proxy server to keep track of the original source IP.
     */
    detectUsingXForwardFor?: boolean;
}

export interface ManagementSimpleGatewayInterface {
    /**
     * Anti spoofing.
     */
    antiSpoofing?: boolean;
    /**
     * Anti spoofing settings
     */
    antiSpoofingSettings?: {[key: string]: string};
    /**
     * Color of the object. Should be one of existing colors.
     */
    color?: string;
    /**
     * Comments string.
     */
    comments?: string;
    /**
     * IPv4 address.
     */
    ipv4Address?: string;
    /**
     * IPv4 network mask length.
     */
    ipv4MaskLength?: string;
    /**
     * IPv4 network address.
     */
    ipv4NetworkMask?: string;
    /**
     * IPv6 address.
     */
    ipv6Address?: string;
    /**
     * IPv6 network mask length.
     */
    ipv6MaskLength?: string;
    /**
     * IPv6 network address.
     */
    ipv6NetworkMask?: string;
    /**
     * Object name. Should be unique in the domain.
     */
    name: string;
    /**
     * Security zone.
     */
    securityZone?: boolean;
    /**
     * Security zone settings.
     */
    securityZoneSettings?: {[key: string]: string};
    /**
     * Topology.
     */
    topology?: string;
    /**
     * Shows the automatic topology calculation.
     */
    topologyAutomaticCalculation: string;
    /**
     * Topology settings.
     */
    topologySettings?: {[key: string]: string};
}

export interface ManagementSimpleGatewayPlatformPortalSettings {
    /**
     * Configuration of the portal access settings.
     */
    accessibility?: outputs.ManagementSimpleGatewayPlatformPortalSettingsAccessibility;
    /**
     * Configuration of the portal certificate settings.
     */
    certificateSettings?: outputs.ManagementSimpleGatewayPlatformPortalSettingsCertificateSettings;
    /**
     * Configuration of the portal web settings.
     */
    portalWebSettings?: outputs.ManagementSimpleGatewayPlatformPortalSettingsPortalWebSettings;
}

export interface ManagementSimpleGatewayPlatformPortalSettingsAccessibility {
    /**
     * Allowed access to the web portal (based on interfaces, or security policy).
     */
    allowAccessFrom?: string;
    /**
     * Configuration of the additional portal access settings for internal interfaces only.
     */
    internalAccessSettings?: outputs.ManagementSimpleGatewayPlatformPortalSettingsAccessibilityInternalAccessSettings;
}

export interface ManagementSimpleGatewayPlatformPortalSettingsAccessibilityInternalAccessSettings {
    /**
     * Controls portal access settings for internal interfaces, whose topology is set to 'DMZ'.
     */
    dmz?: boolean;
    /**
     * Controls portal access settings for internal interfaces, whose topology is set to 'Undefined'.
     */
    undefined?: boolean;
    /**
     * Controls portal access settings for interfaces that are part of a VPN Encryption Domain.
     */
    vpn?: boolean;
}

export interface ManagementSimpleGatewayPlatformPortalSettingsCertificateSettings {
    /**
     * The certificate file encoded in Base64 with padding.  This file must be in the *.p12 format.
     */
    base64Certificate?: string;
    /**
     * Password (encoded in Base64 with padding) for the certificate file.
     */
    base64Password?: string;
}

export interface ManagementSimpleGatewayPlatformPortalSettingsPortalWebSettings {
    /**
     * List of URL aliases that are redirected to the main portal URL.
     */
    aliases?: string[];
    /**
     * The main URL for the web portal.
     */
    mainUrl?: string;
}

export interface ManagementSimpleGatewayUsercheckPortalSettings {
    /**
     * Configuration of the portal access settings.
     */
    accessibility?: outputs.ManagementSimpleGatewayUsercheckPortalSettingsAccessibility;
    /**
     * Configuration of the portal certificate settings.
     */
    certificateSettings?: outputs.ManagementSimpleGatewayUsercheckPortalSettingsCertificateSettings;
    /**
     * State of the web portal (enabled or disabled). The supported blades are: {'Application Control', 'URL Filtering', 'Data Loss Prevention', 'Anti Virus', 'Anti Bot', 'Threat Emulation', 'Threat Extraction', 'Data Awareness'}.
     */
    enabled?: boolean;
    /**
     * Configuration of the portal web settings.
     */
    portalWebSettings?: outputs.ManagementSimpleGatewayUsercheckPortalSettingsPortalWebSettings;
}

export interface ManagementSimpleGatewayUsercheckPortalSettingsAccessibility {
    /**
     * Allowed access to the web portal (based on interfaces, or security policy).
     */
    allowAccessFrom?: string;
    /**
     * Configuration of the additional portal access settings for internal interfaces only.
     */
    internalAccessSettings?: outputs.ManagementSimpleGatewayUsercheckPortalSettingsAccessibilityInternalAccessSettings;
}

export interface ManagementSimpleGatewayUsercheckPortalSettingsAccessibilityInternalAccessSettings {
    /**
     * Controls portal access settings for internal interfaces, whose topology is set to 'DMZ'.
     */
    dmz?: boolean;
    /**
     * Controls portal access settings for internal interfaces, whose topology is set to 'Undefined'.
     */
    undefined?: boolean;
    /**
     * Controls portal access settings for interfaces that are part of a VPN Encryption Domain.
     */
    vpn?: boolean;
}

export interface ManagementSimpleGatewayUsercheckPortalSettingsCertificateSettings {
    /**
     * The certificate file encoded in Base64 with padding.  This file must be in the *.p12 format.
     */
    base64Certificate?: string;
    /**
     * Password (encoded in Base64 with padding) for the certificate file.
     */
    base64Password?: string;
}

export interface ManagementSimpleGatewayUsercheckPortalSettingsPortalWebSettings {
    /**
     * List of URL aliases that are redirected to the main portal URL.
     */
    aliases?: string[];
    /**
     * The main URL for the web portal.
     */
    mainUrl?: string;
}

export interface ManagementSmartTaskAction {
    /**
     * When the trigger is fired, runs the configured Repository Script on the defined targets.<br>The trigger data is then passed to the script as the first parameter. The parameter is JSON encoded in Base64 format.
     */
    runScript?: outputs.ManagementSmartTaskActionRunScript;
    /**
     * When the trigger is fired, sends the configured email to the defined recipients.
     */
    sendMail?: outputs.ManagementSmartTaskActionSendMail;
    /**
     * When the trigger is fired, sends an HTTPS POST web request to the configured URL.<br>The trigger data will be passed along with the SmartTask's custom data in the request's payload.
     */
    sendWebRequest?: outputs.ManagementSmartTaskActionSendWebRequest;
}

export interface ManagementSmartTaskActionRunScript {
    /**
     * Repository script that is executed when the trigger is fired.,  identified by the name or UID.
     */
    repositoryScript?: string;
    /**
     * Targets to execute the script on.
     */
    targets?: string[];
    /**
     * Script execution time-out in seconds.
     */
    timeOut?: number;
}

export interface ManagementSmartTaskActionSendMail {
    /**
     * The required settings to send the mail by.
     */
    mailSettings: outputs.ManagementSmartTaskActionSendMailMailSettings;
    /**
     * The UID or the name a preconfigured SMTP server object.
     */
    smtpServer?: outputs.ManagementSmartTaskActionSendMailSmtpServer;
}

export interface ManagementSmartTaskActionSendMailMailSettings {
    /**
     * What file should be attached to the mail.
     */
    attachment?: string;
    /**
     * A comma separated list of bcc recipient mail addresses.
     */
    bccRecipients?: string;
    /**
     * The email body.
     */
    body?: string;
    /**
     * A comma separated list of cc recipient mail addresses.
     */
    ccRecipients?: string;
    /**
     * A comma separated list of recipient mail addresses.
     */
    recipients?: string;
    /**
     * An email address to send the mail from.
     */
    senderEmail?: string;
    /**
     * The email subject.
     */
    subject?: string;
}

export interface ManagementSmartTaskActionSendMailSmtpServer {
    /**
     * Does the mail server requires authentication.
     */
    authentication: string;
    /**
     * Encryption type.
     */
    encryption: string;
    /**
     * Object name. Must be unique in the domain
     */
    name?: string;
    /**
     * The SMTP port to use.
     */
    port: string;
    /**
     * The SMTP server address.
     */
    server: string;
    /**
     * A username for the SMTP server.
     */
    username: string;
}

export interface ManagementSmartTaskActionSendWebRequest {
    /**
     * The SHA1 fingerprint of the URL's SSL certificate. Used to trust servers with self-signed SSL certificates.
     */
    fingerprint?: string;
    /**
     * Option to send to the web request via a proxy other than the Management's Server proxy (if defined).
     */
    overrideProxy?: boolean;
    /**
     * URL of the proxy used to send the request.
     */
    proxyUrl?: string;
    /**
     * Shared secret that can be used by the target server to identify the Management Server.<br>The value will be sent as part of the request in the "X-chkp-shared-secret" header.
     */
    sharedSecret?: string;
    /**
     * Web Request time-out in seconds.
     */
    timeOut?: number;
    /**
     * URL used for the web request.
     */
    url?: string;
}

export interface ManagementThreatIndicatorObservable {
    /**
     * The confidence level the indicator has that a real threat has been uncovered.
     */
    confidence?: string;
    /**
     * The name of a domain.
     */
    domain?: string;
    /**
     * A valid IP-Address.
     */
    ipAddress?: string;
    /**
     * A valid IP-Address, the beginning of the range. If you configure this parameter with a value, you must also configure the value of the 'ip-address-last' parameter
     */
    ipAddressFirst?: string;
    /**
     * A valid IP-Address, the end of the range. If you configure this parameter with a value, you must also configure the value of the 'ip-address-first' parameter.
     */
    ipAddressLast?: string;
    /**
     * A valid E-Mail address, cc field.
     */
    mailCc?: string;
    /**
     * A valid E-Mail address, sender field.
     */
    mailFrom?: string;
    /**
     * A valid E-Mail address, reply-to field.
     */
    mailReplyTo?: string;
    /**
     * Subject of E-Mail.
     */
    mailSubject?: string;
    /**
     * A valid E-Mail address, recipient filed.
     */
    mailTo?: string;
    /**
     * A valid MD5 sequence.
     */
    md5?: string;
    /**
     * Object name. Should be unique in the domain.
     */
    name: string;
    /**
     * The software blade that processes the observable: AV - AntiVirus, AB - AntiBot.
     */
    product?: string;
    /**
     * The severity level of the threat.
     */
    severity?: string;
    /**
     * A valid URL.
     */
    url?: string;
}

export interface ManagementThreatIndicatorProfileOverride {
    /**
     * The indicator's action in this profile.
     */
    action?: string;
    /**
     * The profile in which to override the indicator's action.
     */
    profile?: string;
}

export interface ManagementThreatIocFeedCustomHeader {
    /**
     * The name of the HTTP header we wish to add.
     */
    headerName?: string;
    /**
     * The name of the HTTP value we wish to add.
     */
    headerValue?: string;
}

export interface ManagementThreatProfileActivateProtectionsByExtendedAttribute {
    category: string;
    name: string;
    uid: string;
    values: outputs.ManagementThreatProfileActivateProtectionsByExtendedAttributeValue[];
}

export interface ManagementThreatProfileActivateProtectionsByExtendedAttributeValue {
    name: string;
    uid: string;
}

export interface ManagementThreatProfileDeactivateProtectionsByExtendedAttribute {
    /**
     * IPS tag category name.
     */
    category?: string;
    /**
     * IPS tag name.
     */
    name?: string;
    /**
     * IPS tag unique identifier.
     */
    uid?: string;
    /**
     * IPS protection extended attribute values
     */
    values: outputs.ManagementThreatProfileDeactivateProtectionsByExtendedAttributeValue[];
}

export interface ManagementThreatProfileDeactivateProtectionsByExtendedAttributeValue {
    name: string;
    uid: string;
}

export interface ManagementThreatProfileIndicatorOverride {
    /**
     * The indicator's action in this profile.
     */
    action?: string;
    /**
     * The indicator whose action is to be overriden.
     */
    indicator?: string;
}

export interface ManagementThreatProfileOverride {
    /**
     * Protection action.
     */
    action: string;
    /**
     * Capture packets.
     */
    capturePackets?: boolean;
    /**
     * Default settings.
     */
    default: {[key: string]: string};
    /**
     * Final settings.
     */
    final: {[key: string]: string};
    /**
     * IPS protection identified by name.
     */
    protection: string;
    /**
     * Collection of industry reference (CVE).
     */
    protectionExternalInfos: string[];
    /**
     * IPS protection unique identifier.
     */
    protectionUid: string;
    /**
     * Tracking method for protection.
     */
    track?: string;
}

export interface ManagementTimeHoursRange {
    /**
     * Is hour range enabled.
     */
    enabled?: boolean;
    /**
     * Time in format HH:MM.
     */
    from?: string;
    /**
     * Hour range index.
     */
    index?: number;
    /**
     * Time in format HH:MM.
     */
    to?: string;
}

export interface ManagementTimeRecurrence {
    /**
     * Valid on specific days. Multiple options, support range of days in months. Example:["1","3","9-20"].
     */
    days?: string[];
    /**
     * Valid on month. Example: "1", "2","12","Any".
     */
    month?: string;
    /**
     * Valid on "Interval", "Daily", "Weekly", "Monthly" base.
     */
    pattern?: string;
    /**
     * Valid on weekdays. Example: "Sun", "Mon"..."Sat".
     */
    weekdays?: string[];
}

export interface ManagementVpnCommunityMeshedGranularEncryption {
    /**
     * The encryption method to be used.
     */
    encryptionMethod?: string;
    /**
     * The encryption suite to be used.
     */
    encryptionSuite?: string;
    /**
     * Externally managed or 3rd party gateway identified by name or UID.
     */
    externalGateway: string;
    /**
     * Ike Phase 1 settings. Only applicable when the encryption-suite is set to [custom].
     */
    ikePhase1?: {[key: string]: string};
    /**
     * Ike Phase 2 settings. Only applicable when the encryption-suite is set to [custom].
     */
    ikePhase2?: {[key: string]: string};
    /**
     * Internally managed Check Point gateway identified by name or UID, or 'Any' for all internal-gateways participants in this community.
     */
    internalGateway: string;
}

export interface ManagementVpnCommunityMeshedOverrideVpnDomain {
    /**
     * Participant gateway in override VPN domain identified by the name or UID.
     */
    gateway?: string;
    /**
     * VPN domain network identified by the name or UID.
     */
    vpnDomain?: string;
}

export interface ManagementVpnCommunityMeshedSharedSecret {
    /**
     * External gateway identified by the name or UID.
     */
    externalGateway?: string;
    /**
     * Shared secret.
     */
    sharedSecret?: string;
}

export interface ManagementVpnCommunityStarGranularEncryption {
    /**
     * The encryption method to be used.
     */
    encryptionMethod?: string;
    /**
     * The encryption suite to be used.
     */
    encryptionSuite?: string;
    /**
     * Externally managed or 3rd party gateway identified by name or UID.
     */
    externalGateway: string;
    /**
     * Ike Phase 1 settings. Only applicable when the encryption-suite is set to [custom].
     */
    ikePhase1?: {[key: string]: string};
    /**
     * Ike Phase 2 settings. Only applicable when the encryption-suite is set to [custom].
     */
    ikePhase2?: {[key: string]: string};
    /**
     * Internally managed Check Point gateway identified by name or UID, or 'Any' for all internal-gateways participants in this community.
     */
    internalGateway: string;
}

export interface ManagementVpnCommunityStarOverrideVpnDomain {
    /**
     * Participant gateway in override VPN domain identified by the name or UID.
     */
    gateway?: string;
    /**
     * VPN domain network identified by the name or UID.
     */
    vpnDomain?: string;
}

export interface ManagementVpnCommunityStarSharedSecret {
    /**
     * External gateway identified by the name or UID.
     */
    externalGateway?: string;
    /**
     * Shared secret.
     */
    sharedSecret?: string;
}

