// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ManagementCommandSetThreatAdvancedSettings extends pulumi.CustomResource {
    /**
     * Get an existing ManagementCommandSetThreatAdvancedSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagementCommandSetThreatAdvancedSettingsState, opts?: pulumi.CustomResourceOptions): ManagementCommandSetThreatAdvancedSettings {
        return new ManagementCommandSetThreatAdvancedSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkpoint:index/managementCommandSetThreatAdvancedSettings:ManagementCommandSetThreatAdvancedSettings';

    /**
     * Returns true if the given object is an instance of ManagementCommandSetThreatAdvancedSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementCommandSetThreatAdvancedSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementCommandSetThreatAdvancedSettings.__pulumiType;
    }

    /**
     * Feed retrieving intervals of External Feed, in the form of HH:MM.
     */
    public readonly feedRetrievingInterval!: pulumi.Output<string | undefined>;
    /**
     * Enable HTTP Inspection on non standard ports for Threat Prevention blades.
     */
    public readonly httpiNonStandardPorts!: pulumi.Output<boolean | undefined>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    public readonly ignoreErrors!: pulumi.Output<boolean | undefined>;
    /**
     * Apply changes ignoring warnings.
     */
    public readonly ignoreWarnings!: pulumi.Output<boolean | undefined>;
    /**
     * In case of internal system error, allow or block all connections.
     */
    public readonly internalErrorFailMode!: pulumi.Output<string | undefined>;
    /**
     * Session unification timeout for logs (minutes).
     */
    public readonly logUnificationTimeout!: pulumi.Output<number | undefined>;
    /**
     * Allow (Background) or Block (Hold) requests until categorization is complete.
     */
    public readonly resourceClassification!: pulumi.Output<outputs.ManagementCommandSetThreatAdvancedSettingsResourceClassification | undefined>;

    /**
     * Create a ManagementCommandSetThreatAdvancedSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ManagementCommandSetThreatAdvancedSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagementCommandSetThreatAdvancedSettingsArgs | ManagementCommandSetThreatAdvancedSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagementCommandSetThreatAdvancedSettingsState | undefined;
            resourceInputs["feedRetrievingInterval"] = state ? state.feedRetrievingInterval : undefined;
            resourceInputs["httpiNonStandardPorts"] = state ? state.httpiNonStandardPorts : undefined;
            resourceInputs["ignoreErrors"] = state ? state.ignoreErrors : undefined;
            resourceInputs["ignoreWarnings"] = state ? state.ignoreWarnings : undefined;
            resourceInputs["internalErrorFailMode"] = state ? state.internalErrorFailMode : undefined;
            resourceInputs["logUnificationTimeout"] = state ? state.logUnificationTimeout : undefined;
            resourceInputs["resourceClassification"] = state ? state.resourceClassification : undefined;
        } else {
            const args = argsOrState as ManagementCommandSetThreatAdvancedSettingsArgs | undefined;
            resourceInputs["feedRetrievingInterval"] = args ? args.feedRetrievingInterval : undefined;
            resourceInputs["httpiNonStandardPorts"] = args ? args.httpiNonStandardPorts : undefined;
            resourceInputs["ignoreErrors"] = args ? args.ignoreErrors : undefined;
            resourceInputs["ignoreWarnings"] = args ? args.ignoreWarnings : undefined;
            resourceInputs["internalErrorFailMode"] = args ? args.internalErrorFailMode : undefined;
            resourceInputs["logUnificationTimeout"] = args ? args.logUnificationTimeout : undefined;
            resourceInputs["resourceClassification"] = args ? args.resourceClassification : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagementCommandSetThreatAdvancedSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagementCommandSetThreatAdvancedSettings resources.
 */
export interface ManagementCommandSetThreatAdvancedSettingsState {
    /**
     * Feed retrieving intervals of External Feed, in the form of HH:MM.
     */
    feedRetrievingInterval?: pulumi.Input<string>;
    /**
     * Enable HTTP Inspection on non standard ports for Threat Prevention blades.
     */
    httpiNonStandardPorts?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    ignoreErrors?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring warnings.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * In case of internal system error, allow or block all connections.
     */
    internalErrorFailMode?: pulumi.Input<string>;
    /**
     * Session unification timeout for logs (minutes).
     */
    logUnificationTimeout?: pulumi.Input<number>;
    /**
     * Allow (Background) or Block (Hold) requests until categorization is complete.
     */
    resourceClassification?: pulumi.Input<inputs.ManagementCommandSetThreatAdvancedSettingsResourceClassification>;
}

/**
 * The set of arguments for constructing a ManagementCommandSetThreatAdvancedSettings resource.
 */
export interface ManagementCommandSetThreatAdvancedSettingsArgs {
    /**
     * Feed retrieving intervals of External Feed, in the form of HH:MM.
     */
    feedRetrievingInterval?: pulumi.Input<string>;
    /**
     * Enable HTTP Inspection on non standard ports for Threat Prevention blades.
     */
    httpiNonStandardPorts?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    ignoreErrors?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring warnings.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * In case of internal system error, allow or block all connections.
     */
    internalErrorFailMode?: pulumi.Input<string>;
    /**
     * Session unification timeout for logs (minutes).
     */
    logUnificationTimeout?: pulumi.Input<number>;
    /**
     * Allow (Background) or Block (Hold) requests until categorization is complete.
     */
    resourceClassification?: pulumi.Input<inputs.ManagementCommandSetThreatAdvancedSettingsResourceClassification>;
}
