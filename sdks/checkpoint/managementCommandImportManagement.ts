// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ManagementCommandImportManagement extends pulumi.CustomResource {
    /**
     * Get an existing ManagementCommandImportManagement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagementCommandImportManagementState, opts?: pulumi.CustomResourceOptions): ManagementCommandImportManagement {
        return new ManagementCommandImportManagement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkpoint:index/managementCommandImportManagement:ManagementCommandImportManagement';

    /**
     * Returns true if the given object is an instance of ManagementCommandImportManagement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementCommandImportManagement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementCommandImportManagement.__pulumiType;
    }

    /**
     * IPv4 address for the imported Domain. Required only for importing the Security Management Server into the Multi-Domain
     * Server.
     */
    public readonly domainIpAddress!: pulumi.Output<string | undefined>;
    /**
     * Domain name to be imported. Must be unique in the Multi-Domain Server. Required only for importing the Security
     * Management Server into the Multi-Domain Server.
     */
    public readonly domainName!: pulumi.Output<string | undefined>;
    /**
     * Multi-Domain Server name for the imported Domain. Required only for importing the Security Management Server into the
     * Multi-Domain Server.
     */
    public readonly domainServerName!: pulumi.Output<string | undefined>;
    /**
     * Path to the exported database file to be imported.
     */
    public readonly filePath!: pulumi.Output<string>;
    /**
     * Ignoring the verification warnings. By Setting this parameter to 'true' import will not be blocked by warnings.
     */
    public readonly ignoreWarnings!: pulumi.Output<boolean | undefined>;
    /**
     * Include import of the Endpoint Security Management configuration files.
     */
    public readonly includeEndpointConfiguration!: pulumi.Output<boolean | undefined>;
    /**
     * Include import of the Endpoint Security Management database.
     */
    public readonly includeEndpointDatabase!: pulumi.Output<boolean | undefined>;
    /**
     * Import logs without log indexes.
     */
    public readonly includeLogs!: pulumi.Output<boolean | undefined>;
    /**
     * Import logs with log indexes.
     */
    public readonly includeLogsIndexes!: pulumi.Output<boolean | undefined>;
    /**
     * If set to "True", session is expired and login is required.
     */
    public /*out*/ readonly loginRequired!: pulumi.Output<string>;
    /**
     * If true, only runs the pre-import verifications instead of the full import.
     */
    public readonly preImportVerificationOnly!: pulumi.Output<boolean | undefined>;
    /**
     * Asynchronous task unique identifier.
     */
    public /*out*/ readonly taskId!: pulumi.Output<string>;
    /**
     * If true, verify that the restore operation is valid for this input file and this environment. <br>Note: Restore
     * operation will not be executed.
     */
    public readonly verifyDomainRestore!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ManagementCommandImportManagement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagementCommandImportManagementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagementCommandImportManagementArgs | ManagementCommandImportManagementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagementCommandImportManagementState | undefined;
            resourceInputs["domainIpAddress"] = state ? state.domainIpAddress : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["domainServerName"] = state ? state.domainServerName : undefined;
            resourceInputs["filePath"] = state ? state.filePath : undefined;
            resourceInputs["ignoreWarnings"] = state ? state.ignoreWarnings : undefined;
            resourceInputs["includeEndpointConfiguration"] = state ? state.includeEndpointConfiguration : undefined;
            resourceInputs["includeEndpointDatabase"] = state ? state.includeEndpointDatabase : undefined;
            resourceInputs["includeLogs"] = state ? state.includeLogs : undefined;
            resourceInputs["includeLogsIndexes"] = state ? state.includeLogsIndexes : undefined;
            resourceInputs["loginRequired"] = state ? state.loginRequired : undefined;
            resourceInputs["preImportVerificationOnly"] = state ? state.preImportVerificationOnly : undefined;
            resourceInputs["taskId"] = state ? state.taskId : undefined;
            resourceInputs["verifyDomainRestore"] = state ? state.verifyDomainRestore : undefined;
        } else {
            const args = argsOrState as ManagementCommandImportManagementArgs | undefined;
            if ((!args || args.filePath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filePath'");
            }
            resourceInputs["domainIpAddress"] = args ? args.domainIpAddress : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["domainServerName"] = args ? args.domainServerName : undefined;
            resourceInputs["filePath"] = args ? args.filePath : undefined;
            resourceInputs["ignoreWarnings"] = args ? args.ignoreWarnings : undefined;
            resourceInputs["includeEndpointConfiguration"] = args ? args.includeEndpointConfiguration : undefined;
            resourceInputs["includeEndpointDatabase"] = args ? args.includeEndpointDatabase : undefined;
            resourceInputs["includeLogs"] = args ? args.includeLogs : undefined;
            resourceInputs["includeLogsIndexes"] = args ? args.includeLogsIndexes : undefined;
            resourceInputs["preImportVerificationOnly"] = args ? args.preImportVerificationOnly : undefined;
            resourceInputs["verifyDomainRestore"] = args ? args.verifyDomainRestore : undefined;
            resourceInputs["loginRequired"] = undefined /*out*/;
            resourceInputs["taskId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagementCommandImportManagement.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagementCommandImportManagement resources.
 */
export interface ManagementCommandImportManagementState {
    /**
     * IPv4 address for the imported Domain. Required only for importing the Security Management Server into the Multi-Domain
     * Server.
     */
    domainIpAddress?: pulumi.Input<string>;
    /**
     * Domain name to be imported. Must be unique in the Multi-Domain Server. Required only for importing the Security
     * Management Server into the Multi-Domain Server.
     */
    domainName?: pulumi.Input<string>;
    /**
     * Multi-Domain Server name for the imported Domain. Required only for importing the Security Management Server into the
     * Multi-Domain Server.
     */
    domainServerName?: pulumi.Input<string>;
    /**
     * Path to the exported database file to be imported.
     */
    filePath?: pulumi.Input<string>;
    /**
     * Ignoring the verification warnings. By Setting this parameter to 'true' import will not be blocked by warnings.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * Include import of the Endpoint Security Management configuration files.
     */
    includeEndpointConfiguration?: pulumi.Input<boolean>;
    /**
     * Include import of the Endpoint Security Management database.
     */
    includeEndpointDatabase?: pulumi.Input<boolean>;
    /**
     * Import logs without log indexes.
     */
    includeLogs?: pulumi.Input<boolean>;
    /**
     * Import logs with log indexes.
     */
    includeLogsIndexes?: pulumi.Input<boolean>;
    /**
     * If set to "True", session is expired and login is required.
     */
    loginRequired?: pulumi.Input<string>;
    /**
     * If true, only runs the pre-import verifications instead of the full import.
     */
    preImportVerificationOnly?: pulumi.Input<boolean>;
    /**
     * Asynchronous task unique identifier.
     */
    taskId?: pulumi.Input<string>;
    /**
     * If true, verify that the restore operation is valid for this input file and this environment. <br>Note: Restore
     * operation will not be executed.
     */
    verifyDomainRestore?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ManagementCommandImportManagement resource.
 */
export interface ManagementCommandImportManagementArgs {
    /**
     * IPv4 address for the imported Domain. Required only for importing the Security Management Server into the Multi-Domain
     * Server.
     */
    domainIpAddress?: pulumi.Input<string>;
    /**
     * Domain name to be imported. Must be unique in the Multi-Domain Server. Required only for importing the Security
     * Management Server into the Multi-Domain Server.
     */
    domainName?: pulumi.Input<string>;
    /**
     * Multi-Domain Server name for the imported Domain. Required only for importing the Security Management Server into the
     * Multi-Domain Server.
     */
    domainServerName?: pulumi.Input<string>;
    /**
     * Path to the exported database file to be imported.
     */
    filePath: pulumi.Input<string>;
    /**
     * Ignoring the verification warnings. By Setting this parameter to 'true' import will not be blocked by warnings.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * Include import of the Endpoint Security Management configuration files.
     */
    includeEndpointConfiguration?: pulumi.Input<boolean>;
    /**
     * Include import of the Endpoint Security Management database.
     */
    includeEndpointDatabase?: pulumi.Input<boolean>;
    /**
     * Import logs without log indexes.
     */
    includeLogs?: pulumi.Input<boolean>;
    /**
     * Import logs with log indexes.
     */
    includeLogsIndexes?: pulumi.Input<boolean>;
    /**
     * If true, only runs the pre-import verifications instead of the full import.
     */
    preImportVerificationOnly?: pulumi.Input<boolean>;
    /**
     * If true, verify that the restore operation is valid for this input file and this environment. <br>Note: Restore
     * operation will not be executed.
     */
    verifyDomainRestore?: pulumi.Input<boolean>;
}
