// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ManagementInstallPolicy extends pulumi.CustomResource {
    /**
     * Get an existing ManagementInstallPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagementInstallPolicyState, opts?: pulumi.CustomResourceOptions): ManagementInstallPolicy {
        return new ManagementInstallPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkpoint:index/managementInstallPolicy:ManagementInstallPolicy';

    /**
     * Returns true if the given object is an instance of ManagementInstallPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementInstallPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementInstallPolicy.__pulumiType;
    }

    /**
     * Set to be true in order to install the Access Control policy. By default, the value is true if Access Control policy is
     * enabled on the input policy package, otherwise false.
     */
    public readonly access!: pulumi.Output<boolean | undefined>;
    /**
     * Set to be true in order to install the Desktop Security policy. By default, the value is true if desktop security policy
     * is enabled on the input policy package, otherwise false.
     */
    public readonly desktopSecurity!: pulumi.Output<boolean | undefined>;
    /**
     * Relevant for the gateway clusters. If true, the policy is installed on all the cluster members. If the installation on a
     * cluster member fails, don't install on that cluster.
     */
    public readonly installOnAllClusterMembersOrFail!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the Policy Package to be installed.
     */
    public readonly policyPackage!: pulumi.Output<string>;
    /**
     * If true, prepares the policy for the installation, but doesn't install it on an installation target.
     */
    public readonly prepareOnly!: pulumi.Output<boolean | undefined>;
    /**
     * Set to be true in order to install the QoS policy. By default, the value is true if Quality-of-Service policy is enabled
     * on the input policy package, otherwise false.
     */
    public readonly qos!: pulumi.Output<boolean | undefined>;
    /**
     * The UID of the revision of the policy to install.
     */
    public readonly revision!: pulumi.Output<string | undefined>;
    /**
     * On what targets to execute this command. Targets may be identified by their name, or object unique identifier.
     */
    public readonly targets!: pulumi.Output<string[]>;
    /**
     * Command asynchronous task unique identifier.
     */
    public /*out*/ readonly taskId!: pulumi.Output<string>;
    /**
     * Set to be true in order to install the Threat Prevention policy. By default, the value is true if Threat Prevention
     * policy is enabled on the input policy package, otherwise false.
     */
    public readonly threatPrevention!: pulumi.Output<boolean | undefined>;
    /**
     * Triggers a install-policy if there are any changes to objects in this list.
     */
    public readonly triggers!: pulumi.Output<string[] | undefined>;

    /**
     * Create a ManagementInstallPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagementInstallPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagementInstallPolicyArgs | ManagementInstallPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagementInstallPolicyState | undefined;
            resourceInputs["access"] = state ? state.access : undefined;
            resourceInputs["desktopSecurity"] = state ? state.desktopSecurity : undefined;
            resourceInputs["installOnAllClusterMembersOrFail"] = state ? state.installOnAllClusterMembersOrFail : undefined;
            resourceInputs["policyPackage"] = state ? state.policyPackage : undefined;
            resourceInputs["prepareOnly"] = state ? state.prepareOnly : undefined;
            resourceInputs["qos"] = state ? state.qos : undefined;
            resourceInputs["revision"] = state ? state.revision : undefined;
            resourceInputs["targets"] = state ? state.targets : undefined;
            resourceInputs["taskId"] = state ? state.taskId : undefined;
            resourceInputs["threatPrevention"] = state ? state.threatPrevention : undefined;
            resourceInputs["triggers"] = state ? state.triggers : undefined;
        } else {
            const args = argsOrState as ManagementInstallPolicyArgs | undefined;
            if ((!args || args.policyPackage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyPackage'");
            }
            if ((!args || args.targets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targets'");
            }
            resourceInputs["access"] = args ? args.access : undefined;
            resourceInputs["desktopSecurity"] = args ? args.desktopSecurity : undefined;
            resourceInputs["installOnAllClusterMembersOrFail"] = args ? args.installOnAllClusterMembersOrFail : undefined;
            resourceInputs["policyPackage"] = args ? args.policyPackage : undefined;
            resourceInputs["prepareOnly"] = args ? args.prepareOnly : undefined;
            resourceInputs["qos"] = args ? args.qos : undefined;
            resourceInputs["revision"] = args ? args.revision : undefined;
            resourceInputs["targets"] = args ? args.targets : undefined;
            resourceInputs["threatPrevention"] = args ? args.threatPrevention : undefined;
            resourceInputs["triggers"] = args ? args.triggers : undefined;
            resourceInputs["taskId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagementInstallPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagementInstallPolicy resources.
 */
export interface ManagementInstallPolicyState {
    /**
     * Set to be true in order to install the Access Control policy. By default, the value is true if Access Control policy is
     * enabled on the input policy package, otherwise false.
     */
    access?: pulumi.Input<boolean>;
    /**
     * Set to be true in order to install the Desktop Security policy. By default, the value is true if desktop security policy
     * is enabled on the input policy package, otherwise false.
     */
    desktopSecurity?: pulumi.Input<boolean>;
    /**
     * Relevant for the gateway clusters. If true, the policy is installed on all the cluster members. If the installation on a
     * cluster member fails, don't install on that cluster.
     */
    installOnAllClusterMembersOrFail?: pulumi.Input<boolean>;
    /**
     * The name of the Policy Package to be installed.
     */
    policyPackage?: pulumi.Input<string>;
    /**
     * If true, prepares the policy for the installation, but doesn't install it on an installation target.
     */
    prepareOnly?: pulumi.Input<boolean>;
    /**
     * Set to be true in order to install the QoS policy. By default, the value is true if Quality-of-Service policy is enabled
     * on the input policy package, otherwise false.
     */
    qos?: pulumi.Input<boolean>;
    /**
     * The UID of the revision of the policy to install.
     */
    revision?: pulumi.Input<string>;
    /**
     * On what targets to execute this command. Targets may be identified by their name, or object unique identifier.
     */
    targets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Command asynchronous task unique identifier.
     */
    taskId?: pulumi.Input<string>;
    /**
     * Set to be true in order to install the Threat Prevention policy. By default, the value is true if Threat Prevention
     * policy is enabled on the input policy package, otherwise false.
     */
    threatPrevention?: pulumi.Input<boolean>;
    /**
     * Triggers a install-policy if there are any changes to objects in this list.
     */
    triggers?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ManagementInstallPolicy resource.
 */
export interface ManagementInstallPolicyArgs {
    /**
     * Set to be true in order to install the Access Control policy. By default, the value is true if Access Control policy is
     * enabled on the input policy package, otherwise false.
     */
    access?: pulumi.Input<boolean>;
    /**
     * Set to be true in order to install the Desktop Security policy. By default, the value is true if desktop security policy
     * is enabled on the input policy package, otherwise false.
     */
    desktopSecurity?: pulumi.Input<boolean>;
    /**
     * Relevant for the gateway clusters. If true, the policy is installed on all the cluster members. If the installation on a
     * cluster member fails, don't install on that cluster.
     */
    installOnAllClusterMembersOrFail?: pulumi.Input<boolean>;
    /**
     * The name of the Policy Package to be installed.
     */
    policyPackage: pulumi.Input<string>;
    /**
     * If true, prepares the policy for the installation, but doesn't install it on an installation target.
     */
    prepareOnly?: pulumi.Input<boolean>;
    /**
     * Set to be true in order to install the QoS policy. By default, the value is true if Quality-of-Service policy is enabled
     * on the input policy package, otherwise false.
     */
    qos?: pulumi.Input<boolean>;
    /**
     * The UID of the revision of the policy to install.
     */
    revision?: pulumi.Input<string>;
    /**
     * On what targets to execute this command. Targets may be identified by their name, or object unique identifier.
     */
    targets: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set to be true in order to install the Threat Prevention policy. By default, the value is true if Threat Prevention
     * policy is enabled on the input policy package, otherwise false.
     */
    threatPrevention?: pulumi.Input<boolean>;
    /**
     * Triggers a install-policy if there are any changes to objects in this list.
     */
    triggers?: pulumi.Input<pulumi.Input<string>[]>;
}
