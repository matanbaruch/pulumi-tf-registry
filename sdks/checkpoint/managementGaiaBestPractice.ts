// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ManagementGaiaBestPractice extends pulumi.CustomResource {
    /**
     * Get an existing ManagementGaiaBestPractice resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagementGaiaBestPracticeState, opts?: pulumi.CustomResourceOptions): ManagementGaiaBestPractice {
        return new ManagementGaiaBestPractice(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkpoint:index/managementGaiaBestPractice:ManagementGaiaBestPractice';

    /**
     * Returns true if the given object is an instance of ManagementGaiaBestPractice.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementGaiaBestPractice {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementGaiaBestPractice.__pulumiType;
    }

    /**
     * To comply with Best Practice, do this action item.
     */
    public readonly actionItem!: pulumi.Output<string>;
    /**
     * Best Practice ID.
     */
    public readonly bestPracticeId!: pulumi.Output<string | undefined>;
    /**
     * Description of the Best Practice.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The expected output of the script as Base64.
     */
    public readonly expectedOutputBase64!: pulumi.Output<string | undefined>;
    /**
     * The expected output of the script as plain text.
     */
    public readonly expectedOutputText!: pulumi.Output<string | undefined>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    public readonly ignoreErrors!: pulumi.Output<boolean | undefined>;
    /**
     * Apply changes ignoring warnings.
     */
    public readonly ignoreWarnings!: pulumi.Output<boolean | undefined>;
    /**
     * Best Practice Name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The entire content of the script encoded in Base64 to run on Gaia Security Gateways during the Compliance scans.
     */
    public readonly practiceScriptBase64!: pulumi.Output<string | undefined>;
    /**
     * The absolute path of the script on the Management Server to run on Gaia Security Gateways during the Compliance scans.
     */
    public readonly practiceScriptPath!: pulumi.Output<string | undefined>;
    /**
     * The applicable regulations of the Gaia Best Practice. Appear only when the value of the 'details-level' parameter is set
     * to 'full'.
     */
    public /*out*/ readonly regulations!: pulumi.Output<outputs.ManagementGaiaBestPracticeRegulation[]>;
    /**
     * The applicable objects of the Gaia Best Practice. Appear only when the value of the 'details-level' parameter is set to
     * 'full'.
     */
    public /*out*/ readonly relevantObjects!: pulumi.Output<outputs.ManagementGaiaBestPracticeRelevantObject[]>;
    /**
     * The current status of the Best Practice.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Determines if the Gaia Best Practice is a user-defined best practice.
     */
    public /*out*/ readonly userDefined!: pulumi.Output<boolean>;

    /**
     * Create a ManagementGaiaBestPractice resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagementGaiaBestPracticeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagementGaiaBestPracticeArgs | ManagementGaiaBestPracticeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagementGaiaBestPracticeState | undefined;
            resourceInputs["actionItem"] = state ? state.actionItem : undefined;
            resourceInputs["bestPracticeId"] = state ? state.bestPracticeId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["expectedOutputBase64"] = state ? state.expectedOutputBase64 : undefined;
            resourceInputs["expectedOutputText"] = state ? state.expectedOutputText : undefined;
            resourceInputs["ignoreErrors"] = state ? state.ignoreErrors : undefined;
            resourceInputs["ignoreWarnings"] = state ? state.ignoreWarnings : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["practiceScriptBase64"] = state ? state.practiceScriptBase64 : undefined;
            resourceInputs["practiceScriptPath"] = state ? state.practiceScriptPath : undefined;
            resourceInputs["regulations"] = state ? state.regulations : undefined;
            resourceInputs["relevantObjects"] = state ? state.relevantObjects : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["userDefined"] = state ? state.userDefined : undefined;
        } else {
            const args = argsOrState as ManagementGaiaBestPracticeArgs | undefined;
            if ((!args || args.actionItem === undefined) && !opts.urn) {
                throw new Error("Missing required property 'actionItem'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            resourceInputs["actionItem"] = args ? args.actionItem : undefined;
            resourceInputs["bestPracticeId"] = args ? args.bestPracticeId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["expectedOutputBase64"] = args ? args.expectedOutputBase64 : undefined;
            resourceInputs["expectedOutputText"] = args ? args.expectedOutputText : undefined;
            resourceInputs["ignoreErrors"] = args ? args.ignoreErrors : undefined;
            resourceInputs["ignoreWarnings"] = args ? args.ignoreWarnings : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["practiceScriptBase64"] = args ? args.practiceScriptBase64 : undefined;
            resourceInputs["practiceScriptPath"] = args ? args.practiceScriptPath : undefined;
            resourceInputs["regulations"] = undefined /*out*/;
            resourceInputs["relevantObjects"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["userDefined"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagementGaiaBestPractice.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagementGaiaBestPractice resources.
 */
export interface ManagementGaiaBestPracticeState {
    /**
     * To comply with Best Practice, do this action item.
     */
    actionItem?: pulumi.Input<string>;
    /**
     * Best Practice ID.
     */
    bestPracticeId?: pulumi.Input<string>;
    /**
     * Description of the Best Practice.
     */
    description?: pulumi.Input<string>;
    /**
     * The expected output of the script as Base64.
     */
    expectedOutputBase64?: pulumi.Input<string>;
    /**
     * The expected output of the script as plain text.
     */
    expectedOutputText?: pulumi.Input<string>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    ignoreErrors?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring warnings.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * Best Practice Name.
     */
    name?: pulumi.Input<string>;
    /**
     * The entire content of the script encoded in Base64 to run on Gaia Security Gateways during the Compliance scans.
     */
    practiceScriptBase64?: pulumi.Input<string>;
    /**
     * The absolute path of the script on the Management Server to run on Gaia Security Gateways during the Compliance scans.
     */
    practiceScriptPath?: pulumi.Input<string>;
    /**
     * The applicable regulations of the Gaia Best Practice. Appear only when the value of the 'details-level' parameter is set
     * to 'full'.
     */
    regulations?: pulumi.Input<pulumi.Input<inputs.ManagementGaiaBestPracticeRegulation>[]>;
    /**
     * The applicable objects of the Gaia Best Practice. Appear only when the value of the 'details-level' parameter is set to
     * 'full'.
     */
    relevantObjects?: pulumi.Input<pulumi.Input<inputs.ManagementGaiaBestPracticeRelevantObject>[]>;
    /**
     * The current status of the Best Practice.
     */
    status?: pulumi.Input<string>;
    /**
     * Determines if the Gaia Best Practice is a user-defined best practice.
     */
    userDefined?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ManagementGaiaBestPractice resource.
 */
export interface ManagementGaiaBestPracticeArgs {
    /**
     * To comply with Best Practice, do this action item.
     */
    actionItem: pulumi.Input<string>;
    /**
     * Best Practice ID.
     */
    bestPracticeId?: pulumi.Input<string>;
    /**
     * Description of the Best Practice.
     */
    description: pulumi.Input<string>;
    /**
     * The expected output of the script as Base64.
     */
    expectedOutputBase64?: pulumi.Input<string>;
    /**
     * The expected output of the script as plain text.
     */
    expectedOutputText?: pulumi.Input<string>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    ignoreErrors?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring warnings.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * Best Practice Name.
     */
    name?: pulumi.Input<string>;
    /**
     * The entire content of the script encoded in Base64 to run on Gaia Security Gateways during the Compliance scans.
     */
    practiceScriptBase64?: pulumi.Input<string>;
    /**
     * The absolute path of the script on the Management Server to run on Gaia Security Gateways during the Compliance scans.
     */
    practiceScriptPath?: pulumi.Input<string>;
}
