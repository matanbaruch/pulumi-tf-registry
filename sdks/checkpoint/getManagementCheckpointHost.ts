// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getManagementCheckpointHost(args?: GetManagementCheckpointHostArgs, opts?: pulumi.InvokeOptions): Promise<GetManagementCheckpointHostResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("checkpoint:index/getManagementCheckpointHost:getManagementCheckpointHost", {
        "id": args.id,
        "managementBlades": args.managementBlades,
        "name": args.name,
        "uid": args.uid,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getManagementCheckpointHost.
 */
export interface GetManagementCheckpointHostArgs {
    id?: string;
    managementBlades?: {[key: string]: string};
    name?: string;
    uid?: string;
}

/**
 * A collection of values returned by getManagementCheckpointHost.
 */
export interface GetManagementCheckpointHostResult {
    readonly color: string;
    readonly comments: string;
    readonly hardware: string;
    readonly id: string;
    readonly interfaces: outputs.GetManagementCheckpointHostInterface[];
    readonly ipv4Address: string;
    readonly ipv6Address: string;
    readonly logsSettings: {[key: string]: string};
    readonly managementBlades?: {[key: string]: string};
    readonly name?: string;
    readonly natSettings: {[key: string]: string};
    readonly os: string;
    readonly saveLogsLocally: boolean;
    readonly sendAlertsToServers: string[];
    readonly sendLogsToBackupServers: string[];
    readonly sendLogsToServers: string[];
    readonly sicName: string;
    readonly sicState: string;
    readonly tags: string[];
    readonly uid?: string;
    readonly version: string;
}
export function getManagementCheckpointHostOutput(args?: GetManagementCheckpointHostOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetManagementCheckpointHostResult> {
    return pulumi.output(args).apply((a: any) => getManagementCheckpointHost(a, opts))
}

/**
 * A collection of arguments for invoking getManagementCheckpointHost.
 */
export interface GetManagementCheckpointHostOutputArgs {
    id?: pulumi.Input<string>;
    managementBlades?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    uid?: pulumi.Input<string>;
}
