// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getManagementLsmCluster(args?: GetManagementLsmClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetManagementLsmClusterResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("checkpoint:index/getManagementLsmCluster:getManagementLsmCluster", {
        "color": args.color,
        "comments": args.comments,
        "id": args.id,
        "ignoreErrors": args.ignoreErrors,
        "ignoreWarnings": args.ignoreWarnings,
        "interfaces": args.interfaces,
        "name": args.name,
        "tags": args.tags,
        "uid": args.uid,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getManagementLsmCluster.
 */
export interface GetManagementLsmClusterArgs {
    color?: string;
    comments?: string;
    id?: string;
    ignoreErrors?: boolean;
    ignoreWarnings?: boolean;
    interfaces?: inputs.GetManagementLsmClusterInterface[];
    name?: string;
    tags?: string[];
    uid?: string;
}

/**
 * A collection of values returned by getManagementLsmCluster.
 */
export interface GetManagementLsmClusterResult {
    readonly color?: string;
    readonly comments?: string;
    readonly dynamicObjects: outputs.GetManagementLsmClusterDynamicObject[];
    readonly id: string;
    readonly ignoreErrors?: boolean;
    readonly ignoreWarnings?: boolean;
    readonly interfaces?: outputs.GetManagementLsmClusterInterface[];
    readonly mainIpAddress: string;
    readonly members: outputs.GetManagementLsmClusterMember[];
    readonly name?: string;
    readonly osName: string;
    readonly securityProfile: string;
    readonly tags?: string[];
    readonly topologies: outputs.GetManagementLsmClusterTopology[];
    readonly uid?: string;
    readonly version: string;
}
export function getManagementLsmClusterOutput(args?: GetManagementLsmClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetManagementLsmClusterResult> {
    return pulumi.output(args).apply((a: any) => getManagementLsmCluster(a, opts))
}

/**
 * A collection of arguments for invoking getManagementLsmCluster.
 */
export interface GetManagementLsmClusterOutputArgs {
    color?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ignoreErrors?: pulumi.Input<boolean>;
    ignoreWarnings?: pulumi.Input<boolean>;
    interfaces?: pulumi.Input<pulumi.Input<inputs.GetManagementLsmClusterInterfaceArgs>[]>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    uid?: pulumi.Input<string>;
}
