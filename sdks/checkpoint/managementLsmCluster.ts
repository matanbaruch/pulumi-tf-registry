// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ManagementLsmCluster extends pulumi.CustomResource {
    /**
     * Get an existing ManagementLsmCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagementLsmClusterState, opts?: pulumi.CustomResourceOptions): ManagementLsmCluster {
        return new ManagementLsmCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkpoint:index/managementLsmCluster:ManagementLsmCluster';

    /**
     * Returns true if the given object is an instance of ManagementLsmCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementLsmCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementLsmCluster.__pulumiType;
    }

    /**
     * Color of the object. Should be one of existing colors.
     */
    public readonly color!: pulumi.Output<string | undefined>;
    /**
     * Comments string.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * Dynamic Objects.
     */
    public readonly dynamicObjects!: pulumi.Output<outputs.ManagementLsmClusterDynamicObject[] | undefined>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    public readonly ignoreErrors!: pulumi.Output<boolean | undefined>;
    /**
     * Apply changes ignoring warnings.
     */
    public readonly ignoreWarnings!: pulumi.Output<boolean | undefined>;
    /**
     * Interfaces.
     */
    public readonly interfaces!: pulumi.Output<outputs.ManagementLsmClusterInterface[] | undefined>;
    /**
     * Main IP address.
     */
    public readonly mainIpAddress!: pulumi.Output<string>;
    /**
     * Cluster members.
     */
    public readonly members!: pulumi.Output<outputs.ManagementLsmClusterMember[] | undefined>;
    /**
     * Object name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Device platform operating system.
     */
    public /*out*/ readonly osName!: pulumi.Output<string>;
    /**
     * LSM profile.
     */
    public readonly securityProfile!: pulumi.Output<string>;
    /**
     * Collection of tag identifiers.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Topology.
     */
    public readonly topology!: pulumi.Output<outputs.ManagementLsmClusterTopology | undefined>;
    /**
     * Device platform version.
     */
    public /*out*/ readonly version!: pulumi.Output<string>;

    /**
     * Create a ManagementLsmCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagementLsmClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagementLsmClusterArgs | ManagementLsmClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagementLsmClusterState | undefined;
            resourceInputs["color"] = state ? state.color : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["dynamicObjects"] = state ? state.dynamicObjects : undefined;
            resourceInputs["ignoreErrors"] = state ? state.ignoreErrors : undefined;
            resourceInputs["ignoreWarnings"] = state ? state.ignoreWarnings : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["mainIpAddress"] = state ? state.mainIpAddress : undefined;
            resourceInputs["members"] = state ? state.members : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["osName"] = state ? state.osName : undefined;
            resourceInputs["securityProfile"] = state ? state.securityProfile : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["topology"] = state ? state.topology : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as ManagementLsmClusterArgs | undefined;
            if ((!args || args.mainIpAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mainIpAddress'");
            }
            if ((!args || args.securityProfile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityProfile'");
            }
            resourceInputs["color"] = args ? args.color : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["dynamicObjects"] = args ? args.dynamicObjects : undefined;
            resourceInputs["ignoreErrors"] = args ? args.ignoreErrors : undefined;
            resourceInputs["ignoreWarnings"] = args ? args.ignoreWarnings : undefined;
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["mainIpAddress"] = args ? args.mainIpAddress : undefined;
            resourceInputs["members"] = args ? args.members : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["securityProfile"] = args ? args.securityProfile : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["topology"] = args ? args.topology : undefined;
            resourceInputs["osName"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagementLsmCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagementLsmCluster resources.
 */
export interface ManagementLsmClusterState {
    /**
     * Color of the object. Should be one of existing colors.
     */
    color?: pulumi.Input<string>;
    /**
     * Comments string.
     */
    comments?: pulumi.Input<string>;
    /**
     * Dynamic Objects.
     */
    dynamicObjects?: pulumi.Input<pulumi.Input<inputs.ManagementLsmClusterDynamicObject>[]>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    ignoreErrors?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring warnings.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * Interfaces.
     */
    interfaces?: pulumi.Input<pulumi.Input<inputs.ManagementLsmClusterInterface>[]>;
    /**
     * Main IP address.
     */
    mainIpAddress?: pulumi.Input<string>;
    /**
     * Cluster members.
     */
    members?: pulumi.Input<pulumi.Input<inputs.ManagementLsmClusterMember>[]>;
    /**
     * Object name.
     */
    name?: pulumi.Input<string>;
    /**
     * Device platform operating system.
     */
    osName?: pulumi.Input<string>;
    /**
     * LSM profile.
     */
    securityProfile?: pulumi.Input<string>;
    /**
     * Collection of tag identifiers.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Topology.
     */
    topology?: pulumi.Input<inputs.ManagementLsmClusterTopology>;
    /**
     * Device platform version.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagementLsmCluster resource.
 */
export interface ManagementLsmClusterArgs {
    /**
     * Color of the object. Should be one of existing colors.
     */
    color?: pulumi.Input<string>;
    /**
     * Comments string.
     */
    comments?: pulumi.Input<string>;
    /**
     * Dynamic Objects.
     */
    dynamicObjects?: pulumi.Input<pulumi.Input<inputs.ManagementLsmClusterDynamicObject>[]>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    ignoreErrors?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring warnings.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * Interfaces.
     */
    interfaces?: pulumi.Input<pulumi.Input<inputs.ManagementLsmClusterInterface>[]>;
    /**
     * Main IP address.
     */
    mainIpAddress: pulumi.Input<string>;
    /**
     * Cluster members.
     */
    members?: pulumi.Input<pulumi.Input<inputs.ManagementLsmClusterMember>[]>;
    /**
     * Object name.
     */
    name?: pulumi.Input<string>;
    /**
     * LSM profile.
     */
    securityProfile: pulumi.Input<string>;
    /**
     * Collection of tag identifiers.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Topology.
     */
    topology?: pulumi.Input<inputs.ManagementLsmClusterTopology>;
}
