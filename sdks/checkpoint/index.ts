// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetManagementAccessPointNameArgs, GetManagementAccessPointNameResult, GetManagementAccessPointNameOutputArgs } from "./getManagementAccessPointName";
export const getManagementAccessPointName: typeof import("./getManagementAccessPointName").getManagementAccessPointName = null as any;
export const getManagementAccessPointNameOutput: typeof import("./getManagementAccessPointName").getManagementAccessPointNameOutput = null as any;
utilities.lazyLoad(exports, ["getManagementAccessPointName","getManagementAccessPointNameOutput"], () => require("./getManagementAccessPointName"));

export { GetManagementAccessRulebaseArgs, GetManagementAccessRulebaseResult, GetManagementAccessRulebaseOutputArgs } from "./getManagementAccessRulebase";
export const getManagementAccessRulebase: typeof import("./getManagementAccessRulebase").getManagementAccessRulebase = null as any;
export const getManagementAccessRulebaseOutput: typeof import("./getManagementAccessRulebase").getManagementAccessRulebaseOutput = null as any;
utilities.lazyLoad(exports, ["getManagementAccessRulebase","getManagementAccessRulebaseOutput"], () => require("./getManagementAccessRulebase"));

export { GetManagementAciDataCenterServerArgs, GetManagementAciDataCenterServerResult, GetManagementAciDataCenterServerOutputArgs } from "./getManagementAciDataCenterServer";
export const getManagementAciDataCenterServer: typeof import("./getManagementAciDataCenterServer").getManagementAciDataCenterServer = null as any;
export const getManagementAciDataCenterServerOutput: typeof import("./getManagementAciDataCenterServer").getManagementAciDataCenterServerOutput = null as any;
utilities.lazyLoad(exports, ["getManagementAciDataCenterServer","getManagementAciDataCenterServerOutput"], () => require("./getManagementAciDataCenterServer"));

export { GetManagementAdministratorArgs, GetManagementAdministratorResult, GetManagementAdministratorOutputArgs } from "./getManagementAdministrator";
export const getManagementAdministrator: typeof import("./getManagementAdministrator").getManagementAdministrator = null as any;
export const getManagementAdministratorOutput: typeof import("./getManagementAdministrator").getManagementAdministratorOutput = null as any;
utilities.lazyLoad(exports, ["getManagementAdministrator","getManagementAdministratorOutput"], () => require("./getManagementAdministrator"));

export { GetManagementApiSettingsArgs, GetManagementApiSettingsResult, GetManagementApiSettingsOutputArgs } from "./getManagementApiSettings";
export const getManagementApiSettings: typeof import("./getManagementApiSettings").getManagementApiSettings = null as any;
export const getManagementApiSettingsOutput: typeof import("./getManagementApiSettings").getManagementApiSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getManagementApiSettings","getManagementApiSettingsOutput"], () => require("./getManagementApiSettings"));

export { GetManagementAutomaticPurgeArgs, GetManagementAutomaticPurgeResult, GetManagementAutomaticPurgeOutputArgs } from "./getManagementAutomaticPurge";
export const getManagementAutomaticPurge: typeof import("./getManagementAutomaticPurge").getManagementAutomaticPurge = null as any;
export const getManagementAutomaticPurgeOutput: typeof import("./getManagementAutomaticPurge").getManagementAutomaticPurgeOutput = null as any;
utilities.lazyLoad(exports, ["getManagementAutomaticPurge","getManagementAutomaticPurgeOutput"], () => require("./getManagementAutomaticPurge"));

export { GetManagementAwsDataCenterServerArgs, GetManagementAwsDataCenterServerResult, GetManagementAwsDataCenterServerOutputArgs } from "./getManagementAwsDataCenterServer";
export const getManagementAwsDataCenterServer: typeof import("./getManagementAwsDataCenterServer").getManagementAwsDataCenterServer = null as any;
export const getManagementAwsDataCenterServerOutput: typeof import("./getManagementAwsDataCenterServer").getManagementAwsDataCenterServerOutput = null as any;
utilities.lazyLoad(exports, ["getManagementAwsDataCenterServer","getManagementAwsDataCenterServerOutput"], () => require("./getManagementAwsDataCenterServer"));

export { GetManagementAzureAdArgs, GetManagementAzureAdResult, GetManagementAzureAdOutputArgs } from "./getManagementAzureAd";
export const getManagementAzureAd: typeof import("./getManagementAzureAd").getManagementAzureAd = null as any;
export const getManagementAzureAdOutput: typeof import("./getManagementAzureAd").getManagementAzureAdOutput = null as any;
utilities.lazyLoad(exports, ["getManagementAzureAd","getManagementAzureAdOutput"], () => require("./getManagementAzureAd"));

export { GetManagementAzureAdContentArgs, GetManagementAzureAdContentResult, GetManagementAzureAdContentOutputArgs } from "./getManagementAzureAdContent";
export const getManagementAzureAdContent: typeof import("./getManagementAzureAdContent").getManagementAzureAdContent = null as any;
export const getManagementAzureAdContentOutput: typeof import("./getManagementAzureAdContent").getManagementAzureAdContentOutput = null as any;
utilities.lazyLoad(exports, ["getManagementAzureAdContent","getManagementAzureAdContentOutput"], () => require("./getManagementAzureAdContent"));

export { GetManagementAzureDataCenterServerArgs, GetManagementAzureDataCenterServerResult, GetManagementAzureDataCenterServerOutputArgs } from "./getManagementAzureDataCenterServer";
export const getManagementAzureDataCenterServer: typeof import("./getManagementAzureDataCenterServer").getManagementAzureDataCenterServer = null as any;
export const getManagementAzureDataCenterServerOutput: typeof import("./getManagementAzureDataCenterServer").getManagementAzureDataCenterServerOutput = null as any;
utilities.lazyLoad(exports, ["getManagementAzureDataCenterServer","getManagementAzureDataCenterServerOutput"], () => require("./getManagementAzureDataCenterServer"));

export { GetManagementCheckpointHostArgs, GetManagementCheckpointHostResult, GetManagementCheckpointHostOutputArgs } from "./getManagementCheckpointHost";
export const getManagementCheckpointHost: typeof import("./getManagementCheckpointHost").getManagementCheckpointHost = null as any;
export const getManagementCheckpointHostOutput: typeof import("./getManagementCheckpointHost").getManagementCheckpointHostOutput = null as any;
utilities.lazyLoad(exports, ["getManagementCheckpointHost","getManagementCheckpointHostOutput"], () => require("./getManagementCheckpointHost"));

export { GetManagementCloudServicesArgs, GetManagementCloudServicesResult, GetManagementCloudServicesOutputArgs } from "./getManagementCloudServices";
export const getManagementCloudServices: typeof import("./getManagementCloudServices").getManagementCloudServices = null as any;
export const getManagementCloudServicesOutput: typeof import("./getManagementCloudServices").getManagementCloudServicesOutput = null as any;
utilities.lazyLoad(exports, ["getManagementCloudServices","getManagementCloudServicesOutput"], () => require("./getManagementCloudServices"));

export { GetManagementClusterMemberArgs, GetManagementClusterMemberResult, GetManagementClusterMemberOutputArgs } from "./getManagementClusterMember";
export const getManagementClusterMember: typeof import("./getManagementClusterMember").getManagementClusterMember = null as any;
export const getManagementClusterMemberOutput: typeof import("./getManagementClusterMember").getManagementClusterMemberOutput = null as any;
utilities.lazyLoad(exports, ["getManagementClusterMember","getManagementClusterMemberOutput"], () => require("./getManagementClusterMember"));

export { GetManagementCmeAccountsArgs, GetManagementCmeAccountsResult, GetManagementCmeAccountsOutputArgs } from "./getManagementCmeAccounts";
export const getManagementCmeAccounts: typeof import("./getManagementCmeAccounts").getManagementCmeAccounts = null as any;
export const getManagementCmeAccountsOutput: typeof import("./getManagementCmeAccounts").getManagementCmeAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getManagementCmeAccounts","getManagementCmeAccountsOutput"], () => require("./getManagementCmeAccounts"));

export { GetManagementCmeAccountsAwsArgs, GetManagementCmeAccountsAwsResult, GetManagementCmeAccountsAwsOutputArgs } from "./getManagementCmeAccountsAws";
export const getManagementCmeAccountsAws: typeof import("./getManagementCmeAccountsAws").getManagementCmeAccountsAws = null as any;
export const getManagementCmeAccountsAwsOutput: typeof import("./getManagementCmeAccountsAws").getManagementCmeAccountsAwsOutput = null as any;
utilities.lazyLoad(exports, ["getManagementCmeAccountsAws","getManagementCmeAccountsAwsOutput"], () => require("./getManagementCmeAccountsAws"));

export { GetManagementCmeAccountsAzureArgs, GetManagementCmeAccountsAzureResult, GetManagementCmeAccountsAzureOutputArgs } from "./getManagementCmeAccountsAzure";
export const getManagementCmeAccountsAzure: typeof import("./getManagementCmeAccountsAzure").getManagementCmeAccountsAzure = null as any;
export const getManagementCmeAccountsAzureOutput: typeof import("./getManagementCmeAccountsAzure").getManagementCmeAccountsAzureOutput = null as any;
utilities.lazyLoad(exports, ["getManagementCmeAccountsAzure","getManagementCmeAccountsAzureOutput"], () => require("./getManagementCmeAccountsAzure"));

export { GetManagementCmeAccountsGcpArgs, GetManagementCmeAccountsGcpResult, GetManagementCmeAccountsGcpOutputArgs } from "./getManagementCmeAccountsGcp";
export const getManagementCmeAccountsGcp: typeof import("./getManagementCmeAccountsGcp").getManagementCmeAccountsGcp = null as any;
export const getManagementCmeAccountsGcpOutput: typeof import("./getManagementCmeAccountsGcp").getManagementCmeAccountsGcpOutput = null as any;
utilities.lazyLoad(exports, ["getManagementCmeAccountsGcp","getManagementCmeAccountsGcpOutput"], () => require("./getManagementCmeAccountsGcp"));

export { GetManagementCmeApiVersionsArgs, GetManagementCmeApiVersionsResult, GetManagementCmeApiVersionsOutputArgs } from "./getManagementCmeApiVersions";
export const getManagementCmeApiVersions: typeof import("./getManagementCmeApiVersions").getManagementCmeApiVersions = null as any;
export const getManagementCmeApiVersionsOutput: typeof import("./getManagementCmeApiVersions").getManagementCmeApiVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getManagementCmeApiVersions","getManagementCmeApiVersionsOutput"], () => require("./getManagementCmeApiVersions"));

export { GetManagementCmeDelayCycleArgs, GetManagementCmeDelayCycleResult, GetManagementCmeDelayCycleOutputArgs } from "./getManagementCmeDelayCycle";
export const getManagementCmeDelayCycle: typeof import("./getManagementCmeDelayCycle").getManagementCmeDelayCycle = null as any;
export const getManagementCmeDelayCycleOutput: typeof import("./getManagementCmeDelayCycle").getManagementCmeDelayCycleOutput = null as any;
utilities.lazyLoad(exports, ["getManagementCmeDelayCycle","getManagementCmeDelayCycleOutput"], () => require("./getManagementCmeDelayCycle"));

export { GetManagementCmeGwConfigurationsArgs, GetManagementCmeGwConfigurationsResult, GetManagementCmeGwConfigurationsOutputArgs } from "./getManagementCmeGwConfigurations";
export const getManagementCmeGwConfigurations: typeof import("./getManagementCmeGwConfigurations").getManagementCmeGwConfigurations = null as any;
export const getManagementCmeGwConfigurationsOutput: typeof import("./getManagementCmeGwConfigurations").getManagementCmeGwConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getManagementCmeGwConfigurations","getManagementCmeGwConfigurationsOutput"], () => require("./getManagementCmeGwConfigurations"));

export { GetManagementCmeGwConfigurationsAwsArgs, GetManagementCmeGwConfigurationsAwsResult, GetManagementCmeGwConfigurationsAwsOutputArgs } from "./getManagementCmeGwConfigurationsAws";
export const getManagementCmeGwConfigurationsAws: typeof import("./getManagementCmeGwConfigurationsAws").getManagementCmeGwConfigurationsAws = null as any;
export const getManagementCmeGwConfigurationsAwsOutput: typeof import("./getManagementCmeGwConfigurationsAws").getManagementCmeGwConfigurationsAwsOutput = null as any;
utilities.lazyLoad(exports, ["getManagementCmeGwConfigurationsAws","getManagementCmeGwConfigurationsAwsOutput"], () => require("./getManagementCmeGwConfigurationsAws"));

export { GetManagementCmeGwConfigurationsAzureArgs, GetManagementCmeGwConfigurationsAzureResult, GetManagementCmeGwConfigurationsAzureOutputArgs } from "./getManagementCmeGwConfigurationsAzure";
export const getManagementCmeGwConfigurationsAzure: typeof import("./getManagementCmeGwConfigurationsAzure").getManagementCmeGwConfigurationsAzure = null as any;
export const getManagementCmeGwConfigurationsAzureOutput: typeof import("./getManagementCmeGwConfigurationsAzure").getManagementCmeGwConfigurationsAzureOutput = null as any;
utilities.lazyLoad(exports, ["getManagementCmeGwConfigurationsAzure","getManagementCmeGwConfigurationsAzureOutput"], () => require("./getManagementCmeGwConfigurationsAzure"));

export { GetManagementCmeGwConfigurationsGcpArgs, GetManagementCmeGwConfigurationsGcpResult, GetManagementCmeGwConfigurationsGcpOutputArgs } from "./getManagementCmeGwConfigurationsGcp";
export const getManagementCmeGwConfigurationsGcp: typeof import("./getManagementCmeGwConfigurationsGcp").getManagementCmeGwConfigurationsGcp = null as any;
export const getManagementCmeGwConfigurationsGcpOutput: typeof import("./getManagementCmeGwConfigurationsGcp").getManagementCmeGwConfigurationsGcpOutput = null as any;
utilities.lazyLoad(exports, ["getManagementCmeGwConfigurationsGcp","getManagementCmeGwConfigurationsGcpOutput"], () => require("./getManagementCmeGwConfigurationsGcp"));

export { GetManagementCmeManagementArgs, GetManagementCmeManagementResult, GetManagementCmeManagementOutputArgs } from "./getManagementCmeManagement";
export const getManagementCmeManagement: typeof import("./getManagementCmeManagement").getManagementCmeManagement = null as any;
export const getManagementCmeManagementOutput: typeof import("./getManagementCmeManagement").getManagementCmeManagementOutput = null as any;
utilities.lazyLoad(exports, ["getManagementCmeManagement","getManagementCmeManagementOutput"], () => require("./getManagementCmeManagement"));

export { GetManagementCmeVersionArgs, GetManagementCmeVersionResult, GetManagementCmeVersionOutputArgs } from "./getManagementCmeVersion";
export const getManagementCmeVersion: typeof import("./getManagementCmeVersion").getManagementCmeVersion = null as any;
export const getManagementCmeVersionOutput: typeof import("./getManagementCmeVersion").getManagementCmeVersionOutput = null as any;
utilities.lazyLoad(exports, ["getManagementCmeVersion","getManagementCmeVersionOutput"], () => require("./getManagementCmeVersion"));

export { GetManagementDataAccessLayerArgs, GetManagementDataAccessLayerResult, GetManagementDataAccessLayerOutputArgs } from "./getManagementDataAccessLayer";
export const getManagementDataAccessLayer: typeof import("./getManagementDataAccessLayer").getManagementDataAccessLayer = null as any;
export const getManagementDataAccessLayerOutput: typeof import("./getManagementDataAccessLayer").getManagementDataAccessLayerOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataAccessLayer","getManagementDataAccessLayerOutput"], () => require("./getManagementDataAccessLayer"));

export { GetManagementDataAccessRoleArgs, GetManagementDataAccessRoleResult, GetManagementDataAccessRoleOutputArgs } from "./getManagementDataAccessRole";
export const getManagementDataAccessRole: typeof import("./getManagementDataAccessRole").getManagementDataAccessRole = null as any;
export const getManagementDataAccessRoleOutput: typeof import("./getManagementDataAccessRole").getManagementDataAccessRoleOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataAccessRole","getManagementDataAccessRoleOutput"], () => require("./getManagementDataAccessRole"));

export { GetManagementDataAccessRuleArgs, GetManagementDataAccessRuleResult, GetManagementDataAccessRuleOutputArgs } from "./getManagementDataAccessRule";
export const getManagementDataAccessRule: typeof import("./getManagementDataAccessRule").getManagementDataAccessRule = null as any;
export const getManagementDataAccessRuleOutput: typeof import("./getManagementDataAccessRule").getManagementDataAccessRuleOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataAccessRule","getManagementDataAccessRuleOutput"], () => require("./getManagementDataAccessRule"));

export { GetManagementDataAccessSectionArgs, GetManagementDataAccessSectionResult, GetManagementDataAccessSectionOutputArgs } from "./getManagementDataAccessSection";
export const getManagementDataAccessSection: typeof import("./getManagementDataAccessSection").getManagementDataAccessSection = null as any;
export const getManagementDataAccessSectionOutput: typeof import("./getManagementDataAccessSection").getManagementDataAccessSectionOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataAccessSection","getManagementDataAccessSectionOutput"], () => require("./getManagementDataAccessSection"));

export { GetManagementDataAddressRangeArgs, GetManagementDataAddressRangeResult, GetManagementDataAddressRangeOutputArgs } from "./getManagementDataAddressRange";
export const getManagementDataAddressRange: typeof import("./getManagementDataAddressRange").getManagementDataAddressRange = null as any;
export const getManagementDataAddressRangeOutput: typeof import("./getManagementDataAddressRange").getManagementDataAddressRangeOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataAddressRange","getManagementDataAddressRangeOutput"], () => require("./getManagementDataAddressRange"));

export { GetManagementDataApplicationSiteArgs, GetManagementDataApplicationSiteResult, GetManagementDataApplicationSiteOutputArgs } from "./getManagementDataApplicationSite";
export const getManagementDataApplicationSite: typeof import("./getManagementDataApplicationSite").getManagementDataApplicationSite = null as any;
export const getManagementDataApplicationSiteOutput: typeof import("./getManagementDataApplicationSite").getManagementDataApplicationSiteOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataApplicationSite","getManagementDataApplicationSiteOutput"], () => require("./getManagementDataApplicationSite"));

export { GetManagementDataApplicationSiteCategoryArgs, GetManagementDataApplicationSiteCategoryResult, GetManagementDataApplicationSiteCategoryOutputArgs } from "./getManagementDataApplicationSiteCategory";
export const getManagementDataApplicationSiteCategory: typeof import("./getManagementDataApplicationSiteCategory").getManagementDataApplicationSiteCategory = null as any;
export const getManagementDataApplicationSiteCategoryOutput: typeof import("./getManagementDataApplicationSiteCategory").getManagementDataApplicationSiteCategoryOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataApplicationSiteCategory","getManagementDataApplicationSiteCategoryOutput"], () => require("./getManagementDataApplicationSiteCategory"));

export { GetManagementDataApplicationSiteGroupArgs, GetManagementDataApplicationSiteGroupResult, GetManagementDataApplicationSiteGroupOutputArgs } from "./getManagementDataApplicationSiteGroup";
export const getManagementDataApplicationSiteGroup: typeof import("./getManagementDataApplicationSiteGroup").getManagementDataApplicationSiteGroup = null as any;
export const getManagementDataApplicationSiteGroupOutput: typeof import("./getManagementDataApplicationSiteGroup").getManagementDataApplicationSiteGroupOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataApplicationSiteGroup","getManagementDataApplicationSiteGroupOutput"], () => require("./getManagementDataApplicationSiteGroup"));

export { GetManagementDataCenterContentArgs, GetManagementDataCenterContentResult, GetManagementDataCenterContentOutputArgs } from "./getManagementDataCenterContent";
export const getManagementDataCenterContent: typeof import("./getManagementDataCenterContent").getManagementDataCenterContent = null as any;
export const getManagementDataCenterContentOutput: typeof import("./getManagementDataCenterContent").getManagementDataCenterContentOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataCenterContent","getManagementDataCenterContentOutput"], () => require("./getManagementDataCenterContent"));

export { GetManagementDataCenterObjectArgs, GetManagementDataCenterObjectResult, GetManagementDataCenterObjectOutputArgs } from "./getManagementDataCenterObject";
export const getManagementDataCenterObject: typeof import("./getManagementDataCenterObject").getManagementDataCenterObject = null as any;
export const getManagementDataCenterObjectOutput: typeof import("./getManagementDataCenterObject").getManagementDataCenterObjectOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataCenterObject","getManagementDataCenterObjectOutput"], () => require("./getManagementDataCenterObject"));

export { GetManagementDataCenterQueryArgs, GetManagementDataCenterQueryResult, GetManagementDataCenterQueryOutputArgs } from "./getManagementDataCenterQuery";
export const getManagementDataCenterQuery: typeof import("./getManagementDataCenterQuery").getManagementDataCenterQuery = null as any;
export const getManagementDataCenterQueryOutput: typeof import("./getManagementDataCenterQuery").getManagementDataCenterQueryOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataCenterQuery","getManagementDataCenterQueryOutput"], () => require("./getManagementDataCenterQuery"));

export { GetManagementDataDnsDomainArgs, GetManagementDataDnsDomainResult, GetManagementDataDnsDomainOutputArgs } from "./getManagementDataDnsDomain";
export const getManagementDataDnsDomain: typeof import("./getManagementDataDnsDomain").getManagementDataDnsDomain = null as any;
export const getManagementDataDnsDomainOutput: typeof import("./getManagementDataDnsDomain").getManagementDataDnsDomainOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataDnsDomain","getManagementDataDnsDomainOutput"], () => require("./getManagementDataDnsDomain"));

export { GetManagementDataDynamicObjectArgs, GetManagementDataDynamicObjectResult, GetManagementDataDynamicObjectOutputArgs } from "./getManagementDataDynamicObject";
export const getManagementDataDynamicObject: typeof import("./getManagementDataDynamicObject").getManagementDataDynamicObject = null as any;
export const getManagementDataDynamicObjectOutput: typeof import("./getManagementDataDynamicObject").getManagementDataDynamicObjectOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataDynamicObject","getManagementDataDynamicObjectOutput"], () => require("./getManagementDataDynamicObject"));

export { GetManagementDataExceptionGroupArgs, GetManagementDataExceptionGroupResult, GetManagementDataExceptionGroupOutputArgs } from "./getManagementDataExceptionGroup";
export const getManagementDataExceptionGroup: typeof import("./getManagementDataExceptionGroup").getManagementDataExceptionGroup = null as any;
export const getManagementDataExceptionGroupOutput: typeof import("./getManagementDataExceptionGroup").getManagementDataExceptionGroupOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataExceptionGroup","getManagementDataExceptionGroupOutput"], () => require("./getManagementDataExceptionGroup"));

export { GetManagementDataGroupArgs, GetManagementDataGroupResult, GetManagementDataGroupOutputArgs } from "./getManagementDataGroup";
export const getManagementDataGroup: typeof import("./getManagementDataGroup").getManagementDataGroup = null as any;
export const getManagementDataGroupOutput: typeof import("./getManagementDataGroup").getManagementDataGroupOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataGroup","getManagementDataGroupOutput"], () => require("./getManagementDataGroup"));

export { GetManagementDataGroupWithExclusionArgs, GetManagementDataGroupWithExclusionResult, GetManagementDataGroupWithExclusionOutputArgs } from "./getManagementDataGroupWithExclusion";
export const getManagementDataGroupWithExclusion: typeof import("./getManagementDataGroupWithExclusion").getManagementDataGroupWithExclusion = null as any;
export const getManagementDataGroupWithExclusionOutput: typeof import("./getManagementDataGroupWithExclusion").getManagementDataGroupWithExclusionOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataGroupWithExclusion","getManagementDataGroupWithExclusionOutput"], () => require("./getManagementDataGroupWithExclusion"));

export { GetManagementDataHostArgs, GetManagementDataHostResult, GetManagementDataHostOutputArgs } from "./getManagementDataHost";
export const getManagementDataHost: typeof import("./getManagementDataHost").getManagementDataHost = null as any;
export const getManagementDataHostOutput: typeof import("./getManagementDataHost").getManagementDataHostOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataHost","getManagementDataHostOutput"], () => require("./getManagementDataHost"));

export { GetManagementDataHttpsLayerArgs, GetManagementDataHttpsLayerResult, GetManagementDataHttpsLayerOutputArgs } from "./getManagementDataHttpsLayer";
export const getManagementDataHttpsLayer: typeof import("./getManagementDataHttpsLayer").getManagementDataHttpsLayer = null as any;
export const getManagementDataHttpsLayerOutput: typeof import("./getManagementDataHttpsLayer").getManagementDataHttpsLayerOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataHttpsLayer","getManagementDataHttpsLayerOutput"], () => require("./getManagementDataHttpsLayer"));

export { GetManagementDataHttpsRuleArgs, GetManagementDataHttpsRuleResult, GetManagementDataHttpsRuleOutputArgs } from "./getManagementDataHttpsRule";
export const getManagementDataHttpsRule: typeof import("./getManagementDataHttpsRule").getManagementDataHttpsRule = null as any;
export const getManagementDataHttpsRuleOutput: typeof import("./getManagementDataHttpsRule").getManagementDataHttpsRuleOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataHttpsRule","getManagementDataHttpsRuleOutput"], () => require("./getManagementDataHttpsRule"));

export { GetManagementDataHttpsSectionArgs, GetManagementDataHttpsSectionResult, GetManagementDataHttpsSectionOutputArgs } from "./getManagementDataHttpsSection";
export const getManagementDataHttpsSection: typeof import("./getManagementDataHttpsSection").getManagementDataHttpsSection = null as any;
export const getManagementDataHttpsSectionOutput: typeof import("./getManagementDataHttpsSection").getManagementDataHttpsSectionOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataHttpsSection","getManagementDataHttpsSectionOutput"], () => require("./getManagementDataHttpsSection"));

export { GetManagementDataMulticastAddressRangeArgs, GetManagementDataMulticastAddressRangeResult, GetManagementDataMulticastAddressRangeOutputArgs } from "./getManagementDataMulticastAddressRange";
export const getManagementDataMulticastAddressRange: typeof import("./getManagementDataMulticastAddressRange").getManagementDataMulticastAddressRange = null as any;
export const getManagementDataMulticastAddressRangeOutput: typeof import("./getManagementDataMulticastAddressRange").getManagementDataMulticastAddressRangeOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataMulticastAddressRange","getManagementDataMulticastAddressRangeOutput"], () => require("./getManagementDataMulticastAddressRange"));

export { GetManagementDataNetworkArgs, GetManagementDataNetworkResult, GetManagementDataNetworkOutputArgs } from "./getManagementDataNetwork";
export const getManagementDataNetwork: typeof import("./getManagementDataNetwork").getManagementDataNetwork = null as any;
export const getManagementDataNetworkOutput: typeof import("./getManagementDataNetwork").getManagementDataNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataNetwork","getManagementDataNetworkOutput"], () => require("./getManagementDataNetwork"));

export { GetManagementDataOpsecApplicationArgs, GetManagementDataOpsecApplicationResult, GetManagementDataOpsecApplicationOutputArgs } from "./getManagementDataOpsecApplication";
export const getManagementDataOpsecApplication: typeof import("./getManagementDataOpsecApplication").getManagementDataOpsecApplication = null as any;
export const getManagementDataOpsecApplicationOutput: typeof import("./getManagementDataOpsecApplication").getManagementDataOpsecApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataOpsecApplication","getManagementDataOpsecApplicationOutput"], () => require("./getManagementDataOpsecApplication"));

export { GetManagementDataPackageArgs, GetManagementDataPackageResult, GetManagementDataPackageOutputArgs } from "./getManagementDataPackage";
export const getManagementDataPackage: typeof import("./getManagementDataPackage").getManagementDataPackage = null as any;
export const getManagementDataPackageOutput: typeof import("./getManagementDataPackage").getManagementDataPackageOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataPackage","getManagementDataPackageOutput"], () => require("./getManagementDataPackage"));

export { GetManagementDataSecurityZoneArgs, GetManagementDataSecurityZoneResult, GetManagementDataSecurityZoneOutputArgs } from "./getManagementDataSecurityZone";
export const getManagementDataSecurityZone: typeof import("./getManagementDataSecurityZone").getManagementDataSecurityZone = null as any;
export const getManagementDataSecurityZoneOutput: typeof import("./getManagementDataSecurityZone").getManagementDataSecurityZoneOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataSecurityZone","getManagementDataSecurityZoneOutput"], () => require("./getManagementDataSecurityZone"));

export { GetManagementDataServiceDceRpcArgs, GetManagementDataServiceDceRpcResult, GetManagementDataServiceDceRpcOutputArgs } from "./getManagementDataServiceDceRpc";
export const getManagementDataServiceDceRpc: typeof import("./getManagementDataServiceDceRpc").getManagementDataServiceDceRpc = null as any;
export const getManagementDataServiceDceRpcOutput: typeof import("./getManagementDataServiceDceRpc").getManagementDataServiceDceRpcOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataServiceDceRpc","getManagementDataServiceDceRpcOutput"], () => require("./getManagementDataServiceDceRpc"));

export { GetManagementDataServiceGroupArgs, GetManagementDataServiceGroupResult, GetManagementDataServiceGroupOutputArgs } from "./getManagementDataServiceGroup";
export const getManagementDataServiceGroup: typeof import("./getManagementDataServiceGroup").getManagementDataServiceGroup = null as any;
export const getManagementDataServiceGroupOutput: typeof import("./getManagementDataServiceGroup").getManagementDataServiceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataServiceGroup","getManagementDataServiceGroupOutput"], () => require("./getManagementDataServiceGroup"));

export { GetManagementDataServiceIcmpArgs, GetManagementDataServiceIcmpResult, GetManagementDataServiceIcmpOutputArgs } from "./getManagementDataServiceIcmp";
export const getManagementDataServiceIcmp: typeof import("./getManagementDataServiceIcmp").getManagementDataServiceIcmp = null as any;
export const getManagementDataServiceIcmpOutput: typeof import("./getManagementDataServiceIcmp").getManagementDataServiceIcmpOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataServiceIcmp","getManagementDataServiceIcmpOutput"], () => require("./getManagementDataServiceIcmp"));

export { GetManagementDataServiceIcmp6Args, GetManagementDataServiceIcmp6Result, GetManagementDataServiceIcmp6OutputArgs } from "./getManagementDataServiceIcmp6";
export const getManagementDataServiceIcmp6: typeof import("./getManagementDataServiceIcmp6").getManagementDataServiceIcmp6 = null as any;
export const getManagementDataServiceIcmp6Output: typeof import("./getManagementDataServiceIcmp6").getManagementDataServiceIcmp6Output = null as any;
utilities.lazyLoad(exports, ["getManagementDataServiceIcmp6","getManagementDataServiceIcmp6Output"], () => require("./getManagementDataServiceIcmp6"));

export { GetManagementDataServiceOtherArgs, GetManagementDataServiceOtherResult, GetManagementDataServiceOtherOutputArgs } from "./getManagementDataServiceOther";
export const getManagementDataServiceOther: typeof import("./getManagementDataServiceOther").getManagementDataServiceOther = null as any;
export const getManagementDataServiceOtherOutput: typeof import("./getManagementDataServiceOther").getManagementDataServiceOtherOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataServiceOther","getManagementDataServiceOtherOutput"], () => require("./getManagementDataServiceOther"));

export { GetManagementDataServiceRpcArgs, GetManagementDataServiceRpcResult, GetManagementDataServiceRpcOutputArgs } from "./getManagementDataServiceRpc";
export const getManagementDataServiceRpc: typeof import("./getManagementDataServiceRpc").getManagementDataServiceRpc = null as any;
export const getManagementDataServiceRpcOutput: typeof import("./getManagementDataServiceRpc").getManagementDataServiceRpcOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataServiceRpc","getManagementDataServiceRpcOutput"], () => require("./getManagementDataServiceRpc"));

export { GetManagementDataServiceSctpArgs, GetManagementDataServiceSctpResult, GetManagementDataServiceSctpOutputArgs } from "./getManagementDataServiceSctp";
export const getManagementDataServiceSctp: typeof import("./getManagementDataServiceSctp").getManagementDataServiceSctp = null as any;
export const getManagementDataServiceSctpOutput: typeof import("./getManagementDataServiceSctp").getManagementDataServiceSctpOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataServiceSctp","getManagementDataServiceSctpOutput"], () => require("./getManagementDataServiceSctp"));

export { GetManagementDataServiceTcpArgs, GetManagementDataServiceTcpResult, GetManagementDataServiceTcpOutputArgs } from "./getManagementDataServiceTcp";
export const getManagementDataServiceTcp: typeof import("./getManagementDataServiceTcp").getManagementDataServiceTcp = null as any;
export const getManagementDataServiceTcpOutput: typeof import("./getManagementDataServiceTcp").getManagementDataServiceTcpOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataServiceTcp","getManagementDataServiceTcpOutput"], () => require("./getManagementDataServiceTcp"));

export { GetManagementDataServiceUdpArgs, GetManagementDataServiceUdpResult, GetManagementDataServiceUdpOutputArgs } from "./getManagementDataServiceUdp";
export const getManagementDataServiceUdp: typeof import("./getManagementDataServiceUdp").getManagementDataServiceUdp = null as any;
export const getManagementDataServiceUdpOutput: typeof import("./getManagementDataServiceUdp").getManagementDataServiceUdpOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataServiceUdp","getManagementDataServiceUdpOutput"], () => require("./getManagementDataServiceUdp"));

export { GetManagementDataThreatIndicatorArgs, GetManagementDataThreatIndicatorResult, GetManagementDataThreatIndicatorOutputArgs } from "./getManagementDataThreatIndicator";
export const getManagementDataThreatIndicator: typeof import("./getManagementDataThreatIndicator").getManagementDataThreatIndicator = null as any;
export const getManagementDataThreatIndicatorOutput: typeof import("./getManagementDataThreatIndicator").getManagementDataThreatIndicatorOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataThreatIndicator","getManagementDataThreatIndicatorOutput"], () => require("./getManagementDataThreatIndicator"));

export { GetManagementDataTimeGroupArgs, GetManagementDataTimeGroupResult, GetManagementDataTimeGroupOutputArgs } from "./getManagementDataTimeGroup";
export const getManagementDataTimeGroup: typeof import("./getManagementDataTimeGroup").getManagementDataTimeGroup = null as any;
export const getManagementDataTimeGroupOutput: typeof import("./getManagementDataTimeGroup").getManagementDataTimeGroupOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataTimeGroup","getManagementDataTimeGroupOutput"], () => require("./getManagementDataTimeGroup"));

export { GetManagementDataVpnCommunityMeshedArgs, GetManagementDataVpnCommunityMeshedResult, GetManagementDataVpnCommunityMeshedOutputArgs } from "./getManagementDataVpnCommunityMeshed";
export const getManagementDataVpnCommunityMeshed: typeof import("./getManagementDataVpnCommunityMeshed").getManagementDataVpnCommunityMeshed = null as any;
export const getManagementDataVpnCommunityMeshedOutput: typeof import("./getManagementDataVpnCommunityMeshed").getManagementDataVpnCommunityMeshedOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataVpnCommunityMeshed","getManagementDataVpnCommunityMeshedOutput"], () => require("./getManagementDataVpnCommunityMeshed"));

export { GetManagementDataVpnCommunityStarArgs, GetManagementDataVpnCommunityStarResult, GetManagementDataVpnCommunityStarOutputArgs } from "./getManagementDataVpnCommunityStar";
export const getManagementDataVpnCommunityStar: typeof import("./getManagementDataVpnCommunityStar").getManagementDataVpnCommunityStar = null as any;
export const getManagementDataVpnCommunityStarOutput: typeof import("./getManagementDataVpnCommunityStar").getManagementDataVpnCommunityStarOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataVpnCommunityStar","getManagementDataVpnCommunityStarOutput"], () => require("./getManagementDataVpnCommunityStar"));

export { GetManagementDataWildcardArgs, GetManagementDataWildcardResult, GetManagementDataWildcardOutputArgs } from "./getManagementDataWildcard";
export const getManagementDataWildcard: typeof import("./getManagementDataWildcard").getManagementDataWildcard = null as any;
export const getManagementDataWildcardOutput: typeof import("./getManagementDataWildcard").getManagementDataWildcardOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDataWildcard","getManagementDataWildcardOutput"], () => require("./getManagementDataWildcard"));

export { GetManagementDomainArgs, GetManagementDomainResult, GetManagementDomainOutputArgs } from "./getManagementDomain";
export const getManagementDomain: typeof import("./getManagementDomain").getManagementDomain = null as any;
export const getManagementDomainOutput: typeof import("./getManagementDomain").getManagementDomainOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDomain","getManagementDomainOutput"], () => require("./getManagementDomain"));

export { GetManagementDomainPermissionsProfileArgs, GetManagementDomainPermissionsProfileResult, GetManagementDomainPermissionsProfileOutputArgs } from "./getManagementDomainPermissionsProfile";
export const getManagementDomainPermissionsProfile: typeof import("./getManagementDomainPermissionsProfile").getManagementDomainPermissionsProfile = null as any;
export const getManagementDomainPermissionsProfileOutput: typeof import("./getManagementDomainPermissionsProfile").getManagementDomainPermissionsProfileOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDomainPermissionsProfile","getManagementDomainPermissionsProfileOutput"], () => require("./getManagementDomainPermissionsProfile"));

export { GetManagementDynamicGlobalNetworkObjectArgs, GetManagementDynamicGlobalNetworkObjectResult, GetManagementDynamicGlobalNetworkObjectOutputArgs } from "./getManagementDynamicGlobalNetworkObject";
export const getManagementDynamicGlobalNetworkObject: typeof import("./getManagementDynamicGlobalNetworkObject").getManagementDynamicGlobalNetworkObject = null as any;
export const getManagementDynamicGlobalNetworkObjectOutput: typeof import("./getManagementDynamicGlobalNetworkObject").getManagementDynamicGlobalNetworkObjectOutput = null as any;
utilities.lazyLoad(exports, ["getManagementDynamicGlobalNetworkObject","getManagementDynamicGlobalNetworkObjectOutput"], () => require("./getManagementDynamicGlobalNetworkObject"));

export { GetManagementGaiaBestPracticeArgs, GetManagementGaiaBestPracticeResult, GetManagementGaiaBestPracticeOutputArgs } from "./getManagementGaiaBestPractice";
export const getManagementGaiaBestPractice: typeof import("./getManagementGaiaBestPractice").getManagementGaiaBestPractice = null as any;
export const getManagementGaiaBestPracticeOutput: typeof import("./getManagementGaiaBestPractice").getManagementGaiaBestPracticeOutput = null as any;
utilities.lazyLoad(exports, ["getManagementGaiaBestPractice","getManagementGaiaBestPracticeOutput"], () => require("./getManagementGaiaBestPractice"));

export { GetManagementGcpDataCenterServerArgs, GetManagementGcpDataCenterServerResult, GetManagementGcpDataCenterServerOutputArgs } from "./getManagementGcpDataCenterServer";
export const getManagementGcpDataCenterServer: typeof import("./getManagementGcpDataCenterServer").getManagementGcpDataCenterServer = null as any;
export const getManagementGcpDataCenterServerOutput: typeof import("./getManagementGcpDataCenterServer").getManagementGcpDataCenterServerOutput = null as any;
utilities.lazyLoad(exports, ["getManagementGcpDataCenterServer","getManagementGcpDataCenterServerOutput"], () => require("./getManagementGcpDataCenterServer"));

export { GetManagementGenericDataCenterServerArgs, GetManagementGenericDataCenterServerResult, GetManagementGenericDataCenterServerOutputArgs } from "./getManagementGenericDataCenterServer";
export const getManagementGenericDataCenterServer: typeof import("./getManagementGenericDataCenterServer").getManagementGenericDataCenterServer = null as any;
export const getManagementGenericDataCenterServerOutput: typeof import("./getManagementGenericDataCenterServer").getManagementGenericDataCenterServerOutput = null as any;
utilities.lazyLoad(exports, ["getManagementGenericDataCenterServer","getManagementGenericDataCenterServerOutput"], () => require("./getManagementGenericDataCenterServer"));

export { GetManagementGlobalAssignmentArgs, GetManagementGlobalAssignmentResult, GetManagementGlobalAssignmentOutputArgs } from "./getManagementGlobalAssignment";
export const getManagementGlobalAssignment: typeof import("./getManagementGlobalAssignment").getManagementGlobalAssignment = null as any;
export const getManagementGlobalAssignmentOutput: typeof import("./getManagementGlobalAssignment").getManagementGlobalAssignmentOutput = null as any;
utilities.lazyLoad(exports, ["getManagementGlobalAssignment","getManagementGlobalAssignmentOutput"], () => require("./getManagementGlobalAssignment"));

export { GetManagementGlobalDomainArgs, GetManagementGlobalDomainResult, GetManagementGlobalDomainOutputArgs } from "./getManagementGlobalDomain";
export const getManagementGlobalDomain: typeof import("./getManagementGlobalDomain").getManagementGlobalDomain = null as any;
export const getManagementGlobalDomainOutput: typeof import("./getManagementGlobalDomain").getManagementGlobalDomainOutput = null as any;
utilities.lazyLoad(exports, ["getManagementGlobalDomain","getManagementGlobalDomainOutput"], () => require("./getManagementGlobalDomain"));

export { GetManagementGsnHandoverGroupArgs, GetManagementGsnHandoverGroupResult, GetManagementGsnHandoverGroupOutputArgs } from "./getManagementGsnHandoverGroup";
export const getManagementGsnHandoverGroup: typeof import("./getManagementGsnHandoverGroup").getManagementGsnHandoverGroup = null as any;
export const getManagementGsnHandoverGroupOutput: typeof import("./getManagementGsnHandoverGroup").getManagementGsnHandoverGroupOutput = null as any;
utilities.lazyLoad(exports, ["getManagementGsnHandoverGroup","getManagementGsnHandoverGroupOutput"], () => require("./getManagementGsnHandoverGroup"));

export { GetManagementHttpsRulebaseArgs, GetManagementHttpsRulebaseResult, GetManagementHttpsRulebaseOutputArgs } from "./getManagementHttpsRulebase";
export const getManagementHttpsRulebase: typeof import("./getManagementHttpsRulebase").getManagementHttpsRulebase = null as any;
export const getManagementHttpsRulebaseOutput: typeof import("./getManagementHttpsRulebase").getManagementHttpsRulebaseOutput = null as any;
utilities.lazyLoad(exports, ["getManagementHttpsRulebase","getManagementHttpsRulebaseOutput"], () => require("./getManagementHttpsRulebase"));

export { GetManagementIdentityTagArgs, GetManagementIdentityTagResult, GetManagementIdentityTagOutputArgs } from "./getManagementIdentityTag";
export const getManagementIdentityTag: typeof import("./getManagementIdentityTag").getManagementIdentityTag = null as any;
export const getManagementIdentityTagOutput: typeof import("./getManagementIdentityTag").getManagementIdentityTagOutput = null as any;
utilities.lazyLoad(exports, ["getManagementIdentityTag","getManagementIdentityTagOutput"], () => require("./getManagementIdentityTag"));

export { GetManagementIdpAdministratorGroupArgs, GetManagementIdpAdministratorGroupResult, GetManagementIdpAdministratorGroupOutputArgs } from "./getManagementIdpAdministratorGroup";
export const getManagementIdpAdministratorGroup: typeof import("./getManagementIdpAdministratorGroup").getManagementIdpAdministratorGroup = null as any;
export const getManagementIdpAdministratorGroupOutput: typeof import("./getManagementIdpAdministratorGroup").getManagementIdpAdministratorGroupOutput = null as any;
utilities.lazyLoad(exports, ["getManagementIdpAdministratorGroup","getManagementIdpAdministratorGroupOutput"], () => require("./getManagementIdpAdministratorGroup"));

export { GetManagementIdpDefaultAssignmentArgs, GetManagementIdpDefaultAssignmentResult, GetManagementIdpDefaultAssignmentOutputArgs } from "./getManagementIdpDefaultAssignment";
export const getManagementIdpDefaultAssignment: typeof import("./getManagementIdpDefaultAssignment").getManagementIdpDefaultAssignment = null as any;
export const getManagementIdpDefaultAssignmentOutput: typeof import("./getManagementIdpDefaultAssignment").getManagementIdpDefaultAssignmentOutput = null as any;
utilities.lazyLoad(exports, ["getManagementIdpDefaultAssignment","getManagementIdpDefaultAssignmentOutput"], () => require("./getManagementIdpDefaultAssignment"));

export { GetManagementIdpToDomainAssignmentArgs, GetManagementIdpToDomainAssignmentResult, GetManagementIdpToDomainAssignmentOutputArgs } from "./getManagementIdpToDomainAssignment";
export const getManagementIdpToDomainAssignment: typeof import("./getManagementIdpToDomainAssignment").getManagementIdpToDomainAssignment = null as any;
export const getManagementIdpToDomainAssignmentOutput: typeof import("./getManagementIdpToDomainAssignment").getManagementIdpToDomainAssignmentOutput = null as any;
utilities.lazyLoad(exports, ["getManagementIdpToDomainAssignment","getManagementIdpToDomainAssignmentOutput"], () => require("./getManagementIdpToDomainAssignment"));

export { GetManagementInteroperableDeviceArgs, GetManagementInteroperableDeviceResult, GetManagementInteroperableDeviceOutputArgs } from "./getManagementInteroperableDevice";
export const getManagementInteroperableDevice: typeof import("./getManagementInteroperableDevice").getManagementInteroperableDevice = null as any;
export const getManagementInteroperableDeviceOutput: typeof import("./getManagementInteroperableDevice").getManagementInteroperableDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getManagementInteroperableDevice","getManagementInteroperableDeviceOutput"], () => require("./getManagementInteroperableDevice"));

export { GetManagementIpsProtectionExtendedAttributeArgs, GetManagementIpsProtectionExtendedAttributeResult, GetManagementIpsProtectionExtendedAttributeOutputArgs } from "./getManagementIpsProtectionExtendedAttribute";
export const getManagementIpsProtectionExtendedAttribute: typeof import("./getManagementIpsProtectionExtendedAttribute").getManagementIpsProtectionExtendedAttribute = null as any;
export const getManagementIpsProtectionExtendedAttributeOutput: typeof import("./getManagementIpsProtectionExtendedAttribute").getManagementIpsProtectionExtendedAttributeOutput = null as any;
utilities.lazyLoad(exports, ["getManagementIpsProtectionExtendedAttribute","getManagementIpsProtectionExtendedAttributeOutput"], () => require("./getManagementIpsProtectionExtendedAttribute"));

export { GetManagementIpsUpdateScheduleArgs, GetManagementIpsUpdateScheduleResult, GetManagementIpsUpdateScheduleOutputArgs } from "./getManagementIpsUpdateSchedule";
export const getManagementIpsUpdateSchedule: typeof import("./getManagementIpsUpdateSchedule").getManagementIpsUpdateSchedule = null as any;
export const getManagementIpsUpdateScheduleOutput: typeof import("./getManagementIpsUpdateSchedule").getManagementIpsUpdateScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getManagementIpsUpdateSchedule","getManagementIpsUpdateScheduleOutput"], () => require("./getManagementIpsUpdateSchedule"));

export { GetManagementIseDataCenterServerArgs, GetManagementIseDataCenterServerResult, GetManagementIseDataCenterServerOutputArgs } from "./getManagementIseDataCenterServer";
export const getManagementIseDataCenterServer: typeof import("./getManagementIseDataCenterServer").getManagementIseDataCenterServer = null as any;
export const getManagementIseDataCenterServerOutput: typeof import("./getManagementIseDataCenterServer").getManagementIseDataCenterServerOutput = null as any;
utilities.lazyLoad(exports, ["getManagementIseDataCenterServer","getManagementIseDataCenterServerOutput"], () => require("./getManagementIseDataCenterServer"));

export { GetManagementKubernetesDataCenterServerArgs, GetManagementKubernetesDataCenterServerResult, GetManagementKubernetesDataCenterServerOutputArgs } from "./getManagementKubernetesDataCenterServer";
export const getManagementKubernetesDataCenterServer: typeof import("./getManagementKubernetesDataCenterServer").getManagementKubernetesDataCenterServer = null as any;
export const getManagementKubernetesDataCenterServerOutput: typeof import("./getManagementKubernetesDataCenterServer").getManagementKubernetesDataCenterServerOutput = null as any;
utilities.lazyLoad(exports, ["getManagementKubernetesDataCenterServer","getManagementKubernetesDataCenterServerOutput"], () => require("./getManagementKubernetesDataCenterServer"));

export { GetManagementLoginMessageArgs, GetManagementLoginMessageResult, GetManagementLoginMessageOutputArgs } from "./getManagementLoginMessage";
export const getManagementLoginMessage: typeof import("./getManagementLoginMessage").getManagementLoginMessage = null as any;
export const getManagementLoginMessageOutput: typeof import("./getManagementLoginMessage").getManagementLoginMessageOutput = null as any;
utilities.lazyLoad(exports, ["getManagementLoginMessage","getManagementLoginMessageOutput"], () => require("./getManagementLoginMessage"));

export { GetManagementLsmClusterArgs, GetManagementLsmClusterResult, GetManagementLsmClusterOutputArgs } from "./getManagementLsmCluster";
export const getManagementLsmCluster: typeof import("./getManagementLsmCluster").getManagementLsmCluster = null as any;
export const getManagementLsmClusterOutput: typeof import("./getManagementLsmCluster").getManagementLsmClusterOutput = null as any;
utilities.lazyLoad(exports, ["getManagementLsmCluster","getManagementLsmClusterOutput"], () => require("./getManagementLsmCluster"));

export { GetManagementLsmClusterProfileArgs, GetManagementLsmClusterProfileResult, GetManagementLsmClusterProfileOutputArgs } from "./getManagementLsmClusterProfile";
export const getManagementLsmClusterProfile: typeof import("./getManagementLsmClusterProfile").getManagementLsmClusterProfile = null as any;
export const getManagementLsmClusterProfileOutput: typeof import("./getManagementLsmClusterProfile").getManagementLsmClusterProfileOutput = null as any;
utilities.lazyLoad(exports, ["getManagementLsmClusterProfile","getManagementLsmClusterProfileOutput"], () => require("./getManagementLsmClusterProfile"));

export { GetManagementLsmGatewayArgs, GetManagementLsmGatewayResult, GetManagementLsmGatewayOutputArgs } from "./getManagementLsmGateway";
export const getManagementLsmGateway: typeof import("./getManagementLsmGateway").getManagementLsmGateway = null as any;
export const getManagementLsmGatewayOutput: typeof import("./getManagementLsmGateway").getManagementLsmGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getManagementLsmGateway","getManagementLsmGatewayOutput"], () => require("./getManagementLsmGateway"));

export { GetManagementLsmGatewayProfileArgs, GetManagementLsmGatewayProfileResult, GetManagementLsmGatewayProfileOutputArgs } from "./getManagementLsmGatewayProfile";
export const getManagementLsmGatewayProfile: typeof import("./getManagementLsmGatewayProfile").getManagementLsmGatewayProfile = null as any;
export const getManagementLsmGatewayProfileOutput: typeof import("./getManagementLsmGatewayProfile").getManagementLsmGatewayProfileOutput = null as any;
utilities.lazyLoad(exports, ["getManagementLsmGatewayProfile","getManagementLsmGatewayProfileOutput"], () => require("./getManagementLsmGatewayProfile"));

export { GetManagementLsvProfileArgs, GetManagementLsvProfileResult, GetManagementLsvProfileOutputArgs } from "./getManagementLsvProfile";
export const getManagementLsvProfile: typeof import("./getManagementLsvProfile").getManagementLsvProfile = null as any;
export const getManagementLsvProfileOutput: typeof import("./getManagementLsvProfile").getManagementLsvProfileOutput = null as any;
utilities.lazyLoad(exports, ["getManagementLsvProfile","getManagementLsvProfileOutput"], () => require("./getManagementLsvProfile"));

export { GetManagementMdPermissionsProfileArgs, GetManagementMdPermissionsProfileResult, GetManagementMdPermissionsProfileOutputArgs } from "./getManagementMdPermissionsProfile";
export const getManagementMdPermissionsProfile: typeof import("./getManagementMdPermissionsProfile").getManagementMdPermissionsProfile = null as any;
export const getManagementMdPermissionsProfileOutput: typeof import("./getManagementMdPermissionsProfile").getManagementMdPermissionsProfileOutput = null as any;
utilities.lazyLoad(exports, ["getManagementMdPermissionsProfile","getManagementMdPermissionsProfileOutput"], () => require("./getManagementMdPermissionsProfile"));

export { GetManagementMdsArgs, GetManagementMdsResult, GetManagementMdsOutputArgs } from "./getManagementMds";
export const getManagementMds: typeof import("./getManagementMds").getManagementMds = null as any;
export const getManagementMdsOutput: typeof import("./getManagementMds").getManagementMdsOutput = null as any;
utilities.lazyLoad(exports, ["getManagementMds","getManagementMdsOutput"], () => require("./getManagementMds"));

export { GetManagementNatRuleArgs, GetManagementNatRuleResult, GetManagementNatRuleOutputArgs } from "./getManagementNatRule";
export const getManagementNatRule: typeof import("./getManagementNatRule").getManagementNatRule = null as any;
export const getManagementNatRuleOutput: typeof import("./getManagementNatRule").getManagementNatRuleOutput = null as any;
utilities.lazyLoad(exports, ["getManagementNatRule","getManagementNatRuleOutput"], () => require("./getManagementNatRule"));

export { GetManagementNatRulebaseArgs, GetManagementNatRulebaseResult, GetManagementNatRulebaseOutputArgs } from "./getManagementNatRulebase";
export const getManagementNatRulebase: typeof import("./getManagementNatRulebase").getManagementNatRulebase = null as any;
export const getManagementNatRulebaseOutput: typeof import("./getManagementNatRulebase").getManagementNatRulebaseOutput = null as any;
utilities.lazyLoad(exports, ["getManagementNatRulebase","getManagementNatRulebaseOutput"], () => require("./getManagementNatRulebase"));

export { GetManagementNatSectionArgs, GetManagementNatSectionResult, GetManagementNatSectionOutputArgs } from "./getManagementNatSection";
export const getManagementNatSection: typeof import("./getManagementNatSection").getManagementNatSection = null as any;
export const getManagementNatSectionOutput: typeof import("./getManagementNatSection").getManagementNatSectionOutput = null as any;
utilities.lazyLoad(exports, ["getManagementNatSection","getManagementNatSectionOutput"], () => require("./getManagementNatSection"));

export { GetManagementNetworkFeedArgs, GetManagementNetworkFeedResult, GetManagementNetworkFeedOutputArgs } from "./getManagementNetworkFeed";
export const getManagementNetworkFeed: typeof import("./getManagementNetworkFeed").getManagementNetworkFeed = null as any;
export const getManagementNetworkFeedOutput: typeof import("./getManagementNetworkFeed").getManagementNetworkFeedOutput = null as any;
utilities.lazyLoad(exports, ["getManagementNetworkFeed","getManagementNetworkFeedOutput"], () => require("./getManagementNetworkFeed"));

export { GetManagementNuageDataCenterServerArgs, GetManagementNuageDataCenterServerResult, GetManagementNuageDataCenterServerOutputArgs } from "./getManagementNuageDataCenterServer";
export const getManagementNuageDataCenterServer: typeof import("./getManagementNuageDataCenterServer").getManagementNuageDataCenterServer = null as any;
export const getManagementNuageDataCenterServerOutput: typeof import("./getManagementNuageDataCenterServer").getManagementNuageDataCenterServerOutput = null as any;
utilities.lazyLoad(exports, ["getManagementNuageDataCenterServer","getManagementNuageDataCenterServerOutput"], () => require("./getManagementNuageDataCenterServer"));

export { GetManagementNutanixDataCenterServerArgs, GetManagementNutanixDataCenterServerResult, GetManagementNutanixDataCenterServerOutputArgs } from "./getManagementNutanixDataCenterServer";
export const getManagementNutanixDataCenterServer: typeof import("./getManagementNutanixDataCenterServer").getManagementNutanixDataCenterServer = null as any;
export const getManagementNutanixDataCenterServerOutput: typeof import("./getManagementNutanixDataCenterServer").getManagementNutanixDataCenterServerOutput = null as any;
utilities.lazyLoad(exports, ["getManagementNutanixDataCenterServer","getManagementNutanixDataCenterServerOutput"], () => require("./getManagementNutanixDataCenterServer"));

export { GetManagementObjectsArgs, GetManagementObjectsResult, GetManagementObjectsOutputArgs } from "./getManagementObjects";
export const getManagementObjects: typeof import("./getManagementObjects").getManagementObjects = null as any;
export const getManagementObjectsOutput: typeof import("./getManagementObjects").getManagementObjectsOutput = null as any;
utilities.lazyLoad(exports, ["getManagementObjects","getManagementObjectsOutput"], () => require("./getManagementObjects"));

export { GetManagementOpenstackDataCenterServerArgs, GetManagementOpenstackDataCenterServerResult, GetManagementOpenstackDataCenterServerOutputArgs } from "./getManagementOpenstackDataCenterServer";
export const getManagementOpenstackDataCenterServer: typeof import("./getManagementOpenstackDataCenterServer").getManagementOpenstackDataCenterServer = null as any;
export const getManagementOpenstackDataCenterServerOutput: typeof import("./getManagementOpenstackDataCenterServer").getManagementOpenstackDataCenterServerOutput = null as any;
utilities.lazyLoad(exports, ["getManagementOpenstackDataCenterServer","getManagementOpenstackDataCenterServerOutput"], () => require("./getManagementOpenstackDataCenterServer"));

export { GetManagementOracleCloudDataCenterServerArgs, GetManagementOracleCloudDataCenterServerResult, GetManagementOracleCloudDataCenterServerOutputArgs } from "./getManagementOracleCloudDataCenterServer";
export const getManagementOracleCloudDataCenterServer: typeof import("./getManagementOracleCloudDataCenterServer").getManagementOracleCloudDataCenterServer = null as any;
export const getManagementOracleCloudDataCenterServerOutput: typeof import("./getManagementOracleCloudDataCenterServer").getManagementOracleCloudDataCenterServerOutput = null as any;
utilities.lazyLoad(exports, ["getManagementOracleCloudDataCenterServer","getManagementOracleCloudDataCenterServerOutput"], () => require("./getManagementOracleCloudDataCenterServer"));

export { GetManagementPolicySettingsArgs, GetManagementPolicySettingsResult, GetManagementPolicySettingsOutputArgs } from "./getManagementPolicySettings";
export const getManagementPolicySettings: typeof import("./getManagementPolicySettings").getManagementPolicySettings = null as any;
export const getManagementPolicySettingsOutput: typeof import("./getManagementPolicySettings").getManagementPolicySettingsOutput = null as any;
utilities.lazyLoad(exports, ["getManagementPolicySettings","getManagementPolicySettingsOutput"], () => require("./getManagementPolicySettings"));

export { GetManagementProvisioningProfileArgs, GetManagementProvisioningProfileResult, GetManagementProvisioningProfileOutputArgs } from "./getManagementProvisioningProfile";
export const getManagementProvisioningProfile: typeof import("./getManagementProvisioningProfile").getManagementProvisioningProfile = null as any;
export const getManagementProvisioningProfileOutput: typeof import("./getManagementProvisioningProfile").getManagementProvisioningProfileOutput = null as any;
utilities.lazyLoad(exports, ["getManagementProvisioningProfile","getManagementProvisioningProfileOutput"], () => require("./getManagementProvisioningProfile"));

export { GetManagementRadiusGroupArgs, GetManagementRadiusGroupResult, GetManagementRadiusGroupOutputArgs } from "./getManagementRadiusGroup";
export const getManagementRadiusGroup: typeof import("./getManagementRadiusGroup").getManagementRadiusGroup = null as any;
export const getManagementRadiusGroupOutput: typeof import("./getManagementRadiusGroup").getManagementRadiusGroupOutput = null as any;
utilities.lazyLoad(exports, ["getManagementRadiusGroup","getManagementRadiusGroupOutput"], () => require("./getManagementRadiusGroup"));

export { GetManagementRadiusServerArgs, GetManagementRadiusServerResult, GetManagementRadiusServerOutputArgs } from "./getManagementRadiusServer";
export const getManagementRadiusServer: typeof import("./getManagementRadiusServer").getManagementRadiusServer = null as any;
export const getManagementRadiusServerOutput: typeof import("./getManagementRadiusServer").getManagementRadiusServerOutput = null as any;
utilities.lazyLoad(exports, ["getManagementRadiusServer","getManagementRadiusServerOutput"], () => require("./getManagementRadiusServer"));

export { GetManagementRepositoryPackageArgs, GetManagementRepositoryPackageResult, GetManagementRepositoryPackageOutputArgs } from "./getManagementRepositoryPackage";
export const getManagementRepositoryPackage: typeof import("./getManagementRepositoryPackage").getManagementRepositoryPackage = null as any;
export const getManagementRepositoryPackageOutput: typeof import("./getManagementRepositoryPackage").getManagementRepositoryPackageOutput = null as any;
utilities.lazyLoad(exports, ["getManagementRepositoryPackage","getManagementRepositoryPackageOutput"], () => require("./getManagementRepositoryPackage"));

export { GetManagementRepositoryScriptArgs, GetManagementRepositoryScriptResult, GetManagementRepositoryScriptOutputArgs } from "./getManagementRepositoryScript";
export const getManagementRepositoryScript: typeof import("./getManagementRepositoryScript").getManagementRepositoryScript = null as any;
export const getManagementRepositoryScriptOutput: typeof import("./getManagementRepositoryScript").getManagementRepositoryScriptOutput = null as any;
utilities.lazyLoad(exports, ["getManagementRepositoryScript","getManagementRepositoryScriptOutput"], () => require("./getManagementRepositoryScript"));

export { GetManagementServerCertificateArgs, GetManagementServerCertificateResult, GetManagementServerCertificateOutputArgs } from "./getManagementServerCertificate";
export const getManagementServerCertificate: typeof import("./getManagementServerCertificate").getManagementServerCertificate = null as any;
export const getManagementServerCertificateOutput: typeof import("./getManagementServerCertificate").getManagementServerCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getManagementServerCertificate","getManagementServerCertificateOutput"], () => require("./getManagementServerCertificate"));

export { GetManagementServiceCitrixTcpArgs, GetManagementServiceCitrixTcpResult, GetManagementServiceCitrixTcpOutputArgs } from "./getManagementServiceCitrixTcp";
export const getManagementServiceCitrixTcp: typeof import("./getManagementServiceCitrixTcp").getManagementServiceCitrixTcp = null as any;
export const getManagementServiceCitrixTcpOutput: typeof import("./getManagementServiceCitrixTcp").getManagementServiceCitrixTcpOutput = null as any;
utilities.lazyLoad(exports, ["getManagementServiceCitrixTcp","getManagementServiceCitrixTcpOutput"], () => require("./getManagementServiceCitrixTcp"));

export { GetManagementServiceCompoundTcpArgs, GetManagementServiceCompoundTcpResult, GetManagementServiceCompoundTcpOutputArgs } from "./getManagementServiceCompoundTcp";
export const getManagementServiceCompoundTcp: typeof import("./getManagementServiceCompoundTcp").getManagementServiceCompoundTcp = null as any;
export const getManagementServiceCompoundTcpOutput: typeof import("./getManagementServiceCompoundTcp").getManagementServiceCompoundTcpOutput = null as any;
utilities.lazyLoad(exports, ["getManagementServiceCompoundTcp","getManagementServiceCompoundTcpOutput"], () => require("./getManagementServiceCompoundTcp"));

export { GetManagementServiceGtpArgs, GetManagementServiceGtpResult, GetManagementServiceGtpOutputArgs } from "./getManagementServiceGtp";
export const getManagementServiceGtp: typeof import("./getManagementServiceGtp").getManagementServiceGtp = null as any;
export const getManagementServiceGtpOutput: typeof import("./getManagementServiceGtp").getManagementServiceGtpOutput = null as any;
utilities.lazyLoad(exports, ["getManagementServiceGtp","getManagementServiceGtpOutput"], () => require("./getManagementServiceGtp"));

export { GetManagementShowObjectsArgs, GetManagementShowObjectsResult, GetManagementShowObjectsOutputArgs } from "./getManagementShowObjects";
export const getManagementShowObjects: typeof import("./getManagementShowObjects").getManagementShowObjects = null as any;
export const getManagementShowObjectsOutput: typeof import("./getManagementShowObjects").getManagementShowObjectsOutput = null as any;
utilities.lazyLoad(exports, ["getManagementShowObjects","getManagementShowObjectsOutput"], () => require("./getManagementShowObjects"));

export { GetManagementShowUpdatableObjectsRepositoryContentArgs, GetManagementShowUpdatableObjectsRepositoryContentResult, GetManagementShowUpdatableObjectsRepositoryContentOutputArgs } from "./getManagementShowUpdatableObjectsRepositoryContent";
export const getManagementShowUpdatableObjectsRepositoryContent: typeof import("./getManagementShowUpdatableObjectsRepositoryContent").getManagementShowUpdatableObjectsRepositoryContent = null as any;
export const getManagementShowUpdatableObjectsRepositoryContentOutput: typeof import("./getManagementShowUpdatableObjectsRepositoryContent").getManagementShowUpdatableObjectsRepositoryContentOutput = null as any;
utilities.lazyLoad(exports, ["getManagementShowUpdatableObjectsRepositoryContent","getManagementShowUpdatableObjectsRepositoryContentOutput"], () => require("./getManagementShowUpdatableObjectsRepositoryContent"));

export { GetManagementSimpleClusterArgs, GetManagementSimpleClusterResult, GetManagementSimpleClusterOutputArgs } from "./getManagementSimpleCluster";
export const getManagementSimpleCluster: typeof import("./getManagementSimpleCluster").getManagementSimpleCluster = null as any;
export const getManagementSimpleClusterOutput: typeof import("./getManagementSimpleCluster").getManagementSimpleClusterOutput = null as any;
utilities.lazyLoad(exports, ["getManagementSimpleCluster","getManagementSimpleClusterOutput"], () => require("./getManagementSimpleCluster"));

export { GetManagementSimpleGatewayArgs, GetManagementSimpleGatewayResult, GetManagementSimpleGatewayOutputArgs } from "./getManagementSimpleGateway";
export const getManagementSimpleGateway: typeof import("./getManagementSimpleGateway").getManagementSimpleGateway = null as any;
export const getManagementSimpleGatewayOutput: typeof import("./getManagementSimpleGateway").getManagementSimpleGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getManagementSimpleGateway","getManagementSimpleGatewayOutput"], () => require("./getManagementSimpleGateway"));

export { GetManagementSmartTaskArgs, GetManagementSmartTaskResult, GetManagementSmartTaskOutputArgs } from "./getManagementSmartTask";
export const getManagementSmartTask: typeof import("./getManagementSmartTask").getManagementSmartTask = null as any;
export const getManagementSmartTaskOutput: typeof import("./getManagementSmartTask").getManagementSmartTaskOutput = null as any;
utilities.lazyLoad(exports, ["getManagementSmartTask","getManagementSmartTaskOutput"], () => require("./getManagementSmartTask"));

export { GetManagementSmartTaskTriggerArgs, GetManagementSmartTaskTriggerResult, GetManagementSmartTaskTriggerOutputArgs } from "./getManagementSmartTaskTrigger";
export const getManagementSmartTaskTrigger: typeof import("./getManagementSmartTaskTrigger").getManagementSmartTaskTrigger = null as any;
export const getManagementSmartTaskTriggerOutput: typeof import("./getManagementSmartTaskTrigger").getManagementSmartTaskTriggerOutput = null as any;
utilities.lazyLoad(exports, ["getManagementSmartTaskTrigger","getManagementSmartTaskTriggerOutput"], () => require("./getManagementSmartTaskTrigger"));

export { GetManagementSmtpServerArgs, GetManagementSmtpServerResult, GetManagementSmtpServerOutputArgs } from "./getManagementSmtpServer";
export const getManagementSmtpServer: typeof import("./getManagementSmtpServer").getManagementSmtpServer = null as any;
export const getManagementSmtpServerOutput: typeof import("./getManagementSmtpServer").getManagementSmtpServerOutput = null as any;
utilities.lazyLoad(exports, ["getManagementSmtpServer","getManagementSmtpServerOutput"], () => require("./getManagementSmtpServer"));

export { GetManagementTacacsGroupArgs, GetManagementTacacsGroupResult, GetManagementTacacsGroupOutputArgs } from "./getManagementTacacsGroup";
export const getManagementTacacsGroup: typeof import("./getManagementTacacsGroup").getManagementTacacsGroup = null as any;
export const getManagementTacacsGroupOutput: typeof import("./getManagementTacacsGroup").getManagementTacacsGroupOutput = null as any;
utilities.lazyLoad(exports, ["getManagementTacacsGroup","getManagementTacacsGroupOutput"], () => require("./getManagementTacacsGroup"));

export { GetManagementTacacsServerArgs, GetManagementTacacsServerResult, GetManagementTacacsServerOutputArgs } from "./getManagementTacacsServer";
export const getManagementTacacsServer: typeof import("./getManagementTacacsServer").getManagementTacacsServer = null as any;
export const getManagementTacacsServerOutput: typeof import("./getManagementTacacsServer").getManagementTacacsServerOutput = null as any;
utilities.lazyLoad(exports, ["getManagementTacacsServer","getManagementTacacsServerOutput"], () => require("./getManagementTacacsServer"));

export { GetManagementTagArgs, GetManagementTagResult, GetManagementTagOutputArgs } from "./getManagementTag";
export const getManagementTag: typeof import("./getManagementTag").getManagementTag = null as any;
export const getManagementTagOutput: typeof import("./getManagementTag").getManagementTagOutput = null as any;
utilities.lazyLoad(exports, ["getManagementTag","getManagementTagOutput"], () => require("./getManagementTag"));

export { GetManagementTaskArgs, GetManagementTaskResult, GetManagementTaskOutputArgs } from "./getManagementTask";
export const getManagementTask: typeof import("./getManagementTask").getManagementTask = null as any;
export const getManagementTaskOutput: typeof import("./getManagementTask").getManagementTaskOutput = null as any;
utilities.lazyLoad(exports, ["getManagementTask","getManagementTaskOutput"], () => require("./getManagementTask"));

export { GetManagementThreatAdvancedSettingsArgs, GetManagementThreatAdvancedSettingsResult, GetManagementThreatAdvancedSettingsOutputArgs } from "./getManagementThreatAdvancedSettings";
export const getManagementThreatAdvancedSettings: typeof import("./getManagementThreatAdvancedSettings").getManagementThreatAdvancedSettings = null as any;
export const getManagementThreatAdvancedSettingsOutput: typeof import("./getManagementThreatAdvancedSettings").getManagementThreatAdvancedSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getManagementThreatAdvancedSettings","getManagementThreatAdvancedSettingsOutput"], () => require("./getManagementThreatAdvancedSettings"));

export { GetManagementThreatExceptionArgs, GetManagementThreatExceptionResult, GetManagementThreatExceptionOutputArgs } from "./getManagementThreatException";
export const getManagementThreatException: typeof import("./getManagementThreatException").getManagementThreatException = null as any;
export const getManagementThreatExceptionOutput: typeof import("./getManagementThreatException").getManagementThreatExceptionOutput = null as any;
utilities.lazyLoad(exports, ["getManagementThreatException","getManagementThreatExceptionOutput"], () => require("./getManagementThreatException"));

export { GetManagementThreatIocFeedArgs, GetManagementThreatIocFeedResult, GetManagementThreatIocFeedOutputArgs } from "./getManagementThreatIocFeed";
export const getManagementThreatIocFeed: typeof import("./getManagementThreatIocFeed").getManagementThreatIocFeed = null as any;
export const getManagementThreatIocFeedOutput: typeof import("./getManagementThreatIocFeed").getManagementThreatIocFeedOutput = null as any;
utilities.lazyLoad(exports, ["getManagementThreatIocFeed","getManagementThreatIocFeedOutput"], () => require("./getManagementThreatIocFeed"));

export { GetManagementThreatLayerArgs, GetManagementThreatLayerResult, GetManagementThreatLayerOutputArgs } from "./getManagementThreatLayer";
export const getManagementThreatLayer: typeof import("./getManagementThreatLayer").getManagementThreatLayer = null as any;
export const getManagementThreatLayerOutput: typeof import("./getManagementThreatLayer").getManagementThreatLayerOutput = null as any;
utilities.lazyLoad(exports, ["getManagementThreatLayer","getManagementThreatLayerOutput"], () => require("./getManagementThreatLayer"));

export { GetManagementThreatProfileArgs, GetManagementThreatProfileResult, GetManagementThreatProfileOutputArgs } from "./getManagementThreatProfile";
export const getManagementThreatProfile: typeof import("./getManagementThreatProfile").getManagementThreatProfile = null as any;
export const getManagementThreatProfileOutput: typeof import("./getManagementThreatProfile").getManagementThreatProfileOutput = null as any;
utilities.lazyLoad(exports, ["getManagementThreatProfile","getManagementThreatProfileOutput"], () => require("./getManagementThreatProfile"));

export { GetManagementThreatRuleArgs, GetManagementThreatRuleResult, GetManagementThreatRuleOutputArgs } from "./getManagementThreatRule";
export const getManagementThreatRule: typeof import("./getManagementThreatRule").getManagementThreatRule = null as any;
export const getManagementThreatRuleOutput: typeof import("./getManagementThreatRule").getManagementThreatRuleOutput = null as any;
utilities.lazyLoad(exports, ["getManagementThreatRule","getManagementThreatRuleOutput"], () => require("./getManagementThreatRule"));

export { GetManagementThreatRuleExceptionRulebaseArgs, GetManagementThreatRuleExceptionRulebaseResult, GetManagementThreatRuleExceptionRulebaseOutputArgs } from "./getManagementThreatRuleExceptionRulebase";
export const getManagementThreatRuleExceptionRulebase: typeof import("./getManagementThreatRuleExceptionRulebase").getManagementThreatRuleExceptionRulebase = null as any;
export const getManagementThreatRuleExceptionRulebaseOutput: typeof import("./getManagementThreatRuleExceptionRulebase").getManagementThreatRuleExceptionRulebaseOutput = null as any;
utilities.lazyLoad(exports, ["getManagementThreatRuleExceptionRulebase","getManagementThreatRuleExceptionRulebaseOutput"], () => require("./getManagementThreatRuleExceptionRulebase"));

export { GetManagementThreatRulebaseArgs, GetManagementThreatRulebaseResult, GetManagementThreatRulebaseOutputArgs } from "./getManagementThreatRulebase";
export const getManagementThreatRulebase: typeof import("./getManagementThreatRulebase").getManagementThreatRulebase = null as any;
export const getManagementThreatRulebaseOutput: typeof import("./getManagementThreatRulebase").getManagementThreatRulebaseOutput = null as any;
utilities.lazyLoad(exports, ["getManagementThreatRulebase","getManagementThreatRulebaseOutput"], () => require("./getManagementThreatRulebase"));

export { GetManagementTimeArgs, GetManagementTimeResult, GetManagementTimeOutputArgs } from "./getManagementTime";
export const getManagementTime: typeof import("./getManagementTime").getManagementTime = null as any;
export const getManagementTimeOutput: typeof import("./getManagementTime").getManagementTimeOutput = null as any;
utilities.lazyLoad(exports, ["getManagementTime","getManagementTimeOutput"], () => require("./getManagementTime"));

export { GetManagementTrustedClientArgs, GetManagementTrustedClientResult, GetManagementTrustedClientOutputArgs } from "./getManagementTrustedClient";
export const getManagementTrustedClient: typeof import("./getManagementTrustedClient").getManagementTrustedClient = null as any;
export const getManagementTrustedClientOutput: typeof import("./getManagementTrustedClient").getManagementTrustedClientOutput = null as any;
utilities.lazyLoad(exports, ["getManagementTrustedClient","getManagementTrustedClientOutput"], () => require("./getManagementTrustedClient"));

export { GetManagementUpdatableObjectArgs, GetManagementUpdatableObjectResult, GetManagementUpdatableObjectOutputArgs } from "./getManagementUpdatableObject";
export const getManagementUpdatableObject: typeof import("./getManagementUpdatableObject").getManagementUpdatableObject = null as any;
export const getManagementUpdatableObjectOutput: typeof import("./getManagementUpdatableObject").getManagementUpdatableObjectOutput = null as any;
utilities.lazyLoad(exports, ["getManagementUpdatableObject","getManagementUpdatableObjectOutput"], () => require("./getManagementUpdatableObject"));

export { GetManagementUserArgs, GetManagementUserResult, GetManagementUserOutputArgs } from "./getManagementUser";
export const getManagementUser: typeof import("./getManagementUser").getManagementUser = null as any;
export const getManagementUserOutput: typeof import("./getManagementUser").getManagementUserOutput = null as any;
utilities.lazyLoad(exports, ["getManagementUser","getManagementUserOutput"], () => require("./getManagementUser"));

export { GetManagementUserGroupArgs, GetManagementUserGroupResult, GetManagementUserGroupOutputArgs } from "./getManagementUserGroup";
export const getManagementUserGroup: typeof import("./getManagementUserGroup").getManagementUserGroup = null as any;
export const getManagementUserGroupOutput: typeof import("./getManagementUserGroup").getManagementUserGroupOutput = null as any;
utilities.lazyLoad(exports, ["getManagementUserGroup","getManagementUserGroupOutput"], () => require("./getManagementUserGroup"));

export { GetManagementUserTemplateArgs, GetManagementUserTemplateResult, GetManagementUserTemplateOutputArgs } from "./getManagementUserTemplate";
export const getManagementUserTemplate: typeof import("./getManagementUserTemplate").getManagementUserTemplate = null as any;
export const getManagementUserTemplateOutput: typeof import("./getManagementUserTemplate").getManagementUserTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getManagementUserTemplate","getManagementUserTemplateOutput"], () => require("./getManagementUserTemplate"));

export { GetManagementVmwareDataCenterServerArgs, GetManagementVmwareDataCenterServerResult, GetManagementVmwareDataCenterServerOutputArgs } from "./getManagementVmwareDataCenterServer";
export const getManagementVmwareDataCenterServer: typeof import("./getManagementVmwareDataCenterServer").getManagementVmwareDataCenterServer = null as any;
export const getManagementVmwareDataCenterServerOutput: typeof import("./getManagementVmwareDataCenterServer").getManagementVmwareDataCenterServerOutput = null as any;
utilities.lazyLoad(exports, ["getManagementVmwareDataCenterServer","getManagementVmwareDataCenterServerOutput"], () => require("./getManagementVmwareDataCenterServer"));

export { GetManagementVpnCommunityRemoteAccessArgs, GetManagementVpnCommunityRemoteAccessResult, GetManagementVpnCommunityRemoteAccessOutputArgs } from "./getManagementVpnCommunityRemoteAccess";
export const getManagementVpnCommunityRemoteAccess: typeof import("./getManagementVpnCommunityRemoteAccess").getManagementVpnCommunityRemoteAccess = null as any;
export const getManagementVpnCommunityRemoteAccessOutput: typeof import("./getManagementVpnCommunityRemoteAccess").getManagementVpnCommunityRemoteAccessOutput = null as any;
utilities.lazyLoad(exports, ["getManagementVpnCommunityRemoteAccess","getManagementVpnCommunityRemoteAccessOutput"], () => require("./getManagementVpnCommunityRemoteAccess"));

export { HostnameArgs, HostnameState } from "./hostname";
export type Hostname = import("./hostname").Hostname;
export const Hostname: typeof import("./hostname").Hostname = null as any;
utilities.lazyLoad(exports, ["Hostname"], () => require("./hostname"));

export { ManagementAccessLayerArgs, ManagementAccessLayerState } from "./managementAccessLayer";
export type ManagementAccessLayer = import("./managementAccessLayer").ManagementAccessLayer;
export const ManagementAccessLayer: typeof import("./managementAccessLayer").ManagementAccessLayer = null as any;
utilities.lazyLoad(exports, ["ManagementAccessLayer"], () => require("./managementAccessLayer"));

export { ManagementAccessPointNameArgs, ManagementAccessPointNameState } from "./managementAccessPointName";
export type ManagementAccessPointName = import("./managementAccessPointName").ManagementAccessPointName;
export const ManagementAccessPointName: typeof import("./managementAccessPointName").ManagementAccessPointName = null as any;
utilities.lazyLoad(exports, ["ManagementAccessPointName"], () => require("./managementAccessPointName"));

export { ManagementAccessRoleArgs, ManagementAccessRoleState } from "./managementAccessRole";
export type ManagementAccessRole = import("./managementAccessRole").ManagementAccessRole;
export const ManagementAccessRole: typeof import("./managementAccessRole").ManagementAccessRole = null as any;
utilities.lazyLoad(exports, ["ManagementAccessRole"], () => require("./managementAccessRole"));

export { ManagementAccessRuleArgs, ManagementAccessRuleState } from "./managementAccessRule";
export type ManagementAccessRule = import("./managementAccessRule").ManagementAccessRule;
export const ManagementAccessRule: typeof import("./managementAccessRule").ManagementAccessRule = null as any;
utilities.lazyLoad(exports, ["ManagementAccessRule"], () => require("./managementAccessRule"));

export { ManagementAccessSectionArgs, ManagementAccessSectionState } from "./managementAccessSection";
export type ManagementAccessSection = import("./managementAccessSection").ManagementAccessSection;
export const ManagementAccessSection: typeof import("./managementAccessSection").ManagementAccessSection = null as any;
utilities.lazyLoad(exports, ["ManagementAccessSection"], () => require("./managementAccessSection"));

export { ManagementAciDataCenterServerArgs, ManagementAciDataCenterServerState } from "./managementAciDataCenterServer";
export type ManagementAciDataCenterServer = import("./managementAciDataCenterServer").ManagementAciDataCenterServer;
export const ManagementAciDataCenterServer: typeof import("./managementAciDataCenterServer").ManagementAciDataCenterServer = null as any;
utilities.lazyLoad(exports, ["ManagementAciDataCenterServer"], () => require("./managementAciDataCenterServer"));

export { ManagementAddApiKeyArgs, ManagementAddApiKeyState } from "./managementAddApiKey";
export type ManagementAddApiKey = import("./managementAddApiKey").ManagementAddApiKey;
export const ManagementAddApiKey: typeof import("./managementAddApiKey").ManagementAddApiKey = null as any;
utilities.lazyLoad(exports, ["ManagementAddApiKey"], () => require("./managementAddApiKey"));

export { ManagementAddDataCenterObjectArgs, ManagementAddDataCenterObjectState } from "./managementAddDataCenterObject";
export type ManagementAddDataCenterObject = import("./managementAddDataCenterObject").ManagementAddDataCenterObject;
export const ManagementAddDataCenterObject: typeof import("./managementAddDataCenterObject").ManagementAddDataCenterObject = null as any;
utilities.lazyLoad(exports, ["ManagementAddDataCenterObject"], () => require("./managementAddDataCenterObject"));

export { ManagementAddRepositoryPackageArgs, ManagementAddRepositoryPackageState } from "./managementAddRepositoryPackage";
export type ManagementAddRepositoryPackage = import("./managementAddRepositoryPackage").ManagementAddRepositoryPackage;
export const ManagementAddRepositoryPackage: typeof import("./managementAddRepositoryPackage").ManagementAddRepositoryPackage = null as any;
utilities.lazyLoad(exports, ["ManagementAddRepositoryPackage"], () => require("./managementAddRepositoryPackage"));

export { ManagementAddThreatProtectionsArgs, ManagementAddThreatProtectionsState } from "./managementAddThreatProtections";
export type ManagementAddThreatProtections = import("./managementAddThreatProtections").ManagementAddThreatProtections;
export const ManagementAddThreatProtections: typeof import("./managementAddThreatProtections").ManagementAddThreatProtections = null as any;
utilities.lazyLoad(exports, ["ManagementAddThreatProtections"], () => require("./managementAddThreatProtections"));

export { ManagementAddUpdatableObjectArgs, ManagementAddUpdatableObjectState } from "./managementAddUpdatableObject";
export type ManagementAddUpdatableObject = import("./managementAddUpdatableObject").ManagementAddUpdatableObject;
export const ManagementAddUpdatableObject: typeof import("./managementAddUpdatableObject").ManagementAddUpdatableObject = null as any;
utilities.lazyLoad(exports, ["ManagementAddUpdatableObject"], () => require("./managementAddUpdatableObject"));

export { ManagementAddressRangeArgs, ManagementAddressRangeState } from "./managementAddressRange";
export type ManagementAddressRange = import("./managementAddressRange").ManagementAddressRange;
export const ManagementAddressRange: typeof import("./managementAddressRange").ManagementAddressRange = null as any;
utilities.lazyLoad(exports, ["ManagementAddressRange"], () => require("./managementAddressRange"));

export { ManagementAdministratorArgs, ManagementAdministratorState } from "./managementAdministrator";
export type ManagementAdministrator = import("./managementAdministrator").ManagementAdministrator;
export const ManagementAdministrator: typeof import("./managementAdministrator").ManagementAdministrator = null as any;
utilities.lazyLoad(exports, ["ManagementAdministrator"], () => require("./managementAdministrator"));

export { ManagementApplicationSiteArgs, ManagementApplicationSiteState } from "./managementApplicationSite";
export type ManagementApplicationSite = import("./managementApplicationSite").ManagementApplicationSite;
export const ManagementApplicationSite: typeof import("./managementApplicationSite").ManagementApplicationSite = null as any;
utilities.lazyLoad(exports, ["ManagementApplicationSite"], () => require("./managementApplicationSite"));

export { ManagementApplicationSiteCategoryArgs, ManagementApplicationSiteCategoryState } from "./managementApplicationSiteCategory";
export type ManagementApplicationSiteCategory = import("./managementApplicationSiteCategory").ManagementApplicationSiteCategory;
export const ManagementApplicationSiteCategory: typeof import("./managementApplicationSiteCategory").ManagementApplicationSiteCategory = null as any;
utilities.lazyLoad(exports, ["ManagementApplicationSiteCategory"], () => require("./managementApplicationSiteCategory"));

export { ManagementApplicationSiteGroupArgs, ManagementApplicationSiteGroupState } from "./managementApplicationSiteGroup";
export type ManagementApplicationSiteGroup = import("./managementApplicationSiteGroup").ManagementApplicationSiteGroup;
export const ManagementApplicationSiteGroup: typeof import("./managementApplicationSiteGroup").ManagementApplicationSiteGroup = null as any;
utilities.lazyLoad(exports, ["ManagementApplicationSiteGroup"], () => require("./managementApplicationSiteGroup"));

export { ManagementAssignGlobalAssignmentArgs, ManagementAssignGlobalAssignmentState } from "./managementAssignGlobalAssignment";
export type ManagementAssignGlobalAssignment = import("./managementAssignGlobalAssignment").ManagementAssignGlobalAssignment;
export const ManagementAssignGlobalAssignment: typeof import("./managementAssignGlobalAssignment").ManagementAssignGlobalAssignment = null as any;
utilities.lazyLoad(exports, ["ManagementAssignGlobalAssignment"], () => require("./managementAssignGlobalAssignment"));

export { ManagementAwsDataCenterServerArgs, ManagementAwsDataCenterServerState } from "./managementAwsDataCenterServer";
export type ManagementAwsDataCenterServer = import("./managementAwsDataCenterServer").ManagementAwsDataCenterServer;
export const ManagementAwsDataCenterServer: typeof import("./managementAwsDataCenterServer").ManagementAwsDataCenterServer = null as any;
utilities.lazyLoad(exports, ["ManagementAwsDataCenterServer"], () => require("./managementAwsDataCenterServer"));

export { ManagementAzureAdArgs, ManagementAzureAdState } from "./managementAzureAd";
export type ManagementAzureAd = import("./managementAzureAd").ManagementAzureAd;
export const ManagementAzureAd: typeof import("./managementAzureAd").ManagementAzureAd = null as any;
utilities.lazyLoad(exports, ["ManagementAzureAd"], () => require("./managementAzureAd"));

export { ManagementAzureDataCenterServerArgs, ManagementAzureDataCenterServerState } from "./managementAzureDataCenterServer";
export type ManagementAzureDataCenterServer = import("./managementAzureDataCenterServer").ManagementAzureDataCenterServer;
export const ManagementAzureDataCenterServer: typeof import("./managementAzureDataCenterServer").ManagementAzureDataCenterServer = null as any;
utilities.lazyLoad(exports, ["ManagementAzureDataCenterServer"], () => require("./managementAzureDataCenterServer"));

export { ManagementBackupDomainArgs, ManagementBackupDomainState } from "./managementBackupDomain";
export type ManagementBackupDomain = import("./managementBackupDomain").ManagementBackupDomain;
export const ManagementBackupDomain: typeof import("./managementBackupDomain").ManagementBackupDomain = null as any;
utilities.lazyLoad(exports, ["ManagementBackupDomain"], () => require("./managementBackupDomain"));

export { ManagementCheckNetworkFeedArgs, ManagementCheckNetworkFeedState } from "./managementCheckNetworkFeed";
export type ManagementCheckNetworkFeed = import("./managementCheckNetworkFeed").ManagementCheckNetworkFeed;
export const ManagementCheckNetworkFeed: typeof import("./managementCheckNetworkFeed").ManagementCheckNetworkFeed = null as any;
utilities.lazyLoad(exports, ["ManagementCheckNetworkFeed"], () => require("./managementCheckNetworkFeed"));

export { ManagementCheckThreatIocFeedArgs, ManagementCheckThreatIocFeedState } from "./managementCheckThreatIocFeed";
export type ManagementCheckThreatIocFeed = import("./managementCheckThreatIocFeed").ManagementCheckThreatIocFeed;
export const ManagementCheckThreatIocFeed: typeof import("./managementCheckThreatIocFeed").ManagementCheckThreatIocFeed = null as any;
utilities.lazyLoad(exports, ["ManagementCheckThreatIocFeed"], () => require("./managementCheckThreatIocFeed"));

export { ManagementCheckpointHostArgs, ManagementCheckpointHostState } from "./managementCheckpointHost";
export type ManagementCheckpointHost = import("./managementCheckpointHost").ManagementCheckpointHost;
export const ManagementCheckpointHost: typeof import("./managementCheckpointHost").ManagementCheckpointHost = null as any;
utilities.lazyLoad(exports, ["ManagementCheckpointHost"], () => require("./managementCheckpointHost"));

export { ManagementCmeAccountsAwsArgs, ManagementCmeAccountsAwsState } from "./managementCmeAccountsAws";
export type ManagementCmeAccountsAws = import("./managementCmeAccountsAws").ManagementCmeAccountsAws;
export const ManagementCmeAccountsAws: typeof import("./managementCmeAccountsAws").ManagementCmeAccountsAws = null as any;
utilities.lazyLoad(exports, ["ManagementCmeAccountsAws"], () => require("./managementCmeAccountsAws"));

export { ManagementCmeAccountsAzureArgs, ManagementCmeAccountsAzureState } from "./managementCmeAccountsAzure";
export type ManagementCmeAccountsAzure = import("./managementCmeAccountsAzure").ManagementCmeAccountsAzure;
export const ManagementCmeAccountsAzure: typeof import("./managementCmeAccountsAzure").ManagementCmeAccountsAzure = null as any;
utilities.lazyLoad(exports, ["ManagementCmeAccountsAzure"], () => require("./managementCmeAccountsAzure"));

export { ManagementCmeAccountsGcpArgs, ManagementCmeAccountsGcpState } from "./managementCmeAccountsGcp";
export type ManagementCmeAccountsGcp = import("./managementCmeAccountsGcp").ManagementCmeAccountsGcp;
export const ManagementCmeAccountsGcp: typeof import("./managementCmeAccountsGcp").ManagementCmeAccountsGcp = null as any;
utilities.lazyLoad(exports, ["ManagementCmeAccountsGcp"], () => require("./managementCmeAccountsGcp"));

export { ManagementCmeDelayCycleArgs, ManagementCmeDelayCycleState } from "./managementCmeDelayCycle";
export type ManagementCmeDelayCycle = import("./managementCmeDelayCycle").ManagementCmeDelayCycle;
export const ManagementCmeDelayCycle: typeof import("./managementCmeDelayCycle").ManagementCmeDelayCycle = null as any;
utilities.lazyLoad(exports, ["ManagementCmeDelayCycle"], () => require("./managementCmeDelayCycle"));

export { ManagementCmeGwConfigurationsAwsArgs, ManagementCmeGwConfigurationsAwsState } from "./managementCmeGwConfigurationsAws";
export type ManagementCmeGwConfigurationsAws = import("./managementCmeGwConfigurationsAws").ManagementCmeGwConfigurationsAws;
export const ManagementCmeGwConfigurationsAws: typeof import("./managementCmeGwConfigurationsAws").ManagementCmeGwConfigurationsAws = null as any;
utilities.lazyLoad(exports, ["ManagementCmeGwConfigurationsAws"], () => require("./managementCmeGwConfigurationsAws"));

export { ManagementCmeGwConfigurationsAzureArgs, ManagementCmeGwConfigurationsAzureState } from "./managementCmeGwConfigurationsAzure";
export type ManagementCmeGwConfigurationsAzure = import("./managementCmeGwConfigurationsAzure").ManagementCmeGwConfigurationsAzure;
export const ManagementCmeGwConfigurationsAzure: typeof import("./managementCmeGwConfigurationsAzure").ManagementCmeGwConfigurationsAzure = null as any;
utilities.lazyLoad(exports, ["ManagementCmeGwConfigurationsAzure"], () => require("./managementCmeGwConfigurationsAzure"));

export { ManagementCmeGwConfigurationsGcpArgs, ManagementCmeGwConfigurationsGcpState } from "./managementCmeGwConfigurationsGcp";
export type ManagementCmeGwConfigurationsGcp = import("./managementCmeGwConfigurationsGcp").ManagementCmeGwConfigurationsGcp;
export const ManagementCmeGwConfigurationsGcp: typeof import("./managementCmeGwConfigurationsGcp").ManagementCmeGwConfigurationsGcp = null as any;
utilities.lazyLoad(exports, ["ManagementCmeGwConfigurationsGcp"], () => require("./managementCmeGwConfigurationsGcp"));

export { ManagementCmeManagementArgs, ManagementCmeManagementState } from "./managementCmeManagement";
export type ManagementCmeManagement = import("./managementCmeManagement").ManagementCmeManagement;
export const ManagementCmeManagement: typeof import("./managementCmeManagement").ManagementCmeManagement = null as any;
utilities.lazyLoad(exports, ["ManagementCmeManagement"], () => require("./managementCmeManagement"));

export { ManagementCommandAbortGetInterfacesArgs, ManagementCommandAbortGetInterfacesState } from "./managementCommandAbortGetInterfaces";
export type ManagementCommandAbortGetInterfaces = import("./managementCommandAbortGetInterfaces").ManagementCommandAbortGetInterfaces;
export const ManagementCommandAbortGetInterfaces: typeof import("./managementCommandAbortGetInterfaces").ManagementCommandAbortGetInterfaces = null as any;
utilities.lazyLoad(exports, ["ManagementCommandAbortGetInterfaces"], () => require("./managementCommandAbortGetInterfaces"));

export { ManagementCommandExportManagementArgs, ManagementCommandExportManagementState } from "./managementCommandExportManagement";
export type ManagementCommandExportManagement = import("./managementCommandExportManagement").ManagementCommandExportManagement;
export const ManagementCommandExportManagement: typeof import("./managementCommandExportManagement").ManagementCommandExportManagement = null as any;
utilities.lazyLoad(exports, ["ManagementCommandExportManagement"], () => require("./managementCommandExportManagement"));

export { ManagementCommandExportSmartTaskArgs, ManagementCommandExportSmartTaskState } from "./managementCommandExportSmartTask";
export type ManagementCommandExportSmartTask = import("./managementCommandExportSmartTask").ManagementCommandExportSmartTask;
export const ManagementCommandExportSmartTask: typeof import("./managementCommandExportSmartTask").ManagementCommandExportSmartTask = null as any;
utilities.lazyLoad(exports, ["ManagementCommandExportSmartTask"], () => require("./managementCommandExportSmartTask"));

export { ManagementCommandGaiaApiArgs, ManagementCommandGaiaApiState } from "./managementCommandGaiaApi";
export type ManagementCommandGaiaApi = import("./managementCommandGaiaApi").ManagementCommandGaiaApi;
export const ManagementCommandGaiaApi: typeof import("./managementCommandGaiaApi").ManagementCommandGaiaApi = null as any;
utilities.lazyLoad(exports, ["ManagementCommandGaiaApi"], () => require("./managementCommandGaiaApi"));

export { ManagementCommandGetInterfacesArgs, ManagementCommandGetInterfacesState } from "./managementCommandGetInterfaces";
export type ManagementCommandGetInterfaces = import("./managementCommandGetInterfaces").ManagementCommandGetInterfaces;
export const ManagementCommandGetInterfaces: typeof import("./managementCommandGetInterfaces").ManagementCommandGetInterfaces = null as any;
utilities.lazyLoad(exports, ["ManagementCommandGetInterfaces"], () => require("./managementCommandGetInterfaces"));

export { ManagementCommandImportManagementArgs, ManagementCommandImportManagementState } from "./managementCommandImportManagement";
export type ManagementCommandImportManagement = import("./managementCommandImportManagement").ManagementCommandImportManagement;
export const ManagementCommandImportManagement: typeof import("./managementCommandImportManagement").ManagementCommandImportManagement = null as any;
utilities.lazyLoad(exports, ["ManagementCommandImportManagement"], () => require("./managementCommandImportManagement"));

export { ManagementCommandImportSmartTaskArgs, ManagementCommandImportSmartTaskState } from "./managementCommandImportSmartTask";
export type ManagementCommandImportSmartTask = import("./managementCommandImportSmartTask").ManagementCommandImportSmartTask;
export const ManagementCommandImportSmartTask: typeof import("./managementCommandImportSmartTask").ManagementCommandImportSmartTask = null as any;
utilities.lazyLoad(exports, ["ManagementCommandImportSmartTask"], () => require("./managementCommandImportSmartTask"));

export { ManagementCommandLockObjectArgs, ManagementCommandLockObjectState } from "./managementCommandLockObject";
export type ManagementCommandLockObject = import("./managementCommandLockObject").ManagementCommandLockObject;
export const ManagementCommandLockObject: typeof import("./managementCommandLockObject").ManagementCommandLockObject = null as any;
utilities.lazyLoad(exports, ["ManagementCommandLockObject"], () => require("./managementCommandLockObject"));

export { ManagementCommandLoginToDomainArgs, ManagementCommandLoginToDomainState } from "./managementCommandLoginToDomain";
export type ManagementCommandLoginToDomain = import("./managementCommandLoginToDomain").ManagementCommandLoginToDomain;
export const ManagementCommandLoginToDomain: typeof import("./managementCommandLoginToDomain").ManagementCommandLoginToDomain = null as any;
utilities.lazyLoad(exports, ["ManagementCommandLoginToDomain"], () => require("./managementCommandLoginToDomain"));

export { ManagementCommandSetGlobalPropertiesArgs, ManagementCommandSetGlobalPropertiesState } from "./managementCommandSetGlobalProperties";
export type ManagementCommandSetGlobalProperties = import("./managementCommandSetGlobalProperties").ManagementCommandSetGlobalProperties;
export const ManagementCommandSetGlobalProperties: typeof import("./managementCommandSetGlobalProperties").ManagementCommandSetGlobalProperties = null as any;
utilities.lazyLoad(exports, ["ManagementCommandSetGlobalProperties"], () => require("./managementCommandSetGlobalProperties"));

export { ManagementCommandSetPolicySettingsArgs, ManagementCommandSetPolicySettingsState } from "./managementCommandSetPolicySettings";
export type ManagementCommandSetPolicySettings = import("./managementCommandSetPolicySettings").ManagementCommandSetPolicySettings;
export const ManagementCommandSetPolicySettings: typeof import("./managementCommandSetPolicySettings").ManagementCommandSetPolicySettings = null as any;
utilities.lazyLoad(exports, ["ManagementCommandSetPolicySettings"], () => require("./managementCommandSetPolicySettings"));

export { ManagementCommandSetThreatAdvancedSettingsArgs, ManagementCommandSetThreatAdvancedSettingsState } from "./managementCommandSetThreatAdvancedSettings";
export type ManagementCommandSetThreatAdvancedSettings = import("./managementCommandSetThreatAdvancedSettings").ManagementCommandSetThreatAdvancedSettings;
export const ManagementCommandSetThreatAdvancedSettings: typeof import("./managementCommandSetThreatAdvancedSettings").ManagementCommandSetThreatAdvancedSettings = null as any;
utilities.lazyLoad(exports, ["ManagementCommandSetThreatAdvancedSettings"], () => require("./managementCommandSetThreatAdvancedSettings"));

export { ManagementCommandUnlockObjectArgs, ManagementCommandUnlockObjectState } from "./managementCommandUnlockObject";
export type ManagementCommandUnlockObject = import("./managementCommandUnlockObject").ManagementCommandUnlockObject;
export const ManagementCommandUnlockObject: typeof import("./managementCommandUnlockObject").ManagementCommandUnlockObject = null as any;
utilities.lazyLoad(exports, ["ManagementCommandUnlockObject"], () => require("./managementCommandUnlockObject"));

export { ManagementConnectCloudServicesArgs, ManagementConnectCloudServicesState } from "./managementConnectCloudServices";
export type ManagementConnectCloudServices = import("./managementConnectCloudServices").ManagementConnectCloudServices;
export const ManagementConnectCloudServices: typeof import("./managementConnectCloudServices").ManagementConnectCloudServices = null as any;
utilities.lazyLoad(exports, ["ManagementConnectCloudServices"], () => require("./managementConnectCloudServices"));

export { ManagementDataCenterObjectArgs, ManagementDataCenterObjectState } from "./managementDataCenterObject";
export type ManagementDataCenterObject = import("./managementDataCenterObject").ManagementDataCenterObject;
export const ManagementDataCenterObject: typeof import("./managementDataCenterObject").ManagementDataCenterObject = null as any;
utilities.lazyLoad(exports, ["ManagementDataCenterObject"], () => require("./managementDataCenterObject"));

export { ManagementDataCenterQueryArgs, ManagementDataCenterQueryState } from "./managementDataCenterQuery";
export type ManagementDataCenterQuery = import("./managementDataCenterQuery").ManagementDataCenterQuery;
export const ManagementDataCenterQuery: typeof import("./managementDataCenterQuery").ManagementDataCenterQuery = null as any;
utilities.lazyLoad(exports, ["ManagementDataCenterQuery"], () => require("./managementDataCenterQuery"));

export { ManagementDeleteApiKeyArgs, ManagementDeleteApiKeyState } from "./managementDeleteApiKey";
export type ManagementDeleteApiKey = import("./managementDeleteApiKey").ManagementDeleteApiKey;
export const ManagementDeleteApiKey: typeof import("./managementDeleteApiKey").ManagementDeleteApiKey = null as any;
utilities.lazyLoad(exports, ["ManagementDeleteApiKey"], () => require("./managementDeleteApiKey"));

export { ManagementDeleteDataCenterObjectArgs, ManagementDeleteDataCenterObjectState } from "./managementDeleteDataCenterObject";
export type ManagementDeleteDataCenterObject = import("./managementDeleteDataCenterObject").ManagementDeleteDataCenterObject;
export const ManagementDeleteDataCenterObject: typeof import("./managementDeleteDataCenterObject").ManagementDeleteDataCenterObject = null as any;
utilities.lazyLoad(exports, ["ManagementDeleteDataCenterObject"], () => require("./managementDeleteDataCenterObject"));

export { ManagementDeleteRepositoryPackageArgs, ManagementDeleteRepositoryPackageState } from "./managementDeleteRepositoryPackage";
export type ManagementDeleteRepositoryPackage = import("./managementDeleteRepositoryPackage").ManagementDeleteRepositoryPackage;
export const ManagementDeleteRepositoryPackage: typeof import("./managementDeleteRepositoryPackage").ManagementDeleteRepositoryPackage = null as any;
utilities.lazyLoad(exports, ["ManagementDeleteRepositoryPackage"], () => require("./managementDeleteRepositoryPackage"));

export { ManagementDeleteThreatProtectionsArgs, ManagementDeleteThreatProtectionsState } from "./managementDeleteThreatProtections";
export type ManagementDeleteThreatProtections = import("./managementDeleteThreatProtections").ManagementDeleteThreatProtections;
export const ManagementDeleteThreatProtections: typeof import("./managementDeleteThreatProtections").ManagementDeleteThreatProtections = null as any;
utilities.lazyLoad(exports, ["ManagementDeleteThreatProtections"], () => require("./managementDeleteThreatProtections"));

export { ManagementDeleteUpdatableObjectArgs, ManagementDeleteUpdatableObjectState } from "./managementDeleteUpdatableObject";
export type ManagementDeleteUpdatableObject = import("./managementDeleteUpdatableObject").ManagementDeleteUpdatableObject;
export const ManagementDeleteUpdatableObject: typeof import("./managementDeleteUpdatableObject").ManagementDeleteUpdatableObject = null as any;
utilities.lazyLoad(exports, ["ManagementDeleteUpdatableObject"], () => require("./managementDeleteUpdatableObject"));

export { ManagementDiscardArgs, ManagementDiscardState } from "./managementDiscard";
export type ManagementDiscard = import("./managementDiscard").ManagementDiscard;
export const ManagementDiscard: typeof import("./managementDiscard").ManagementDiscard = null as any;
utilities.lazyLoad(exports, ["ManagementDiscard"], () => require("./managementDiscard"));

export { ManagementDisconnectArgs, ManagementDisconnectState } from "./managementDisconnect";
export type ManagementDisconnect = import("./managementDisconnect").ManagementDisconnect;
export const ManagementDisconnect: typeof import("./managementDisconnect").ManagementDisconnect = null as any;
utilities.lazyLoad(exports, ["ManagementDisconnect"], () => require("./managementDisconnect"));

export { ManagementDisconnectCloudServicesArgs, ManagementDisconnectCloudServicesState } from "./managementDisconnectCloudServices";
export type ManagementDisconnectCloudServices = import("./managementDisconnectCloudServices").ManagementDisconnectCloudServices;
export const ManagementDisconnectCloudServices: typeof import("./managementDisconnectCloudServices").ManagementDisconnectCloudServices = null as any;
utilities.lazyLoad(exports, ["ManagementDisconnectCloudServices"], () => require("./managementDisconnectCloudServices"));

export { ManagementDnsDomainArgs, ManagementDnsDomainState } from "./managementDnsDomain";
export type ManagementDnsDomain = import("./managementDnsDomain").ManagementDnsDomain;
export const ManagementDnsDomain: typeof import("./managementDnsDomain").ManagementDnsDomain = null as any;
utilities.lazyLoad(exports, ["ManagementDnsDomain"], () => require("./managementDnsDomain"));

export { ManagementDomainArgs, ManagementDomainState } from "./managementDomain";
export type ManagementDomain = import("./managementDomain").ManagementDomain;
export const ManagementDomain: typeof import("./managementDomain").ManagementDomain = null as any;
utilities.lazyLoad(exports, ["ManagementDomain"], () => require("./managementDomain"));

export { ManagementDomainPermissionsProfileArgs, ManagementDomainPermissionsProfileState } from "./managementDomainPermissionsProfile";
export type ManagementDomainPermissionsProfile = import("./managementDomainPermissionsProfile").ManagementDomainPermissionsProfile;
export const ManagementDomainPermissionsProfile: typeof import("./managementDomainPermissionsProfile").ManagementDomainPermissionsProfile = null as any;
utilities.lazyLoad(exports, ["ManagementDomainPermissionsProfile"], () => require("./managementDomainPermissionsProfile"));

export { ManagementDynamicGlobalNetworkObjectArgs, ManagementDynamicGlobalNetworkObjectState } from "./managementDynamicGlobalNetworkObject";
export type ManagementDynamicGlobalNetworkObject = import("./managementDynamicGlobalNetworkObject").ManagementDynamicGlobalNetworkObject;
export const ManagementDynamicGlobalNetworkObject: typeof import("./managementDynamicGlobalNetworkObject").ManagementDynamicGlobalNetworkObject = null as any;
utilities.lazyLoad(exports, ["ManagementDynamicGlobalNetworkObject"], () => require("./managementDynamicGlobalNetworkObject"));

export { ManagementDynamicObjectArgs, ManagementDynamicObjectState } from "./managementDynamicObject";
export type ManagementDynamicObject = import("./managementDynamicObject").ManagementDynamicObject;
export const ManagementDynamicObject: typeof import("./managementDynamicObject").ManagementDynamicObject = null as any;
utilities.lazyLoad(exports, ["ManagementDynamicObject"], () => require("./managementDynamicObject"));

export { ManagementExceptionGroupArgs, ManagementExceptionGroupState } from "./managementExceptionGroup";
export type ManagementExceptionGroup = import("./managementExceptionGroup").ManagementExceptionGroup;
export const ManagementExceptionGroup: typeof import("./managementExceptionGroup").ManagementExceptionGroup = null as any;
utilities.lazyLoad(exports, ["ManagementExceptionGroup"], () => require("./managementExceptionGroup"));

export { ManagementExportArgs, ManagementExportState } from "./managementExport";
export type ManagementExport = import("./managementExport").ManagementExport;
export const ManagementExport: typeof import("./managementExport").ManagementExport = null as any;
utilities.lazyLoad(exports, ["ManagementExport"], () => require("./managementExport"));

export { ManagementGaiaBestPracticeArgs, ManagementGaiaBestPracticeState } from "./managementGaiaBestPractice";
export type ManagementGaiaBestPractice = import("./managementGaiaBestPractice").ManagementGaiaBestPractice;
export const ManagementGaiaBestPractice: typeof import("./managementGaiaBestPractice").ManagementGaiaBestPractice = null as any;
utilities.lazyLoad(exports, ["ManagementGaiaBestPractice"], () => require("./managementGaiaBestPractice"));

export { ManagementGcpDataCenterServerArgs, ManagementGcpDataCenterServerState } from "./managementGcpDataCenterServer";
export type ManagementGcpDataCenterServer = import("./managementGcpDataCenterServer").ManagementGcpDataCenterServer;
export const ManagementGcpDataCenterServer: typeof import("./managementGcpDataCenterServer").ManagementGcpDataCenterServer = null as any;
utilities.lazyLoad(exports, ["ManagementGcpDataCenterServer"], () => require("./managementGcpDataCenterServer"));

export { ManagementGenericDataCenterServerArgs, ManagementGenericDataCenterServerState } from "./managementGenericDataCenterServer";
export type ManagementGenericDataCenterServer = import("./managementGenericDataCenterServer").ManagementGenericDataCenterServer;
export const ManagementGenericDataCenterServer: typeof import("./managementGenericDataCenterServer").ManagementGenericDataCenterServer = null as any;
utilities.lazyLoad(exports, ["ManagementGenericDataCenterServer"], () => require("./managementGenericDataCenterServer"));

export { ManagementGetAttachmentArgs, ManagementGetAttachmentState } from "./managementGetAttachment";
export type ManagementGetAttachment = import("./managementGetAttachment").ManagementGetAttachment;
export const ManagementGetAttachment: typeof import("./managementGetAttachment").ManagementGetAttachment = null as any;
utilities.lazyLoad(exports, ["ManagementGetAttachment"], () => require("./managementGetAttachment"));

export { ManagementGetPlatformArgs, ManagementGetPlatformState } from "./managementGetPlatform";
export type ManagementGetPlatform = import("./managementGetPlatform").ManagementGetPlatform;
export const ManagementGetPlatform: typeof import("./managementGetPlatform").ManagementGetPlatform = null as any;
utilities.lazyLoad(exports, ["ManagementGetPlatform"], () => require("./managementGetPlatform"));

export { ManagementGlobalAssignmentArgs, ManagementGlobalAssignmentState } from "./managementGlobalAssignment";
export type ManagementGlobalAssignment = import("./managementGlobalAssignment").ManagementGlobalAssignment;
export const ManagementGlobalAssignment: typeof import("./managementGlobalAssignment").ManagementGlobalAssignment = null as any;
utilities.lazyLoad(exports, ["ManagementGlobalAssignment"], () => require("./managementGlobalAssignment"));

export { ManagementGroupArgs, ManagementGroupState } from "./managementGroup";
export type ManagementGroup = import("./managementGroup").ManagementGroup;
export const ManagementGroup: typeof import("./managementGroup").ManagementGroup = null as any;
utilities.lazyLoad(exports, ["ManagementGroup"], () => require("./managementGroup"));

export { ManagementGroupWithExclusionArgs, ManagementGroupWithExclusionState } from "./managementGroupWithExclusion";
export type ManagementGroupWithExclusion = import("./managementGroupWithExclusion").ManagementGroupWithExclusion;
export const ManagementGroupWithExclusion: typeof import("./managementGroupWithExclusion").ManagementGroupWithExclusion = null as any;
utilities.lazyLoad(exports, ["ManagementGroupWithExclusion"], () => require("./managementGroupWithExclusion"));

export { ManagementGsnHandoverGroupArgs, ManagementGsnHandoverGroupState } from "./managementGsnHandoverGroup";
export type ManagementGsnHandoverGroup = import("./managementGsnHandoverGroup").ManagementGsnHandoverGroup;
export const ManagementGsnHandoverGroup: typeof import("./managementGsnHandoverGroup").ManagementGsnHandoverGroup = null as any;
utilities.lazyLoad(exports, ["ManagementGsnHandoverGroup"], () => require("./managementGsnHandoverGroup"));

export { ManagementHaFullSyncArgs, ManagementHaFullSyncState } from "./managementHaFullSync";
export type ManagementHaFullSync = import("./managementHaFullSync").ManagementHaFullSync;
export const ManagementHaFullSync: typeof import("./managementHaFullSync").ManagementHaFullSync = null as any;
utilities.lazyLoad(exports, ["ManagementHaFullSync"], () => require("./managementHaFullSync"));

export { ManagementHostArgs, ManagementHostState } from "./managementHost";
export type ManagementHost = import("./managementHost").ManagementHost;
export const ManagementHost: typeof import("./managementHost").ManagementHost = null as any;
utilities.lazyLoad(exports, ["ManagementHost"], () => require("./managementHost"));

export { ManagementHttpsLayerArgs, ManagementHttpsLayerState } from "./managementHttpsLayer";
export type ManagementHttpsLayer = import("./managementHttpsLayer").ManagementHttpsLayer;
export const ManagementHttpsLayer: typeof import("./managementHttpsLayer").ManagementHttpsLayer = null as any;
utilities.lazyLoad(exports, ["ManagementHttpsLayer"], () => require("./managementHttpsLayer"));

export { ManagementHttpsRuleArgs, ManagementHttpsRuleState } from "./managementHttpsRule";
export type ManagementHttpsRule = import("./managementHttpsRule").ManagementHttpsRule;
export const ManagementHttpsRule: typeof import("./managementHttpsRule").ManagementHttpsRule = null as any;
utilities.lazyLoad(exports, ["ManagementHttpsRule"], () => require("./managementHttpsRule"));

export { ManagementHttpsSectionArgs, ManagementHttpsSectionState } from "./managementHttpsSection";
export type ManagementHttpsSection = import("./managementHttpsSection").ManagementHttpsSection;
export const ManagementHttpsSection: typeof import("./managementHttpsSection").ManagementHttpsSection = null as any;
utilities.lazyLoad(exports, ["ManagementHttpsSection"], () => require("./managementHttpsSection"));

export { ManagementIdentityTagArgs, ManagementIdentityTagState } from "./managementIdentityTag";
export type ManagementIdentityTag = import("./managementIdentityTag").ManagementIdentityTag;
export const ManagementIdentityTag: typeof import("./managementIdentityTag").ManagementIdentityTag = null as any;
utilities.lazyLoad(exports, ["ManagementIdentityTag"], () => require("./managementIdentityTag"));

export { ManagementIdpAdministratorGroupArgs, ManagementIdpAdministratorGroupState } from "./managementIdpAdministratorGroup";
export type ManagementIdpAdministratorGroup = import("./managementIdpAdministratorGroup").ManagementIdpAdministratorGroup;
export const ManagementIdpAdministratorGroup: typeof import("./managementIdpAdministratorGroup").ManagementIdpAdministratorGroup = null as any;
utilities.lazyLoad(exports, ["ManagementIdpAdministratorGroup"], () => require("./managementIdpAdministratorGroup"));

export { ManagementInstallDatabaseArgs, ManagementInstallDatabaseState } from "./managementInstallDatabase";
export type ManagementInstallDatabase = import("./managementInstallDatabase").ManagementInstallDatabase;
export const ManagementInstallDatabase: typeof import("./managementInstallDatabase").ManagementInstallDatabase = null as any;
utilities.lazyLoad(exports, ["ManagementInstallDatabase"], () => require("./managementInstallDatabase"));

export { ManagementInstallLsmPolicyArgs, ManagementInstallLsmPolicyState } from "./managementInstallLsmPolicy";
export type ManagementInstallLsmPolicy = import("./managementInstallLsmPolicy").ManagementInstallLsmPolicy;
export const ManagementInstallLsmPolicy: typeof import("./managementInstallLsmPolicy").ManagementInstallLsmPolicy = null as any;
utilities.lazyLoad(exports, ["ManagementInstallLsmPolicy"], () => require("./managementInstallLsmPolicy"));

export { ManagementInstallLsmSettingsArgs, ManagementInstallLsmSettingsState } from "./managementInstallLsmSettings";
export type ManagementInstallLsmSettings = import("./managementInstallLsmSettings").ManagementInstallLsmSettings;
export const ManagementInstallLsmSettings: typeof import("./managementInstallLsmSettings").ManagementInstallLsmSettings = null as any;
utilities.lazyLoad(exports, ["ManagementInstallLsmSettings"], () => require("./managementInstallLsmSettings"));

export { ManagementInstallPolicyArgs, ManagementInstallPolicyState } from "./managementInstallPolicy";
export type ManagementInstallPolicy = import("./managementInstallPolicy").ManagementInstallPolicy;
export const ManagementInstallPolicy: typeof import("./managementInstallPolicy").ManagementInstallPolicy = null as any;
utilities.lazyLoad(exports, ["ManagementInstallPolicy"], () => require("./managementInstallPolicy"));

export { ManagementInstallSoftwarePackageArgs, ManagementInstallSoftwarePackageState } from "./managementInstallSoftwarePackage";
export type ManagementInstallSoftwarePackage = import("./managementInstallSoftwarePackage").ManagementInstallSoftwarePackage;
export const ManagementInstallSoftwarePackage: typeof import("./managementInstallSoftwarePackage").ManagementInstallSoftwarePackage = null as any;
utilities.lazyLoad(exports, ["ManagementInstallSoftwarePackage"], () => require("./managementInstallSoftwarePackage"));

export { ManagementInteroperableDeviceArgs, ManagementInteroperableDeviceState } from "./managementInteroperableDevice";
export type ManagementInteroperableDevice = import("./managementInteroperableDevice").ManagementInteroperableDevice;
export const ManagementInteroperableDevice: typeof import("./managementInteroperableDevice").ManagementInteroperableDevice = null as any;
utilities.lazyLoad(exports, ["ManagementInteroperableDevice"], () => require("./managementInteroperableDevice"));

export { ManagementIseDataCenterServerArgs, ManagementIseDataCenterServerState } from "./managementIseDataCenterServer";
export type ManagementIseDataCenterServer = import("./managementIseDataCenterServer").ManagementIseDataCenterServer;
export const ManagementIseDataCenterServer: typeof import("./managementIseDataCenterServer").ManagementIseDataCenterServer = null as any;
utilities.lazyLoad(exports, ["ManagementIseDataCenterServer"], () => require("./managementIseDataCenterServer"));

export { ManagementKeepaliveArgs, ManagementKeepaliveState } from "./managementKeepalive";
export type ManagementKeepalive = import("./managementKeepalive").ManagementKeepalive;
export const ManagementKeepalive: typeof import("./managementKeepalive").ManagementKeepalive = null as any;
utilities.lazyLoad(exports, ["ManagementKeepalive"], () => require("./managementKeepalive"));

export { ManagementKubernetesDataCenterServerArgs, ManagementKubernetesDataCenterServerState } from "./managementKubernetesDataCenterServer";
export type ManagementKubernetesDataCenterServer = import("./managementKubernetesDataCenterServer").ManagementKubernetesDataCenterServer;
export const ManagementKubernetesDataCenterServer: typeof import("./managementKubernetesDataCenterServer").ManagementKubernetesDataCenterServer = null as any;
utilities.lazyLoad(exports, ["ManagementKubernetesDataCenterServer"], () => require("./managementKubernetesDataCenterServer"));

export { ManagementLoginArgs, ManagementLoginState } from "./managementLogin";
export type ManagementLogin = import("./managementLogin").ManagementLogin;
export const ManagementLogin: typeof import("./managementLogin").ManagementLogin = null as any;
utilities.lazyLoad(exports, ["ManagementLogin"], () => require("./managementLogin"));

export { ManagementLogoutArgs, ManagementLogoutState } from "./managementLogout";
export type ManagementLogout = import("./managementLogout").ManagementLogout;
export const ManagementLogout: typeof import("./managementLogout").ManagementLogout = null as any;
utilities.lazyLoad(exports, ["ManagementLogout"], () => require("./managementLogout"));

export { ManagementLsmClusterArgs, ManagementLsmClusterState } from "./managementLsmCluster";
export type ManagementLsmCluster = import("./managementLsmCluster").ManagementLsmCluster;
export const ManagementLsmCluster: typeof import("./managementLsmCluster").ManagementLsmCluster = null as any;
utilities.lazyLoad(exports, ["ManagementLsmCluster"], () => require("./managementLsmCluster"));

export { ManagementLsmGatewayArgs, ManagementLsmGatewayState } from "./managementLsmGateway";
export type ManagementLsmGateway = import("./managementLsmGateway").ManagementLsmGateway;
export const ManagementLsmGateway: typeof import("./managementLsmGateway").ManagementLsmGateway = null as any;
utilities.lazyLoad(exports, ["ManagementLsmGateway"], () => require("./managementLsmGateway"));

export { ManagementLsmRunScriptArgs, ManagementLsmRunScriptState } from "./managementLsmRunScript";
export type ManagementLsmRunScript = import("./managementLsmRunScript").ManagementLsmRunScript;
export const ManagementLsmRunScript: typeof import("./managementLsmRunScript").ManagementLsmRunScript = null as any;
utilities.lazyLoad(exports, ["ManagementLsmRunScript"], () => require("./managementLsmRunScript"));

export { ManagementLsvProfileArgs, ManagementLsvProfileState } from "./managementLsvProfile";
export type ManagementLsvProfile = import("./managementLsvProfile").ManagementLsvProfile;
export const ManagementLsvProfile: typeof import("./managementLsvProfile").ManagementLsvProfile = null as any;
utilities.lazyLoad(exports, ["ManagementLsvProfile"], () => require("./managementLsvProfile"));

export { ManagementMdPermissionsProfileArgs, ManagementMdPermissionsProfileState } from "./managementMdPermissionsProfile";
export type ManagementMdPermissionsProfile = import("./managementMdPermissionsProfile").ManagementMdPermissionsProfile;
export const ManagementMdPermissionsProfile: typeof import("./managementMdPermissionsProfile").ManagementMdPermissionsProfile = null as any;
utilities.lazyLoad(exports, ["ManagementMdPermissionsProfile"], () => require("./managementMdPermissionsProfile"));

export { ManagementMdsArgs, ManagementMdsState } from "./managementMds";
export type ManagementMds = import("./managementMds").ManagementMds;
export const ManagementMds: typeof import("./managementMds").ManagementMds = null as any;
utilities.lazyLoad(exports, ["ManagementMds"], () => require("./managementMds"));

export { ManagementMigrateExportDomainArgs, ManagementMigrateExportDomainState } from "./managementMigrateExportDomain";
export type ManagementMigrateExportDomain = import("./managementMigrateExportDomain").ManagementMigrateExportDomain;
export const ManagementMigrateExportDomain: typeof import("./managementMigrateExportDomain").ManagementMigrateExportDomain = null as any;
utilities.lazyLoad(exports, ["ManagementMigrateExportDomain"], () => require("./managementMigrateExportDomain"));

export { ManagementMigrateImportDomainArgs, ManagementMigrateImportDomainState } from "./managementMigrateImportDomain";
export type ManagementMigrateImportDomain = import("./managementMigrateImportDomain").ManagementMigrateImportDomain;
export const ManagementMigrateImportDomain: typeof import("./managementMigrateImportDomain").ManagementMigrateImportDomain = null as any;
utilities.lazyLoad(exports, ["ManagementMigrateImportDomain"], () => require("./managementMigrateImportDomain"));

export { ManagementMulticastAddressRangeArgs, ManagementMulticastAddressRangeState } from "./managementMulticastAddressRange";
export type ManagementMulticastAddressRange = import("./managementMulticastAddressRange").ManagementMulticastAddressRange;
export const ManagementMulticastAddressRange: typeof import("./managementMulticastAddressRange").ManagementMulticastAddressRange = null as any;
utilities.lazyLoad(exports, ["ManagementMulticastAddressRange"], () => require("./managementMulticastAddressRange"));

export { ManagementNatRuleArgs, ManagementNatRuleState } from "./managementNatRule";
export type ManagementNatRule = import("./managementNatRule").ManagementNatRule;
export const ManagementNatRule: typeof import("./managementNatRule").ManagementNatRule = null as any;
utilities.lazyLoad(exports, ["ManagementNatRule"], () => require("./managementNatRule"));

export { ManagementNatSectionArgs, ManagementNatSectionState } from "./managementNatSection";
export type ManagementNatSection = import("./managementNatSection").ManagementNatSection;
export const ManagementNatSection: typeof import("./managementNatSection").ManagementNatSection = null as any;
utilities.lazyLoad(exports, ["ManagementNatSection"], () => require("./managementNatSection"));

export { ManagementNetworkArgs, ManagementNetworkState } from "./managementNetwork";
export type ManagementNetwork = import("./managementNetwork").ManagementNetwork;
export const ManagementNetwork: typeof import("./managementNetwork").ManagementNetwork = null as any;
utilities.lazyLoad(exports, ["ManagementNetwork"], () => require("./managementNetwork"));

export { ManagementNetworkFeedArgs, ManagementNetworkFeedState } from "./managementNetworkFeed";
export type ManagementNetworkFeed = import("./managementNetworkFeed").ManagementNetworkFeed;
export const ManagementNetworkFeed: typeof import("./managementNetworkFeed").ManagementNetworkFeed = null as any;
utilities.lazyLoad(exports, ["ManagementNetworkFeed"], () => require("./managementNetworkFeed"));

export { ManagementNuageDataCenterServerArgs, ManagementNuageDataCenterServerState } from "./managementNuageDataCenterServer";
export type ManagementNuageDataCenterServer = import("./managementNuageDataCenterServer").ManagementNuageDataCenterServer;
export const ManagementNuageDataCenterServer: typeof import("./managementNuageDataCenterServer").ManagementNuageDataCenterServer = null as any;
utilities.lazyLoad(exports, ["ManagementNuageDataCenterServer"], () => require("./managementNuageDataCenterServer"));

export { ManagementNutanixDataCenterServerArgs, ManagementNutanixDataCenterServerState } from "./managementNutanixDataCenterServer";
export type ManagementNutanixDataCenterServer = import("./managementNutanixDataCenterServer").ManagementNutanixDataCenterServer;
export const ManagementNutanixDataCenterServer: typeof import("./managementNutanixDataCenterServer").ManagementNutanixDataCenterServer = null as any;
utilities.lazyLoad(exports, ["ManagementNutanixDataCenterServer"], () => require("./managementNutanixDataCenterServer"));

export { ManagementOpenstackDataCenterServerArgs, ManagementOpenstackDataCenterServerState } from "./managementOpenstackDataCenterServer";
export type ManagementOpenstackDataCenterServer = import("./managementOpenstackDataCenterServer").ManagementOpenstackDataCenterServer;
export const ManagementOpenstackDataCenterServer: typeof import("./managementOpenstackDataCenterServer").ManagementOpenstackDataCenterServer = null as any;
utilities.lazyLoad(exports, ["ManagementOpenstackDataCenterServer"], () => require("./managementOpenstackDataCenterServer"));

export { ManagementOpsecApplicationArgs, ManagementOpsecApplicationState } from "./managementOpsecApplication";
export type ManagementOpsecApplication = import("./managementOpsecApplication").ManagementOpsecApplication;
export const ManagementOpsecApplication: typeof import("./managementOpsecApplication").ManagementOpsecApplication = null as any;
utilities.lazyLoad(exports, ["ManagementOpsecApplication"], () => require("./managementOpsecApplication"));

export { ManagementOracleCloudDataCenterServerArgs, ManagementOracleCloudDataCenterServerState } from "./managementOracleCloudDataCenterServer";
export type ManagementOracleCloudDataCenterServer = import("./managementOracleCloudDataCenterServer").ManagementOracleCloudDataCenterServer;
export const ManagementOracleCloudDataCenterServer: typeof import("./managementOracleCloudDataCenterServer").ManagementOracleCloudDataCenterServer = null as any;
utilities.lazyLoad(exports, ["ManagementOracleCloudDataCenterServer"], () => require("./managementOracleCloudDataCenterServer"));

export { ManagementPackageArgs, ManagementPackageState } from "./managementPackage";
export type ManagementPackage = import("./managementPackage").ManagementPackage;
export const ManagementPackage: typeof import("./managementPackage").ManagementPackage = null as any;
utilities.lazyLoad(exports, ["ManagementPackage"], () => require("./managementPackage"));

export { ManagementPublishArgs, ManagementPublishState } from "./managementPublish";
export type ManagementPublish = import("./managementPublish").ManagementPublish;
export const ManagementPublish: typeof import("./managementPublish").ManagementPublish = null as any;
utilities.lazyLoad(exports, ["ManagementPublish"], () => require("./managementPublish"));

export { ManagementPutFileArgs, ManagementPutFileState } from "./managementPutFile";
export type ManagementPutFile = import("./managementPutFile").ManagementPutFile;
export const ManagementPutFile: typeof import("./managementPutFile").ManagementPutFile = null as any;
utilities.lazyLoad(exports, ["ManagementPutFile"], () => require("./managementPutFile"));

export { ManagementRadiusGroupArgs, ManagementRadiusGroupState } from "./managementRadiusGroup";
export type ManagementRadiusGroup = import("./managementRadiusGroup").ManagementRadiusGroup;
export const ManagementRadiusGroup: typeof import("./managementRadiusGroup").ManagementRadiusGroup = null as any;
utilities.lazyLoad(exports, ["ManagementRadiusGroup"], () => require("./managementRadiusGroup"));

export { ManagementRadiusServerArgs, ManagementRadiusServerState } from "./managementRadiusServer";
export type ManagementRadiusServer = import("./managementRadiusServer").ManagementRadiusServer;
export const ManagementRadiusServer: typeof import("./managementRadiusServer").ManagementRadiusServer = null as any;
utilities.lazyLoad(exports, ["ManagementRadiusServer"], () => require("./managementRadiusServer"));

export { ManagementRepositoryScriptArgs, ManagementRepositoryScriptState } from "./managementRepositoryScript";
export type ManagementRepositoryScript = import("./managementRepositoryScript").ManagementRepositoryScript;
export const ManagementRepositoryScript: typeof import("./managementRepositoryScript").ManagementRepositoryScript = null as any;
utilities.lazyLoad(exports, ["ManagementRepositoryScript"], () => require("./managementRepositoryScript"));

export { ManagementResetSicArgs, ManagementResetSicState } from "./managementResetSic";
export type ManagementResetSic = import("./managementResetSic").ManagementResetSic;
export const ManagementResetSic: typeof import("./managementResetSic").ManagementResetSic = null as any;
utilities.lazyLoad(exports, ["ManagementResetSic"], () => require("./managementResetSic"));

export { ManagementRestoreDomainArgs, ManagementRestoreDomainState } from "./managementRestoreDomain";
export type ManagementRestoreDomain = import("./managementRestoreDomain").ManagementRestoreDomain;
export const ManagementRestoreDomain: typeof import("./managementRestoreDomain").ManagementRestoreDomain = null as any;
utilities.lazyLoad(exports, ["ManagementRestoreDomain"], () => require("./managementRestoreDomain"));

export { ManagementRevertToRevisionArgs, ManagementRevertToRevisionState } from "./managementRevertToRevision";
export type ManagementRevertToRevision = import("./managementRevertToRevision").ManagementRevertToRevision;
export const ManagementRevertToRevision: typeof import("./managementRevertToRevision").ManagementRevertToRevision = null as any;
utilities.lazyLoad(exports, ["ManagementRevertToRevision"], () => require("./managementRevertToRevision"));

export { ManagementRunIpsUpdateArgs, ManagementRunIpsUpdateState } from "./managementRunIpsUpdate";
export type ManagementRunIpsUpdate = import("./managementRunIpsUpdate").ManagementRunIpsUpdate;
export const ManagementRunIpsUpdate: typeof import("./managementRunIpsUpdate").ManagementRunIpsUpdate = null as any;
utilities.lazyLoad(exports, ["ManagementRunIpsUpdate"], () => require("./managementRunIpsUpdate"));

export { ManagementRunScriptArgs, ManagementRunScriptState } from "./managementRunScript";
export type ManagementRunScript = import("./managementRunScript").ManagementRunScript;
export const ManagementRunScript: typeof import("./managementRunScript").ManagementRunScript = null as any;
utilities.lazyLoad(exports, ["ManagementRunScript"], () => require("./managementRunScript"));

export { ManagementRunThreatEmulationFileTypesOfflineUpdateArgs, ManagementRunThreatEmulationFileTypesOfflineUpdateState } from "./managementRunThreatEmulationFileTypesOfflineUpdate";
export type ManagementRunThreatEmulationFileTypesOfflineUpdate = import("./managementRunThreatEmulationFileTypesOfflineUpdate").ManagementRunThreatEmulationFileTypesOfflineUpdate;
export const ManagementRunThreatEmulationFileTypesOfflineUpdate: typeof import("./managementRunThreatEmulationFileTypesOfflineUpdate").ManagementRunThreatEmulationFileTypesOfflineUpdate = null as any;
utilities.lazyLoad(exports, ["ManagementRunThreatEmulationFileTypesOfflineUpdate"], () => require("./managementRunThreatEmulationFileTypesOfflineUpdate"));

export { ManagementSecurityZoneArgs, ManagementSecurityZoneState } from "./managementSecurityZone";
export type ManagementSecurityZone = import("./managementSecurityZone").ManagementSecurityZone;
export const ManagementSecurityZone: typeof import("./managementSecurityZone").ManagementSecurityZone = null as any;
utilities.lazyLoad(exports, ["ManagementSecurityZone"], () => require("./managementSecurityZone"));

export { ManagementServerCertificateArgs, ManagementServerCertificateState } from "./managementServerCertificate";
export type ManagementServerCertificate = import("./managementServerCertificate").ManagementServerCertificate;
export const ManagementServerCertificate: typeof import("./managementServerCertificate").ManagementServerCertificate = null as any;
utilities.lazyLoad(exports, ["ManagementServerCertificate"], () => require("./managementServerCertificate"));

export { ManagementServiceCitrixTcpArgs, ManagementServiceCitrixTcpState } from "./managementServiceCitrixTcp";
export type ManagementServiceCitrixTcp = import("./managementServiceCitrixTcp").ManagementServiceCitrixTcp;
export const ManagementServiceCitrixTcp: typeof import("./managementServiceCitrixTcp").ManagementServiceCitrixTcp = null as any;
utilities.lazyLoad(exports, ["ManagementServiceCitrixTcp"], () => require("./managementServiceCitrixTcp"));

export { ManagementServiceCompoundTcpArgs, ManagementServiceCompoundTcpState } from "./managementServiceCompoundTcp";
export type ManagementServiceCompoundTcp = import("./managementServiceCompoundTcp").ManagementServiceCompoundTcp;
export const ManagementServiceCompoundTcp: typeof import("./managementServiceCompoundTcp").ManagementServiceCompoundTcp = null as any;
utilities.lazyLoad(exports, ["ManagementServiceCompoundTcp"], () => require("./managementServiceCompoundTcp"));

export { ManagementServiceDceRpcArgs, ManagementServiceDceRpcState } from "./managementServiceDceRpc";
export type ManagementServiceDceRpc = import("./managementServiceDceRpc").ManagementServiceDceRpc;
export const ManagementServiceDceRpc: typeof import("./managementServiceDceRpc").ManagementServiceDceRpc = null as any;
utilities.lazyLoad(exports, ["ManagementServiceDceRpc"], () => require("./managementServiceDceRpc"));

export { ManagementServiceGroupArgs, ManagementServiceGroupState } from "./managementServiceGroup";
export type ManagementServiceGroup = import("./managementServiceGroup").ManagementServiceGroup;
export const ManagementServiceGroup: typeof import("./managementServiceGroup").ManagementServiceGroup = null as any;
utilities.lazyLoad(exports, ["ManagementServiceGroup"], () => require("./managementServiceGroup"));

export { ManagementServiceGtpArgs, ManagementServiceGtpState } from "./managementServiceGtp";
export type ManagementServiceGtp = import("./managementServiceGtp").ManagementServiceGtp;
export const ManagementServiceGtp: typeof import("./managementServiceGtp").ManagementServiceGtp = null as any;
utilities.lazyLoad(exports, ["ManagementServiceGtp"], () => require("./managementServiceGtp"));

export { ManagementServiceIcmpArgs, ManagementServiceIcmpState } from "./managementServiceIcmp";
export type ManagementServiceIcmp = import("./managementServiceIcmp").ManagementServiceIcmp;
export const ManagementServiceIcmp: typeof import("./managementServiceIcmp").ManagementServiceIcmp = null as any;
utilities.lazyLoad(exports, ["ManagementServiceIcmp"], () => require("./managementServiceIcmp"));

export { ManagementServiceIcmp6Args, ManagementServiceIcmp6State } from "./managementServiceIcmp6";
export type ManagementServiceIcmp6 = import("./managementServiceIcmp6").ManagementServiceIcmp6;
export const ManagementServiceIcmp6: typeof import("./managementServiceIcmp6").ManagementServiceIcmp6 = null as any;
utilities.lazyLoad(exports, ["ManagementServiceIcmp6"], () => require("./managementServiceIcmp6"));

export { ManagementServiceOtherArgs, ManagementServiceOtherState } from "./managementServiceOther";
export type ManagementServiceOther = import("./managementServiceOther").ManagementServiceOther;
export const ManagementServiceOther: typeof import("./managementServiceOther").ManagementServiceOther = null as any;
utilities.lazyLoad(exports, ["ManagementServiceOther"], () => require("./managementServiceOther"));

export { ManagementServiceRpcArgs, ManagementServiceRpcState } from "./managementServiceRpc";
export type ManagementServiceRpc = import("./managementServiceRpc").ManagementServiceRpc;
export const ManagementServiceRpc: typeof import("./managementServiceRpc").ManagementServiceRpc = null as any;
utilities.lazyLoad(exports, ["ManagementServiceRpc"], () => require("./managementServiceRpc"));

export { ManagementServiceSctpArgs, ManagementServiceSctpState } from "./managementServiceSctp";
export type ManagementServiceSctp = import("./managementServiceSctp").ManagementServiceSctp;
export const ManagementServiceSctp: typeof import("./managementServiceSctp").ManagementServiceSctp = null as any;
utilities.lazyLoad(exports, ["ManagementServiceSctp"], () => require("./managementServiceSctp"));

export { ManagementServiceTcpArgs, ManagementServiceTcpState } from "./managementServiceTcp";
export type ManagementServiceTcp = import("./managementServiceTcp").ManagementServiceTcp;
export const ManagementServiceTcp: typeof import("./managementServiceTcp").ManagementServiceTcp = null as any;
utilities.lazyLoad(exports, ["ManagementServiceTcp"], () => require("./managementServiceTcp"));

export { ManagementServiceUdpArgs, ManagementServiceUdpState } from "./managementServiceUdp";
export type ManagementServiceUdp = import("./managementServiceUdp").ManagementServiceUdp;
export const ManagementServiceUdp: typeof import("./managementServiceUdp").ManagementServiceUdp = null as any;
utilities.lazyLoad(exports, ["ManagementServiceUdp"], () => require("./managementServiceUdp"));

export { ManagementSetApiSettingsArgs, ManagementSetApiSettingsState } from "./managementSetApiSettings";
export type ManagementSetApiSettings = import("./managementSetApiSettings").ManagementSetApiSettings;
export const ManagementSetApiSettings: typeof import("./managementSetApiSettings").ManagementSetApiSettings = null as any;
utilities.lazyLoad(exports, ["ManagementSetApiSettings"], () => require("./managementSetApiSettings"));

export { ManagementSetAutomaticPurgeArgs, ManagementSetAutomaticPurgeState } from "./managementSetAutomaticPurge";
export type ManagementSetAutomaticPurge = import("./managementSetAutomaticPurge").ManagementSetAutomaticPurge;
export const ManagementSetAutomaticPurge: typeof import("./managementSetAutomaticPurge").ManagementSetAutomaticPurge = null as any;
utilities.lazyLoad(exports, ["ManagementSetAutomaticPurge"], () => require("./managementSetAutomaticPurge"));

export { ManagementSetGlobalDomainArgs, ManagementSetGlobalDomainState } from "./managementSetGlobalDomain";
export type ManagementSetGlobalDomain = import("./managementSetGlobalDomain").ManagementSetGlobalDomain;
export const ManagementSetGlobalDomain: typeof import("./managementSetGlobalDomain").ManagementSetGlobalDomain = null as any;
utilities.lazyLoad(exports, ["ManagementSetGlobalDomain"], () => require("./managementSetGlobalDomain"));

export { ManagementSetHaStateArgs, ManagementSetHaStateState } from "./managementSetHaState";
export type ManagementSetHaState = import("./managementSetHaState").ManagementSetHaState;
export const ManagementSetHaState: typeof import("./managementSetHaState").ManagementSetHaState = null as any;
utilities.lazyLoad(exports, ["ManagementSetHaState"], () => require("./managementSetHaState"));

export { ManagementSetIdpDefaultAssignmentArgs, ManagementSetIdpDefaultAssignmentState } from "./managementSetIdpDefaultAssignment";
export type ManagementSetIdpDefaultAssignment = import("./managementSetIdpDefaultAssignment").ManagementSetIdpDefaultAssignment;
export const ManagementSetIdpDefaultAssignment: typeof import("./managementSetIdpDefaultAssignment").ManagementSetIdpDefaultAssignment = null as any;
utilities.lazyLoad(exports, ["ManagementSetIdpDefaultAssignment"], () => require("./managementSetIdpDefaultAssignment"));

export { ManagementSetIdpToDomainAssignmentArgs, ManagementSetIdpToDomainAssignmentState } from "./managementSetIdpToDomainAssignment";
export type ManagementSetIdpToDomainAssignment = import("./managementSetIdpToDomainAssignment").ManagementSetIdpToDomainAssignment;
export const ManagementSetIdpToDomainAssignment: typeof import("./managementSetIdpToDomainAssignment").ManagementSetIdpToDomainAssignment = null as any;
utilities.lazyLoad(exports, ["ManagementSetIdpToDomainAssignment"], () => require("./managementSetIdpToDomainAssignment"));

export { ManagementSetIpsUpdateScheduleArgs, ManagementSetIpsUpdateScheduleState } from "./managementSetIpsUpdateSchedule";
export type ManagementSetIpsUpdateSchedule = import("./managementSetIpsUpdateSchedule").ManagementSetIpsUpdateSchedule;
export const ManagementSetIpsUpdateSchedule: typeof import("./managementSetIpsUpdateSchedule").ManagementSetIpsUpdateSchedule = null as any;
utilities.lazyLoad(exports, ["ManagementSetIpsUpdateSchedule"], () => require("./managementSetIpsUpdateSchedule"));

export { ManagementSetLoginMessageArgs, ManagementSetLoginMessageState } from "./managementSetLoginMessage";
export type ManagementSetLoginMessage = import("./managementSetLoginMessage").ManagementSetLoginMessage;
export const ManagementSetLoginMessage: typeof import("./managementSetLoginMessage").ManagementSetLoginMessage = null as any;
utilities.lazyLoad(exports, ["ManagementSetLoginMessage"], () => require("./managementSetLoginMessage"));

export { ManagementSetThreatProtectionArgs, ManagementSetThreatProtectionState } from "./managementSetThreatProtection";
export type ManagementSetThreatProtection = import("./managementSetThreatProtection").ManagementSetThreatProtection;
export const ManagementSetThreatProtection: typeof import("./managementSetThreatProtection").ManagementSetThreatProtection = null as any;
utilities.lazyLoad(exports, ["ManagementSetThreatProtection"], () => require("./managementSetThreatProtection"));

export { ManagementSimpleClusterArgs, ManagementSimpleClusterState } from "./managementSimpleCluster";
export type ManagementSimpleCluster = import("./managementSimpleCluster").ManagementSimpleCluster;
export const ManagementSimpleCluster: typeof import("./managementSimpleCluster").ManagementSimpleCluster = null as any;
utilities.lazyLoad(exports, ["ManagementSimpleCluster"], () => require("./managementSimpleCluster"));

export { ManagementSimpleGatewayArgs, ManagementSimpleGatewayState } from "./managementSimpleGateway";
export type ManagementSimpleGateway = import("./managementSimpleGateway").ManagementSimpleGateway;
export const ManagementSimpleGateway: typeof import("./managementSimpleGateway").ManagementSimpleGateway = null as any;
utilities.lazyLoad(exports, ["ManagementSimpleGateway"], () => require("./managementSimpleGateway"));

export { ManagementSmartTaskArgs, ManagementSmartTaskState } from "./managementSmartTask";
export type ManagementSmartTask = import("./managementSmartTask").ManagementSmartTask;
export const ManagementSmartTask: typeof import("./managementSmartTask").ManagementSmartTask = null as any;
utilities.lazyLoad(exports, ["ManagementSmartTask"], () => require("./managementSmartTask"));

export { ManagementSmtpServerArgs, ManagementSmtpServerState } from "./managementSmtpServer";
export type ManagementSmtpServer = import("./managementSmtpServer").ManagementSmtpServer;
export const ManagementSmtpServer: typeof import("./managementSmtpServer").ManagementSmtpServer = null as any;
utilities.lazyLoad(exports, ["ManagementSmtpServer"], () => require("./managementSmtpServer"));

export { ManagementTacacsGroupArgs, ManagementTacacsGroupState } from "./managementTacacsGroup";
export type ManagementTacacsGroup = import("./managementTacacsGroup").ManagementTacacsGroup;
export const ManagementTacacsGroup: typeof import("./managementTacacsGroup").ManagementTacacsGroup = null as any;
utilities.lazyLoad(exports, ["ManagementTacacsGroup"], () => require("./managementTacacsGroup"));

export { ManagementTacacsServerArgs, ManagementTacacsServerState } from "./managementTacacsServer";
export type ManagementTacacsServer = import("./managementTacacsServer").ManagementTacacsServer;
export const ManagementTacacsServer: typeof import("./managementTacacsServer").ManagementTacacsServer = null as any;
utilities.lazyLoad(exports, ["ManagementTacacsServer"], () => require("./managementTacacsServer"));

export { ManagementTagArgs, ManagementTagState } from "./managementTag";
export type ManagementTag = import("./managementTag").ManagementTag;
export const ManagementTag: typeof import("./managementTag").ManagementTag = null as any;
utilities.lazyLoad(exports, ["ManagementTag"], () => require("./managementTag"));

export { ManagementTestSicStatusArgs, ManagementTestSicStatusState } from "./managementTestSicStatus";
export type ManagementTestSicStatus = import("./managementTestSicStatus").ManagementTestSicStatus;
export const ManagementTestSicStatus: typeof import("./managementTestSicStatus").ManagementTestSicStatus = null as any;
utilities.lazyLoad(exports, ["ManagementTestSicStatus"], () => require("./managementTestSicStatus"));

export { ManagementThreatExceptionArgs, ManagementThreatExceptionState } from "./managementThreatException";
export type ManagementThreatException = import("./managementThreatException").ManagementThreatException;
export const ManagementThreatException: typeof import("./managementThreatException").ManagementThreatException = null as any;
utilities.lazyLoad(exports, ["ManagementThreatException"], () => require("./managementThreatException"));

export { ManagementThreatIndicatorArgs, ManagementThreatIndicatorState } from "./managementThreatIndicator";
export type ManagementThreatIndicator = import("./managementThreatIndicator").ManagementThreatIndicator;
export const ManagementThreatIndicator: typeof import("./managementThreatIndicator").ManagementThreatIndicator = null as any;
utilities.lazyLoad(exports, ["ManagementThreatIndicator"], () => require("./managementThreatIndicator"));

export { ManagementThreatIocFeedArgs, ManagementThreatIocFeedState } from "./managementThreatIocFeed";
export type ManagementThreatIocFeed = import("./managementThreatIocFeed").ManagementThreatIocFeed;
export const ManagementThreatIocFeed: typeof import("./managementThreatIocFeed").ManagementThreatIocFeed = null as any;
utilities.lazyLoad(exports, ["ManagementThreatIocFeed"], () => require("./managementThreatIocFeed"));

export { ManagementThreatLayerArgs, ManagementThreatLayerState } from "./managementThreatLayer";
export type ManagementThreatLayer = import("./managementThreatLayer").ManagementThreatLayer;
export const ManagementThreatLayer: typeof import("./managementThreatLayer").ManagementThreatLayer = null as any;
utilities.lazyLoad(exports, ["ManagementThreatLayer"], () => require("./managementThreatLayer"));

export { ManagementThreatProfileArgs, ManagementThreatProfileState } from "./managementThreatProfile";
export type ManagementThreatProfile = import("./managementThreatProfile").ManagementThreatProfile;
export const ManagementThreatProfile: typeof import("./managementThreatProfile").ManagementThreatProfile = null as any;
utilities.lazyLoad(exports, ["ManagementThreatProfile"], () => require("./managementThreatProfile"));

export { ManagementThreatRuleArgs, ManagementThreatRuleState } from "./managementThreatRule";
export type ManagementThreatRule = import("./managementThreatRule").ManagementThreatRule;
export const ManagementThreatRule: typeof import("./managementThreatRule").ManagementThreatRule = null as any;
utilities.lazyLoad(exports, ["ManagementThreatRule"], () => require("./managementThreatRule"));

export { ManagementTimeArgs, ManagementTimeState } from "./managementTime";
export type ManagementTime = import("./managementTime").ManagementTime;
export const ManagementTime: typeof import("./managementTime").ManagementTime = null as any;
utilities.lazyLoad(exports, ["ManagementTime"], () => require("./managementTime"));

export { ManagementTimeGroupArgs, ManagementTimeGroupState } from "./managementTimeGroup";
export type ManagementTimeGroup = import("./managementTimeGroup").ManagementTimeGroup;
export const ManagementTimeGroup: typeof import("./managementTimeGroup").ManagementTimeGroup = null as any;
utilities.lazyLoad(exports, ["ManagementTimeGroup"], () => require("./managementTimeGroup"));

export { ManagementTrustedClientArgs, ManagementTrustedClientState } from "./managementTrustedClient";
export type ManagementTrustedClient = import("./managementTrustedClient").ManagementTrustedClient;
export const ManagementTrustedClient: typeof import("./managementTrustedClient").ManagementTrustedClient = null as any;
utilities.lazyLoad(exports, ["ManagementTrustedClient"], () => require("./managementTrustedClient"));

export { ManagementUninstallSoftwarePackageArgs, ManagementUninstallSoftwarePackageState } from "./managementUninstallSoftwarePackage";
export type ManagementUninstallSoftwarePackage = import("./managementUninstallSoftwarePackage").ManagementUninstallSoftwarePackage;
export const ManagementUninstallSoftwarePackage: typeof import("./managementUninstallSoftwarePackage").ManagementUninstallSoftwarePackage = null as any;
utilities.lazyLoad(exports, ["ManagementUninstallSoftwarePackage"], () => require("./managementUninstallSoftwarePackage"));

export { ManagementUnlockAdministratorArgs, ManagementUnlockAdministratorState } from "./managementUnlockAdministrator";
export type ManagementUnlockAdministrator = import("./managementUnlockAdministrator").ManagementUnlockAdministrator;
export const ManagementUnlockAdministrator: typeof import("./managementUnlockAdministrator").ManagementUnlockAdministrator = null as any;
utilities.lazyLoad(exports, ["ManagementUnlockAdministrator"], () => require("./managementUnlockAdministrator"));

export { ManagementUpdateProvisionedSatellitesArgs, ManagementUpdateProvisionedSatellitesState } from "./managementUpdateProvisionedSatellites";
export type ManagementUpdateProvisionedSatellites = import("./managementUpdateProvisionedSatellites").ManagementUpdateProvisionedSatellites;
export const ManagementUpdateProvisionedSatellites: typeof import("./managementUpdateProvisionedSatellites").ManagementUpdateProvisionedSatellites = null as any;
utilities.lazyLoad(exports, ["ManagementUpdateProvisionedSatellites"], () => require("./managementUpdateProvisionedSatellites"));

export { ManagementUpdateUpdatableObjectsRepositoryContentArgs, ManagementUpdateUpdatableObjectsRepositoryContentState } from "./managementUpdateUpdatableObjectsRepositoryContent";
export type ManagementUpdateUpdatableObjectsRepositoryContent = import("./managementUpdateUpdatableObjectsRepositoryContent").ManagementUpdateUpdatableObjectsRepositoryContent;
export const ManagementUpdateUpdatableObjectsRepositoryContent: typeof import("./managementUpdateUpdatableObjectsRepositoryContent").ManagementUpdateUpdatableObjectsRepositoryContent = null as any;
utilities.lazyLoad(exports, ["ManagementUpdateUpdatableObjectsRepositoryContent"], () => require("./managementUpdateUpdatableObjectsRepositoryContent"));

export { ManagementUserArgs, ManagementUserState } from "./managementUser";
export type ManagementUser = import("./managementUser").ManagementUser;
export const ManagementUser: typeof import("./managementUser").ManagementUser = null as any;
utilities.lazyLoad(exports, ["ManagementUser"], () => require("./managementUser"));

export { ManagementUserGroupArgs, ManagementUserGroupState } from "./managementUserGroup";
export type ManagementUserGroup = import("./managementUserGroup").ManagementUserGroup;
export const ManagementUserGroup: typeof import("./managementUserGroup").ManagementUserGroup = null as any;
utilities.lazyLoad(exports, ["ManagementUserGroup"], () => require("./managementUserGroup"));

export { ManagementUserTemplateArgs, ManagementUserTemplateState } from "./managementUserTemplate";
export type ManagementUserTemplate = import("./managementUserTemplate").ManagementUserTemplate;
export const ManagementUserTemplate: typeof import("./managementUserTemplate").ManagementUserTemplate = null as any;
utilities.lazyLoad(exports, ["ManagementUserTemplate"], () => require("./managementUserTemplate"));

export { ManagementVerifyPolicyArgs, ManagementVerifyPolicyState } from "./managementVerifyPolicy";
export type ManagementVerifyPolicy = import("./managementVerifyPolicy").ManagementVerifyPolicy;
export const ManagementVerifyPolicy: typeof import("./managementVerifyPolicy").ManagementVerifyPolicy = null as any;
utilities.lazyLoad(exports, ["ManagementVerifyPolicy"], () => require("./managementVerifyPolicy"));

export { ManagementVerifyRevertArgs, ManagementVerifyRevertState } from "./managementVerifyRevert";
export type ManagementVerifyRevert = import("./managementVerifyRevert").ManagementVerifyRevert;
export const ManagementVerifyRevert: typeof import("./managementVerifyRevert").ManagementVerifyRevert = null as any;
utilities.lazyLoad(exports, ["ManagementVerifyRevert"], () => require("./managementVerifyRevert"));

export { ManagementVerifySoftwarePackageArgs, ManagementVerifySoftwarePackageState } from "./managementVerifySoftwarePackage";
export type ManagementVerifySoftwarePackage = import("./managementVerifySoftwarePackage").ManagementVerifySoftwarePackage;
export const ManagementVerifySoftwarePackage: typeof import("./managementVerifySoftwarePackage").ManagementVerifySoftwarePackage = null as any;
utilities.lazyLoad(exports, ["ManagementVerifySoftwarePackage"], () => require("./managementVerifySoftwarePackage"));

export { ManagementVmwareDataCenterServerArgs, ManagementVmwareDataCenterServerState } from "./managementVmwareDataCenterServer";
export type ManagementVmwareDataCenterServer = import("./managementVmwareDataCenterServer").ManagementVmwareDataCenterServer;
export const ManagementVmwareDataCenterServer: typeof import("./managementVmwareDataCenterServer").ManagementVmwareDataCenterServer = null as any;
utilities.lazyLoad(exports, ["ManagementVmwareDataCenterServer"], () => require("./managementVmwareDataCenterServer"));

export { ManagementVpnCommunityMeshedArgs, ManagementVpnCommunityMeshedState } from "./managementVpnCommunityMeshed";
export type ManagementVpnCommunityMeshed = import("./managementVpnCommunityMeshed").ManagementVpnCommunityMeshed;
export const ManagementVpnCommunityMeshed: typeof import("./managementVpnCommunityMeshed").ManagementVpnCommunityMeshed = null as any;
utilities.lazyLoad(exports, ["ManagementVpnCommunityMeshed"], () => require("./managementVpnCommunityMeshed"));

export { ManagementVpnCommunityRemoteAccessArgs, ManagementVpnCommunityRemoteAccessState } from "./managementVpnCommunityRemoteAccess";
export type ManagementVpnCommunityRemoteAccess = import("./managementVpnCommunityRemoteAccess").ManagementVpnCommunityRemoteAccess;
export const ManagementVpnCommunityRemoteAccess: typeof import("./managementVpnCommunityRemoteAccess").ManagementVpnCommunityRemoteAccess = null as any;
utilities.lazyLoad(exports, ["ManagementVpnCommunityRemoteAccess"], () => require("./managementVpnCommunityRemoteAccess"));

export { ManagementVpnCommunityStarArgs, ManagementVpnCommunityStarState } from "./managementVpnCommunityStar";
export type ManagementVpnCommunityStar = import("./managementVpnCommunityStar").ManagementVpnCommunityStar;
export const ManagementVpnCommunityStar: typeof import("./managementVpnCommunityStar").ManagementVpnCommunityStar = null as any;
utilities.lazyLoad(exports, ["ManagementVpnCommunityStar"], () => require("./managementVpnCommunityStar"));

export { ManagementWhereUsedArgs, ManagementWhereUsedState } from "./managementWhereUsed";
export type ManagementWhereUsed = import("./managementWhereUsed").ManagementWhereUsed;
export const ManagementWhereUsed: typeof import("./managementWhereUsed").ManagementWhereUsed = null as any;
utilities.lazyLoad(exports, ["ManagementWhereUsed"], () => require("./managementWhereUsed"));

export { ManagementWildcardArgs, ManagementWildcardState } from "./managementWildcard";
export type ManagementWildcard = import("./managementWildcard").ManagementWildcard;
export const ManagementWildcard: typeof import("./managementWildcard").ManagementWildcard = null as any;
utilities.lazyLoad(exports, ["ManagementWildcard"], () => require("./managementWildcard"));

export { PhysicalInterfaceArgs, PhysicalInterfaceState } from "./physicalInterface";
export type PhysicalInterface = import("./physicalInterface").PhysicalInterface;
export const PhysicalInterface: typeof import("./physicalInterface").PhysicalInterface = null as any;
utilities.lazyLoad(exports, ["PhysicalInterface"], () => require("./physicalInterface"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { PutFileArgs, PutFileState } from "./putFile";
export type PutFile = import("./putFile").PutFile;
export const PutFile: typeof import("./putFile").PutFile = null as any;
utilities.lazyLoad(exports, ["PutFile"], () => require("./putFile"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "checkpoint:index/hostname:Hostname":
                return new Hostname(name, <any>undefined, { urn })
            case "checkpoint:index/managementAccessLayer:ManagementAccessLayer":
                return new ManagementAccessLayer(name, <any>undefined, { urn })
            case "checkpoint:index/managementAccessPointName:ManagementAccessPointName":
                return new ManagementAccessPointName(name, <any>undefined, { urn })
            case "checkpoint:index/managementAccessRole:ManagementAccessRole":
                return new ManagementAccessRole(name, <any>undefined, { urn })
            case "checkpoint:index/managementAccessRule:ManagementAccessRule":
                return new ManagementAccessRule(name, <any>undefined, { urn })
            case "checkpoint:index/managementAccessSection:ManagementAccessSection":
                return new ManagementAccessSection(name, <any>undefined, { urn })
            case "checkpoint:index/managementAciDataCenterServer:ManagementAciDataCenterServer":
                return new ManagementAciDataCenterServer(name, <any>undefined, { urn })
            case "checkpoint:index/managementAddApiKey:ManagementAddApiKey":
                return new ManagementAddApiKey(name, <any>undefined, { urn })
            case "checkpoint:index/managementAddDataCenterObject:ManagementAddDataCenterObject":
                return new ManagementAddDataCenterObject(name, <any>undefined, { urn })
            case "checkpoint:index/managementAddRepositoryPackage:ManagementAddRepositoryPackage":
                return new ManagementAddRepositoryPackage(name, <any>undefined, { urn })
            case "checkpoint:index/managementAddThreatProtections:ManagementAddThreatProtections":
                return new ManagementAddThreatProtections(name, <any>undefined, { urn })
            case "checkpoint:index/managementAddUpdatableObject:ManagementAddUpdatableObject":
                return new ManagementAddUpdatableObject(name, <any>undefined, { urn })
            case "checkpoint:index/managementAddressRange:ManagementAddressRange":
                return new ManagementAddressRange(name, <any>undefined, { urn })
            case "checkpoint:index/managementAdministrator:ManagementAdministrator":
                return new ManagementAdministrator(name, <any>undefined, { urn })
            case "checkpoint:index/managementApplicationSite:ManagementApplicationSite":
                return new ManagementApplicationSite(name, <any>undefined, { urn })
            case "checkpoint:index/managementApplicationSiteCategory:ManagementApplicationSiteCategory":
                return new ManagementApplicationSiteCategory(name, <any>undefined, { urn })
            case "checkpoint:index/managementApplicationSiteGroup:ManagementApplicationSiteGroup":
                return new ManagementApplicationSiteGroup(name, <any>undefined, { urn })
            case "checkpoint:index/managementAssignGlobalAssignment:ManagementAssignGlobalAssignment":
                return new ManagementAssignGlobalAssignment(name, <any>undefined, { urn })
            case "checkpoint:index/managementAwsDataCenterServer:ManagementAwsDataCenterServer":
                return new ManagementAwsDataCenterServer(name, <any>undefined, { urn })
            case "checkpoint:index/managementAzureAd:ManagementAzureAd":
                return new ManagementAzureAd(name, <any>undefined, { urn })
            case "checkpoint:index/managementAzureDataCenterServer:ManagementAzureDataCenterServer":
                return new ManagementAzureDataCenterServer(name, <any>undefined, { urn })
            case "checkpoint:index/managementBackupDomain:ManagementBackupDomain":
                return new ManagementBackupDomain(name, <any>undefined, { urn })
            case "checkpoint:index/managementCheckNetworkFeed:ManagementCheckNetworkFeed":
                return new ManagementCheckNetworkFeed(name, <any>undefined, { urn })
            case "checkpoint:index/managementCheckThreatIocFeed:ManagementCheckThreatIocFeed":
                return new ManagementCheckThreatIocFeed(name, <any>undefined, { urn })
            case "checkpoint:index/managementCheckpointHost:ManagementCheckpointHost":
                return new ManagementCheckpointHost(name, <any>undefined, { urn })
            case "checkpoint:index/managementCmeAccountsAws:ManagementCmeAccountsAws":
                return new ManagementCmeAccountsAws(name, <any>undefined, { urn })
            case "checkpoint:index/managementCmeAccountsAzure:ManagementCmeAccountsAzure":
                return new ManagementCmeAccountsAzure(name, <any>undefined, { urn })
            case "checkpoint:index/managementCmeAccountsGcp:ManagementCmeAccountsGcp":
                return new ManagementCmeAccountsGcp(name, <any>undefined, { urn })
            case "checkpoint:index/managementCmeDelayCycle:ManagementCmeDelayCycle":
                return new ManagementCmeDelayCycle(name, <any>undefined, { urn })
            case "checkpoint:index/managementCmeGwConfigurationsAws:ManagementCmeGwConfigurationsAws":
                return new ManagementCmeGwConfigurationsAws(name, <any>undefined, { urn })
            case "checkpoint:index/managementCmeGwConfigurationsAzure:ManagementCmeGwConfigurationsAzure":
                return new ManagementCmeGwConfigurationsAzure(name, <any>undefined, { urn })
            case "checkpoint:index/managementCmeGwConfigurationsGcp:ManagementCmeGwConfigurationsGcp":
                return new ManagementCmeGwConfigurationsGcp(name, <any>undefined, { urn })
            case "checkpoint:index/managementCmeManagement:ManagementCmeManagement":
                return new ManagementCmeManagement(name, <any>undefined, { urn })
            case "checkpoint:index/managementCommandAbortGetInterfaces:ManagementCommandAbortGetInterfaces":
                return new ManagementCommandAbortGetInterfaces(name, <any>undefined, { urn })
            case "checkpoint:index/managementCommandExportManagement:ManagementCommandExportManagement":
                return new ManagementCommandExportManagement(name, <any>undefined, { urn })
            case "checkpoint:index/managementCommandExportSmartTask:ManagementCommandExportSmartTask":
                return new ManagementCommandExportSmartTask(name, <any>undefined, { urn })
            case "checkpoint:index/managementCommandGaiaApi:ManagementCommandGaiaApi":
                return new ManagementCommandGaiaApi(name, <any>undefined, { urn })
            case "checkpoint:index/managementCommandGetInterfaces:ManagementCommandGetInterfaces":
                return new ManagementCommandGetInterfaces(name, <any>undefined, { urn })
            case "checkpoint:index/managementCommandImportManagement:ManagementCommandImportManagement":
                return new ManagementCommandImportManagement(name, <any>undefined, { urn })
            case "checkpoint:index/managementCommandImportSmartTask:ManagementCommandImportSmartTask":
                return new ManagementCommandImportSmartTask(name, <any>undefined, { urn })
            case "checkpoint:index/managementCommandLockObject:ManagementCommandLockObject":
                return new ManagementCommandLockObject(name, <any>undefined, { urn })
            case "checkpoint:index/managementCommandLoginToDomain:ManagementCommandLoginToDomain":
                return new ManagementCommandLoginToDomain(name, <any>undefined, { urn })
            case "checkpoint:index/managementCommandSetGlobalProperties:ManagementCommandSetGlobalProperties":
                return new ManagementCommandSetGlobalProperties(name, <any>undefined, { urn })
            case "checkpoint:index/managementCommandSetPolicySettings:ManagementCommandSetPolicySettings":
                return new ManagementCommandSetPolicySettings(name, <any>undefined, { urn })
            case "checkpoint:index/managementCommandSetThreatAdvancedSettings:ManagementCommandSetThreatAdvancedSettings":
                return new ManagementCommandSetThreatAdvancedSettings(name, <any>undefined, { urn })
            case "checkpoint:index/managementCommandUnlockObject:ManagementCommandUnlockObject":
                return new ManagementCommandUnlockObject(name, <any>undefined, { urn })
            case "checkpoint:index/managementConnectCloudServices:ManagementConnectCloudServices":
                return new ManagementConnectCloudServices(name, <any>undefined, { urn })
            case "checkpoint:index/managementDataCenterObject:ManagementDataCenterObject":
                return new ManagementDataCenterObject(name, <any>undefined, { urn })
            case "checkpoint:index/managementDataCenterQuery:ManagementDataCenterQuery":
                return new ManagementDataCenterQuery(name, <any>undefined, { urn })
            case "checkpoint:index/managementDeleteApiKey:ManagementDeleteApiKey":
                return new ManagementDeleteApiKey(name, <any>undefined, { urn })
            case "checkpoint:index/managementDeleteDataCenterObject:ManagementDeleteDataCenterObject":
                return new ManagementDeleteDataCenterObject(name, <any>undefined, { urn })
            case "checkpoint:index/managementDeleteRepositoryPackage:ManagementDeleteRepositoryPackage":
                return new ManagementDeleteRepositoryPackage(name, <any>undefined, { urn })
            case "checkpoint:index/managementDeleteThreatProtections:ManagementDeleteThreatProtections":
                return new ManagementDeleteThreatProtections(name, <any>undefined, { urn })
            case "checkpoint:index/managementDeleteUpdatableObject:ManagementDeleteUpdatableObject":
                return new ManagementDeleteUpdatableObject(name, <any>undefined, { urn })
            case "checkpoint:index/managementDiscard:ManagementDiscard":
                return new ManagementDiscard(name, <any>undefined, { urn })
            case "checkpoint:index/managementDisconnect:ManagementDisconnect":
                return new ManagementDisconnect(name, <any>undefined, { urn })
            case "checkpoint:index/managementDisconnectCloudServices:ManagementDisconnectCloudServices":
                return new ManagementDisconnectCloudServices(name, <any>undefined, { urn })
            case "checkpoint:index/managementDnsDomain:ManagementDnsDomain":
                return new ManagementDnsDomain(name, <any>undefined, { urn })
            case "checkpoint:index/managementDomain:ManagementDomain":
                return new ManagementDomain(name, <any>undefined, { urn })
            case "checkpoint:index/managementDomainPermissionsProfile:ManagementDomainPermissionsProfile":
                return new ManagementDomainPermissionsProfile(name, <any>undefined, { urn })
            case "checkpoint:index/managementDynamicGlobalNetworkObject:ManagementDynamicGlobalNetworkObject":
                return new ManagementDynamicGlobalNetworkObject(name, <any>undefined, { urn })
            case "checkpoint:index/managementDynamicObject:ManagementDynamicObject":
                return new ManagementDynamicObject(name, <any>undefined, { urn })
            case "checkpoint:index/managementExceptionGroup:ManagementExceptionGroup":
                return new ManagementExceptionGroup(name, <any>undefined, { urn })
            case "checkpoint:index/managementExport:ManagementExport":
                return new ManagementExport(name, <any>undefined, { urn })
            case "checkpoint:index/managementGaiaBestPractice:ManagementGaiaBestPractice":
                return new ManagementGaiaBestPractice(name, <any>undefined, { urn })
            case "checkpoint:index/managementGcpDataCenterServer:ManagementGcpDataCenterServer":
                return new ManagementGcpDataCenterServer(name, <any>undefined, { urn })
            case "checkpoint:index/managementGenericDataCenterServer:ManagementGenericDataCenterServer":
                return new ManagementGenericDataCenterServer(name, <any>undefined, { urn })
            case "checkpoint:index/managementGetAttachment:ManagementGetAttachment":
                return new ManagementGetAttachment(name, <any>undefined, { urn })
            case "checkpoint:index/managementGetPlatform:ManagementGetPlatform":
                return new ManagementGetPlatform(name, <any>undefined, { urn })
            case "checkpoint:index/managementGlobalAssignment:ManagementGlobalAssignment":
                return new ManagementGlobalAssignment(name, <any>undefined, { urn })
            case "checkpoint:index/managementGroup:ManagementGroup":
                return new ManagementGroup(name, <any>undefined, { urn })
            case "checkpoint:index/managementGroupWithExclusion:ManagementGroupWithExclusion":
                return new ManagementGroupWithExclusion(name, <any>undefined, { urn })
            case "checkpoint:index/managementGsnHandoverGroup:ManagementGsnHandoverGroup":
                return new ManagementGsnHandoverGroup(name, <any>undefined, { urn })
            case "checkpoint:index/managementHaFullSync:ManagementHaFullSync":
                return new ManagementHaFullSync(name, <any>undefined, { urn })
            case "checkpoint:index/managementHost:ManagementHost":
                return new ManagementHost(name, <any>undefined, { urn })
            case "checkpoint:index/managementHttpsLayer:ManagementHttpsLayer":
                return new ManagementHttpsLayer(name, <any>undefined, { urn })
            case "checkpoint:index/managementHttpsRule:ManagementHttpsRule":
                return new ManagementHttpsRule(name, <any>undefined, { urn })
            case "checkpoint:index/managementHttpsSection:ManagementHttpsSection":
                return new ManagementHttpsSection(name, <any>undefined, { urn })
            case "checkpoint:index/managementIdentityTag:ManagementIdentityTag":
                return new ManagementIdentityTag(name, <any>undefined, { urn })
            case "checkpoint:index/managementIdpAdministratorGroup:ManagementIdpAdministratorGroup":
                return new ManagementIdpAdministratorGroup(name, <any>undefined, { urn })
            case "checkpoint:index/managementInstallDatabase:ManagementInstallDatabase":
                return new ManagementInstallDatabase(name, <any>undefined, { urn })
            case "checkpoint:index/managementInstallLsmPolicy:ManagementInstallLsmPolicy":
                return new ManagementInstallLsmPolicy(name, <any>undefined, { urn })
            case "checkpoint:index/managementInstallLsmSettings:ManagementInstallLsmSettings":
                return new ManagementInstallLsmSettings(name, <any>undefined, { urn })
            case "checkpoint:index/managementInstallPolicy:ManagementInstallPolicy":
                return new ManagementInstallPolicy(name, <any>undefined, { urn })
            case "checkpoint:index/managementInstallSoftwarePackage:ManagementInstallSoftwarePackage":
                return new ManagementInstallSoftwarePackage(name, <any>undefined, { urn })
            case "checkpoint:index/managementInteroperableDevice:ManagementInteroperableDevice":
                return new ManagementInteroperableDevice(name, <any>undefined, { urn })
            case "checkpoint:index/managementIseDataCenterServer:ManagementIseDataCenterServer":
                return new ManagementIseDataCenterServer(name, <any>undefined, { urn })
            case "checkpoint:index/managementKeepalive:ManagementKeepalive":
                return new ManagementKeepalive(name, <any>undefined, { urn })
            case "checkpoint:index/managementKubernetesDataCenterServer:ManagementKubernetesDataCenterServer":
                return new ManagementKubernetesDataCenterServer(name, <any>undefined, { urn })
            case "checkpoint:index/managementLogin:ManagementLogin":
                return new ManagementLogin(name, <any>undefined, { urn })
            case "checkpoint:index/managementLogout:ManagementLogout":
                return new ManagementLogout(name, <any>undefined, { urn })
            case "checkpoint:index/managementLsmCluster:ManagementLsmCluster":
                return new ManagementLsmCluster(name, <any>undefined, { urn })
            case "checkpoint:index/managementLsmGateway:ManagementLsmGateway":
                return new ManagementLsmGateway(name, <any>undefined, { urn })
            case "checkpoint:index/managementLsmRunScript:ManagementLsmRunScript":
                return new ManagementLsmRunScript(name, <any>undefined, { urn })
            case "checkpoint:index/managementLsvProfile:ManagementLsvProfile":
                return new ManagementLsvProfile(name, <any>undefined, { urn })
            case "checkpoint:index/managementMdPermissionsProfile:ManagementMdPermissionsProfile":
                return new ManagementMdPermissionsProfile(name, <any>undefined, { urn })
            case "checkpoint:index/managementMds:ManagementMds":
                return new ManagementMds(name, <any>undefined, { urn })
            case "checkpoint:index/managementMigrateExportDomain:ManagementMigrateExportDomain":
                return new ManagementMigrateExportDomain(name, <any>undefined, { urn })
            case "checkpoint:index/managementMigrateImportDomain:ManagementMigrateImportDomain":
                return new ManagementMigrateImportDomain(name, <any>undefined, { urn })
            case "checkpoint:index/managementMulticastAddressRange:ManagementMulticastAddressRange":
                return new ManagementMulticastAddressRange(name, <any>undefined, { urn })
            case "checkpoint:index/managementNatRule:ManagementNatRule":
                return new ManagementNatRule(name, <any>undefined, { urn })
            case "checkpoint:index/managementNatSection:ManagementNatSection":
                return new ManagementNatSection(name, <any>undefined, { urn })
            case "checkpoint:index/managementNetwork:ManagementNetwork":
                return new ManagementNetwork(name, <any>undefined, { urn })
            case "checkpoint:index/managementNetworkFeed:ManagementNetworkFeed":
                return new ManagementNetworkFeed(name, <any>undefined, { urn })
            case "checkpoint:index/managementNuageDataCenterServer:ManagementNuageDataCenterServer":
                return new ManagementNuageDataCenterServer(name, <any>undefined, { urn })
            case "checkpoint:index/managementNutanixDataCenterServer:ManagementNutanixDataCenterServer":
                return new ManagementNutanixDataCenterServer(name, <any>undefined, { urn })
            case "checkpoint:index/managementOpenstackDataCenterServer:ManagementOpenstackDataCenterServer":
                return new ManagementOpenstackDataCenterServer(name, <any>undefined, { urn })
            case "checkpoint:index/managementOpsecApplication:ManagementOpsecApplication":
                return new ManagementOpsecApplication(name, <any>undefined, { urn })
            case "checkpoint:index/managementOracleCloudDataCenterServer:ManagementOracleCloudDataCenterServer":
                return new ManagementOracleCloudDataCenterServer(name, <any>undefined, { urn })
            case "checkpoint:index/managementPackage:ManagementPackage":
                return new ManagementPackage(name, <any>undefined, { urn })
            case "checkpoint:index/managementPublish:ManagementPublish":
                return new ManagementPublish(name, <any>undefined, { urn })
            case "checkpoint:index/managementPutFile:ManagementPutFile":
                return new ManagementPutFile(name, <any>undefined, { urn })
            case "checkpoint:index/managementRadiusGroup:ManagementRadiusGroup":
                return new ManagementRadiusGroup(name, <any>undefined, { urn })
            case "checkpoint:index/managementRadiusServer:ManagementRadiusServer":
                return new ManagementRadiusServer(name, <any>undefined, { urn })
            case "checkpoint:index/managementRepositoryScript:ManagementRepositoryScript":
                return new ManagementRepositoryScript(name, <any>undefined, { urn })
            case "checkpoint:index/managementResetSic:ManagementResetSic":
                return new ManagementResetSic(name, <any>undefined, { urn })
            case "checkpoint:index/managementRestoreDomain:ManagementRestoreDomain":
                return new ManagementRestoreDomain(name, <any>undefined, { urn })
            case "checkpoint:index/managementRevertToRevision:ManagementRevertToRevision":
                return new ManagementRevertToRevision(name, <any>undefined, { urn })
            case "checkpoint:index/managementRunIpsUpdate:ManagementRunIpsUpdate":
                return new ManagementRunIpsUpdate(name, <any>undefined, { urn })
            case "checkpoint:index/managementRunScript:ManagementRunScript":
                return new ManagementRunScript(name, <any>undefined, { urn })
            case "checkpoint:index/managementRunThreatEmulationFileTypesOfflineUpdate:ManagementRunThreatEmulationFileTypesOfflineUpdate":
                return new ManagementRunThreatEmulationFileTypesOfflineUpdate(name, <any>undefined, { urn })
            case "checkpoint:index/managementSecurityZone:ManagementSecurityZone":
                return new ManagementSecurityZone(name, <any>undefined, { urn })
            case "checkpoint:index/managementServerCertificate:ManagementServerCertificate":
                return new ManagementServerCertificate(name, <any>undefined, { urn })
            case "checkpoint:index/managementServiceCitrixTcp:ManagementServiceCitrixTcp":
                return new ManagementServiceCitrixTcp(name, <any>undefined, { urn })
            case "checkpoint:index/managementServiceCompoundTcp:ManagementServiceCompoundTcp":
                return new ManagementServiceCompoundTcp(name, <any>undefined, { urn })
            case "checkpoint:index/managementServiceDceRpc:ManagementServiceDceRpc":
                return new ManagementServiceDceRpc(name, <any>undefined, { urn })
            case "checkpoint:index/managementServiceGroup:ManagementServiceGroup":
                return new ManagementServiceGroup(name, <any>undefined, { urn })
            case "checkpoint:index/managementServiceGtp:ManagementServiceGtp":
                return new ManagementServiceGtp(name, <any>undefined, { urn })
            case "checkpoint:index/managementServiceIcmp6:ManagementServiceIcmp6":
                return new ManagementServiceIcmp6(name, <any>undefined, { urn })
            case "checkpoint:index/managementServiceIcmp:ManagementServiceIcmp":
                return new ManagementServiceIcmp(name, <any>undefined, { urn })
            case "checkpoint:index/managementServiceOther:ManagementServiceOther":
                return new ManagementServiceOther(name, <any>undefined, { urn })
            case "checkpoint:index/managementServiceRpc:ManagementServiceRpc":
                return new ManagementServiceRpc(name, <any>undefined, { urn })
            case "checkpoint:index/managementServiceSctp:ManagementServiceSctp":
                return new ManagementServiceSctp(name, <any>undefined, { urn })
            case "checkpoint:index/managementServiceTcp:ManagementServiceTcp":
                return new ManagementServiceTcp(name, <any>undefined, { urn })
            case "checkpoint:index/managementServiceUdp:ManagementServiceUdp":
                return new ManagementServiceUdp(name, <any>undefined, { urn })
            case "checkpoint:index/managementSetApiSettings:ManagementSetApiSettings":
                return new ManagementSetApiSettings(name, <any>undefined, { urn })
            case "checkpoint:index/managementSetAutomaticPurge:ManagementSetAutomaticPurge":
                return new ManagementSetAutomaticPurge(name, <any>undefined, { urn })
            case "checkpoint:index/managementSetGlobalDomain:ManagementSetGlobalDomain":
                return new ManagementSetGlobalDomain(name, <any>undefined, { urn })
            case "checkpoint:index/managementSetHaState:ManagementSetHaState":
                return new ManagementSetHaState(name, <any>undefined, { urn })
            case "checkpoint:index/managementSetIdpDefaultAssignment:ManagementSetIdpDefaultAssignment":
                return new ManagementSetIdpDefaultAssignment(name, <any>undefined, { urn })
            case "checkpoint:index/managementSetIdpToDomainAssignment:ManagementSetIdpToDomainAssignment":
                return new ManagementSetIdpToDomainAssignment(name, <any>undefined, { urn })
            case "checkpoint:index/managementSetIpsUpdateSchedule:ManagementSetIpsUpdateSchedule":
                return new ManagementSetIpsUpdateSchedule(name, <any>undefined, { urn })
            case "checkpoint:index/managementSetLoginMessage:ManagementSetLoginMessage":
                return new ManagementSetLoginMessage(name, <any>undefined, { urn })
            case "checkpoint:index/managementSetThreatProtection:ManagementSetThreatProtection":
                return new ManagementSetThreatProtection(name, <any>undefined, { urn })
            case "checkpoint:index/managementSimpleCluster:ManagementSimpleCluster":
                return new ManagementSimpleCluster(name, <any>undefined, { urn })
            case "checkpoint:index/managementSimpleGateway:ManagementSimpleGateway":
                return new ManagementSimpleGateway(name, <any>undefined, { urn })
            case "checkpoint:index/managementSmartTask:ManagementSmartTask":
                return new ManagementSmartTask(name, <any>undefined, { urn })
            case "checkpoint:index/managementSmtpServer:ManagementSmtpServer":
                return new ManagementSmtpServer(name, <any>undefined, { urn })
            case "checkpoint:index/managementTacacsGroup:ManagementTacacsGroup":
                return new ManagementTacacsGroup(name, <any>undefined, { urn })
            case "checkpoint:index/managementTacacsServer:ManagementTacacsServer":
                return new ManagementTacacsServer(name, <any>undefined, { urn })
            case "checkpoint:index/managementTag:ManagementTag":
                return new ManagementTag(name, <any>undefined, { urn })
            case "checkpoint:index/managementTestSicStatus:ManagementTestSicStatus":
                return new ManagementTestSicStatus(name, <any>undefined, { urn })
            case "checkpoint:index/managementThreatException:ManagementThreatException":
                return new ManagementThreatException(name, <any>undefined, { urn })
            case "checkpoint:index/managementThreatIndicator:ManagementThreatIndicator":
                return new ManagementThreatIndicator(name, <any>undefined, { urn })
            case "checkpoint:index/managementThreatIocFeed:ManagementThreatIocFeed":
                return new ManagementThreatIocFeed(name, <any>undefined, { urn })
            case "checkpoint:index/managementThreatLayer:ManagementThreatLayer":
                return new ManagementThreatLayer(name, <any>undefined, { urn })
            case "checkpoint:index/managementThreatProfile:ManagementThreatProfile":
                return new ManagementThreatProfile(name, <any>undefined, { urn })
            case "checkpoint:index/managementThreatRule:ManagementThreatRule":
                return new ManagementThreatRule(name, <any>undefined, { urn })
            case "checkpoint:index/managementTime:ManagementTime":
                return new ManagementTime(name, <any>undefined, { urn })
            case "checkpoint:index/managementTimeGroup:ManagementTimeGroup":
                return new ManagementTimeGroup(name, <any>undefined, { urn })
            case "checkpoint:index/managementTrustedClient:ManagementTrustedClient":
                return new ManagementTrustedClient(name, <any>undefined, { urn })
            case "checkpoint:index/managementUninstallSoftwarePackage:ManagementUninstallSoftwarePackage":
                return new ManagementUninstallSoftwarePackage(name, <any>undefined, { urn })
            case "checkpoint:index/managementUnlockAdministrator:ManagementUnlockAdministrator":
                return new ManagementUnlockAdministrator(name, <any>undefined, { urn })
            case "checkpoint:index/managementUpdateProvisionedSatellites:ManagementUpdateProvisionedSatellites":
                return new ManagementUpdateProvisionedSatellites(name, <any>undefined, { urn })
            case "checkpoint:index/managementUpdateUpdatableObjectsRepositoryContent:ManagementUpdateUpdatableObjectsRepositoryContent":
                return new ManagementUpdateUpdatableObjectsRepositoryContent(name, <any>undefined, { urn })
            case "checkpoint:index/managementUser:ManagementUser":
                return new ManagementUser(name, <any>undefined, { urn })
            case "checkpoint:index/managementUserGroup:ManagementUserGroup":
                return new ManagementUserGroup(name, <any>undefined, { urn })
            case "checkpoint:index/managementUserTemplate:ManagementUserTemplate":
                return new ManagementUserTemplate(name, <any>undefined, { urn })
            case "checkpoint:index/managementVerifyPolicy:ManagementVerifyPolicy":
                return new ManagementVerifyPolicy(name, <any>undefined, { urn })
            case "checkpoint:index/managementVerifyRevert:ManagementVerifyRevert":
                return new ManagementVerifyRevert(name, <any>undefined, { urn })
            case "checkpoint:index/managementVerifySoftwarePackage:ManagementVerifySoftwarePackage":
                return new ManagementVerifySoftwarePackage(name, <any>undefined, { urn })
            case "checkpoint:index/managementVmwareDataCenterServer:ManagementVmwareDataCenterServer":
                return new ManagementVmwareDataCenterServer(name, <any>undefined, { urn })
            case "checkpoint:index/managementVpnCommunityMeshed:ManagementVpnCommunityMeshed":
                return new ManagementVpnCommunityMeshed(name, <any>undefined, { urn })
            case "checkpoint:index/managementVpnCommunityRemoteAccess:ManagementVpnCommunityRemoteAccess":
                return new ManagementVpnCommunityRemoteAccess(name, <any>undefined, { urn })
            case "checkpoint:index/managementVpnCommunityStar:ManagementVpnCommunityStar":
                return new ManagementVpnCommunityStar(name, <any>undefined, { urn })
            case "checkpoint:index/managementWhereUsed:ManagementWhereUsed":
                return new ManagementWhereUsed(name, <any>undefined, { urn })
            case "checkpoint:index/managementWildcard:ManagementWildcard":
                return new ManagementWildcard(name, <any>undefined, { urn })
            case "checkpoint:index/physicalInterface:PhysicalInterface":
                return new PhysicalInterface(name, <any>undefined, { urn })
            case "checkpoint:index/putFile:PutFile":
                return new PutFile(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("checkpoint", "index/hostname", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementAccessLayer", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementAccessPointName", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementAccessRole", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementAccessRule", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementAccessSection", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementAciDataCenterServer", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementAddApiKey", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementAddDataCenterObject", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementAddRepositoryPackage", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementAddThreatProtections", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementAddUpdatableObject", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementAddressRange", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementAdministrator", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementApplicationSite", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementApplicationSiteCategory", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementApplicationSiteGroup", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementAssignGlobalAssignment", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementAwsDataCenterServer", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementAzureAd", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementAzureDataCenterServer", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementBackupDomain", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementCheckNetworkFeed", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementCheckThreatIocFeed", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementCheckpointHost", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementCmeAccountsAws", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementCmeAccountsAzure", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementCmeAccountsGcp", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementCmeDelayCycle", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementCmeGwConfigurationsAws", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementCmeGwConfigurationsAzure", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementCmeGwConfigurationsGcp", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementCmeManagement", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementCommandAbortGetInterfaces", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementCommandExportManagement", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementCommandExportSmartTask", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementCommandGaiaApi", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementCommandGetInterfaces", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementCommandImportManagement", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementCommandImportSmartTask", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementCommandLockObject", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementCommandLoginToDomain", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementCommandSetGlobalProperties", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementCommandSetPolicySettings", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementCommandSetThreatAdvancedSettings", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementCommandUnlockObject", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementConnectCloudServices", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementDataCenterObject", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementDataCenterQuery", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementDeleteApiKey", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementDeleteDataCenterObject", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementDeleteRepositoryPackage", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementDeleteThreatProtections", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementDeleteUpdatableObject", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementDiscard", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementDisconnect", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementDisconnectCloudServices", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementDnsDomain", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementDomain", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementDomainPermissionsProfile", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementDynamicGlobalNetworkObject", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementDynamicObject", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementExceptionGroup", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementExport", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementGaiaBestPractice", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementGcpDataCenterServer", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementGenericDataCenterServer", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementGetAttachment", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementGetPlatform", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementGlobalAssignment", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementGroup", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementGroupWithExclusion", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementGsnHandoverGroup", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementHaFullSync", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementHost", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementHttpsLayer", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementHttpsRule", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementHttpsSection", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementIdentityTag", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementIdpAdministratorGroup", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementInstallDatabase", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementInstallLsmPolicy", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementInstallLsmSettings", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementInstallPolicy", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementInstallSoftwarePackage", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementInteroperableDevice", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementIseDataCenterServer", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementKeepalive", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementKubernetesDataCenterServer", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementLogin", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementLogout", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementLsmCluster", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementLsmGateway", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementLsmRunScript", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementLsvProfile", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementMdPermissionsProfile", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementMds", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementMigrateExportDomain", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementMigrateImportDomain", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementMulticastAddressRange", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementNatRule", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementNatSection", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementNetwork", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementNetworkFeed", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementNuageDataCenterServer", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementNutanixDataCenterServer", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementOpenstackDataCenterServer", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementOpsecApplication", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementOracleCloudDataCenterServer", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementPackage", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementPublish", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementPutFile", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementRadiusGroup", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementRadiusServer", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementRepositoryScript", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementResetSic", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementRestoreDomain", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementRevertToRevision", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementRunIpsUpdate", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementRunScript", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementRunThreatEmulationFileTypesOfflineUpdate", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementSecurityZone", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementServerCertificate", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementServiceCitrixTcp", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementServiceCompoundTcp", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementServiceDceRpc", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementServiceGroup", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementServiceGtp", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementServiceIcmp", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementServiceIcmp6", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementServiceOther", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementServiceRpc", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementServiceSctp", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementServiceTcp", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementServiceUdp", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementSetApiSettings", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementSetAutomaticPurge", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementSetGlobalDomain", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementSetHaState", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementSetIdpDefaultAssignment", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementSetIdpToDomainAssignment", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementSetIpsUpdateSchedule", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementSetLoginMessage", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementSetThreatProtection", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementSimpleCluster", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementSimpleGateway", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementSmartTask", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementSmtpServer", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementTacacsGroup", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementTacacsServer", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementTag", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementTestSicStatus", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementThreatException", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementThreatIndicator", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementThreatIocFeed", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementThreatLayer", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementThreatProfile", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementThreatRule", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementTime", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementTimeGroup", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementTrustedClient", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementUninstallSoftwarePackage", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementUnlockAdministrator", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementUpdateProvisionedSatellites", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementUpdateUpdatableObjectsRepositoryContent", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementUser", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementUserGroup", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementUserTemplate", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementVerifyPolicy", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementVerifyRevert", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementVerifySoftwarePackage", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementVmwareDataCenterServer", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementVpnCommunityMeshed", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementVpnCommunityRemoteAccess", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementVpnCommunityStar", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementWhereUsed", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/managementWildcard", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/physicalInterface", _module)
pulumi.runtime.registerResourceModule("checkpoint", "index/putFile", _module)
pulumi.runtime.registerResourcePackage("checkpoint", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:checkpoint") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
