// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ManagementGlobalAssignment extends pulumi.CustomResource {
    /**
     * Get an existing ManagementGlobalAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagementGlobalAssignmentState, opts?: pulumi.CustomResourceOptions): ManagementGlobalAssignment {
        return new ManagementGlobalAssignment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkpoint:index/managementGlobalAssignment:ManagementGlobalAssignment';

    /**
     * Returns true if the given object is an instance of ManagementGlobalAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementGlobalAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementGlobalAssignment.__pulumiType;
    }

    public /*out*/ readonly assignmentStatus!: pulumi.Output<string>;
    /**
     * The time when the assignment was assigned.
     */
    public /*out*/ readonly assignmentUpToDate!: pulumi.Output<{[key: string]: string}>;
    /**
     * N/A
     */
    public readonly dependentDomain!: pulumi.Output<string | undefined>;
    /**
     * Global domain access policy that is assigned to a dependent domain.
     */
    public readonly globalAccessPolicy!: pulumi.Output<string | undefined>;
    /**
     * N/A
     */
    public readonly globalDomain!: pulumi.Output<string | undefined>;
    /**
     * Global domain threat prevention policy that is assigned to a dependent domain.
     */
    public readonly globalThreatPreventionPolicy!: pulumi.Output<string | undefined>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    public readonly ignoreErrors!: pulumi.Output<boolean | undefined>;
    /**
     * Apply changes ignoring warnings.
     */
    public readonly ignoreWarnings!: pulumi.Output<boolean | undefined>;
    /**
     * N/A
     */
    public readonly manageProtectionActions!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ManagementGlobalAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ManagementGlobalAssignmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagementGlobalAssignmentArgs | ManagementGlobalAssignmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagementGlobalAssignmentState | undefined;
            resourceInputs["assignmentStatus"] = state ? state.assignmentStatus : undefined;
            resourceInputs["assignmentUpToDate"] = state ? state.assignmentUpToDate : undefined;
            resourceInputs["dependentDomain"] = state ? state.dependentDomain : undefined;
            resourceInputs["globalAccessPolicy"] = state ? state.globalAccessPolicy : undefined;
            resourceInputs["globalDomain"] = state ? state.globalDomain : undefined;
            resourceInputs["globalThreatPreventionPolicy"] = state ? state.globalThreatPreventionPolicy : undefined;
            resourceInputs["ignoreErrors"] = state ? state.ignoreErrors : undefined;
            resourceInputs["ignoreWarnings"] = state ? state.ignoreWarnings : undefined;
            resourceInputs["manageProtectionActions"] = state ? state.manageProtectionActions : undefined;
        } else {
            const args = argsOrState as ManagementGlobalAssignmentArgs | undefined;
            resourceInputs["dependentDomain"] = args ? args.dependentDomain : undefined;
            resourceInputs["globalAccessPolicy"] = args ? args.globalAccessPolicy : undefined;
            resourceInputs["globalDomain"] = args ? args.globalDomain : undefined;
            resourceInputs["globalThreatPreventionPolicy"] = args ? args.globalThreatPreventionPolicy : undefined;
            resourceInputs["ignoreErrors"] = args ? args.ignoreErrors : undefined;
            resourceInputs["ignoreWarnings"] = args ? args.ignoreWarnings : undefined;
            resourceInputs["manageProtectionActions"] = args ? args.manageProtectionActions : undefined;
            resourceInputs["assignmentStatus"] = undefined /*out*/;
            resourceInputs["assignmentUpToDate"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagementGlobalAssignment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagementGlobalAssignment resources.
 */
export interface ManagementGlobalAssignmentState {
    assignmentStatus?: pulumi.Input<string>;
    /**
     * The time when the assignment was assigned.
     */
    assignmentUpToDate?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * N/A
     */
    dependentDomain?: pulumi.Input<string>;
    /**
     * Global domain access policy that is assigned to a dependent domain.
     */
    globalAccessPolicy?: pulumi.Input<string>;
    /**
     * N/A
     */
    globalDomain?: pulumi.Input<string>;
    /**
     * Global domain threat prevention policy that is assigned to a dependent domain.
     */
    globalThreatPreventionPolicy?: pulumi.Input<string>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    ignoreErrors?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring warnings.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * N/A
     */
    manageProtectionActions?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ManagementGlobalAssignment resource.
 */
export interface ManagementGlobalAssignmentArgs {
    /**
     * N/A
     */
    dependentDomain?: pulumi.Input<string>;
    /**
     * Global domain access policy that is assigned to a dependent domain.
     */
    globalAccessPolicy?: pulumi.Input<string>;
    /**
     * N/A
     */
    globalDomain?: pulumi.Input<string>;
    /**
     * Global domain threat prevention policy that is assigned to a dependent domain.
     */
    globalThreatPreventionPolicy?: pulumi.Input<string>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    ignoreErrors?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring warnings.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * N/A
     */
    manageProtectionActions?: pulumi.Input<boolean>;
}
