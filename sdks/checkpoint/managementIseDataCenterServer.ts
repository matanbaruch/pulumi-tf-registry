// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ManagementIseDataCenterServer extends pulumi.CustomResource {
    /**
     * Get an existing ManagementIseDataCenterServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagementIseDataCenterServerState, opts?: pulumi.CustomResourceOptions): ManagementIseDataCenterServer {
        return new ManagementIseDataCenterServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkpoint:index/managementIseDataCenterServer:ManagementIseDataCenterServer';

    /**
     * Returns true if the given object is an instance of ManagementIseDataCenterServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementIseDataCenterServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementIseDataCenterServer.__pulumiType;
    }

    /**
     * Specify the SHA-1 or SHA-256 fingerprint of the Data Center Server's certificate.
     */
    public readonly certificateFingerprint!: pulumi.Output<string | undefined>;
    /**
     * Color of the object. Should be one of existing colors.
     */
    public readonly color!: pulumi.Output<string | undefined>;
    /**
     * Comments string.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * Address of ISE administrator hostnames. Example: http(s)://<host1 ip/url>.
     */
    public readonly hostnames!: pulumi.Output<string[]>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    public readonly ignoreErrors!: pulumi.Output<boolean | undefined>;
    /**
     * Apply changes ignoring warnings. By Setting this parameter to 'true' test connection failure will be ignored.
     */
    public readonly ignoreWarnings!: pulumi.Output<boolean | undefined>;
    /**
     * Object name. Must be unique in the domain.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Password of the ISE administrator server.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Password of the Cisco ISE administrator encoded in Base64.
     */
    public readonly passwordBase64!: pulumi.Output<string | undefined>;
    /**
     * Collection of tag identifiers.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * When set to false, the current Data Center Server's certificate should be trusted, either by providing the
     * certificate-fingerprint argument or by relying on a previously trusted certificate of this hostname. When set to true,
     * trust the current Data Center Server's certificate as-is.
     */
    public readonly unsafeAutoAccept!: pulumi.Output<boolean | undefined>;
    /**
     * User ID of the ISE administrator server. When using commonLoginLogic Domains use the following syntax:
     * apic:<domain>\<username>.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a ManagementIseDataCenterServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagementIseDataCenterServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagementIseDataCenterServerArgs | ManagementIseDataCenterServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagementIseDataCenterServerState | undefined;
            resourceInputs["certificateFingerprint"] = state ? state.certificateFingerprint : undefined;
            resourceInputs["color"] = state ? state.color : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["hostnames"] = state ? state.hostnames : undefined;
            resourceInputs["ignoreErrors"] = state ? state.ignoreErrors : undefined;
            resourceInputs["ignoreWarnings"] = state ? state.ignoreWarnings : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["passwordBase64"] = state ? state.passwordBase64 : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["unsafeAutoAccept"] = state ? state.unsafeAutoAccept : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as ManagementIseDataCenterServerArgs | undefined;
            if ((!args || args.hostnames === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostnames'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["certificateFingerprint"] = args ? args.certificateFingerprint : undefined;
            resourceInputs["color"] = args ? args.color : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["hostnames"] = args ? args.hostnames : undefined;
            resourceInputs["ignoreErrors"] = args ? args.ignoreErrors : undefined;
            resourceInputs["ignoreWarnings"] = args ? args.ignoreWarnings : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["passwordBase64"] = args?.passwordBase64 ? pulumi.secret(args.passwordBase64) : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["unsafeAutoAccept"] = args ? args.unsafeAutoAccept : undefined;
            resourceInputs["username"] = args?.username ? pulumi.secret(args.username) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password", "passwordBase64", "username"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ManagementIseDataCenterServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagementIseDataCenterServer resources.
 */
export interface ManagementIseDataCenterServerState {
    /**
     * Specify the SHA-1 or SHA-256 fingerprint of the Data Center Server's certificate.
     */
    certificateFingerprint?: pulumi.Input<string>;
    /**
     * Color of the object. Should be one of existing colors.
     */
    color?: pulumi.Input<string>;
    /**
     * Comments string.
     */
    comments?: pulumi.Input<string>;
    /**
     * Address of ISE administrator hostnames. Example: http(s)://<host1 ip/url>.
     */
    hostnames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    ignoreErrors?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring warnings. By Setting this parameter to 'true' test connection failure will be ignored.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * Object name. Must be unique in the domain.
     */
    name?: pulumi.Input<string>;
    /**
     * Password of the ISE administrator server.
     */
    password?: pulumi.Input<string>;
    /**
     * Password of the Cisco ISE administrator encoded in Base64.
     */
    passwordBase64?: pulumi.Input<string>;
    /**
     * Collection of tag identifiers.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When set to false, the current Data Center Server's certificate should be trusted, either by providing the
     * certificate-fingerprint argument or by relying on a previously trusted certificate of this hostname. When set to true,
     * trust the current Data Center Server's certificate as-is.
     */
    unsafeAutoAccept?: pulumi.Input<boolean>;
    /**
     * User ID of the ISE administrator server. When using commonLoginLogic Domains use the following syntax:
     * apic:<domain>\<username>.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagementIseDataCenterServer resource.
 */
export interface ManagementIseDataCenterServerArgs {
    /**
     * Specify the SHA-1 or SHA-256 fingerprint of the Data Center Server's certificate.
     */
    certificateFingerprint?: pulumi.Input<string>;
    /**
     * Color of the object. Should be one of existing colors.
     */
    color?: pulumi.Input<string>;
    /**
     * Comments string.
     */
    comments?: pulumi.Input<string>;
    /**
     * Address of ISE administrator hostnames. Example: http(s)://<host1 ip/url>.
     */
    hostnames: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Apply changes ignoring errors. You won't be able to publish such a changes. If ignore-warnings flag was omitted -
     * warnings will also be ignored.
     */
    ignoreErrors?: pulumi.Input<boolean>;
    /**
     * Apply changes ignoring warnings. By Setting this parameter to 'true' test connection failure will be ignored.
     */
    ignoreWarnings?: pulumi.Input<boolean>;
    /**
     * Object name. Must be unique in the domain.
     */
    name?: pulumi.Input<string>;
    /**
     * Password of the ISE administrator server.
     */
    password?: pulumi.Input<string>;
    /**
     * Password of the Cisco ISE administrator encoded in Base64.
     */
    passwordBase64?: pulumi.Input<string>;
    /**
     * Collection of tag identifiers.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When set to false, the current Data Center Server's certificate should be trusted, either by providing the
     * certificate-fingerprint argument or by relying on a previously trusted certificate of this hostname. When set to true,
     * trust the current Data Center Server's certificate as-is.
     */
    unsafeAutoAccept?: pulumi.Input<boolean>;
    /**
     * User ID of the ISE administrator server. When using commonLoginLogic Domains use the following syntax:
     * apic:<domain>\<username>.
     */
    username: pulumi.Input<string>;
}
