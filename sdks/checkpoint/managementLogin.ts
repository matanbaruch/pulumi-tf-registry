// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ManagementLogin extends pulumi.CustomResource {
    /**
     * Get an existing ManagementLogin resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagementLoginState, opts?: pulumi.CustomResourceOptions): ManagementLogin {
        return new ManagementLogin(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'checkpoint:index/managementLogin:ManagementLogin';

    /**
     * Returns true if the given object is an instance of ManagementLogin.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementLogin {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementLogin.__pulumiType;
    }

    /**
     * When 'continue-last-session' is set to 'True', the new session would continue where the last session was stopped. This
     * option is available when the administrator has only one session that can be continued. If there is more than one
     * session, see 'switch-session' API.
     */
    public readonly continueLastSession!: pulumi.Output<boolean | undefined>;
    /**
     * Use domain to login to specific domain. Domain can be identified by name or UID.
     */
    public readonly domain!: pulumi.Output<string | undefined>;
    /**
     * commonLoginLogic to the last published session. Such login is done with the Read Only permissions.
     */
    public readonly enterLastPublishedSession!: pulumi.Output<boolean | undefined>;
    /**
     * Administrator password.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * commonLoginLogic with Read Only permissions. This parameter is not considered in case continue-last-session is true.
     */
    public readonly readOnly!: pulumi.Output<boolean | undefined>;
    /**
     * Session comments.
     */
    public readonly sessionComments!: pulumi.Output<string | undefined>;
    /**
     * Session description.
     */
    public readonly sessionDescription!: pulumi.Output<string | undefined>;
    /**
     * Session unique name.
     */
    public readonly sessionName!: pulumi.Output<string | undefined>;
    /**
     * Session expiration timeout in seconds. Default 600 seconds.
     */
    public readonly sessionTimeout!: pulumi.Output<number | undefined>;
    /**
     * Administrator user name.
     */
    public readonly user!: pulumi.Output<string>;

    /**
     * Create a ManagementLogin resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagementLoginArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagementLoginArgs | ManagementLoginState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagementLoginState | undefined;
            resourceInputs["continueLastSession"] = state ? state.continueLastSession : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["enterLastPublishedSession"] = state ? state.enterLastPublishedSession : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["readOnly"] = state ? state.readOnly : undefined;
            resourceInputs["sessionComments"] = state ? state.sessionComments : undefined;
            resourceInputs["sessionDescription"] = state ? state.sessionDescription : undefined;
            resourceInputs["sessionName"] = state ? state.sessionName : undefined;
            resourceInputs["sessionTimeout"] = state ? state.sessionTimeout : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
        } else {
            const args = argsOrState as ManagementLoginArgs | undefined;
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.user === undefined) && !opts.urn) {
                throw new Error("Missing required property 'user'");
            }
            resourceInputs["continueLastSession"] = args ? args.continueLastSession : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["enterLastPublishedSession"] = args ? args.enterLastPublishedSession : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["readOnly"] = args ? args.readOnly : undefined;
            resourceInputs["sessionComments"] = args ? args.sessionComments : undefined;
            resourceInputs["sessionDescription"] = args ? args.sessionDescription : undefined;
            resourceInputs["sessionName"] = args ? args.sessionName : undefined;
            resourceInputs["sessionTimeout"] = args ? args.sessionTimeout : undefined;
            resourceInputs["user"] = args?.user ? pulumi.secret(args.user) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password", "user"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ManagementLogin.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagementLogin resources.
 */
export interface ManagementLoginState {
    /**
     * When 'continue-last-session' is set to 'True', the new session would continue where the last session was stopped. This
     * option is available when the administrator has only one session that can be continued. If there is more than one
     * session, see 'switch-session' API.
     */
    continueLastSession?: pulumi.Input<boolean>;
    /**
     * Use domain to login to specific domain. Domain can be identified by name or UID.
     */
    domain?: pulumi.Input<string>;
    /**
     * commonLoginLogic to the last published session. Such login is done with the Read Only permissions.
     */
    enterLastPublishedSession?: pulumi.Input<boolean>;
    /**
     * Administrator password.
     */
    password?: pulumi.Input<string>;
    /**
     * commonLoginLogic with Read Only permissions. This parameter is not considered in case continue-last-session is true.
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * Session comments.
     */
    sessionComments?: pulumi.Input<string>;
    /**
     * Session description.
     */
    sessionDescription?: pulumi.Input<string>;
    /**
     * Session unique name.
     */
    sessionName?: pulumi.Input<string>;
    /**
     * Session expiration timeout in seconds. Default 600 seconds.
     */
    sessionTimeout?: pulumi.Input<number>;
    /**
     * Administrator user name.
     */
    user?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagementLogin resource.
 */
export interface ManagementLoginArgs {
    /**
     * When 'continue-last-session' is set to 'True', the new session would continue where the last session was stopped. This
     * option is available when the administrator has only one session that can be continued. If there is more than one
     * session, see 'switch-session' API.
     */
    continueLastSession?: pulumi.Input<boolean>;
    /**
     * Use domain to login to specific domain. Domain can be identified by name or UID.
     */
    domain?: pulumi.Input<string>;
    /**
     * commonLoginLogic to the last published session. Such login is done with the Read Only permissions.
     */
    enterLastPublishedSession?: pulumi.Input<boolean>;
    /**
     * Administrator password.
     */
    password: pulumi.Input<string>;
    /**
     * commonLoginLogic with Read Only permissions. This parameter is not considered in case continue-last-session is true.
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * Session comments.
     */
    sessionComments?: pulumi.Input<string>;
    /**
     * Session description.
     */
    sessionDescription?: pulumi.Input<string>;
    /**
     * Session unique name.
     */
    sessionName?: pulumi.Input<string>;
    /**
     * Session expiration timeout in seconds. Default 600 seconds.
     */
    sessionTimeout?: pulumi.Input<number>;
    /**
     * Administrator user name.
     */
    user: pulumi.Input<string>;
}
