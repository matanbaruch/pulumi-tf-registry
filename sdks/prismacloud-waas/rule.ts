// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Rule extends pulumi.CustomResource {
    /**
     * Get an existing Rule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RuleState, opts?: pulumi.CustomResourceOptions): Rule {
        return new Rule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prismacloud-waas:index/rule:Rule';

    /**
     * Returns true if the given object is an instance of Rule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Rule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Rule.__pulumiType;
    }

    /**
     * Indicates if validation of http request header names should allow non-compliant characters
     */
    public readonly allowMalformedHttpHeaderNames!: pulumi.Output<boolean>;
    /**
     * Prisma Cloud Application Spec resource
     */
    public readonly applicationsSpecs!: pulumi.Output<outputs.RuleApplicationsSpec[] | undefined>;
    /**
     * Indicates if http ports should be automatically detected and protected
     */
    public readonly autoProtectPorts!: pulumi.Output<boolean>;
    /**
     * Key of collection defining Rule scope
     */
    public readonly collections!: pulumi.Output<outputs.RuleCollection[]>;
    /**
     * Indicates if the rule is currently disabled (true) or not (false)
     */
    public readonly disabled!: pulumi.Output<boolean>;
    /**
     * Datetime when the rule was last modified
     */
    public /*out*/ readonly modified!: pulumi.Output<string>;
    /**
     * Name of the rule
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Free-form text
     */
    public readonly notes!: pulumi.Output<string>;
    /**
     * Represents the Out-of-Band Rule Scope
     */
    public readonly outOfBandScope!: pulumi.Output<string | undefined>;
    /**
     * User who created or last modified the rule
     */
    public /*out*/ readonly owner!: pulumi.Output<string>;
    /**
     * Type of policy to which the rule belongs
     */
    public readonly policyType!: pulumi.Output<string>;
    /**
     * Previous name of the rule. Required for rule renaming. This property is not stored in db, since it's used only to
     * indicate rule renaming when new policy is received from client
     */
    public readonly previousName!: pulumi.Output<string>;
    /**
     * ReadTimeout is the timeout of request reads in seconds, when no value is specified (0) the timeout is 5 seconds
     */
    public readonly readTimeoutSeconds!: pulumi.Output<number>;
    /**
     * SkipAPILearning indicates if API discovery is to be skipped (true) or not (false)
     */
    public readonly skipApiLearning!: pulumi.Output<boolean>;
    /**
     * TrafficMirroring is the traffic mirroring configuration
     */
    public readonly trafficMirroring!: pulumi.Output<outputs.RuleTrafficMirroring | undefined>;
    /**
     * Version is the unique fingerprint of a Rule definition, a matching version is required for an update
     */
    public readonly version!: pulumi.Output<string>;
    /**
     * Indicates whether the operating system of the app is windows, default is Linux
     */
    public readonly windows!: pulumi.Output<boolean>;

    /**
     * Create a Rule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RuleArgs | RuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RuleState | undefined;
            resourceInputs["allowMalformedHttpHeaderNames"] = state ? state.allowMalformedHttpHeaderNames : undefined;
            resourceInputs["applicationsSpecs"] = state ? state.applicationsSpecs : undefined;
            resourceInputs["autoProtectPorts"] = state ? state.autoProtectPorts : undefined;
            resourceInputs["collections"] = state ? state.collections : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["modified"] = state ? state.modified : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notes"] = state ? state.notes : undefined;
            resourceInputs["outOfBandScope"] = state ? state.outOfBandScope : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["policyType"] = state ? state.policyType : undefined;
            resourceInputs["previousName"] = state ? state.previousName : undefined;
            resourceInputs["readTimeoutSeconds"] = state ? state.readTimeoutSeconds : undefined;
            resourceInputs["skipApiLearning"] = state ? state.skipApiLearning : undefined;
            resourceInputs["trafficMirroring"] = state ? state.trafficMirroring : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["windows"] = state ? state.windows : undefined;
        } else {
            const args = argsOrState as RuleArgs | undefined;
            if ((!args || args.collections === undefined) && !opts.urn) {
                throw new Error("Missing required property 'collections'");
            }
            if ((!args || args.policyType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyType'");
            }
            resourceInputs["allowMalformedHttpHeaderNames"] = args ? args.allowMalformedHttpHeaderNames : undefined;
            resourceInputs["applicationsSpecs"] = args ? args.applicationsSpecs : undefined;
            resourceInputs["autoProtectPorts"] = args ? args.autoProtectPorts : undefined;
            resourceInputs["collections"] = args ? args.collections : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notes"] = args ? args.notes : undefined;
            resourceInputs["outOfBandScope"] = args ? args.outOfBandScope : undefined;
            resourceInputs["policyType"] = args ? args.policyType : undefined;
            resourceInputs["previousName"] = args ? args.previousName : undefined;
            resourceInputs["readTimeoutSeconds"] = args ? args.readTimeoutSeconds : undefined;
            resourceInputs["skipApiLearning"] = args ? args.skipApiLearning : undefined;
            resourceInputs["trafficMirroring"] = args ? args.trafficMirroring : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["windows"] = args ? args.windows : undefined;
            resourceInputs["modified"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Rule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Rule resources.
 */
export interface RuleState {
    /**
     * Indicates if validation of http request header names should allow non-compliant characters
     */
    allowMalformedHttpHeaderNames?: pulumi.Input<boolean>;
    /**
     * Prisma Cloud Application Spec resource
     */
    applicationsSpecs?: pulumi.Input<pulumi.Input<inputs.RuleApplicationsSpec>[]>;
    /**
     * Indicates if http ports should be automatically detected and protected
     */
    autoProtectPorts?: pulumi.Input<boolean>;
    /**
     * Key of collection defining Rule scope
     */
    collections?: pulumi.Input<pulumi.Input<inputs.RuleCollection>[]>;
    /**
     * Indicates if the rule is currently disabled (true) or not (false)
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Datetime when the rule was last modified
     */
    modified?: pulumi.Input<string>;
    /**
     * Name of the rule
     */
    name?: pulumi.Input<string>;
    /**
     * Free-form text
     */
    notes?: pulumi.Input<string>;
    /**
     * Represents the Out-of-Band Rule Scope
     */
    outOfBandScope?: pulumi.Input<string>;
    /**
     * User who created or last modified the rule
     */
    owner?: pulumi.Input<string>;
    /**
     * Type of policy to which the rule belongs
     */
    policyType?: pulumi.Input<string>;
    /**
     * Previous name of the rule. Required for rule renaming. This property is not stored in db, since it's used only to
     * indicate rule renaming when new policy is received from client
     */
    previousName?: pulumi.Input<string>;
    /**
     * ReadTimeout is the timeout of request reads in seconds, when no value is specified (0) the timeout is 5 seconds
     */
    readTimeoutSeconds?: pulumi.Input<number>;
    /**
     * SkipAPILearning indicates if API discovery is to be skipped (true) or not (false)
     */
    skipApiLearning?: pulumi.Input<boolean>;
    /**
     * TrafficMirroring is the traffic mirroring configuration
     */
    trafficMirroring?: pulumi.Input<inputs.RuleTrafficMirroring>;
    /**
     * Version is the unique fingerprint of a Rule definition, a matching version is required for an update
     */
    version?: pulumi.Input<string>;
    /**
     * Indicates whether the operating system of the app is windows, default is Linux
     */
    windows?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Rule resource.
 */
export interface RuleArgs {
    /**
     * Indicates if validation of http request header names should allow non-compliant characters
     */
    allowMalformedHttpHeaderNames?: pulumi.Input<boolean>;
    /**
     * Prisma Cloud Application Spec resource
     */
    applicationsSpecs?: pulumi.Input<pulumi.Input<inputs.RuleApplicationsSpec>[]>;
    /**
     * Indicates if http ports should be automatically detected and protected
     */
    autoProtectPorts?: pulumi.Input<boolean>;
    /**
     * Key of collection defining Rule scope
     */
    collections: pulumi.Input<pulumi.Input<inputs.RuleCollection>[]>;
    /**
     * Indicates if the rule is currently disabled (true) or not (false)
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Name of the rule
     */
    name?: pulumi.Input<string>;
    /**
     * Free-form text
     */
    notes?: pulumi.Input<string>;
    /**
     * Represents the Out-of-Band Rule Scope
     */
    outOfBandScope?: pulumi.Input<string>;
    /**
     * Type of policy to which the rule belongs
     */
    policyType: pulumi.Input<string>;
    /**
     * Previous name of the rule. Required for rule renaming. This property is not stored in db, since it's used only to
     * indicate rule renaming when new policy is received from client
     */
    previousName?: pulumi.Input<string>;
    /**
     * ReadTimeout is the timeout of request reads in seconds, when no value is specified (0) the timeout is 5 seconds
     */
    readTimeoutSeconds?: pulumi.Input<number>;
    /**
     * SkipAPILearning indicates if API discovery is to be skipped (true) or not (false)
     */
    skipApiLearning?: pulumi.Input<boolean>;
    /**
     * TrafficMirroring is the traffic mirroring configuration
     */
    trafficMirroring?: pulumi.Input<inputs.RuleTrafficMirroring>;
    /**
     * Version is the unique fingerprint of a Rule definition, a matching version is required for an update
     */
    version?: pulumi.Input<string>;
    /**
     * Indicates whether the operating system of the app is windows, default is Linux
     */
    windows?: pulumi.Input<boolean>;
}
