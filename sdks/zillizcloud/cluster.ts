// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zillizcloud:index/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * The name of the cluster to be created. It is a string of no more than 32 characters.
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * The type of CU associated with the cluster. Possible values are Performance-optimized and Capacity-optimized.
     */
    public /*out*/ readonly clusterType!: pulumi.Output<string>;
    /**
     * The public endpoint of the cluster. You can connect to the cluster using this endpoint from the public network.
     */
    public /*out*/ readonly connectAddress!: pulumi.Output<string>;
    /**
     * The time at which the cluster has been created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The size of the CU to be used for the created cluster. It is an integer from 1 to 256.
     */
    public readonly cuSize!: pulumi.Output<number>;
    /**
     * The type of the CU used for the Zilliz Cloud cluster to be created. A compute unit (CU) is the physical resource unit
     * for cluster deployment. Different CU types comprise varying combinations of CPU, memory, and storage. Available options
     * are Performance-optimized, Capacity-optimized, and Cost-optimized. This parameter defaults to Performance-optimized. The
     * value defaults to Performance-optimized.
     */
    public readonly cuType!: pulumi.Output<string | undefined>;
    /**
     * An optional description about the cluster.
     */
    public /*out*/ readonly description!: pulumi.Output<string>;
    /**
     * The password of the cluster user generated by default. It will not be displayed again, so note it down and securely
     * store it.
     */
    public /*out*/ readonly password!: pulumi.Output<string>;
    /**
     * The plan tier of the Zilliz Cloud service. Available options are Free, Serverless, Standard and Enterprise.
     */
    public readonly plan!: pulumi.Output<string | undefined>;
    /**
     * The private endpoint of the cluster. You can set up a private link to allow your VPS in the same cloud region to access
     * your cluster.
     */
    public /*out*/ readonly privateLinkAddress!: pulumi.Output<string>;
    /**
     * The ID of the project where the cluster is to be created.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The statement indicating that this operation succeeds.
     */
    public /*out*/ readonly prompt!: pulumi.Output<string>;
    /**
     * The ID of the region where the cluster exists.
     */
    public readonly regionId!: pulumi.Output<string>;
    /**
     * The current status of the cluster. Possible values are INITIALIZING, RUNNING, SUSPENDING, and RESUMING.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ClusterTimeouts | undefined>;
    /**
     * The name of the cluster user generated by default.
     */
    public /*out*/ readonly username!: pulumi.Output<string>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["clusterType"] = state ? state.clusterType : undefined;
            resourceInputs["connectAddress"] = state ? state.connectAddress : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["cuSize"] = state ? state.cuSize : undefined;
            resourceInputs["cuType"] = state ? state.cuType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["privateLinkAddress"] = state ? state.privateLinkAddress : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["prompt"] = state ? state.prompt : undefined;
            resourceInputs["regionId"] = state ? state.regionId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["cuSize"] = args ? args.cuSize : undefined;
            resourceInputs["cuType"] = args ? args.cuType : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["regionId"] = args ? args.regionId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["clusterType"] = undefined /*out*/;
            resourceInputs["connectAddress"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["password"] = undefined /*out*/;
            resourceInputs["privateLinkAddress"] = undefined /*out*/;
            resourceInputs["prompt"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["username"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Cluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    /**
     * The name of the cluster to be created. It is a string of no more than 32 characters.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The type of CU associated with the cluster. Possible values are Performance-optimized and Capacity-optimized.
     */
    clusterType?: pulumi.Input<string>;
    /**
     * The public endpoint of the cluster. You can connect to the cluster using this endpoint from the public network.
     */
    connectAddress?: pulumi.Input<string>;
    /**
     * The time at which the cluster has been created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The size of the CU to be used for the created cluster. It is an integer from 1 to 256.
     */
    cuSize?: pulumi.Input<number>;
    /**
     * The type of the CU used for the Zilliz Cloud cluster to be created. A compute unit (CU) is the physical resource unit
     * for cluster deployment. Different CU types comprise varying combinations of CPU, memory, and storage. Available options
     * are Performance-optimized, Capacity-optimized, and Cost-optimized. This parameter defaults to Performance-optimized. The
     * value defaults to Performance-optimized.
     */
    cuType?: pulumi.Input<string>;
    /**
     * An optional description about the cluster.
     */
    description?: pulumi.Input<string>;
    /**
     * The password of the cluster user generated by default. It will not be displayed again, so note it down and securely
     * store it.
     */
    password?: pulumi.Input<string>;
    /**
     * The plan tier of the Zilliz Cloud service. Available options are Free, Serverless, Standard and Enterprise.
     */
    plan?: pulumi.Input<string>;
    /**
     * The private endpoint of the cluster. You can set up a private link to allow your VPS in the same cloud region to access
     * your cluster.
     */
    privateLinkAddress?: pulumi.Input<string>;
    /**
     * The ID of the project where the cluster is to be created.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The statement indicating that this operation succeeds.
     */
    prompt?: pulumi.Input<string>;
    /**
     * The ID of the region where the cluster exists.
     */
    regionId?: pulumi.Input<string>;
    /**
     * The current status of the cluster. Possible values are INITIALIZING, RUNNING, SUSPENDING, and RESUMING.
     */
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ClusterTimeouts>;
    /**
     * The name of the cluster user generated by default.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * The name of the cluster to be created. It is a string of no more than 32 characters.
     */
    clusterName: pulumi.Input<string>;
    /**
     * The size of the CU to be used for the created cluster. It is an integer from 1 to 256.
     */
    cuSize?: pulumi.Input<number>;
    /**
     * The type of the CU used for the Zilliz Cloud cluster to be created. A compute unit (CU) is the physical resource unit
     * for cluster deployment. Different CU types comprise varying combinations of CPU, memory, and storage. Available options
     * are Performance-optimized, Capacity-optimized, and Cost-optimized. This parameter defaults to Performance-optimized. The
     * value defaults to Performance-optimized.
     */
    cuType?: pulumi.Input<string>;
    /**
     * The plan tier of the Zilliz Cloud service. Available options are Free, Serverless, Standard and Enterprise.
     */
    plan?: pulumi.Input<string>;
    /**
     * The ID of the project where the cluster is to be created.
     */
    projectId: pulumi.Input<string>;
    /**
     * The ID of the region where the cluster exists.
     */
    regionId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ClusterTimeouts>;
}
