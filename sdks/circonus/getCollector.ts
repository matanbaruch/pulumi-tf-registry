// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCollector(args?: GetCollectorArgs, opts?: pulumi.InvokeOptions): Promise<GetCollectorResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("circonus:index/getCollector:getCollector", {
        "id": args.id,
        "tags": args.tags,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCollector.
 */
export interface GetCollectorArgs {
    id?: string;
    tags?: string[];
}

/**
 * A collection of values returned by getCollector.
 */
export interface GetCollectorResult {
    readonly details: outputs.GetCollectorDetail[];
    readonly id: string;
    readonly latitude: string;
    readonly longitude: string;
    readonly name: string;
    readonly tags?: string[];
    readonly type: string;
}
export function getCollectorOutput(args?: GetCollectorOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCollectorResult> {
    return pulumi.output(args).apply((a: any) => getCollector(a, opts))
}

/**
 * A collection of arguments for invoking getCollector.
 */
export interface GetCollectorOutputArgs {
    id?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
