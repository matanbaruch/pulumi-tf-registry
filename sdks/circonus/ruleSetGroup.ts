// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RuleSetGroup extends pulumi.CustomResource {
    /**
     * Get an existing RuleSetGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RuleSetGroupState, opts?: pulumi.CustomResourceOptions): RuleSetGroup {
        return new RuleSetGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'circonus:index/ruleSetGroup:RuleSetGroup';

    /**
     * Returns true if the given object is an instance of RuleSetGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RuleSetGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RuleSetGroup.__pulumiType;
    }

    public readonly conditions!: pulumi.Output<outputs.RuleSetGroupCondition[]>;
    public readonly formulas!: pulumi.Output<outputs.RuleSetGroupFormula[]>;
    public readonly name!: pulumi.Output<string>;
    public readonly notifies!: pulumi.Output<outputs.RuleSetGroupNotify[] | undefined>;
    public readonly tags!: pulumi.Output<string[] | undefined>;

    /**
     * Create a RuleSetGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RuleSetGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RuleSetGroupArgs | RuleSetGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RuleSetGroupState | undefined;
            resourceInputs["conditions"] = state ? state.conditions : undefined;
            resourceInputs["formulas"] = state ? state.formulas : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifies"] = state ? state.notifies : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as RuleSetGroupArgs | undefined;
            if ((!args || args.conditions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'conditions'");
            }
            if ((!args || args.formulas === undefined) && !opts.urn) {
                throw new Error("Missing required property 'formulas'");
            }
            resourceInputs["conditions"] = args ? args.conditions : undefined;
            resourceInputs["formulas"] = args ? args.formulas : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notifies"] = args ? args.notifies : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RuleSetGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RuleSetGroup resources.
 */
export interface RuleSetGroupState {
    conditions?: pulumi.Input<pulumi.Input<inputs.RuleSetGroupCondition>[]>;
    formulas?: pulumi.Input<pulumi.Input<inputs.RuleSetGroupFormula>[]>;
    name?: pulumi.Input<string>;
    notifies?: pulumi.Input<pulumi.Input<inputs.RuleSetGroupNotify>[]>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a RuleSetGroup resource.
 */
export interface RuleSetGroupArgs {
    conditions: pulumi.Input<pulumi.Input<inputs.RuleSetGroupCondition>[]>;
    formulas: pulumi.Input<pulumi.Input<inputs.RuleSetGroupFormula>[]>;
    name?: pulumi.Input<string>;
    notifies?: pulumi.Input<pulumi.Input<inputs.RuleSetGroupNotify>[]>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
