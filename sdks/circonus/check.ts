// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Check extends pulumi.CustomResource {
    /**
     * Get an existing Check resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CheckState, opts?: pulumi.CustomResourceOptions): Check {
        return new Check(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'circonus:index/check:Check';

    /**
     * Returns true if the given object is an instance of Check.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Check {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Check.__pulumiType;
    }

    /**
     * If the check is activate or disabled
     */
    public readonly active!: pulumi.Output<boolean | undefined>;
    /**
     * CAQL check configuration
     */
    public readonly caql!: pulumi.Output<outputs.CheckCaql | undefined>;
    public /*out*/ readonly checkByCollector!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly checkId!: pulumi.Output<string>;
    public /*out*/ readonly checks!: pulumi.Output<string[]>;
    /**
     * CloudWatch check configuration
     */
    public readonly cloudwatch!: pulumi.Output<outputs.CheckCloudwatch | undefined>;
    /**
     * The collector(s) that are responsible for gathering the metrics
     */
    public readonly collectors!: pulumi.Output<outputs.CheckCollector[] | undefined>;
    /**
     * Consul check configuration
     */
    public readonly consul!: pulumi.Output<outputs.CheckConsul | undefined>;
    public /*out*/ readonly created!: pulumi.Output<number>;
    /**
     * DNS check configuration
     */
    public readonly dns!: pulumi.Output<outputs.CheckDns | undefined>;
    /**
     * External check configuration
     */
    public readonly external!: pulumi.Output<outputs.CheckExternal | undefined>;
    /**
     * HTTP check configuration
     */
    public readonly http!: pulumi.Output<outputs.CheckHttp | undefined>;
    /**
     * HTTP Trap check configuration
     */
    public readonly httptrap!: pulumi.Output<outputs.CheckHttptrap | undefined>;
    /**
     * ICMP ping check configuration
     */
    public readonly icmpPing!: pulumi.Output<outputs.CheckIcmpPing | undefined>;
    /**
     * JMX check configuration
     */
    public readonly jmx!: pulumi.Output<outputs.CheckJmx | undefined>;
    /**
     * JSON check configuration
     */
    public readonly json!: pulumi.Output<outputs.CheckJson | undefined>;
    public /*out*/ readonly lastModified!: pulumi.Output<number>;
    public /*out*/ readonly lastModifiedBy!: pulumi.Output<string>;
    /**
     * Memcached check configuration
     */
    public readonly memcached!: pulumi.Output<outputs.CheckMemcached | undefined>;
    /**
     * Allow/deny configuration for regex based metric ingestion
     */
    public readonly metricFilters!: pulumi.Output<outputs.CheckMetricFilter[] | undefined>;
    /**
     * Setting a metric_limit will enable all (-1), disable (0), or allow up to the specified limit of metrics for this check
     * ("N+", where N is a positive integer)
     */
    public readonly metricLimit!: pulumi.Output<number>;
    /**
     * Configuration for a stream of metrics
     */
    public readonly metrics!: pulumi.Output<outputs.CheckMetric[] | undefined>;
    /**
     * MySQL check configuration
     */
    public readonly mysql!: pulumi.Output<outputs.CheckMysql | undefined>;
    /**
     * The name of the check bundle that will be displayed in the web interface
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notes about this check bundle
     */
    public readonly notes!: pulumi.Output<string>;
    /**
     * NTP check configuration
     */
    public readonly ntp!: pulumi.Output<outputs.CheckNtp | undefined>;
    /**
     * The period between each time the check is made
     */
    public readonly period!: pulumi.Output<string>;
    /**
     * PostgreSQL check configuration
     */
    public readonly postgresql!: pulumi.Output<outputs.CheckPostgresql | undefined>;
    /**
     * Prometheus URL scraper check configuration
     */
    public readonly promtext!: pulumi.Output<outputs.CheckPromtext | undefined>;
    /**
     * Redis check configuration
     */
    public readonly redis!: pulumi.Output<outputs.CheckRedis | undefined>;
    public /*out*/ readonly reverseConnectUrls!: pulumi.Output<string[]>;
    /**
     * SMTP check configuration
     */
    public readonly smtp!: pulumi.Output<outputs.CheckSmtp | undefined>;
    /**
     * SNMP check configuration
     */
    public readonly snmp!: pulumi.Output<outputs.CheckSnmp | undefined>;
    /**
     * SSH2 check configuration
     */
    public readonly ssh2!: pulumi.Output<outputs.CheckSsh2 | undefined>;
    /**
     * statsd check configuration
     */
    public readonly statsd!: pulumi.Output<outputs.CheckStatsd | undefined>;
    /**
     * A list of tags assigned to the check
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * The target of the check (e.g. hostname, URL, IP, etc)
     */
    public readonly target!: pulumi.Output<string>;
    /**
     * TCP check configuration
     */
    public readonly tcp!: pulumi.Output<outputs.CheckTcp | undefined>;
    /**
     * The length of time in seconds (and fractions of a second) before the check will timeout if no response is returned to
     * the collector
     */
    public readonly timeout!: pulumi.Output<string>;
    /**
     * The check type
     */
    public readonly type!: pulumi.Output<string>;
    public /*out*/ readonly uuids!: pulumi.Output<string[]>;

    /**
     * Create a Check resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CheckArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CheckArgs | CheckState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CheckState | undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["caql"] = state ? state.caql : undefined;
            resourceInputs["checkByCollector"] = state ? state.checkByCollector : undefined;
            resourceInputs["checkId"] = state ? state.checkId : undefined;
            resourceInputs["checks"] = state ? state.checks : undefined;
            resourceInputs["cloudwatch"] = state ? state.cloudwatch : undefined;
            resourceInputs["collectors"] = state ? state.collectors : undefined;
            resourceInputs["consul"] = state ? state.consul : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["dns"] = state ? state.dns : undefined;
            resourceInputs["external"] = state ? state.external : undefined;
            resourceInputs["http"] = state ? state.http : undefined;
            resourceInputs["httptrap"] = state ? state.httptrap : undefined;
            resourceInputs["icmpPing"] = state ? state.icmpPing : undefined;
            resourceInputs["jmx"] = state ? state.jmx : undefined;
            resourceInputs["json"] = state ? state.json : undefined;
            resourceInputs["lastModified"] = state ? state.lastModified : undefined;
            resourceInputs["lastModifiedBy"] = state ? state.lastModifiedBy : undefined;
            resourceInputs["memcached"] = state ? state.memcached : undefined;
            resourceInputs["metricFilters"] = state ? state.metricFilters : undefined;
            resourceInputs["metricLimit"] = state ? state.metricLimit : undefined;
            resourceInputs["metrics"] = state ? state.metrics : undefined;
            resourceInputs["mysql"] = state ? state.mysql : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notes"] = state ? state.notes : undefined;
            resourceInputs["ntp"] = state ? state.ntp : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["postgresql"] = state ? state.postgresql : undefined;
            resourceInputs["promtext"] = state ? state.promtext : undefined;
            resourceInputs["redis"] = state ? state.redis : undefined;
            resourceInputs["reverseConnectUrls"] = state ? state.reverseConnectUrls : undefined;
            resourceInputs["smtp"] = state ? state.smtp : undefined;
            resourceInputs["snmp"] = state ? state.snmp : undefined;
            resourceInputs["ssh2"] = state ? state.ssh2 : undefined;
            resourceInputs["statsd"] = state ? state.statsd : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
            resourceInputs["tcp"] = state ? state.tcp : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uuids"] = state ? state.uuids : undefined;
        } else {
            const args = argsOrState as CheckArgs | undefined;
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["caql"] = args ? args.caql : undefined;
            resourceInputs["cloudwatch"] = args ? args.cloudwatch : undefined;
            resourceInputs["collectors"] = args ? args.collectors : undefined;
            resourceInputs["consul"] = args ? args.consul : undefined;
            resourceInputs["dns"] = args ? args.dns : undefined;
            resourceInputs["external"] = args ? args.external : undefined;
            resourceInputs["http"] = args ? args.http : undefined;
            resourceInputs["httptrap"] = args ? args.httptrap : undefined;
            resourceInputs["icmpPing"] = args ? args.icmpPing : undefined;
            resourceInputs["jmx"] = args ? args.jmx : undefined;
            resourceInputs["json"] = args ? args.json : undefined;
            resourceInputs["memcached"] = args ? args.memcached : undefined;
            resourceInputs["metricFilters"] = args ? args.metricFilters : undefined;
            resourceInputs["metricLimit"] = args ? args.metricLimit : undefined;
            resourceInputs["metrics"] = args ? args.metrics : undefined;
            resourceInputs["mysql"] = args ? args.mysql : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notes"] = args ? args.notes : undefined;
            resourceInputs["ntp"] = args ? args.ntp : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["postgresql"] = args ? args.postgresql : undefined;
            resourceInputs["promtext"] = args ? args.promtext : undefined;
            resourceInputs["redis"] = args ? args.redis : undefined;
            resourceInputs["smtp"] = args ? args.smtp : undefined;
            resourceInputs["snmp"] = args ? args.snmp : undefined;
            resourceInputs["ssh2"] = args ? args.ssh2 : undefined;
            resourceInputs["statsd"] = args ? args.statsd : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["tcp"] = args ? args.tcp : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["checkByCollector"] = undefined /*out*/;
            resourceInputs["checkId"] = undefined /*out*/;
            resourceInputs["checks"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["lastModified"] = undefined /*out*/;
            resourceInputs["lastModifiedBy"] = undefined /*out*/;
            resourceInputs["reverseConnectUrls"] = undefined /*out*/;
            resourceInputs["uuids"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Check.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Check resources.
 */
export interface CheckState {
    /**
     * If the check is activate or disabled
     */
    active?: pulumi.Input<boolean>;
    /**
     * CAQL check configuration
     */
    caql?: pulumi.Input<inputs.CheckCaql>;
    checkByCollector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    checkId?: pulumi.Input<string>;
    checks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * CloudWatch check configuration
     */
    cloudwatch?: pulumi.Input<inputs.CheckCloudwatch>;
    /**
     * The collector(s) that are responsible for gathering the metrics
     */
    collectors?: pulumi.Input<pulumi.Input<inputs.CheckCollector>[]>;
    /**
     * Consul check configuration
     */
    consul?: pulumi.Input<inputs.CheckConsul>;
    created?: pulumi.Input<number>;
    /**
     * DNS check configuration
     */
    dns?: pulumi.Input<inputs.CheckDns>;
    /**
     * External check configuration
     */
    external?: pulumi.Input<inputs.CheckExternal>;
    /**
     * HTTP check configuration
     */
    http?: pulumi.Input<inputs.CheckHttp>;
    /**
     * HTTP Trap check configuration
     */
    httptrap?: pulumi.Input<inputs.CheckHttptrap>;
    /**
     * ICMP ping check configuration
     */
    icmpPing?: pulumi.Input<inputs.CheckIcmpPing>;
    /**
     * JMX check configuration
     */
    jmx?: pulumi.Input<inputs.CheckJmx>;
    /**
     * JSON check configuration
     */
    json?: pulumi.Input<inputs.CheckJson>;
    lastModified?: pulumi.Input<number>;
    lastModifiedBy?: pulumi.Input<string>;
    /**
     * Memcached check configuration
     */
    memcached?: pulumi.Input<inputs.CheckMemcached>;
    /**
     * Allow/deny configuration for regex based metric ingestion
     */
    metricFilters?: pulumi.Input<pulumi.Input<inputs.CheckMetricFilter>[]>;
    /**
     * Setting a metric_limit will enable all (-1), disable (0), or allow up to the specified limit of metrics for this check
     * ("N+", where N is a positive integer)
     */
    metricLimit?: pulumi.Input<number>;
    /**
     * Configuration for a stream of metrics
     */
    metrics?: pulumi.Input<pulumi.Input<inputs.CheckMetric>[]>;
    /**
     * MySQL check configuration
     */
    mysql?: pulumi.Input<inputs.CheckMysql>;
    /**
     * The name of the check bundle that will be displayed in the web interface
     */
    name?: pulumi.Input<string>;
    /**
     * Notes about this check bundle
     */
    notes?: pulumi.Input<string>;
    /**
     * NTP check configuration
     */
    ntp?: pulumi.Input<inputs.CheckNtp>;
    /**
     * The period between each time the check is made
     */
    period?: pulumi.Input<string>;
    /**
     * PostgreSQL check configuration
     */
    postgresql?: pulumi.Input<inputs.CheckPostgresql>;
    /**
     * Prometheus URL scraper check configuration
     */
    promtext?: pulumi.Input<inputs.CheckPromtext>;
    /**
     * Redis check configuration
     */
    redis?: pulumi.Input<inputs.CheckRedis>;
    reverseConnectUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * SMTP check configuration
     */
    smtp?: pulumi.Input<inputs.CheckSmtp>;
    /**
     * SNMP check configuration
     */
    snmp?: pulumi.Input<inputs.CheckSnmp>;
    /**
     * SSH2 check configuration
     */
    ssh2?: pulumi.Input<inputs.CheckSsh2>;
    /**
     * statsd check configuration
     */
    statsd?: pulumi.Input<inputs.CheckStatsd>;
    /**
     * A list of tags assigned to the check
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The target of the check (e.g. hostname, URL, IP, etc)
     */
    target?: pulumi.Input<string>;
    /**
     * TCP check configuration
     */
    tcp?: pulumi.Input<inputs.CheckTcp>;
    /**
     * The length of time in seconds (and fractions of a second) before the check will timeout if no response is returned to
     * the collector
     */
    timeout?: pulumi.Input<string>;
    /**
     * The check type
     */
    type?: pulumi.Input<string>;
    uuids?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Check resource.
 */
export interface CheckArgs {
    /**
     * If the check is activate or disabled
     */
    active?: pulumi.Input<boolean>;
    /**
     * CAQL check configuration
     */
    caql?: pulumi.Input<inputs.CheckCaql>;
    /**
     * CloudWatch check configuration
     */
    cloudwatch?: pulumi.Input<inputs.CheckCloudwatch>;
    /**
     * The collector(s) that are responsible for gathering the metrics
     */
    collectors?: pulumi.Input<pulumi.Input<inputs.CheckCollector>[]>;
    /**
     * Consul check configuration
     */
    consul?: pulumi.Input<inputs.CheckConsul>;
    /**
     * DNS check configuration
     */
    dns?: pulumi.Input<inputs.CheckDns>;
    /**
     * External check configuration
     */
    external?: pulumi.Input<inputs.CheckExternal>;
    /**
     * HTTP check configuration
     */
    http?: pulumi.Input<inputs.CheckHttp>;
    /**
     * HTTP Trap check configuration
     */
    httptrap?: pulumi.Input<inputs.CheckHttptrap>;
    /**
     * ICMP ping check configuration
     */
    icmpPing?: pulumi.Input<inputs.CheckIcmpPing>;
    /**
     * JMX check configuration
     */
    jmx?: pulumi.Input<inputs.CheckJmx>;
    /**
     * JSON check configuration
     */
    json?: pulumi.Input<inputs.CheckJson>;
    /**
     * Memcached check configuration
     */
    memcached?: pulumi.Input<inputs.CheckMemcached>;
    /**
     * Allow/deny configuration for regex based metric ingestion
     */
    metricFilters?: pulumi.Input<pulumi.Input<inputs.CheckMetricFilter>[]>;
    /**
     * Setting a metric_limit will enable all (-1), disable (0), or allow up to the specified limit of metrics for this check
     * ("N+", where N is a positive integer)
     */
    metricLimit?: pulumi.Input<number>;
    /**
     * Configuration for a stream of metrics
     */
    metrics?: pulumi.Input<pulumi.Input<inputs.CheckMetric>[]>;
    /**
     * MySQL check configuration
     */
    mysql?: pulumi.Input<inputs.CheckMysql>;
    /**
     * The name of the check bundle that will be displayed in the web interface
     */
    name?: pulumi.Input<string>;
    /**
     * Notes about this check bundle
     */
    notes?: pulumi.Input<string>;
    /**
     * NTP check configuration
     */
    ntp?: pulumi.Input<inputs.CheckNtp>;
    /**
     * The period between each time the check is made
     */
    period?: pulumi.Input<string>;
    /**
     * PostgreSQL check configuration
     */
    postgresql?: pulumi.Input<inputs.CheckPostgresql>;
    /**
     * Prometheus URL scraper check configuration
     */
    promtext?: pulumi.Input<inputs.CheckPromtext>;
    /**
     * Redis check configuration
     */
    redis?: pulumi.Input<inputs.CheckRedis>;
    /**
     * SMTP check configuration
     */
    smtp?: pulumi.Input<inputs.CheckSmtp>;
    /**
     * SNMP check configuration
     */
    snmp?: pulumi.Input<inputs.CheckSnmp>;
    /**
     * SSH2 check configuration
     */
    ssh2?: pulumi.Input<inputs.CheckSsh2>;
    /**
     * statsd check configuration
     */
    statsd?: pulumi.Input<inputs.CheckStatsd>;
    /**
     * A list of tags assigned to the check
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The target of the check (e.g. hostname, URL, IP, etc)
     */
    target?: pulumi.Input<string>;
    /**
     * TCP check configuration
     */
    tcp?: pulumi.Input<inputs.CheckTcp>;
    /**
     * The length of time in seconds (and fractions of a second) before the check will timeout if no response is returned to
     * the collector
     */
    timeout?: pulumi.Input<string>;
    /**
     * The check type
     */
    type?: pulumi.Input<string>;
}
