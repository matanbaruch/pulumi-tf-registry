// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RuleSet extends pulumi.CustomResource {
    /**
     * Get an existing RuleSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RuleSetState, opts?: pulumi.CustomResourceOptions): RuleSet {
        return new RuleSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'circonus:index/ruleSet:RuleSet';

    /**
     * Returns true if the given object is an instance of RuleSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RuleSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RuleSet.__pulumiType;
    }

    /**
     * The CID of the check that contains the metric for this rule set
     */
    public readonly check!: pulumi.Output<string>;
    /**
     * A rule to execute for this rule set
     */
    public readonly ifs!: pulumi.Output<outputs.RuleSetIf[]>;
    /**
     * URL to show users when this rule set is active (e.g. wiki)
     */
    public readonly link!: pulumi.Output<string>;
    /**
     * The tag filter a pattern match ruleset will user
     */
    public readonly metricFilter!: pulumi.Output<string | undefined>;
    /**
     * The name of the metric stream within a check to register the rule set with
     */
    public readonly metricName!: pulumi.Output<string | undefined>;
    /**
     * The pattern match (regex) of the metric stream within a check to register the rule set with
     */
    public readonly metricPattern!: pulumi.Output<string | undefined>;
    /**
     * The type of data flowing through the specified metric stream
     */
    public readonly metricType!: pulumi.Output<string | undefined>;
    /**
     * The name of this ruleset, if omitted will default to the metric_name (or pattern) and filter
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notes describing this rule set
     */
    public readonly notes!: pulumi.Output<string>;
    /**
     * Parent CID that must be healthy for this rule set to be active
     */
    public readonly parent!: pulumi.Output<string>;
    /**
     * out
     */
    public /*out*/ readonly ruleSetId!: pulumi.Output<string>;
    /**
     * Tags associated with this rule set
     *
     * @deprecated Deprecated
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Opaque data that can be supplied with the result and appears in webhooks when alerts go off
     */
    public readonly userJson!: pulumi.Output<string | undefined>;

    /**
     * Create a RuleSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RuleSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RuleSetArgs | RuleSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RuleSetState | undefined;
            resourceInputs["check"] = state ? state.check : undefined;
            resourceInputs["ifs"] = state ? state.ifs : undefined;
            resourceInputs["link"] = state ? state.link : undefined;
            resourceInputs["metricFilter"] = state ? state.metricFilter : undefined;
            resourceInputs["metricName"] = state ? state.metricName : undefined;
            resourceInputs["metricPattern"] = state ? state.metricPattern : undefined;
            resourceInputs["metricType"] = state ? state.metricType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notes"] = state ? state.notes : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["ruleSetId"] = state ? state.ruleSetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["userJson"] = state ? state.userJson : undefined;
        } else {
            const args = argsOrState as RuleSetArgs | undefined;
            if ((!args || args.check === undefined) && !opts.urn) {
                throw new Error("Missing required property 'check'");
            }
            if ((!args || args.ifs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ifs'");
            }
            resourceInputs["check"] = args ? args.check : undefined;
            resourceInputs["ifs"] = args ? args.ifs : undefined;
            resourceInputs["link"] = args ? args.link : undefined;
            resourceInputs["metricFilter"] = args ? args.metricFilter : undefined;
            resourceInputs["metricName"] = args ? args.metricName : undefined;
            resourceInputs["metricPattern"] = args ? args.metricPattern : undefined;
            resourceInputs["metricType"] = args ? args.metricType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notes"] = args ? args.notes : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userJson"] = args ? args.userJson : undefined;
            resourceInputs["ruleSetId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RuleSet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RuleSet resources.
 */
export interface RuleSetState {
    /**
     * The CID of the check that contains the metric for this rule set
     */
    check?: pulumi.Input<string>;
    /**
     * A rule to execute for this rule set
     */
    ifs?: pulumi.Input<pulumi.Input<inputs.RuleSetIf>[]>;
    /**
     * URL to show users when this rule set is active (e.g. wiki)
     */
    link?: pulumi.Input<string>;
    /**
     * The tag filter a pattern match ruleset will user
     */
    metricFilter?: pulumi.Input<string>;
    /**
     * The name of the metric stream within a check to register the rule set with
     */
    metricName?: pulumi.Input<string>;
    /**
     * The pattern match (regex) of the metric stream within a check to register the rule set with
     */
    metricPattern?: pulumi.Input<string>;
    /**
     * The type of data flowing through the specified metric stream
     */
    metricType?: pulumi.Input<string>;
    /**
     * The name of this ruleset, if omitted will default to the metric_name (or pattern) and filter
     */
    name?: pulumi.Input<string>;
    /**
     * Notes describing this rule set
     */
    notes?: pulumi.Input<string>;
    /**
     * Parent CID that must be healthy for this rule set to be active
     */
    parent?: pulumi.Input<string>;
    /**
     * out
     */
    ruleSetId?: pulumi.Input<string>;
    /**
     * Tags associated with this rule set
     *
     * @deprecated Deprecated
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Opaque data that can be supplied with the result and appears in webhooks when alerts go off
     */
    userJson?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RuleSet resource.
 */
export interface RuleSetArgs {
    /**
     * The CID of the check that contains the metric for this rule set
     */
    check: pulumi.Input<string>;
    /**
     * A rule to execute for this rule set
     */
    ifs: pulumi.Input<pulumi.Input<inputs.RuleSetIf>[]>;
    /**
     * URL to show users when this rule set is active (e.g. wiki)
     */
    link?: pulumi.Input<string>;
    /**
     * The tag filter a pattern match ruleset will user
     */
    metricFilter?: pulumi.Input<string>;
    /**
     * The name of the metric stream within a check to register the rule set with
     */
    metricName?: pulumi.Input<string>;
    /**
     * The pattern match (regex) of the metric stream within a check to register the rule set with
     */
    metricPattern?: pulumi.Input<string>;
    /**
     * The type of data flowing through the specified metric stream
     */
    metricType?: pulumi.Input<string>;
    /**
     * The name of this ruleset, if omitted will default to the metric_name (or pattern) and filter
     */
    name?: pulumi.Input<string>;
    /**
     * Notes describing this rule set
     */
    notes?: pulumi.Input<string>;
    /**
     * Parent CID that must be healthy for this rule set to be active
     */
    parent?: pulumi.Input<string>;
    /**
     * Tags associated with this rule set
     *
     * @deprecated Deprecated
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Opaque data that can be supplied with the result and appears in webhooks when alerts go off
     */
    userJson?: pulumi.Input<string>;
}
