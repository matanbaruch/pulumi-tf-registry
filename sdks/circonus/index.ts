// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { CheckArgs, CheckState } from "./check";
export type Check = import("./check").Check;
export const Check: typeof import("./check").Check = null as any;
utilities.lazyLoad(exports, ["Check"], () => require("./check"));

export { ContactGroupArgs, ContactGroupState } from "./contactGroup";
export type ContactGroup = import("./contactGroup").ContactGroup;
export const ContactGroup: typeof import("./contactGroup").ContactGroup = null as any;
utilities.lazyLoad(exports, ["ContactGroup"], () => require("./contactGroup"));

export { DashboardArgs, DashboardState } from "./dashboard";
export type Dashboard = import("./dashboard").Dashboard;
export const Dashboard: typeof import("./dashboard").Dashboard = null as any;
utilities.lazyLoad(exports, ["Dashboard"], () => require("./dashboard"));

export { GetAccountArgs, GetAccountResult, GetAccountOutputArgs } from "./getAccount";
export const getAccount: typeof import("./getAccount").getAccount = null as any;
export const getAccountOutput: typeof import("./getAccount").getAccountOutput = null as any;
utilities.lazyLoad(exports, ["getAccount","getAccountOutput"], () => require("./getAccount"));

export { GetCollectorArgs, GetCollectorResult, GetCollectorOutputArgs } from "./getCollector";
export const getCollector: typeof import("./getCollector").getCollector = null as any;
export const getCollectorOutput: typeof import("./getCollector").getCollectorOutput = null as any;
utilities.lazyLoad(exports, ["getCollector","getCollectorOutput"], () => require("./getCollector"));

export { GraphArgs, GraphState } from "./graph";
export type Graph = import("./graph").Graph;
export const Graph: typeof import("./graph").Graph = null as any;
utilities.lazyLoad(exports, ["Graph"], () => require("./graph"));

export { MaintenanceArgs, MaintenanceState } from "./maintenance";
export type Maintenance = import("./maintenance").Maintenance;
export const Maintenance: typeof import("./maintenance").Maintenance = null as any;
utilities.lazyLoad(exports, ["Maintenance"], () => require("./maintenance"));

export { MetricArgs, MetricState } from "./metric";
export type Metric = import("./metric").Metric;
export const Metric: typeof import("./metric").Metric = null as any;
utilities.lazyLoad(exports, ["Metric"], () => require("./metric"));

export { OverlaySetArgs, OverlaySetState } from "./overlaySet";
export type OverlaySet = import("./overlaySet").OverlaySet;
export const OverlaySet: typeof import("./overlaySet").OverlaySet = null as any;
utilities.lazyLoad(exports, ["OverlaySet"], () => require("./overlaySet"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RuleSetArgs, RuleSetState } from "./ruleSet";
export type RuleSet = import("./ruleSet").RuleSet;
export const RuleSet: typeof import("./ruleSet").RuleSet = null as any;
utilities.lazyLoad(exports, ["RuleSet"], () => require("./ruleSet"));

export { RuleSetGroupArgs, RuleSetGroupState } from "./ruleSetGroup";
export type RuleSetGroup = import("./ruleSetGroup").RuleSetGroup;
export const RuleSetGroup: typeof import("./ruleSetGroup").RuleSetGroup = null as any;
utilities.lazyLoad(exports, ["RuleSetGroup"], () => require("./ruleSetGroup"));

export { WorksheetArgs, WorksheetState } from "./worksheet";
export type Worksheet = import("./worksheet").Worksheet;
export const Worksheet: typeof import("./worksheet").Worksheet = null as any;
utilities.lazyLoad(exports, ["Worksheet"], () => require("./worksheet"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "circonus:index/check:Check":
                return new Check(name, <any>undefined, { urn })
            case "circonus:index/contactGroup:ContactGroup":
                return new ContactGroup(name, <any>undefined, { urn })
            case "circonus:index/dashboard:Dashboard":
                return new Dashboard(name, <any>undefined, { urn })
            case "circonus:index/graph:Graph":
                return new Graph(name, <any>undefined, { urn })
            case "circonus:index/maintenance:Maintenance":
                return new Maintenance(name, <any>undefined, { urn })
            case "circonus:index/metric:Metric":
                return new Metric(name, <any>undefined, { urn })
            case "circonus:index/overlaySet:OverlaySet":
                return new OverlaySet(name, <any>undefined, { urn })
            case "circonus:index/ruleSet:RuleSet":
                return new RuleSet(name, <any>undefined, { urn })
            case "circonus:index/ruleSetGroup:RuleSetGroup":
                return new RuleSetGroup(name, <any>undefined, { urn })
            case "circonus:index/worksheet:Worksheet":
                return new Worksheet(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("circonus", "index/check", _module)
pulumi.runtime.registerResourceModule("circonus", "index/contactGroup", _module)
pulumi.runtime.registerResourceModule("circonus", "index/dashboard", _module)
pulumi.runtime.registerResourceModule("circonus", "index/graph", _module)
pulumi.runtime.registerResourceModule("circonus", "index/maintenance", _module)
pulumi.runtime.registerResourceModule("circonus", "index/metric", _module)
pulumi.runtime.registerResourceModule("circonus", "index/overlaySet", _module)
pulumi.runtime.registerResourceModule("circonus", "index/ruleSet", _module)
pulumi.runtime.registerResourceModule("circonus", "index/ruleSetGroup", _module)
pulumi.runtime.registerResourceModule("circonus", "index/worksheet", _module)
pulumi.runtime.registerResourcePackage("circonus", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:circonus") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
