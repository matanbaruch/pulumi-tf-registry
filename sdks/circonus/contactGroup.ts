// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ContactGroup extends pulumi.CustomResource {
    /**
     * Get an existing ContactGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContactGroupState, opts?: pulumi.CustomResourceOptions): ContactGroup {
        return new ContactGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'circonus:index/contactGroup:ContactGroup';

    /**
     * Returns true if the given object is an instance of ContactGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContactGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContactGroup.__pulumiType;
    }

    public readonly aggregationWindow!: pulumi.Output<string | undefined>;
    public readonly alertOptions!: pulumi.Output<outputs.ContactGroupAlertOption[] | undefined>;
    public readonly alwaysSendClear!: pulumi.Output<boolean | undefined>;
    public readonly email!: pulumi.Output<outputs.ContactGroupEmail | undefined>;
    public readonly groupType!: pulumi.Output<string | undefined>;
    public readonly https!: pulumi.Output<outputs.ContactGroupHttp[] | undefined>;
    public /*out*/ readonly lastModified!: pulumi.Output<number>;
    public /*out*/ readonly lastModifiedBy!: pulumi.Output<string>;
    public readonly longMessage!: pulumi.Output<string | undefined>;
    public readonly longSubject!: pulumi.Output<string | undefined>;
    public readonly longSummary!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly pagerDuties!: pulumi.Output<outputs.ContactGroupPagerDuty[] | undefined>;
    public readonly shortMessage!: pulumi.Output<string | undefined>;
    public readonly shortSummary!: pulumi.Output<string | undefined>;
    public readonly slacks!: pulumi.Output<outputs.ContactGroupSlack[] | undefined>;
    public readonly sms!: pulumi.Output<outputs.ContactGroupSms | undefined>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly victorops!: pulumi.Output<outputs.ContactGroupVictorop[] | undefined>;

    /**
     * Create a ContactGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ContactGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContactGroupArgs | ContactGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContactGroupState | undefined;
            resourceInputs["aggregationWindow"] = state ? state.aggregationWindow : undefined;
            resourceInputs["alertOptions"] = state ? state.alertOptions : undefined;
            resourceInputs["alwaysSendClear"] = state ? state.alwaysSendClear : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["groupType"] = state ? state.groupType : undefined;
            resourceInputs["https"] = state ? state.https : undefined;
            resourceInputs["lastModified"] = state ? state.lastModified : undefined;
            resourceInputs["lastModifiedBy"] = state ? state.lastModifiedBy : undefined;
            resourceInputs["longMessage"] = state ? state.longMessage : undefined;
            resourceInputs["longSubject"] = state ? state.longSubject : undefined;
            resourceInputs["longSummary"] = state ? state.longSummary : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pagerDuties"] = state ? state.pagerDuties : undefined;
            resourceInputs["shortMessage"] = state ? state.shortMessage : undefined;
            resourceInputs["shortSummary"] = state ? state.shortSummary : undefined;
            resourceInputs["slacks"] = state ? state.slacks : undefined;
            resourceInputs["sms"] = state ? state.sms : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["victorops"] = state ? state.victorops : undefined;
        } else {
            const args = argsOrState as ContactGroupArgs | undefined;
            resourceInputs["aggregationWindow"] = args ? args.aggregationWindow : undefined;
            resourceInputs["alertOptions"] = args ? args.alertOptions : undefined;
            resourceInputs["alwaysSendClear"] = args ? args.alwaysSendClear : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["groupType"] = args ? args.groupType : undefined;
            resourceInputs["https"] = args ? args.https : undefined;
            resourceInputs["longMessage"] = args ? args.longMessage : undefined;
            resourceInputs["longSubject"] = args ? args.longSubject : undefined;
            resourceInputs["longSummary"] = args ? args.longSummary : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pagerDuties"] = args ? args.pagerDuties : undefined;
            resourceInputs["shortMessage"] = args ? args.shortMessage : undefined;
            resourceInputs["shortSummary"] = args ? args.shortSummary : undefined;
            resourceInputs["slacks"] = args ? args.slacks : undefined;
            resourceInputs["sms"] = args ? args.sms : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["victorops"] = args ? args.victorops : undefined;
            resourceInputs["lastModified"] = undefined /*out*/;
            resourceInputs["lastModifiedBy"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContactGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ContactGroup resources.
 */
export interface ContactGroupState {
    aggregationWindow?: pulumi.Input<string>;
    alertOptions?: pulumi.Input<pulumi.Input<inputs.ContactGroupAlertOption>[]>;
    alwaysSendClear?: pulumi.Input<boolean>;
    email?: pulumi.Input<inputs.ContactGroupEmail>;
    groupType?: pulumi.Input<string>;
    https?: pulumi.Input<pulumi.Input<inputs.ContactGroupHttp>[]>;
    lastModified?: pulumi.Input<number>;
    lastModifiedBy?: pulumi.Input<string>;
    longMessage?: pulumi.Input<string>;
    longSubject?: pulumi.Input<string>;
    longSummary?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pagerDuties?: pulumi.Input<pulumi.Input<inputs.ContactGroupPagerDuty>[]>;
    shortMessage?: pulumi.Input<string>;
    shortSummary?: pulumi.Input<string>;
    slacks?: pulumi.Input<pulumi.Input<inputs.ContactGroupSlack>[]>;
    sms?: pulumi.Input<inputs.ContactGroupSms>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    victorops?: pulumi.Input<pulumi.Input<inputs.ContactGroupVictorop>[]>;
}

/**
 * The set of arguments for constructing a ContactGroup resource.
 */
export interface ContactGroupArgs {
    aggregationWindow?: pulumi.Input<string>;
    alertOptions?: pulumi.Input<pulumi.Input<inputs.ContactGroupAlertOption>[]>;
    alwaysSendClear?: pulumi.Input<boolean>;
    email?: pulumi.Input<inputs.ContactGroupEmail>;
    groupType?: pulumi.Input<string>;
    https?: pulumi.Input<pulumi.Input<inputs.ContactGroupHttp>[]>;
    longMessage?: pulumi.Input<string>;
    longSubject?: pulumi.Input<string>;
    longSummary?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pagerDuties?: pulumi.Input<pulumi.Input<inputs.ContactGroupPagerDuty>[]>;
    shortMessage?: pulumi.Input<string>;
    shortSummary?: pulumi.Input<string>;
    slacks?: pulumi.Input<pulumi.Input<inputs.ContactGroupSlack>[]>;
    sms?: pulumi.Input<inputs.ContactGroupSms>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    victorops?: pulumi.Input<pulumi.Input<inputs.ContactGroupVictorop>[]>;
}
