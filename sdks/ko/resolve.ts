// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Resolve extends pulumi.CustomResource {
    /**
     * Get an existing Resolve resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResolveState, opts?: pulumi.CustomResourceOptions): Resolve {
        return new Resolve(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ko:index/resolve:Resolve';

    /**
     * Returns true if the given object is an instance of Resolve.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Resolve {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Resolve.__pulumiType;
    }

    public readonly baseImage!: pulumi.Output<string | undefined>;
    /**
     * Filenames, directorys, or URLs to files to use to create the resource
     */
    public readonly filenames!: pulumi.Output<string[]>;
    /**
     * A list of resolved manifests in a 'yamldecode'able format. Note that whitespaces and nil docs will be stripped from
     * these results.
     */
    public /*out*/ readonly manifests!: pulumi.Output<string[]>;
    /**
     * Which platform to use when pulling a multi-platform base. Format: all | <os>[/<arch>[/<variant>]][,platform]*
     */
    public readonly platforms!: pulumi.Output<string[] | undefined>;
    /**
     * Push images to KO_DOCKER_REPO
     */
    public readonly push!: pulumi.Output<boolean | undefined>;
    /**
     * Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized
     * within the same directory.
     */
    public readonly recursive!: pulumi.Output<boolean | undefined>;
    /**
     * The SBOM media type to use (none will disable SBOM synthesis and upload, also supports: spdx, cyclonedx, go.version-m).
     */
    public readonly sbom!: pulumi.Output<string | undefined>;
    /**
     * Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)
     */
    public readonly selector!: pulumi.Output<string | undefined>;
    /**
     * Which tags to use for the produced image instead of the default 'latest' tag
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Working directory for the build
     */
    public readonly workingDir!: pulumi.Output<string | undefined>;

    /**
     * Create a Resolve resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResolveArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResolveArgs | ResolveState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResolveState | undefined;
            resourceInputs["baseImage"] = state ? state.baseImage : undefined;
            resourceInputs["filenames"] = state ? state.filenames : undefined;
            resourceInputs["manifests"] = state ? state.manifests : undefined;
            resourceInputs["platforms"] = state ? state.platforms : undefined;
            resourceInputs["push"] = state ? state.push : undefined;
            resourceInputs["recursive"] = state ? state.recursive : undefined;
            resourceInputs["sbom"] = state ? state.sbom : undefined;
            resourceInputs["selector"] = state ? state.selector : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["workingDir"] = state ? state.workingDir : undefined;
        } else {
            const args = argsOrState as ResolveArgs | undefined;
            if ((!args || args.filenames === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filenames'");
            }
            resourceInputs["baseImage"] = args ? args.baseImage : undefined;
            resourceInputs["filenames"] = args ? args.filenames : undefined;
            resourceInputs["platforms"] = args ? args.platforms : undefined;
            resourceInputs["push"] = args ? args.push : undefined;
            resourceInputs["recursive"] = args ? args.recursive : undefined;
            resourceInputs["sbom"] = args ? args.sbom : undefined;
            resourceInputs["selector"] = args ? args.selector : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["workingDir"] = args ? args.workingDir : undefined;
            resourceInputs["manifests"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Resolve.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Resolve resources.
 */
export interface ResolveState {
    baseImage?: pulumi.Input<string>;
    /**
     * Filenames, directorys, or URLs to files to use to create the resource
     */
    filenames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of resolved manifests in a 'yamldecode'able format. Note that whitespaces and nil docs will be stripped from
     * these results.
     */
    manifests?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Which platform to use when pulling a multi-platform base. Format: all | <os>[/<arch>[/<variant>]][,platform]*
     */
    platforms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Push images to KO_DOCKER_REPO
     */
    push?: pulumi.Input<boolean>;
    /**
     * Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized
     * within the same directory.
     */
    recursive?: pulumi.Input<boolean>;
    /**
     * The SBOM media type to use (none will disable SBOM synthesis and upload, also supports: spdx, cyclonedx, go.version-m).
     */
    sbom?: pulumi.Input<string>;
    /**
     * Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)
     */
    selector?: pulumi.Input<string>;
    /**
     * Which tags to use for the produced image instead of the default 'latest' tag
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Working directory for the build
     */
    workingDir?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Resolve resource.
 */
export interface ResolveArgs {
    baseImage?: pulumi.Input<string>;
    /**
     * Filenames, directorys, or URLs to files to use to create the resource
     */
    filenames: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Which platform to use when pulling a multi-platform base. Format: all | <os>[/<arch>[/<variant>]][,platform]*
     */
    platforms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Push images to KO_DOCKER_REPO
     */
    push?: pulumi.Input<boolean>;
    /**
     * Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized
     * within the same directory.
     */
    recursive?: pulumi.Input<boolean>;
    /**
     * The SBOM media type to use (none will disable SBOM synthesis and upload, also supports: spdx, cyclonedx, go.version-m).
     */
    sbom?: pulumi.Input<string>;
    /**
     * Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)
     */
    selector?: pulumi.Input<string>;
    /**
     * Which tags to use for the produced image instead of the default 'latest' tag
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Working directory for the build
     */
    workingDir?: pulumi.Input<string>;
}
