// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Image extends pulumi.CustomResource {
    /**
     * Get an existing Image resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageState, opts?: pulumi.CustomResourceOptions): Image {
        return new Image(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ko:index/image:Image';

    /**
     * Returns true if the given object is an instance of Image.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Image {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Image.__pulumiType;
    }

    /**
     * base image to use
     */
    public readonly baseImage!: pulumi.Output<string | undefined>;
    /**
     * built image reference by digest
     */
    public /*out*/ readonly imageRef!: pulumi.Output<string>;
    /**
     * import path to build
     */
    public readonly importpath!: pulumi.Output<string>;
    /**
     * Which platform to use when pulling a multi-platform base. Format: all | <os>[/<arch>[/<variant>]][,platform]*
     */
    public readonly platforms!: pulumi.Output<string[] | undefined>;
    /**
     * Container repository to publish images to. If set, this overrides the provider's docker_repo, and the image name will be
     * exactly the specified `repo`, without the importpath appended.
     */
    public readonly repo!: pulumi.Output<string | undefined>;
    /**
     * The SBOM media type to use (none will disable SBOM synthesis and upload, also supports: spdx, cyclonedx, go.version-m).
     */
    public readonly sbom!: pulumi.Output<string | undefined>;
    /**
     * working directory for the build
     */
    public readonly workingDir!: pulumi.Output<string | undefined>;

    /**
     * Create a Image resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageArgs | ImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImageState | undefined;
            resourceInputs["baseImage"] = state ? state.baseImage : undefined;
            resourceInputs["imageRef"] = state ? state.imageRef : undefined;
            resourceInputs["importpath"] = state ? state.importpath : undefined;
            resourceInputs["platforms"] = state ? state.platforms : undefined;
            resourceInputs["repo"] = state ? state.repo : undefined;
            resourceInputs["sbom"] = state ? state.sbom : undefined;
            resourceInputs["workingDir"] = state ? state.workingDir : undefined;
        } else {
            const args = argsOrState as ImageArgs | undefined;
            if ((!args || args.importpath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'importpath'");
            }
            resourceInputs["baseImage"] = args ? args.baseImage : undefined;
            resourceInputs["importpath"] = args ? args.importpath : undefined;
            resourceInputs["platforms"] = args ? args.platforms : undefined;
            resourceInputs["repo"] = args ? args.repo : undefined;
            resourceInputs["sbom"] = args ? args.sbom : undefined;
            resourceInputs["workingDir"] = args ? args.workingDir : undefined;
            resourceInputs["imageRef"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Image.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Image resources.
 */
export interface ImageState {
    /**
     * base image to use
     */
    baseImage?: pulumi.Input<string>;
    /**
     * built image reference by digest
     */
    imageRef?: pulumi.Input<string>;
    /**
     * import path to build
     */
    importpath?: pulumi.Input<string>;
    /**
     * Which platform to use when pulling a multi-platform base. Format: all | <os>[/<arch>[/<variant>]][,platform]*
     */
    platforms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Container repository to publish images to. If set, this overrides the provider's docker_repo, and the image name will be
     * exactly the specified `repo`, without the importpath appended.
     */
    repo?: pulumi.Input<string>;
    /**
     * The SBOM media type to use (none will disable SBOM synthesis and upload, also supports: spdx, cyclonedx, go.version-m).
     */
    sbom?: pulumi.Input<string>;
    /**
     * working directory for the build
     */
    workingDir?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Image resource.
 */
export interface ImageArgs {
    /**
     * base image to use
     */
    baseImage?: pulumi.Input<string>;
    /**
     * import path to build
     */
    importpath: pulumi.Input<string>;
    /**
     * Which platform to use when pulling a multi-platform base. Format: all | <os>[/<arch>[/<variant>]][,platform]*
     */
    platforms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Container repository to publish images to. If set, this overrides the provider's docker_repo, and the image name will be
     * exactly the specified `repo`, without the importpath appended.
     */
    repo?: pulumi.Input<string>;
    /**
     * The SBOM media type to use (none will disable SBOM synthesis and upload, also supports: spdx, cyclonedx, go.version-m).
     */
    sbom?: pulumi.Input<string>;
    /**
     * working directory for the build
     */
    workingDir?: pulumi.Input<string>;
}
