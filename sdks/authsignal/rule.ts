// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Rule extends pulumi.CustomResource {
    /**
     * Get an existing Rule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RuleState, opts?: pulumi.CustomResourceOptions): Rule {
        return new Rule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'authsignal:index/rule:Rule';

    /**
     * Returns true if the given object is an instance of Rule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Rule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Rule.__pulumiType;
    }

    /**
     * The name of the action that users perform which you will track. (e.g 'login')
     */
    public readonly actionCode!: pulumi.Output<string>;
    /**
     * The logical conditions to match tracked actions against. If the conditions are met then the rule's type will be returned
     * in the track action response.
     */
    public readonly conditions!: pulumi.Output<string>;
    /**
     * Ignore the user's preference and choose which authenticator the Pre-built UI will present by default.
     */
    public readonly defaultVerificationMethod!: pulumi.Output<string | undefined>;
    /**
     * A description of the rule.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Toggles whether or not the rule is actively applied.
     */
    public readonly isActive!: pulumi.Output<boolean>;
    /**
     * A string used to name the rule.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Determines the order which the rules are applied in, where 0 is applied first, 1 is applied second...
     */
    public readonly priority!: pulumi.Output<number>;
    /**
     * If this is set then users will be prompted to add a passkey after a challenge is completed.
     */
    public readonly promptToEnrollVerificationMethods!: pulumi.Output<string[] | undefined>;
    /**
     * The ID of the rule.
     */
    public /*out*/ readonly ruleId!: pulumi.Output<string>;
    /**
     * The ID of your tenant. This can be found in the admin portal.
     */
    public /*out*/ readonly tenantId!: pulumi.Output<string>;
    /**
     * The result that the rule should return when the conditions are met. (e.g. ALLOW, CHALLENGE)
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * A list of permitted authenticators that can be used if the type of the rule is 'CHALLENGE'.
     */
    public readonly verificationMethods!: pulumi.Output<string[] | undefined>;

    /**
     * Create a Rule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RuleArgs | RuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RuleState | undefined;
            resourceInputs["actionCode"] = state ? state.actionCode : undefined;
            resourceInputs["conditions"] = state ? state.conditions : undefined;
            resourceInputs["defaultVerificationMethod"] = state ? state.defaultVerificationMethod : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["isActive"] = state ? state.isActive : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["promptToEnrollVerificationMethods"] = state ? state.promptToEnrollVerificationMethods : undefined;
            resourceInputs["ruleId"] = state ? state.ruleId : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["verificationMethods"] = state ? state.verificationMethods : undefined;
        } else {
            const args = argsOrState as RuleArgs | undefined;
            if ((!args || args.actionCode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'actionCode'");
            }
            if ((!args || args.conditions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'conditions'");
            }
            if ((!args || args.isActive === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isActive'");
            }
            if ((!args || args.priority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["actionCode"] = args ? args.actionCode : undefined;
            resourceInputs["conditions"] = args ? args.conditions : undefined;
            resourceInputs["defaultVerificationMethod"] = args ? args.defaultVerificationMethod : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["isActive"] = args ? args.isActive : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["promptToEnrollVerificationMethods"] = args ? args.promptToEnrollVerificationMethods : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["verificationMethods"] = args ? args.verificationMethods : undefined;
            resourceInputs["ruleId"] = undefined /*out*/;
            resourceInputs["tenantId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Rule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Rule resources.
 */
export interface RuleState {
    /**
     * The name of the action that users perform which you will track. (e.g 'login')
     */
    actionCode?: pulumi.Input<string>;
    /**
     * The logical conditions to match tracked actions against. If the conditions are met then the rule's type will be returned
     * in the track action response.
     */
    conditions?: pulumi.Input<string>;
    /**
     * Ignore the user's preference and choose which authenticator the Pre-built UI will present by default.
     */
    defaultVerificationMethod?: pulumi.Input<string>;
    /**
     * A description of the rule.
     */
    description?: pulumi.Input<string>;
    /**
     * Toggles whether or not the rule is actively applied.
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * A string used to name the rule.
     */
    name?: pulumi.Input<string>;
    /**
     * Determines the order which the rules are applied in, where 0 is applied first, 1 is applied second...
     */
    priority?: pulumi.Input<number>;
    /**
     * If this is set then users will be prompted to add a passkey after a challenge is completed.
     */
    promptToEnrollVerificationMethods?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the rule.
     */
    ruleId?: pulumi.Input<string>;
    /**
     * The ID of your tenant. This can be found in the admin portal.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * The result that the rule should return when the conditions are met. (e.g. ALLOW, CHALLENGE)
     */
    type?: pulumi.Input<string>;
    /**
     * A list of permitted authenticators that can be used if the type of the rule is 'CHALLENGE'.
     */
    verificationMethods?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Rule resource.
 */
export interface RuleArgs {
    /**
     * The name of the action that users perform which you will track. (e.g 'login')
     */
    actionCode: pulumi.Input<string>;
    /**
     * The logical conditions to match tracked actions against. If the conditions are met then the rule's type will be returned
     * in the track action response.
     */
    conditions: pulumi.Input<string>;
    /**
     * Ignore the user's preference and choose which authenticator the Pre-built UI will present by default.
     */
    defaultVerificationMethod?: pulumi.Input<string>;
    /**
     * A description of the rule.
     */
    description?: pulumi.Input<string>;
    /**
     * Toggles whether or not the rule is actively applied.
     */
    isActive: pulumi.Input<boolean>;
    /**
     * A string used to name the rule.
     */
    name?: pulumi.Input<string>;
    /**
     * Determines the order which the rules are applied in, where 0 is applied first, 1 is applied second...
     */
    priority: pulumi.Input<number>;
    /**
     * If this is set then users will be prompted to add a passkey after a challenge is completed.
     */
    promptToEnrollVerificationMethods?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The result that the rule should return when the conditions are met. (e.g. ALLOW, CHALLENGE)
     */
    type: pulumi.Input<string>;
    /**
     * A list of permitted authenticators that can be used if the type of the rule is 'CHALLENGE'.
     */
    verificationMethods?: pulumi.Input<pulumi.Input<string>[]>;
}
