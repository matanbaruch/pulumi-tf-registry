// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetThemeBorders {
    buttonBorderRadius: number;
    buttonBorderWidth: number;
    cardBorderRadius: number;
    cardBorderWidth: number;
    containerBorderRadius: number;
    inputBorderRadius: number;
    inputBorderWidth: number;
}

export interface GetThemeColors {
    bodyText: string;
    buttonPrimaryBorder: string;
    buttonPrimaryText: string;
    buttonSecondaryBackground: string;
    buttonSecondaryBorder: string;
    buttonSecondaryText: string;
    cardBackground: string;
    cardBorder: string;
    containerBackground: string;
    containerBorder: string;
    critical: string;
    divider: string;
    focus: string;
    headingText: string;
    hover: string;
    icon: string;
    information: string;
    inputBackground: string;
    inputBorder: string;
    link: string;
    loader: string;
    positive: string;
}

export interface GetThemeContainer {
    contentAlignment: string;
    logoAlignment: string;
    logoHeight: number;
    logoPosition: string;
    padding: number;
    position: string;
}

export interface GetThemeDarkMode {
    borders: outputs.GetThemeDarkModeBorders;
    colors: outputs.GetThemeDarkModeColors;
    container: outputs.GetThemeDarkModeContainer;
    /**
     * The URL of an image to be used as a favicon for the tenant
     */
    faviconUrl: string;
    /**
     * The URL of an image to be used as a logo for the tenant.
     */
    logoUrl: string;
    pageBackground: outputs.GetThemeDarkModePageBackground;
    /**
     * The primary color for the tenant.
     */
    primaryColor: string;
    typography: outputs.GetThemeDarkModeTypography;
    /**
     * The URL of an image to be used as a watermark at the bottom of Authsignal's pre-built UI.
     */
    watermarkUrl: string;
}

export interface GetThemeDarkModeBorders {
    buttonBorderRadius: number;
    buttonBorderWidth: number;
    cardBorderRadius: number;
    cardBorderWidth: number;
    containerBorderRadius: number;
    inputBorderRadius: number;
    inputBorderWidth: number;
}

export interface GetThemeDarkModeColors {
    bodyText: string;
    buttonPrimaryBorder: string;
    buttonPrimaryText: string;
    buttonSecondaryBackground: string;
    buttonSecondaryBorder: string;
    buttonSecondaryText: string;
    cardBackground: string;
    cardBorder: string;
    containerBackground: string;
    containerBorder: string;
    critical: string;
    divider: string;
    focus: string;
    headingText: string;
    hover: string;
    icon: string;
    information: string;
    inputBackground: string;
    inputBorder: string;
    link: string;
    loader: string;
    positive: string;
}

export interface GetThemeDarkModeContainer {
    contentAlignment: string;
    logoAlignment: string;
    logoHeight: number;
    logoPosition: string;
    padding: number;
    position: string;
}

export interface GetThemeDarkModePageBackground {
    /**
     * The color to be used for the background in the pre-built UI.
     */
    backgroundColor: string;
    /**
     * The URL of an image which will be used as the background in the pre-built UI.
     */
    backgroundImageUrl: string;
}

export interface GetThemeDarkModeTypography {
    display: outputs.GetThemeDarkModeTypographyDisplay;
}

export interface GetThemeDarkModeTypographyDisplay {
    /**
     * The URL of a font file to be used for the tenant.
     */
    fontUrl: string;
}

export interface GetThemePageBackground {
    /**
     * The color to be used for the background in the pre-built UI.
     */
    backgroundColor: string;
    /**
     * The URL of an image which will be used as the background in the pre-built UI.
     */
    backgroundImageUrl: string;
}

export interface GetThemeTypography {
    display: outputs.GetThemeTypographyDisplay;
}

export interface GetThemeTypographyDisplay {
    /**
     * The URL of a font file to be used for the tenant.
     */
    fontUrl: string;
}

export interface ThemeBorders {
    buttonBorderRadius?: number;
    buttonBorderWidth?: number;
    cardBorderRadius?: number;
    cardBorderWidth?: number;
    containerBorderRadius?: number;
    inputBorderRadius?: number;
    inputBorderWidth?: number;
}

export interface ThemeColors {
    bodyText?: string;
    buttonPrimaryBorder?: string;
    buttonPrimaryText?: string;
    buttonSecondaryBackground?: string;
    buttonSecondaryBorder?: string;
    buttonSecondaryText?: string;
    cardBackground?: string;
    cardBorder?: string;
    containerBackground?: string;
    containerBorder?: string;
    critical?: string;
    divider?: string;
    focus?: string;
    headingText?: string;
    hover?: string;
    icon?: string;
    information?: string;
    inputBackground?: string;
    inputBorder?: string;
    link?: string;
    loader?: string;
    positive?: string;
}

export interface ThemeContainer {
    contentAlignment?: string;
    logoAlignment?: string;
    logoHeight?: number;
    logoPosition?: string;
    padding?: number;
    position?: string;
}

export interface ThemeDarkMode {
    borders?: outputs.ThemeDarkModeBorders;
    colors?: outputs.ThemeDarkModeColors;
    container?: outputs.ThemeDarkModeContainer;
    /**
     * The URL of an image to be used as a favicon for the tenant
     */
    faviconUrl?: string;
    /**
     * The URL of an image to be used as a logo for the tenant.
     */
    logoUrl?: string;
    pageBackground?: outputs.ThemeDarkModePageBackground;
    /**
     * The primary color for the tenant.
     */
    primaryColor?: string;
    typography?: outputs.ThemeDarkModeTypography;
    /**
     * The URL of an image to be used as a watermark at the bottom of Authsignal's pre-built UI.
     */
    watermarkUrl?: string;
}

export interface ThemeDarkModeBorders {
    buttonBorderRadius?: number;
    buttonBorderWidth?: number;
    cardBorderRadius?: number;
    cardBorderWidth?: number;
    containerBorderRadius?: number;
    inputBorderRadius?: number;
    inputBorderWidth?: number;
}

export interface ThemeDarkModeColors {
    bodyText?: string;
    buttonPrimaryBorder?: string;
    buttonPrimaryText?: string;
    buttonSecondaryBackground?: string;
    buttonSecondaryBorder?: string;
    buttonSecondaryText?: string;
    cardBackground?: string;
    cardBorder?: string;
    containerBackground?: string;
    containerBorder?: string;
    critical?: string;
    divider?: string;
    focus?: string;
    headingText?: string;
    hover?: string;
    icon?: string;
    information?: string;
    inputBackground?: string;
    inputBorder?: string;
    link?: string;
    loader?: string;
    positive?: string;
}

export interface ThemeDarkModeContainer {
    contentAlignment?: string;
    logoAlignment?: string;
    logoHeight?: number;
    logoPosition?: string;
    padding?: number;
    position?: string;
}

export interface ThemeDarkModePageBackground {
    /**
     * The color to be used for the background in the pre-built UI.
     */
    backgroundColor?: string;
    /**
     * The URL of an image which will be used as the background in the pre-built UI.
     */
    backgroundImageUrl?: string;
}

export interface ThemeDarkModeTypography {
    display?: outputs.ThemeDarkModeTypographyDisplay;
}

export interface ThemeDarkModeTypographyDisplay {
    /**
     * The URL of a font file to be used for the tenant.
     */
    fontUrl?: string;
}

export interface ThemePageBackground {
    /**
     * The color to be used for the background in the pre-built UI.
     */
    backgroundColor?: string;
    /**
     * The URL of an image which will be used as the background in the pre-built UI.
     */
    backgroundImageUrl?: string;
}

export interface ThemeTypography {
    display?: outputs.ThemeTypographyDisplay;
}

export interface ThemeTypographyDisplay {
    /**
     * The URL of a font file to be used for the tenant.
     */
    fontUrl?: string;
}

