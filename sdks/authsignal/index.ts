// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ActionConfigurationArgs, ActionConfigurationState } from "./actionConfiguration";
export type ActionConfiguration = import("./actionConfiguration").ActionConfiguration;
export const ActionConfiguration: typeof import("./actionConfiguration").ActionConfiguration = null as any;
utilities.lazyLoad(exports, ["ActionConfiguration"], () => require("./actionConfiguration"));

export { GetActionConfigurationArgs, GetActionConfigurationResult, GetActionConfigurationOutputArgs } from "./getActionConfiguration";
export const getActionConfiguration: typeof import("./getActionConfiguration").getActionConfiguration = null as any;
export const getActionConfigurationOutput: typeof import("./getActionConfiguration").getActionConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getActionConfiguration","getActionConfigurationOutput"], () => require("./getActionConfiguration"));

export { GetRuleArgs, GetRuleResult, GetRuleOutputArgs } from "./getRule";
export const getRule: typeof import("./getRule").getRule = null as any;
export const getRuleOutput: typeof import("./getRule").getRuleOutput = null as any;
utilities.lazyLoad(exports, ["getRule","getRuleOutput"], () => require("./getRule"));

export { GetThemeResult } from "./getTheme";
export const getTheme: typeof import("./getTheme").getTheme = null as any;
export const getThemeOutput: typeof import("./getTheme").getThemeOutput = null as any;
utilities.lazyLoad(exports, ["getTheme","getThemeOutput"], () => require("./getTheme"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RuleArgs, RuleState } from "./rule";
export type Rule = import("./rule").Rule;
export const Rule: typeof import("./rule").Rule = null as any;
utilities.lazyLoad(exports, ["Rule"], () => require("./rule"));

export { ThemeArgs, ThemeState } from "./theme";
export type Theme = import("./theme").Theme;
export const Theme: typeof import("./theme").Theme = null as any;
utilities.lazyLoad(exports, ["Theme"], () => require("./theme"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "authsignal:index/actionConfiguration:ActionConfiguration":
                return new ActionConfiguration(name, <any>undefined, { urn })
            case "authsignal:index/rule:Rule":
                return new Rule(name, <any>undefined, { urn })
            case "authsignal:index/theme:Theme":
                return new Theme(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("authsignal", "index/actionConfiguration", _module)
pulumi.runtime.registerResourceModule("authsignal", "index/rule", _module)
pulumi.runtime.registerResourceModule("authsignal", "index/theme", _module)
pulumi.runtime.registerResourcePackage("authsignal", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:authsignal") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
