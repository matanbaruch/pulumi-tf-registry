// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Theme extends pulumi.CustomResource {
    /**
     * Get an existing Theme resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ThemeState, opts?: pulumi.CustomResourceOptions): Theme {
        return new Theme(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'authsignal:index/theme:Theme';

    /**
     * Returns true if the given object is an instance of Theme.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Theme {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Theme.__pulumiType;
    }

    public readonly borders!: pulumi.Output<outputs.ThemeBorders | undefined>;
    public readonly colors!: pulumi.Output<outputs.ThemeColors | undefined>;
    public readonly container!: pulumi.Output<outputs.ThemeContainer | undefined>;
    public readonly darkMode!: pulumi.Output<outputs.ThemeDarkMode | undefined>;
    /**
     * The URL of an image to be used as a favicon for the tenant
     */
    public readonly faviconUrl!: pulumi.Output<string | undefined>;
    /**
     * The URL of an image to be used as a logo for the tenant.
     */
    public readonly logoUrl!: pulumi.Output<string | undefined>;
    /**
     * The name of the tenant which is visible to users.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly pageBackground!: pulumi.Output<outputs.ThemePageBackground | undefined>;
    /**
     * The primary color for the tenant.
     */
    public readonly primaryColor!: pulumi.Output<string | undefined>;
    public readonly typography!: pulumi.Output<outputs.ThemeTypography | undefined>;
    /**
     * The URL of an image to be used as a watermark at the bottom of Authsignal's pre-built UI.
     */
    public readonly watermarkUrl!: pulumi.Output<string | undefined>;

    /**
     * Create a Theme resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ThemeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ThemeArgs | ThemeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ThemeState | undefined;
            resourceInputs["borders"] = state ? state.borders : undefined;
            resourceInputs["colors"] = state ? state.colors : undefined;
            resourceInputs["container"] = state ? state.container : undefined;
            resourceInputs["darkMode"] = state ? state.darkMode : undefined;
            resourceInputs["faviconUrl"] = state ? state.faviconUrl : undefined;
            resourceInputs["logoUrl"] = state ? state.logoUrl : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pageBackground"] = state ? state.pageBackground : undefined;
            resourceInputs["primaryColor"] = state ? state.primaryColor : undefined;
            resourceInputs["typography"] = state ? state.typography : undefined;
            resourceInputs["watermarkUrl"] = state ? state.watermarkUrl : undefined;
        } else {
            const args = argsOrState as ThemeArgs | undefined;
            resourceInputs["borders"] = args ? args.borders : undefined;
            resourceInputs["colors"] = args ? args.colors : undefined;
            resourceInputs["container"] = args ? args.container : undefined;
            resourceInputs["darkMode"] = args ? args.darkMode : undefined;
            resourceInputs["faviconUrl"] = args ? args.faviconUrl : undefined;
            resourceInputs["logoUrl"] = args ? args.logoUrl : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pageBackground"] = args ? args.pageBackground : undefined;
            resourceInputs["primaryColor"] = args ? args.primaryColor : undefined;
            resourceInputs["typography"] = args ? args.typography : undefined;
            resourceInputs["watermarkUrl"] = args ? args.watermarkUrl : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Theme.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Theme resources.
 */
export interface ThemeState {
    borders?: pulumi.Input<inputs.ThemeBorders>;
    colors?: pulumi.Input<inputs.ThemeColors>;
    container?: pulumi.Input<inputs.ThemeContainer>;
    darkMode?: pulumi.Input<inputs.ThemeDarkMode>;
    /**
     * The URL of an image to be used as a favicon for the tenant
     */
    faviconUrl?: pulumi.Input<string>;
    /**
     * The URL of an image to be used as a logo for the tenant.
     */
    logoUrl?: pulumi.Input<string>;
    /**
     * The name of the tenant which is visible to users.
     */
    name?: pulumi.Input<string>;
    pageBackground?: pulumi.Input<inputs.ThemePageBackground>;
    /**
     * The primary color for the tenant.
     */
    primaryColor?: pulumi.Input<string>;
    typography?: pulumi.Input<inputs.ThemeTypography>;
    /**
     * The URL of an image to be used as a watermark at the bottom of Authsignal's pre-built UI.
     */
    watermarkUrl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Theme resource.
 */
export interface ThemeArgs {
    borders?: pulumi.Input<inputs.ThemeBorders>;
    colors?: pulumi.Input<inputs.ThemeColors>;
    container?: pulumi.Input<inputs.ThemeContainer>;
    darkMode?: pulumi.Input<inputs.ThemeDarkMode>;
    /**
     * The URL of an image to be used as a favicon for the tenant
     */
    faviconUrl?: pulumi.Input<string>;
    /**
     * The URL of an image to be used as a logo for the tenant.
     */
    logoUrl?: pulumi.Input<string>;
    /**
     * The name of the tenant which is visible to users.
     */
    name?: pulumi.Input<string>;
    pageBackground?: pulumi.Input<inputs.ThemePageBackground>;
    /**
     * The primary color for the tenant.
     */
    primaryColor?: pulumi.Input<string>;
    typography?: pulumi.Input<inputs.ThemeTypography>;
    /**
     * The URL of an image to be used as a watermark at the bottom of Authsignal's pre-built UI.
     */
    watermarkUrl?: pulumi.Input<string>;
}
