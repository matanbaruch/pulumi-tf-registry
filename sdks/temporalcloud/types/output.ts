// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetNamespacesNamespace {
    /**
     * The Base64-encoded CA cert in PEM format that clients use when authenticating with Temporal Cloud.
     */
    acceptedClientCa: string;
    /**
     * The currently active region for the namespace.
     */
    activeRegion: string;
    /**
     * A list of filters to apply to client certificates when initiating a connection Temporal Cloud. If present, connections will only be allowed from client certificates whose distinguished name properties match at least one of the filters.
     */
    certificateFilters: outputs.GetNamespacesNamespaceCertificateFilter[];
    /**
     * A codec server is used by the Temporal Cloud UI to decode payloads for all users interacting with this namespace, even if the workflow history itself is encrypted.
     */
    codecServer: outputs.GetNamespacesNamespaceCodecServer;
    /**
     * The date and time when the namespace was created.
     */
    createdTime: string;
    /**
     * The custom search attributes to use for the namespace.
     */
    customSearchAttributes: {[key: string]: string};
    /**
     * The endpoints for the namespace.
     */
    endpoints: outputs.GetNamespacesNamespaceEndpoints;
    /**
     * The unique identifier of the namespace across all Temporal Cloud tenants.
     */
    id: string;
    /**
     * The date and time when the namespace was last modified. Will not be set if the namespace has never been modified.
     */
    lastModifiedTime: string;
    /**
     * The limits set on the namespace currently.
     */
    limits: outputs.GetNamespacesNamespaceLimits;
    /**
     * The name of the namespace.
     */
    name: string;
    /**
     * The private connectivities for the namespace, if any.
     */
    privateConnectivities: outputs.GetNamespacesNamespacePrivateConnectivity[];
    /**
     * The list of regions that this namespace is available in. If more than one region is specified, this namespace is "global" which is currently a preview feature with restricted access. Please reach out to Temporal support for more information on this feature.
     */
    regions: string[];
    /**
     * The number of days to retain workflow history. Any changes to the retention period will be applied to all new running workflows.
     */
    retentionDays: number;
    /**
     * The current state of the namespace.
     */
    state: string;
}

export interface GetNamespacesNamespaceCertificateFilter {
    /**
     * The certificate's common name.
     */
    commonName: string;
    /**
     * The certificate's organization.
     */
    organization: string;
    /**
     * The certificate's organizational unit.
     */
    organizationalUnit: string;
    /**
     * The certificate's subject alternative name (or SAN).
     */
    subjectAlternativeName: string;
}

export interface GetNamespacesNamespaceCodecServer {
    /**
     * The endpoint of the codec server.
     */
    endpoint: string;
    /**
     * If true, Temporal Cloud will include cross-origin credentials in requests to the codec server.
     */
    includeCrossOriginCredentials: boolean;
    /**
     * If true, Temporal Cloud will pass the access token to the codec server upon each request.
     */
    passAccessToken: boolean;
}

export interface GetNamespacesNamespaceEndpoints {
    /**
     * The gRPC hostport address that the temporal workers, clients and tctl connect to.
     */
    grpcAddress: string;
    /**
     * The web UI address.
     */
    webAddress: string;
}

export interface GetNamespacesNamespaceLimits {
    /**
     * The number of actions per second (APS) that is currently allowed for the namespace. The namespace may be throttled if its APS exceeds the limit.
     */
    actionsPerSecondLimit: number;
}

export interface GetNamespacesNamespacePrivateConnectivity {
    /**
     * The AWS PrivateLink info. This will only be set for namespaces whose cloud provider is AWS.
     */
    awsPrivateLinkInfo: outputs.GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfo;
    /**
     * The id of the region where the private connectivity applies.
     */
    region: string;
}

export interface GetNamespacesNamespacePrivateConnectivityAwsPrivateLinkInfo {
    /**
     * The list of principal arns that are allowed to access the namespace on the private link.
     */
    allowedPrincipalArns: string[];
    /**
     * The list of vpc endpoint service names that are associated with the namespace.
     */
    vpcEndpointServiceNames: string[];
}

export interface GetRegionsRegion {
    /**
     * The name of the Cloud provider for this region, e.g. `aws`.
     */
    cloudProvider: string;
    /**
     * The name of the region within the Cloud provider, e.g. `us-east-1`.
     */
    cloudProviderRegion: string;
    /**
     * The unique identifier for the region, e.g. `aws-us-east-1`.
     */
    id: string;
    /**
     * The physical location of the region, e.g. "US East (N. Virginia)".
     */
    location: string;
}

export interface NamespaceCertificateFilter {
    /**
     * The certificate's common name.
     */
    commonName?: string;
    /**
     * The certificate's organization.
     */
    organization?: string;
    /**
     * The certificate's organizational unit.
     */
    organizationalUnit?: string;
    /**
     * The certificate's subject alternative name (or SAN).
     */
    subjectAlternativeName?: string;
}

export interface NamespaceCodecServer {
    /**
     * The endpoint of the codec server. Must begin with "https".
     */
    endpoint: string;
    /**
     * If true, Temporal Cloud will include cross-origin credentials in requests to the codec server.
     */
    includeCrossOriginCredentials: boolean;
    /**
     * If true, Temporal Cloud will pass the access token to the codec server upon each request.
     */
    passAccessToken: boolean;
}

export interface NamespaceEndpoints {
    /**
     * The gRPC endpoint for the namespace that clients can connect to.
     */
    grpcAddress: string;
    /**
     * The address in the Temporal Cloud Web UI for the namespace
     */
    webAddress: string;
}

export interface NamespaceTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
     */
    delete?: string;
}

export interface UserNamespaceAccess {
    /**
     * The namespace to assign permissions to.
     */
    namespaceId: string;
    /**
     * The permission to assign. Must be one of [admin, write, read] (case-insensitive)
     */
    permission: string;
}

export interface UserTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
     */
    delete?: string;
}

