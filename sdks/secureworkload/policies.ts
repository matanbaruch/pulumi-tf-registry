// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Policies extends pulumi.CustomResource {
    /**
     * Get an existing Policies resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PoliciesState, opts?: pulumi.CustomResourceOptions): Policies {
        return new Policies(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'secureworkload:index/policies:Policies';

    /**
     * Returns true if the given object is an instance of Policies.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policies {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policies.__pulumiType;
    }

    /**
     * ID of a defined filter.
     */
    public readonly consumerFilterId!: pulumi.Output<string>;
    /**
     * Values can be ALLOW or DENY: means whether we should allow or drop traffic from consumer to provider on the given
     * service port/protocol
     */
    public readonly policyAction!: pulumi.Output<string>;
    /**
     * Used to sort policy.
     */
    public readonly priority!: pulumi.Output<number | undefined>;
    /**
     * ID of a defined filter.
     */
    public readonly providerFilterId!: pulumi.Output<string>;
    /**
     * Values can be DEFAULT, ABSOLUTE or CATCHALL for ranking
     */
    public readonly rank!: pulumi.Output<string | undefined>;
    /**
     * Indicates the version of the workspace the cluster will be added to.
     */
    public readonly version!: pulumi.Output<string | undefined>;
    /**
     * ID of the needed workspace.
     */
    public readonly workspaceId!: pulumi.Output<string>;

    /**
     * Create a Policies resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PoliciesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PoliciesArgs | PoliciesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PoliciesState | undefined;
            resourceInputs["consumerFilterId"] = state ? state.consumerFilterId : undefined;
            resourceInputs["policyAction"] = state ? state.policyAction : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["providerFilterId"] = state ? state.providerFilterId : undefined;
            resourceInputs["rank"] = state ? state.rank : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        } else {
            const args = argsOrState as PoliciesArgs | undefined;
            if ((!args || args.consumerFilterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'consumerFilterId'");
            }
            if ((!args || args.policyAction === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyAction'");
            }
            if ((!args || args.providerFilterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerFilterId'");
            }
            if ((!args || args.workspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["consumerFilterId"] = args ? args.consumerFilterId : undefined;
            resourceInputs["policyAction"] = args ? args.policyAction : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["providerFilterId"] = args ? args.providerFilterId : undefined;
            resourceInputs["rank"] = args ? args.rank : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["workspaceId"] = args ? args.workspaceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policies.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Policies resources.
 */
export interface PoliciesState {
    /**
     * ID of a defined filter.
     */
    consumerFilterId?: pulumi.Input<string>;
    /**
     * Values can be ALLOW or DENY: means whether we should allow or drop traffic from consumer to provider on the given
     * service port/protocol
     */
    policyAction?: pulumi.Input<string>;
    /**
     * Used to sort policy.
     */
    priority?: pulumi.Input<number>;
    /**
     * ID of a defined filter.
     */
    providerFilterId?: pulumi.Input<string>;
    /**
     * Values can be DEFAULT, ABSOLUTE or CATCHALL for ranking
     */
    rank?: pulumi.Input<string>;
    /**
     * Indicates the version of the workspace the cluster will be added to.
     */
    version?: pulumi.Input<string>;
    /**
     * ID of the needed workspace.
     */
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Policies resource.
 */
export interface PoliciesArgs {
    /**
     * ID of a defined filter.
     */
    consumerFilterId: pulumi.Input<string>;
    /**
     * Values can be ALLOW or DENY: means whether we should allow or drop traffic from consumer to provider on the given
     * service port/protocol
     */
    policyAction: pulumi.Input<string>;
    /**
     * Used to sort policy.
     */
    priority?: pulumi.Input<number>;
    /**
     * ID of a defined filter.
     */
    providerFilterId: pulumi.Input<string>;
    /**
     * Values can be DEFAULT, ABSOLUTE or CATCHALL for ranking
     */
    rank?: pulumi.Input<string>;
    /**
     * Indicates the version of the workspace the cluster will be added to.
     */
    version?: pulumi.Input<string>;
    /**
     * ID of the needed workspace.
     */
    workspaceId: pulumi.Input<string>;
}
