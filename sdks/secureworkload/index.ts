// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { EnforceArgs, EnforceState } from "./enforce";
export type Enforce = import("./enforce").Enforce;
export const Enforce: typeof import("./enforce").Enforce = null as any;
utilities.lazyLoad(exports, ["Enforce"], () => require("./enforce"));

export { FilterArgs, FilterState } from "./filter";
export type Filter = import("./filter").Filter;
export const Filter: typeof import("./filter").Filter = null as any;
utilities.lazyLoad(exports, ["Filter"], () => require("./filter"));

export { GetClusterArgs, GetClusterResult, GetClusterOutputArgs } from "./getCluster";
export const getCluster: typeof import("./getCluster").getCluster = null as any;
export const getClusterOutput: typeof import("./getCluster").getClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCluster","getClusterOutput"], () => require("./getCluster"));

export { GetFilterArgs, GetFilterResult, GetFilterOutputArgs } from "./getFilter";
export const getFilter: typeof import("./getFilter").getFilter = null as any;
export const getFilterOutput: typeof import("./getFilter").getFilterOutput = null as any;
utilities.lazyLoad(exports, ["getFilter","getFilterOutput"], () => require("./getFilter"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { GetScopeArgs, GetScopeResult, GetScopeOutputArgs } from "./getScope";
export const getScope: typeof import("./getScope").getScope = null as any;
export const getScopeOutput: typeof import("./getScope").getScopeOutput = null as any;
utilities.lazyLoad(exports, ["getScope","getScopeOutput"], () => require("./getScope"));

export { GetWorkspaceArgs, GetWorkspaceResult, GetWorkspaceOutputArgs } from "./getWorkspace";
export const getWorkspace: typeof import("./getWorkspace").getWorkspace = null as any;
export const getWorkspaceOutput: typeof import("./getWorkspace").getWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspace","getWorkspaceOutput"], () => require("./getWorkspace"));

export { LabelArgs, LabelState } from "./label";
export type Label = import("./label").Label;
export const Label: typeof import("./label").Label = null as any;
utilities.lazyLoad(exports, ["Label"], () => require("./label"));

export { PoliciesArgs, PoliciesState } from "./policies";
export type Policies = import("./policies").Policies;
export const Policies: typeof import("./policies").Policies = null as any;
utilities.lazyLoad(exports, ["Policies"], () => require("./policies"));

export { PortArgs, PortState } from "./port";
export type Port = import("./port").Port;
export const Port: typeof import("./port").Port = null as any;
utilities.lazyLoad(exports, ["Port"], () => require("./port"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { ScopeArgs, ScopeState } from "./scope";
export type Scope = import("./scope").Scope;
export const Scope: typeof import("./scope").Scope = null as any;
utilities.lazyLoad(exports, ["Scope"], () => require("./scope"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { WorkspaceArgs, WorkspaceState } from "./workspace";
export type Workspace = import("./workspace").Workspace;
export const Workspace: typeof import("./workspace").Workspace = null as any;
utilities.lazyLoad(exports, ["Workspace"], () => require("./workspace"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "secureworkload:index/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "secureworkload:index/enforce:Enforce":
                return new Enforce(name, <any>undefined, { urn })
            case "secureworkload:index/filter:Filter":
                return new Filter(name, <any>undefined, { urn })
            case "secureworkload:index/label:Label":
                return new Label(name, <any>undefined, { urn })
            case "secureworkload:index/policies:Policies":
                return new Policies(name, <any>undefined, { urn })
            case "secureworkload:index/port:Port":
                return new Port(name, <any>undefined, { urn })
            case "secureworkload:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "secureworkload:index/scope:Scope":
                return new Scope(name, <any>undefined, { urn })
            case "secureworkload:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "secureworkload:index/workspace:Workspace":
                return new Workspace(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("secureworkload", "index/cluster", _module)
pulumi.runtime.registerResourceModule("secureworkload", "index/enforce", _module)
pulumi.runtime.registerResourceModule("secureworkload", "index/filter", _module)
pulumi.runtime.registerResourceModule("secureworkload", "index/label", _module)
pulumi.runtime.registerResourceModule("secureworkload", "index/policies", _module)
pulumi.runtime.registerResourceModule("secureworkload", "index/port", _module)
pulumi.runtime.registerResourceModule("secureworkload", "index/role", _module)
pulumi.runtime.registerResourceModule("secureworkload", "index/scope", _module)
pulumi.runtime.registerResourceModule("secureworkload", "index/user", _module)
pulumi.runtime.registerResourceModule("secureworkload", "index/workspace", _module)
pulumi.runtime.registerResourcePackage("secureworkload", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:secureworkload") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
