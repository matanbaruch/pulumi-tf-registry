// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface WorkspaceAbsolutePolicy {
    /**
     * “ALLOW” or “DENY”
     */
    action?: string;
    /**
     * ID of a cluster, user inventory filter, or application scope.
     */
    consumerFilterId?: string;
    /**
     * Named filter. If more than one filter with the same name exists you must specify consumer_filter_id.
     */
    consumerFilterName?: string;
    /**
     * Parameters for enforcing a layer 4 networking policy based off a flows                            protocol and ports.
     */
    layer4NetworkPolicies?: outputs.WorkspaceAbsolutePolicyLayer4NetworkPolicy[];
    /**
     * ID of a cluster, user inventory filter, or application scope.
     */
    providerFilterId?: string;
    /**
     * Named filter. If more than one filter with the same name exists you must specify consumer_filter_id.
     */
    providerFilterName?: string;
}

export interface WorkspaceAbsolutePolicyLayer4NetworkPolicy {
    /**
     * (Optional) Indicates whether the policy is approved. Default is false.
     */
    approved?: boolean;
    /**
     * Inclusive range of ports; for example, [80, 80] or [5000, 6000].
     */
    portRanges: number[];
    /**
     * Protocol integer value (NULL means all protocols).
     */
    protocol: number;
}

export interface WorkspaceCluster {
    /**
     * Must be unique to a given application. After an ADM run, the similar/same clusters in the next version will maintain the consistent_uuid.
     */
    consistentUuid?: string;
    /**
     * Description of the cluster.
     */
    description?: string;
    /**
     * Unique identifier to be used with policies.
     */
    id?: string;
    /**
     * Cluster display name.
     */
    name?: string;
    /**
     * Node represents an endpoint that is part of a cluster
     */
    nodes?: outputs.WorkspaceClusterNode[];
}

export interface WorkspaceClusterNode {
    /**
     * IP address or subnet of the node; for example, 10.0.0.1/8 or 1.2.3.4.
     */
    ipAddress: string;
    /**
     * Displayed name of the node.
     */
    name?: string;
}

export interface WorkspaceDefaultPolicy {
    /**
     * “ALLOW” or “DENY”
     */
    action?: string;
    /**
     * ID of a cluster, user inventory filter, or application scope.
     */
    consumerFilterId?: string;
    /**
     * Named filter. If more than one filter with the same name exists you must specify consumer_filter_id.
     */
    consumerFilterName?: string;
    /**
     * Parameters for enforcing a layer 4 networking policy based off a flows protocol and ports.
     */
    layer4NetworkPolicies?: outputs.WorkspaceDefaultPolicyLayer4NetworkPolicy[];
    /**
     * ID of a cluster, user inventory filter, or application scope.
     */
    providerFilterId?: string;
    /**
     * Named filter. If more than one filter with the same name exists you must specify consumer_filter_id.
     */
    providerFilterName?: string;
}

export interface WorkspaceDefaultPolicyLayer4NetworkPolicy {
    /**
     * (Optional) Indicates whether the policy is approved. Default is false.
     */
    approved?: boolean;
    /**
     * Inclusive range of ports; for example, [80, 80] or [5000, 6000].
     */
    portRanges: number[];
    /**
     * Protocol integer value (NULL means all protocols).
     */
    protocol?: number;
}

export interface WorkspaceFilter {
    /**
     * Unique identifier to be used with policies.
     */
    id: string;
    /**
     * Displayed name of the cluster.
     */
    name?: string;
    /**
     * JSON object representation of an inventory filter query.
     */
    query: string;
}

