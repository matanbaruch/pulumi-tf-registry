// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'secureworkload:index/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * (optional) An approved cluster will not be updated during an automatic policy discovery run. Default false.
     */
    public readonly approved!: pulumi.Output<boolean | undefined>;
    /**
     * (optional) The description of the cluster.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * User-specified name for the inventory cluster.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * JSON object representation of an inventory filter query. *type* is operator, *field* is label key & *value* is label
     * value. Operator can any of the following: [and, or, eq, subnet, contains, regex, gt, gte, lt, lte, in, range, ranges,
     * not, all, none]
     */
    public readonly query!: pulumi.Output<string | undefined>;
    /**
     * Indicates the version of the workspace the cluster will be added to.
     */
    public readonly version!: pulumi.Output<string | undefined>;
    /**
     * ID of the workspace associated with the cluster.
     */
    public readonly workspaceId!: pulumi.Output<string>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["approved"] = state ? state.approved : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["query"] = state ? state.query : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if ((!args || args.workspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["approved"] = args ? args.approved : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["query"] = args ? args.query : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["workspaceId"] = args ? args.workspaceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    /**
     * (optional) An approved cluster will not be updated during an automatic policy discovery run. Default false.
     */
    approved?: pulumi.Input<boolean>;
    /**
     * (optional) The description of the cluster.
     */
    description?: pulumi.Input<string>;
    /**
     * User-specified name for the inventory cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * JSON object representation of an inventory filter query. *type* is operator, *field* is label key & *value* is label
     * value. Operator can any of the following: [and, or, eq, subnet, contains, regex, gt, gte, lt, lte, in, range, ranges,
     * not, all, none]
     */
    query?: pulumi.Input<string>;
    /**
     * Indicates the version of the workspace the cluster will be added to.
     */
    version?: pulumi.Input<string>;
    /**
     * ID of the workspace associated with the cluster.
     */
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * (optional) An approved cluster will not be updated during an automatic policy discovery run. Default false.
     */
    approved?: pulumi.Input<boolean>;
    /**
     * (optional) The description of the cluster.
     */
    description?: pulumi.Input<string>;
    /**
     * User-specified name for the inventory cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * JSON object representation of an inventory filter query. *type* is operator, *field* is label key & *value* is label
     * value. Operator can any of the following: [and, or, eq, subnet, contains, regex, gt, gte, lt, lte, in, range, ranges,
     * not, all, none]
     */
    query?: pulumi.Input<string>;
    /**
     * Indicates the version of the workspace the cluster will be added to.
     */
    version?: pulumi.Input<string>;
    /**
     * ID of the workspace associated with the cluster.
     */
    workspaceId: pulumi.Input<string>;
}
