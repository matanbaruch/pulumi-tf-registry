// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Port extends pulumi.CustomResource {
    /**
     * Get an existing Port resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PortState, opts?: pulumi.CustomResourceOptions): Port {
        return new Port(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'secureworkload:index/port:Port';

    /**
     * Returns true if the given object is an instance of Port.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Port {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Port.__pulumiType;
    }

    /**
     * (optional) Short string about this proto and port
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * End port of the range.
     */
    public readonly endPort!: pulumi.Output<number>;
    /**
     * ID of the needed policy.
     */
    public readonly policyId!: pulumi.Output<string>;
    /**
     * Protocol Integer value (NULL means all protocols)
     */
    public readonly proto!: pulumi.Output<number | undefined>;
    /**
     * Start port of the range.
     */
    public readonly startPort!: pulumi.Output<number>;
    /**
     * Indicates the version of the workspace the cluster will be added to.
     */
    public readonly version!: pulumi.Output<string | undefined>;

    /**
     * Create a Port resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PortArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PortArgs | PortState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PortState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["endPort"] = state ? state.endPort : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["proto"] = state ? state.proto : undefined;
            resourceInputs["startPort"] = state ? state.startPort : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as PortArgs | undefined;
            if ((!args || args.endPort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endPort'");
            }
            if ((!args || args.policyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            if ((!args || args.startPort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'startPort'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["endPort"] = args ? args.endPort : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["proto"] = args ? args.proto : undefined;
            resourceInputs["startPort"] = args ? args.startPort : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Port.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Port resources.
 */
export interface PortState {
    /**
     * (optional) Short string about this proto and port
     */
    description?: pulumi.Input<string>;
    /**
     * End port of the range.
     */
    endPort?: pulumi.Input<number>;
    /**
     * ID of the needed policy.
     */
    policyId?: pulumi.Input<string>;
    /**
     * Protocol Integer value (NULL means all protocols)
     */
    proto?: pulumi.Input<number>;
    /**
     * Start port of the range.
     */
    startPort?: pulumi.Input<number>;
    /**
     * Indicates the version of the workspace the cluster will be added to.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Port resource.
 */
export interface PortArgs {
    /**
     * (optional) Short string about this proto and port
     */
    description?: pulumi.Input<string>;
    /**
     * End port of the range.
     */
    endPort: pulumi.Input<number>;
    /**
     * ID of the needed policy.
     */
    policyId: pulumi.Input<string>;
    /**
     * Protocol Integer value (NULL means all protocols)
     */
    proto?: pulumi.Input<number>;
    /**
     * Start port of the range.
     */
    startPort: pulumi.Input<number>;
    /**
     * Indicates the version of the workspace the cluster will be added to.
     */
    version?: pulumi.Input<string>;
}
