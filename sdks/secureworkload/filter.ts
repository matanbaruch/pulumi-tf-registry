// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Filter extends pulumi.CustomResource {
    /**
     * Get an existing Filter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FilterState, opts?: pulumi.CustomResourceOptions): Filter {
        return new Filter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'secureworkload:index/filter:Filter';

    /**
     * Returns true if the given object is an instance of Filter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Filter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Filter.__pulumiType;
    }

    /**
     * ID of the scope associated with the filter.
     */
    public readonly appScopeId!: pulumi.Output<string>;
    /**
     * User-specified name for the inventory filter.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * (Optional) When true, the filter is restricted to the ownership scope.
     */
    public readonly primary!: pulumi.Output<boolean | undefined>;
    /**
     * (Optional) When true the filter provides a service for its scope. Must also be primary/scope restricted.
     */
    public readonly public!: pulumi.Output<boolean | undefined>;
    /**
     * JSON object representation of an inventory filter query. *type* is operator, *field* is label key & *value* is label
     * value. Operator can any of the following: [and, or, eq, subnet, contains, regex, gt, gte, lt, lte, in, range, ranges,
     * not, all, none]
     */
    public readonly query!: pulumi.Output<string>;

    /**
     * Create a Filter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FilterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FilterArgs | FilterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FilterState | undefined;
            resourceInputs["appScopeId"] = state ? state.appScopeId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["primary"] = state ? state.primary : undefined;
            resourceInputs["public"] = state ? state.public : undefined;
            resourceInputs["query"] = state ? state.query : undefined;
        } else {
            const args = argsOrState as FilterArgs | undefined;
            if ((!args || args.appScopeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appScopeId'");
            }
            if ((!args || args.query === undefined) && !opts.urn) {
                throw new Error("Missing required property 'query'");
            }
            resourceInputs["appScopeId"] = args ? args.appScopeId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["primary"] = args ? args.primary : undefined;
            resourceInputs["public"] = args ? args.public : undefined;
            resourceInputs["query"] = args ? args.query : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Filter.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Filter resources.
 */
export interface FilterState {
    /**
     * ID of the scope associated with the filter.
     */
    appScopeId?: pulumi.Input<string>;
    /**
     * User-specified name for the inventory filter.
     */
    name?: pulumi.Input<string>;
    /**
     * (Optional) When true, the filter is restricted to the ownership scope.
     */
    primary?: pulumi.Input<boolean>;
    /**
     * (Optional) When true the filter provides a service for its scope. Must also be primary/scope restricted.
     */
    public?: pulumi.Input<boolean>;
    /**
     * JSON object representation of an inventory filter query. *type* is operator, *field* is label key & *value* is label
     * value. Operator can any of the following: [and, or, eq, subnet, contains, regex, gt, gte, lt, lte, in, range, ranges,
     * not, all, none]
     */
    query?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Filter resource.
 */
export interface FilterArgs {
    /**
     * ID of the scope associated with the filter.
     */
    appScopeId: pulumi.Input<string>;
    /**
     * User-specified name for the inventory filter.
     */
    name?: pulumi.Input<string>;
    /**
     * (Optional) When true, the filter is restricted to the ownership scope.
     */
    primary?: pulumi.Input<boolean>;
    /**
     * (Optional) When true the filter provides a service for its scope. Must also be primary/scope restricted.
     */
    public?: pulumi.Input<boolean>;
    /**
     * JSON object representation of an inventory filter query. *type* is operator, *field* is label key & *value* is label
     * value. Operator can any of the following: [and, or, eq, subnet, contains, regex, gt, gte, lt, lte, in, range, ranges,
     * not, all, none]
     */
    query: pulumi.Input<string>;
}
