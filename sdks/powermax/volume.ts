// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Volume extends pulumi.CustomResource {
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeState, opts?: pulumi.CustomResourceOptions): Volume {
        return new Volume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powermax:index/volume:Volume';

    /**
     * Returns true if the given object is an instance of Volume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Volume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Volume.__pulumiType;
    }

    /**
     * The allocated percentage of the volume.
     */
    public /*out*/ readonly allocatedPercent!: pulumi.Output<number>;
    /**
     * The Capacity Unit corresponding to the size. (Update Supported)
     */
    public readonly capUnit!: pulumi.Output<string>;
    /**
     * Effective WWN of the volume.
     */
    public /*out*/ readonly effectiveWwn!: pulumi.Output<string>;
    /**
     * The emulation of the volume Enumeration values.
     */
    public /*out*/ readonly emulation!: pulumi.Output<string>;
    /**
     * States whether the volume is encapsulated.
     */
    public /*out*/ readonly encapsulated!: pulumi.Output<boolean>;
    /**
     * Encapsulated WWN of the volume.
     */
    public /*out*/ readonly encapsulatedWwn!: pulumi.Output<string>;
    /**
     * States whether volume has effective WWN.
     */
    public /*out*/ readonly hasEffectiveWwn!: pulumi.Output<boolean>;
    /**
     * States whether mobility ID is enabled on the volume. (Update Supported)
     */
    public readonly mobilityIdEnabled!: pulumi.Output<boolean>;
    /**
     * The NGUID of the volume.
     */
    public /*out*/ readonly nguid!: pulumi.Output<string>;
    /**
     * The number of front end paths of the volume.
     */
    public /*out*/ readonly numOfFrontEndPaths!: pulumi.Output<number>;
    /**
     * The number of storage groups associated with the volume.
     */
    public /*out*/ readonly numOfStorageGroups!: pulumi.Output<number>;
    /**
     * Oracle instance name associated with the volume.
     */
    public /*out*/ readonly oracleInstanceName!: pulumi.Output<string>;
    /**
     * States whether the volume is pinned.
     */
    public /*out*/ readonly pinned!: pulumi.Output<boolean>;
    /**
     * The RDF groups associated with the volume.
     */
    public /*out*/ readonly rdfGroupIds!: pulumi.Output<outputs.VolumeRdfGroupId[]>;
    /**
     * States whether the volume is reserved.
     */
    public /*out*/ readonly reserved!: pulumi.Output<boolean>;
    /**
     * The name of the storage group. sg_name is required while creating the volume.
     */
    public readonly sgName!: pulumi.Output<string>;
    /**
     * The size of the volume. (Update Supported)
     */
    public readonly size!: pulumi.Output<number>;
    /**
     * States whether the volume is a snapvx source.
     */
    public /*out*/ readonly snapvxSource!: pulumi.Output<boolean>;
    /**
     * States whether the volume is a snapvx target.
     */
    public /*out*/ readonly snapvxTarget!: pulumi.Output<boolean>;
    /**
     * The ssid of the volume.
     */
    public /*out*/ readonly ssid!: pulumi.Output<string>;
    /**
     * The status of the volume.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * List of storage groups which are associated with the volume.
     */
    public /*out*/ readonly storageGroups!: pulumi.Output<outputs.VolumeStorageGroup[]>;
    /**
     * The symmetrix ports associated with the volume.
     */
    public /*out*/ readonly symmetrixPortKeys!: pulumi.Output<outputs.VolumeSymmetrixPortKey[]>;
    /**
     * The type of the volume.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * The amount of unreducible data in Gb.
     */
    public /*out*/ readonly unreducibleDataGb!: pulumi.Output<number>;
    /**
     * The name of the volume. Only alphanumeric characters, underscores ( _ ). (Update Supported)
     */
    public readonly volName!: pulumi.Output<string>;
    /**
     * The WWN of the volume.
     */
    public /*out*/ readonly wwn!: pulumi.Output<string>;

    /**
     * Create a Volume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeArgs | VolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumeState | undefined;
            resourceInputs["allocatedPercent"] = state ? state.allocatedPercent : undefined;
            resourceInputs["capUnit"] = state ? state.capUnit : undefined;
            resourceInputs["effectiveWwn"] = state ? state.effectiveWwn : undefined;
            resourceInputs["emulation"] = state ? state.emulation : undefined;
            resourceInputs["encapsulated"] = state ? state.encapsulated : undefined;
            resourceInputs["encapsulatedWwn"] = state ? state.encapsulatedWwn : undefined;
            resourceInputs["hasEffectiveWwn"] = state ? state.hasEffectiveWwn : undefined;
            resourceInputs["mobilityIdEnabled"] = state ? state.mobilityIdEnabled : undefined;
            resourceInputs["nguid"] = state ? state.nguid : undefined;
            resourceInputs["numOfFrontEndPaths"] = state ? state.numOfFrontEndPaths : undefined;
            resourceInputs["numOfStorageGroups"] = state ? state.numOfStorageGroups : undefined;
            resourceInputs["oracleInstanceName"] = state ? state.oracleInstanceName : undefined;
            resourceInputs["pinned"] = state ? state.pinned : undefined;
            resourceInputs["rdfGroupIds"] = state ? state.rdfGroupIds : undefined;
            resourceInputs["reserved"] = state ? state.reserved : undefined;
            resourceInputs["sgName"] = state ? state.sgName : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["snapvxSource"] = state ? state.snapvxSource : undefined;
            resourceInputs["snapvxTarget"] = state ? state.snapvxTarget : undefined;
            resourceInputs["ssid"] = state ? state.ssid : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storageGroups"] = state ? state.storageGroups : undefined;
            resourceInputs["symmetrixPortKeys"] = state ? state.symmetrixPortKeys : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["unreducibleDataGb"] = state ? state.unreducibleDataGb : undefined;
            resourceInputs["volName"] = state ? state.volName : undefined;
            resourceInputs["wwn"] = state ? state.wwn : undefined;
        } else {
            const args = argsOrState as VolumeArgs | undefined;
            if ((!args || args.sgName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sgName'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if ((!args || args.volName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volName'");
            }
            resourceInputs["capUnit"] = args ? args.capUnit : undefined;
            resourceInputs["mobilityIdEnabled"] = args ? args.mobilityIdEnabled : undefined;
            resourceInputs["sgName"] = args ? args.sgName : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["volName"] = args ? args.volName : undefined;
            resourceInputs["allocatedPercent"] = undefined /*out*/;
            resourceInputs["effectiveWwn"] = undefined /*out*/;
            resourceInputs["emulation"] = undefined /*out*/;
            resourceInputs["encapsulated"] = undefined /*out*/;
            resourceInputs["encapsulatedWwn"] = undefined /*out*/;
            resourceInputs["hasEffectiveWwn"] = undefined /*out*/;
            resourceInputs["nguid"] = undefined /*out*/;
            resourceInputs["numOfFrontEndPaths"] = undefined /*out*/;
            resourceInputs["numOfStorageGroups"] = undefined /*out*/;
            resourceInputs["oracleInstanceName"] = undefined /*out*/;
            resourceInputs["pinned"] = undefined /*out*/;
            resourceInputs["rdfGroupIds"] = undefined /*out*/;
            resourceInputs["reserved"] = undefined /*out*/;
            resourceInputs["snapvxSource"] = undefined /*out*/;
            resourceInputs["snapvxTarget"] = undefined /*out*/;
            resourceInputs["ssid"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["storageGroups"] = undefined /*out*/;
            resourceInputs["symmetrixPortKeys"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["unreducibleDataGb"] = undefined /*out*/;
            resourceInputs["wwn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Volume.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Volume resources.
 */
export interface VolumeState {
    /**
     * The allocated percentage of the volume.
     */
    allocatedPercent?: pulumi.Input<number>;
    /**
     * The Capacity Unit corresponding to the size. (Update Supported)
     */
    capUnit?: pulumi.Input<string>;
    /**
     * Effective WWN of the volume.
     */
    effectiveWwn?: pulumi.Input<string>;
    /**
     * The emulation of the volume Enumeration values.
     */
    emulation?: pulumi.Input<string>;
    /**
     * States whether the volume is encapsulated.
     */
    encapsulated?: pulumi.Input<boolean>;
    /**
     * Encapsulated WWN of the volume.
     */
    encapsulatedWwn?: pulumi.Input<string>;
    /**
     * States whether volume has effective WWN.
     */
    hasEffectiveWwn?: pulumi.Input<boolean>;
    /**
     * States whether mobility ID is enabled on the volume. (Update Supported)
     */
    mobilityIdEnabled?: pulumi.Input<boolean>;
    /**
     * The NGUID of the volume.
     */
    nguid?: pulumi.Input<string>;
    /**
     * The number of front end paths of the volume.
     */
    numOfFrontEndPaths?: pulumi.Input<number>;
    /**
     * The number of storage groups associated with the volume.
     */
    numOfStorageGroups?: pulumi.Input<number>;
    /**
     * Oracle instance name associated with the volume.
     */
    oracleInstanceName?: pulumi.Input<string>;
    /**
     * States whether the volume is pinned.
     */
    pinned?: pulumi.Input<boolean>;
    /**
     * The RDF groups associated with the volume.
     */
    rdfGroupIds?: pulumi.Input<pulumi.Input<inputs.VolumeRdfGroupId>[]>;
    /**
     * States whether the volume is reserved.
     */
    reserved?: pulumi.Input<boolean>;
    /**
     * The name of the storage group. sg_name is required while creating the volume.
     */
    sgName?: pulumi.Input<string>;
    /**
     * The size of the volume. (Update Supported)
     */
    size?: pulumi.Input<number>;
    /**
     * States whether the volume is a snapvx source.
     */
    snapvxSource?: pulumi.Input<boolean>;
    /**
     * States whether the volume is a snapvx target.
     */
    snapvxTarget?: pulumi.Input<boolean>;
    /**
     * The ssid of the volume.
     */
    ssid?: pulumi.Input<string>;
    /**
     * The status of the volume.
     */
    status?: pulumi.Input<string>;
    /**
     * List of storage groups which are associated with the volume.
     */
    storageGroups?: pulumi.Input<pulumi.Input<inputs.VolumeStorageGroup>[]>;
    /**
     * The symmetrix ports associated with the volume.
     */
    symmetrixPortKeys?: pulumi.Input<pulumi.Input<inputs.VolumeSymmetrixPortKey>[]>;
    /**
     * The type of the volume.
     */
    type?: pulumi.Input<string>;
    /**
     * The amount of unreducible data in Gb.
     */
    unreducibleDataGb?: pulumi.Input<number>;
    /**
     * The name of the volume. Only alphanumeric characters, underscores ( _ ). (Update Supported)
     */
    volName?: pulumi.Input<string>;
    /**
     * The WWN of the volume.
     */
    wwn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Volume resource.
 */
export interface VolumeArgs {
    /**
     * The Capacity Unit corresponding to the size. (Update Supported)
     */
    capUnit?: pulumi.Input<string>;
    /**
     * States whether mobility ID is enabled on the volume. (Update Supported)
     */
    mobilityIdEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the storage group. sg_name is required while creating the volume.
     */
    sgName: pulumi.Input<string>;
    /**
     * The size of the volume. (Update Supported)
     */
    size: pulumi.Input<number>;
    /**
     * The name of the volume. Only alphanumeric characters, underscores ( _ ). (Update Supported)
     */
    volName: pulumi.Input<string>;
}
