// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Portgroup extends pulumi.CustomResource {
    /**
     * Get an existing Portgroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PortgroupState, opts?: pulumi.CustomResourceOptions): Portgroup {
        return new Portgroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powermax:index/portgroup:Portgroup';

    /**
     * Returns true if the given object is an instance of Portgroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Portgroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Portgroup.__pulumiType;
    }

    /**
     * The masking views associated with the portgroup.
     */
    public /*out*/ readonly maskingviews!: pulumi.Output<string[]>;
    /**
     * The name of the portgroup. Only alphanumeric characters, underscores ( _ ), and hyphens (-) are allowed. (Update
     * Supported)
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The number of masking views associated with the portgroup.
     */
    public /*out*/ readonly numofmaskingviews!: pulumi.Output<number>;
    /**
     * The number of ports associated with the portgroup.
     */
    public /*out*/ readonly numofports!: pulumi.Output<number>;
    /**
     * The list of ports associated with the portgroup. (Update Supported)
     */
    public readonly ports!: pulumi.Output<outputs.PortgroupPort[]>;
    /**
     * The portgroup protocol. Protocols: SCSI_FC, iSCSI, NVMe_FC, NVMe_TCP
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * The type of the portgroup.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a Portgroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PortgroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PortgroupArgs | PortgroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PortgroupState | undefined;
            resourceInputs["maskingviews"] = state ? state.maskingviews : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numofmaskingviews"] = state ? state.numofmaskingviews : undefined;
            resourceInputs["numofports"] = state ? state.numofports : undefined;
            resourceInputs["ports"] = state ? state.ports : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as PortgroupArgs | undefined;
            if ((!args || args.ports === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ports'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ports"] = args ? args.ports : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["maskingviews"] = undefined /*out*/;
            resourceInputs["numofmaskingviews"] = undefined /*out*/;
            resourceInputs["numofports"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Portgroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Portgroup resources.
 */
export interface PortgroupState {
    /**
     * The masking views associated with the portgroup.
     */
    maskingviews?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the portgroup. Only alphanumeric characters, underscores ( _ ), and hyphens (-) are allowed. (Update
     * Supported)
     */
    name?: pulumi.Input<string>;
    /**
     * The number of masking views associated with the portgroup.
     */
    numofmaskingviews?: pulumi.Input<number>;
    /**
     * The number of ports associated with the portgroup.
     */
    numofports?: pulumi.Input<number>;
    /**
     * The list of ports associated with the portgroup. (Update Supported)
     */
    ports?: pulumi.Input<pulumi.Input<inputs.PortgroupPort>[]>;
    /**
     * The portgroup protocol. Protocols: SCSI_FC, iSCSI, NVMe_FC, NVMe_TCP
     */
    protocol?: pulumi.Input<string>;
    /**
     * The type of the portgroup.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Portgroup resource.
 */
export interface PortgroupArgs {
    /**
     * The name of the portgroup. Only alphanumeric characters, underscores ( _ ), and hyphens (-) are allowed. (Update
     * Supported)
     */
    name?: pulumi.Input<string>;
    /**
     * The list of ports associated with the portgroup. (Update Supported)
     */
    ports: pulumi.Input<pulumi.Input<inputs.PortgroupPort>[]>;
    /**
     * The portgroup protocol. Protocols: SCSI_FC, iSCSI, NVMe_FC, NVMe_TCP
     */
    protocol: pulumi.Input<string>;
}
