// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMaskingview(args?: GetMaskingviewArgs, opts?: pulumi.InvokeOptions): Promise<GetMaskingviewResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("powermax:index/getMaskingview:getMaskingview", {
        "filter": args.filter,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMaskingview.
 */
export interface GetMaskingviewArgs {
    filter?: inputs.GetMaskingviewFilter;
    timeouts?: inputs.GetMaskingviewTimeouts;
}

/**
 * A collection of values returned by getMaskingview.
 */
export interface GetMaskingviewResult {
    readonly filter?: outputs.GetMaskingviewFilter;
    readonly id: string;
    readonly maskingViews: outputs.GetMaskingviewMaskingView[];
    readonly timeouts?: outputs.GetMaskingviewTimeouts;
}
export function getMaskingviewOutput(args?: GetMaskingviewOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMaskingviewResult> {
    return pulumi.output(args).apply((a: any) => getMaskingview(a, opts))
}

/**
 * A collection of arguments for invoking getMaskingview.
 */
export interface GetMaskingviewOutputArgs {
    filter?: pulumi.Input<inputs.GetMaskingviewFilterArgs>;
    timeouts?: pulumi.Input<inputs.GetMaskingviewTimeoutsArgs>;
}
