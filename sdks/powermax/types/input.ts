// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetHostFilter {
    names?: string[];
}

export interface GetHostFilterArgs {
    names?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetHostTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    read?: string;
}

export interface GetHostTimeoutsArgs {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    read?: pulumi.Input<string>;
}

export interface GetHostgroupFilter {
    names?: string[];
}

export interface GetHostgroupFilterArgs {
    names?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetHostgroupTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    read?: string;
}

export interface GetHostgroupTimeoutsArgs {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    read?: pulumi.Input<string>;
}

export interface GetMaskingviewFilter {
    names?: string[];
}

export interface GetMaskingviewFilterArgs {
    names?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetMaskingviewTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    read?: string;
}

export interface GetMaskingviewTimeoutsArgs {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    read?: pulumi.Input<string>;
}

export interface GetPortFilter {
    /**
     * A set of port ids to filter on, should be look like the following ['directorId:portId']
     */
    portIds?: string[];
}

export interface GetPortFilterArgs {
    /**
     * A set of port ids to filter on, should be look like the following ['directorId:portId']
     */
    portIds?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetPortTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    read?: string;
}

export interface GetPortTimeoutsArgs {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    read?: pulumi.Input<string>;
}

export interface GetPortgroupsFilter {
    names?: string[];
    /**
     * The Type of the portgroup.
     */
    type?: string;
}

export interface GetPortgroupsFilterArgs {
    names?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Type of the portgroup.
     */
    type?: pulumi.Input<string>;
}

export interface GetPortgroupsTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    read?: string;
}

export interface GetPortgroupsTimeoutsArgs {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    read?: pulumi.Input<string>;
}

export interface GetSnapshotStorageGroup {
    name: string;
}

export interface GetSnapshotStorageGroupArgs {
    name: pulumi.Input<string>;
}

export interface GetSnapshotTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    read?: string;
}

export interface GetSnapshotTimeoutsArgs {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    read?: pulumi.Input<string>;
}

export interface GetSnapshotpolicyFilter {
    names?: string[];
}

export interface GetSnapshotpolicyFilterArgs {
    names?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetSnapshotpolicyTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    read?: string;
}

export interface GetSnapshotpolicyTimeoutsArgs {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    read?: pulumi.Input<string>;
}

export interface GetStoragegroupFilter {
    names?: string[];
}

export interface GetStoragegroupFilterArgs {
    names?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetStoragegroupTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    read?: string;
}

export interface GetStoragegroupTimeoutsArgs {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    read?: pulumi.Input<string>;
}

export interface GetVolumeFilter {
    /**
     * Greater than, Less than or equal to the allocated percent.
     */
    allocatedPercent?: string;
    /**
     * Volumes that are associated (true/false).
     */
    associated?: boolean;
    /**
     * Volumes that are available thin volumes (true/false).
     */
    availableThinVolumes?: boolean;
    /**
     * Volumes that are bound tdev (true/false).
     */
    boundTdev?: boolean;
    /**
     * Greater than, Less than or equal to the cap CYL.
     */
    capCyl?: string;
    /**
     * Greater than, Less than or equal to the cap gb.
     */
    capGb?: string;
    /**
     * Greater than, Less than or equal to the cap mb.
     */
    capMb?: string;
    /**
     * Greater than, Less than or equal to the cap tb.
     */
    capTb?: string;
    /**
     * Volumes that are mapped to a CU image with the specified CU image number.
     */
    cuImageNum?: string;
    /**
     * Volumes that are mapped to a CU image with the specified CU SSID.
     */
    cuImageSsid?: string;
    /**
     * Volumes that are data volume (true/false).
     */
    dataVolume?: boolean;
    /**
     * Volumes that are dld (true/false).
     */
    dld?: boolean;
    /**
     * Volumes that are drv (true/false).
     */
    drv?: boolean;
    /**
     * Volumes that contain the specified effective_wwn.
     */
    effectiveWwn?: string;
    /**
     * Volumes that are of the specified emulation.
     */
    emulation?: string;
    /**
     * Volumes that are encapsulated (true/false).
     */
    encapsulated?: boolean;
    /**
     * The specified volume encapsulated_wwn.
     */
    encapsulatedWwn?: string;
    /**
     * Volumes that are gatekeeper (true/false).
     */
    gatekeeper?: boolean;
    /**
     * Volumes that have effective wwns (true/false)
     */
    hasEffectiveWwn?: boolean;
    /**
     * Volumes that are mapped (true/false).
     */
    mapped?: boolean;
    /**
     * Volumes that are mobility ID enabled (true/false).
     */
    mobilityIdEnabled?: boolean;
    /**
     * Volumes that correspond to Namespace Globally Unique Identifier that uses the EUI64 16-byte designator format.
     */
    nguid?: string;
    /**
     * Greater than, Less than or equal to the number of front end paths.
     */
    numOfFrontEndPaths?: string;
    /**
     * Greater than, Less than or equal to the number of masking views.
     */
    numOfMaskingViews?: string;
    /**
     * Greater than, Less than or equal to the number of storage groups.
     */
    numOfStorageGroups?: string;
    /**
     * Volumes that contain the specified Oracle Instance Name.
     */
    oracleInstanceName?: string;
    /**
     * The specified volume physical name.
     */
    physicalName?: string;
    /**
     * Volumes that are pinned (true/false).
     */
    pinned?: boolean;
    /**
     * Volumes that are private (true/false).
     */
    privateVolumes?: boolean;
    /**
     * Volumes that are part of the specified rdf group.
     */
    rdfGroupNumber?: string;
    /**
     * Volumes that are reserved (true/false).
     */
    reserved?: boolean;
    /**
     * Volumes that are mapped to CU images associated to the specified FICON split.
     */
    splitName?: string;
    /**
     * The specified volume status.
     */
    status?: string;
    /**
     * The name of the storage group.
     */
    storageGroupName?: string;
    /**
     * Greater than, Less than or equal to the specified symmlun.
     */
    symmlun?: string;
    /**
     * Volumes that are tdev (true/false).
     */
    tdev?: boolean;
    /**
     * Volumes that are thin bcv (true/false).
     */
    thinBcv?: boolean;
    /**
     * Volumes that contain the specified volume type.
     */
    type?: string;
    /**
     * Greater than,Less than or equal to the unreducible data gb.
     */
    unreducibleDataGb?: string;
    /**
     * Volumes that are vdev (true/false).
     */
    vdev?: boolean;
    /**
     * Volumes that are virtual volumes (true/false).
     */
    virtualVolumes?: boolean;
    /**
     * The specified volume volume identifier.
     */
    volumeIdentifier?: string;
    /**
     * The specified volume wwn.
     */
    wwn?: string;
}

export interface GetVolumeFilterArgs {
    /**
     * Greater than, Less than or equal to the allocated percent.
     */
    allocatedPercent?: pulumi.Input<string>;
    /**
     * Volumes that are associated (true/false).
     */
    associated?: pulumi.Input<boolean>;
    /**
     * Volumes that are available thin volumes (true/false).
     */
    availableThinVolumes?: pulumi.Input<boolean>;
    /**
     * Volumes that are bound tdev (true/false).
     */
    boundTdev?: pulumi.Input<boolean>;
    /**
     * Greater than, Less than or equal to the cap CYL.
     */
    capCyl?: pulumi.Input<string>;
    /**
     * Greater than, Less than or equal to the cap gb.
     */
    capGb?: pulumi.Input<string>;
    /**
     * Greater than, Less than or equal to the cap mb.
     */
    capMb?: pulumi.Input<string>;
    /**
     * Greater than, Less than or equal to the cap tb.
     */
    capTb?: pulumi.Input<string>;
    /**
     * Volumes that are mapped to a CU image with the specified CU image number.
     */
    cuImageNum?: pulumi.Input<string>;
    /**
     * Volumes that are mapped to a CU image with the specified CU SSID.
     */
    cuImageSsid?: pulumi.Input<string>;
    /**
     * Volumes that are data volume (true/false).
     */
    dataVolume?: pulumi.Input<boolean>;
    /**
     * Volumes that are dld (true/false).
     */
    dld?: pulumi.Input<boolean>;
    /**
     * Volumes that are drv (true/false).
     */
    drv?: pulumi.Input<boolean>;
    /**
     * Volumes that contain the specified effective_wwn.
     */
    effectiveWwn?: pulumi.Input<string>;
    /**
     * Volumes that are of the specified emulation.
     */
    emulation?: pulumi.Input<string>;
    /**
     * Volumes that are encapsulated (true/false).
     */
    encapsulated?: pulumi.Input<boolean>;
    /**
     * The specified volume encapsulated_wwn.
     */
    encapsulatedWwn?: pulumi.Input<string>;
    /**
     * Volumes that are gatekeeper (true/false).
     */
    gatekeeper?: pulumi.Input<boolean>;
    /**
     * Volumes that have effective wwns (true/false)
     */
    hasEffectiveWwn?: pulumi.Input<boolean>;
    /**
     * Volumes that are mapped (true/false).
     */
    mapped?: pulumi.Input<boolean>;
    /**
     * Volumes that are mobility ID enabled (true/false).
     */
    mobilityIdEnabled?: pulumi.Input<boolean>;
    /**
     * Volumes that correspond to Namespace Globally Unique Identifier that uses the EUI64 16-byte designator format.
     */
    nguid?: pulumi.Input<string>;
    /**
     * Greater than, Less than or equal to the number of front end paths.
     */
    numOfFrontEndPaths?: pulumi.Input<string>;
    /**
     * Greater than, Less than or equal to the number of masking views.
     */
    numOfMaskingViews?: pulumi.Input<string>;
    /**
     * Greater than, Less than or equal to the number of storage groups.
     */
    numOfStorageGroups?: pulumi.Input<string>;
    /**
     * Volumes that contain the specified Oracle Instance Name.
     */
    oracleInstanceName?: pulumi.Input<string>;
    /**
     * The specified volume physical name.
     */
    physicalName?: pulumi.Input<string>;
    /**
     * Volumes that are pinned (true/false).
     */
    pinned?: pulumi.Input<boolean>;
    /**
     * Volumes that are private (true/false).
     */
    privateVolumes?: pulumi.Input<boolean>;
    /**
     * Volumes that are part of the specified rdf group.
     */
    rdfGroupNumber?: pulumi.Input<string>;
    /**
     * Volumes that are reserved (true/false).
     */
    reserved?: pulumi.Input<boolean>;
    /**
     * Volumes that are mapped to CU images associated to the specified FICON split.
     */
    splitName?: pulumi.Input<string>;
    /**
     * The specified volume status.
     */
    status?: pulumi.Input<string>;
    /**
     * The name of the storage group.
     */
    storageGroupName?: pulumi.Input<string>;
    /**
     * Greater than, Less than or equal to the specified symmlun.
     */
    symmlun?: pulumi.Input<string>;
    /**
     * Volumes that are tdev (true/false).
     */
    tdev?: pulumi.Input<boolean>;
    /**
     * Volumes that are thin bcv (true/false).
     */
    thinBcv?: pulumi.Input<boolean>;
    /**
     * Volumes that contain the specified volume type.
     */
    type?: pulumi.Input<string>;
    /**
     * Greater than,Less than or equal to the unreducible data gb.
     */
    unreducibleDataGb?: pulumi.Input<string>;
    /**
     * Volumes that are vdev (true/false).
     */
    vdev?: pulumi.Input<boolean>;
    /**
     * Volumes that are virtual volumes (true/false).
     */
    virtualVolumes?: pulumi.Input<boolean>;
    /**
     * The specified volume volume identifier.
     */
    volumeIdentifier?: pulumi.Input<string>;
    /**
     * The specified volume wwn.
     */
    wwn?: pulumi.Input<string>;
}

export interface GetVolumeTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    read?: string;
}

export interface GetVolumeTimeoutsArgs {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    read?: pulumi.Input<string>;
}

export interface HostHostFlags {
    /**
     * It enables a SCSI bus reset to only occur to the port that received the reset. (Update Supported)
     */
    avoidResetBroadcast?: pulumi.Input<inputs.HostHostFlagsAvoidResetBroadcast>;
    /**
     * It is used for hosts that do not expect the queue to be flushed on a 0629 sense. (Update Supported)
     */
    disableQResetOnUa?: pulumi.Input<inputs.HostHostFlagsDisableQResetOnUa>;
    /**
     * It enables the environmental error reporting by the storage system to the host on the specific port. (Update Supported)
     */
    environSet?: pulumi.Input<inputs.HostHostFlagsEnvironSet>;
    /**
     * This attribute enables an Open VMS fibre connection. (Update Supported)
     */
    openvms?: pulumi.Input<inputs.HostHostFlagsOpenvms>;
    /**
     * Alters the inquiry data to report that the storage system supports the SCSI-3 protocol. (Update Supported)
     */
    scsi3?: pulumi.Input<inputs.HostHostFlagsScsi3>;
    /**
     * This attribute provides a stricter compliance with SCSI standards. (Update Supported)
     */
    scsiSupport1?: pulumi.Input<inputs.HostHostFlagsScsiSupport1>;
    /**
     * When setting this flag, the port must be offline. (Update Supported)
     */
    spc2ProtocolVersion?: pulumi.Input<inputs.HostHostFlagsSpc2ProtocolVersion>;
    /**
     * It enables the volume set addressing mode. (Update Supported)
     */
    volumeSetAddressing?: pulumi.Input<inputs.HostHostFlagsVolumeSetAddressing>;
}

export interface HostHostFlagsAvoidResetBroadcast {
    enabled?: pulumi.Input<boolean>;
    override?: pulumi.Input<boolean>;
}

export interface HostHostFlagsDisableQResetOnUa {
    enabled?: pulumi.Input<boolean>;
    override?: pulumi.Input<boolean>;
}

export interface HostHostFlagsEnvironSet {
    enabled?: pulumi.Input<boolean>;
    override?: pulumi.Input<boolean>;
}

export interface HostHostFlagsOpenvms {
    enabled?: pulumi.Input<boolean>;
    override?: pulumi.Input<boolean>;
}

export interface HostHostFlagsScsi3 {
    enabled?: pulumi.Input<boolean>;
    override?: pulumi.Input<boolean>;
}

export interface HostHostFlagsScsiSupport1 {
    enabled?: pulumi.Input<boolean>;
    override?: pulumi.Input<boolean>;
}

export interface HostHostFlagsSpc2ProtocolVersion {
    enabled?: pulumi.Input<boolean>;
    override?: pulumi.Input<boolean>;
}

export interface HostHostFlagsVolumeSetAddressing {
    enabled?: pulumi.Input<boolean>;
    override?: pulumi.Input<boolean>;
}

export interface HostgroupHostFlags {
    /**
     * It enables a SCSI bus reset to only occur to the port that received the reset. (Update Supported)
     */
    avoidResetBroadcast?: pulumi.Input<inputs.HostgroupHostFlagsAvoidResetBroadcast>;
    /**
     * It is used for hosts that do not expect the queue to be flushed on a 0629 sense. (Update Supported)
     */
    disableQResetOnUa?: pulumi.Input<inputs.HostgroupHostFlagsDisableQResetOnUa>;
    /**
     * It enables the environmental error reporting by the storage system to the host on the specific port. (Update Supported)
     */
    environSet?: pulumi.Input<inputs.HostgroupHostFlagsEnvironSet>;
    /**
     * This attribute enables an Open VMS fibre connection. (Update Supported)
     */
    openvms?: pulumi.Input<inputs.HostgroupHostFlagsOpenvms>;
    /**
     * Alters the inquiry data to report that the storage system supports the SCSI-3 protocol. (Update Supported)
     */
    scsi3?: pulumi.Input<inputs.HostgroupHostFlagsScsi3>;
    /**
     * This attribute provides a stricter compliance with SCSI standards. (Update Supported)
     */
    scsiSupport1?: pulumi.Input<inputs.HostgroupHostFlagsScsiSupport1>;
    /**
     * When setting this flag, the port must be offline. (Update Supported)
     */
    spc2ProtocolVersion?: pulumi.Input<inputs.HostgroupHostFlagsSpc2ProtocolVersion>;
    /**
     * It enables the volume set addressing mode. (Update Supported)
     */
    volumeSetAddressing?: pulumi.Input<inputs.HostgroupHostFlagsVolumeSetAddressing>;
}

export interface HostgroupHostFlagsAvoidResetBroadcast {
    enabled?: pulumi.Input<boolean>;
    override?: pulumi.Input<boolean>;
}

export interface HostgroupHostFlagsDisableQResetOnUa {
    enabled?: pulumi.Input<boolean>;
    override?: pulumi.Input<boolean>;
}

export interface HostgroupHostFlagsEnvironSet {
    enabled?: pulumi.Input<boolean>;
    override?: pulumi.Input<boolean>;
}

export interface HostgroupHostFlagsOpenvms {
    enabled?: pulumi.Input<boolean>;
    override?: pulumi.Input<boolean>;
}

export interface HostgroupHostFlagsScsi3 {
    enabled?: pulumi.Input<boolean>;
    override?: pulumi.Input<boolean>;
}

export interface HostgroupHostFlagsScsiSupport1 {
    enabled?: pulumi.Input<boolean>;
    override?: pulumi.Input<boolean>;
}

export interface HostgroupHostFlagsSpc2ProtocolVersion {
    enabled?: pulumi.Input<boolean>;
    override?: pulumi.Input<boolean>;
}

export interface HostgroupHostFlagsVolumeSetAddressing {
    enabled?: pulumi.Input<boolean>;
    override?: pulumi.Input<boolean>;
}

export interface PortgroupPort {
    directorId: pulumi.Input<string>;
    portId: pulumi.Input<string>;
}

export interface SnapshotLinkedStorageGroup {
    /**
     * When the snapshot link is being defined
     */
    backgroundDefineInProgress?: pulumi.Input<boolean>;
    /**
     * When the snapshot link has been fully defined
     */
    defined?: pulumi.Input<boolean>;
    /**
     * The average timestamp of all linked volumes that are linked
     */
    linkedCreationTimestamp?: pulumi.Input<string>;
    /**
     * The linked volumes name
     */
    linkedVolumeName?: pulumi.Input<string>;
    /**
     * The storage group name
     */
    name?: pulumi.Input<string>;
    /**
     * Percentage of tracks copied
     */
    percentageCopied?: pulumi.Input<number>;
    /**
     * The source volumes name
     */
    sourceVolumeName?: pulumi.Input<string>;
    /**
     * Size of the tracks.
     */
    trackSize?: pulumi.Input<number>;
    /**
     * Number of tracks
     */
    tracks?: pulumi.Input<number>;
}

export interface SnapshotSnapshotActions {
    /**
     * both_sides defaults to false. Performs the operation on both locally and remotely associated snapshots.
     */
    bothSides?: pulumi.Input<boolean>;
    /**
     * Link a snapshot generation. (Update Supported)
     */
    link?: pulumi.Input<inputs.SnapshotSnapshotActionsLink>;
    /**
     * Name of the snapshot. (Update Supported)
     */
    name: pulumi.Input<string>;
    /**
     * remote defaults to false. If true, The target storage group will not have compression turned on when the SRP is compression capable.
     */
    remote?: pulumi.Input<boolean>;
    /**
     * Restore a snapshot generation. (Update Supported)
     */
    restore?: pulumi.Input<inputs.SnapshotSnapshotActionsRestore>;
    /**
     * Set the number of days or hours for a snapshot generation to be secure before it auto-terminates (provided it is not linked). (Update Supported)
     */
    secure?: pulumi.Input<inputs.SnapshotSnapshotActionsSecure>;
    /**
     * Set the number of days or hours for a snapshot generation before it auto-terminates (provided it is not linked). (Update Supported)
     */
    timeToLive?: pulumi.Input<inputs.SnapshotSnapshotActionsTimeToLive>;
}

export interface SnapshotSnapshotActionsLink {
    /**
     * copy defaults to false. If true Sets the link copy mode to perform background copy to the target volume(s).
     */
    copy?: pulumi.Input<boolean>;
    /**
     * enable defaults to false. Flag to enable link on the snapshot
     */
    enable?: pulumi.Input<boolean>;
    /**
     * no_compression defaults to false. If true, The target storage group will not have compression turned on when the SRP is compression capable. Option Used in Action Link
     */
    noCompression?: pulumi.Input<boolean>;
    /**
     * remote defaults to false. If true, The target storage group will not have compression turned on when the SRP is compression capable. Option Used in Action Link
     */
    remote?: pulumi.Input<boolean>;
    /**
     * The target storage group to link the snapshot too
     */
    targetStorageGroup?: pulumi.Input<string>;
}

export interface SnapshotSnapshotActionsRestore {
    /**
     * enable defaults to false. Flag to enable restore on the snapshot
     */
    enable?: pulumi.Input<boolean>;
    /**
     * remote defaults to false. If true, The target storage group will not have compression turned on when the SRP is compression capable. Option Used in Action Link
     */
    remote?: pulumi.Input<boolean>;
}

export interface SnapshotSnapshotActionsSecure {
    /**
     * enable defaults to false. Flag to enable link on the snapshot
     */
    enable?: pulumi.Input<boolean>;
    /**
     * secure defaults to 1 day. The time that the snapshot generation is to be secure for.
     */
    secure?: pulumi.Input<number>;
    /**
     * time_in_hours or Days defaults to Days. False is days, true is hours.
     */
    timeInHours?: pulumi.Input<boolean>;
}

export interface SnapshotSnapshotActionsTimeToLive {
    /**
     * enable defaults to false. Flag to enable link on the snapshot
     */
    enable?: pulumi.Input<boolean>;
    /**
     * time_in_hours or Days defaults to Days. False is days, true is hours.
     */
    timeInHours?: pulumi.Input<boolean>;
    /**
     * time_to_live defaults to 1 day. Gives the total time before expiry for these actions.
     */
    timeToLive?: pulumi.Input<number>;
}

export interface SnapshotSourceVolume {
    /**
     * The capacity of the snapshot volume in cylinders
     */
    capacity?: pulumi.Input<number>;
    /**
     * The capacity of the snapshot volume in GB
     */
    capacityGb?: pulumi.Input<number>;
    /**
     * The name of the SnapVX snapshot generation source volume
     */
    name?: pulumi.Input<string>;
}

export interface SnapshotStorageGroup {
    /**
     * Name of the storage group you would like to take a snapshot.
     */
    name: pulumi.Input<string>;
}

export interface StoragegroupHostIoLimit {
    dynamicDistribution: pulumi.Input<string>;
    hostIoLimitIoSec: pulumi.Input<string>;
    hostIoLimitMbSec: pulumi.Input<string>;
}

export interface VolumeRdfGroupId {
    /**
     * The label of the rdf group.
     */
    label?: pulumi.Input<string>;
    /**
     * The number of rdf group.
     */
    rdfGroupNumber?: pulumi.Input<number>;
}

export interface VolumeStorageGroup {
    /**
     * The ID of the storage group parents.
     */
    parentStorageGroupName?: pulumi.Input<string>;
    /**
     * The ID of the storage group.
     */
    storageGroupName?: pulumi.Input<string>;
}

export interface VolumeSymmetrixPortKey {
    /**
     * The ID of the director.
     */
    directorId?: pulumi.Input<string>;
    /**
     * The ID of the symmetrix port.
     */
    portId?: pulumi.Input<string>;
}
