// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetHostFilter {
    names?: string[];
}

export interface GetHostHost {
    /**
     * Specifies the bandwidth limit for a host.
     */
    bwLimit: number;
    /**
     * It enables the rejection of any masking operation involving this host that would result in inconsistent LUN values.
     */
    consistentLun: boolean;
    /**
     * Flags set for the host. When host_flags = {} then default flags will be considered.
     */
    hostFlags: outputs.GetHostHostHostFlags;
    /**
     * The host group associated with the host.
     */
    hostgroups: string[];
    /**
     * The ID of the host.
     */
    id: string;
    /**
     * The initiators associated with the host.
     */
    initiators: string[];
    /**
     * The masking views associated with the host.
     */
    maskingviews: string[];
    /**
     * The name of the host.
     */
    name: string;
    /**
     * The number of hostgroups associated with the host.
     */
    numOfHostGroups: number;
    /**
     * The number of initiators associated with the host.
     */
    numOfInitiators: number;
    /**
     * The number of masking views associated with the host.
     */
    numOfMaskingViews: number;
    /**
     * The number of powerpath hosts associated with the host.
     */
    numofpowerpathhosts: number;
    /**
     * States whether port flags override is enabled on the host.
     */
    portFlagsOverride: boolean;
    /**
     * The powerpath hosts associated with the host.
     */
    powerpathhosts: string[];
    /**
     * Specifies the type of host.
     */
    type: string;
}

export interface GetHostHostHostFlags {
    /**
     * It enables a SCSI bus reset to only occur to the port that received the reset.
     */
    avoidResetBroadcast: outputs.GetHostHostHostFlagsAvoidResetBroadcast;
    /**
     * It is used for hosts that do not expect the queue to be flushed on a 0629 sense.
     */
    disableQResetOnUa: outputs.GetHostHostHostFlagsDisableQResetOnUa;
    /**
     * It enables the environmental error reporting by the storage system to the host on the specific port.
     */
    environSet: outputs.GetHostHostHostFlagsEnvironSet;
    /**
     * This attribute enables an Open VMS fibre connection.
     */
    openvms: outputs.GetHostHostHostFlagsOpenvms;
    /**
     * Alters the inquiry data to report that the storage system supports the SCSI-3 protocol.
     */
    scsi3: outputs.GetHostHostHostFlagsScsi3;
    /**
     * This attribute provides a stricter compliance with SCSI standards.
     */
    scsiSupport1: outputs.GetHostHostHostFlagsScsiSupport1;
    /**
     * When setting this flag, the port must be offline.
     */
    spc2ProtocolVersion: outputs.GetHostHostHostFlagsSpc2ProtocolVersion;
    /**
     * It enables the volume set addressing mode.
     */
    volumeSetAddressing: outputs.GetHostHostHostFlagsVolumeSetAddressing;
}

export interface GetHostHostHostFlagsAvoidResetBroadcast {
    enabled: boolean;
    override: boolean;
}

export interface GetHostHostHostFlagsDisableQResetOnUa {
    enabled: boolean;
    override: boolean;
}

export interface GetHostHostHostFlagsEnvironSet {
    enabled: boolean;
    override: boolean;
}

export interface GetHostHostHostFlagsOpenvms {
    enabled: boolean;
    override: boolean;
}

export interface GetHostHostHostFlagsScsi3 {
    enabled: boolean;
    override: boolean;
}

export interface GetHostHostHostFlagsScsiSupport1 {
    enabled: boolean;
    override: boolean;
}

export interface GetHostHostHostFlagsSpc2ProtocolVersion {
    enabled: boolean;
    override: boolean;
}

export interface GetHostHostHostFlagsVolumeSetAddressing {
    enabled: boolean;
    override: boolean;
}

export interface GetHostTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    read?: string;
}

export interface GetHostgroupFilter {
    names?: string[];
}

export interface GetHostgroupHostGroupDetail {
    /**
     * Consistent lun flag set
     */
    consistentLun: boolean;
    /**
     * Id of a hostgroup
     */
    hostGroupId: string;
    /**
     * List of related host ids
     */
    hosts: outputs.GetHostgroupHostGroupDetailHost[];
    /**
     * List of masking views ids related to the host
     */
    maskingviews: string[];
    /**
     * Name of a hostgroup
     */
    name: string;
    /**
     * Number of hosts related to a hostgroup
     */
    numOfHosts: number;
    /**
     * Number of initiators related to a hostgroup
     */
    numOfInitiators: number;
    /**
     * Number of masking views related to a hostgroup
     */
    numOfMaskingViews: number;
    /**
     * Port flags are overwritten
     */
    portFlagsOverride: boolean;
    /**
     * The host group type
     */
    type: string;
}

export interface GetHostgroupHostGroupDetailHost {
    /**
     * The host id
     */
    hostId: string;
    /**
     * The host initators associated with the host
     */
    initiators: string[];
}

export interface GetHostgroupTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    read?: string;
}

export interface GetMaskingviewFilter {
    names?: string[];
}

export interface GetMaskingviewMaskingView {
    /**
     * The capacity of the storage group in the masking view.
     */
    capacityGb: number;
    /**
     * The host group id of the masking view.
     */
    hostGroupId: string;
    /**
     * The host id of the masking view.
     */
    hostId: string;
    /**
     * List of initiators.
     */
    initiators: string[];
    /**
     * Unique identifier of the masking view.
     */
    maskingViewName: string;
    /**
     * The port group id of the masking view.
     */
    portGroupId: string;
    /**
     * List of ports.
     */
    ports: string[];
    /**
     * The storage group id of the masking view.
     */
    storageGroupId: string;
    /**
     * List of Volumes.
     */
    volumes: string[];
}

export interface GetMaskingviewTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    read?: string;
}

export interface GetPortFilter {
    /**
     * A set of port ids to filter on, should be look like the following ['directorId:portId']
     */
    portIds?: string[];
}

export interface GetPortPortDetail {
    /**
     * Has aclx
     */
    aclx: boolean;
    /**
     * Avoid reset brodcast
     */
    avoidResetBroadcast: boolean;
    /**
     * Capable Protocol
     */
    capableProtocols: string[];
    /**
     * Common Serial Number
     */
    commonSerialNumber: boolean;
    /**
     * Id of the director
     */
    directorId: string;
    /**
     * Director Status
     */
    directorStatus: string;
    /**
     * Disable Q reset on ua
     */
    disableQResetOnUa: boolean;
    /**
     * Enable Auto Negotiate
     */
    enableAutoNegotiate: boolean;
    /**
     * Enabled Protocol
     */
    enabledProtocols: string[];
    /**
     * Environ Set
     */
    environSet: boolean;
    /**
     * HP 3000 mode
     */
    hp3000Mode: boolean;
    /**
     * Port identifier
     */
    identifier: string;
    /**
     * Init point to point
     */
    initPointToPoint: boolean;
    /**
     * Ip Addresses
     */
    ipAddresses: string[];
    /**
     * Ipv4 Address
     */
    ipv4Address: string;
    /**
     * Ipv4 Default Gateway
     */
    ipv4DefaultGateway: string;
    /**
     * Ipv4 Domain Name
     */
    ipv4DomainName: string;
    /**
     * Ipv4 Netmask
     */
    ipv4Netmask: string;
    /**
     * Ipv6 Address
     */
    ipv6Address: string;
    /**
     * Ipv6 Prefix
     */
    ipv6Prefix: string;
    /**
     * iScsi Endpoint
     */
    iscsiEndpoint: boolean;
    /**
     * iScsi Target
     */
    iscsiTarget: boolean;
    /**
     * Mac Address
     */
    macAddress: string;
    /**
     * Masking Views
     */
    maskingviews: string[];
    /**
     * Max Speed
     */
    maxSpeed: string;
    /**
     * Negotiate reset
     */
    negotiateReset: boolean;
    /**
     * Negotiated speed
     */
    negotiatedSpeed: string;
    /**
     * Network Id
     */
    networkId: number;
    /**
     * No Participating
     */
    noParticipating: boolean;
    /**
     * Total number of cors
     */
    numOfCores: number;
    /**
     * TX Power Level MW
     */
    numOfHypers: number;
    /**
     * Total number of volumes
     */
    numOfMappedVols: number;
    /**
     * Total number of masking views
     */
    numOfMaskingViews: number;
    /**
     * Total number of port groups
     */
    numOfPortGroups: number;
    /**
     * NVME over TCP Endpoint
     */
    nvmetcpEndpoint: boolean;
    /**
     * Id of the port
     */
    portId: string;
    /**
     * Port Interface
     */
    portInterface: string;
    /**
     * Port Status
     */
    portStatus: string;
    /**
     * Portgroup
     */
    portgroups: string[];
    /**
     * Power Levels Last Sampled Date in Milliseconds
     */
    powerLevelsLastSampledDateMilliseconds: number;
    /**
     * Prevent automatic rdf link recovery
     */
    preventAutomaticRdfLinkRecovery: string;
    /**
     * Prevent RA Online on Power Up
     */
    preventRaOnlineOnPowerUp: string;
    /**
     * RDF Hardware Compression
     */
    rdfHardwareCompression: string;
    /**
     * RDF Hardware Compression Supported
     */
    rdfHardwareCompressionSupported: string;
    /**
     * RDF RA group attributes farpoint
     */
    rdfRaGroupAttributesFarpoint: boolean;
    /**
     * RDF Software Compression
     */
    rdfSoftwareCompression: string;
    /**
     * RDF Software Compression Suppored
     */
    rdfSoftwareCompressionSupported: string;
    /**
     * RX Power Level MW
     */
    rxPowerLevelMw: number;
    /**
     * SCSI 3
     */
    scsi3: boolean;
    /**
     * SCSI support 1
     */
    scsiSupport1: boolean;
    /**
     * Siemens
     */
    siemens: boolean;
    /**
     * Soft reset
     */
    softReset: boolean;
    /**
     * SPC2 Protocol Version
     */
    spc2ProtocolVersion: boolean;
    /**
     * Sunapee
     */
    sunapee: boolean;
    /**
     * TPC Port
     */
    tcpPort: number;
    /**
     * TX Power Level MW
     */
    txPowerLevelMw: number;
    /**
     * Port Type
     */
    type: string;
    /**
     * Unique WWN
     */
    uniqueWwn: boolean;
    /**
     * VMC State
     */
    vcmState: string;
    /**
     * VNX Attached
     */
    vnxAttached: boolean;
    /**
     * Volume Set Addressing
     */
    volumeSetAddressing: boolean;
    /**
     * WWN Node
     */
    wwnNode: string;
    /**
     * Z Hyperlink Port
     */
    zHyperlinkPort: boolean;
}

export interface GetPortTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    read?: string;
}

export interface GetPortgroupsFilter {
    names?: string[];
    /**
     * The Type of the portgroup.
     */
    type?: string;
}

export interface GetPortgroupsPortGroup {
    /**
     * Identifier
     */
    id: string;
    /**
     * The masking views associated with the portgroup.
     */
    maskingviews: string[];
    /**
     * The name of the portgroup.
     */
    name: string;
    /**
     * The number of masking views associated with the portgroup.
     */
    numofmaskingviews: number;
    /**
     * The number of ports associated with the portgroup.
     */
    numofports: number;
    /**
     * The list of ports associated with the portgroup.
     */
    ports: outputs.GetPortgroupsPortGroupPort[];
    /**
     * The portgroup protocol.
     */
    protocol: string;
    /**
     * The Type of the portgroup.
     */
    type: string;
}

export interface GetPortgroupsPortGroupPort {
    directorId: string;
    portId: string;
}

export interface GetPortgroupsTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    read?: string;
}

export interface GetSnapshotSnapshot {
    /**
     * Set if this generation secure has expired
     */
    expired: boolean;
    /**
     * Number of generation for the snapshot
     */
    generation: number;
    /**
     * Set if this generation is SnapVX linked
     */
    linked: boolean;
    /**
     * Linked storage group names. Only populated if the generation is linked
     */
    linkedStorageGroupNames: string[];
    /**
     * Linked storage group and volume information. Only populated if the generation is linked
     */
    linkedStorageGroups: outputs.GetSnapshotSnapshotLinkedStorageGroup[];
    /**
     * Name of a snapshot
     */
    name: string;
    /**
     * The number of tracks uniquely allocated for this snapshots delta. This is an approximate indication of the number of tracks that will be returned to the SRP if this snapshot is terminated.
     */
    nonSharedTracks: number;
    /**
     * The number of source volumes in the snapshot generation
     */
    numSourceVolumes: number;
    /**
     * The number of non-gatekeeper storage group volumes
     */
    numStorageGroupVolumes: number;
    /**
     * Set if this snapshot is persistent.  Only applicable to policy based snapshots
     */
    persistent: boolean;
    /**
     * Set if this generation is SnapVX linked
     */
    restored: boolean;
    /**
     * When the snapshot will expire once it is not linked
     */
    secureExpiryDate: string;
    /**
     * Unique Snap ID for Snapshot
     */
    snapid: number;
    /**
     * The source volumes of the snapshot generation
     */
    sourceVolumes: outputs.GetSnapshotSnapshotSourceVolume[];
    /**
     * The state of the snapshot generation
     */
    states: string[];
    /**
     * When the snapshot will expire once it is not linked
     */
    timeToLiveExpiryDate: string;
    /**
     * Timestamp of the snapshot generation
     */
    timestamp: string;
    /**
     * The timestamp of the snapshot generation in milliseconds since 1970
     */
    timestampUtc: string;
    /**
     * The number of source tracks that have been overwritten by the host
     */
    tracks: number;
}

export interface GetSnapshotSnapshotLinkedStorageGroup {
    /**
     * When the snapshot link is being defined
     */
    backgroundDefineInProgress: boolean;
    /**
     * When the snapshot link has been fully defined
     */
    defined: boolean;
    /**
     * The average timestamp of all linked volumes that are linked
     */
    linkedCreationTimestamp: string;
    /**
     * The linked volumes name
     */
    linkedVolumeName: string;
    /**
     * The storage group name
     */
    name: string;
    /**
     * Percentage of tracks copied
     */
    percentageCopied: number;
    /**
     * The source volumes name
     */
    sourceVolumeName: string;
    /**
     * Size of the tracks.
     */
    trackSize: number;
    /**
     * Number of tracks
     */
    tracks: number;
}

export interface GetSnapshotSnapshotSourceVolume {
    /**
     * The capacity of the snapshot volume in cylinders
     */
    capacity: number;
    /**
     * The capacity of the snapshot volume in GB
     */
    capacityGb: number;
    /**
     * The name of the SnapVX snapshot generation source volume
     */
    name: string;
}

export interface GetSnapshotStorageGroup {
    name: string;
}

export interface GetSnapshotTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    read?: string;
}

export interface GetSnapshotpolicyFilter {
    names?: string[];
}

export interface GetSnapshotpolicySnapshotPolicy {
    /**
     * The threshold of good snapshots which are not failed/bad for compliance to change from warning to critical
     */
    complianceCountCritical: number;
    /**
     * The threshold of good snapshots which are not failed/bad for compliance to change from normal to warning.
     */
    complianceCountWarning: number;
    /**
     * Number of minutes between each policy execution
     */
    intervalMinutes: number;
    /**
     * The last time that the snapshot policy was run
     */
    lastTimeUsed: string;
    /**
     * Number of minutes after 00:00 on Monday morning that the policy will execute
     */
    offsetMinutes: number;
    /**
     * The name of the cloud provider associated with this policy. Only applies to cloud policies
     */
    providerName: string;
    /**
     * The number of days that snapshots will be retained in the cloud for. Only applies to cloud policies
     */
    retentionDays: number;
    /**
     * Set if the snapshot policy creates secure snapshots
     */
    secure: boolean;
    /**
     * Number of snapshots that will be taken before the oldest ones are no longer required
     */
    snapshotCount: number;
    /**
     * Name of the snapshot policy
     */
    snapshotPolicyName: string;
    /**
     * The total number of storage groups that this snapshot policy is associated with
     */
    storageGroupCount: number;
    /**
     * Set if the snapshot policy has been suspended
     */
    suspended: boolean;
    /**
     * The type of Snapshots that are created with the policy, local or cloud
     */
    type: string;
}

export interface GetSnapshotpolicyTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    read?: string;
}

export interface GetStoragegroupFilter {
    names?: string[];
}

export interface GetStoragegroupStorageGroup {
    /**
     * The capacity of the storage group
     */
    capGb: number;
    /**
     * The child storage group(s) associated with the storage group
     */
    childStorageGroups: string[];
    /**
     * States whether compression is enabled on storage group
     */
    compression: boolean;
    /**
     * States whether compression is enabled on storage group
     */
    compressionRatio: string;
    /**
     * Compression ratio numeric value of the storage group
     */
    compressionRatioToOne: number;
    /**
     * The emulation of the volumes in the storage group
     */
    deviceEmulation: string;
    /**
     * Host IO limit of the storage group
     */
    hostIoLimit: outputs.GetStoragegroupStorageGroupHostIoLimit;
    /**
     * The ID of the storage group
     */
    id: string;
    /**
     * The masking views associated with the storage group
     */
    maskingviews: string[];
    /**
     * The name of the storage group
     */
    name: string;
    /**
     * The number of child storage groups associated with the storage group
     */
    numOfChildSgs: number;
    /**
     * The number of masking views associated with the storage group
     */
    numOfMaskingViews: number;
    /**
     * The number of parent storage groups associated with the storage group
     */
    numOfParentSgs: number;
    /**
     * The number of snapshot policies associated with the storage group
     */
    numOfSnapshotPolicies: number;
    /**
     * The number of snapshots associated with the storage group
     */
    numOfSnapshots: number;
    /**
     * The number of volumes associated with the storage group
     */
    numOfVols: number;
    /**
     * The parent storage group(s) associated with the storage group
     */
    parentStorageGroups: string[];
    /**
     * The service level associated with the storage group
     */
    serviceLevel: string;
    /**
     * The service level associated with the storage group
     */
    slo: string;
    /**
     * The service level compliance status of the storage group
     */
    sloCompliance: string;
    /**
     * The snapshot policies associated with the storage group
     */
    snapshotPolicies: string[];
    /**
     * The SRP to be associated with the Storage Group. An existing SRP or 'none' must be specified
     */
    srpId: string;
    /**
     * The tags associated with the storage group
     */
    tags: string;
    /**
     * The storage group type
     */
    type: string;
    /**
     * States whether the storage group is protected
     */
    unprotected: boolean;
    /**
     * The amount of unreducible data in Gb.
     */
    unreducibleDataGb: number;
    /**
     * Storage Group UUID
     */
    uuid: string;
    /**
     * The IDs of the volume associated with the storage group.
     */
    volumeIds: string[];
    /**
     * VP saved percentage figure
     */
    vpSavedPercent: number;
    /**
     * The workload associated with the storage group
     */
    workload: string;
}

export interface GetStoragegroupStorageGroupHostIoLimit {
    dynamicDistribution: string;
    hostIoLimitIoSec: string;
    hostIoLimitMbSec: string;
}

export interface GetStoragegroupTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    read?: string;
}

export interface GetVolumeFilter {
    /**
     * Greater than, Less than or equal to the allocated percent.
     */
    allocatedPercent?: string;
    /**
     * Volumes that are associated (true/false).
     */
    associated?: boolean;
    /**
     * Volumes that are available thin volumes (true/false).
     */
    availableThinVolumes?: boolean;
    /**
     * Volumes that are bound tdev (true/false).
     */
    boundTdev?: boolean;
    /**
     * Greater than, Less than or equal to the cap CYL.
     */
    capCyl?: string;
    /**
     * Greater than, Less than or equal to the cap gb.
     */
    capGb?: string;
    /**
     * Greater than, Less than or equal to the cap mb.
     */
    capMb?: string;
    /**
     * Greater than, Less than or equal to the cap tb.
     */
    capTb?: string;
    /**
     * Volumes that are mapped to a CU image with the specified CU image number.
     */
    cuImageNum?: string;
    /**
     * Volumes that are mapped to a CU image with the specified CU SSID.
     */
    cuImageSsid?: string;
    /**
     * Volumes that are data volume (true/false).
     */
    dataVolume?: boolean;
    /**
     * Volumes that are dld (true/false).
     */
    dld?: boolean;
    /**
     * Volumes that are drv (true/false).
     */
    drv?: boolean;
    /**
     * Volumes that contain the specified effective_wwn.
     */
    effectiveWwn?: string;
    /**
     * Volumes that are of the specified emulation.
     */
    emulation?: string;
    /**
     * Volumes that are encapsulated (true/false).
     */
    encapsulated?: boolean;
    /**
     * The specified volume encapsulated_wwn.
     */
    encapsulatedWwn?: string;
    /**
     * Volumes that are gatekeeper (true/false).
     */
    gatekeeper?: boolean;
    /**
     * Volumes that have effective wwns (true/false)
     */
    hasEffectiveWwn?: boolean;
    /**
     * Volumes that are mapped (true/false).
     */
    mapped?: boolean;
    /**
     * Volumes that are mobility ID enabled (true/false).
     */
    mobilityIdEnabled?: boolean;
    /**
     * Volumes that correspond to Namespace Globally Unique Identifier that uses the EUI64 16-byte designator format.
     */
    nguid?: string;
    /**
     * Greater than, Less than or equal to the number of front end paths.
     */
    numOfFrontEndPaths?: string;
    /**
     * Greater than, Less than or equal to the number of masking views.
     */
    numOfMaskingViews?: string;
    /**
     * Greater than, Less than or equal to the number of storage groups.
     */
    numOfStorageGroups?: string;
    /**
     * Volumes that contain the specified Oracle Instance Name.
     */
    oracleInstanceName?: string;
    /**
     * The specified volume physical name.
     */
    physicalName?: string;
    /**
     * Volumes that are pinned (true/false).
     */
    pinned?: boolean;
    /**
     * Volumes that are private (true/false).
     */
    privateVolumes?: boolean;
    /**
     * Volumes that are part of the specified rdf group.
     */
    rdfGroupNumber?: string;
    /**
     * Volumes that are reserved (true/false).
     */
    reserved?: boolean;
    /**
     * Volumes that are mapped to CU images associated to the specified FICON split.
     */
    splitName?: string;
    /**
     * The specified volume status.
     */
    status?: string;
    /**
     * The name of the storage group.
     */
    storageGroupName?: string;
    /**
     * Greater than, Less than or equal to the specified symmlun.
     */
    symmlun?: string;
    /**
     * Volumes that are tdev (true/false).
     */
    tdev?: boolean;
    /**
     * Volumes that are thin bcv (true/false).
     */
    thinBcv?: boolean;
    /**
     * Volumes that contain the specified volume type.
     */
    type?: string;
    /**
     * Greater than,Less than or equal to the unreducible data gb.
     */
    unreducibleDataGb?: string;
    /**
     * Volumes that are vdev (true/false).
     */
    vdev?: boolean;
    /**
     * Volumes that are virtual volumes (true/false).
     */
    virtualVolumes?: boolean;
    /**
     * The specified volume volume identifier.
     */
    volumeIdentifier?: string;
    /**
     * The specified volume wwn.
     */
    wwn?: string;
}

export interface GetVolumeTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    read?: string;
}

export interface GetVolumeVolume {
    /**
     * The allocated percentage of the volume.
     */
    allocatedPercent: number;
    /**
     * The capability of volume in the unit of CYL.
     */
    capCyl: number;
    /**
     * The capability of volume in the unit of GB.
     */
    capGb: number;
    /**
     * The capability of volume in the unit of MB.
     */
    capMb: number;
    /**
     * Effective WWN of the volume.
     */
    effectiveWwn: string;
    /**
     * The emulation of the volume Enumeration values.
     */
    emulation: string;
    /**
     * States whether the volume is encapsulated.
     */
    encapsulated: boolean;
    /**
     * Encapsulated  WWN of the volume.
     */
    encapsulatedWwn: string;
    /**
     * States whether volume has effective WWN.
     */
    hasEffectiveWwn: boolean;
    /**
     * The ID of the volume.
     */
    id: string;
    /**
     * States whether mobility ID is enabled on the volume.
     */
    mobilityIdEnabled: boolean;
    /**
     * The NGUID of the volume.
     */
    nguid: string;
    /**
     * The number of front end paths of the volume.
     */
    numOfFrontEndPaths: number;
    /**
     * The number of storage groups associated with the volume.
     */
    numOfStorageGroups: number;
    /**
     * Oracle instance name associated with the volume.
     */
    oracleInstanceName: string;
    /**
     * The physical name of the volume.
     */
    physicalName: string;
    /**
     * States whether the volume is pinned.
     */
    pinned: boolean;
    /**
     * The RDF groups associated with the volume.
     */
    rdfGroupIds: outputs.GetVolumeVolumeRdfGroupId[];
    /**
     * States whether the volume is reserved.
     */
    reserved: boolean;
    /**
     * States whether the volume is a snapvx source.
     */
    snapvxSource: boolean;
    /**
     * States whether the volume is a snapvx target.
     */
    snapvxTarget: boolean;
    /**
     * The ssid of the volume.
     */
    ssid: string;
    /**
     * The status of the volume.
     */
    status: string;
    /**
     * List of storage groups which are associated with the volume.
     */
    storageGroups: outputs.GetVolumeVolumeStorageGroup[];
    /**
     * The symmetrix ports associated with the volume.
     */
    symmetrixPortKeys: outputs.GetVolumeVolumeSymmetrixPortKey[];
    /**
     * The type of the volume.
     */
    type: string;
    /**
     * The amount of unreducible data in Gb.
     */
    unreducibleDataGb: number;
    /**
     * The identifier of the volume.
     */
    volumeIdentifier: string;
    /**
     * The WWN of the volume.
     */
    wwn: string;
}

export interface GetVolumeVolumeRdfGroupId {
    /**
     * The label of the rdf group.
     */
    label: string;
    /**
     * The number of rdf group.
     */
    rdfGroupNumber: number;
}

export interface GetVolumeVolumeStorageGroup {
    /**
     * The ID of the storage group parents.
     */
    parentStorageGroupName: string;
    /**
     * The ID of the storage group.
     */
    storageGroupName: string;
}

export interface GetVolumeVolumeSymmetrixPortKey {
    /**
     * The ID of the director.
     */
    directorId: string;
    /**
     * The ID of the symmetrix port.
     */
    portId: string;
}

export interface HostHostFlags {
    /**
     * It enables a SCSI bus reset to only occur to the port that received the reset. (Update Supported)
     */
    avoidResetBroadcast: outputs.HostHostFlagsAvoidResetBroadcast;
    /**
     * It is used for hosts that do not expect the queue to be flushed on a 0629 sense. (Update Supported)
     */
    disableQResetOnUa: outputs.HostHostFlagsDisableQResetOnUa;
    /**
     * It enables the environmental error reporting by the storage system to the host on the specific port. (Update Supported)
     */
    environSet: outputs.HostHostFlagsEnvironSet;
    /**
     * This attribute enables an Open VMS fibre connection. (Update Supported)
     */
    openvms: outputs.HostHostFlagsOpenvms;
    /**
     * Alters the inquiry data to report that the storage system supports the SCSI-3 protocol. (Update Supported)
     */
    scsi3: outputs.HostHostFlagsScsi3;
    /**
     * This attribute provides a stricter compliance with SCSI standards. (Update Supported)
     */
    scsiSupport1: outputs.HostHostFlagsScsiSupport1;
    /**
     * When setting this flag, the port must be offline. (Update Supported)
     */
    spc2ProtocolVersion: outputs.HostHostFlagsSpc2ProtocolVersion;
    /**
     * It enables the volume set addressing mode. (Update Supported)
     */
    volumeSetAddressing: outputs.HostHostFlagsVolumeSetAddressing;
}

export interface HostHostFlagsAvoidResetBroadcast {
    enabled: boolean;
    override: boolean;
}

export interface HostHostFlagsDisableQResetOnUa {
    enabled: boolean;
    override: boolean;
}

export interface HostHostFlagsEnvironSet {
    enabled: boolean;
    override: boolean;
}

export interface HostHostFlagsOpenvms {
    enabled: boolean;
    override: boolean;
}

export interface HostHostFlagsScsi3 {
    enabled: boolean;
    override: boolean;
}

export interface HostHostFlagsScsiSupport1 {
    enabled: boolean;
    override: boolean;
}

export interface HostHostFlagsSpc2ProtocolVersion {
    enabled: boolean;
    override: boolean;
}

export interface HostHostFlagsVolumeSetAddressing {
    enabled: boolean;
    override: boolean;
}

export interface HostgroupHostFlags {
    /**
     * It enables a SCSI bus reset to only occur to the port that received the reset. (Update Supported)
     */
    avoidResetBroadcast: outputs.HostgroupHostFlagsAvoidResetBroadcast;
    /**
     * It is used for hosts that do not expect the queue to be flushed on a 0629 sense. (Update Supported)
     */
    disableQResetOnUa: outputs.HostgroupHostFlagsDisableQResetOnUa;
    /**
     * It enables the environmental error reporting by the storage system to the host on the specific port. (Update Supported)
     */
    environSet: outputs.HostgroupHostFlagsEnvironSet;
    /**
     * This attribute enables an Open VMS fibre connection. (Update Supported)
     */
    openvms: outputs.HostgroupHostFlagsOpenvms;
    /**
     * Alters the inquiry data to report that the storage system supports the SCSI-3 protocol. (Update Supported)
     */
    scsi3: outputs.HostgroupHostFlagsScsi3;
    /**
     * This attribute provides a stricter compliance with SCSI standards. (Update Supported)
     */
    scsiSupport1: outputs.HostgroupHostFlagsScsiSupport1;
    /**
     * When setting this flag, the port must be offline. (Update Supported)
     */
    spc2ProtocolVersion: outputs.HostgroupHostFlagsSpc2ProtocolVersion;
    /**
     * It enables the volume set addressing mode. (Update Supported)
     */
    volumeSetAddressing: outputs.HostgroupHostFlagsVolumeSetAddressing;
}

export interface HostgroupHostFlagsAvoidResetBroadcast {
    enabled: boolean;
    override: boolean;
}

export interface HostgroupHostFlagsDisableQResetOnUa {
    enabled: boolean;
    override: boolean;
}

export interface HostgroupHostFlagsEnvironSet {
    enabled: boolean;
    override: boolean;
}

export interface HostgroupHostFlagsOpenvms {
    enabled: boolean;
    override: boolean;
}

export interface HostgroupHostFlagsScsi3 {
    enabled: boolean;
    override: boolean;
}

export interface HostgroupHostFlagsScsiSupport1 {
    enabled: boolean;
    override: boolean;
}

export interface HostgroupHostFlagsSpc2ProtocolVersion {
    enabled: boolean;
    override: boolean;
}

export interface HostgroupHostFlagsVolumeSetAddressing {
    enabled: boolean;
    override: boolean;
}

export interface PortgroupPort {
    directorId: string;
    portId: string;
}

export interface SnapshotLinkedStorageGroup {
    /**
     * When the snapshot link is being defined
     */
    backgroundDefineInProgress: boolean;
    /**
     * When the snapshot link has been fully defined
     */
    defined: boolean;
    /**
     * The average timestamp of all linked volumes that are linked
     */
    linkedCreationTimestamp: string;
    /**
     * The linked volumes name
     */
    linkedVolumeName: string;
    /**
     * The storage group name
     */
    name: string;
    /**
     * Percentage of tracks copied
     */
    percentageCopied: number;
    /**
     * The source volumes name
     */
    sourceVolumeName: string;
    /**
     * Size of the tracks.
     */
    trackSize: number;
    /**
     * Number of tracks
     */
    tracks: number;
}

export interface SnapshotSnapshotActions {
    /**
     * both_sides defaults to false. Performs the operation on both locally and remotely associated snapshots.
     */
    bothSides: boolean;
    /**
     * Link a snapshot generation. (Update Supported)
     */
    link?: outputs.SnapshotSnapshotActionsLink;
    /**
     * Name of the snapshot. (Update Supported)
     */
    name: string;
    /**
     * remote defaults to false. If true, The target storage group will not have compression turned on when the SRP is compression capable.
     */
    remote: boolean;
    /**
     * Restore a snapshot generation. (Update Supported)
     */
    restore?: outputs.SnapshotSnapshotActionsRestore;
    /**
     * Set the number of days or hours for a snapshot generation to be secure before it auto-terminates (provided it is not linked). (Update Supported)
     */
    secure?: outputs.SnapshotSnapshotActionsSecure;
    /**
     * Set the number of days or hours for a snapshot generation before it auto-terminates (provided it is not linked). (Update Supported)
     */
    timeToLive?: outputs.SnapshotSnapshotActionsTimeToLive;
}

export interface SnapshotSnapshotActionsLink {
    /**
     * copy defaults to false. If true Sets the link copy mode to perform background copy to the target volume(s).
     */
    copy: boolean;
    /**
     * enable defaults to false. Flag to enable link on the snapshot
     */
    enable: boolean;
    /**
     * no_compression defaults to false. If true, The target storage group will not have compression turned on when the SRP is compression capable. Option Used in Action Link
     */
    noCompression: boolean;
    /**
     * remote defaults to false. If true, The target storage group will not have compression turned on when the SRP is compression capable. Option Used in Action Link
     */
    remote: boolean;
    /**
     * The target storage group to link the snapshot too
     */
    targetStorageGroup: string;
}

export interface SnapshotSnapshotActionsRestore {
    /**
     * enable defaults to false. Flag to enable restore on the snapshot
     */
    enable: boolean;
    /**
     * remote defaults to false. If true, The target storage group will not have compression turned on when the SRP is compression capable. Option Used in Action Link
     */
    remote: boolean;
}

export interface SnapshotSnapshotActionsSecure {
    /**
     * enable defaults to false. Flag to enable link on the snapshot
     */
    enable: boolean;
    /**
     * secure defaults to 1 day. The time that the snapshot generation is to be secure for.
     */
    secure: number;
    /**
     * time_in_hours or Days defaults to Days. False is days, true is hours.
     */
    timeInHours: boolean;
}

export interface SnapshotSnapshotActionsTimeToLive {
    /**
     * enable defaults to false. Flag to enable link on the snapshot
     */
    enable: boolean;
    /**
     * time_in_hours or Days defaults to Days. False is days, true is hours.
     */
    timeInHours: boolean;
    /**
     * time_to_live defaults to 1 day. Gives the total time before expiry for these actions.
     */
    timeToLive: number;
}

export interface SnapshotSourceVolume {
    /**
     * The capacity of the snapshot volume in cylinders
     */
    capacity: number;
    /**
     * The capacity of the snapshot volume in GB
     */
    capacityGb: number;
    /**
     * The name of the SnapVX snapshot generation source volume
     */
    name: string;
}

export interface SnapshotStorageGroup {
    /**
     * Name of the storage group you would like to take a snapshot.
     */
    name: string;
}

export interface StoragegroupHostIoLimit {
    dynamicDistribution: string;
    hostIoLimitIoSec: string;
    hostIoLimitMbSec: string;
}

export interface VolumeRdfGroupId {
    /**
     * The label of the rdf group.
     */
    label: string;
    /**
     * The number of rdf group.
     */
    rdfGroupNumber: number;
}

export interface VolumeStorageGroup {
    /**
     * The ID of the storage group parents.
     */
    parentStorageGroupName: string;
    /**
     * The ID of the storage group.
     */
    storageGroupName: string;
}

export interface VolumeSymmetrixPortKey {
    /**
     * The ID of the director.
     */
    directorId: string;
    /**
     * The ID of the symmetrix port.
     */
    portId: string;
}

