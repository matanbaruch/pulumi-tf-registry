// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Snapshotpolicy extends pulumi.CustomResource {
    /**
     * Get an existing Snapshotpolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnapshotpolicyState, opts?: pulumi.CustomResourceOptions): Snapshotpolicy {
        return new Snapshotpolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powermax:index/snapshotpolicy:Snapshotpolicy';

    /**
     * Returns true if the given object is an instance of Snapshotpolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Snapshotpolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Snapshotpolicy.__pulumiType;
    }

    /**
     * The threshold of good snapshots which are not failed/bad for compliance to change from warning to critical. (Update
     * Supported)
     */
    public readonly complianceCountCritical!: pulumi.Output<number>;
    /**
     * The threshold of good snapshots which are not failed/bad for compliance to change from normal to warning. (Update
     * Supported)
     */
    public readonly complianceCountWarning!: pulumi.Output<number>;
    /**
     * The interval between snapshots Enumeration values: 10 Minutes, 12 Minutes, 15 Minutes, 20 Minutes, 30 Minutes, 1 Hour, 2
     * Hours, 3 Hours, 4 Hours, 6 Hours, 8 Hours, 12 Hours, 1 Day, 7 Days. (Update Supported)
     */
    public readonly interval!: pulumi.Output<string>;
    /**
     * Number of minutes between each policy execution
     */
    public readonly intervalMinutes!: pulumi.Output<number>;
    /**
     * The last time that the snapshot policy was run
     */
    public readonly lastTimeUsed!: pulumi.Output<string>;
    /**
     * Number of minutes after 00:00 on Monday morning that the policy will execute. (Update Supported)
     */
    public readonly offsetMinutes!: pulumi.Output<number>;
    /**
     * The name of the cloud provider associated with this policy. Only applies to cloud policies
     */
    public readonly providerName!: pulumi.Output<string>;
    /**
     * The number of days that snapshots will be retained in the cloud for. Only applies to cloud policies
     */
    public readonly retentionDays!: pulumi.Output<number>;
    /**
     * Set if the snapshot policy creates secure snapshots. (Update Supported)
     */
    public readonly secure!: pulumi.Output<boolean>;
    /**
     * Number of snapshots that will be taken before the oldest ones are no longer required. (Update Supported)
     */
    public readonly snapshotCount!: pulumi.Output<number>;
    /**
     * Name of the snapshot policy. Only alphanumeric characters, underscores ( _ ), and hyphens (-) are allowed and max length
     * can be 32 characters. (Update Supported)
     */
    public readonly snapshotPolicyName!: pulumi.Output<string>;
    /**
     * The total number of storage groups that this snapshot policy is associated with
     */
    public /*out*/ readonly storageGroupCount!: pulumi.Output<number>;
    /**
     * The storage groups associated with the snapshot policy. This field cannot be set during create and is only valid for
     * Edit/Update.If user wants to delete the snapshot policy all associated storage groups will also be unlinked from the
     * Snapshot Policy. (Update Supported)
     */
    public readonly storageGroups!: pulumi.Output<string[]>;
    /**
     * Set if the snapshot policy has been suspended
     */
    public readonly suspended!: pulumi.Output<boolean>;
    /**
     * The type of Snapshots that are created with the policy, local or cloud
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a Snapshotpolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnapshotpolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnapshotpolicyArgs | SnapshotpolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnapshotpolicyState | undefined;
            resourceInputs["complianceCountCritical"] = state ? state.complianceCountCritical : undefined;
            resourceInputs["complianceCountWarning"] = state ? state.complianceCountWarning : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["intervalMinutes"] = state ? state.intervalMinutes : undefined;
            resourceInputs["lastTimeUsed"] = state ? state.lastTimeUsed : undefined;
            resourceInputs["offsetMinutes"] = state ? state.offsetMinutes : undefined;
            resourceInputs["providerName"] = state ? state.providerName : undefined;
            resourceInputs["retentionDays"] = state ? state.retentionDays : undefined;
            resourceInputs["secure"] = state ? state.secure : undefined;
            resourceInputs["snapshotCount"] = state ? state.snapshotCount : undefined;
            resourceInputs["snapshotPolicyName"] = state ? state.snapshotPolicyName : undefined;
            resourceInputs["storageGroupCount"] = state ? state.storageGroupCount : undefined;
            resourceInputs["storageGroups"] = state ? state.storageGroups : undefined;
            resourceInputs["suspended"] = state ? state.suspended : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as SnapshotpolicyArgs | undefined;
            if ((!args || args.snapshotPolicyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'snapshotPolicyName'");
            }
            resourceInputs["complianceCountCritical"] = args ? args.complianceCountCritical : undefined;
            resourceInputs["complianceCountWarning"] = args ? args.complianceCountWarning : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["intervalMinutes"] = args ? args.intervalMinutes : undefined;
            resourceInputs["lastTimeUsed"] = args ? args.lastTimeUsed : undefined;
            resourceInputs["offsetMinutes"] = args ? args.offsetMinutes : undefined;
            resourceInputs["providerName"] = args ? args.providerName : undefined;
            resourceInputs["retentionDays"] = args ? args.retentionDays : undefined;
            resourceInputs["secure"] = args ? args.secure : undefined;
            resourceInputs["snapshotCount"] = args ? args.snapshotCount : undefined;
            resourceInputs["snapshotPolicyName"] = args ? args.snapshotPolicyName : undefined;
            resourceInputs["storageGroups"] = args ? args.storageGroups : undefined;
            resourceInputs["suspended"] = args ? args.suspended : undefined;
            resourceInputs["storageGroupCount"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Snapshotpolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Snapshotpolicy resources.
 */
export interface SnapshotpolicyState {
    /**
     * The threshold of good snapshots which are not failed/bad for compliance to change from warning to critical. (Update
     * Supported)
     */
    complianceCountCritical?: pulumi.Input<number>;
    /**
     * The threshold of good snapshots which are not failed/bad for compliance to change from normal to warning. (Update
     * Supported)
     */
    complianceCountWarning?: pulumi.Input<number>;
    /**
     * The interval between snapshots Enumeration values: 10 Minutes, 12 Minutes, 15 Minutes, 20 Minutes, 30 Minutes, 1 Hour, 2
     * Hours, 3 Hours, 4 Hours, 6 Hours, 8 Hours, 12 Hours, 1 Day, 7 Days. (Update Supported)
     */
    interval?: pulumi.Input<string>;
    /**
     * Number of minutes between each policy execution
     */
    intervalMinutes?: pulumi.Input<number>;
    /**
     * The last time that the snapshot policy was run
     */
    lastTimeUsed?: pulumi.Input<string>;
    /**
     * Number of minutes after 00:00 on Monday morning that the policy will execute. (Update Supported)
     */
    offsetMinutes?: pulumi.Input<number>;
    /**
     * The name of the cloud provider associated with this policy. Only applies to cloud policies
     */
    providerName?: pulumi.Input<string>;
    /**
     * The number of days that snapshots will be retained in the cloud for. Only applies to cloud policies
     */
    retentionDays?: pulumi.Input<number>;
    /**
     * Set if the snapshot policy creates secure snapshots. (Update Supported)
     */
    secure?: pulumi.Input<boolean>;
    /**
     * Number of snapshots that will be taken before the oldest ones are no longer required. (Update Supported)
     */
    snapshotCount?: pulumi.Input<number>;
    /**
     * Name of the snapshot policy. Only alphanumeric characters, underscores ( _ ), and hyphens (-) are allowed and max length
     * can be 32 characters. (Update Supported)
     */
    snapshotPolicyName?: pulumi.Input<string>;
    /**
     * The total number of storage groups that this snapshot policy is associated with
     */
    storageGroupCount?: pulumi.Input<number>;
    /**
     * The storage groups associated with the snapshot policy. This field cannot be set during create and is only valid for
     * Edit/Update.If user wants to delete the snapshot policy all associated storage groups will also be unlinked from the
     * Snapshot Policy. (Update Supported)
     */
    storageGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set if the snapshot policy has been suspended
     */
    suspended?: pulumi.Input<boolean>;
    /**
     * The type of Snapshots that are created with the policy, local or cloud
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Snapshotpolicy resource.
 */
export interface SnapshotpolicyArgs {
    /**
     * The threshold of good snapshots which are not failed/bad for compliance to change from warning to critical. (Update
     * Supported)
     */
    complianceCountCritical?: pulumi.Input<number>;
    /**
     * The threshold of good snapshots which are not failed/bad for compliance to change from normal to warning. (Update
     * Supported)
     */
    complianceCountWarning?: pulumi.Input<number>;
    /**
     * The interval between snapshots Enumeration values: 10 Minutes, 12 Minutes, 15 Minutes, 20 Minutes, 30 Minutes, 1 Hour, 2
     * Hours, 3 Hours, 4 Hours, 6 Hours, 8 Hours, 12 Hours, 1 Day, 7 Days. (Update Supported)
     */
    interval?: pulumi.Input<string>;
    /**
     * Number of minutes between each policy execution
     */
    intervalMinutes?: pulumi.Input<number>;
    /**
     * The last time that the snapshot policy was run
     */
    lastTimeUsed?: pulumi.Input<string>;
    /**
     * Number of minutes after 00:00 on Monday morning that the policy will execute. (Update Supported)
     */
    offsetMinutes?: pulumi.Input<number>;
    /**
     * The name of the cloud provider associated with this policy. Only applies to cloud policies
     */
    providerName?: pulumi.Input<string>;
    /**
     * The number of days that snapshots will be retained in the cloud for. Only applies to cloud policies
     */
    retentionDays?: pulumi.Input<number>;
    /**
     * Set if the snapshot policy creates secure snapshots. (Update Supported)
     */
    secure?: pulumi.Input<boolean>;
    /**
     * Number of snapshots that will be taken before the oldest ones are no longer required. (Update Supported)
     */
    snapshotCount?: pulumi.Input<number>;
    /**
     * Name of the snapshot policy. Only alphanumeric characters, underscores ( _ ), and hyphens (-) are allowed and max length
     * can be 32 characters. (Update Supported)
     */
    snapshotPolicyName: pulumi.Input<string>;
    /**
     * The storage groups associated with the snapshot policy. This field cannot be set during create and is only valid for
     * Edit/Update.If user wants to delete the snapshot policy all associated storage groups will also be unlinked from the
     * Snapshot Policy. (Update Supported)
     */
    storageGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set if the snapshot policy has been suspended
     */
    suspended?: pulumi.Input<boolean>;
}
