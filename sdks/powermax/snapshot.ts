// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Snapshot extends pulumi.CustomResource {
    /**
     * Get an existing Snapshot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnapshotState, opts?: pulumi.CustomResourceOptions): Snapshot {
        return new Snapshot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powermax:index/snapshot:Snapshot';

    /**
     * Returns true if the given object is an instance of Snapshot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Snapshot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Snapshot.__pulumiType;
    }

    /**
     * Set if this generation secure has expired
     */
    public /*out*/ readonly expired!: pulumi.Output<boolean>;
    /**
     * Number of generation for the snapshot
     */
    public readonly generation!: pulumi.Output<number>;
    /**
     * Set if this generation is SnapVX linked
     */
    public /*out*/ readonly linked!: pulumi.Output<boolean>;
    /**
     * Linked storage group names. Only populated if the generation is linked
     */
    public /*out*/ readonly linkedStorageGroupNames!: pulumi.Output<string[]>;
    /**
     * Linked storage group and volume information. Only populated if the generation is linked
     */
    public readonly linkedStorageGroups!: pulumi.Output<outputs.SnapshotLinkedStorageGroup[]>;
    /**
     * Name of a snapshot
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The number of tracks uniquely allocated for this snapshots delta. This is an approximate indication of the number of
     * tracks that will be returned to the SRP if this snapshot is terminated.
     */
    public readonly nonSharedTracks!: pulumi.Output<number>;
    /**
     * The number of source volumes in the snapshot generation
     */
    public readonly numSourceVolumes!: pulumi.Output<number>;
    /**
     * The number of non-gatekeeper storage group volumes
     */
    public /*out*/ readonly numStorageGroupVolumes!: pulumi.Output<number>;
    /**
     * Set if this snapshot is persistent. Only applicable to policy based snapshots
     */
    public readonly persistent!: pulumi.Output<boolean>;
    /**
     * Set if this generation is SnapVX linked
     */
    public /*out*/ readonly restored!: pulumi.Output<boolean>;
    /**
     * When the snapshot will expire once it is not linked
     */
    public readonly secureExpiryDate!: pulumi.Output<string>;
    /**
     * Unique Snap ID for Snapshot
     */
    public readonly snapid!: pulumi.Output<number>;
    public readonly snapshotActions!: pulumi.Output<outputs.SnapshotSnapshotActions | undefined>;
    /**
     * The source volumes of the snapshot generation
     */
    public /*out*/ readonly sourceVolumes!: pulumi.Output<outputs.SnapshotSourceVolume[]>;
    /**
     * The state of the snapshot generation
     */
    public /*out*/ readonly states!: pulumi.Output<string[]>;
    public readonly storageGroup!: pulumi.Output<outputs.SnapshotStorageGroup | undefined>;
    /**
     * When the snapshot will expire once it is not linked
     */
    public readonly timeToLiveExpiryDate!: pulumi.Output<string>;
    /**
     * Timestamp of the snapshot generation
     */
    public /*out*/ readonly timestamp!: pulumi.Output<string>;
    /**
     * The timestamp of the snapshot generation in milliseconds since 1970
     */
    public /*out*/ readonly timestampUtc!: pulumi.Output<string>;
    /**
     * The number of source tracks that have been overwritten by the host
     */
    public readonly tracks!: pulumi.Output<number>;

    /**
     * Create a Snapshot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SnapshotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnapshotArgs | SnapshotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnapshotState | undefined;
            resourceInputs["expired"] = state ? state.expired : undefined;
            resourceInputs["generation"] = state ? state.generation : undefined;
            resourceInputs["linked"] = state ? state.linked : undefined;
            resourceInputs["linkedStorageGroupNames"] = state ? state.linkedStorageGroupNames : undefined;
            resourceInputs["linkedStorageGroups"] = state ? state.linkedStorageGroups : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nonSharedTracks"] = state ? state.nonSharedTracks : undefined;
            resourceInputs["numSourceVolumes"] = state ? state.numSourceVolumes : undefined;
            resourceInputs["numStorageGroupVolumes"] = state ? state.numStorageGroupVolumes : undefined;
            resourceInputs["persistent"] = state ? state.persistent : undefined;
            resourceInputs["restored"] = state ? state.restored : undefined;
            resourceInputs["secureExpiryDate"] = state ? state.secureExpiryDate : undefined;
            resourceInputs["snapid"] = state ? state.snapid : undefined;
            resourceInputs["snapshotActions"] = state ? state.snapshotActions : undefined;
            resourceInputs["sourceVolumes"] = state ? state.sourceVolumes : undefined;
            resourceInputs["states"] = state ? state.states : undefined;
            resourceInputs["storageGroup"] = state ? state.storageGroup : undefined;
            resourceInputs["timeToLiveExpiryDate"] = state ? state.timeToLiveExpiryDate : undefined;
            resourceInputs["timestamp"] = state ? state.timestamp : undefined;
            resourceInputs["timestampUtc"] = state ? state.timestampUtc : undefined;
            resourceInputs["tracks"] = state ? state.tracks : undefined;
        } else {
            const args = argsOrState as SnapshotArgs | undefined;
            resourceInputs["generation"] = args ? args.generation : undefined;
            resourceInputs["linkedStorageGroups"] = args ? args.linkedStorageGroups : undefined;
            resourceInputs["nonSharedTracks"] = args ? args.nonSharedTracks : undefined;
            resourceInputs["numSourceVolumes"] = args ? args.numSourceVolumes : undefined;
            resourceInputs["persistent"] = args ? args.persistent : undefined;
            resourceInputs["secureExpiryDate"] = args ? args.secureExpiryDate : undefined;
            resourceInputs["snapid"] = args ? args.snapid : undefined;
            resourceInputs["snapshotActions"] = args ? args.snapshotActions : undefined;
            resourceInputs["storageGroup"] = args ? args.storageGroup : undefined;
            resourceInputs["timeToLiveExpiryDate"] = args ? args.timeToLiveExpiryDate : undefined;
            resourceInputs["tracks"] = args ? args.tracks : undefined;
            resourceInputs["expired"] = undefined /*out*/;
            resourceInputs["linked"] = undefined /*out*/;
            resourceInputs["linkedStorageGroupNames"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["numStorageGroupVolumes"] = undefined /*out*/;
            resourceInputs["restored"] = undefined /*out*/;
            resourceInputs["sourceVolumes"] = undefined /*out*/;
            resourceInputs["states"] = undefined /*out*/;
            resourceInputs["timestamp"] = undefined /*out*/;
            resourceInputs["timestampUtc"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Snapshot.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Snapshot resources.
 */
export interface SnapshotState {
    /**
     * Set if this generation secure has expired
     */
    expired?: pulumi.Input<boolean>;
    /**
     * Number of generation for the snapshot
     */
    generation?: pulumi.Input<number>;
    /**
     * Set if this generation is SnapVX linked
     */
    linked?: pulumi.Input<boolean>;
    /**
     * Linked storage group names. Only populated if the generation is linked
     */
    linkedStorageGroupNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Linked storage group and volume information. Only populated if the generation is linked
     */
    linkedStorageGroups?: pulumi.Input<pulumi.Input<inputs.SnapshotLinkedStorageGroup>[]>;
    /**
     * Name of a snapshot
     */
    name?: pulumi.Input<string>;
    /**
     * The number of tracks uniquely allocated for this snapshots delta. This is an approximate indication of the number of
     * tracks that will be returned to the SRP if this snapshot is terminated.
     */
    nonSharedTracks?: pulumi.Input<number>;
    /**
     * The number of source volumes in the snapshot generation
     */
    numSourceVolumes?: pulumi.Input<number>;
    /**
     * The number of non-gatekeeper storage group volumes
     */
    numStorageGroupVolumes?: pulumi.Input<number>;
    /**
     * Set if this snapshot is persistent. Only applicable to policy based snapshots
     */
    persistent?: pulumi.Input<boolean>;
    /**
     * Set if this generation is SnapVX linked
     */
    restored?: pulumi.Input<boolean>;
    /**
     * When the snapshot will expire once it is not linked
     */
    secureExpiryDate?: pulumi.Input<string>;
    /**
     * Unique Snap ID for Snapshot
     */
    snapid?: pulumi.Input<number>;
    snapshotActions?: pulumi.Input<inputs.SnapshotSnapshotActions>;
    /**
     * The source volumes of the snapshot generation
     */
    sourceVolumes?: pulumi.Input<pulumi.Input<inputs.SnapshotSourceVolume>[]>;
    /**
     * The state of the snapshot generation
     */
    states?: pulumi.Input<pulumi.Input<string>[]>;
    storageGroup?: pulumi.Input<inputs.SnapshotStorageGroup>;
    /**
     * When the snapshot will expire once it is not linked
     */
    timeToLiveExpiryDate?: pulumi.Input<string>;
    /**
     * Timestamp of the snapshot generation
     */
    timestamp?: pulumi.Input<string>;
    /**
     * The timestamp of the snapshot generation in milliseconds since 1970
     */
    timestampUtc?: pulumi.Input<string>;
    /**
     * The number of source tracks that have been overwritten by the host
     */
    tracks?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Snapshot resource.
 */
export interface SnapshotArgs {
    /**
     * Number of generation for the snapshot
     */
    generation?: pulumi.Input<number>;
    /**
     * Linked storage group and volume information. Only populated if the generation is linked
     */
    linkedStorageGroups?: pulumi.Input<pulumi.Input<inputs.SnapshotLinkedStorageGroup>[]>;
    /**
     * The number of tracks uniquely allocated for this snapshots delta. This is an approximate indication of the number of
     * tracks that will be returned to the SRP if this snapshot is terminated.
     */
    nonSharedTracks?: pulumi.Input<number>;
    /**
     * The number of source volumes in the snapshot generation
     */
    numSourceVolumes?: pulumi.Input<number>;
    /**
     * Set if this snapshot is persistent. Only applicable to policy based snapshots
     */
    persistent?: pulumi.Input<boolean>;
    /**
     * When the snapshot will expire once it is not linked
     */
    secureExpiryDate?: pulumi.Input<string>;
    /**
     * Unique Snap ID for Snapshot
     */
    snapid?: pulumi.Input<number>;
    snapshotActions?: pulumi.Input<inputs.SnapshotSnapshotActions>;
    storageGroup?: pulumi.Input<inputs.SnapshotStorageGroup>;
    /**
     * When the snapshot will expire once it is not linked
     */
    timeToLiveExpiryDate?: pulumi.Input<string>;
    /**
     * The number of source tracks that have been overwritten by the host
     */
    tracks?: pulumi.Input<number>;
}
