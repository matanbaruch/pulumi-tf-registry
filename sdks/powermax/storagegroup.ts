// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Storagegroup extends pulumi.CustomResource {
    /**
     * Get an existing Storagegroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StoragegroupState, opts?: pulumi.CustomResourceOptions): Storagegroup {
        return new Storagegroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powermax:index/storagegroup:Storagegroup';

    /**
     * Returns true if the given object is an instance of Storagegroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Storagegroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Storagegroup.__pulumiType;
    }

    /**
     * The capacity of the storage group
     */
    public /*out*/ readonly capGb!: pulumi.Output<number>;
    /**
     * The child storage group(s) associated with the storage group
     */
    public /*out*/ readonly childStorageGroups!: pulumi.Output<string[]>;
    /**
     * States whether compression is enabled on storage group. (Update Supported)
     */
    public readonly compression!: pulumi.Output<boolean>;
    /**
     * States whether compression is enabled on storage group
     */
    public /*out*/ readonly compressionRatio!: pulumi.Output<string>;
    /**
     * Compression ratio numeric value of the storage group
     */
    public /*out*/ readonly compressionRatioToOne!: pulumi.Output<number>;
    /**
     * The emulation of the volumes in the storage group
     */
    public /*out*/ readonly deviceEmulation!: pulumi.Output<string>;
    /**
     * Host IO limit of the storage group. (Update Supported)
     */
    public readonly hostIoLimit!: pulumi.Output<outputs.StoragegroupHostIoLimit>;
    /**
     * The masking views associated with the storage group
     */
    public /*out*/ readonly maskingviews!: pulumi.Output<string[]>;
    /**
     * The name of the storage group. Only alphanumeric characters, underscores ( _ ), and hyphens (-) are allowed. (Update
     * Supported)
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The number of child storage groups associated with the storage group
     */
    public /*out*/ readonly numOfChildSgs!: pulumi.Output<number>;
    /**
     * The number of masking views associated with the storage group
     */
    public /*out*/ readonly numOfMaskingViews!: pulumi.Output<number>;
    /**
     * The number of parent storage groups associated with the storage group
     */
    public /*out*/ readonly numOfParentSgs!: pulumi.Output<number>;
    /**
     * The number of snapshot policies associated with the storage group
     */
    public /*out*/ readonly numOfSnapshotPolicies!: pulumi.Output<number>;
    /**
     * The number of snapshots associated with the storage group
     */
    public /*out*/ readonly numOfSnapshots!: pulumi.Output<number>;
    /**
     * The number of volumes associated with the storage group
     */
    public readonly numOfVols!: pulumi.Output<number>;
    /**
     * The parent storage group(s) associated with the storage group
     */
    public /*out*/ readonly parentStorageGroups!: pulumi.Output<string[]>;
    /**
     * The service level associated with the storage group
     */
    public /*out*/ readonly serviceLevel!: pulumi.Output<string>;
    /**
     * The service level associated with the storage group. (Update Supported)
     */
    public readonly slo!: pulumi.Output<string>;
    /**
     * The service level compliance status of the storage group
     */
    public /*out*/ readonly sloCompliance!: pulumi.Output<string>;
    /**
     * The snapshot policies associated with the storage group
     */
    public /*out*/ readonly snapshotPolicies!: pulumi.Output<string[]>;
    /**
     * The Srp to be associated with the Storage Group. If you dont want an SRP the srp_id can be set to 'None'. (Update
     * Supported)
     */
    public readonly srpId!: pulumi.Output<string>;
    /**
     * The tags associated with the storage group
     */
    public /*out*/ readonly tags!: pulumi.Output<string>;
    /**
     * The storage group type
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * States whether the storage group is protected
     */
    public /*out*/ readonly unprotected!: pulumi.Output<boolean>;
    /**
     * The amount of unreducible data in Gb.
     */
    public /*out*/ readonly unreducibleDataGb!: pulumi.Output<number>;
    /**
     * Storage Group UUID
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;
    /**
     * The IDs of the volume associated with the storage group. Only pre-existing volumes are considered here. (Update
     * Supported)
     */
    public readonly volumeIds!: pulumi.Output<string[]>;
    /**
     * VP saved percentage figure
     */
    public /*out*/ readonly vpSavedPercent!: pulumi.Output<number>;
    /**
     * The workload associated with the storage group. (Update Supported)
     */
    public readonly workload!: pulumi.Output<string>;

    /**
     * Create a Storagegroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StoragegroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StoragegroupArgs | StoragegroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StoragegroupState | undefined;
            resourceInputs["capGb"] = state ? state.capGb : undefined;
            resourceInputs["childStorageGroups"] = state ? state.childStorageGroups : undefined;
            resourceInputs["compression"] = state ? state.compression : undefined;
            resourceInputs["compressionRatio"] = state ? state.compressionRatio : undefined;
            resourceInputs["compressionRatioToOne"] = state ? state.compressionRatioToOne : undefined;
            resourceInputs["deviceEmulation"] = state ? state.deviceEmulation : undefined;
            resourceInputs["hostIoLimit"] = state ? state.hostIoLimit : undefined;
            resourceInputs["maskingviews"] = state ? state.maskingviews : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numOfChildSgs"] = state ? state.numOfChildSgs : undefined;
            resourceInputs["numOfMaskingViews"] = state ? state.numOfMaskingViews : undefined;
            resourceInputs["numOfParentSgs"] = state ? state.numOfParentSgs : undefined;
            resourceInputs["numOfSnapshotPolicies"] = state ? state.numOfSnapshotPolicies : undefined;
            resourceInputs["numOfSnapshots"] = state ? state.numOfSnapshots : undefined;
            resourceInputs["numOfVols"] = state ? state.numOfVols : undefined;
            resourceInputs["parentStorageGroups"] = state ? state.parentStorageGroups : undefined;
            resourceInputs["serviceLevel"] = state ? state.serviceLevel : undefined;
            resourceInputs["slo"] = state ? state.slo : undefined;
            resourceInputs["sloCompliance"] = state ? state.sloCompliance : undefined;
            resourceInputs["snapshotPolicies"] = state ? state.snapshotPolicies : undefined;
            resourceInputs["srpId"] = state ? state.srpId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["unprotected"] = state ? state.unprotected : undefined;
            resourceInputs["unreducibleDataGb"] = state ? state.unreducibleDataGb : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["volumeIds"] = state ? state.volumeIds : undefined;
            resourceInputs["vpSavedPercent"] = state ? state.vpSavedPercent : undefined;
            resourceInputs["workload"] = state ? state.workload : undefined;
        } else {
            const args = argsOrState as StoragegroupArgs | undefined;
            if ((!args || args.srpId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'srpId'");
            }
            resourceInputs["compression"] = args ? args.compression : undefined;
            resourceInputs["hostIoLimit"] = args ? args.hostIoLimit : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["numOfVols"] = args ? args.numOfVols : undefined;
            resourceInputs["slo"] = args ? args.slo : undefined;
            resourceInputs["srpId"] = args ? args.srpId : undefined;
            resourceInputs["volumeIds"] = args ? args.volumeIds : undefined;
            resourceInputs["workload"] = args ? args.workload : undefined;
            resourceInputs["capGb"] = undefined /*out*/;
            resourceInputs["childStorageGroups"] = undefined /*out*/;
            resourceInputs["compressionRatio"] = undefined /*out*/;
            resourceInputs["compressionRatioToOne"] = undefined /*out*/;
            resourceInputs["deviceEmulation"] = undefined /*out*/;
            resourceInputs["maskingviews"] = undefined /*out*/;
            resourceInputs["numOfChildSgs"] = undefined /*out*/;
            resourceInputs["numOfMaskingViews"] = undefined /*out*/;
            resourceInputs["numOfParentSgs"] = undefined /*out*/;
            resourceInputs["numOfSnapshotPolicies"] = undefined /*out*/;
            resourceInputs["numOfSnapshots"] = undefined /*out*/;
            resourceInputs["parentStorageGroups"] = undefined /*out*/;
            resourceInputs["serviceLevel"] = undefined /*out*/;
            resourceInputs["sloCompliance"] = undefined /*out*/;
            resourceInputs["snapshotPolicies"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["unprotected"] = undefined /*out*/;
            resourceInputs["unreducibleDataGb"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
            resourceInputs["vpSavedPercent"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Storagegroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Storagegroup resources.
 */
export interface StoragegroupState {
    /**
     * The capacity of the storage group
     */
    capGb?: pulumi.Input<number>;
    /**
     * The child storage group(s) associated with the storage group
     */
    childStorageGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * States whether compression is enabled on storage group. (Update Supported)
     */
    compression?: pulumi.Input<boolean>;
    /**
     * States whether compression is enabled on storage group
     */
    compressionRatio?: pulumi.Input<string>;
    /**
     * Compression ratio numeric value of the storage group
     */
    compressionRatioToOne?: pulumi.Input<number>;
    /**
     * The emulation of the volumes in the storage group
     */
    deviceEmulation?: pulumi.Input<string>;
    /**
     * Host IO limit of the storage group. (Update Supported)
     */
    hostIoLimit?: pulumi.Input<inputs.StoragegroupHostIoLimit>;
    /**
     * The masking views associated with the storage group
     */
    maskingviews?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the storage group. Only alphanumeric characters, underscores ( _ ), and hyphens (-) are allowed. (Update
     * Supported)
     */
    name?: pulumi.Input<string>;
    /**
     * The number of child storage groups associated with the storage group
     */
    numOfChildSgs?: pulumi.Input<number>;
    /**
     * The number of masking views associated with the storage group
     */
    numOfMaskingViews?: pulumi.Input<number>;
    /**
     * The number of parent storage groups associated with the storage group
     */
    numOfParentSgs?: pulumi.Input<number>;
    /**
     * The number of snapshot policies associated with the storage group
     */
    numOfSnapshotPolicies?: pulumi.Input<number>;
    /**
     * The number of snapshots associated with the storage group
     */
    numOfSnapshots?: pulumi.Input<number>;
    /**
     * The number of volumes associated with the storage group
     */
    numOfVols?: pulumi.Input<number>;
    /**
     * The parent storage group(s) associated with the storage group
     */
    parentStorageGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The service level associated with the storage group
     */
    serviceLevel?: pulumi.Input<string>;
    /**
     * The service level associated with the storage group. (Update Supported)
     */
    slo?: pulumi.Input<string>;
    /**
     * The service level compliance status of the storage group
     */
    sloCompliance?: pulumi.Input<string>;
    /**
     * The snapshot policies associated with the storage group
     */
    snapshotPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Srp to be associated with the Storage Group. If you dont want an SRP the srp_id can be set to 'None'. (Update
     * Supported)
     */
    srpId?: pulumi.Input<string>;
    /**
     * The tags associated with the storage group
     */
    tags?: pulumi.Input<string>;
    /**
     * The storage group type
     */
    type?: pulumi.Input<string>;
    /**
     * States whether the storage group is protected
     */
    unprotected?: pulumi.Input<boolean>;
    /**
     * The amount of unreducible data in Gb.
     */
    unreducibleDataGb?: pulumi.Input<number>;
    /**
     * Storage Group UUID
     */
    uuid?: pulumi.Input<string>;
    /**
     * The IDs of the volume associated with the storage group. Only pre-existing volumes are considered here. (Update
     * Supported)
     */
    volumeIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * VP saved percentage figure
     */
    vpSavedPercent?: pulumi.Input<number>;
    /**
     * The workload associated with the storage group. (Update Supported)
     */
    workload?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Storagegroup resource.
 */
export interface StoragegroupArgs {
    /**
     * States whether compression is enabled on storage group. (Update Supported)
     */
    compression?: pulumi.Input<boolean>;
    /**
     * Host IO limit of the storage group. (Update Supported)
     */
    hostIoLimit?: pulumi.Input<inputs.StoragegroupHostIoLimit>;
    /**
     * The name of the storage group. Only alphanumeric characters, underscores ( _ ), and hyphens (-) are allowed. (Update
     * Supported)
     */
    name?: pulumi.Input<string>;
    /**
     * The number of volumes associated with the storage group
     */
    numOfVols?: pulumi.Input<number>;
    /**
     * The service level associated with the storage group. (Update Supported)
     */
    slo?: pulumi.Input<string>;
    /**
     * The Srp to be associated with the Storage Group. If you dont want an SRP the srp_id can be set to 'None'. (Update
     * Supported)
     */
    srpId: pulumi.Input<string>;
    /**
     * The IDs of the volume associated with the storage group. Only pre-existing volumes are considered here. (Update
     * Supported)
     */
    volumeIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The workload associated with the storage group. (Update Supported)
     */
    workload?: pulumi.Input<string>;
}
