// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetHostArgs, GetHostResult, GetHostOutputArgs } from "./getHost";
export const getHost: typeof import("./getHost").getHost = null as any;
export const getHostOutput: typeof import("./getHost").getHostOutput = null as any;
utilities.lazyLoad(exports, ["getHost","getHostOutput"], () => require("./getHost"));

export { GetHostgroupArgs, GetHostgroupResult, GetHostgroupOutputArgs } from "./getHostgroup";
export const getHostgroup: typeof import("./getHostgroup").getHostgroup = null as any;
export const getHostgroupOutput: typeof import("./getHostgroup").getHostgroupOutput = null as any;
utilities.lazyLoad(exports, ["getHostgroup","getHostgroupOutput"], () => require("./getHostgroup"));

export { GetMaskingviewArgs, GetMaskingviewResult, GetMaskingviewOutputArgs } from "./getMaskingview";
export const getMaskingview: typeof import("./getMaskingview").getMaskingview = null as any;
export const getMaskingviewOutput: typeof import("./getMaskingview").getMaskingviewOutput = null as any;
utilities.lazyLoad(exports, ["getMaskingview","getMaskingviewOutput"], () => require("./getMaskingview"));

export { GetPortArgs, GetPortResult, GetPortOutputArgs } from "./getPort";
export const getPort: typeof import("./getPort").getPort = null as any;
export const getPortOutput: typeof import("./getPort").getPortOutput = null as any;
utilities.lazyLoad(exports, ["getPort","getPortOutput"], () => require("./getPort"));

export { GetPortgroupsArgs, GetPortgroupsResult, GetPortgroupsOutputArgs } from "./getPortgroups";
export const getPortgroups: typeof import("./getPortgroups").getPortgroups = null as any;
export const getPortgroupsOutput: typeof import("./getPortgroups").getPortgroupsOutput = null as any;
utilities.lazyLoad(exports, ["getPortgroups","getPortgroupsOutput"], () => require("./getPortgroups"));

export { GetSnapshotArgs, GetSnapshotResult, GetSnapshotOutputArgs } from "./getSnapshot";
export const getSnapshot: typeof import("./getSnapshot").getSnapshot = null as any;
export const getSnapshotOutput: typeof import("./getSnapshot").getSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getSnapshot","getSnapshotOutput"], () => require("./getSnapshot"));

export { GetSnapshotpolicyArgs, GetSnapshotpolicyResult, GetSnapshotpolicyOutputArgs } from "./getSnapshotpolicy";
export const getSnapshotpolicy: typeof import("./getSnapshotpolicy").getSnapshotpolicy = null as any;
export const getSnapshotpolicyOutput: typeof import("./getSnapshotpolicy").getSnapshotpolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSnapshotpolicy","getSnapshotpolicyOutput"], () => require("./getSnapshotpolicy"));

export { GetStoragegroupArgs, GetStoragegroupResult, GetStoragegroupOutputArgs } from "./getStoragegroup";
export const getStoragegroup: typeof import("./getStoragegroup").getStoragegroup = null as any;
export const getStoragegroupOutput: typeof import("./getStoragegroup").getStoragegroupOutput = null as any;
utilities.lazyLoad(exports, ["getStoragegroup","getStoragegroupOutput"], () => require("./getStoragegroup"));

export { GetVolumeArgs, GetVolumeResult, GetVolumeOutputArgs } from "./getVolume";
export const getVolume: typeof import("./getVolume").getVolume = null as any;
export const getVolumeOutput: typeof import("./getVolume").getVolumeOutput = null as any;
utilities.lazyLoad(exports, ["getVolume","getVolumeOutput"], () => require("./getVolume"));

export { HostArgs, HostState } from "./host";
export type Host = import("./host").Host;
export const Host: typeof import("./host").Host = null as any;
utilities.lazyLoad(exports, ["Host"], () => require("./host"));

export { HostgroupArgs, HostgroupState } from "./hostgroup";
export type Hostgroup = import("./hostgroup").Hostgroup;
export const Hostgroup: typeof import("./hostgroup").Hostgroup = null as any;
utilities.lazyLoad(exports, ["Hostgroup"], () => require("./hostgroup"));

export { MaskingviewArgs, MaskingviewState } from "./maskingview";
export type Maskingview = import("./maskingview").Maskingview;
export const Maskingview: typeof import("./maskingview").Maskingview = null as any;
utilities.lazyLoad(exports, ["Maskingview"], () => require("./maskingview"));

export { PortgroupArgs, PortgroupState } from "./portgroup";
export type Portgroup = import("./portgroup").Portgroup;
export const Portgroup: typeof import("./portgroup").Portgroup = null as any;
utilities.lazyLoad(exports, ["Portgroup"], () => require("./portgroup"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SnapshotArgs, SnapshotState } from "./snapshot";
export type Snapshot = import("./snapshot").Snapshot;
export const Snapshot: typeof import("./snapshot").Snapshot = null as any;
utilities.lazyLoad(exports, ["Snapshot"], () => require("./snapshot"));

export { SnapshotpolicyArgs, SnapshotpolicyState } from "./snapshotpolicy";
export type Snapshotpolicy = import("./snapshotpolicy").Snapshotpolicy;
export const Snapshotpolicy: typeof import("./snapshotpolicy").Snapshotpolicy = null as any;
utilities.lazyLoad(exports, ["Snapshotpolicy"], () => require("./snapshotpolicy"));

export { StoragegroupArgs, StoragegroupState } from "./storagegroup";
export type Storagegroup = import("./storagegroup").Storagegroup;
export const Storagegroup: typeof import("./storagegroup").Storagegroup = null as any;
utilities.lazyLoad(exports, ["Storagegroup"], () => require("./storagegroup"));

export { VolumeArgs, VolumeState } from "./volume";
export type Volume = import("./volume").Volume;
export const Volume: typeof import("./volume").Volume = null as any;
utilities.lazyLoad(exports, ["Volume"], () => require("./volume"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "powermax:index/host:Host":
                return new Host(name, <any>undefined, { urn })
            case "powermax:index/hostgroup:Hostgroup":
                return new Hostgroup(name, <any>undefined, { urn })
            case "powermax:index/maskingview:Maskingview":
                return new Maskingview(name, <any>undefined, { urn })
            case "powermax:index/portgroup:Portgroup":
                return new Portgroup(name, <any>undefined, { urn })
            case "powermax:index/snapshot:Snapshot":
                return new Snapshot(name, <any>undefined, { urn })
            case "powermax:index/snapshotpolicy:Snapshotpolicy":
                return new Snapshotpolicy(name, <any>undefined, { urn })
            case "powermax:index/storagegroup:Storagegroup":
                return new Storagegroup(name, <any>undefined, { urn })
            case "powermax:index/volume:Volume":
                return new Volume(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("powermax", "index/host", _module)
pulumi.runtime.registerResourceModule("powermax", "index/hostgroup", _module)
pulumi.runtime.registerResourceModule("powermax", "index/maskingview", _module)
pulumi.runtime.registerResourceModule("powermax", "index/portgroup", _module)
pulumi.runtime.registerResourceModule("powermax", "index/snapshot", _module)
pulumi.runtime.registerResourceModule("powermax", "index/snapshotpolicy", _module)
pulumi.runtime.registerResourceModule("powermax", "index/storagegroup", _module)
pulumi.runtime.registerResourceModule("powermax", "index/volume", _module)
pulumi.runtime.registerResourcePackage("powermax", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:powermax") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
