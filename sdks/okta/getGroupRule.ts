// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getGroupRule(args?: GetGroupRuleArgs, opts?: pulumi.InvokeOptions): Promise<GetGroupRuleResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("okta:index/getGroupRule:getGroupRule", {
        "id": args.id,
        "name": args.name,
        "status": args.status,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getGroupRule.
 */
export interface GetGroupRuleArgs {
    id?: string;
    name?: string;
    status?: string;
}

/**
 * A collection of values returned by getGroupRule.
 */
export interface GetGroupRuleResult {
    readonly expressionType: string;
    readonly expressionValue: string;
    readonly groupAssignments: string[];
    readonly id?: string;
    readonly name?: string;
    readonly status?: string;
    readonly usersExcludeds: string[];
}
export function getGroupRuleOutput(args?: GetGroupRuleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGroupRuleResult> {
    return pulumi.output(args).apply((a: any) => getGroupRule(a, opts))
}

/**
 * A collection of arguments for invoking getGroupRule.
 */
export interface GetGroupRuleOutputArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}
