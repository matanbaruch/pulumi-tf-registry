// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AppAutoLoginTimeouts {
    create?: string;
    read?: string;
    update?: string;
}

export interface AppBasicAuthTimeouts {
    create?: string;
    read?: string;
    update?: string;
}

export interface AppBookmarkTimeouts {
    create?: string;
    read?: string;
    update?: string;
}

export interface AppGroupAssignmentTimeouts {
    create?: string;
    read?: string;
    update?: string;
}

export interface AppGroupAssignmentsGroup {
    /**
     * A group to associate with the application
     */
    id: string;
    /**
     * Priority of group assignment
     */
    priority?: number;
    /**
     * JSON document containing [application profile](https://developer.okta.com/docs/reference/api/apps/#profile-object)
     */
    profile?: string;
}

export interface AppOauthGroupsClaim {
    /**
     * Groups claim filter. Can only be set if type is FILTER.
     */
    filterType?: string;
    /**
     * Issuer mode inherited from OAuth App
     */
    issuerMode: string;
    /**
     * Name of the claim that will be used in the token.
     */
    name: string;
    /**
     * Groups claim type.
     */
    type: string;
    /**
     * Value of the claim. Can be an Okta Expression Language statement that evaluates at the time the token is minted.
     */
    value: string;
}

export interface AppOauthJwk {
    /**
     * RSA Exponent
     */
    e?: string;
    /**
     * Key ID
     */
    kid: string;
    /**
     * Key type
     */
    kty: string;
    /**
     * RSA Modulus
     */
    n?: string;
    /**
     * X coordinate of the elliptic curve point
     */
    x?: string;
    /**
     * Y coordinate of the elliptic curve point
     */
    y?: string;
}

export interface AppOauthTimeouts {
    create?: string;
    read?: string;
    update?: string;
}

export interface AppSamlAttributeStatement {
    /**
     * Type of group attribute filter. Valid values are: `STARTS_WITH`, `EQUALS`, `CONTAINS`, or `REGEX`
     */
    filterType?: string;
    /**
     * Filter value to use
     */
    filterValue?: string;
    /**
     * The reference name of the attribute statement
     */
    name: string;
    /**
     * The attribute namespace. It can be set to `urn:oasis:names:tc:SAML:2.0:attrname-format:unspecified`, `urn:oasis:names:tc:SAML:2.0:attrname-format:uri`, or `urn:oasis:names:tc:SAML:2.0:attrname-format:basic`
     */
    namespace?: string;
    /**
     * The type of attribute statements object
     */
    type?: string;
    values?: string[];
}

export interface AppSamlKey {
    created: string;
    e: string;
    expiresAt: string;
    kid: string;
    kty: string;
    lastUpdated: string;
    n: string;
    use: string;
    x5cs: string[];
    x5tS256: string;
}

export interface AppSamlTimeouts {
    create?: string;
    read?: string;
    update?: string;
}

export interface AppSecurePasswordStoreTimeouts {
    create?: string;
    read?: string;
    update?: string;
}

export interface AppSharedCredentialsTimeouts {
    create?: string;
    read?: string;
    update?: string;
}

export interface AppSignonPolicyRulePlatformInclude {
    /**
     * Only available with OTHER OS type
     */
    osExpression?: string;
    osType?: string;
    type?: string;
}

export interface AppSwaTimeouts {
    create?: string;
    read?: string;
    update?: string;
}

export interface AppThreeFieldTimeouts {
    create?: string;
    read?: string;
    update?: string;
}

export interface AppUserSchemaPropertyArrayOneOf {
    /**
     * Value mapping to member of `array_enum`
     */
    const: string;
    /**
     * Display name for the enum value.
     */
    title: string;
}

export interface AppUserSchemaPropertyOneOf {
    /**
     * Enum value
     */
    const: string;
    /**
     * Enum title
     */
    title: string;
}

export interface CustomizedSigninPageContentSecurityPolicySetting {
    /**
     * enforced or report_only
     */
    mode?: string;
    reportUri?: string;
    srcLists?: string[];
}

export interface CustomizedSigninPageWidgetCustomizations {
    authenticatorPageCustomLinkLabel?: string;
    authenticatorPageCustomLinkUrl?: string;
    classicRecoveryFlowEmailOrUsernameLabel?: string;
    customLink1Label?: string;
    customLink1Url?: string;
    customLink2Label?: string;
    customLink2Url?: string;
    forgotPasswordLabel?: string;
    forgotPasswordUrl?: string;
    helpLabel?: string;
    helpUrl?: string;
    passwordInfoTip?: string;
    passwordLabel?: string;
    showPasswordVisibilityToggle: boolean;
    showUserIdentifier: boolean;
    signInLabel?: string;
    unlockAccountLabel?: string;
    unlockAccountUrl?: string;
    usernameInfoTip?: string;
    usernameLabel?: string;
    widgetGeneration: string;
}

export interface DomainDnsRecord {
    expiration: string;
    fqdn: string;
    recordType: string;
    values: string[];
}

export interface EmailDomainDnsValidationRecord {
    expiration: string;
    fqdn: string;
    recordType: string;
    value: string;
}

export interface EmailSenderDnsRecord {
    fqdn: string;
    recordType: string;
    value: string;
}

export interface EventHookHeader {
    key?: string;
    value?: string;
}

export interface GetAppSamlAttributeStatement {
    filterType: string;
    filterValue: string;
    name: string;
    namespace: string;
    type: string;
    values: string[];
}

export interface GetAuthServerClaimsClaim {
    alwaysIncludeInToken: boolean;
    claimType: string;
    id: string;
    name: string;
    scopes: string[];
    status: string;
    value: string;
    valueType: string;
}

export interface GetAuthServerScopesScope {
    consent: string;
    default: boolean;
    description: string;
    displayName: string;
    id: string;
    metadataPublish: string;
    name: string;
    optional: boolean;
    system: boolean;
}

export interface GetBehaviorsBehavior {
    id: string;
    name: string;
    settings: {[key: string]: string};
    status: string;
    type: string;
}

export interface GetBrandsBrand {
    customPrivacyPolicyUrl: string;
    id: string;
    links: string;
    name: string;
    removePoweredByOkta: boolean;
}

export interface GetDefaultSigninPageContentSecurityPolicySetting {
    /**
     * enforced or report_only
     */
    mode: string;
    reportUri: string;
    srcLists: string[];
}

export interface GetDefaultSigninPageWidgetCustomizations {
    authenticatorPageCustomLinkLabel: string;
    authenticatorPageCustomLinkUrl: string;
    classicRecoveryFlowEmailOrUsernameLabel: string;
    customLink1Label: string;
    customLink1Url: string;
    customLink2Label: string;
    customLink2Url: string;
    forgotPasswordLabel: string;
    forgotPasswordUrl: string;
    helpLabel: string;
    helpUrl: string;
    passwordInfoTip: string;
    passwordLabel: string;
    showPasswordVisibilityToggle: boolean;
    showUserIdentifier: boolean;
    signInLabel: string;
    unlockAccountLabel: string;
    unlockAccountUrl: string;
    usernameInfoTip: string;
    usernameLabel: string;
    widgetGeneration: string;
}

export interface GetDomainDnsRecord {
    expiration: string;
    fqdn: string;
    recordType: string;
    values: string[];
}

export interface GetEmailCustomizationsEmailCustomization {
    body: string;
    id: string;
    isDefault: boolean;
    language: string;
    links: string;
    subject: string;
}

export interface GetEmailTemplatesEmailTemplate {
    links: string;
    name: string;
}

export interface GetGroupsGroup {
    customProfileAttributes: string;
    description: string;
    id: string;
    name: string;
    type: string;
}

export interface GetLogStreamSettings {
    /**
     * AWS account ID. Required only for 'aws_eventbridge' type
     */
    accountId: string;
    /**
     * Edition of the Splunk Cloud instance. Could be one of: 'aws', 'aws_govcloud', 'gcp'. Required only for 'splunk_cloud_logstreaming' type
     */
    edition: string;
    /**
     * An alphanumeric name (no spaces) to identify this event source in AWS EventBridge. Required only for 'aws_eventbridge' type
     */
    eventSourceName: string;
    /**
     * The domain name for Splunk Cloud instance. Don't include http or https in the string. For example: 'acme.splunkcloud.com'. Required only for 'splunk_cloud_logstreaming' type
     */
    host: string;
    /**
     * The destination AWS region where event source is located. Required only for 'aws_eventbridge' type
     */
    region: string;
    /**
     * The HEC token for your Splunk Cloud HTTP Event Collector. Required only for 'splunk_cloud_logstreaming' type
     */
    token: string;
}

export interface GetOrgMetadataDomains {
    /**
     * Custom Domain Org URI
     */
    alternate: string;
    /**
     * Standard Org URI
     */
    organization: string;
}

export interface GetOrgMetadataSettings {
    analyticsCollectionEnabled: boolean;
    bugReportingEnabled: boolean;
    /**
     * Whether the legacy Okta Mobile application is enabled for the org
     */
    omEnabled: boolean;
}

export interface GetThemesTheme {
    backgroundImageUrl: string;
    emailTemplateTouchPointVariant: string;
    endUserDashboardTouchPointVariant: string;
    errorPageTouchPointVariant: string;
    faviconUrl: string;
    id: string;
    links: string;
    logoUrl: string;
    primaryColorContrastHex: string;
    primaryColorHex: string;
    secondaryColorContrastHex: string;
    secondaryColorHex: string;
    signInPageTouchPointVariant: string;
}

export interface GetTrustedOriginsTrustedOrigin {
    active: boolean;
    id: string;
    name: string;
    origin: string;
    scopes: string[];
}

export interface GetUserSearch {
    comparison?: string;
    /**
     * A raw search expression string. This requires the search feature be on. Please see Okta documentation on their filter API for users. https://developer.okta.com/docs/api/resources/users#list-users-with-search
     */
    expression?: string;
    /**
     * Property name to search for. This requires the search feature be on. Please see Okta documentation on their filter API for users. https://developer.okta.com/docs/api/resources/users#list-users-with-search
     */
    name?: string;
    value?: string;
}

export interface GetUserSecurityQuestionsQuestion {
    key: string;
    text: string;
}

export interface GetUsersSearch {
    comparison?: string;
    /**
     * A raw search expression string. This requires the search feature be on. Please see Okta documentation on their filter API for users. https://developer.okta.com/docs/api/resources/users#list-users-with-search
     */
    expression?: string;
    /**
     * Property name to search for. This requires the search feature be on. Please see Okta documentation on their filter API for users. https://developer.okta.com/docs/api/resources/users#list-users-with-search
     */
    name?: string;
    value?: string;
}

export interface GetUsersUser {
    adminRoles: string[];
    city: string;
    costCenter: string;
    countryCode: string;
    customProfileAttributes: string;
    department: string;
    displayName: string;
    division: string;
    email: string;
    employeeNumber: string;
    firstName: string;
    groupMemberships: string[];
    honorificPrefix: string;
    honorificSuffix: string;
    id: string;
    lastName: string;
    locale: string;
    login: string;
    manager: string;
    managerId: string;
    middleName: string;
    mobilePhone: string;
    nickName: string;
    organization: string;
    postalAddress: string;
    preferredLanguage: string;
    primaryPhone: string;
    profileUrl: string;
    roles: string[];
    secondEmail: string;
    state: string;
    status: string;
    streetAddress: string;
    timezone: string;
    title: string;
    userType: string;
    zipCode: string;
}

export interface GroupSchemaPropertyArrayOneOf {
    /**
     * Value mapping to member of `array_enum`
     */
    const: string;
    /**
     * Display name for the enum value.
     */
    title: string;
}

export interface GroupSchemaPropertyMasterOverridePriority {
    type?: string;
    value: string;
}

export interface GroupSchemaPropertyOneOf {
    /**
     * Enum value
     */
    const: string;
    /**
     * Enum title
     */
    title: string;
}

export interface InlineHookHeader {
    key?: string;
    value?: string;
}

export interface LogStreamSettings {
    /**
     * AWS account ID. Required only for 'aws_eventbridge' type
     */
    accountId?: string;
    /**
     * Edition of the Splunk Cloud instance. Could be one of: 'aws', 'aws_govcloud', 'gcp'. Required only for 'splunk_cloud_logstreaming' type
     */
    edition?: string;
    /**
     * An alphanumeric name (no spaces) to identify this event source in AWS EventBridge. Required only for 'aws_eventbridge' type
     */
    eventSourceName?: string;
    /**
     * The domain name for Splunk Cloud instance. Don't include http or https in the string. For example: 'acme.splunkcloud.com'. Required only for 'splunk_cloud_logstreaming' type
     */
    host?: string;
    /**
     * The destination AWS region where event source is located. Required only for 'aws_eventbridge' type
     */
    region?: string;
    /**
     * The HEC token for your Splunk Cloud HTTP Event Collector. Required only for 'splunk_cloud_logstreaming' type
     */
    token?: string;
}

export interface PolicyRuleIdpDiscoveryAppExclude {
    id?: string;
    name?: string;
    type: string;
}

export interface PolicyRuleIdpDiscoveryAppInclude {
    id?: string;
    name?: string;
    type: string;
}

export interface PolicyRuleIdpDiscoveryPlatformInclude {
    /**
     * Only available with OTHER OS type
     */
    osExpression?: string;
    osType?: string;
    type?: string;
}

export interface PolicyRuleIdpDiscoveryUserIdentifierPattern {
    matchType?: string;
    value?: string;
}

export interface PolicyRuleMfaAppExclude {
    id?: string;
    name?: string;
    type: string;
}

export interface PolicyRuleMfaAppInclude {
    id?: string;
    name?: string;
    type: string;
}

export interface PolicyRuleProfileEnrollmentProfileAttribute {
    /**
     * A display-friendly label for this property
     */
    label: string;
    /**
     * The name of a User Profile property
     */
    name: string;
    /**
     * Indicates if this property is required for enrollment
     */
    required?: boolean;
}

export interface PolicyRuleSignonFactorSequence {
    /**
     * Type of a Factor
     */
    primaryCriteriaFactorType: string;
    /**
     * Factor provider
     */
    primaryCriteriaProvider: string;
    secondaryCriterias?: outputs.PolicyRuleSignonFactorSequenceSecondaryCriteria[];
}

export interface PolicyRuleSignonFactorSequenceSecondaryCriteria {
    /**
     * Type of a Factor
     */
    factorType: string;
    /**
     * Factor provider
     */
    provider: string;
}

export interface PreviewSigninPageContentSecurityPolicySetting {
    /**
     * enforced or report_only
     */
    mode?: string;
    reportUri?: string;
    srcLists?: string[];
}

export interface PreviewSigninPageWidgetCustomizations {
    authenticatorPageCustomLinkLabel?: string;
    authenticatorPageCustomLinkUrl?: string;
    classicRecoveryFlowEmailOrUsernameLabel?: string;
    customLink1Label?: string;
    customLink1Url?: string;
    customLink2Label?: string;
    customLink2Url?: string;
    forgotPasswordLabel?: string;
    forgotPasswordUrl?: string;
    helpLabel?: string;
    helpUrl?: string;
    passwordInfoTip?: string;
    passwordLabel?: string;
    showPasswordVisibilityToggle: boolean;
    showUserIdentifier: boolean;
    signInLabel?: string;
    unlockAccountLabel?: string;
    unlockAccountUrl?: string;
    usernameInfoTip?: string;
    usernameLabel?: string;
    widgetGeneration: string;
}

export interface ProfileMappingMapping {
    expression: string;
    /**
     * The mapping property key.
     */
    id: string;
    pushStatus?: string;
}

export interface TemplateSmsTranslation {
    /**
     * The language to map the template to.
     */
    language: string;
    /**
     * The SMS message.
     */
    template: string;
}

export interface UserPasswordHash {
    /**
     * The algorithm used to generate the hash using the password
     */
    algorithm: string;
    /**
     * Only required for salted hashes
     */
    salt?: string;
    /**
     * Specifies whether salt was pre- or postfixed to the password before hashing
     */
    saltOrder?: string;
    /**
     * For SHA-512, SHA-256, SHA-1, MD5, This is the actual base64-encoded hash of the password (and salt, if used). This is the Base64 encoded value of the SHA-512/SHA-256/SHA-1/MD5 digest that was computed by either pre-fixing or post-fixing the salt to the password, depending on the saltOrder. If a salt was not used in the source system, then this should just be the the Base64 encoded value of the password's SHA-512/SHA-256/SHA-1/MD5 digest. For BCRYPT, This is the actual radix64-encoded hashed password.
     */
    value: string;
    /**
     * Governs the strength of the hash and the time required to compute it. Only required for BCRYPT algorithm
     */
    workFactor?: number;
}

export interface UserSchemaPropertyArrayOneOf {
    /**
     * Value mapping to member of `array_enum`
     */
    const: string;
    /**
     * Display name for the enum value.
     */
    title: string;
}

export interface UserSchemaPropertyMasterOverridePriority {
    type?: string;
    value: string;
}

export interface UserSchemaPropertyOneOf {
    /**
     * Enum value
     */
    const: string;
    /**
     * Enum title
     */
    title: string;
}

