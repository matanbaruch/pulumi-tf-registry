// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AuthServerPolicy extends pulumi.CustomResource {
    /**
     * Get an existing AuthServerPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthServerPolicyState, opts?: pulumi.CustomResourceOptions): AuthServerPolicy {
        return new AuthServerPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/authServerPolicy:AuthServerPolicy';

    /**
     * Returns true if the given object is an instance of AuthServerPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthServerPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthServerPolicy.__pulumiType;
    }

    /**
     * The ID of the Auth Server.
     */
    public readonly authServerId!: pulumi.Output<string>;
    /**
     * The clients to whitelist the policy for. `[ALL_CLIENTS]` is a special value that can be used to whitelist all clients,
     * otherwise it is a list of client ids.
     */
    public readonly clientWhitelists!: pulumi.Output<string[]>;
    /**
     * The description of the Auth Server Policy.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The name of the Auth Server Policy.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Priority of the auth server policy
     */
    public readonly priority!: pulumi.Output<number>;
    /**
     * Default to `ACTIVE`
     */
    public readonly status!: pulumi.Output<string | undefined>;

    /**
     * Create a AuthServerPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthServerPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthServerPolicyArgs | AuthServerPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthServerPolicyState | undefined;
            resourceInputs["authServerId"] = state ? state.authServerId : undefined;
            resourceInputs["clientWhitelists"] = state ? state.clientWhitelists : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as AuthServerPolicyArgs | undefined;
            if ((!args || args.authServerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authServerId'");
            }
            if ((!args || args.clientWhitelists === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientWhitelists'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.priority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            resourceInputs["authServerId"] = args ? args.authServerId : undefined;
            resourceInputs["clientWhitelists"] = args ? args.clientWhitelists : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AuthServerPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AuthServerPolicy resources.
 */
export interface AuthServerPolicyState {
    /**
     * The ID of the Auth Server.
     */
    authServerId?: pulumi.Input<string>;
    /**
     * The clients to whitelist the policy for. `[ALL_CLIENTS]` is a special value that can be used to whitelist all clients,
     * otherwise it is a list of client ids.
     */
    clientWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the Auth Server Policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the Auth Server Policy.
     */
    name?: pulumi.Input<string>;
    /**
     * Priority of the auth server policy
     */
    priority?: pulumi.Input<number>;
    /**
     * Default to `ACTIVE`
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AuthServerPolicy resource.
 */
export interface AuthServerPolicyArgs {
    /**
     * The ID of the Auth Server.
     */
    authServerId: pulumi.Input<string>;
    /**
     * The clients to whitelist the policy for. `[ALL_CLIENTS]` is a special value that can be used to whitelist all clients,
     * otherwise it is a list of client ids.
     */
    clientWhitelists: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the Auth Server Policy.
     */
    description: pulumi.Input<string>;
    /**
     * The name of the Auth Server Policy.
     */
    name?: pulumi.Input<string>;
    /**
     * Priority of the auth server policy
     */
    priority: pulumi.Input<number>;
    /**
     * Default to `ACTIVE`
     */
    status?: pulumi.Input<string>;
}
