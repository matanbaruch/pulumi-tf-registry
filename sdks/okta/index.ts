// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AdminRoleCustomArgs, AdminRoleCustomState } from "./adminRoleCustom";
export type AdminRoleCustom = import("./adminRoleCustom").AdminRoleCustom;
export const AdminRoleCustom: typeof import("./adminRoleCustom").AdminRoleCustom = null as any;
utilities.lazyLoad(exports, ["AdminRoleCustom"], () => require("./adminRoleCustom"));

export { AdminRoleCustomAssignmentsArgs, AdminRoleCustomAssignmentsState } from "./adminRoleCustomAssignments";
export type AdminRoleCustomAssignments = import("./adminRoleCustomAssignments").AdminRoleCustomAssignments;
export const AdminRoleCustomAssignments: typeof import("./adminRoleCustomAssignments").AdminRoleCustomAssignments = null as any;
utilities.lazyLoad(exports, ["AdminRoleCustomAssignments"], () => require("./adminRoleCustomAssignments"));

export { AdminRoleTargetsArgs, AdminRoleTargetsState } from "./adminRoleTargets";
export type AdminRoleTargets = import("./adminRoleTargets").AdminRoleTargets;
export const AdminRoleTargets: typeof import("./adminRoleTargets").AdminRoleTargets = null as any;
utilities.lazyLoad(exports, ["AdminRoleTargets"], () => require("./adminRoleTargets"));

export { AppAccessPolicyAssignmentArgs, AppAccessPolicyAssignmentState } from "./appAccessPolicyAssignment";
export type AppAccessPolicyAssignment = import("./appAccessPolicyAssignment").AppAccessPolicyAssignment;
export const AppAccessPolicyAssignment: typeof import("./appAccessPolicyAssignment").AppAccessPolicyAssignment = null as any;
utilities.lazyLoad(exports, ["AppAccessPolicyAssignment"], () => require("./appAccessPolicyAssignment"));

export { AppAutoLoginArgs, AppAutoLoginState } from "./appAutoLogin";
export type AppAutoLogin = import("./appAutoLogin").AppAutoLogin;
export const AppAutoLogin: typeof import("./appAutoLogin").AppAutoLogin = null as any;
utilities.lazyLoad(exports, ["AppAutoLogin"], () => require("./appAutoLogin"));

export { AppBasicAuthArgs, AppBasicAuthState } from "./appBasicAuth";
export type AppBasicAuth = import("./appBasicAuth").AppBasicAuth;
export const AppBasicAuth: typeof import("./appBasicAuth").AppBasicAuth = null as any;
utilities.lazyLoad(exports, ["AppBasicAuth"], () => require("./appBasicAuth"));

export { AppBookmarkArgs, AppBookmarkState } from "./appBookmark";
export type AppBookmark = import("./appBookmark").AppBookmark;
export const AppBookmark: typeof import("./appBookmark").AppBookmark = null as any;
utilities.lazyLoad(exports, ["AppBookmark"], () => require("./appBookmark"));

export { AppGroupAssignmentArgs, AppGroupAssignmentState } from "./appGroupAssignment";
export type AppGroupAssignment = import("./appGroupAssignment").AppGroupAssignment;
export const AppGroupAssignment: typeof import("./appGroupAssignment").AppGroupAssignment = null as any;
utilities.lazyLoad(exports, ["AppGroupAssignment"], () => require("./appGroupAssignment"));

export { AppGroupAssignmentsArgs, AppGroupAssignmentsState } from "./appGroupAssignments";
export type AppGroupAssignments = import("./appGroupAssignments").AppGroupAssignments;
export const AppGroupAssignments: typeof import("./appGroupAssignments").AppGroupAssignments = null as any;
utilities.lazyLoad(exports, ["AppGroupAssignments"], () => require("./appGroupAssignments"));

export { AppOauthArgs, AppOauthState } from "./appOauth";
export type AppOauth = import("./appOauth").AppOauth;
export const AppOauth: typeof import("./appOauth").AppOauth = null as any;
utilities.lazyLoad(exports, ["AppOauth"], () => require("./appOauth"));

export { AppOauthApiScopeArgs, AppOauthApiScopeState } from "./appOauthApiScope";
export type AppOauthApiScope = import("./appOauthApiScope").AppOauthApiScope;
export const AppOauthApiScope: typeof import("./appOauthApiScope").AppOauthApiScope = null as any;
utilities.lazyLoad(exports, ["AppOauthApiScope"], () => require("./appOauthApiScope"));

export { AppOauthPostLogoutRedirectUriArgs, AppOauthPostLogoutRedirectUriState } from "./appOauthPostLogoutRedirectUri";
export type AppOauthPostLogoutRedirectUri = import("./appOauthPostLogoutRedirectUri").AppOauthPostLogoutRedirectUri;
export const AppOauthPostLogoutRedirectUri: typeof import("./appOauthPostLogoutRedirectUri").AppOauthPostLogoutRedirectUri = null as any;
utilities.lazyLoad(exports, ["AppOauthPostLogoutRedirectUri"], () => require("./appOauthPostLogoutRedirectUri"));

export { AppOauthRedirectUriArgs, AppOauthRedirectUriState } from "./appOauthRedirectUri";
export type AppOauthRedirectUri = import("./appOauthRedirectUri").AppOauthRedirectUri;
export const AppOauthRedirectUri: typeof import("./appOauthRedirectUri").AppOauthRedirectUri = null as any;
utilities.lazyLoad(exports, ["AppOauthRedirectUri"], () => require("./appOauthRedirectUri"));

export { AppOauthRoleAssignmentArgs, AppOauthRoleAssignmentState } from "./appOauthRoleAssignment";
export type AppOauthRoleAssignment = import("./appOauthRoleAssignment").AppOauthRoleAssignment;
export const AppOauthRoleAssignment: typeof import("./appOauthRoleAssignment").AppOauthRoleAssignment = null as any;
utilities.lazyLoad(exports, ["AppOauthRoleAssignment"], () => require("./appOauthRoleAssignment"));

export { AppSamlArgs, AppSamlState } from "./appSaml";
export type AppSaml = import("./appSaml").AppSaml;
export const AppSaml: typeof import("./appSaml").AppSaml = null as any;
utilities.lazyLoad(exports, ["AppSaml"], () => require("./appSaml"));

export { AppSamlAppSettingsArgs, AppSamlAppSettingsState } from "./appSamlAppSettings";
export type AppSamlAppSettings = import("./appSamlAppSettings").AppSamlAppSettings;
export const AppSamlAppSettings: typeof import("./appSamlAppSettings").AppSamlAppSettings = null as any;
utilities.lazyLoad(exports, ["AppSamlAppSettings"], () => require("./appSamlAppSettings"));

export { AppSecurePasswordStoreArgs, AppSecurePasswordStoreState } from "./appSecurePasswordStore";
export type AppSecurePasswordStore = import("./appSecurePasswordStore").AppSecurePasswordStore;
export const AppSecurePasswordStore: typeof import("./appSecurePasswordStore").AppSecurePasswordStore = null as any;
utilities.lazyLoad(exports, ["AppSecurePasswordStore"], () => require("./appSecurePasswordStore"));

export { AppSharedCredentialsArgs, AppSharedCredentialsState } from "./appSharedCredentials";
export type AppSharedCredentials = import("./appSharedCredentials").AppSharedCredentials;
export const AppSharedCredentials: typeof import("./appSharedCredentials").AppSharedCredentials = null as any;
utilities.lazyLoad(exports, ["AppSharedCredentials"], () => require("./appSharedCredentials"));

export { AppSignonPolicyArgs, AppSignonPolicyState } from "./appSignonPolicy";
export type AppSignonPolicy = import("./appSignonPolicy").AppSignonPolicy;
export const AppSignonPolicy: typeof import("./appSignonPolicy").AppSignonPolicy = null as any;
utilities.lazyLoad(exports, ["AppSignonPolicy"], () => require("./appSignonPolicy"));

export { AppSignonPolicyRuleArgs, AppSignonPolicyRuleState } from "./appSignonPolicyRule";
export type AppSignonPolicyRule = import("./appSignonPolicyRule").AppSignonPolicyRule;
export const AppSignonPolicyRule: typeof import("./appSignonPolicyRule").AppSignonPolicyRule = null as any;
utilities.lazyLoad(exports, ["AppSignonPolicyRule"], () => require("./appSignonPolicyRule"));

export { AppSwaArgs, AppSwaState } from "./appSwa";
export type AppSwa = import("./appSwa").AppSwa;
export const AppSwa: typeof import("./appSwa").AppSwa = null as any;
utilities.lazyLoad(exports, ["AppSwa"], () => require("./appSwa"));

export { AppThreeFieldArgs, AppThreeFieldState } from "./appThreeField";
export type AppThreeField = import("./appThreeField").AppThreeField;
export const AppThreeField: typeof import("./appThreeField").AppThreeField = null as any;
utilities.lazyLoad(exports, ["AppThreeField"], () => require("./appThreeField"));

export { AppUserArgs, AppUserState } from "./appUser";
export type AppUser = import("./appUser").AppUser;
export const AppUser: typeof import("./appUser").AppUser = null as any;
utilities.lazyLoad(exports, ["AppUser"], () => require("./appUser"));

export { AppUserBaseSchemaPropertyArgs, AppUserBaseSchemaPropertyState } from "./appUserBaseSchemaProperty";
export type AppUserBaseSchemaProperty = import("./appUserBaseSchemaProperty").AppUserBaseSchemaProperty;
export const AppUserBaseSchemaProperty: typeof import("./appUserBaseSchemaProperty").AppUserBaseSchemaProperty = null as any;
utilities.lazyLoad(exports, ["AppUserBaseSchemaProperty"], () => require("./appUserBaseSchemaProperty"));

export { AppUserSchemaPropertyArgs, AppUserSchemaPropertyState } from "./appUserSchemaProperty";
export type AppUserSchemaProperty = import("./appUserSchemaProperty").AppUserSchemaProperty;
export const AppUserSchemaProperty: typeof import("./appUserSchemaProperty").AppUserSchemaProperty = null as any;
utilities.lazyLoad(exports, ["AppUserSchemaProperty"], () => require("./appUserSchemaProperty"));

export { AuthServerArgs, AuthServerState } from "./authServer";
export type AuthServer = import("./authServer").AuthServer;
export const AuthServer: typeof import("./authServer").AuthServer = null as any;
utilities.lazyLoad(exports, ["AuthServer"], () => require("./authServer"));

export { AuthServerClaimArgs, AuthServerClaimState } from "./authServerClaim";
export type AuthServerClaim = import("./authServerClaim").AuthServerClaim;
export const AuthServerClaim: typeof import("./authServerClaim").AuthServerClaim = null as any;
utilities.lazyLoad(exports, ["AuthServerClaim"], () => require("./authServerClaim"));

export { AuthServerClaimDefaultArgs, AuthServerClaimDefaultState } from "./authServerClaimDefault";
export type AuthServerClaimDefault = import("./authServerClaimDefault").AuthServerClaimDefault;
export const AuthServerClaimDefault: typeof import("./authServerClaimDefault").AuthServerClaimDefault = null as any;
utilities.lazyLoad(exports, ["AuthServerClaimDefault"], () => require("./authServerClaimDefault"));

export { AuthServerDefaultArgs, AuthServerDefaultState } from "./authServerDefault";
export type AuthServerDefault = import("./authServerDefault").AuthServerDefault;
export const AuthServerDefault: typeof import("./authServerDefault").AuthServerDefault = null as any;
utilities.lazyLoad(exports, ["AuthServerDefault"], () => require("./authServerDefault"));

export { AuthServerPolicyArgs, AuthServerPolicyState } from "./authServerPolicy";
export type AuthServerPolicy = import("./authServerPolicy").AuthServerPolicy;
export const AuthServerPolicy: typeof import("./authServerPolicy").AuthServerPolicy = null as any;
utilities.lazyLoad(exports, ["AuthServerPolicy"], () => require("./authServerPolicy"));

export { AuthServerPolicyRuleArgs, AuthServerPolicyRuleState } from "./authServerPolicyRule";
export type AuthServerPolicyRule = import("./authServerPolicyRule").AuthServerPolicyRule;
export const AuthServerPolicyRule: typeof import("./authServerPolicyRule").AuthServerPolicyRule = null as any;
utilities.lazyLoad(exports, ["AuthServerPolicyRule"], () => require("./authServerPolicyRule"));

export { AuthServerScopeArgs, AuthServerScopeState } from "./authServerScope";
export type AuthServerScope = import("./authServerScope").AuthServerScope;
export const AuthServerScope: typeof import("./authServerScope").AuthServerScope = null as any;
utilities.lazyLoad(exports, ["AuthServerScope"], () => require("./authServerScope"));

export { AuthenticatorArgs, AuthenticatorState } from "./authenticator";
export type Authenticator = import("./authenticator").Authenticator;
export const Authenticator: typeof import("./authenticator").Authenticator = null as any;
utilities.lazyLoad(exports, ["Authenticator"], () => require("./authenticator"));

export { BehaviorArgs, BehaviorState } from "./behavior";
export type Behavior = import("./behavior").Behavior;
export const Behavior: typeof import("./behavior").Behavior = null as any;
utilities.lazyLoad(exports, ["Behavior"], () => require("./behavior"));

export { BrandArgs, BrandState } from "./brand";
export type Brand = import("./brand").Brand;
export const Brand: typeof import("./brand").Brand = null as any;
utilities.lazyLoad(exports, ["Brand"], () => require("./brand"));

export { CaptchaArgs, CaptchaState } from "./captcha";
export type Captcha = import("./captcha").Captcha;
export const Captcha: typeof import("./captcha").Captcha = null as any;
utilities.lazyLoad(exports, ["Captcha"], () => require("./captcha"));

export { CaptchaOrgWideSettingsArgs, CaptchaOrgWideSettingsState } from "./captchaOrgWideSettings";
export type CaptchaOrgWideSettings = import("./captchaOrgWideSettings").CaptchaOrgWideSettings;
export const CaptchaOrgWideSettings: typeof import("./captchaOrgWideSettings").CaptchaOrgWideSettings = null as any;
utilities.lazyLoad(exports, ["CaptchaOrgWideSettings"], () => require("./captchaOrgWideSettings"));

export { CustomizedSigninPageArgs, CustomizedSigninPageState } from "./customizedSigninPage";
export type CustomizedSigninPage = import("./customizedSigninPage").CustomizedSigninPage;
export const CustomizedSigninPage: typeof import("./customizedSigninPage").CustomizedSigninPage = null as any;
utilities.lazyLoad(exports, ["CustomizedSigninPage"], () => require("./customizedSigninPage"));

export { DomainArgs, DomainState } from "./domain";
export type Domain = import("./domain").Domain;
export const Domain: typeof import("./domain").Domain = null as any;
utilities.lazyLoad(exports, ["Domain"], () => require("./domain"));

export { DomainCertificateArgs, DomainCertificateState } from "./domainCertificate";
export type DomainCertificate = import("./domainCertificate").DomainCertificate;
export const DomainCertificate: typeof import("./domainCertificate").DomainCertificate = null as any;
utilities.lazyLoad(exports, ["DomainCertificate"], () => require("./domainCertificate"));

export { DomainVerificationArgs, DomainVerificationState } from "./domainVerification";
export type DomainVerification = import("./domainVerification").DomainVerification;
export const DomainVerification: typeof import("./domainVerification").DomainVerification = null as any;
utilities.lazyLoad(exports, ["DomainVerification"], () => require("./domainVerification"));

export { EmailCustomizationArgs, EmailCustomizationState } from "./emailCustomization";
export type EmailCustomization = import("./emailCustomization").EmailCustomization;
export const EmailCustomization: typeof import("./emailCustomization").EmailCustomization = null as any;
utilities.lazyLoad(exports, ["EmailCustomization"], () => require("./emailCustomization"));

export { EmailDomainArgs, EmailDomainState } from "./emailDomain";
export type EmailDomain = import("./emailDomain").EmailDomain;
export const EmailDomain: typeof import("./emailDomain").EmailDomain = null as any;
utilities.lazyLoad(exports, ["EmailDomain"], () => require("./emailDomain"));

export { EmailDomainVerificationArgs, EmailDomainVerificationState } from "./emailDomainVerification";
export type EmailDomainVerification = import("./emailDomainVerification").EmailDomainVerification;
export const EmailDomainVerification: typeof import("./emailDomainVerification").EmailDomainVerification = null as any;
utilities.lazyLoad(exports, ["EmailDomainVerification"], () => require("./emailDomainVerification"));

export { EmailSenderArgs, EmailSenderState } from "./emailSender";
export type EmailSender = import("./emailSender").EmailSender;
export const EmailSender: typeof import("./emailSender").EmailSender = null as any;
utilities.lazyLoad(exports, ["EmailSender"], () => require("./emailSender"));

export { EmailSenderVerificationArgs, EmailSenderVerificationState } from "./emailSenderVerification";
export type EmailSenderVerification = import("./emailSenderVerification").EmailSenderVerification;
export const EmailSenderVerification: typeof import("./emailSenderVerification").EmailSenderVerification = null as any;
utilities.lazyLoad(exports, ["EmailSenderVerification"], () => require("./emailSenderVerification"));

export { EventHookArgs, EventHookState } from "./eventHook";
export type EventHook = import("./eventHook").EventHook;
export const EventHook: typeof import("./eventHook").EventHook = null as any;
utilities.lazyLoad(exports, ["EventHook"], () => require("./eventHook"));

export { EventHookVerificationArgs, EventHookVerificationState } from "./eventHookVerification";
export type EventHookVerification = import("./eventHookVerification").EventHookVerification;
export const EventHookVerification: typeof import("./eventHookVerification").EventHookVerification = null as any;
utilities.lazyLoad(exports, ["EventHookVerification"], () => require("./eventHookVerification"));

export { FactorArgs, FactorState } from "./factor";
export type Factor = import("./factor").Factor;
export const Factor: typeof import("./factor").Factor = null as any;
utilities.lazyLoad(exports, ["Factor"], () => require("./factor"));

export { FactorTotpArgs, FactorTotpState } from "./factorTotp";
export type FactorTotp = import("./factorTotp").FactorTotp;
export const FactorTotp: typeof import("./factorTotp").FactorTotp = null as any;
utilities.lazyLoad(exports, ["FactorTotp"], () => require("./factorTotp"));

export { GetAppArgs, GetAppResult, GetAppOutputArgs } from "./getApp";
export const getApp: typeof import("./getApp").getApp = null as any;
export const getAppOutput: typeof import("./getApp").getAppOutput = null as any;
utilities.lazyLoad(exports, ["getApp","getAppOutput"], () => require("./getApp"));

export { GetAppGroupAssignmentsArgs, GetAppGroupAssignmentsResult, GetAppGroupAssignmentsOutputArgs } from "./getAppGroupAssignments";
export const getAppGroupAssignments: typeof import("./getAppGroupAssignments").getAppGroupAssignments = null as any;
export const getAppGroupAssignmentsOutput: typeof import("./getAppGroupAssignments").getAppGroupAssignmentsOutput = null as any;
utilities.lazyLoad(exports, ["getAppGroupAssignments","getAppGroupAssignmentsOutput"], () => require("./getAppGroupAssignments"));

export { GetAppMetadataSamlArgs, GetAppMetadataSamlResult, GetAppMetadataSamlOutputArgs } from "./getAppMetadataSaml";
export const getAppMetadataSaml: typeof import("./getAppMetadataSaml").getAppMetadataSaml = null as any;
export const getAppMetadataSamlOutput: typeof import("./getAppMetadataSaml").getAppMetadataSamlOutput = null as any;
utilities.lazyLoad(exports, ["getAppMetadataSaml","getAppMetadataSamlOutput"], () => require("./getAppMetadataSaml"));

export { GetAppOauthArgs, GetAppOauthResult, GetAppOauthOutputArgs } from "./getAppOauth";
export const getAppOauth: typeof import("./getAppOauth").getAppOauth = null as any;
export const getAppOauthOutput: typeof import("./getAppOauth").getAppOauthOutput = null as any;
utilities.lazyLoad(exports, ["getAppOauth","getAppOauthOutput"], () => require("./getAppOauth"));

export { GetAppSamlArgs, GetAppSamlResult, GetAppSamlOutputArgs } from "./getAppSaml";
export const getAppSaml: typeof import("./getAppSaml").getAppSaml = null as any;
export const getAppSamlOutput: typeof import("./getAppSaml").getAppSamlOutput = null as any;
utilities.lazyLoad(exports, ["getAppSaml","getAppSamlOutput"], () => require("./getAppSaml"));

export { GetAppSignonPolicyArgs, GetAppSignonPolicyResult, GetAppSignonPolicyOutputArgs } from "./getAppSignonPolicy";
export const getAppSignonPolicy: typeof import("./getAppSignonPolicy").getAppSignonPolicy = null as any;
export const getAppSignonPolicyOutput: typeof import("./getAppSignonPolicy").getAppSignonPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAppSignonPolicy","getAppSignonPolicyOutput"], () => require("./getAppSignonPolicy"));

export { GetAppUserAssignmentsArgs, GetAppUserAssignmentsResult, GetAppUserAssignmentsOutputArgs } from "./getAppUserAssignments";
export const getAppUserAssignments: typeof import("./getAppUserAssignments").getAppUserAssignments = null as any;
export const getAppUserAssignmentsOutput: typeof import("./getAppUserAssignments").getAppUserAssignmentsOutput = null as any;
utilities.lazyLoad(exports, ["getAppUserAssignments","getAppUserAssignmentsOutput"], () => require("./getAppUserAssignments"));

export { GetAuthServerArgs, GetAuthServerResult, GetAuthServerOutputArgs } from "./getAuthServer";
export const getAuthServer: typeof import("./getAuthServer").getAuthServer = null as any;
export const getAuthServerOutput: typeof import("./getAuthServer").getAuthServerOutput = null as any;
utilities.lazyLoad(exports, ["getAuthServer","getAuthServerOutput"], () => require("./getAuthServer"));

export { GetAuthServerClaimArgs, GetAuthServerClaimResult, GetAuthServerClaimOutputArgs } from "./getAuthServerClaim";
export const getAuthServerClaim: typeof import("./getAuthServerClaim").getAuthServerClaim = null as any;
export const getAuthServerClaimOutput: typeof import("./getAuthServerClaim").getAuthServerClaimOutput = null as any;
utilities.lazyLoad(exports, ["getAuthServerClaim","getAuthServerClaimOutput"], () => require("./getAuthServerClaim"));

export { GetAuthServerClaimsArgs, GetAuthServerClaimsResult, GetAuthServerClaimsOutputArgs } from "./getAuthServerClaims";
export const getAuthServerClaims: typeof import("./getAuthServerClaims").getAuthServerClaims = null as any;
export const getAuthServerClaimsOutput: typeof import("./getAuthServerClaims").getAuthServerClaimsOutput = null as any;
utilities.lazyLoad(exports, ["getAuthServerClaims","getAuthServerClaimsOutput"], () => require("./getAuthServerClaims"));

export { GetAuthServerPolicyArgs, GetAuthServerPolicyResult, GetAuthServerPolicyOutputArgs } from "./getAuthServerPolicy";
export const getAuthServerPolicy: typeof import("./getAuthServerPolicy").getAuthServerPolicy = null as any;
export const getAuthServerPolicyOutput: typeof import("./getAuthServerPolicy").getAuthServerPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAuthServerPolicy","getAuthServerPolicyOutput"], () => require("./getAuthServerPolicy"));

export { GetAuthServerScopesArgs, GetAuthServerScopesResult, GetAuthServerScopesOutputArgs } from "./getAuthServerScopes";
export const getAuthServerScopes: typeof import("./getAuthServerScopes").getAuthServerScopes = null as any;
export const getAuthServerScopesOutput: typeof import("./getAuthServerScopes").getAuthServerScopesOutput = null as any;
utilities.lazyLoad(exports, ["getAuthServerScopes","getAuthServerScopesOutput"], () => require("./getAuthServerScopes"));

export { GetAuthenticatorArgs, GetAuthenticatorResult, GetAuthenticatorOutputArgs } from "./getAuthenticator";
export const getAuthenticator: typeof import("./getAuthenticator").getAuthenticator = null as any;
export const getAuthenticatorOutput: typeof import("./getAuthenticator").getAuthenticatorOutput = null as any;
utilities.lazyLoad(exports, ["getAuthenticator","getAuthenticatorOutput"], () => require("./getAuthenticator"));

export { GetBehaviorArgs, GetBehaviorResult, GetBehaviorOutputArgs } from "./getBehavior";
export const getBehavior: typeof import("./getBehavior").getBehavior = null as any;
export const getBehaviorOutput: typeof import("./getBehavior").getBehaviorOutput = null as any;
utilities.lazyLoad(exports, ["getBehavior","getBehaviorOutput"], () => require("./getBehavior"));

export { GetBehaviorsArgs, GetBehaviorsResult, GetBehaviorsOutputArgs } from "./getBehaviors";
export const getBehaviors: typeof import("./getBehaviors").getBehaviors = null as any;
export const getBehaviorsOutput: typeof import("./getBehaviors").getBehaviorsOutput = null as any;
utilities.lazyLoad(exports, ["getBehaviors","getBehaviorsOutput"], () => require("./getBehaviors"));

export { GetBrandArgs, GetBrandResult, GetBrandOutputArgs } from "./getBrand";
export const getBrand: typeof import("./getBrand").getBrand = null as any;
export const getBrandOutput: typeof import("./getBrand").getBrandOutput = null as any;
utilities.lazyLoad(exports, ["getBrand","getBrandOutput"], () => require("./getBrand"));

export { GetBrandsArgs, GetBrandsResult, GetBrandsOutputArgs } from "./getBrands";
export const getBrands: typeof import("./getBrands").getBrands = null as any;
export const getBrandsOutput: typeof import("./getBrands").getBrandsOutput = null as any;
utilities.lazyLoad(exports, ["getBrands","getBrandsOutput"], () => require("./getBrands"));

export { GetDefaultPolicyArgs, GetDefaultPolicyResult, GetDefaultPolicyOutputArgs } from "./getDefaultPolicy";
export const getDefaultPolicy: typeof import("./getDefaultPolicy").getDefaultPolicy = null as any;
export const getDefaultPolicyOutput: typeof import("./getDefaultPolicy").getDefaultPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getDefaultPolicy","getDefaultPolicyOutput"], () => require("./getDefaultPolicy"));

export { GetDefaultSigninPageArgs, GetDefaultSigninPageResult, GetDefaultSigninPageOutputArgs } from "./getDefaultSigninPage";
export const getDefaultSigninPage: typeof import("./getDefaultSigninPage").getDefaultSigninPage = null as any;
export const getDefaultSigninPageOutput: typeof import("./getDefaultSigninPage").getDefaultSigninPageOutput = null as any;
utilities.lazyLoad(exports, ["getDefaultSigninPage","getDefaultSigninPageOutput"], () => require("./getDefaultSigninPage"));

export { GetDomainArgs, GetDomainResult, GetDomainOutputArgs } from "./getDomain";
export const getDomain: typeof import("./getDomain").getDomain = null as any;
export const getDomainOutput: typeof import("./getDomain").getDomainOutput = null as any;
utilities.lazyLoad(exports, ["getDomain","getDomainOutput"], () => require("./getDomain"));

export { GetEmailCustomizationArgs, GetEmailCustomizationResult, GetEmailCustomizationOutputArgs } from "./getEmailCustomization";
export const getEmailCustomization: typeof import("./getEmailCustomization").getEmailCustomization = null as any;
export const getEmailCustomizationOutput: typeof import("./getEmailCustomization").getEmailCustomizationOutput = null as any;
utilities.lazyLoad(exports, ["getEmailCustomization","getEmailCustomizationOutput"], () => require("./getEmailCustomization"));

export { GetEmailCustomizationsArgs, GetEmailCustomizationsResult, GetEmailCustomizationsOutputArgs } from "./getEmailCustomizations";
export const getEmailCustomizations: typeof import("./getEmailCustomizations").getEmailCustomizations = null as any;
export const getEmailCustomizationsOutput: typeof import("./getEmailCustomizations").getEmailCustomizationsOutput = null as any;
utilities.lazyLoad(exports, ["getEmailCustomizations","getEmailCustomizationsOutput"], () => require("./getEmailCustomizations"));

export { GetEmailTemplateArgs, GetEmailTemplateResult, GetEmailTemplateOutputArgs } from "./getEmailTemplate";
export const getEmailTemplate: typeof import("./getEmailTemplate").getEmailTemplate = null as any;
export const getEmailTemplateOutput: typeof import("./getEmailTemplate").getEmailTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getEmailTemplate","getEmailTemplateOutput"], () => require("./getEmailTemplate"));

export { GetEmailTemplatesArgs, GetEmailTemplatesResult, GetEmailTemplatesOutputArgs } from "./getEmailTemplates";
export const getEmailTemplates: typeof import("./getEmailTemplates").getEmailTemplates = null as any;
export const getEmailTemplatesOutput: typeof import("./getEmailTemplates").getEmailTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getEmailTemplates","getEmailTemplatesOutput"], () => require("./getEmailTemplates"));

export { GetEveryoneGroupArgs, GetEveryoneGroupResult, GetEveryoneGroupOutputArgs } from "./getEveryoneGroup";
export const getEveryoneGroup: typeof import("./getEveryoneGroup").getEveryoneGroup = null as any;
export const getEveryoneGroupOutput: typeof import("./getEveryoneGroup").getEveryoneGroupOutput = null as any;
utilities.lazyLoad(exports, ["getEveryoneGroup","getEveryoneGroupOutput"], () => require("./getEveryoneGroup"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetGroupRuleArgs, GetGroupRuleResult, GetGroupRuleOutputArgs } from "./getGroupRule";
export const getGroupRule: typeof import("./getGroupRule").getGroupRule = null as any;
export const getGroupRuleOutput: typeof import("./getGroupRule").getGroupRuleOutput = null as any;
utilities.lazyLoad(exports, ["getGroupRule","getGroupRuleOutput"], () => require("./getGroupRule"));

export { GetGroupsArgs, GetGroupsResult, GetGroupsOutputArgs } from "./getGroups";
export const getGroups: typeof import("./getGroups").getGroups = null as any;
export const getGroupsOutput: typeof import("./getGroups").getGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGroups","getGroupsOutput"], () => require("./getGroups"));

export { GetIdpMetadataSamlArgs, GetIdpMetadataSamlResult, GetIdpMetadataSamlOutputArgs } from "./getIdpMetadataSaml";
export const getIdpMetadataSaml: typeof import("./getIdpMetadataSaml").getIdpMetadataSaml = null as any;
export const getIdpMetadataSamlOutput: typeof import("./getIdpMetadataSaml").getIdpMetadataSamlOutput = null as any;
utilities.lazyLoad(exports, ["getIdpMetadataSaml","getIdpMetadataSamlOutput"], () => require("./getIdpMetadataSaml"));

export { GetIdpOidcArgs, GetIdpOidcResult, GetIdpOidcOutputArgs } from "./getIdpOidc";
export const getIdpOidc: typeof import("./getIdpOidc").getIdpOidc = null as any;
export const getIdpOidcOutput: typeof import("./getIdpOidc").getIdpOidcOutput = null as any;
utilities.lazyLoad(exports, ["getIdpOidc","getIdpOidcOutput"], () => require("./getIdpOidc"));

export { GetIdpSamlArgs, GetIdpSamlResult, GetIdpSamlOutputArgs } from "./getIdpSaml";
export const getIdpSaml: typeof import("./getIdpSaml").getIdpSaml = null as any;
export const getIdpSamlOutput: typeof import("./getIdpSaml").getIdpSamlOutput = null as any;
utilities.lazyLoad(exports, ["getIdpSaml","getIdpSamlOutput"], () => require("./getIdpSaml"));

export { GetIdpSocialArgs, GetIdpSocialResult, GetIdpSocialOutputArgs } from "./getIdpSocial";
export const getIdpSocial: typeof import("./getIdpSocial").getIdpSocial = null as any;
export const getIdpSocialOutput: typeof import("./getIdpSocial").getIdpSocialOutput = null as any;
utilities.lazyLoad(exports, ["getIdpSocial","getIdpSocialOutput"], () => require("./getIdpSocial"));

export { GetLogStreamArgs, GetLogStreamResult, GetLogStreamOutputArgs } from "./getLogStream";
export const getLogStream: typeof import("./getLogStream").getLogStream = null as any;
export const getLogStreamOutput: typeof import("./getLogStream").getLogStreamOutput = null as any;
utilities.lazyLoad(exports, ["getLogStream","getLogStreamOutput"], () => require("./getLogStream"));

export { GetNetworkZoneArgs, GetNetworkZoneResult, GetNetworkZoneOutputArgs } from "./getNetworkZone";
export const getNetworkZone: typeof import("./getNetworkZone").getNetworkZone = null as any;
export const getNetworkZoneOutput: typeof import("./getNetworkZone").getNetworkZoneOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkZone","getNetworkZoneOutput"], () => require("./getNetworkZone"));

export { GetOrgMetadataArgs, GetOrgMetadataResult, GetOrgMetadataOutputArgs } from "./getOrgMetadata";
export const getOrgMetadata: typeof import("./getOrgMetadata").getOrgMetadata = null as any;
export const getOrgMetadataOutput: typeof import("./getOrgMetadata").getOrgMetadataOutput = null as any;
utilities.lazyLoad(exports, ["getOrgMetadata","getOrgMetadataOutput"], () => require("./getOrgMetadata"));

export { GetPolicyArgs, GetPolicyResult, GetPolicyOutputArgs } from "./getPolicy";
export const getPolicy: typeof import("./getPolicy").getPolicy = null as any;
export const getPolicyOutput: typeof import("./getPolicy").getPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPolicy","getPolicyOutput"], () => require("./getPolicy"));

export { GetRoleSubscriptionArgs, GetRoleSubscriptionResult, GetRoleSubscriptionOutputArgs } from "./getRoleSubscription";
export const getRoleSubscription: typeof import("./getRoleSubscription").getRoleSubscription = null as any;
export const getRoleSubscriptionOutput: typeof import("./getRoleSubscription").getRoleSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getRoleSubscription","getRoleSubscriptionOutput"], () => require("./getRoleSubscription"));

export { GetThemeArgs, GetThemeResult, GetThemeOutputArgs } from "./getTheme";
export const getTheme: typeof import("./getTheme").getTheme = null as any;
export const getThemeOutput: typeof import("./getTheme").getThemeOutput = null as any;
utilities.lazyLoad(exports, ["getTheme","getThemeOutput"], () => require("./getTheme"));

export { GetThemesArgs, GetThemesResult, GetThemesOutputArgs } from "./getThemes";
export const getThemes: typeof import("./getThemes").getThemes = null as any;
export const getThemesOutput: typeof import("./getThemes").getThemesOutput = null as any;
utilities.lazyLoad(exports, ["getThemes","getThemesOutput"], () => require("./getThemes"));

export { GetTrustedOriginsArgs, GetTrustedOriginsResult, GetTrustedOriginsOutputArgs } from "./getTrustedOrigins";
export const getTrustedOrigins: typeof import("./getTrustedOrigins").getTrustedOrigins = null as any;
export const getTrustedOriginsOutput: typeof import("./getTrustedOrigins").getTrustedOriginsOutput = null as any;
utilities.lazyLoad(exports, ["getTrustedOrigins","getTrustedOriginsOutput"], () => require("./getTrustedOrigins"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUserProfileMappingSourceResult } from "./getUserProfileMappingSource";
export const getUserProfileMappingSource: typeof import("./getUserProfileMappingSource").getUserProfileMappingSource = null as any;
export const getUserProfileMappingSourceOutput: typeof import("./getUserProfileMappingSource").getUserProfileMappingSourceOutput = null as any;
utilities.lazyLoad(exports, ["getUserProfileMappingSource","getUserProfileMappingSourceOutput"], () => require("./getUserProfileMappingSource"));

export { GetUserSecurityQuestionsArgs, GetUserSecurityQuestionsResult, GetUserSecurityQuestionsOutputArgs } from "./getUserSecurityQuestions";
export const getUserSecurityQuestions: typeof import("./getUserSecurityQuestions").getUserSecurityQuestions = null as any;
export const getUserSecurityQuestionsOutput: typeof import("./getUserSecurityQuestions").getUserSecurityQuestionsOutput = null as any;
utilities.lazyLoad(exports, ["getUserSecurityQuestions","getUserSecurityQuestionsOutput"], () => require("./getUserSecurityQuestions"));

export { GetUserTypeArgs, GetUserTypeResult, GetUserTypeOutputArgs } from "./getUserType";
export const getUserType: typeof import("./getUserType").getUserType = null as any;
export const getUserTypeOutput: typeof import("./getUserType").getUserTypeOutput = null as any;
utilities.lazyLoad(exports, ["getUserType","getUserTypeOutput"], () => require("./getUserType"));

export { GetUsersArgs, GetUsersResult, GetUsersOutputArgs } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { GroupMembershipsArgs, GroupMembershipsState } from "./groupMemberships";
export type GroupMemberships = import("./groupMemberships").GroupMemberships;
export const GroupMemberships: typeof import("./groupMemberships").GroupMemberships = null as any;
utilities.lazyLoad(exports, ["GroupMemberships"], () => require("./groupMemberships"));

export { GroupRoleArgs, GroupRoleState } from "./groupRole";
export type GroupRole = import("./groupRole").GroupRole;
export const GroupRole: typeof import("./groupRole").GroupRole = null as any;
utilities.lazyLoad(exports, ["GroupRole"], () => require("./groupRole"));

export { GroupRuleArgs, GroupRuleState } from "./groupRule";
export type GroupRule = import("./groupRule").GroupRule;
export const GroupRule: typeof import("./groupRule").GroupRule = null as any;
utilities.lazyLoad(exports, ["GroupRule"], () => require("./groupRule"));

export { GroupSchemaPropertyArgs, GroupSchemaPropertyState } from "./groupSchemaProperty";
export type GroupSchemaProperty = import("./groupSchemaProperty").GroupSchemaProperty;
export const GroupSchemaProperty: typeof import("./groupSchemaProperty").GroupSchemaProperty = null as any;
utilities.lazyLoad(exports, ["GroupSchemaProperty"], () => require("./groupSchemaProperty"));

export { IdpOidcArgs, IdpOidcState } from "./idpOidc";
export type IdpOidc = import("./idpOidc").IdpOidc;
export const IdpOidc: typeof import("./idpOidc").IdpOidc = null as any;
utilities.lazyLoad(exports, ["IdpOidc"], () => require("./idpOidc"));

export { IdpSamlArgs, IdpSamlState } from "./idpSaml";
export type IdpSaml = import("./idpSaml").IdpSaml;
export const IdpSaml: typeof import("./idpSaml").IdpSaml = null as any;
utilities.lazyLoad(exports, ["IdpSaml"], () => require("./idpSaml"));

export { IdpSamlKeyArgs, IdpSamlKeyState } from "./idpSamlKey";
export type IdpSamlKey = import("./idpSamlKey").IdpSamlKey;
export const IdpSamlKey: typeof import("./idpSamlKey").IdpSamlKey = null as any;
utilities.lazyLoad(exports, ["IdpSamlKey"], () => require("./idpSamlKey"));

export { IdpSocialArgs, IdpSocialState } from "./idpSocial";
export type IdpSocial = import("./idpSocial").IdpSocial;
export const IdpSocial: typeof import("./idpSocial").IdpSocial = null as any;
utilities.lazyLoad(exports, ["IdpSocial"], () => require("./idpSocial"));

export { InlineHookArgs, InlineHookState } from "./inlineHook";
export type InlineHook = import("./inlineHook").InlineHook;
export const InlineHook: typeof import("./inlineHook").InlineHook = null as any;
utilities.lazyLoad(exports, ["InlineHook"], () => require("./inlineHook"));

export { LinkDefinitionArgs, LinkDefinitionState } from "./linkDefinition";
export type LinkDefinition = import("./linkDefinition").LinkDefinition;
export const LinkDefinition: typeof import("./linkDefinition").LinkDefinition = null as any;
utilities.lazyLoad(exports, ["LinkDefinition"], () => require("./linkDefinition"));

export { LinkValueArgs, LinkValueState } from "./linkValue";
export type LinkValue = import("./linkValue").LinkValue;
export const LinkValue: typeof import("./linkValue").LinkValue = null as any;
utilities.lazyLoad(exports, ["LinkValue"], () => require("./linkValue"));

export { LogStreamArgs, LogStreamState } from "./logStream";
export type LogStream = import("./logStream").LogStream;
export const LogStream: typeof import("./logStream").LogStream = null as any;
utilities.lazyLoad(exports, ["LogStream"], () => require("./logStream"));

export { NetworkZoneArgs, NetworkZoneState } from "./networkZone";
export type NetworkZone = import("./networkZone").NetworkZone;
export const NetworkZone: typeof import("./networkZone").NetworkZone = null as any;
utilities.lazyLoad(exports, ["NetworkZone"], () => require("./networkZone"));

export { OrgConfigurationArgs, OrgConfigurationState } from "./orgConfiguration";
export type OrgConfiguration = import("./orgConfiguration").OrgConfiguration;
export const OrgConfiguration: typeof import("./orgConfiguration").OrgConfiguration = null as any;
utilities.lazyLoad(exports, ["OrgConfiguration"], () => require("./orgConfiguration"));

export { OrgSupportArgs, OrgSupportState } from "./orgSupport";
export type OrgSupport = import("./orgSupport").OrgSupport;
export const OrgSupport: typeof import("./orgSupport").OrgSupport = null as any;
utilities.lazyLoad(exports, ["OrgSupport"], () => require("./orgSupport"));

export { PolicyDeviceAssuranceAndroidArgs, PolicyDeviceAssuranceAndroidState } from "./policyDeviceAssuranceAndroid";
export type PolicyDeviceAssuranceAndroid = import("./policyDeviceAssuranceAndroid").PolicyDeviceAssuranceAndroid;
export const PolicyDeviceAssuranceAndroid: typeof import("./policyDeviceAssuranceAndroid").PolicyDeviceAssuranceAndroid = null as any;
utilities.lazyLoad(exports, ["PolicyDeviceAssuranceAndroid"], () => require("./policyDeviceAssuranceAndroid"));

export { PolicyDeviceAssuranceChromeosArgs, PolicyDeviceAssuranceChromeosState } from "./policyDeviceAssuranceChromeos";
export type PolicyDeviceAssuranceChromeos = import("./policyDeviceAssuranceChromeos").PolicyDeviceAssuranceChromeos;
export const PolicyDeviceAssuranceChromeos: typeof import("./policyDeviceAssuranceChromeos").PolicyDeviceAssuranceChromeos = null as any;
utilities.lazyLoad(exports, ["PolicyDeviceAssuranceChromeos"], () => require("./policyDeviceAssuranceChromeos"));

export { PolicyDeviceAssuranceIosArgs, PolicyDeviceAssuranceIosState } from "./policyDeviceAssuranceIos";
export type PolicyDeviceAssuranceIos = import("./policyDeviceAssuranceIos").PolicyDeviceAssuranceIos;
export const PolicyDeviceAssuranceIos: typeof import("./policyDeviceAssuranceIos").PolicyDeviceAssuranceIos = null as any;
utilities.lazyLoad(exports, ["PolicyDeviceAssuranceIos"], () => require("./policyDeviceAssuranceIos"));

export { PolicyDeviceAssuranceMacosArgs, PolicyDeviceAssuranceMacosState } from "./policyDeviceAssuranceMacos";
export type PolicyDeviceAssuranceMacos = import("./policyDeviceAssuranceMacos").PolicyDeviceAssuranceMacos;
export const PolicyDeviceAssuranceMacos: typeof import("./policyDeviceAssuranceMacos").PolicyDeviceAssuranceMacos = null as any;
utilities.lazyLoad(exports, ["PolicyDeviceAssuranceMacos"], () => require("./policyDeviceAssuranceMacos"));

export { PolicyDeviceAssuranceWindowsArgs, PolicyDeviceAssuranceWindowsState } from "./policyDeviceAssuranceWindows";
export type PolicyDeviceAssuranceWindows = import("./policyDeviceAssuranceWindows").PolicyDeviceAssuranceWindows;
export const PolicyDeviceAssuranceWindows: typeof import("./policyDeviceAssuranceWindows").PolicyDeviceAssuranceWindows = null as any;
utilities.lazyLoad(exports, ["PolicyDeviceAssuranceWindows"], () => require("./policyDeviceAssuranceWindows"));

export { PolicyMfaArgs, PolicyMfaState } from "./policyMfa";
export type PolicyMfa = import("./policyMfa").PolicyMfa;
export const PolicyMfa: typeof import("./policyMfa").PolicyMfa = null as any;
utilities.lazyLoad(exports, ["PolicyMfa"], () => require("./policyMfa"));

export { PolicyMfaDefaultArgs, PolicyMfaDefaultState } from "./policyMfaDefault";
export type PolicyMfaDefault = import("./policyMfaDefault").PolicyMfaDefault;
export const PolicyMfaDefault: typeof import("./policyMfaDefault").PolicyMfaDefault = null as any;
utilities.lazyLoad(exports, ["PolicyMfaDefault"], () => require("./policyMfaDefault"));

export { PolicyPasswordArgs, PolicyPasswordState } from "./policyPassword";
export type PolicyPassword = import("./policyPassword").PolicyPassword;
export const PolicyPassword: typeof import("./policyPassword").PolicyPassword = null as any;
utilities.lazyLoad(exports, ["PolicyPassword"], () => require("./policyPassword"));

export { PolicyPasswordDefaultArgs, PolicyPasswordDefaultState } from "./policyPasswordDefault";
export type PolicyPasswordDefault = import("./policyPasswordDefault").PolicyPasswordDefault;
export const PolicyPasswordDefault: typeof import("./policyPasswordDefault").PolicyPasswordDefault = null as any;
utilities.lazyLoad(exports, ["PolicyPasswordDefault"], () => require("./policyPasswordDefault"));

export { PolicyProfileEnrollmentArgs, PolicyProfileEnrollmentState } from "./policyProfileEnrollment";
export type PolicyProfileEnrollment = import("./policyProfileEnrollment").PolicyProfileEnrollment;
export const PolicyProfileEnrollment: typeof import("./policyProfileEnrollment").PolicyProfileEnrollment = null as any;
utilities.lazyLoad(exports, ["PolicyProfileEnrollment"], () => require("./policyProfileEnrollment"));

export { PolicyProfileEnrollmentAppsArgs, PolicyProfileEnrollmentAppsState } from "./policyProfileEnrollmentApps";
export type PolicyProfileEnrollmentApps = import("./policyProfileEnrollmentApps").PolicyProfileEnrollmentApps;
export const PolicyProfileEnrollmentApps: typeof import("./policyProfileEnrollmentApps").PolicyProfileEnrollmentApps = null as any;
utilities.lazyLoad(exports, ["PolicyProfileEnrollmentApps"], () => require("./policyProfileEnrollmentApps"));

export { PolicyRuleIdpDiscoveryArgs, PolicyRuleIdpDiscoveryState } from "./policyRuleIdpDiscovery";
export type PolicyRuleIdpDiscovery = import("./policyRuleIdpDiscovery").PolicyRuleIdpDiscovery;
export const PolicyRuleIdpDiscovery: typeof import("./policyRuleIdpDiscovery").PolicyRuleIdpDiscovery = null as any;
utilities.lazyLoad(exports, ["PolicyRuleIdpDiscovery"], () => require("./policyRuleIdpDiscovery"));

export { PolicyRuleMfaArgs, PolicyRuleMfaState } from "./policyRuleMfa";
export type PolicyRuleMfa = import("./policyRuleMfa").PolicyRuleMfa;
export const PolicyRuleMfa: typeof import("./policyRuleMfa").PolicyRuleMfa = null as any;
utilities.lazyLoad(exports, ["PolicyRuleMfa"], () => require("./policyRuleMfa"));

export { PolicyRulePasswordArgs, PolicyRulePasswordState } from "./policyRulePassword";
export type PolicyRulePassword = import("./policyRulePassword").PolicyRulePassword;
export const PolicyRulePassword: typeof import("./policyRulePassword").PolicyRulePassword = null as any;
utilities.lazyLoad(exports, ["PolicyRulePassword"], () => require("./policyRulePassword"));

export { PolicyRuleProfileEnrollmentArgs, PolicyRuleProfileEnrollmentState } from "./policyRuleProfileEnrollment";
export type PolicyRuleProfileEnrollment = import("./policyRuleProfileEnrollment").PolicyRuleProfileEnrollment;
export const PolicyRuleProfileEnrollment: typeof import("./policyRuleProfileEnrollment").PolicyRuleProfileEnrollment = null as any;
utilities.lazyLoad(exports, ["PolicyRuleProfileEnrollment"], () => require("./policyRuleProfileEnrollment"));

export { PolicyRuleSignonArgs, PolicyRuleSignonState } from "./policyRuleSignon";
export type PolicyRuleSignon = import("./policyRuleSignon").PolicyRuleSignon;
export const PolicyRuleSignon: typeof import("./policyRuleSignon").PolicyRuleSignon = null as any;
utilities.lazyLoad(exports, ["PolicyRuleSignon"], () => require("./policyRuleSignon"));

export { PolicySignonArgs, PolicySignonState } from "./policySignon";
export type PolicySignon = import("./policySignon").PolicySignon;
export const PolicySignon: typeof import("./policySignon").PolicySignon = null as any;
utilities.lazyLoad(exports, ["PolicySignon"], () => require("./policySignon"));

export { PreviewSigninPageArgs, PreviewSigninPageState } from "./previewSigninPage";
export type PreviewSigninPage = import("./previewSigninPage").PreviewSigninPage;
export const PreviewSigninPage: typeof import("./previewSigninPage").PreviewSigninPage = null as any;
utilities.lazyLoad(exports, ["PreviewSigninPage"], () => require("./previewSigninPage"));

export { ProfileMappingArgs, ProfileMappingState } from "./profileMapping";
export type ProfileMapping = import("./profileMapping").ProfileMapping;
export const ProfileMapping: typeof import("./profileMapping").ProfileMapping = null as any;
utilities.lazyLoad(exports, ["ProfileMapping"], () => require("./profileMapping"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RateLimitingArgs, RateLimitingState } from "./rateLimiting";
export type RateLimiting = import("./rateLimiting").RateLimiting;
export const RateLimiting: typeof import("./rateLimiting").RateLimiting = null as any;
utilities.lazyLoad(exports, ["RateLimiting"], () => require("./rateLimiting"));

export { ResourceSetArgs, ResourceSetState } from "./resourceSet";
export type ResourceSet = import("./resourceSet").ResourceSet;
export const ResourceSet: typeof import("./resourceSet").ResourceSet = null as any;
utilities.lazyLoad(exports, ["ResourceSet"], () => require("./resourceSet"));

export { RoleSubscriptionArgs, RoleSubscriptionState } from "./roleSubscription";
export type RoleSubscription = import("./roleSubscription").RoleSubscription;
export const RoleSubscription: typeof import("./roleSubscription").RoleSubscription = null as any;
utilities.lazyLoad(exports, ["RoleSubscription"], () => require("./roleSubscription"));

export { SecurityNotificationEmailsArgs, SecurityNotificationEmailsState } from "./securityNotificationEmails";
export type SecurityNotificationEmails = import("./securityNotificationEmails").SecurityNotificationEmails;
export const SecurityNotificationEmails: typeof import("./securityNotificationEmails").SecurityNotificationEmails = null as any;
utilities.lazyLoad(exports, ["SecurityNotificationEmails"], () => require("./securityNotificationEmails"));

export { TemplateSmsArgs, TemplateSmsState } from "./templateSms";
export type TemplateSms = import("./templateSms").TemplateSms;
export const TemplateSms: typeof import("./templateSms").TemplateSms = null as any;
utilities.lazyLoad(exports, ["TemplateSms"], () => require("./templateSms"));

export { ThemeArgs, ThemeState } from "./theme";
export type Theme = import("./theme").Theme;
export const Theme: typeof import("./theme").Theme = null as any;
utilities.lazyLoad(exports, ["Theme"], () => require("./theme"));

export { ThreatInsightSettingsArgs, ThreatInsightSettingsState } from "./threatInsightSettings";
export type ThreatInsightSettings = import("./threatInsightSettings").ThreatInsightSettings;
export const ThreatInsightSettings: typeof import("./threatInsightSettings").ThreatInsightSettings = null as any;
utilities.lazyLoad(exports, ["ThreatInsightSettings"], () => require("./threatInsightSettings"));

export { TrustedOriginArgs, TrustedOriginState } from "./trustedOrigin";
export type TrustedOrigin = import("./trustedOrigin").TrustedOrigin;
export const TrustedOrigin: typeof import("./trustedOrigin").TrustedOrigin = null as any;
utilities.lazyLoad(exports, ["TrustedOrigin"], () => require("./trustedOrigin"));

export { TrustedServerArgs, TrustedServerState } from "./trustedServer";
export type TrustedServer = import("./trustedServer").TrustedServer;
export const TrustedServer: typeof import("./trustedServer").TrustedServer = null as any;
utilities.lazyLoad(exports, ["TrustedServer"], () => require("./trustedServer"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserAdminRolesArgs, UserAdminRolesState } from "./userAdminRoles";
export type UserAdminRoles = import("./userAdminRoles").UserAdminRoles;
export const UserAdminRoles: typeof import("./userAdminRoles").UserAdminRoles = null as any;
utilities.lazyLoad(exports, ["UserAdminRoles"], () => require("./userAdminRoles"));

export { UserBaseSchemaPropertyArgs, UserBaseSchemaPropertyState } from "./userBaseSchemaProperty";
export type UserBaseSchemaProperty = import("./userBaseSchemaProperty").UserBaseSchemaProperty;
export const UserBaseSchemaProperty: typeof import("./userBaseSchemaProperty").UserBaseSchemaProperty = null as any;
utilities.lazyLoad(exports, ["UserBaseSchemaProperty"], () => require("./userBaseSchemaProperty"));

export { UserFactorQuestionArgs, UserFactorQuestionState } from "./userFactorQuestion";
export type UserFactorQuestion = import("./userFactorQuestion").UserFactorQuestion;
export const UserFactorQuestion: typeof import("./userFactorQuestion").UserFactorQuestion = null as any;
utilities.lazyLoad(exports, ["UserFactorQuestion"], () => require("./userFactorQuestion"));

export { UserGroupMembershipsArgs, UserGroupMembershipsState } from "./userGroupMemberships";
export type UserGroupMemberships = import("./userGroupMemberships").UserGroupMemberships;
export const UserGroupMemberships: typeof import("./userGroupMemberships").UserGroupMemberships = null as any;
utilities.lazyLoad(exports, ["UserGroupMemberships"], () => require("./userGroupMemberships"));

export { UserSchemaPropertyArgs, UserSchemaPropertyState } from "./userSchemaProperty";
export type UserSchemaProperty = import("./userSchemaProperty").UserSchemaProperty;
export const UserSchemaProperty: typeof import("./userSchemaProperty").UserSchemaProperty = null as any;
utilities.lazyLoad(exports, ["UserSchemaProperty"], () => require("./userSchemaProperty"));

export { UserTypeArgs, UserTypeState } from "./userType";
export type UserType = import("./userType").UserType;
export const UserType: typeof import("./userType").UserType = null as any;
utilities.lazyLoad(exports, ["UserType"], () => require("./userType"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "okta:index/adminRoleCustom:AdminRoleCustom":
                return new AdminRoleCustom(name, <any>undefined, { urn })
            case "okta:index/adminRoleCustomAssignments:AdminRoleCustomAssignments":
                return new AdminRoleCustomAssignments(name, <any>undefined, { urn })
            case "okta:index/adminRoleTargets:AdminRoleTargets":
                return new AdminRoleTargets(name, <any>undefined, { urn })
            case "okta:index/appAccessPolicyAssignment:AppAccessPolicyAssignment":
                return new AppAccessPolicyAssignment(name, <any>undefined, { urn })
            case "okta:index/appAutoLogin:AppAutoLogin":
                return new AppAutoLogin(name, <any>undefined, { urn })
            case "okta:index/appBasicAuth:AppBasicAuth":
                return new AppBasicAuth(name, <any>undefined, { urn })
            case "okta:index/appBookmark:AppBookmark":
                return new AppBookmark(name, <any>undefined, { urn })
            case "okta:index/appGroupAssignment:AppGroupAssignment":
                return new AppGroupAssignment(name, <any>undefined, { urn })
            case "okta:index/appGroupAssignments:AppGroupAssignments":
                return new AppGroupAssignments(name, <any>undefined, { urn })
            case "okta:index/appOauth:AppOauth":
                return new AppOauth(name, <any>undefined, { urn })
            case "okta:index/appOauthApiScope:AppOauthApiScope":
                return new AppOauthApiScope(name, <any>undefined, { urn })
            case "okta:index/appOauthPostLogoutRedirectUri:AppOauthPostLogoutRedirectUri":
                return new AppOauthPostLogoutRedirectUri(name, <any>undefined, { urn })
            case "okta:index/appOauthRedirectUri:AppOauthRedirectUri":
                return new AppOauthRedirectUri(name, <any>undefined, { urn })
            case "okta:index/appOauthRoleAssignment:AppOauthRoleAssignment":
                return new AppOauthRoleAssignment(name, <any>undefined, { urn })
            case "okta:index/appSaml:AppSaml":
                return new AppSaml(name, <any>undefined, { urn })
            case "okta:index/appSamlAppSettings:AppSamlAppSettings":
                return new AppSamlAppSettings(name, <any>undefined, { urn })
            case "okta:index/appSecurePasswordStore:AppSecurePasswordStore":
                return new AppSecurePasswordStore(name, <any>undefined, { urn })
            case "okta:index/appSharedCredentials:AppSharedCredentials":
                return new AppSharedCredentials(name, <any>undefined, { urn })
            case "okta:index/appSignonPolicy:AppSignonPolicy":
                return new AppSignonPolicy(name, <any>undefined, { urn })
            case "okta:index/appSignonPolicyRule:AppSignonPolicyRule":
                return new AppSignonPolicyRule(name, <any>undefined, { urn })
            case "okta:index/appSwa:AppSwa":
                return new AppSwa(name, <any>undefined, { urn })
            case "okta:index/appThreeField:AppThreeField":
                return new AppThreeField(name, <any>undefined, { urn })
            case "okta:index/appUser:AppUser":
                return new AppUser(name, <any>undefined, { urn })
            case "okta:index/appUserBaseSchemaProperty:AppUserBaseSchemaProperty":
                return new AppUserBaseSchemaProperty(name, <any>undefined, { urn })
            case "okta:index/appUserSchemaProperty:AppUserSchemaProperty":
                return new AppUserSchemaProperty(name, <any>undefined, { urn })
            case "okta:index/authServer:AuthServer":
                return new AuthServer(name, <any>undefined, { urn })
            case "okta:index/authServerClaim:AuthServerClaim":
                return new AuthServerClaim(name, <any>undefined, { urn })
            case "okta:index/authServerClaimDefault:AuthServerClaimDefault":
                return new AuthServerClaimDefault(name, <any>undefined, { urn })
            case "okta:index/authServerDefault:AuthServerDefault":
                return new AuthServerDefault(name, <any>undefined, { urn })
            case "okta:index/authServerPolicy:AuthServerPolicy":
                return new AuthServerPolicy(name, <any>undefined, { urn })
            case "okta:index/authServerPolicyRule:AuthServerPolicyRule":
                return new AuthServerPolicyRule(name, <any>undefined, { urn })
            case "okta:index/authServerScope:AuthServerScope":
                return new AuthServerScope(name, <any>undefined, { urn })
            case "okta:index/authenticator:Authenticator":
                return new Authenticator(name, <any>undefined, { urn })
            case "okta:index/behavior:Behavior":
                return new Behavior(name, <any>undefined, { urn })
            case "okta:index/brand:Brand":
                return new Brand(name, <any>undefined, { urn })
            case "okta:index/captcha:Captcha":
                return new Captcha(name, <any>undefined, { urn })
            case "okta:index/captchaOrgWideSettings:CaptchaOrgWideSettings":
                return new CaptchaOrgWideSettings(name, <any>undefined, { urn })
            case "okta:index/customizedSigninPage:CustomizedSigninPage":
                return new CustomizedSigninPage(name, <any>undefined, { urn })
            case "okta:index/domain:Domain":
                return new Domain(name, <any>undefined, { urn })
            case "okta:index/domainCertificate:DomainCertificate":
                return new DomainCertificate(name, <any>undefined, { urn })
            case "okta:index/domainVerification:DomainVerification":
                return new DomainVerification(name, <any>undefined, { urn })
            case "okta:index/emailCustomization:EmailCustomization":
                return new EmailCustomization(name, <any>undefined, { urn })
            case "okta:index/emailDomain:EmailDomain":
                return new EmailDomain(name, <any>undefined, { urn })
            case "okta:index/emailDomainVerification:EmailDomainVerification":
                return new EmailDomainVerification(name, <any>undefined, { urn })
            case "okta:index/emailSender:EmailSender":
                return new EmailSender(name, <any>undefined, { urn })
            case "okta:index/emailSenderVerification:EmailSenderVerification":
                return new EmailSenderVerification(name, <any>undefined, { urn })
            case "okta:index/eventHook:EventHook":
                return new EventHook(name, <any>undefined, { urn })
            case "okta:index/eventHookVerification:EventHookVerification":
                return new EventHookVerification(name, <any>undefined, { urn })
            case "okta:index/factor:Factor":
                return new Factor(name, <any>undefined, { urn })
            case "okta:index/factorTotp:FactorTotp":
                return new FactorTotp(name, <any>undefined, { urn })
            case "okta:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "okta:index/groupMemberships:GroupMemberships":
                return new GroupMemberships(name, <any>undefined, { urn })
            case "okta:index/groupRole:GroupRole":
                return new GroupRole(name, <any>undefined, { urn })
            case "okta:index/groupRule:GroupRule":
                return new GroupRule(name, <any>undefined, { urn })
            case "okta:index/groupSchemaProperty:GroupSchemaProperty":
                return new GroupSchemaProperty(name, <any>undefined, { urn })
            case "okta:index/idpOidc:IdpOidc":
                return new IdpOidc(name, <any>undefined, { urn })
            case "okta:index/idpSaml:IdpSaml":
                return new IdpSaml(name, <any>undefined, { urn })
            case "okta:index/idpSamlKey:IdpSamlKey":
                return new IdpSamlKey(name, <any>undefined, { urn })
            case "okta:index/idpSocial:IdpSocial":
                return new IdpSocial(name, <any>undefined, { urn })
            case "okta:index/inlineHook:InlineHook":
                return new InlineHook(name, <any>undefined, { urn })
            case "okta:index/linkDefinition:LinkDefinition":
                return new LinkDefinition(name, <any>undefined, { urn })
            case "okta:index/linkValue:LinkValue":
                return new LinkValue(name, <any>undefined, { urn })
            case "okta:index/logStream:LogStream":
                return new LogStream(name, <any>undefined, { urn })
            case "okta:index/networkZone:NetworkZone":
                return new NetworkZone(name, <any>undefined, { urn })
            case "okta:index/orgConfiguration:OrgConfiguration":
                return new OrgConfiguration(name, <any>undefined, { urn })
            case "okta:index/orgSupport:OrgSupport":
                return new OrgSupport(name, <any>undefined, { urn })
            case "okta:index/policyDeviceAssuranceAndroid:PolicyDeviceAssuranceAndroid":
                return new PolicyDeviceAssuranceAndroid(name, <any>undefined, { urn })
            case "okta:index/policyDeviceAssuranceChromeos:PolicyDeviceAssuranceChromeos":
                return new PolicyDeviceAssuranceChromeos(name, <any>undefined, { urn })
            case "okta:index/policyDeviceAssuranceIos:PolicyDeviceAssuranceIos":
                return new PolicyDeviceAssuranceIos(name, <any>undefined, { urn })
            case "okta:index/policyDeviceAssuranceMacos:PolicyDeviceAssuranceMacos":
                return new PolicyDeviceAssuranceMacos(name, <any>undefined, { urn })
            case "okta:index/policyDeviceAssuranceWindows:PolicyDeviceAssuranceWindows":
                return new PolicyDeviceAssuranceWindows(name, <any>undefined, { urn })
            case "okta:index/policyMfa:PolicyMfa":
                return new PolicyMfa(name, <any>undefined, { urn })
            case "okta:index/policyMfaDefault:PolicyMfaDefault":
                return new PolicyMfaDefault(name, <any>undefined, { urn })
            case "okta:index/policyPassword:PolicyPassword":
                return new PolicyPassword(name, <any>undefined, { urn })
            case "okta:index/policyPasswordDefault:PolicyPasswordDefault":
                return new PolicyPasswordDefault(name, <any>undefined, { urn })
            case "okta:index/policyProfileEnrollment:PolicyProfileEnrollment":
                return new PolicyProfileEnrollment(name, <any>undefined, { urn })
            case "okta:index/policyProfileEnrollmentApps:PolicyProfileEnrollmentApps":
                return new PolicyProfileEnrollmentApps(name, <any>undefined, { urn })
            case "okta:index/policyRuleIdpDiscovery:PolicyRuleIdpDiscovery":
                return new PolicyRuleIdpDiscovery(name, <any>undefined, { urn })
            case "okta:index/policyRuleMfa:PolicyRuleMfa":
                return new PolicyRuleMfa(name, <any>undefined, { urn })
            case "okta:index/policyRulePassword:PolicyRulePassword":
                return new PolicyRulePassword(name, <any>undefined, { urn })
            case "okta:index/policyRuleProfileEnrollment:PolicyRuleProfileEnrollment":
                return new PolicyRuleProfileEnrollment(name, <any>undefined, { urn })
            case "okta:index/policyRuleSignon:PolicyRuleSignon":
                return new PolicyRuleSignon(name, <any>undefined, { urn })
            case "okta:index/policySignon:PolicySignon":
                return new PolicySignon(name, <any>undefined, { urn })
            case "okta:index/previewSigninPage:PreviewSigninPage":
                return new PreviewSigninPage(name, <any>undefined, { urn })
            case "okta:index/profileMapping:ProfileMapping":
                return new ProfileMapping(name, <any>undefined, { urn })
            case "okta:index/rateLimiting:RateLimiting":
                return new RateLimiting(name, <any>undefined, { urn })
            case "okta:index/resourceSet:ResourceSet":
                return new ResourceSet(name, <any>undefined, { urn })
            case "okta:index/roleSubscription:RoleSubscription":
                return new RoleSubscription(name, <any>undefined, { urn })
            case "okta:index/securityNotificationEmails:SecurityNotificationEmails":
                return new SecurityNotificationEmails(name, <any>undefined, { urn })
            case "okta:index/templateSms:TemplateSms":
                return new TemplateSms(name, <any>undefined, { urn })
            case "okta:index/theme:Theme":
                return new Theme(name, <any>undefined, { urn })
            case "okta:index/threatInsightSettings:ThreatInsightSettings":
                return new ThreatInsightSettings(name, <any>undefined, { urn })
            case "okta:index/trustedOrigin:TrustedOrigin":
                return new TrustedOrigin(name, <any>undefined, { urn })
            case "okta:index/trustedServer:TrustedServer":
                return new TrustedServer(name, <any>undefined, { urn })
            case "okta:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "okta:index/userAdminRoles:UserAdminRoles":
                return new UserAdminRoles(name, <any>undefined, { urn })
            case "okta:index/userBaseSchemaProperty:UserBaseSchemaProperty":
                return new UserBaseSchemaProperty(name, <any>undefined, { urn })
            case "okta:index/userFactorQuestion:UserFactorQuestion":
                return new UserFactorQuestion(name, <any>undefined, { urn })
            case "okta:index/userGroupMemberships:UserGroupMemberships":
                return new UserGroupMemberships(name, <any>undefined, { urn })
            case "okta:index/userSchemaProperty:UserSchemaProperty":
                return new UserSchemaProperty(name, <any>undefined, { urn })
            case "okta:index/userType:UserType":
                return new UserType(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("okta", "index/adminRoleCustom", _module)
pulumi.runtime.registerResourceModule("okta", "index/adminRoleCustomAssignments", _module)
pulumi.runtime.registerResourceModule("okta", "index/adminRoleTargets", _module)
pulumi.runtime.registerResourceModule("okta", "index/appAccessPolicyAssignment", _module)
pulumi.runtime.registerResourceModule("okta", "index/appAutoLogin", _module)
pulumi.runtime.registerResourceModule("okta", "index/appBasicAuth", _module)
pulumi.runtime.registerResourceModule("okta", "index/appBookmark", _module)
pulumi.runtime.registerResourceModule("okta", "index/appGroupAssignment", _module)
pulumi.runtime.registerResourceModule("okta", "index/appGroupAssignments", _module)
pulumi.runtime.registerResourceModule("okta", "index/appOauth", _module)
pulumi.runtime.registerResourceModule("okta", "index/appOauthApiScope", _module)
pulumi.runtime.registerResourceModule("okta", "index/appOauthPostLogoutRedirectUri", _module)
pulumi.runtime.registerResourceModule("okta", "index/appOauthRedirectUri", _module)
pulumi.runtime.registerResourceModule("okta", "index/appOauthRoleAssignment", _module)
pulumi.runtime.registerResourceModule("okta", "index/appSaml", _module)
pulumi.runtime.registerResourceModule("okta", "index/appSamlAppSettings", _module)
pulumi.runtime.registerResourceModule("okta", "index/appSecurePasswordStore", _module)
pulumi.runtime.registerResourceModule("okta", "index/appSharedCredentials", _module)
pulumi.runtime.registerResourceModule("okta", "index/appSignonPolicy", _module)
pulumi.runtime.registerResourceModule("okta", "index/appSignonPolicyRule", _module)
pulumi.runtime.registerResourceModule("okta", "index/appSwa", _module)
pulumi.runtime.registerResourceModule("okta", "index/appThreeField", _module)
pulumi.runtime.registerResourceModule("okta", "index/appUser", _module)
pulumi.runtime.registerResourceModule("okta", "index/appUserBaseSchemaProperty", _module)
pulumi.runtime.registerResourceModule("okta", "index/appUserSchemaProperty", _module)
pulumi.runtime.registerResourceModule("okta", "index/authServer", _module)
pulumi.runtime.registerResourceModule("okta", "index/authServerClaim", _module)
pulumi.runtime.registerResourceModule("okta", "index/authServerClaimDefault", _module)
pulumi.runtime.registerResourceModule("okta", "index/authServerDefault", _module)
pulumi.runtime.registerResourceModule("okta", "index/authServerPolicy", _module)
pulumi.runtime.registerResourceModule("okta", "index/authServerPolicyRule", _module)
pulumi.runtime.registerResourceModule("okta", "index/authServerScope", _module)
pulumi.runtime.registerResourceModule("okta", "index/authenticator", _module)
pulumi.runtime.registerResourceModule("okta", "index/behavior", _module)
pulumi.runtime.registerResourceModule("okta", "index/brand", _module)
pulumi.runtime.registerResourceModule("okta", "index/captcha", _module)
pulumi.runtime.registerResourceModule("okta", "index/captchaOrgWideSettings", _module)
pulumi.runtime.registerResourceModule("okta", "index/customizedSigninPage", _module)
pulumi.runtime.registerResourceModule("okta", "index/domain", _module)
pulumi.runtime.registerResourceModule("okta", "index/domainCertificate", _module)
pulumi.runtime.registerResourceModule("okta", "index/domainVerification", _module)
pulumi.runtime.registerResourceModule("okta", "index/emailCustomization", _module)
pulumi.runtime.registerResourceModule("okta", "index/emailDomain", _module)
pulumi.runtime.registerResourceModule("okta", "index/emailDomainVerification", _module)
pulumi.runtime.registerResourceModule("okta", "index/emailSender", _module)
pulumi.runtime.registerResourceModule("okta", "index/emailSenderVerification", _module)
pulumi.runtime.registerResourceModule("okta", "index/eventHook", _module)
pulumi.runtime.registerResourceModule("okta", "index/eventHookVerification", _module)
pulumi.runtime.registerResourceModule("okta", "index/factor", _module)
pulumi.runtime.registerResourceModule("okta", "index/factorTotp", _module)
pulumi.runtime.registerResourceModule("okta", "index/group", _module)
pulumi.runtime.registerResourceModule("okta", "index/groupMemberships", _module)
pulumi.runtime.registerResourceModule("okta", "index/groupRole", _module)
pulumi.runtime.registerResourceModule("okta", "index/groupRule", _module)
pulumi.runtime.registerResourceModule("okta", "index/groupSchemaProperty", _module)
pulumi.runtime.registerResourceModule("okta", "index/idpOidc", _module)
pulumi.runtime.registerResourceModule("okta", "index/idpSaml", _module)
pulumi.runtime.registerResourceModule("okta", "index/idpSamlKey", _module)
pulumi.runtime.registerResourceModule("okta", "index/idpSocial", _module)
pulumi.runtime.registerResourceModule("okta", "index/inlineHook", _module)
pulumi.runtime.registerResourceModule("okta", "index/linkDefinition", _module)
pulumi.runtime.registerResourceModule("okta", "index/linkValue", _module)
pulumi.runtime.registerResourceModule("okta", "index/logStream", _module)
pulumi.runtime.registerResourceModule("okta", "index/networkZone", _module)
pulumi.runtime.registerResourceModule("okta", "index/orgConfiguration", _module)
pulumi.runtime.registerResourceModule("okta", "index/orgSupport", _module)
pulumi.runtime.registerResourceModule("okta", "index/policyDeviceAssuranceAndroid", _module)
pulumi.runtime.registerResourceModule("okta", "index/policyDeviceAssuranceChromeos", _module)
pulumi.runtime.registerResourceModule("okta", "index/policyDeviceAssuranceIos", _module)
pulumi.runtime.registerResourceModule("okta", "index/policyDeviceAssuranceMacos", _module)
pulumi.runtime.registerResourceModule("okta", "index/policyDeviceAssuranceWindows", _module)
pulumi.runtime.registerResourceModule("okta", "index/policyMfa", _module)
pulumi.runtime.registerResourceModule("okta", "index/policyMfaDefault", _module)
pulumi.runtime.registerResourceModule("okta", "index/policyPassword", _module)
pulumi.runtime.registerResourceModule("okta", "index/policyPasswordDefault", _module)
pulumi.runtime.registerResourceModule("okta", "index/policyProfileEnrollment", _module)
pulumi.runtime.registerResourceModule("okta", "index/policyProfileEnrollmentApps", _module)
pulumi.runtime.registerResourceModule("okta", "index/policyRuleIdpDiscovery", _module)
pulumi.runtime.registerResourceModule("okta", "index/policyRuleMfa", _module)
pulumi.runtime.registerResourceModule("okta", "index/policyRulePassword", _module)
pulumi.runtime.registerResourceModule("okta", "index/policyRuleProfileEnrollment", _module)
pulumi.runtime.registerResourceModule("okta", "index/policyRuleSignon", _module)
pulumi.runtime.registerResourceModule("okta", "index/policySignon", _module)
pulumi.runtime.registerResourceModule("okta", "index/previewSigninPage", _module)
pulumi.runtime.registerResourceModule("okta", "index/profileMapping", _module)
pulumi.runtime.registerResourceModule("okta", "index/rateLimiting", _module)
pulumi.runtime.registerResourceModule("okta", "index/resourceSet", _module)
pulumi.runtime.registerResourceModule("okta", "index/roleSubscription", _module)
pulumi.runtime.registerResourceModule("okta", "index/securityNotificationEmails", _module)
pulumi.runtime.registerResourceModule("okta", "index/templateSms", _module)
pulumi.runtime.registerResourceModule("okta", "index/theme", _module)
pulumi.runtime.registerResourceModule("okta", "index/threatInsightSettings", _module)
pulumi.runtime.registerResourceModule("okta", "index/trustedOrigin", _module)
pulumi.runtime.registerResourceModule("okta", "index/trustedServer", _module)
pulumi.runtime.registerResourceModule("okta", "index/user", _module)
pulumi.runtime.registerResourceModule("okta", "index/userAdminRoles", _module)
pulumi.runtime.registerResourceModule("okta", "index/userBaseSchemaProperty", _module)
pulumi.runtime.registerResourceModule("okta", "index/userFactorQuestion", _module)
pulumi.runtime.registerResourceModule("okta", "index/userGroupMemberships", _module)
pulumi.runtime.registerResourceModule("okta", "index/userSchemaProperty", _module)
pulumi.runtime.registerResourceModule("okta", "index/userType", _module)
pulumi.runtime.registerResourcePackage("okta", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:okta") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
