// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getUser(args?: GetUserArgs, opts?: pulumi.InvokeOptions): Promise<GetUserResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("okta:index/getUser:getUser", {
        "compoundSearchOperator": args.compoundSearchOperator,
        "delayReadSeconds": args.delayReadSeconds,
        "id": args.id,
        "searches": args.searches,
        "skipGroups": args.skipGroups,
        "skipRoles": args.skipRoles,
        "userId": args.userId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserArgs {
    compoundSearchOperator?: string;
    delayReadSeconds?: string;
    id?: string;
    searches?: inputs.GetUserSearch[];
    skipGroups?: boolean;
    skipRoles?: boolean;
    userId?: string;
}

/**
 * A collection of values returned by getUser.
 */
export interface GetUserResult {
    readonly adminRoles: string[];
    readonly city: string;
    readonly compoundSearchOperator?: string;
    readonly costCenter: string;
    readonly countryCode: string;
    readonly customProfileAttributes: string;
    readonly delayReadSeconds?: string;
    readonly department: string;
    readonly displayName: string;
    readonly division: string;
    readonly email: string;
    readonly employeeNumber: string;
    readonly firstName: string;
    readonly groupMemberships: string[];
    readonly honorificPrefix: string;
    readonly honorificSuffix: string;
    readonly id: string;
    readonly lastName: string;
    readonly locale: string;
    readonly login: string;
    readonly manager: string;
    readonly managerId: string;
    readonly middleName: string;
    readonly mobilePhone: string;
    readonly nickName: string;
    readonly organization: string;
    readonly postalAddress: string;
    readonly preferredLanguage: string;
    readonly primaryPhone: string;
    readonly profileUrl: string;
    readonly roles: string[];
    readonly searches?: outputs.GetUserSearch[];
    readonly secondEmail: string;
    readonly skipGroups?: boolean;
    readonly skipRoles?: boolean;
    readonly state: string;
    readonly status: string;
    readonly streetAddress: string;
    readonly timezone: string;
    readonly title: string;
    readonly userId?: string;
    readonly userType: string;
    readonly zipCode: string;
}
export function getUserOutput(args?: GetUserOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUserResult> {
    return pulumi.output(args).apply((a: any) => getUser(a, opts))
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserOutputArgs {
    compoundSearchOperator?: pulumi.Input<string>;
    delayReadSeconds?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    searches?: pulumi.Input<pulumi.Input<inputs.GetUserSearchArgs>[]>;
    skipGroups?: pulumi.Input<boolean>;
    skipRoles?: pulumi.Input<boolean>;
    userId?: pulumi.Input<string>;
}
