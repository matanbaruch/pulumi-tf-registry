// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PolicyRulePassword extends pulumi.CustomResource {
    /**
     * Get an existing PolicyRulePassword resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyRulePasswordState, opts?: pulumi.CustomResourceOptions): PolicyRulePassword {
        return new PolicyRulePassword(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/policyRulePassword:PolicyRulePassword';

    /**
     * Returns true if the given object is an instance of PolicyRulePassword.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicyRulePassword {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyRulePassword.__pulumiType;
    }

    /**
     * Policy Rule Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Network selection mode: `ANYWHERE`, `ZONE`, `ON_NETWORK`, or `OFF_NETWORK`. Default: `ANYWHERE`
     */
    public readonly networkConnection!: pulumi.Output<string | undefined>;
    /**
     * Required if `network_connection` = `ZONE`. Indicates the network zones to exclude.
     */
    public readonly networkExcludes!: pulumi.Output<string[] | undefined>;
    /**
     * Required if `network_connection` = `ZONE`. Indicates the network zones to include.
     */
    public readonly networkIncludes!: pulumi.Output<string[] | undefined>;
    /**
     * Allow or deny a user to change their password: `ALLOW` or `DENY`. Default: `ALLOW`
     */
    public readonly passwordChange!: pulumi.Output<string | undefined>;
    /**
     * Allow or deny a user to reset their password: `ALLOW` or `DENY`. Default: `ALLOW`
     */
    public readonly passwordReset!: pulumi.Output<string | undefined>;
    /**
     * Allow or deny a user to unlock. Default: `DENY`
     */
    public readonly passwordUnlock!: pulumi.Output<string | undefined>;
    /**
     * Policy ID of the Rule
     */
    public readonly policyId!: pulumi.Output<string | undefined>;
    /**
     * Rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if
     * an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
     */
    public readonly priority!: pulumi.Output<number | undefined>;
    /**
     * Policy Rule Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
     */
    public readonly status!: pulumi.Output<string | undefined>;
    /**
     * Set of User IDs to Exclude
     */
    public readonly usersExcludeds!: pulumi.Output<string[] | undefined>;

    /**
     * Create a PolicyRulePassword resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PolicyRulePasswordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyRulePasswordArgs | PolicyRulePasswordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyRulePasswordState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkConnection"] = state ? state.networkConnection : undefined;
            resourceInputs["networkExcludes"] = state ? state.networkExcludes : undefined;
            resourceInputs["networkIncludes"] = state ? state.networkIncludes : undefined;
            resourceInputs["passwordChange"] = state ? state.passwordChange : undefined;
            resourceInputs["passwordReset"] = state ? state.passwordReset : undefined;
            resourceInputs["passwordUnlock"] = state ? state.passwordUnlock : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["usersExcludeds"] = state ? state.usersExcludeds : undefined;
        } else {
            const args = argsOrState as PolicyRulePasswordArgs | undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkConnection"] = args ? args.networkConnection : undefined;
            resourceInputs["networkExcludes"] = args ? args.networkExcludes : undefined;
            resourceInputs["networkIncludes"] = args ? args.networkIncludes : undefined;
            resourceInputs["passwordChange"] = args ? args.passwordChange : undefined;
            resourceInputs["passwordReset"] = args ? args.passwordReset : undefined;
            resourceInputs["passwordUnlock"] = args ? args.passwordUnlock : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["usersExcludeds"] = args ? args.usersExcludeds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PolicyRulePassword.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PolicyRulePassword resources.
 */
export interface PolicyRulePasswordState {
    /**
     * Policy Rule Name
     */
    name?: pulumi.Input<string>;
    /**
     * Network selection mode: `ANYWHERE`, `ZONE`, `ON_NETWORK`, or `OFF_NETWORK`. Default: `ANYWHERE`
     */
    networkConnection?: pulumi.Input<string>;
    /**
     * Required if `network_connection` = `ZONE`. Indicates the network zones to exclude.
     */
    networkExcludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required if `network_connection` = `ZONE`. Indicates the network zones to include.
     */
    networkIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Allow or deny a user to change their password: `ALLOW` or `DENY`. Default: `ALLOW`
     */
    passwordChange?: pulumi.Input<string>;
    /**
     * Allow or deny a user to reset their password: `ALLOW` or `DENY`. Default: `ALLOW`
     */
    passwordReset?: pulumi.Input<string>;
    /**
     * Allow or deny a user to unlock. Default: `DENY`
     */
    passwordUnlock?: pulumi.Input<string>;
    /**
     * Policy ID of the Rule
     */
    policyId?: pulumi.Input<string>;
    /**
     * Rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if
     * an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
     */
    priority?: pulumi.Input<number>;
    /**
     * Policy Rule Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
     */
    status?: pulumi.Input<string>;
    /**
     * Set of User IDs to Exclude
     */
    usersExcludeds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a PolicyRulePassword resource.
 */
export interface PolicyRulePasswordArgs {
    /**
     * Policy Rule Name
     */
    name?: pulumi.Input<string>;
    /**
     * Network selection mode: `ANYWHERE`, `ZONE`, `ON_NETWORK`, or `OFF_NETWORK`. Default: `ANYWHERE`
     */
    networkConnection?: pulumi.Input<string>;
    /**
     * Required if `network_connection` = `ZONE`. Indicates the network zones to exclude.
     */
    networkExcludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required if `network_connection` = `ZONE`. Indicates the network zones to include.
     */
    networkIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Allow or deny a user to change their password: `ALLOW` or `DENY`. Default: `ALLOW`
     */
    passwordChange?: pulumi.Input<string>;
    /**
     * Allow or deny a user to reset their password: `ALLOW` or `DENY`. Default: `ALLOW`
     */
    passwordReset?: pulumi.Input<string>;
    /**
     * Allow or deny a user to unlock. Default: `DENY`
     */
    passwordUnlock?: pulumi.Input<string>;
    /**
     * Policy ID of the Rule
     */
    policyId?: pulumi.Input<string>;
    /**
     * Rule priority. This attribute can be set to a valid priority. To avoid an endless diff situation an error is thrown if
     * an invalid property is provided. The Okta API defaults to the last (lowest) if not provided.
     */
    priority?: pulumi.Input<number>;
    /**
     * Policy Rule Status: `ACTIVE` or `INACTIVE`. Default: `ACTIVE`
     */
    status?: pulumi.Input<string>;
    /**
     * Set of User IDs to Exclude
     */
    usersExcludeds?: pulumi.Input<pulumi.Input<string>[]>;
}
