// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getAuthServerClaims(args: GetAuthServerClaimsArgs, opts?: pulumi.InvokeOptions): Promise<GetAuthServerClaimsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("okta:index/getAuthServerClaims:getAuthServerClaims", {
        "authServerId": args.authServerId,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAuthServerClaims.
 */
export interface GetAuthServerClaimsArgs {
    authServerId: string;
    id?: string;
}

/**
 * A collection of values returned by getAuthServerClaims.
 */
export interface GetAuthServerClaimsResult {
    readonly authServerId: string;
    readonly claims: outputs.GetAuthServerClaimsClaim[];
    readonly id: string;
}
export function getAuthServerClaimsOutput(args: GetAuthServerClaimsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAuthServerClaimsResult> {
    return pulumi.output(args).apply((a: any) => getAuthServerClaims(a, opts))
}

/**
 * A collection of arguments for invoking getAuthServerClaims.
 */
export interface GetAuthServerClaimsOutputArgs {
    authServerId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
}
