// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getAuthServer(args: GetAuthServerArgs, opts?: pulumi.InvokeOptions): Promise<GetAuthServerResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("okta:index/getAuthServer:getAuthServer", {
        "id": args.id,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAuthServer.
 */
export interface GetAuthServerArgs {
    id?: string;
    name: string;
}

/**
 * A collection of values returned by getAuthServer.
 */
export interface GetAuthServerResult {
    readonly audiences: string[];
    readonly credentialsLastRotated: string;
    readonly credentialsNextRotation: string;
    readonly credentialsRotationMode: string;
    readonly description: string;
    readonly id: string;
    readonly issuer: string;
    readonly issuerMode: string;
    readonly kid: string;
    readonly name: string;
    readonly status: string;
}
export function getAuthServerOutput(args: GetAuthServerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAuthServerResult> {
    return pulumi.output(args).apply((a: any) => getAuthServer(a, opts))
}

/**
 * A collection of arguments for invoking getAuthServer.
 */
export interface GetAuthServerOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
}
