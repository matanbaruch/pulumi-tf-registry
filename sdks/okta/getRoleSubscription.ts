// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getRoleSubscription(args: GetRoleSubscriptionArgs, opts?: pulumi.InvokeOptions): Promise<GetRoleSubscriptionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("okta:index/getRoleSubscription:getRoleSubscription", {
        "id": args.id,
        "notificationType": args.notificationType,
        "roleType": args.roleType,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRoleSubscription.
 */
export interface GetRoleSubscriptionArgs {
    id?: string;
    notificationType: string;
    roleType: string;
}

/**
 * A collection of values returned by getRoleSubscription.
 */
export interface GetRoleSubscriptionResult {
    readonly id: string;
    readonly notificationType: string;
    readonly roleType: string;
    readonly status: string;
}
export function getRoleSubscriptionOutput(args: GetRoleSubscriptionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRoleSubscriptionResult> {
    return pulumi.output(args).apply((a: any) => getRoleSubscription(a, opts))
}

/**
 * A collection of arguments for invoking getRoleSubscription.
 */
export interface GetRoleSubscriptionOutputArgs {
    id?: pulumi.Input<string>;
    notificationType: pulumi.Input<string>;
    roleType: pulumi.Input<string>;
}
