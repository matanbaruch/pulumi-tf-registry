// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AuthServer extends pulumi.CustomResource {
    /**
     * Get an existing AuthServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthServerState, opts?: pulumi.CustomResourceOptions): AuthServer {
        return new AuthServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/authServer:AuthServer';

    /**
     * Returns true if the given object is an instance of AuthServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthServer.__pulumiType;
    }

    /**
     * The recipients that the tokens are intended for. This becomes the `aud` claim in an access token. Currently Okta only
     * supports a single value here.
     */
    public readonly audiences!: pulumi.Output<string[]>;
    /**
     * The timestamp when the authorization server started to use the `kid` for signing tokens.
     */
    public /*out*/ readonly credentialsLastRotated!: pulumi.Output<string>;
    /**
     * The timestamp when the authorization server changes the key for signing tokens. Only returned when
     * `credentials_rotation_mode` is `AUTO`.
     */
    public /*out*/ readonly credentialsNextRotation!: pulumi.Output<string>;
    /**
     * The key rotation mode for the authorization server. Can be `AUTO` or `MANUAL`. Default: `AUTO`
     */
    public readonly credentialsRotationMode!: pulumi.Output<string | undefined>;
    /**
     * The description of the authorization server.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The complete URL for a Custom Authorization Server. This becomes the `iss` claim in an access token.
     */
    public /*out*/ readonly issuer!: pulumi.Output<string>;
    /**
     * *Early Access Property*. Allows you to use a custom issuer URL. It can be set to `CUSTOM_URL`, `ORG_URL`, or `DYNAMIC`.
     * Default: `ORG_URL`
     */
    public readonly issuerMode!: pulumi.Output<string | undefined>;
    /**
     * The ID of the JSON Web Key used for signing tokens issued by the authorization server.
     */
    public /*out*/ readonly kid!: pulumi.Output<string>;
    /**
     * The name of the authorization server.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Default to `ACTIVE`
     */
    public readonly status!: pulumi.Output<string | undefined>;

    /**
     * Create a AuthServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthServerArgs | AuthServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthServerState | undefined;
            resourceInputs["audiences"] = state ? state.audiences : undefined;
            resourceInputs["credentialsLastRotated"] = state ? state.credentialsLastRotated : undefined;
            resourceInputs["credentialsNextRotation"] = state ? state.credentialsNextRotation : undefined;
            resourceInputs["credentialsRotationMode"] = state ? state.credentialsRotationMode : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["issuer"] = state ? state.issuer : undefined;
            resourceInputs["issuerMode"] = state ? state.issuerMode : undefined;
            resourceInputs["kid"] = state ? state.kid : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as AuthServerArgs | undefined;
            if ((!args || args.audiences === undefined) && !opts.urn) {
                throw new Error("Missing required property 'audiences'");
            }
            resourceInputs["audiences"] = args ? args.audiences : undefined;
            resourceInputs["credentialsRotationMode"] = args ? args.credentialsRotationMode : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["issuerMode"] = args ? args.issuerMode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["credentialsLastRotated"] = undefined /*out*/;
            resourceInputs["credentialsNextRotation"] = undefined /*out*/;
            resourceInputs["issuer"] = undefined /*out*/;
            resourceInputs["kid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AuthServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AuthServer resources.
 */
export interface AuthServerState {
    /**
     * The recipients that the tokens are intended for. This becomes the `aud` claim in an access token. Currently Okta only
     * supports a single value here.
     */
    audiences?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The timestamp when the authorization server started to use the `kid` for signing tokens.
     */
    credentialsLastRotated?: pulumi.Input<string>;
    /**
     * The timestamp when the authorization server changes the key for signing tokens. Only returned when
     * `credentials_rotation_mode` is `AUTO`.
     */
    credentialsNextRotation?: pulumi.Input<string>;
    /**
     * The key rotation mode for the authorization server. Can be `AUTO` or `MANUAL`. Default: `AUTO`
     */
    credentialsRotationMode?: pulumi.Input<string>;
    /**
     * The description of the authorization server.
     */
    description?: pulumi.Input<string>;
    /**
     * The complete URL for a Custom Authorization Server. This becomes the `iss` claim in an access token.
     */
    issuer?: pulumi.Input<string>;
    /**
     * *Early Access Property*. Allows you to use a custom issuer URL. It can be set to `CUSTOM_URL`, `ORG_URL`, or `DYNAMIC`.
     * Default: `ORG_URL`
     */
    issuerMode?: pulumi.Input<string>;
    /**
     * The ID of the JSON Web Key used for signing tokens issued by the authorization server.
     */
    kid?: pulumi.Input<string>;
    /**
     * The name of the authorization server.
     */
    name?: pulumi.Input<string>;
    /**
     * Default to `ACTIVE`
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AuthServer resource.
 */
export interface AuthServerArgs {
    /**
     * The recipients that the tokens are intended for. This becomes the `aud` claim in an access token. Currently Okta only
     * supports a single value here.
     */
    audiences: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The key rotation mode for the authorization server. Can be `AUTO` or `MANUAL`. Default: `AUTO`
     */
    credentialsRotationMode?: pulumi.Input<string>;
    /**
     * The description of the authorization server.
     */
    description?: pulumi.Input<string>;
    /**
     * *Early Access Property*. Allows you to use a custom issuer URL. It can be set to `CUSTOM_URL`, `ORG_URL`, or `DYNAMIC`.
     * Default: `ORG_URL`
     */
    issuerMode?: pulumi.Input<string>;
    /**
     * The name of the authorization server.
     */
    name?: pulumi.Input<string>;
    /**
     * Default to `ACTIVE`
     */
    status?: pulumi.Input<string>;
}
