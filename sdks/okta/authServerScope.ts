// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AuthServerScope extends pulumi.CustomResource {
    /**
     * Get an existing AuthServerScope resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthServerScopeState, opts?: pulumi.CustomResourceOptions): AuthServerScope {
        return new AuthServerScope(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/authServerScope:AuthServerScope';

    /**
     * Returns true if the given object is an instance of AuthServerScope.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthServerScope {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthServerScope.__pulumiType;
    }

    /**
     * Auth server ID
     */
    public readonly authServerId!: pulumi.Output<string>;
    /**
     * Indicates whether a consent dialog is needed for the scope. It can be set to `REQUIRED` or `IMPLICIT`. Default:
     * `IMPLICIT`
     */
    public readonly consent!: pulumi.Output<string | undefined>;
    /**
     * A default scope will be returned in an access token when the client omits the scope parameter in a token request,
     * provided this scope is allowed as part of the access policy rule.
     */
    public readonly default!: pulumi.Output<boolean | undefined>;
    /**
     * Description of the Auth Server Scope.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Name of the end user displayed in a consent dialog box
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * Whether to publish metadata or not. It can be set to `ALL_CLIENTS` or `NO_CLIENTS`. Default: `ALL_CLIENTS`
     */
    public readonly metadataPublish!: pulumi.Output<string | undefined>;
    /**
     * Auth server scope name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Whether the scope optional
     */
    public readonly optional!: pulumi.Output<boolean | undefined>;
    /**
     * Whether Okta created the Scope
     */
    public /*out*/ readonly system!: pulumi.Output<boolean>;

    /**
     * Create a AuthServerScope resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthServerScopeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthServerScopeArgs | AuthServerScopeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthServerScopeState | undefined;
            resourceInputs["authServerId"] = state ? state.authServerId : undefined;
            resourceInputs["consent"] = state ? state.consent : undefined;
            resourceInputs["default"] = state ? state.default : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["metadataPublish"] = state ? state.metadataPublish : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["optional"] = state ? state.optional : undefined;
            resourceInputs["system"] = state ? state.system : undefined;
        } else {
            const args = argsOrState as AuthServerScopeArgs | undefined;
            if ((!args || args.authServerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authServerId'");
            }
            resourceInputs["authServerId"] = args ? args.authServerId : undefined;
            resourceInputs["consent"] = args ? args.consent : undefined;
            resourceInputs["default"] = args ? args.default : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["metadataPublish"] = args ? args.metadataPublish : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["optional"] = args ? args.optional : undefined;
            resourceInputs["system"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AuthServerScope.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AuthServerScope resources.
 */
export interface AuthServerScopeState {
    /**
     * Auth server ID
     */
    authServerId?: pulumi.Input<string>;
    /**
     * Indicates whether a consent dialog is needed for the scope. It can be set to `REQUIRED` or `IMPLICIT`. Default:
     * `IMPLICIT`
     */
    consent?: pulumi.Input<string>;
    /**
     * A default scope will be returned in an access token when the client omits the scope parameter in a token request,
     * provided this scope is allowed as part of the access policy rule.
     */
    default?: pulumi.Input<boolean>;
    /**
     * Description of the Auth Server Scope.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the end user displayed in a consent dialog box
     */
    displayName?: pulumi.Input<string>;
    /**
     * Whether to publish metadata or not. It can be set to `ALL_CLIENTS` or `NO_CLIENTS`. Default: `ALL_CLIENTS`
     */
    metadataPublish?: pulumi.Input<string>;
    /**
     * Auth server scope name
     */
    name?: pulumi.Input<string>;
    /**
     * Whether the scope optional
     */
    optional?: pulumi.Input<boolean>;
    /**
     * Whether Okta created the Scope
     */
    system?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a AuthServerScope resource.
 */
export interface AuthServerScopeArgs {
    /**
     * Auth server ID
     */
    authServerId: pulumi.Input<string>;
    /**
     * Indicates whether a consent dialog is needed for the scope. It can be set to `REQUIRED` or `IMPLICIT`. Default:
     * `IMPLICIT`
     */
    consent?: pulumi.Input<string>;
    /**
     * A default scope will be returned in an access token when the client omits the scope parameter in a token request,
     * provided this scope is allowed as part of the access policy rule.
     */
    default?: pulumi.Input<boolean>;
    /**
     * Description of the Auth Server Scope.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the end user displayed in a consent dialog box
     */
    displayName?: pulumi.Input<string>;
    /**
     * Whether to publish metadata or not. It can be set to `ALL_CLIENTS` or `NO_CLIENTS`. Default: `ALL_CLIENTS`
     */
    metadataPublish?: pulumi.Input<string>;
    /**
     * Auth server scope name
     */
    name?: pulumi.Input<string>;
    /**
     * Whether the scope optional
     */
    optional?: pulumi.Input<boolean>;
}
