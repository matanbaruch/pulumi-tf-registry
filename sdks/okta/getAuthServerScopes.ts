// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getAuthServerScopes(args: GetAuthServerScopesArgs, opts?: pulumi.InvokeOptions): Promise<GetAuthServerScopesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("okta:index/getAuthServerScopes:getAuthServerScopes", {
        "authServerId": args.authServerId,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAuthServerScopes.
 */
export interface GetAuthServerScopesArgs {
    authServerId: string;
    id?: string;
}

/**
 * A collection of values returned by getAuthServerScopes.
 */
export interface GetAuthServerScopesResult {
    readonly authServerId: string;
    readonly id: string;
    readonly scopes: outputs.GetAuthServerScopesScope[];
}
export function getAuthServerScopesOutput(args: GetAuthServerScopesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAuthServerScopesResult> {
    return pulumi.output(args).apply((a: any) => getAuthServerScopes(a, opts))
}

/**
 * A collection of arguments for invoking getAuthServerScopes.
 */
export interface GetAuthServerScopesOutputArgs {
    authServerId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
}
