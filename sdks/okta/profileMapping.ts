// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ProfileMapping extends pulumi.CustomResource {
    /**
     * Get an existing ProfileMapping resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProfileMappingState, opts?: pulumi.CustomResourceOptions): ProfileMapping {
        return new ProfileMapping(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'okta:index/profileMapping:ProfileMapping';

    /**
     * Returns true if the given object is an instance of ProfileMapping.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProfileMapping {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProfileMapping.__pulumiType;
    }

    /**
     * Whether apply the changes to all users with this profile after updating or creating the these mappings. > **WARNING:**:
     * 'always_apply' is incompatible with OAuth 2.0 authentication and will be ignored when using that type of authentication.
     * > **WARNING:** 'always_apply' makes use of an internal/private Okta API endpoint that could change without notice
     * rendering this resource inoperable.
     */
    public readonly alwaysApply!: pulumi.Output<boolean | undefined>;
    /**
     * When turned on this flag will trigger the provider to delete mapping properties that are not defined in config. By
     * default, we do not delete missing properties.
     */
    public readonly deleteWhenAbsent!: pulumi.Output<boolean | undefined>;
    public readonly mappings!: pulumi.Output<outputs.ProfileMappingMapping[] | undefined>;
    /**
     * The source id of the mapping to manage.
     */
    public readonly sourceId!: pulumi.Output<string>;
    /**
     * Name of the mapping source.
     */
    public /*out*/ readonly sourceName!: pulumi.Output<string>;
    /**
     * ID of the mapping source.
     */
    public /*out*/ readonly sourceType!: pulumi.Output<string>;
    /**
     * The target id of the mapping to manage.
     */
    public readonly targetId!: pulumi.Output<string>;
    /**
     * Name of the mapping target.
     */
    public /*out*/ readonly targetName!: pulumi.Output<string>;
    /**
     * ID of the mapping target.
     */
    public /*out*/ readonly targetType!: pulumi.Output<string>;

    /**
     * Create a ProfileMapping resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProfileMappingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProfileMappingArgs | ProfileMappingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProfileMappingState | undefined;
            resourceInputs["alwaysApply"] = state ? state.alwaysApply : undefined;
            resourceInputs["deleteWhenAbsent"] = state ? state.deleteWhenAbsent : undefined;
            resourceInputs["mappings"] = state ? state.mappings : undefined;
            resourceInputs["sourceId"] = state ? state.sourceId : undefined;
            resourceInputs["sourceName"] = state ? state.sourceName : undefined;
            resourceInputs["sourceType"] = state ? state.sourceType : undefined;
            resourceInputs["targetId"] = state ? state.targetId : undefined;
            resourceInputs["targetName"] = state ? state.targetName : undefined;
            resourceInputs["targetType"] = state ? state.targetType : undefined;
        } else {
            const args = argsOrState as ProfileMappingArgs | undefined;
            if ((!args || args.sourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceId'");
            }
            if ((!args || args.targetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetId'");
            }
            resourceInputs["alwaysApply"] = args ? args.alwaysApply : undefined;
            resourceInputs["deleteWhenAbsent"] = args ? args.deleteWhenAbsent : undefined;
            resourceInputs["mappings"] = args ? args.mappings : undefined;
            resourceInputs["sourceId"] = args ? args.sourceId : undefined;
            resourceInputs["targetId"] = args ? args.targetId : undefined;
            resourceInputs["sourceName"] = undefined /*out*/;
            resourceInputs["sourceType"] = undefined /*out*/;
            resourceInputs["targetName"] = undefined /*out*/;
            resourceInputs["targetType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProfileMapping.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ProfileMapping resources.
 */
export interface ProfileMappingState {
    /**
     * Whether apply the changes to all users with this profile after updating or creating the these mappings. > **WARNING:**:
     * 'always_apply' is incompatible with OAuth 2.0 authentication and will be ignored when using that type of authentication.
     * > **WARNING:** 'always_apply' makes use of an internal/private Okta API endpoint that could change without notice
     * rendering this resource inoperable.
     */
    alwaysApply?: pulumi.Input<boolean>;
    /**
     * When turned on this flag will trigger the provider to delete mapping properties that are not defined in config. By
     * default, we do not delete missing properties.
     */
    deleteWhenAbsent?: pulumi.Input<boolean>;
    mappings?: pulumi.Input<pulumi.Input<inputs.ProfileMappingMapping>[]>;
    /**
     * The source id of the mapping to manage.
     */
    sourceId?: pulumi.Input<string>;
    /**
     * Name of the mapping source.
     */
    sourceName?: pulumi.Input<string>;
    /**
     * ID of the mapping source.
     */
    sourceType?: pulumi.Input<string>;
    /**
     * The target id of the mapping to manage.
     */
    targetId?: pulumi.Input<string>;
    /**
     * Name of the mapping target.
     */
    targetName?: pulumi.Input<string>;
    /**
     * ID of the mapping target.
     */
    targetType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProfileMapping resource.
 */
export interface ProfileMappingArgs {
    /**
     * Whether apply the changes to all users with this profile after updating or creating the these mappings. > **WARNING:**:
     * 'always_apply' is incompatible with OAuth 2.0 authentication and will be ignored when using that type of authentication.
     * > **WARNING:** 'always_apply' makes use of an internal/private Okta API endpoint that could change without notice
     * rendering this resource inoperable.
     */
    alwaysApply?: pulumi.Input<boolean>;
    /**
     * When turned on this flag will trigger the provider to delete mapping properties that are not defined in config. By
     * default, we do not delete missing properties.
     */
    deleteWhenAbsent?: pulumi.Input<boolean>;
    mappings?: pulumi.Input<pulumi.Input<inputs.ProfileMappingMapping>[]>;
    /**
     * The source id of the mapping to manage.
     */
    sourceId: pulumi.Input<string>;
    /**
     * The target id of the mapping to manage.
     */
    targetId: pulumi.Input<string>;
}
