// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getAppSaml(args?: GetAppSamlArgs, opts?: pulumi.InvokeOptions): Promise<GetAppSamlResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("okta:index/getAppSaml:getAppSaml", {
        "activeOnly": args.activeOnly,
        "id": args.id,
        "label": args.label,
        "labelPrefix": args.labelPrefix,
        "requestCompressed": args.requestCompressed,
        "skipGroups": args.skipGroups,
        "skipUsers": args.skipUsers,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAppSaml.
 */
export interface GetAppSamlArgs {
    activeOnly?: boolean;
    id?: string;
    label?: string;
    labelPrefix?: string;
    requestCompressed?: boolean;
    /**
     * @deprecated Deprecated
     */
    skipGroups?: boolean;
    /**
     * @deprecated Deprecated
     */
    skipUsers?: boolean;
}

/**
 * A collection of values returned by getAppSaml.
 */
export interface GetAppSamlResult {
    readonly accessibilityErrorRedirectUrl: string;
    readonly accessibilityLoginRedirectUrl: string;
    readonly accessibilitySelfService: boolean;
    readonly acsEndpoints: string[];
    readonly activeOnly?: boolean;
    readonly appSettingsJson: string;
    readonly assertionSigned: boolean;
    readonly attributeStatements: outputs.GetAppSamlAttributeStatement[];
    readonly audience: string;
    readonly authnContextClassRef: string;
    readonly autoSubmitToolbar: boolean;
    readonly defaultRelayState: string;
    readonly destination: string;
    readonly digestAlgorithm: string;
    readonly features: string[];
    /**
     * @deprecated Deprecated
     */
    readonly groups: string[];
    readonly hideIos: boolean;
    readonly hideWeb: boolean;
    readonly honorForceAuthn: boolean;
    readonly id?: string;
    readonly idpIssuer: string;
    readonly inlineHookId: string;
    readonly keyId: string;
    readonly label?: string;
    readonly labelPrefix?: string;
    readonly links: string;
    readonly name: string;
    readonly recipient: string;
    readonly requestCompressed?: boolean;
    readonly responseSigned: boolean;
    readonly samlSignedRequestEnabled: boolean;
    readonly signatureAlgorithm: string;
    readonly singleLogoutCertificate: string;
    readonly singleLogoutIssuer: string;
    readonly singleLogoutUrl: string;
    /**
     * @deprecated Deprecated
     */
    readonly skipGroups?: boolean;
    /**
     * @deprecated Deprecated
     */
    readonly skipUsers?: boolean;
    readonly spIssuer: string;
    readonly ssoUrl: string;
    readonly status: string;
    readonly subjectNameIdFormat: string;
    readonly subjectNameIdTemplate: string;
    readonly userNameTemplate: string;
    readonly userNameTemplatePushStatus: string;
    readonly userNameTemplateSuffix: string;
    readonly userNameTemplateType: string;
    /**
     * @deprecated Deprecated
     */
    readonly users: string[];
}
export function getAppSamlOutput(args?: GetAppSamlOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAppSamlResult> {
    return pulumi.output(args).apply((a: any) => getAppSaml(a, opts))
}

/**
 * A collection of arguments for invoking getAppSaml.
 */
export interface GetAppSamlOutputArgs {
    activeOnly?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    labelPrefix?: pulumi.Input<string>;
    requestCompressed?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    skipGroups?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    skipUsers?: pulumi.Input<boolean>;
}
