// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Addresses extends pulumi.CustomResource {
    /**
     * Get an existing Addresses resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AddressesState, opts?: pulumi.CustomResourceOptions): Addresses {
        return new Addresses(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'versadirector:index/addresses:Addresses';

    /**
     * Returns true if the given object is an instance of Addresses.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Addresses {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Addresses.__pulumiType;
    }

    /**
     * List of addresses to be configured.
     */
    public readonly addresses!: pulumi.Output<outputs.AddressesAddress[]>;
    /**
     * Device name to be configured.
     */
    public readonly deviceName!: pulumi.Output<string>;
    public /*out*/ readonly lastUpdated!: pulumi.Output<string>;
    /**
     * Organization name for the device to be configured.
     */
    public readonly organizationName!: pulumi.Output<string>;

    /**
     * Create a Addresses resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AddressesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AddressesArgs | AddressesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AddressesState | undefined;
            resourceInputs["addresses"] = state ? state.addresses : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["organizationName"] = state ? state.organizationName : undefined;
        } else {
            const args = argsOrState as AddressesArgs | undefined;
            if ((!args || args.addresses === undefined) && !opts.urn) {
                throw new Error("Missing required property 'addresses'");
            }
            if ((!args || args.deviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deviceName'");
            }
            if ((!args || args.organizationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationName'");
            }
            resourceInputs["addresses"] = args ? args.addresses : undefined;
            resourceInputs["deviceName"] = args ? args.deviceName : undefined;
            resourceInputs["organizationName"] = args ? args.organizationName : undefined;
            resourceInputs["lastUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Addresses.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Addresses resources.
 */
export interface AddressesState {
    /**
     * List of addresses to be configured.
     */
    addresses?: pulumi.Input<pulumi.Input<inputs.AddressesAddress>[]>;
    /**
     * Device name to be configured.
     */
    deviceName?: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * Organization name for the device to be configured.
     */
    organizationName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Addresses resource.
 */
export interface AddressesArgs {
    /**
     * List of addresses to be configured.
     */
    addresses: pulumi.Input<pulumi.Input<inputs.AddressesAddress>[]>;
    /**
     * Device name to be configured.
     */
    deviceName: pulumi.Input<string>;
    /**
     * Organization name for the device to be configured.
     */
    organizationName: pulumi.Input<string>;
}
