// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Report extends pulumi.CustomResource {
    /**
     * Get an existing Report resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReportState, opts?: pulumi.CustomResourceOptions): Report {
        return new Report(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prismacloud:index/report:Report';

    /**
     * Returns true if the given object is an instance of Report.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Report {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Report.__pulumiType;
    }

    /**
     * Cloud type (Required parameter for Compliance report and Cloud Security Assessment report)
     */
    public readonly cloudType!: pulumi.Output<string | undefined>;
    /**
     * Compliance Standard ID
     */
    public /*out*/ readonly complianceStandardId!: pulumi.Output<string>;
    /**
     * Model for compliance aggregate count
     */
    public /*out*/ readonly counts!: pulumi.Output<outputs.ReportCount[]>;
    /**
     * Created by
     */
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    /**
     * Created on
     */
    public /*out*/ readonly createdOn!: pulumi.Output<number>;
    /**
     * Last modified by
     */
    public /*out*/ readonly lastModifiedBy!: pulumi.Output<string>;
    /**
     * Last modified on
     */
    public /*out*/ readonly lastModifiedOn!: pulumi.Output<number>;
    /**
     * Last scheduled
     */
    public /*out*/ readonly lastScheduled!: pulumi.Output<number>;
    /**
     * Report Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Next schedule
     */
    public /*out*/ readonly nextSchedule!: pulumi.Output<number>;
    /**
     * Report ID
     */
    public /*out*/ readonly reportId!: pulumi.Output<string>;
    /**
     * Report type
     */
    public readonly reportType!: pulumi.Output<string>;
    /**
     * Report status
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Model for report target
     */
    public readonly target!: pulumi.Output<outputs.ReportTarget>;
    /**
     * Total instance count
     */
    public /*out*/ readonly totalInstanceCount!: pulumi.Output<number>;

    /**
     * Create a Report resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ReportArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReportArgs | ReportState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ReportState | undefined;
            resourceInputs["cloudType"] = state ? state.cloudType : undefined;
            resourceInputs["complianceStandardId"] = state ? state.complianceStandardId : undefined;
            resourceInputs["counts"] = state ? state.counts : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["createdOn"] = state ? state.createdOn : undefined;
            resourceInputs["lastModifiedBy"] = state ? state.lastModifiedBy : undefined;
            resourceInputs["lastModifiedOn"] = state ? state.lastModifiedOn : undefined;
            resourceInputs["lastScheduled"] = state ? state.lastScheduled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nextSchedule"] = state ? state.nextSchedule : undefined;
            resourceInputs["reportId"] = state ? state.reportId : undefined;
            resourceInputs["reportType"] = state ? state.reportType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
            resourceInputs["totalInstanceCount"] = state ? state.totalInstanceCount : undefined;
        } else {
            const args = argsOrState as ReportArgs | undefined;
            if ((!args || args.reportType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'reportType'");
            }
            if ((!args || args.target === undefined) && !opts.urn) {
                throw new Error("Missing required property 'target'");
            }
            resourceInputs["cloudType"] = args ? args.cloudType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["reportType"] = args ? args.reportType : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["complianceStandardId"] = undefined /*out*/;
            resourceInputs["counts"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["lastModifiedBy"] = undefined /*out*/;
            resourceInputs["lastModifiedOn"] = undefined /*out*/;
            resourceInputs["lastScheduled"] = undefined /*out*/;
            resourceInputs["nextSchedule"] = undefined /*out*/;
            resourceInputs["reportId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["totalInstanceCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Report.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Report resources.
 */
export interface ReportState {
    /**
     * Cloud type (Required parameter for Compliance report and Cloud Security Assessment report)
     */
    cloudType?: pulumi.Input<string>;
    /**
     * Compliance Standard ID
     */
    complianceStandardId?: pulumi.Input<string>;
    /**
     * Model for compliance aggregate count
     */
    counts?: pulumi.Input<pulumi.Input<inputs.ReportCount>[]>;
    /**
     * Created by
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Created on
     */
    createdOn?: pulumi.Input<number>;
    /**
     * Last modified by
     */
    lastModifiedBy?: pulumi.Input<string>;
    /**
     * Last modified on
     */
    lastModifiedOn?: pulumi.Input<number>;
    /**
     * Last scheduled
     */
    lastScheduled?: pulumi.Input<number>;
    /**
     * Report Name
     */
    name?: pulumi.Input<string>;
    /**
     * Next schedule
     */
    nextSchedule?: pulumi.Input<number>;
    /**
     * Report ID
     */
    reportId?: pulumi.Input<string>;
    /**
     * Report type
     */
    reportType?: pulumi.Input<string>;
    /**
     * Report status
     */
    status?: pulumi.Input<string>;
    /**
     * Model for report target
     */
    target?: pulumi.Input<inputs.ReportTarget>;
    /**
     * Total instance count
     */
    totalInstanceCount?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Report resource.
 */
export interface ReportArgs {
    /**
     * Cloud type (Required parameter for Compliance report and Cloud Security Assessment report)
     */
    cloudType?: pulumi.Input<string>;
    /**
     * Report Name
     */
    name?: pulumi.Input<string>;
    /**
     * Report type
     */
    reportType: pulumi.Input<string>;
    /**
     * Model for report target
     */
    target: pulumi.Input<inputs.ReportTarget>;
}
