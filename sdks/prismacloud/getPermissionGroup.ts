// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getPermissionGroup(args?: GetPermissionGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetPermissionGroupResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("prismacloud:index/getPermissionGroup:getPermissionGroup", {
        "id": args.id,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPermissionGroup.
 */
export interface GetPermissionGroupArgs {
    id?: string;
    name?: string;
}

/**
 * A collection of values returned by getPermissionGroup.
 */
export interface GetPermissionGroupResult {
    readonly acceptAccountGroups: boolean;
    readonly acceptCodeRepositories: boolean;
    readonly acceptResourceLists: boolean;
    readonly associatedRoles: {[key: string]: string};
    readonly custom: boolean;
    readonly description: string;
    readonly features: outputs.GetPermissionGroupFeature[];
    readonly id: string;
    readonly lastModifiedBy: string;
    readonly lastModifiedTs: number;
    readonly name: string;
    readonly permissionGroupType: string;
}
export function getPermissionGroupOutput(args?: GetPermissionGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPermissionGroupResult> {
    return pulumi.output(args).apply((a: any) => getPermissionGroup(a, opts))
}

/**
 * A collection of arguments for invoking getPermissionGroup.
 */
export interface GetPermissionGroupOutputArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}
