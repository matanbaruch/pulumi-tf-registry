// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class UserProfile extends pulumi.CustomResource {
    /**
     * Get an existing UserProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserProfileState, opts?: pulumi.CustomResourceOptions): UserProfile {
        return new UserProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prismacloud:index/userProfile:UserProfile';

    /**
     * Returns true if the given object is an instance of UserProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserProfile.__pulumiType;
    }

    /**
     * Access key expiration timestamp in milliseconds
     */
    public readonly accessKeyExpiration!: pulumi.Output<number | undefined>;
    /**
     * Access key ID
     */
    public /*out*/ readonly accessKeyId!: pulumi.Output<string>;
    /**
     * Access key name
     */
    public readonly accessKeyName!: pulumi.Output<string | undefined>;
    /**
     * Access keys allowed
     */
    public readonly accessKeysAllowed!: pulumi.Output<boolean>;
    /**
     * Access key count
     */
    public /*out*/ readonly accessKeysCount!: pulumi.Output<number>;
    /**
     * Account Type
     */
    public readonly accountType!: pulumi.Output<string | undefined>;
    /**
     * Default Role ID
     */
    public readonly defaultRoleId!: pulumi.Output<string>;
    /**
     * Display name
     */
    public /*out*/ readonly displayName!: pulumi.Output<string>;
    /**
     * Email ID
     */
    public readonly email!: pulumi.Output<string | undefined>;
    /**
     * Enable access key expiration
     */
    public readonly enableKeyExpiration!: pulumi.Output<boolean | undefined>;
    /**
     * Enabled
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * First name
     */
    public readonly firstName!: pulumi.Output<string | undefined>;
    /**
     * Last login time
     */
    public /*out*/ readonly lastLoginTs!: pulumi.Output<number>;
    /**
     * Last modified by
     */
    public /*out*/ readonly lastModifiedBy!: pulumi.Output<string>;
    /**
     * Last modified timestamp
     */
    public /*out*/ readonly lastModifiedTs!: pulumi.Output<number>;
    /**
     * Last name
     */
    public readonly lastName!: pulumi.Output<string | undefined>;
    /**
     * Profile ID
     */
    public /*out*/ readonly profileId!: pulumi.Output<string>;
    /**
     * List of Role IDs
     */
    public readonly roleIds!: pulumi.Output<string[]>;
    /**
     * Model for User Profile Roles Details
     */
    public /*out*/ readonly roles!: pulumi.Output<outputs.UserProfileRole[]>;
    /**
     * Access key secret
     */
    public /*out*/ readonly secretKey!: pulumi.Output<string>;
    /**
     * Time zone (e.g. America/Los_Angeles)
     */
    public readonly timeZone!: pulumi.Output<string>;
    /**
     * User email or service account name
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a UserProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserProfileArgs | UserProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserProfileState | undefined;
            resourceInputs["accessKeyExpiration"] = state ? state.accessKeyExpiration : undefined;
            resourceInputs["accessKeyId"] = state ? state.accessKeyId : undefined;
            resourceInputs["accessKeyName"] = state ? state.accessKeyName : undefined;
            resourceInputs["accessKeysAllowed"] = state ? state.accessKeysAllowed : undefined;
            resourceInputs["accessKeysCount"] = state ? state.accessKeysCount : undefined;
            resourceInputs["accountType"] = state ? state.accountType : undefined;
            resourceInputs["defaultRoleId"] = state ? state.defaultRoleId : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["enableKeyExpiration"] = state ? state.enableKeyExpiration : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["firstName"] = state ? state.firstName : undefined;
            resourceInputs["lastLoginTs"] = state ? state.lastLoginTs : undefined;
            resourceInputs["lastModifiedBy"] = state ? state.lastModifiedBy : undefined;
            resourceInputs["lastModifiedTs"] = state ? state.lastModifiedTs : undefined;
            resourceInputs["lastName"] = state ? state.lastName : undefined;
            resourceInputs["profileId"] = state ? state.profileId : undefined;
            resourceInputs["roleIds"] = state ? state.roleIds : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["secretKey"] = state ? state.secretKey : undefined;
            resourceInputs["timeZone"] = state ? state.timeZone : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as UserProfileArgs | undefined;
            if ((!args || args.defaultRoleId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultRoleId'");
            }
            if ((!args || args.roleIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleIds'");
            }
            if ((!args || args.timeZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeZone'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["accessKeyExpiration"] = args ? args.accessKeyExpiration : undefined;
            resourceInputs["accessKeyName"] = args ? args.accessKeyName : undefined;
            resourceInputs["accessKeysAllowed"] = args ? args.accessKeysAllowed : undefined;
            resourceInputs["accountType"] = args ? args.accountType : undefined;
            resourceInputs["defaultRoleId"] = args ? args.defaultRoleId : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["enableKeyExpiration"] = args ? args.enableKeyExpiration : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["firstName"] = args ? args.firstName : undefined;
            resourceInputs["lastName"] = args ? args.lastName : undefined;
            resourceInputs["roleIds"] = args ? args.roleIds : undefined;
            resourceInputs["timeZone"] = args ? args.timeZone : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["accessKeyId"] = undefined /*out*/;
            resourceInputs["accessKeysCount"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["lastLoginTs"] = undefined /*out*/;
            resourceInputs["lastModifiedBy"] = undefined /*out*/;
            resourceInputs["lastModifiedTs"] = undefined /*out*/;
            resourceInputs["profileId"] = undefined /*out*/;
            resourceInputs["roles"] = undefined /*out*/;
            resourceInputs["secretKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering UserProfile resources.
 */
export interface UserProfileState {
    /**
     * Access key expiration timestamp in milliseconds
     */
    accessKeyExpiration?: pulumi.Input<number>;
    /**
     * Access key ID
     */
    accessKeyId?: pulumi.Input<string>;
    /**
     * Access key name
     */
    accessKeyName?: pulumi.Input<string>;
    /**
     * Access keys allowed
     */
    accessKeysAllowed?: pulumi.Input<boolean>;
    /**
     * Access key count
     */
    accessKeysCount?: pulumi.Input<number>;
    /**
     * Account Type
     */
    accountType?: pulumi.Input<string>;
    /**
     * Default Role ID
     */
    defaultRoleId?: pulumi.Input<string>;
    /**
     * Display name
     */
    displayName?: pulumi.Input<string>;
    /**
     * Email ID
     */
    email?: pulumi.Input<string>;
    /**
     * Enable access key expiration
     */
    enableKeyExpiration?: pulumi.Input<boolean>;
    /**
     * Enabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * First name
     */
    firstName?: pulumi.Input<string>;
    /**
     * Last login time
     */
    lastLoginTs?: pulumi.Input<number>;
    /**
     * Last modified by
     */
    lastModifiedBy?: pulumi.Input<string>;
    /**
     * Last modified timestamp
     */
    lastModifiedTs?: pulumi.Input<number>;
    /**
     * Last name
     */
    lastName?: pulumi.Input<string>;
    /**
     * Profile ID
     */
    profileId?: pulumi.Input<string>;
    /**
     * List of Role IDs
     */
    roleIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Model for User Profile Roles Details
     */
    roles?: pulumi.Input<pulumi.Input<inputs.UserProfileRole>[]>;
    /**
     * Access key secret
     */
    secretKey?: pulumi.Input<string>;
    /**
     * Time zone (e.g. America/Los_Angeles)
     */
    timeZone?: pulumi.Input<string>;
    /**
     * User email or service account name
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserProfile resource.
 */
export interface UserProfileArgs {
    /**
     * Access key expiration timestamp in milliseconds
     */
    accessKeyExpiration?: pulumi.Input<number>;
    /**
     * Access key name
     */
    accessKeyName?: pulumi.Input<string>;
    /**
     * Access keys allowed
     */
    accessKeysAllowed?: pulumi.Input<boolean>;
    /**
     * Account Type
     */
    accountType?: pulumi.Input<string>;
    /**
     * Default Role ID
     */
    defaultRoleId: pulumi.Input<string>;
    /**
     * Email ID
     */
    email?: pulumi.Input<string>;
    /**
     * Enable access key expiration
     */
    enableKeyExpiration?: pulumi.Input<boolean>;
    /**
     * Enabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * First name
     */
    firstName?: pulumi.Input<string>;
    /**
     * Last name
     */
    lastName?: pulumi.Input<string>;
    /**
     * List of Role IDs
     */
    roleIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Time zone (e.g. America/Los_Angeles)
     */
    timeZone: pulumi.Input<string>;
    /**
     * User email or service account name
     */
    username: pulumi.Input<string>;
}
