// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Datapattern extends pulumi.CustomResource {
    /**
     * Get an existing Datapattern resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatapatternState, opts?: pulumi.CustomResourceOptions): Datapattern {
        return new Datapattern(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prismacloud:index/datapattern:Datapattern';

    /**
     * Returns true if the given object is an instance of Datapattern.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Datapattern {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Datapattern.__pulumiType;
    }

    /**
     * Created by
     */
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    /**
     * Pattern description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Detection technique
     */
    public readonly detectionTechnique!: pulumi.Output<string | undefined>;
    /**
     * Entity value
     */
    public /*out*/ readonly entity!: pulumi.Output<string>;
    /**
     * Grammar value
     */
    public /*out*/ readonly grammar!: pulumi.Output<string>;
    /**
     * Is editable
     */
    public /*out*/ readonly isEditable!: pulumi.Output<boolean>;
    /**
     * Mode - predefined or custom
     */
    public /*out*/ readonly mode!: pulumi.Output<string>;
    /**
     * Pattern name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Parent ID
     */
    public /*out*/ readonly parentId!: pulumi.Output<string>;
    /**
     * Pattern ID
     */
    public /*out*/ readonly patternId!: pulumi.Output<string>;
    /**
     * List of proximity keywords
     */
    public readonly proximityKeywords!: pulumi.Output<string[] | undefined>;
    /**
     * List of regexes
     */
    public readonly regexes!: pulumi.Output<outputs.DatapatternRegex[]>;
    /**
     * Root type
     */
    public /*out*/ readonly rootType!: pulumi.Output<string>;
    /**
     * S3 path
     */
    public /*out*/ readonly s3Path!: pulumi.Output<string>;
    /**
     * Last updated at
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<number>;
    /**
     * Updated by
     */
    public /*out*/ readonly updatedBy!: pulumi.Output<string>;

    /**
     * Create a Datapattern resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatapatternArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatapatternArgs | DatapatternState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatapatternState | undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["detectionTechnique"] = state ? state.detectionTechnique : undefined;
            resourceInputs["entity"] = state ? state.entity : undefined;
            resourceInputs["grammar"] = state ? state.grammar : undefined;
            resourceInputs["isEditable"] = state ? state.isEditable : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentId"] = state ? state.parentId : undefined;
            resourceInputs["patternId"] = state ? state.patternId : undefined;
            resourceInputs["proximityKeywords"] = state ? state.proximityKeywords : undefined;
            resourceInputs["regexes"] = state ? state.regexes : undefined;
            resourceInputs["rootType"] = state ? state.rootType : undefined;
            resourceInputs["s3Path"] = state ? state.s3Path : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["updatedBy"] = state ? state.updatedBy : undefined;
        } else {
            const args = argsOrState as DatapatternArgs | undefined;
            if ((!args || args.regexes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regexes'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["detectionTechnique"] = args ? args.detectionTechnique : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["proximityKeywords"] = args ? args.proximityKeywords : undefined;
            resourceInputs["regexes"] = args ? args.regexes : undefined;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["entity"] = undefined /*out*/;
            resourceInputs["grammar"] = undefined /*out*/;
            resourceInputs["isEditable"] = undefined /*out*/;
            resourceInputs["mode"] = undefined /*out*/;
            resourceInputs["parentId"] = undefined /*out*/;
            resourceInputs["patternId"] = undefined /*out*/;
            resourceInputs["rootType"] = undefined /*out*/;
            resourceInputs["s3Path"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["updatedBy"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Datapattern.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Datapattern resources.
 */
export interface DatapatternState {
    /**
     * Created by
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Pattern description
     */
    description?: pulumi.Input<string>;
    /**
     * Detection technique
     */
    detectionTechnique?: pulumi.Input<string>;
    /**
     * Entity value
     */
    entity?: pulumi.Input<string>;
    /**
     * Grammar value
     */
    grammar?: pulumi.Input<string>;
    /**
     * Is editable
     */
    isEditable?: pulumi.Input<boolean>;
    /**
     * Mode - predefined or custom
     */
    mode?: pulumi.Input<string>;
    /**
     * Pattern name
     */
    name?: pulumi.Input<string>;
    /**
     * Parent ID
     */
    parentId?: pulumi.Input<string>;
    /**
     * Pattern ID
     */
    patternId?: pulumi.Input<string>;
    /**
     * List of proximity keywords
     */
    proximityKeywords?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of regexes
     */
    regexes?: pulumi.Input<pulumi.Input<inputs.DatapatternRegex>[]>;
    /**
     * Root type
     */
    rootType?: pulumi.Input<string>;
    /**
     * S3 path
     */
    s3Path?: pulumi.Input<string>;
    /**
     * Last updated at
     */
    updatedAt?: pulumi.Input<number>;
    /**
     * Updated by
     */
    updatedBy?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Datapattern resource.
 */
export interface DatapatternArgs {
    /**
     * Pattern description
     */
    description?: pulumi.Input<string>;
    /**
     * Detection technique
     */
    detectionTechnique?: pulumi.Input<string>;
    /**
     * Pattern name
     */
    name?: pulumi.Input<string>;
    /**
     * List of proximity keywords
     */
    proximityKeywords?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of regexes
     */
    regexes: pulumi.Input<pulumi.Input<inputs.DatapatternRegex>[]>;
}
