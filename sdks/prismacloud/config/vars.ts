// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("prismacloud");

/**
 * Customer name
 */
export declare const customerName: string | undefined;
Object.defineProperty(exports, "customerName", {
    get() {
        return __config.get("customerName");
    },
    enumerable: true,
});

/**
 * Disable reconnecting on JWT expiration
 */
export declare const disableReconnect: boolean | undefined;
Object.defineProperty(exports, "disableReconnect", {
    get() {
        return __config.getObject<boolean>("disableReconnect");
    },
    enumerable: true,
});

/**
 * Retrieve the provider configuration from this JSON file
 */
export declare const jsonConfigFile: string | undefined;
Object.defineProperty(exports, "jsonConfigFile", {
    get() {
        return __config.get("jsonConfigFile");
    },
    enumerable: true,
});

/**
 * JSON web token to use
 */
export declare const jsonWebToken: string | undefined;
Object.defineProperty(exports, "jsonWebToken", {
    get() {
        return __config.get("jsonWebToken");
    },
    enumerable: true,
});

/**
 * Logging options for the API connection
 */
export declare const logging: {[key: string]: boolean} | undefined;
Object.defineProperty(exports, "logging", {
    get() {
        return __config.getObject<{[key: string]: boolean}>("logging");
    },
    enumerable: true,
});

/**
 * Maximum number of retries to be performed in case of rate limit
 */
export declare const maxRetries: number | undefined;
Object.defineProperty(exports, "maxRetries", {
    get() {
        return __config.getObject<number>("maxRetries");
    },
    enumerable: true,
});

/**
 * Secret key
 */
export declare const password: string | undefined;
Object.defineProperty(exports, "password", {
    get() {
        return __config.get("password");
    },
    enumerable: true,
});

/**
 * If the port is non-standard for the protocol, the port number to use
 */
export declare const port: number | undefined;
Object.defineProperty(exports, "port", {
    get() {
        return __config.getObject<number>("port");
    },
    enumerable: true,
});

/**
 * The protocol (https or http)
 */
export declare const protocol: string | undefined;
Object.defineProperty(exports, "protocol", {
    get() {
        return __config.get("protocol");
    },
    enumerable: true,
});

/**
 * Maximum delay for exponential backoff strategy
 */
export declare const retryMaxDelay: number | undefined;
Object.defineProperty(exports, "retryMaxDelay", {
    get() {
        return __config.getObject<number>("retryMaxDelay");
    },
    enumerable: true,
});

/**
 * Retry type
 */
export declare const retryType: string | undefined;
Object.defineProperty(exports, "retryType", {
    get() {
        return __config.get("retryType");
    },
    enumerable: true,
});

/**
 * Skip SSL certificate verification
 */
export declare const skipSslCertVerification: boolean | undefined;
Object.defineProperty(exports, "skipSslCertVerification", {
    get() {
        return __config.getObject<boolean>("skipSslCertVerification");
    },
    enumerable: true,
});

/**
 * The timeout in seconds for all communications with Prisma Cloud
 */
export declare const timeout: number | undefined;
Object.defineProperty(exports, "timeout", {
    get() {
        return __config.getObject<number>("timeout");
    },
    enumerable: true,
});

/**
 * The API URL without the leading protocol
 */
export declare const url: string | undefined;
Object.defineProperty(exports, "url", {
    get() {
        return __config.get("url");
    },
    enumerable: true,
});

/**
 * Access key ID
 */
export declare const username: string | undefined;
Object.defineProperty(exports, "username", {
    get() {
        return __config.get("username");
    },
    enumerable: true,
});

