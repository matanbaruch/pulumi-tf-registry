// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RqlSearch extends pulumi.CustomResource {
    /**
     * Get an existing RqlSearch resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RqlSearchState, opts?: pulumi.CustomResourceOptions): RqlSearch {
        return new RqlSearch(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prismacloud:index/rqlSearch:RqlSearch';

    /**
     * Returns true if the given object is an instance of RqlSearch.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RqlSearch {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RqlSearch.__pulumiType;
    }

    /**
     * The cloud type
     */
    public /*out*/ readonly cloudType!: pulumi.Output<string>;
    /**
     * List of config data structs
     */
    public /*out*/ readonly configDatas!: pulumi.Output<outputs.RqlSearchConfigData[]>;
    /**
     * The description
     */
    public /*out*/ readonly description!: pulumi.Output<string>;
    /**
     * List of event data structs
     */
    public /*out*/ readonly eventDatas!: pulumi.Output<outputs.RqlSearchEventData[]>;
    /**
     * Group by
     */
    public /*out*/ readonly groupBies!: pulumi.Output<string[]>;
    /**
     * List of iam data structs
     */
    public /*out*/ readonly iamDatas!: pulumi.Output<outputs.RqlSearchIamData[]>;
    /**
     * Limit results
     */
    public readonly limit!: pulumi.Output<number | undefined>;
    /**
     * The search name
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * List of network data structs
     */
    public /*out*/ readonly networkDatas!: pulumi.Output<outputs.RqlSearchNetworkData[]>;
    /**
     * The RQL search to perform
     */
    public readonly query!: pulumi.Output<string>;
    /**
     * Is search saved
     */
    public /*out*/ readonly saved!: pulumi.Output<boolean>;
    /**
     * The search ID
     */
    public readonly searchId!: pulumi.Output<string>;
    /**
     * The search type
     */
    public readonly searchType!: pulumi.Output<string | undefined>;
    /**
     * Skip search results in response
     */
    public readonly skipResult!: pulumi.Output<boolean | undefined>;
    /**
     * The time range spec
     */
    public readonly timeRange!: pulumi.Output<outputs.RqlSearchTimeRange | undefined>;

    /**
     * Create a RqlSearch resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RqlSearchArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RqlSearchArgs | RqlSearchState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RqlSearchState | undefined;
            resourceInputs["cloudType"] = state ? state.cloudType : undefined;
            resourceInputs["configDatas"] = state ? state.configDatas : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["eventDatas"] = state ? state.eventDatas : undefined;
            resourceInputs["groupBies"] = state ? state.groupBies : undefined;
            resourceInputs["iamDatas"] = state ? state.iamDatas : undefined;
            resourceInputs["limit"] = state ? state.limit : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkDatas"] = state ? state.networkDatas : undefined;
            resourceInputs["query"] = state ? state.query : undefined;
            resourceInputs["saved"] = state ? state.saved : undefined;
            resourceInputs["searchId"] = state ? state.searchId : undefined;
            resourceInputs["searchType"] = state ? state.searchType : undefined;
            resourceInputs["skipResult"] = state ? state.skipResult : undefined;
            resourceInputs["timeRange"] = state ? state.timeRange : undefined;
        } else {
            const args = argsOrState as RqlSearchArgs | undefined;
            if ((!args || args.query === undefined) && !opts.urn) {
                throw new Error("Missing required property 'query'");
            }
            resourceInputs["limit"] = args ? args.limit : undefined;
            resourceInputs["query"] = args ? args.query : undefined;
            resourceInputs["searchId"] = args ? args.searchId : undefined;
            resourceInputs["searchType"] = args ? args.searchType : undefined;
            resourceInputs["skipResult"] = args ? args.skipResult : undefined;
            resourceInputs["timeRange"] = args ? args.timeRange : undefined;
            resourceInputs["cloudType"] = undefined /*out*/;
            resourceInputs["configDatas"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["eventDatas"] = undefined /*out*/;
            resourceInputs["groupBies"] = undefined /*out*/;
            resourceInputs["iamDatas"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["networkDatas"] = undefined /*out*/;
            resourceInputs["saved"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RqlSearch.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RqlSearch resources.
 */
export interface RqlSearchState {
    /**
     * The cloud type
     */
    cloudType?: pulumi.Input<string>;
    /**
     * List of config data structs
     */
    configDatas?: pulumi.Input<pulumi.Input<inputs.RqlSearchConfigData>[]>;
    /**
     * The description
     */
    description?: pulumi.Input<string>;
    /**
     * List of event data structs
     */
    eventDatas?: pulumi.Input<pulumi.Input<inputs.RqlSearchEventData>[]>;
    /**
     * Group by
     */
    groupBies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of iam data structs
     */
    iamDatas?: pulumi.Input<pulumi.Input<inputs.RqlSearchIamData>[]>;
    /**
     * Limit results
     */
    limit?: pulumi.Input<number>;
    /**
     * The search name
     */
    name?: pulumi.Input<string>;
    /**
     * List of network data structs
     */
    networkDatas?: pulumi.Input<pulumi.Input<inputs.RqlSearchNetworkData>[]>;
    /**
     * The RQL search to perform
     */
    query?: pulumi.Input<string>;
    /**
     * Is search saved
     */
    saved?: pulumi.Input<boolean>;
    /**
     * The search ID
     */
    searchId?: pulumi.Input<string>;
    /**
     * The search type
     */
    searchType?: pulumi.Input<string>;
    /**
     * Skip search results in response
     */
    skipResult?: pulumi.Input<boolean>;
    /**
     * The time range spec
     */
    timeRange?: pulumi.Input<inputs.RqlSearchTimeRange>;
}

/**
 * The set of arguments for constructing a RqlSearch resource.
 */
export interface RqlSearchArgs {
    /**
     * Limit results
     */
    limit?: pulumi.Input<number>;
    /**
     * The RQL search to perform
     */
    query: pulumi.Input<string>;
    /**
     * The search ID
     */
    searchId?: pulumi.Input<string>;
    /**
     * The search type
     */
    searchType?: pulumi.Input<string>;
    /**
     * Skip search results in response
     */
    skipResult?: pulumi.Input<boolean>;
    /**
     * The time range spec
     */
    timeRange?: pulumi.Input<inputs.RqlSearchTimeRange>;
}
