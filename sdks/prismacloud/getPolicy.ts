// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getPolicy(args?: GetPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetPolicyResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("prismacloud:index/getPolicy:getPolicy", {
        "id": args.id,
        "name": args.name,
        "policyId": args.policyId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getPolicy.
 */
export interface GetPolicyArgs {
    id?: string;
    name?: string;
    policyId?: string;
}

/**
 * A collection of values returned by getPolicy.
 */
export interface GetPolicyResult {
    readonly cloudType: string;
    readonly complianceMetadatas: outputs.GetPolicyComplianceMetadata[];
    readonly createdBy: string;
    readonly createdOn: number;
    readonly deleted: boolean;
    readonly description: string;
    readonly enabled: boolean;
    readonly id: string;
    readonly labels: string[];
    readonly lastModifiedBy: string;
    readonly lastModifiedOn: number;
    readonly name: string;
    readonly openAlertsCount: number;
    readonly overridden: boolean;
    readonly owner: string;
    readonly policyCategory: string;
    readonly policyClass: string;
    readonly policyId: string;
    readonly policyMode: string;
    readonly policySubtypes: string[];
    readonly policyType: string;
    readonly recommendation: string;
    readonly remediable: boolean;
    readonly remediations: outputs.GetPolicyRemediation[];
    readonly restrictAlertDismissal: boolean;
    readonly ruleLastModifiedOn: number;
    readonly rules: outputs.GetPolicyRule[];
    readonly severity: string;
    readonly systemDefault: boolean;
}
export function getPolicyOutput(args?: GetPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPolicyResult> {
    return pulumi.output(args).apply((a: any) => getPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getPolicy.
 */
export interface GetPolicyOutputArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    policyId?: pulumi.Input<string>;
}
