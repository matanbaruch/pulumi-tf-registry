// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AlertRule extends pulumi.CustomResource {
    /**
     * Get an existing AlertRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertRuleState, opts?: pulumi.CustomResourceOptions): AlertRule {
        return new AlertRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prismacloud:index/alertRule:AlertRule';

    /**
     * Returns true if the given object is an instance of AlertRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlertRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlertRule.__pulumiType;
    }

    /**
     * Allow auto-remediation
     */
    public readonly allowAutoRemediate!: pulumi.Output<boolean | undefined>;
    /**
     * Delay notifications by the specified milliseconds
     */
    public readonly delayNotificationMs!: pulumi.Output<number | undefined>;
    /**
     * Deleted
     */
    public readonly deleted!: pulumi.Output<boolean | undefined>;
    /**
     * Description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Enabled
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * List of policies to exclude from scan
     */
    public readonly excludedPolicies!: pulumi.Output<string[] | undefined>;
    /**
     * Last modified by
     */
    public /*out*/ readonly lastModifiedBy!: pulumi.Output<string>;
    /**
     * Last modified on
     */
    public /*out*/ readonly lastModifiedOn!: pulumi.Output<number>;
    /**
     * Rule/Scan name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * List of notification channels
     */
    public /*out*/ readonly notificationChannels!: pulumi.Output<string[]>;
    /**
     * List of data for notifications to third-party tools
     */
    public readonly notificationConfigs!: pulumi.Output<outputs.AlertRuleNotificationConfig[] | undefined>;
    /**
     * Include dismissed alerts in notification
     */
    public readonly notifyOnDismissed!: pulumi.Output<boolean | undefined>;
    /**
     * Include open alerts in notification
     */
    public readonly notifyOnOpen!: pulumi.Output<boolean | undefined>;
    /**
     * Include resolved alerts in notification
     */
    public readonly notifyOnResolved!: pulumi.Output<boolean | undefined>;
    /**
     * Include snoozed alerts in notification
     */
    public readonly notifyOnSnoozed!: pulumi.Output<boolean | undefined>;
    /**
     * Open alerts count
     */
    public /*out*/ readonly openAlertsCount!: pulumi.Output<number>;
    /**
     * Owner
     */
    public /*out*/ readonly owner!: pulumi.Output<string>;
    /**
     * List of specific policies to scan
     */
    public readonly policies!: pulumi.Output<string[] | undefined>;
    /**
     * Policy labels
     */
    public readonly policyLabels!: pulumi.Output<string[] | undefined>;
    /**
     * Policy scan config ID
     */
    public /*out*/ readonly policyScanConfigId!: pulumi.Output<string>;
    /**
     * Read only
     */
    public /*out*/ readonly readOnly!: pulumi.Output<boolean>;
    /**
     * Scan all policies
     */
    public readonly scanAll!: pulumi.Output<boolean | undefined>;
    /**
     * Model for the target filter
     */
    public readonly target!: pulumi.Output<outputs.AlertRuleTarget>;

    /**
     * Create a AlertRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlertRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertRuleArgs | AlertRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlertRuleState | undefined;
            resourceInputs["allowAutoRemediate"] = state ? state.allowAutoRemediate : undefined;
            resourceInputs["delayNotificationMs"] = state ? state.delayNotificationMs : undefined;
            resourceInputs["deleted"] = state ? state.deleted : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["excludedPolicies"] = state ? state.excludedPolicies : undefined;
            resourceInputs["lastModifiedBy"] = state ? state.lastModifiedBy : undefined;
            resourceInputs["lastModifiedOn"] = state ? state.lastModifiedOn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationChannels"] = state ? state.notificationChannels : undefined;
            resourceInputs["notificationConfigs"] = state ? state.notificationConfigs : undefined;
            resourceInputs["notifyOnDismissed"] = state ? state.notifyOnDismissed : undefined;
            resourceInputs["notifyOnOpen"] = state ? state.notifyOnOpen : undefined;
            resourceInputs["notifyOnResolved"] = state ? state.notifyOnResolved : undefined;
            resourceInputs["notifyOnSnoozed"] = state ? state.notifyOnSnoozed : undefined;
            resourceInputs["openAlertsCount"] = state ? state.openAlertsCount : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
            resourceInputs["policyLabels"] = state ? state.policyLabels : undefined;
            resourceInputs["policyScanConfigId"] = state ? state.policyScanConfigId : undefined;
            resourceInputs["readOnly"] = state ? state.readOnly : undefined;
            resourceInputs["scanAll"] = state ? state.scanAll : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
        } else {
            const args = argsOrState as AlertRuleArgs | undefined;
            if ((!args || args.target === undefined) && !opts.urn) {
                throw new Error("Missing required property 'target'");
            }
            resourceInputs["allowAutoRemediate"] = args ? args.allowAutoRemediate : undefined;
            resourceInputs["delayNotificationMs"] = args ? args.delayNotificationMs : undefined;
            resourceInputs["deleted"] = args ? args.deleted : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["excludedPolicies"] = args ? args.excludedPolicies : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationConfigs"] = args ? args.notificationConfigs : undefined;
            resourceInputs["notifyOnDismissed"] = args ? args.notifyOnDismissed : undefined;
            resourceInputs["notifyOnOpen"] = args ? args.notifyOnOpen : undefined;
            resourceInputs["notifyOnResolved"] = args ? args.notifyOnResolved : undefined;
            resourceInputs["notifyOnSnoozed"] = args ? args.notifyOnSnoozed : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
            resourceInputs["policyLabels"] = args ? args.policyLabels : undefined;
            resourceInputs["scanAll"] = args ? args.scanAll : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["lastModifiedBy"] = undefined /*out*/;
            resourceInputs["lastModifiedOn"] = undefined /*out*/;
            resourceInputs["notificationChannels"] = undefined /*out*/;
            resourceInputs["openAlertsCount"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["policyScanConfigId"] = undefined /*out*/;
            resourceInputs["readOnly"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlertRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AlertRule resources.
 */
export interface AlertRuleState {
    /**
     * Allow auto-remediation
     */
    allowAutoRemediate?: pulumi.Input<boolean>;
    /**
     * Delay notifications by the specified milliseconds
     */
    delayNotificationMs?: pulumi.Input<number>;
    /**
     * Deleted
     */
    deleted?: pulumi.Input<boolean>;
    /**
     * Description
     */
    description?: pulumi.Input<string>;
    /**
     * Enabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of policies to exclude from scan
     */
    excludedPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Last modified by
     */
    lastModifiedBy?: pulumi.Input<string>;
    /**
     * Last modified on
     */
    lastModifiedOn?: pulumi.Input<number>;
    /**
     * Rule/Scan name
     */
    name?: pulumi.Input<string>;
    /**
     * List of notification channels
     */
    notificationChannels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of data for notifications to third-party tools
     */
    notificationConfigs?: pulumi.Input<pulumi.Input<inputs.AlertRuleNotificationConfig>[]>;
    /**
     * Include dismissed alerts in notification
     */
    notifyOnDismissed?: pulumi.Input<boolean>;
    /**
     * Include open alerts in notification
     */
    notifyOnOpen?: pulumi.Input<boolean>;
    /**
     * Include resolved alerts in notification
     */
    notifyOnResolved?: pulumi.Input<boolean>;
    /**
     * Include snoozed alerts in notification
     */
    notifyOnSnoozed?: pulumi.Input<boolean>;
    /**
     * Open alerts count
     */
    openAlertsCount?: pulumi.Input<number>;
    /**
     * Owner
     */
    owner?: pulumi.Input<string>;
    /**
     * List of specific policies to scan
     */
    policies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Policy labels
     */
    policyLabels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Policy scan config ID
     */
    policyScanConfigId?: pulumi.Input<string>;
    /**
     * Read only
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * Scan all policies
     */
    scanAll?: pulumi.Input<boolean>;
    /**
     * Model for the target filter
     */
    target?: pulumi.Input<inputs.AlertRuleTarget>;
}

/**
 * The set of arguments for constructing a AlertRule resource.
 */
export interface AlertRuleArgs {
    /**
     * Allow auto-remediation
     */
    allowAutoRemediate?: pulumi.Input<boolean>;
    /**
     * Delay notifications by the specified milliseconds
     */
    delayNotificationMs?: pulumi.Input<number>;
    /**
     * Deleted
     */
    deleted?: pulumi.Input<boolean>;
    /**
     * Description
     */
    description?: pulumi.Input<string>;
    /**
     * Enabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of policies to exclude from scan
     */
    excludedPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Rule/Scan name
     */
    name?: pulumi.Input<string>;
    /**
     * List of data for notifications to third-party tools
     */
    notificationConfigs?: pulumi.Input<pulumi.Input<inputs.AlertRuleNotificationConfig>[]>;
    /**
     * Include dismissed alerts in notification
     */
    notifyOnDismissed?: pulumi.Input<boolean>;
    /**
     * Include open alerts in notification
     */
    notifyOnOpen?: pulumi.Input<boolean>;
    /**
     * Include resolved alerts in notification
     */
    notifyOnResolved?: pulumi.Input<boolean>;
    /**
     * Include snoozed alerts in notification
     */
    notifyOnSnoozed?: pulumi.Input<boolean>;
    /**
     * List of specific policies to scan
     */
    policies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Policy labels
     */
    policyLabels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Scan all policies
     */
    scanAll?: pulumi.Input<boolean>;
    /**
     * Model for the target filter
     */
    target: pulumi.Input<inputs.AlertRuleTarget>;
}
