// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Policy extends pulumi.CustomResource {
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyState, opts?: pulumi.CustomResourceOptions): Policy {
        return new Policy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prismacloud:index/policy:Policy';

    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policy.__pulumiType;
    }

    /**
     * Cloud type (Required for config policies)
     */
    public readonly cloudType!: pulumi.Output<string | undefined>;
    /**
     * List of compliance data. Each item has compliance standard, requirement, and/or section information
     */
    public readonly complianceMetadatas!: pulumi.Output<outputs.PolicyComplianceMetadata[] | undefined>;
    /**
     * Created by
     */
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    /**
     * Created on
     */
    public /*out*/ readonly createdOn!: pulumi.Output<number>;
    /**
     * Deleted
     */
    public readonly deleted!: pulumi.Output<boolean | undefined>;
    /**
     * Description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Enabled
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Labels
     */
    public readonly labels!: pulumi.Output<string[] | undefined>;
    /**
     * Last modified by
     */
    public /*out*/ readonly lastModifiedBy!: pulumi.Output<string>;
    /**
     * Last modified on
     */
    public /*out*/ readonly lastModifiedOn!: pulumi.Output<number>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Open alerts count
     */
    public /*out*/ readonly openAlertsCount!: pulumi.Output<number>;
    /**
     * Overridden
     */
    public readonly overridden!: pulumi.Output<boolean | undefined>;
    /**
     * Owner
     */
    public /*out*/ readonly owner!: pulumi.Output<string>;
    /**
     * Policy category
     */
    public /*out*/ readonly policyCategory!: pulumi.Output<string>;
    /**
     * Policy class
     */
    public /*out*/ readonly policyClass!: pulumi.Output<string>;
    /**
     * Policy ID
     */
    public /*out*/ readonly policyId!: pulumi.Output<string>;
    /**
     * Policy mode
     */
    public /*out*/ readonly policyMode!: pulumi.Output<string>;
    /**
     * Policy subtypes
     */
    public readonly policySubtypes!: pulumi.Output<string[]>;
    /**
     * Policy type
     */
    public readonly policyType!: pulumi.Output<string>;
    /**
     * Remediation recommendation
     */
    public readonly recommendation!: pulumi.Output<string | undefined>;
    /**
     * Is remediable or not
     */
    public /*out*/ readonly remediable!: pulumi.Output<boolean>;
    /**
     * Model for remediation
     */
    public readonly remediation!: pulumi.Output<outputs.PolicyRemediation | undefined>;
    /**
     * Restrict alert dismissal
     */
    public readonly restrictAlertDismissal!: pulumi.Output<boolean | undefined>;
    /**
     * Model for rule
     */
    public readonly rule!: pulumi.Output<outputs.PolicyRule>;
    /**
     * Rule last modified on
     */
    public /*out*/ readonly ruleLastModifiedOn!: pulumi.Output<number>;
    /**
     * Severity
     */
    public readonly severity!: pulumi.Output<string | undefined>;
    /**
     * If policy is a system default policy or not
     */
    public /*out*/ readonly systemDefault!: pulumi.Output<boolean>;
    public readonly timeouts!: pulumi.Output<outputs.PolicyTimeouts | undefined>;

    /**
     * Create a Policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyArgs | PolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyState | undefined;
            resourceInputs["cloudType"] = state ? state.cloudType : undefined;
            resourceInputs["complianceMetadatas"] = state ? state.complianceMetadatas : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["createdOn"] = state ? state.createdOn : undefined;
            resourceInputs["deleted"] = state ? state.deleted : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["lastModifiedBy"] = state ? state.lastModifiedBy : undefined;
            resourceInputs["lastModifiedOn"] = state ? state.lastModifiedOn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["openAlertsCount"] = state ? state.openAlertsCount : undefined;
            resourceInputs["overridden"] = state ? state.overridden : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["policyCategory"] = state ? state.policyCategory : undefined;
            resourceInputs["policyClass"] = state ? state.policyClass : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["policyMode"] = state ? state.policyMode : undefined;
            resourceInputs["policySubtypes"] = state ? state.policySubtypes : undefined;
            resourceInputs["policyType"] = state ? state.policyType : undefined;
            resourceInputs["recommendation"] = state ? state.recommendation : undefined;
            resourceInputs["remediable"] = state ? state.remediable : undefined;
            resourceInputs["remediation"] = state ? state.remediation : undefined;
            resourceInputs["restrictAlertDismissal"] = state ? state.restrictAlertDismissal : undefined;
            resourceInputs["rule"] = state ? state.rule : undefined;
            resourceInputs["ruleLastModifiedOn"] = state ? state.ruleLastModifiedOn : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["systemDefault"] = state ? state.systemDefault : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as PolicyArgs | undefined;
            if ((!args || args.policyType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyType'");
            }
            if ((!args || args.rule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rule'");
            }
            resourceInputs["cloudType"] = args ? args.cloudType : undefined;
            resourceInputs["complianceMetadatas"] = args ? args.complianceMetadatas : undefined;
            resourceInputs["deleted"] = args ? args.deleted : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["overridden"] = args ? args.overridden : undefined;
            resourceInputs["policySubtypes"] = args ? args.policySubtypes : undefined;
            resourceInputs["policyType"] = args ? args.policyType : undefined;
            resourceInputs["recommendation"] = args ? args.recommendation : undefined;
            resourceInputs["remediation"] = args ? args.remediation : undefined;
            resourceInputs["restrictAlertDismissal"] = args ? args.restrictAlertDismissal : undefined;
            resourceInputs["rule"] = args ? args.rule : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["lastModifiedBy"] = undefined /*out*/;
            resourceInputs["lastModifiedOn"] = undefined /*out*/;
            resourceInputs["openAlertsCount"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["policyCategory"] = undefined /*out*/;
            resourceInputs["policyClass"] = undefined /*out*/;
            resourceInputs["policyId"] = undefined /*out*/;
            resourceInputs["policyMode"] = undefined /*out*/;
            resourceInputs["remediable"] = undefined /*out*/;
            resourceInputs["ruleLastModifiedOn"] = undefined /*out*/;
            resourceInputs["systemDefault"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Policy resources.
 */
export interface PolicyState {
    /**
     * Cloud type (Required for config policies)
     */
    cloudType?: pulumi.Input<string>;
    /**
     * List of compliance data. Each item has compliance standard, requirement, and/or section information
     */
    complianceMetadatas?: pulumi.Input<pulumi.Input<inputs.PolicyComplianceMetadata>[]>;
    /**
     * Created by
     */
    createdBy?: pulumi.Input<string>;
    /**
     * Created on
     */
    createdOn?: pulumi.Input<number>;
    /**
     * Deleted
     */
    deleted?: pulumi.Input<boolean>;
    /**
     * Description
     */
    description?: pulumi.Input<string>;
    /**
     * Enabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Labels
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Last modified by
     */
    lastModifiedBy?: pulumi.Input<string>;
    /**
     * Last modified on
     */
    lastModifiedOn?: pulumi.Input<number>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Open alerts count
     */
    openAlertsCount?: pulumi.Input<number>;
    /**
     * Overridden
     */
    overridden?: pulumi.Input<boolean>;
    /**
     * Owner
     */
    owner?: pulumi.Input<string>;
    /**
     * Policy category
     */
    policyCategory?: pulumi.Input<string>;
    /**
     * Policy class
     */
    policyClass?: pulumi.Input<string>;
    /**
     * Policy ID
     */
    policyId?: pulumi.Input<string>;
    /**
     * Policy mode
     */
    policyMode?: pulumi.Input<string>;
    /**
     * Policy subtypes
     */
    policySubtypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Policy type
     */
    policyType?: pulumi.Input<string>;
    /**
     * Remediation recommendation
     */
    recommendation?: pulumi.Input<string>;
    /**
     * Is remediable or not
     */
    remediable?: pulumi.Input<boolean>;
    /**
     * Model for remediation
     */
    remediation?: pulumi.Input<inputs.PolicyRemediation>;
    /**
     * Restrict alert dismissal
     */
    restrictAlertDismissal?: pulumi.Input<boolean>;
    /**
     * Model for rule
     */
    rule?: pulumi.Input<inputs.PolicyRule>;
    /**
     * Rule last modified on
     */
    ruleLastModifiedOn?: pulumi.Input<number>;
    /**
     * Severity
     */
    severity?: pulumi.Input<string>;
    /**
     * If policy is a system default policy or not
     */
    systemDefault?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.PolicyTimeouts>;
}

/**
 * The set of arguments for constructing a Policy resource.
 */
export interface PolicyArgs {
    /**
     * Cloud type (Required for config policies)
     */
    cloudType?: pulumi.Input<string>;
    /**
     * List of compliance data. Each item has compliance standard, requirement, and/or section information
     */
    complianceMetadatas?: pulumi.Input<pulumi.Input<inputs.PolicyComplianceMetadata>[]>;
    /**
     * Deleted
     */
    deleted?: pulumi.Input<boolean>;
    /**
     * Description
     */
    description?: pulumi.Input<string>;
    /**
     * Enabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Labels
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Overridden
     */
    overridden?: pulumi.Input<boolean>;
    /**
     * Policy subtypes
     */
    policySubtypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Policy type
     */
    policyType: pulumi.Input<string>;
    /**
     * Remediation recommendation
     */
    recommendation?: pulumi.Input<string>;
    /**
     * Model for remediation
     */
    remediation?: pulumi.Input<inputs.PolicyRemediation>;
    /**
     * Restrict alert dismissal
     */
    restrictAlertDismissal?: pulumi.Input<boolean>;
    /**
     * Model for rule
     */
    rule: pulumi.Input<inputs.PolicyRule>;
    /**
     * Severity
     */
    severity?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.PolicyTimeouts>;
}
