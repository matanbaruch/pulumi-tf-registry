// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AnomalySettings extends pulumi.CustomResource {
    /**
     * Get an existing AnomalySettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AnomalySettingsState, opts?: pulumi.CustomResourceOptions): AnomalySettings {
        return new AnomalySettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prismacloud:index/anomalySettings:AnomalySettings';

    /**
     * Returns true if the given object is an instance of AnomalySettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AnomalySettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AnomalySettings.__pulumiType;
    }

    /**
     * Alert disposition
     */
    public readonly alertDisposition!: pulumi.Output<string>;
    /**
     * Alert disposition info
     */
    public /*out*/ readonly alertDispositionDescriptions!: pulumi.Output<outputs.AnomalySettingsAlertDispositionDescription[]>;
    /**
     * Policy description
     */
    public /*out*/ readonly policyDescription!: pulumi.Output<string>;
    /**
     * Policy ID
     */
    public readonly policyId!: pulumi.Output<string>;
    /**
     * Policy name
     */
    public /*out*/ readonly policyName!: pulumi.Output<string>;
    /**
     * Training model info
     */
    public /*out*/ readonly trainingModelDescriptions!: pulumi.Output<outputs.AnomalySettingsTrainingModelDescription[]>;
    /**
     * Training model threshold info
     */
    public readonly trainingModelThreshold!: pulumi.Output<string>;

    /**
     * Create a AnomalySettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AnomalySettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AnomalySettingsArgs | AnomalySettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AnomalySettingsState | undefined;
            resourceInputs["alertDisposition"] = state ? state.alertDisposition : undefined;
            resourceInputs["alertDispositionDescriptions"] = state ? state.alertDispositionDescriptions : undefined;
            resourceInputs["policyDescription"] = state ? state.policyDescription : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["policyName"] = state ? state.policyName : undefined;
            resourceInputs["trainingModelDescriptions"] = state ? state.trainingModelDescriptions : undefined;
            resourceInputs["trainingModelThreshold"] = state ? state.trainingModelThreshold : undefined;
        } else {
            const args = argsOrState as AnomalySettingsArgs | undefined;
            if ((!args || args.policyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            resourceInputs["alertDisposition"] = args ? args.alertDisposition : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["trainingModelThreshold"] = args ? args.trainingModelThreshold : undefined;
            resourceInputs["alertDispositionDescriptions"] = undefined /*out*/;
            resourceInputs["policyDescription"] = undefined /*out*/;
            resourceInputs["policyName"] = undefined /*out*/;
            resourceInputs["trainingModelDescriptions"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AnomalySettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AnomalySettings resources.
 */
export interface AnomalySettingsState {
    /**
     * Alert disposition
     */
    alertDisposition?: pulumi.Input<string>;
    /**
     * Alert disposition info
     */
    alertDispositionDescriptions?: pulumi.Input<pulumi.Input<inputs.AnomalySettingsAlertDispositionDescription>[]>;
    /**
     * Policy description
     */
    policyDescription?: pulumi.Input<string>;
    /**
     * Policy ID
     */
    policyId?: pulumi.Input<string>;
    /**
     * Policy name
     */
    policyName?: pulumi.Input<string>;
    /**
     * Training model info
     */
    trainingModelDescriptions?: pulumi.Input<pulumi.Input<inputs.AnomalySettingsTrainingModelDescription>[]>;
    /**
     * Training model threshold info
     */
    trainingModelThreshold?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AnomalySettings resource.
 */
export interface AnomalySettingsArgs {
    /**
     * Alert disposition
     */
    alertDisposition?: pulumi.Input<string>;
    /**
     * Policy ID
     */
    policyId: pulumi.Input<string>;
    /**
     * Training model threshold info
     */
    trainingModelThreshold?: pulumi.Input<string>;
}
