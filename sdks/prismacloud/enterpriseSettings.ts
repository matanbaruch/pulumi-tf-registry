// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class EnterpriseSettings extends pulumi.CustomResource {
    /**
     * Get an existing EnterpriseSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EnterpriseSettingsState, opts?: pulumi.CustomResourceOptions): EnterpriseSettings {
        return new EnterpriseSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prismacloud:index/enterpriseSettings:EnterpriseSettings';

    /**
     * Returns true if the given object is an instance of EnterpriseSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EnterpriseSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EnterpriseSettings.__pulumiType;
    }

    /**
     * Access Keys maximum validity in days
     */
    public readonly accessKeyMaxValidity!: pulumi.Output<number>;
    /**
     * Alarms enabled
     */
    public readonly alarmEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Apply default policies enabled
     */
    public readonly applyDefaultPoliciesEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * List of audit log siem integration ids
     */
    public readonly auditLogSiemIntgrIds!: pulumi.Output<string[] | undefined>;
    /**
     * Audit Logs Enabled
     */
    public readonly auditLogsEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Default policies enabled
     */
    public readonly defaultPoliciesEnabled!: pulumi.Output<{[key: string]: boolean} | undefined>;
    /**
     * Named users access keys expiry notifications enabled
     */
    public readonly namedUsersAccessKeysExpiryNotificationsEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Notification threshold access keys expiry
     */
    public readonly notificationThresholdAccessKeysExpiry!: pulumi.Output<number | undefined>;
    /**
     * Require alert dismissal note
     */
    public readonly requireAlertDismissalNote!: pulumi.Output<boolean | undefined>;
    /**
     * Service users access keys expiry notifications enabled
     */
    public readonly serviceUsersAccessKeysExpiryNotificationsEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Browser session timeout
     */
    public readonly sessionTimeout!: pulumi.Output<number | undefined>;
    /**
     * User attribution in notification
     */
    public readonly userAttributionInNotification!: pulumi.Output<boolean | undefined>;

    /**
     * Create a EnterpriseSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EnterpriseSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EnterpriseSettingsArgs | EnterpriseSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EnterpriseSettingsState | undefined;
            resourceInputs["accessKeyMaxValidity"] = state ? state.accessKeyMaxValidity : undefined;
            resourceInputs["alarmEnabled"] = state ? state.alarmEnabled : undefined;
            resourceInputs["applyDefaultPoliciesEnabled"] = state ? state.applyDefaultPoliciesEnabled : undefined;
            resourceInputs["auditLogSiemIntgrIds"] = state ? state.auditLogSiemIntgrIds : undefined;
            resourceInputs["auditLogsEnabled"] = state ? state.auditLogsEnabled : undefined;
            resourceInputs["defaultPoliciesEnabled"] = state ? state.defaultPoliciesEnabled : undefined;
            resourceInputs["namedUsersAccessKeysExpiryNotificationsEnabled"] = state ? state.namedUsersAccessKeysExpiryNotificationsEnabled : undefined;
            resourceInputs["notificationThresholdAccessKeysExpiry"] = state ? state.notificationThresholdAccessKeysExpiry : undefined;
            resourceInputs["requireAlertDismissalNote"] = state ? state.requireAlertDismissalNote : undefined;
            resourceInputs["serviceUsersAccessKeysExpiryNotificationsEnabled"] = state ? state.serviceUsersAccessKeysExpiryNotificationsEnabled : undefined;
            resourceInputs["sessionTimeout"] = state ? state.sessionTimeout : undefined;
            resourceInputs["userAttributionInNotification"] = state ? state.userAttributionInNotification : undefined;
        } else {
            const args = argsOrState as EnterpriseSettingsArgs | undefined;
            if ((!args || args.accessKeyMaxValidity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessKeyMaxValidity'");
            }
            resourceInputs["accessKeyMaxValidity"] = args ? args.accessKeyMaxValidity : undefined;
            resourceInputs["alarmEnabled"] = args ? args.alarmEnabled : undefined;
            resourceInputs["applyDefaultPoliciesEnabled"] = args ? args.applyDefaultPoliciesEnabled : undefined;
            resourceInputs["auditLogSiemIntgrIds"] = args ? args.auditLogSiemIntgrIds : undefined;
            resourceInputs["auditLogsEnabled"] = args ? args.auditLogsEnabled : undefined;
            resourceInputs["defaultPoliciesEnabled"] = args ? args.defaultPoliciesEnabled : undefined;
            resourceInputs["namedUsersAccessKeysExpiryNotificationsEnabled"] = args ? args.namedUsersAccessKeysExpiryNotificationsEnabled : undefined;
            resourceInputs["notificationThresholdAccessKeysExpiry"] = args ? args.notificationThresholdAccessKeysExpiry : undefined;
            resourceInputs["requireAlertDismissalNote"] = args ? args.requireAlertDismissalNote : undefined;
            resourceInputs["serviceUsersAccessKeysExpiryNotificationsEnabled"] = args ? args.serviceUsersAccessKeysExpiryNotificationsEnabled : undefined;
            resourceInputs["sessionTimeout"] = args ? args.sessionTimeout : undefined;
            resourceInputs["userAttributionInNotification"] = args ? args.userAttributionInNotification : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EnterpriseSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EnterpriseSettings resources.
 */
export interface EnterpriseSettingsState {
    /**
     * Access Keys maximum validity in days
     */
    accessKeyMaxValidity?: pulumi.Input<number>;
    /**
     * Alarms enabled
     */
    alarmEnabled?: pulumi.Input<boolean>;
    /**
     * Apply default policies enabled
     */
    applyDefaultPoliciesEnabled?: pulumi.Input<boolean>;
    /**
     * List of audit log siem integration ids
     */
    auditLogSiemIntgrIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Audit Logs Enabled
     */
    auditLogsEnabled?: pulumi.Input<boolean>;
    /**
     * Default policies enabled
     */
    defaultPoliciesEnabled?: pulumi.Input<{[key: string]: pulumi.Input<boolean>}>;
    /**
     * Named users access keys expiry notifications enabled
     */
    namedUsersAccessKeysExpiryNotificationsEnabled?: pulumi.Input<boolean>;
    /**
     * Notification threshold access keys expiry
     */
    notificationThresholdAccessKeysExpiry?: pulumi.Input<number>;
    /**
     * Require alert dismissal note
     */
    requireAlertDismissalNote?: pulumi.Input<boolean>;
    /**
     * Service users access keys expiry notifications enabled
     */
    serviceUsersAccessKeysExpiryNotificationsEnabled?: pulumi.Input<boolean>;
    /**
     * Browser session timeout
     */
    sessionTimeout?: pulumi.Input<number>;
    /**
     * User attribution in notification
     */
    userAttributionInNotification?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a EnterpriseSettings resource.
 */
export interface EnterpriseSettingsArgs {
    /**
     * Access Keys maximum validity in days
     */
    accessKeyMaxValidity: pulumi.Input<number>;
    /**
     * Alarms enabled
     */
    alarmEnabled?: pulumi.Input<boolean>;
    /**
     * Apply default policies enabled
     */
    applyDefaultPoliciesEnabled?: pulumi.Input<boolean>;
    /**
     * List of audit log siem integration ids
     */
    auditLogSiemIntgrIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Audit Logs Enabled
     */
    auditLogsEnabled?: pulumi.Input<boolean>;
    /**
     * Default policies enabled
     */
    defaultPoliciesEnabled?: pulumi.Input<{[key: string]: pulumi.Input<boolean>}>;
    /**
     * Named users access keys expiry notifications enabled
     */
    namedUsersAccessKeysExpiryNotificationsEnabled?: pulumi.Input<boolean>;
    /**
     * Notification threshold access keys expiry
     */
    notificationThresholdAccessKeysExpiry?: pulumi.Input<number>;
    /**
     * Require alert dismissal note
     */
    requireAlertDismissalNote?: pulumi.Input<boolean>;
    /**
     * Service users access keys expiry notifications enabled
     */
    serviceUsersAccessKeysExpiryNotificationsEnabled?: pulumi.Input<boolean>;
    /**
     * Browser session timeout
     */
    sessionTimeout?: pulumi.Input<number>;
    /**
     * User attribution in notification
     */
    userAttributionInNotification?: pulumi.Input<boolean>;
}
