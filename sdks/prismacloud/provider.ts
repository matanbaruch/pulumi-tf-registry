// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The provider type for the prismacloud package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'prismacloud';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    /**
     * Customer name
     */
    public readonly customerName!: pulumi.Output<string | undefined>;
    /**
     * Retrieve the provider configuration from this JSON file
     */
    public readonly jsonConfigFile!: pulumi.Output<string | undefined>;
    /**
     * JSON web token to use
     */
    public readonly jsonWebToken!: pulumi.Output<string | undefined>;
    /**
     * Secret key
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * The protocol (https or http)
     */
    public readonly protocol!: pulumi.Output<string | undefined>;
    /**
     * Retry type
     */
    public readonly retryType!: pulumi.Output<string | undefined>;
    /**
     * The API URL without the leading protocol
     */
    public readonly url!: pulumi.Output<string | undefined>;
    /**
     * Access key ID
     */
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            resourceInputs["customerName"] = args ? args.customerName : undefined;
            resourceInputs["disableReconnect"] = pulumi.output(args ? args.disableReconnect : undefined).apply(JSON.stringify);
            resourceInputs["jsonConfigFile"] = args ? args.jsonConfigFile : undefined;
            resourceInputs["jsonWebToken"] = args?.jsonWebToken ? pulumi.secret(args.jsonWebToken) : undefined;
            resourceInputs["logging"] = pulumi.output(args ? args.logging : undefined).apply(JSON.stringify);
            resourceInputs["maxRetries"] = pulumi.output(args ? args.maxRetries : undefined).apply(JSON.stringify);
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["port"] = pulumi.output(args ? args.port : undefined).apply(JSON.stringify);
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["retryMaxDelay"] = pulumi.output(args ? args.retryMaxDelay : undefined).apply(JSON.stringify);
            resourceInputs["retryType"] = args ? args.retryType : undefined;
            resourceInputs["skipSslCertVerification"] = pulumi.output(args ? args.skipSslCertVerification : undefined).apply(JSON.stringify);
            resourceInputs["timeout"] = pulumi.output(args ? args.timeout : undefined).apply(JSON.stringify);
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["jsonWebToken", "password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Provider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * Customer name
     */
    customerName?: pulumi.Input<string>;
    /**
     * Disable reconnecting on JWT expiration
     */
    disableReconnect?: pulumi.Input<boolean>;
    /**
     * Retrieve the provider configuration from this JSON file
     */
    jsonConfigFile?: pulumi.Input<string>;
    /**
     * JSON web token to use
     */
    jsonWebToken?: pulumi.Input<string>;
    /**
     * Logging options for the API connection
     */
    logging?: pulumi.Input<{[key: string]: pulumi.Input<boolean>}>;
    /**
     * Maximum number of retries to be performed in case of rate limit
     */
    maxRetries?: pulumi.Input<number>;
    /**
     * Secret key
     */
    password?: pulumi.Input<string>;
    /**
     * If the port is non-standard for the protocol, the port number to use
     */
    port?: pulumi.Input<number>;
    /**
     * The protocol (https or http)
     */
    protocol?: pulumi.Input<string>;
    /**
     * Maximum delay for exponential backoff strategy
     */
    retryMaxDelay?: pulumi.Input<number>;
    /**
     * Retry type
     */
    retryType?: pulumi.Input<string>;
    /**
     * Skip SSL certificate verification
     */
    skipSslCertVerification?: pulumi.Input<boolean>;
    /**
     * The timeout in seconds for all communications with Prisma Cloud
     */
    timeout?: pulumi.Input<number>;
    /**
     * The API URL without the leading protocol
     */
    url?: pulumi.Input<string>;
    /**
     * Access key ID
     */
    username?: pulumi.Input<string>;
}
