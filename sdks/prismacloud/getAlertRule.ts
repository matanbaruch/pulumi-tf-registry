// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getAlertRule(args?: GetAlertRuleArgs, opts?: pulumi.InvokeOptions): Promise<GetAlertRuleResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("prismacloud:index/getAlertRule:getAlertRule", {
        "id": args.id,
        "name": args.name,
        "policyScanConfigId": args.policyScanConfigId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAlertRule.
 */
export interface GetAlertRuleArgs {
    id?: string;
    name?: string;
    policyScanConfigId?: string;
}

/**
 * A collection of values returned by getAlertRule.
 */
export interface GetAlertRuleResult {
    readonly allowAutoRemediate: boolean;
    readonly delayNotificationMs: number;
    readonly deleted: boolean;
    readonly description: string;
    readonly enabled: boolean;
    readonly excludedPolicies: string[];
    readonly id: string;
    readonly lastModifiedBy: string;
    readonly lastModifiedOn: number;
    readonly name: string;
    readonly notificationChannels: string[];
    readonly notificationConfigs: outputs.GetAlertRuleNotificationConfig[];
    readonly notifyOnDismissed: boolean;
    readonly notifyOnOpen: boolean;
    readonly notifyOnResolved: boolean;
    readonly notifyOnSnoozed: boolean;
    readonly openAlertsCount: number;
    readonly owner: string;
    readonly policies: string[];
    readonly policyLabels: string[];
    readonly policyScanConfigId: string;
    readonly readOnly: boolean;
    readonly scanAll: boolean;
    readonly targets: outputs.GetAlertRuleTarget[];
}
export function getAlertRuleOutput(args?: GetAlertRuleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAlertRuleResult> {
    return pulumi.output(args).apply((a: any) => getAlertRule(a, opts))
}

/**
 * A collection of arguments for invoking getAlertRule.
 */
export interface GetAlertRuleOutputArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    policyScanConfigId?: pulumi.Input<string>;
}
