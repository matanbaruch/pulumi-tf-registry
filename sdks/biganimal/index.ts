// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AnalyticsClusterArgs, AnalyticsClusterState } from "./analyticsCluster";
export type AnalyticsCluster = import("./analyticsCluster").AnalyticsCluster;
export const AnalyticsCluster: typeof import("./analyticsCluster").AnalyticsCluster = null as any;
utilities.lazyLoad(exports, ["AnalyticsCluster"], () => require("./analyticsCluster"));

export { AwsConnectionArgs, AwsConnectionState } from "./awsConnection";
export type AwsConnection = import("./awsConnection").AwsConnection;
export const AwsConnection: typeof import("./awsConnection").AwsConnection = null as any;
utilities.lazyLoad(exports, ["AwsConnection"], () => require("./awsConnection"));

export { AzureConnectionArgs, AzureConnectionState } from "./azureConnection";
export type AzureConnection = import("./azureConnection").AzureConnection;
export const AzureConnection: typeof import("./azureConnection").AzureConnection = null as any;
utilities.lazyLoad(exports, ["AzureConnection"], () => require("./azureConnection"));

export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { FarawayReplicaArgs, FarawayReplicaState } from "./farawayReplica";
export type FarawayReplica = import("./farawayReplica").FarawayReplica;
export const FarawayReplica: typeof import("./farawayReplica").FarawayReplica = null as any;
utilities.lazyLoad(exports, ["FarawayReplica"], () => require("./farawayReplica"));

export { GetAnalyticsClusterArgs, GetAnalyticsClusterResult, GetAnalyticsClusterOutputArgs } from "./getAnalyticsCluster";
export const getAnalyticsCluster: typeof import("./getAnalyticsCluster").getAnalyticsCluster = null as any;
export const getAnalyticsClusterOutput: typeof import("./getAnalyticsCluster").getAnalyticsClusterOutput = null as any;
utilities.lazyLoad(exports, ["getAnalyticsCluster","getAnalyticsClusterOutput"], () => require("./getAnalyticsCluster"));

export { GetAwsConnectionArgs, GetAwsConnectionResult, GetAwsConnectionOutputArgs } from "./getAwsConnection";
export const getAwsConnection: typeof import("./getAwsConnection").getAwsConnection = null as any;
export const getAwsConnectionOutput: typeof import("./getAwsConnection").getAwsConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getAwsConnection","getAwsConnectionOutput"], () => require("./getAwsConnection"));

export { GetClusterArgs, GetClusterResult, GetClusterOutputArgs } from "./getCluster";
export const getCluster: typeof import("./getCluster").getCluster = null as any;
export const getClusterOutput: typeof import("./getCluster").getClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCluster","getClusterOutput"], () => require("./getCluster"));

export { GetFarawayReplicaArgs, GetFarawayReplicaResult, GetFarawayReplicaOutputArgs } from "./getFarawayReplica";
export const getFarawayReplica: typeof import("./getFarawayReplica").getFarawayReplica = null as any;
export const getFarawayReplicaOutput: typeof import("./getFarawayReplica").getFarawayReplicaOutput = null as any;
utilities.lazyLoad(exports, ["getFarawayReplica","getFarawayReplicaOutput"], () => require("./getFarawayReplica"));

export { GetPgdArgs, GetPgdResult, GetPgdOutputArgs } from "./getPgd";
export const getPgd: typeof import("./getPgd").getPgd = null as any;
export const getPgdOutput: typeof import("./getPgd").getPgdOutput = null as any;
utilities.lazyLoad(exports, ["getPgd","getPgdOutput"], () => require("./getPgd"));

export { GetProjectsArgs, GetProjectsResult, GetProjectsOutputArgs } from "./getProjects";
export const getProjects: typeof import("./getProjects").getProjects = null as any;
export const getProjectsOutput: typeof import("./getProjects").getProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getProjects","getProjectsOutput"], () => require("./getProjects"));

export { GetRegionArgs, GetRegionResult, GetRegionOutputArgs } from "./getRegion";
export const getRegion: typeof import("./getRegion").getRegion = null as any;
export const getRegionOutput: typeof import("./getRegion").getRegionOutput = null as any;
utilities.lazyLoad(exports, ["getRegion","getRegionOutput"], () => require("./getRegion"));

export { PgdArgs, PgdState } from "./pgd";
export type Pgd = import("./pgd").Pgd;
export const Pgd: typeof import("./pgd").Pgd = null as any;
utilities.lazyLoad(exports, ["Pgd"], () => require("./pgd"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RegionArgs, RegionState } from "./region";
export type Region = import("./region").Region;
export const Region: typeof import("./region").Region = null as any;
utilities.lazyLoad(exports, ["Region"], () => require("./region"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "biganimal:index/analyticsCluster:AnalyticsCluster":
                return new AnalyticsCluster(name, <any>undefined, { urn })
            case "biganimal:index/awsConnection:AwsConnection":
                return new AwsConnection(name, <any>undefined, { urn })
            case "biganimal:index/azureConnection:AzureConnection":
                return new AzureConnection(name, <any>undefined, { urn })
            case "biganimal:index/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "biganimal:index/farawayReplica:FarawayReplica":
                return new FarawayReplica(name, <any>undefined, { urn })
            case "biganimal:index/pgd:Pgd":
                return new Pgd(name, <any>undefined, { urn })
            case "biganimal:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "biganimal:index/region:Region":
                return new Region(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("biganimal", "index/analyticsCluster", _module)
pulumi.runtime.registerResourceModule("biganimal", "index/awsConnection", _module)
pulumi.runtime.registerResourceModule("biganimal", "index/azureConnection", _module)
pulumi.runtime.registerResourceModule("biganimal", "index/cluster", _module)
pulumi.runtime.registerResourceModule("biganimal", "index/farawayReplica", _module)
pulumi.runtime.registerResourceModule("biganimal", "index/pgd", _module)
pulumi.runtime.registerResourceModule("biganimal", "index/project", _module)
pulumi.runtime.registerResourceModule("biganimal", "index/region", _module)
pulumi.runtime.registerResourcePackage("biganimal", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:biganimal") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
