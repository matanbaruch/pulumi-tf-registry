// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Pgd extends pulumi.CustomResource {
    /**
     * Get an existing Pgd resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PgdState, opts?: pulumi.CustomResourceOptions): Pgd {
        return new Pgd(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'biganimal:index/pgd:Pgd';

    /**
     * Returns true if the given object is an instance of Pgd.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Pgd {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Pgd.__pulumiType;
    }

    /**
     * Cluster ID.
     */
    public /*out*/ readonly clusterId!: pulumi.Output<string>;
    /**
     * cluster name
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * Cluster data groups.
     */
    public readonly dataGroups!: pulumi.Output<outputs.PgdDataGroup[]>;
    /**
     * Show the most recent cluster when there are multiple clusters with the same name
     */
    public readonly mostRecent!: pulumi.Output<boolean | undefined>;
    /**
     * Password for the user edb_admin. It must be 12 characters or more.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Pause cluster. If true it will put the cluster on pause and set the phase as paused, if false it will resume the cluster
     * and set the phase as healthy. Pausing a cluster allows you to save on compute costs without losing data or cluster
     * configuration settings. While paused, clusters aren't upgraded or patched, but changes are applied when the cluster
     * resumes. Pausing a Postgres Distributed(PGD) cluster shuts down all cluster nodes
     */
    public readonly pause!: pulumi.Output<boolean | undefined>;
    /**
     * BigAnimal Project ID.
     */
    public readonly projectId!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.PgdTimeouts | undefined>;
    public readonly witnessGroups!: pulumi.Output<outputs.PgdWitnessGroup[]>;

    /**
     * Create a Pgd resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PgdArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PgdArgs | PgdState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PgdState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["dataGroups"] = state ? state.dataGroups : undefined;
            resourceInputs["mostRecent"] = state ? state.mostRecent : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["pause"] = state ? state.pause : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["witnessGroups"] = state ? state.witnessGroups : undefined;
        } else {
            const args = argsOrState as PgdArgs | undefined;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.dataGroups === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataGroups'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["dataGroups"] = args ? args.dataGroups : undefined;
            resourceInputs["mostRecent"] = args ? args.mostRecent : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["pause"] = args ? args.pause : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["witnessGroups"] = args ? args.witnessGroups : undefined;
            resourceInputs["clusterId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Pgd.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Pgd resources.
 */
export interface PgdState {
    /**
     * Cluster ID.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * cluster name
     */
    clusterName?: pulumi.Input<string>;
    /**
     * Cluster data groups.
     */
    dataGroups?: pulumi.Input<pulumi.Input<inputs.PgdDataGroup>[]>;
    /**
     * Show the most recent cluster when there are multiple clusters with the same name
     */
    mostRecent?: pulumi.Input<boolean>;
    /**
     * Password for the user edb_admin. It must be 12 characters or more.
     */
    password?: pulumi.Input<string>;
    /**
     * Pause cluster. If true it will put the cluster on pause and set the phase as paused, if false it will resume the cluster
     * and set the phase as healthy. Pausing a cluster allows you to save on compute costs without losing data or cluster
     * configuration settings. While paused, clusters aren't upgraded or patched, but changes are applied when the cluster
     * resumes. Pausing a Postgres Distributed(PGD) cluster shuts down all cluster nodes
     */
    pause?: pulumi.Input<boolean>;
    /**
     * BigAnimal Project ID.
     */
    projectId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.PgdTimeouts>;
    witnessGroups?: pulumi.Input<pulumi.Input<inputs.PgdWitnessGroup>[]>;
}

/**
 * The set of arguments for constructing a Pgd resource.
 */
export interface PgdArgs {
    /**
     * cluster name
     */
    clusterName: pulumi.Input<string>;
    /**
     * Cluster data groups.
     */
    dataGroups: pulumi.Input<pulumi.Input<inputs.PgdDataGroup>[]>;
    /**
     * Show the most recent cluster when there are multiple clusters with the same name
     */
    mostRecent?: pulumi.Input<boolean>;
    /**
     * Password for the user edb_admin. It must be 12 characters or more.
     */
    password: pulumi.Input<string>;
    /**
     * Pause cluster. If true it will put the cluster on pause and set the phase as paused, if false it will resume the cluster
     * and set the phase as healthy. Pausing a cluster allows you to save on compute costs without losing data or cluster
     * configuration settings. While paused, clusters aren't upgraded or patched, but changes are applied when the cluster
     * resumes. Pausing a Postgres Distributed(PGD) cluster shuts down all cluster nodes
     */
    pause?: pulumi.Input<boolean>;
    /**
     * BigAnimal Project ID.
     */
    projectId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.PgdTimeouts>;
    witnessGroups?: pulumi.Input<pulumi.Input<inputs.PgdWitnessGroup>[]>;
}
