// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getAnalyticsCluster(args: GetAnalyticsClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetAnalyticsClusterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("biganimal:index/getAnalyticsCluster:getAnalyticsCluster", {
        "allowedIpRanges": args.allowedIpRanges,
        "backupRetentionPeriod": args.backupRetentionPeriod,
        "clusterId": args.clusterId,
        "cspAuth": args.cspAuth,
        "maintenanceWindow": args.maintenanceWindow,
        "pause": args.pause,
        "peAllowedPrincipalIds": args.peAllowedPrincipalIds,
        "projectId": args.projectId,
        "serviceAccountIds": args.serviceAccountIds,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAnalyticsCluster.
 */
export interface GetAnalyticsClusterArgs {
    allowedIpRanges?: inputs.GetAnalyticsClusterAllowedIpRange[];
    backupRetentionPeriod?: string;
    clusterId: string;
    cspAuth?: boolean;
    maintenanceWindow?: inputs.GetAnalyticsClusterMaintenanceWindow;
    pause?: boolean;
    peAllowedPrincipalIds?: string[];
    projectId: string;
    serviceAccountIds?: string[];
    timeouts?: inputs.GetAnalyticsClusterTimeouts;
}

/**
 * A collection of values returned by getAnalyticsCluster.
 */
export interface GetAnalyticsClusterResult {
    readonly allowedIpRanges: outputs.GetAnalyticsClusterAllowedIpRange[];
    readonly backupRetentionPeriod: string;
    readonly cloudProvider: string;
    readonly clusterId: string;
    readonly clusterName: string;
    readonly connectionUri: string;
    readonly createdAt: string;
    readonly cspAuth: boolean;
    readonly firstRecoverabilityPointAt: string;
    readonly id: string;
    readonly instanceType: string;
    readonly logsUrl: string;
    readonly maintenanceWindow: outputs.GetAnalyticsClusterMaintenanceWindow;
    readonly metricsUrl: string;
    readonly password: string;
    readonly pause?: boolean;
    readonly peAllowedPrincipalIds: string[];
    readonly pgType: string;
    readonly pgVersion: string;
    readonly phase: string;
    readonly privateNetworking: boolean;
    readonly projectId: string;
    readonly region: string;
    readonly resizingPvcs: string[];
    readonly serviceAccountIds: string[];
    readonly timeouts?: outputs.GetAnalyticsClusterTimeouts;
}
export function getAnalyticsClusterOutput(args: GetAnalyticsClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAnalyticsClusterResult> {
    return pulumi.output(args).apply((a: any) => getAnalyticsCluster(a, opts))
}

/**
 * A collection of arguments for invoking getAnalyticsCluster.
 */
export interface GetAnalyticsClusterOutputArgs {
    allowedIpRanges?: pulumi.Input<pulumi.Input<inputs.GetAnalyticsClusterAllowedIpRangeArgs>[]>;
    backupRetentionPeriod?: pulumi.Input<string>;
    clusterId: pulumi.Input<string>;
    cspAuth?: pulumi.Input<boolean>;
    maintenanceWindow?: pulumi.Input<inputs.GetAnalyticsClusterMaintenanceWindowArgs>;
    pause?: pulumi.Input<boolean>;
    peAllowedPrincipalIds?: pulumi.Input<pulumi.Input<string>[]>;
    projectId: pulumi.Input<string>;
    serviceAccountIds?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.GetAnalyticsClusterTimeoutsArgs>;
}
