// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectState, opts?: pulumi.CustomResourceOptions): Project {
        return new Project(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'biganimal:index/project:Project';

    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Project {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Project.__pulumiType;
    }

    /**
     * Enabled Cloud Providers.
     */
    public /*out*/ readonly cloudProviders!: pulumi.Output<outputs.ProjectCloudProvider[]>;
    /**
     * Cluster Count of the project.
     */
    public /*out*/ readonly clusterCount!: pulumi.Output<number>;
    /**
     * Project ID of the project.
     *
     * @deprecated Deprecated
     */
    public /*out*/ readonly projectId!: pulumi.Output<string>;
    /**
     * Project Name of the project.
     */
    public readonly projectName!: pulumi.Output<string>;
    /**
     * User Count of the project.
     */
    public /*out*/ readonly userCount!: pulumi.Output<number>;

    /**
     * Create a Project resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectArgs | ProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectState | undefined;
            resourceInputs["cloudProviders"] = state ? state.cloudProviders : undefined;
            resourceInputs["clusterCount"] = state ? state.clusterCount : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["userCount"] = state ? state.userCount : undefined;
        } else {
            const args = argsOrState as ProjectArgs | undefined;
            if ((!args || args.projectName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectName'");
            }
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["cloudProviders"] = undefined /*out*/;
            resourceInputs["clusterCount"] = undefined /*out*/;
            resourceInputs["projectId"] = undefined /*out*/;
            resourceInputs["userCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Project.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Project resources.
 */
export interface ProjectState {
    /**
     * Enabled Cloud Providers.
     */
    cloudProviders?: pulumi.Input<pulumi.Input<inputs.ProjectCloudProvider>[]>;
    /**
     * Cluster Count of the project.
     */
    clusterCount?: pulumi.Input<number>;
    /**
     * Project ID of the project.
     *
     * @deprecated Deprecated
     */
    projectId?: pulumi.Input<string>;
    /**
     * Project Name of the project.
     */
    projectName?: pulumi.Input<string>;
    /**
     * User Count of the project.
     */
    userCount?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Project resource.
 */
export interface ProjectArgs {
    /**
     * Project Name of the project.
     */
    projectName: pulumi.Input<string>;
}
