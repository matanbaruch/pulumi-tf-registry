// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Escalation extends pulumi.CustomResource {
    /**
     * Get an existing Escalation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EscalationState, opts?: pulumi.CustomResourceOptions): Escalation {
        return new Escalation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'amixr:index/escalation:Escalation';

    /**
     * Returns true if the given object is an instance of Escalation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Escalation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Escalation.__pulumiType;
    }

    public readonly actionToTrigger!: pulumi.Output<string | undefined>;
    public readonly duration!: pulumi.Output<number | undefined>;
    public readonly groupToNotify!: pulumi.Output<string | undefined>;
    public readonly important!: pulumi.Output<boolean | undefined>;
    public readonly notifyIfTimeFrom!: pulumi.Output<string | undefined>;
    public readonly notifyIfTimeTo!: pulumi.Output<string | undefined>;
    public readonly notifyOnCallFromSchedule!: pulumi.Output<string | undefined>;
    public readonly personsToNotifies!: pulumi.Output<string[] | undefined>;
    public readonly personsToNotifyNextEachTimes!: pulumi.Output<string[] | undefined>;
    public readonly position!: pulumi.Output<number>;
    public readonly routeId!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a Escalation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EscalationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EscalationArgs | EscalationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EscalationState | undefined;
            resourceInputs["actionToTrigger"] = state ? state.actionToTrigger : undefined;
            resourceInputs["duration"] = state ? state.duration : undefined;
            resourceInputs["groupToNotify"] = state ? state.groupToNotify : undefined;
            resourceInputs["important"] = state ? state.important : undefined;
            resourceInputs["notifyIfTimeFrom"] = state ? state.notifyIfTimeFrom : undefined;
            resourceInputs["notifyIfTimeTo"] = state ? state.notifyIfTimeTo : undefined;
            resourceInputs["notifyOnCallFromSchedule"] = state ? state.notifyOnCallFromSchedule : undefined;
            resourceInputs["personsToNotifies"] = state ? state.personsToNotifies : undefined;
            resourceInputs["personsToNotifyNextEachTimes"] = state ? state.personsToNotifyNextEachTimes : undefined;
            resourceInputs["position"] = state ? state.position : undefined;
            resourceInputs["routeId"] = state ? state.routeId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as EscalationArgs | undefined;
            if ((!args || args.position === undefined) && !opts.urn) {
                throw new Error("Missing required property 'position'");
            }
            if ((!args || args.routeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routeId'");
            }
            resourceInputs["actionToTrigger"] = args ? args.actionToTrigger : undefined;
            resourceInputs["duration"] = args ? args.duration : undefined;
            resourceInputs["groupToNotify"] = args ? args.groupToNotify : undefined;
            resourceInputs["important"] = args ? args.important : undefined;
            resourceInputs["notifyIfTimeFrom"] = args ? args.notifyIfTimeFrom : undefined;
            resourceInputs["notifyIfTimeTo"] = args ? args.notifyIfTimeTo : undefined;
            resourceInputs["notifyOnCallFromSchedule"] = args ? args.notifyOnCallFromSchedule : undefined;
            resourceInputs["personsToNotifies"] = args ? args.personsToNotifies : undefined;
            resourceInputs["personsToNotifyNextEachTimes"] = args ? args.personsToNotifyNextEachTimes : undefined;
            resourceInputs["position"] = args ? args.position : undefined;
            resourceInputs["routeId"] = args ? args.routeId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Escalation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Escalation resources.
 */
export interface EscalationState {
    actionToTrigger?: pulumi.Input<string>;
    duration?: pulumi.Input<number>;
    groupToNotify?: pulumi.Input<string>;
    important?: pulumi.Input<boolean>;
    notifyIfTimeFrom?: pulumi.Input<string>;
    notifyIfTimeTo?: pulumi.Input<string>;
    notifyOnCallFromSchedule?: pulumi.Input<string>;
    personsToNotifies?: pulumi.Input<pulumi.Input<string>[]>;
    personsToNotifyNextEachTimes?: pulumi.Input<pulumi.Input<string>[]>;
    position?: pulumi.Input<number>;
    routeId?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Escalation resource.
 */
export interface EscalationArgs {
    actionToTrigger?: pulumi.Input<string>;
    duration?: pulumi.Input<number>;
    groupToNotify?: pulumi.Input<string>;
    important?: pulumi.Input<boolean>;
    notifyIfTimeFrom?: pulumi.Input<string>;
    notifyIfTimeTo?: pulumi.Input<string>;
    notifyOnCallFromSchedule?: pulumi.Input<string>;
    personsToNotifies?: pulumi.Input<pulumi.Input<string>[]>;
    personsToNotifyNextEachTimes?: pulumi.Input<pulumi.Input<string>[]>;
    position: pulumi.Input<number>;
    routeId: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}
