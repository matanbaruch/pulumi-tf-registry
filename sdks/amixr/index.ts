// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { EscalationArgs, EscalationState } from "./escalation";
export type Escalation = import("./escalation").Escalation;
export const Escalation: typeof import("./escalation").Escalation = null as any;
utilities.lazyLoad(exports, ["Escalation"], () => require("./escalation"));

export { GetActionArgs, GetActionResult, GetActionOutputArgs } from "./getAction";
export const getAction: typeof import("./getAction").getAction = null as any;
export const getActionOutput: typeof import("./getAction").getActionOutput = null as any;
utilities.lazyLoad(exports, ["getAction","getActionOutput"], () => require("./getAction"));

export { GetScheduleArgs, GetScheduleResult, GetScheduleOutputArgs } from "./getSchedule";
export const getSchedule: typeof import("./getSchedule").getSchedule = null as any;
export const getScheduleOutput: typeof import("./getSchedule").getScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getSchedule","getScheduleOutput"], () => require("./getSchedule"));

export { GetSlackChannelArgs, GetSlackChannelResult, GetSlackChannelOutputArgs } from "./getSlackChannel";
export const getSlackChannel: typeof import("./getSlackChannel").getSlackChannel = null as any;
export const getSlackChannelOutput: typeof import("./getSlackChannel").getSlackChannelOutput = null as any;
utilities.lazyLoad(exports, ["getSlackChannel","getSlackChannelOutput"], () => require("./getSlackChannel"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUserGroupArgs, GetUserGroupResult, GetUserGroupOutputArgs } from "./getUserGroup";
export const getUserGroup: typeof import("./getUserGroup").getUserGroup = null as any;
export const getUserGroupOutput: typeof import("./getUserGroup").getUserGroupOutput = null as any;
utilities.lazyLoad(exports, ["getUserGroup","getUserGroupOutput"], () => require("./getUserGroup"));

export { IntegrationArgs, IntegrationState } from "./integration";
export type Integration = import("./integration").Integration;
export const Integration: typeof import("./integration").Integration = null as any;
utilities.lazyLoad(exports, ["Integration"], () => require("./integration"));

export { OnCallShiftArgs, OnCallShiftState } from "./onCallShift";
export type OnCallShift = import("./onCallShift").OnCallShift;
export const OnCallShift: typeof import("./onCallShift").OnCallShift = null as any;
utilities.lazyLoad(exports, ["OnCallShift"], () => require("./onCallShift"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RouteArgs, RouteState } from "./route";
export type Route = import("./route").Route;
export const Route: typeof import("./route").Route = null as any;
utilities.lazyLoad(exports, ["Route"], () => require("./route"));

export { ScheduleArgs, ScheduleState } from "./schedule";
export type Schedule = import("./schedule").Schedule;
export const Schedule: typeof import("./schedule").Schedule = null as any;
utilities.lazyLoad(exports, ["Schedule"], () => require("./schedule"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "amixr:index/escalation:Escalation":
                return new Escalation(name, <any>undefined, { urn })
            case "amixr:index/integration:Integration":
                return new Integration(name, <any>undefined, { urn })
            case "amixr:index/onCallShift:OnCallShift":
                return new OnCallShift(name, <any>undefined, { urn })
            case "amixr:index/route:Route":
                return new Route(name, <any>undefined, { urn })
            case "amixr:index/schedule:Schedule":
                return new Schedule(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("amixr", "index/escalation", _module)
pulumi.runtime.registerResourceModule("amixr", "index/integration", _module)
pulumi.runtime.registerResourceModule("amixr", "index/onCallShift", _module)
pulumi.runtime.registerResourceModule("amixr", "index/route", _module)
pulumi.runtime.registerResourceModule("amixr", "index/schedule", _module)
pulumi.runtime.registerResourcePackage("amixr", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:amixr") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
