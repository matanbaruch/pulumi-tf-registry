// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AffinityruleArgs, AffinityruleState } from "./affinityrule";
export type Affinityrule = import("./affinityrule").Affinityrule;
export const Affinityrule: typeof import("./affinityrule").Affinityrule = null as any;
utilities.lazyLoad(exports, ["Affinityrule"], () => require("./affinityrule"));

export { AffinityruleMemberArgs, AffinityruleMemberState } from "./affinityruleMember";
export type AffinityruleMember = import("./affinityruleMember").AffinityruleMember;
export const AffinityruleMember: typeof import("./affinityruleMember").AffinityruleMember = null as any;
utilities.lazyLoad(exports, ["AffinityruleMember"], () => require("./affinityruleMember"));

export { FirewallpolicyArgs, FirewallpolicyState } from "./firewallpolicy";
export type Firewallpolicy = import("./firewallpolicy").Firewallpolicy;
export const Firewallpolicy: typeof import("./firewallpolicy").Firewallpolicy = null as any;
utilities.lazyLoad(exports, ["Firewallpolicy"], () => require("./firewallpolicy"));

export { FirewallruleArgs, FirewallruleState } from "./firewallrule";
export type Firewallrule = import("./firewallrule").Firewallrule;
export const Firewallrule: typeof import("./firewallrule").Firewallrule = null as any;
utilities.lazyLoad(exports, ["Firewallrule"], () => require("./firewallrule"));

export { FloatingipArgs, FloatingipState } from "./floatingip";
export type Floatingip = import("./floatingip").Floatingip;
export const Floatingip: typeof import("./floatingip").Floatingip = null as any;
utilities.lazyLoad(exports, ["Floatingip"], () => require("./floatingip"));

export { GetAffinityruleArgs, GetAffinityruleResult, GetAffinityruleOutputArgs } from "./getAffinityrule";
export const getAffinityrule: typeof import("./getAffinityrule").getAffinityrule = null as any;
export const getAffinityruleOutput: typeof import("./getAffinityrule").getAffinityruleOutput = null as any;
utilities.lazyLoad(exports, ["getAffinityrule","getAffinityruleOutput"], () => require("./getAffinityrule"));

export { GetAffinityruleMemberArgs, GetAffinityruleMemberResult, GetAffinityruleMemberOutputArgs } from "./getAffinityruleMember";
export const getAffinityruleMember: typeof import("./getAffinityruleMember").getAffinityruleMember = null as any;
export const getAffinityruleMemberOutput: typeof import("./getAffinityruleMember").getAffinityruleMemberOutput = null as any;
utilities.lazyLoad(exports, ["getAffinityruleMember","getAffinityruleMemberOutput"], () => require("./getAffinityruleMember"));

export { GetAvailabilityZoneArgs, GetAvailabilityZoneResult, GetAvailabilityZoneOutputArgs } from "./getAvailabilityZone";
export const getAvailabilityZone: typeof import("./getAvailabilityZone").getAvailabilityZone = null as any;
export const getAvailabilityZoneOutput: typeof import("./getAvailabilityZone").getAvailabilityZoneOutput = null as any;
utilities.lazyLoad(exports, ["getAvailabilityZone","getAvailabilityZoneOutput"], () => require("./getAvailabilityZone"));

export { GetFirewallpolicyArgs, GetFirewallpolicyResult, GetFirewallpolicyOutputArgs } from "./getFirewallpolicy";
export const getFirewallpolicy: typeof import("./getFirewallpolicy").getFirewallpolicy = null as any;
export const getFirewallpolicyOutput: typeof import("./getFirewallpolicy").getFirewallpolicyOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallpolicy","getFirewallpolicyOutput"], () => require("./getFirewallpolicy"));

export { GetFirewallruleArgs, GetFirewallruleResult, GetFirewallruleOutputArgs } from "./getFirewallrule";
export const getFirewallrule: typeof import("./getFirewallrule").getFirewallrule = null as any;
export const getFirewallruleOutput: typeof import("./getFirewallrule").getFirewallruleOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallrule","getFirewallruleOutput"], () => require("./getFirewallrule"));

export { GetFloatingipArgs, GetFloatingipResult, GetFloatingipOutputArgs } from "./getFloatingip";
export const getFloatingip: typeof import("./getFloatingip").getFloatingip = null as any;
export const getFloatingipOutput: typeof import("./getFloatingip").getFloatingipOutput = null as any;
utilities.lazyLoad(exports, ["getFloatingip","getFloatingipOutput"], () => require("./getFloatingip"));

export { GetHostArgs, GetHostResult, GetHostOutputArgs } from "./getHost";
export const getHost: typeof import("./getHost").getHost = null as any;
export const getHostOutput: typeof import("./getHost").getHostOutput = null as any;
utilities.lazyLoad(exports, ["getHost","getHostOutput"], () => require("./getHost"));

export { GetHostgroupArgs, GetHostgroupResult, GetHostgroupOutputArgs } from "./getHostgroup";
export const getHostgroup: typeof import("./getHostgroup").getHostgroup = null as any;
export const getHostgroupOutput: typeof import("./getHostgroup").getHostgroupOutput = null as any;
utilities.lazyLoad(exports, ["getHostgroup","getHostgroupOutput"], () => require("./getHostgroup"));

export { GetHostspecArgs, GetHostspecResult, GetHostspecOutputArgs } from "./getHostspec";
export const getHostspec: typeof import("./getHostspec").getHostspec = null as any;
export const getHostspecOutput: typeof import("./getHostspec").getHostspecOutput = null as any;
utilities.lazyLoad(exports, ["getHostspec","getHostspecOutput"], () => require("./getHostspec"));

export { GetImageArgs, GetImageResult, GetImageOutputArgs } from "./getImage";
export const getImage: typeof import("./getImage").getImage = null as any;
export const getImageOutput: typeof import("./getImage").getImageOutput = null as any;
utilities.lazyLoad(exports, ["getImage","getImageOutput"], () => require("./getImage"));

export { GetInstanceArgs, GetInstanceResult, GetInstanceOutputArgs } from "./getInstance";
export const getInstance: typeof import("./getInstance").getInstance = null as any;
export const getInstanceOutput: typeof import("./getInstance").getInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getInstance","getInstanceOutput"], () => require("./getInstance"));

export { GetInstanceCredentialArgs, GetInstanceCredentialResult, GetInstanceCredentialOutputArgs } from "./getInstanceCredential";
export const getInstanceCredential: typeof import("./getInstanceCredential").getInstanceCredential = null as any;
export const getInstanceCredentialOutput: typeof import("./getInstanceCredential").getInstanceCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceCredential","getInstanceCredentialOutput"], () => require("./getInstanceCredential"));

export { GetIopsArgs, GetIopsResult, GetIopsOutputArgs } from "./getIops";
export const getIops: typeof import("./getIops").getIops = null as any;
export const getIopsOutput: typeof import("./getIops").getIopsOutput = null as any;
utilities.lazyLoad(exports, ["getIops","getIopsOutput"], () => require("./getIops"));

export { GetIpaddressArgs, GetIpaddressResult, GetIpaddressOutputArgs } from "./getIpaddress";
export const getIpaddress: typeof import("./getIpaddress").getIpaddress = null as any;
export const getIpaddressOutput: typeof import("./getIpaddress").getIpaddressOutput = null as any;
utilities.lazyLoad(exports, ["getIpaddress","getIpaddressOutput"], () => require("./getIpaddress"));

export { GetLoadbalancerArgs, GetLoadbalancerResult, GetLoadbalancerOutputArgs } from "./getLoadbalancer";
export const getLoadbalancer: typeof import("./getLoadbalancer").getLoadbalancer = null as any;
export const getLoadbalancerOutput: typeof import("./getLoadbalancer").getLoadbalancerOutput = null as any;
utilities.lazyLoad(exports, ["getLoadbalancer","getLoadbalancerOutput"], () => require("./getLoadbalancer"));

export { GetLoadbalancerSpecArgs, GetLoadbalancerSpecResult, GetLoadbalancerSpecOutputArgs } from "./getLoadbalancerSpec";
export const getLoadbalancerSpec: typeof import("./getLoadbalancerSpec").getLoadbalancerSpec = null as any;
export const getLoadbalancerSpecOutput: typeof import("./getLoadbalancerSpec").getLoadbalancerSpecOutput = null as any;
utilities.lazyLoad(exports, ["getLoadbalancerSpec","getLoadbalancerSpecOutput"], () => require("./getLoadbalancerSpec"));

export { GetLoadbalancerVipArgs, GetLoadbalancerVipResult, GetLoadbalancerVipOutputArgs } from "./getLoadbalancerVip";
export const getLoadbalancerVip: typeof import("./getLoadbalancerVip").getLoadbalancerVip = null as any;
export const getLoadbalancerVipOutput: typeof import("./getLoadbalancerVip").getLoadbalancerVipOutput = null as any;
utilities.lazyLoad(exports, ["getLoadbalancerVip","getLoadbalancerVipOutput"], () => require("./getLoadbalancerVip"));

export { GetNatoverloadruleArgs, GetNatoverloadruleResult, GetNatoverloadruleOutputArgs } from "./getNatoverloadrule";
export const getNatoverloadrule: typeof import("./getNatoverloadrule").getNatoverloadrule = null as any;
export const getNatoverloadruleOutput: typeof import("./getNatoverloadrule").getNatoverloadruleOutput = null as any;
utilities.lazyLoad(exports, ["getNatoverloadrule","getNatoverloadruleOutput"], () => require("./getNatoverloadrule"));

export { GetNetworkArgs, GetNetworkResult, GetNetworkOutputArgs } from "./getNetwork";
export const getNetwork: typeof import("./getNetwork").getNetwork = null as any;
export const getNetworkOutput: typeof import("./getNetwork").getNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetwork","getNetworkOutput"], () => require("./getNetwork"));

export { GetNetworkpolicyArgs, GetNetworkpolicyResult, GetNetworkpolicyOutputArgs } from "./getNetworkpolicy";
export const getNetworkpolicy: typeof import("./getNetworkpolicy").getNetworkpolicy = null as any;
export const getNetworkpolicyOutput: typeof import("./getNetworkpolicy").getNetworkpolicyOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkpolicy","getNetworkpolicyOutput"], () => require("./getNetworkpolicy"));

export { GetNetworkruleArgs, GetNetworkruleResult, GetNetworkruleOutputArgs } from "./getNetworkrule";
export const getNetworkrule: typeof import("./getNetworkrule").getNetworkrule = null as any;
export const getNetworkruleOutput: typeof import("./getNetworkrule").getNetworkruleOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkrule","getNetworkruleOutput"], () => require("./getNetworkrule"));

export { GetNicArgs, GetNicResult, GetNicOutputArgs } from "./getNic";
export const getNic: typeof import("./getNic").getNic = null as any;
export const getNicOutput: typeof import("./getNic").getNicOutput = null as any;
utilities.lazyLoad(exports, ["getNic","getNicOutput"], () => require("./getNic"));

export { GetRegionArgs, GetRegionResult, GetRegionOutputArgs } from "./getRegion";
export const getRegion: typeof import("./getRegion").getRegion = null as any;
export const getRegionOutput: typeof import("./getRegion").getRegionOutput = null as any;
utilities.lazyLoad(exports, ["getRegion","getRegionOutput"], () => require("./getRegion"));

export { GetResourcetierArgs, GetResourcetierResult, GetResourcetierOutputArgs } from "./getResourcetier";
export const getResourcetier: typeof import("./getResourcetier").getResourcetier = null as any;
export const getResourcetierOutput: typeof import("./getResourcetier").getResourcetierOutput = null as any;
utilities.lazyLoad(exports, ["getResourcetier","getResourcetierOutput"], () => require("./getResourcetier"));

export { GetRouterArgs, GetRouterResult, GetRouterOutputArgs } from "./getRouter";
export const getRouter: typeof import("./getRouter").getRouter = null as any;
export const getRouterOutput: typeof import("./getRouter").getRouterOutput = null as any;
utilities.lazyLoad(exports, ["getRouter","getRouterOutput"], () => require("./getRouter"));

export { GetRouterThroughputArgs, GetRouterThroughputResult, GetRouterThroughputOutputArgs } from "./getRouterThroughput";
export const getRouterThroughput: typeof import("./getRouterThroughput").getRouterThroughput = null as any;
export const getRouterThroughputOutput: typeof import("./getRouterThroughput").getRouterThroughputOutput = null as any;
utilities.lazyLoad(exports, ["getRouterThroughput","getRouterThroughputOutput"], () => require("./getRouterThroughput"));

export { GetSshKeypairArgs, GetSshKeypairResult, GetSshKeypairOutputArgs } from "./getSshKeypair";
export const getSshKeypair: typeof import("./getSshKeypair").getSshKeypair = null as any;
export const getSshKeypairOutput: typeof import("./getSshKeypair").getSshKeypairOutput = null as any;
utilities.lazyLoad(exports, ["getSshKeypair","getSshKeypairOutput"], () => require("./getSshKeypair"));

export { GetVolumeArgs, GetVolumeResult, GetVolumeOutputArgs } from "./getVolume";
export const getVolume: typeof import("./getVolume").getVolume = null as any;
export const getVolumeOutput: typeof import("./getVolume").getVolumeOutput = null as any;
utilities.lazyLoad(exports, ["getVolume","getVolumeOutput"], () => require("./getVolume"));

export { GetVolumegroupArgs, GetVolumegroupResult, GetVolumegroupOutputArgs } from "./getVolumegroup";
export const getVolumegroup: typeof import("./getVolumegroup").getVolumegroup = null as any;
export const getVolumegroupOutput: typeof import("./getVolumegroup").getVolumegroupOutput = null as any;
utilities.lazyLoad(exports, ["getVolumegroup","getVolumegroupOutput"], () => require("./getVolumegroup"));

export { GetVpcArgs, GetVpcResult, GetVpcOutputArgs } from "./getVpc";
export const getVpc: typeof import("./getVpc").getVpc = null as any;
export const getVpcOutput: typeof import("./getVpc").getVpcOutput = null as any;
utilities.lazyLoad(exports, ["getVpc","getVpcOutput"], () => require("./getVpc"));

export { GetVpnEndpointArgs, GetVpnEndpointResult, GetVpnEndpointOutputArgs } from "./getVpnEndpoint";
export const getVpnEndpoint: typeof import("./getVpnEndpoint").getVpnEndpoint = null as any;
export const getVpnEndpointOutput: typeof import("./getVpnEndpoint").getVpnEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getVpnEndpoint","getVpnEndpointOutput"], () => require("./getVpnEndpoint"));

export { GetVpnProfileGroupArgs, GetVpnProfileGroupResult, GetVpnProfileGroupOutputArgs } from "./getVpnProfileGroup";
export const getVpnProfileGroup: typeof import("./getVpnProfileGroup").getVpnProfileGroup = null as any;
export const getVpnProfileGroupOutput: typeof import("./getVpnProfileGroup").getVpnProfileGroupOutput = null as any;
utilities.lazyLoad(exports, ["getVpnProfileGroup","getVpnProfileGroupOutput"], () => require("./getVpnProfileGroup"));

export { GetVpnServiceArgs, GetVpnServiceResult, GetVpnServiceOutputArgs } from "./getVpnService";
export const getVpnService: typeof import("./getVpnService").getVpnService = null as any;
export const getVpnServiceOutput: typeof import("./getVpnService").getVpnServiceOutput = null as any;
utilities.lazyLoad(exports, ["getVpnService","getVpnServiceOutput"], () => require("./getVpnService"));

export { GetVpnSessionArgs, GetVpnSessionResult, GetVpnSessionOutputArgs } from "./getVpnSession";
export const getVpnSession: typeof import("./getVpnSession").getVpnSession = null as any;
export const getVpnSessionOutput: typeof import("./getVpnSession").getVpnSessionOutput = null as any;
utilities.lazyLoad(exports, ["getVpnSession","getVpnSessionOutput"], () => require("./getVpnSession"));

export { HostArgs, HostState } from "./host";
export type Host = import("./host").Host;
export const Host: typeof import("./host").Host = null as any;
utilities.lazyLoad(exports, ["Host"], () => require("./host"));

export { HostgroupArgs, HostgroupState } from "./hostgroup";
export type Hostgroup = import("./hostgroup").Hostgroup;
export const Hostgroup: typeof import("./hostgroup").Hostgroup = null as any;
utilities.lazyLoad(exports, ["Hostgroup"], () => require("./hostgroup"));

export { ImageArgs, ImageState } from "./image";
export type Image = import("./image").Image;
export const Image: typeof import("./image").Image = null as any;
utilities.lazyLoad(exports, ["Image"], () => require("./image"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { InstanceScriptArgs, InstanceScriptState } from "./instanceScript";
export type InstanceScript = import("./instanceScript").InstanceScript;
export const InstanceScript: typeof import("./instanceScript").InstanceScript = null as any;
utilities.lazyLoad(exports, ["InstanceScript"], () => require("./instanceScript"));

export { IpaddressArgs, IpaddressState } from "./ipaddress";
export type Ipaddress = import("./ipaddress").Ipaddress;
export const Ipaddress: typeof import("./ipaddress").Ipaddress = null as any;
utilities.lazyLoad(exports, ["Ipaddress"], () => require("./ipaddress"));

export { LoadbalancerArgs, LoadbalancerState } from "./loadbalancer";
export type Loadbalancer = import("./loadbalancer").Loadbalancer;
export const Loadbalancer: typeof import("./loadbalancer").Loadbalancer = null as any;
utilities.lazyLoad(exports, ["Loadbalancer"], () => require("./loadbalancer"));

export { LoadbalancerVipArgs, LoadbalancerVipState } from "./loadbalancerVip";
export type LoadbalancerVip = import("./loadbalancerVip").LoadbalancerVip;
export const LoadbalancerVip: typeof import("./loadbalancerVip").LoadbalancerVip = null as any;
utilities.lazyLoad(exports, ["LoadbalancerVip"], () => require("./loadbalancerVip"));

export { NatoverloadruleArgs, NatoverloadruleState } from "./natoverloadrule";
export type Natoverloadrule = import("./natoverloadrule").Natoverloadrule;
export const Natoverloadrule: typeof import("./natoverloadrule").Natoverloadrule = null as any;
utilities.lazyLoad(exports, ["Natoverloadrule"], () => require("./natoverloadrule"));

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));

export { NetworkpolicyArgs, NetworkpolicyState } from "./networkpolicy";
export type Networkpolicy = import("./networkpolicy").Networkpolicy;
export const Networkpolicy: typeof import("./networkpolicy").Networkpolicy = null as any;
utilities.lazyLoad(exports, ["Networkpolicy"], () => require("./networkpolicy"));

export { NetworkruleArgs, NetworkruleState } from "./networkrule";
export type Networkrule = import("./networkrule").Networkrule;
export const Networkrule: typeof import("./networkrule").Networkrule = null as any;
utilities.lazyLoad(exports, ["Networkrule"], () => require("./networkrule"));

export { NicIpaddressBindingArgs, NicIpaddressBindingState } from "./nicIpaddressBinding";
export type NicIpaddressBinding = import("./nicIpaddressBinding").NicIpaddressBinding;
export const NicIpaddressBinding: typeof import("./nicIpaddressBinding").NicIpaddressBinding = null as any;
utilities.lazyLoad(exports, ["NicIpaddressBinding"], () => require("./nicIpaddressBinding"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RouterArgs, RouterState } from "./router";
export type Router = import("./router").Router;
export const Router: typeof import("./router").Router = null as any;
utilities.lazyLoad(exports, ["Router"], () => require("./router"));

export { SshKeypairArgs, SshKeypairState } from "./sshKeypair";
export type SshKeypair = import("./sshKeypair").SshKeypair;
export const SshKeypair: typeof import("./sshKeypair").SshKeypair = null as any;
utilities.lazyLoad(exports, ["SshKeypair"], () => require("./sshKeypair"));

export { VolumeArgs, VolumeState } from "./volume";
export type Volume = import("./volume").Volume;
export const Volume: typeof import("./volume").Volume = null as any;
utilities.lazyLoad(exports, ["Volume"], () => require("./volume"));

export { VolumegroupArgs, VolumegroupState } from "./volumegroup";
export type Volumegroup = import("./volumegroup").Volumegroup;
export const Volumegroup: typeof import("./volumegroup").Volumegroup = null as any;
utilities.lazyLoad(exports, ["Volumegroup"], () => require("./volumegroup"));

export { VolumegroupInstanceArgs, VolumegroupInstanceState } from "./volumegroupInstance";
export type VolumegroupInstance = import("./volumegroupInstance").VolumegroupInstance;
export const VolumegroupInstance: typeof import("./volumegroupInstance").VolumegroupInstance = null as any;
utilities.lazyLoad(exports, ["VolumegroupInstance"], () => require("./volumegroupInstance"));

export { VpcArgs, VpcState } from "./vpc";
export type Vpc = import("./vpc").Vpc;
export const Vpc: typeof import("./vpc").Vpc = null as any;
utilities.lazyLoad(exports, ["Vpc"], () => require("./vpc"));

export { VpnEndpointArgs, VpnEndpointState } from "./vpnEndpoint";
export type VpnEndpoint = import("./vpnEndpoint").VpnEndpoint;
export const VpnEndpoint: typeof import("./vpnEndpoint").VpnEndpoint = null as any;
utilities.lazyLoad(exports, ["VpnEndpoint"], () => require("./vpnEndpoint"));

export { VpnServiceArgs, VpnServiceState } from "./vpnService";
export type VpnService = import("./vpnService").VpnService;
export const VpnService: typeof import("./vpnService").VpnService = null as any;
utilities.lazyLoad(exports, ["VpnService"], () => require("./vpnService"));

export { VpnSessionArgs, VpnSessionState } from "./vpnSession";
export type VpnSession = import("./vpnSession").VpnSession;
export const VpnSession: typeof import("./vpnSession").VpnSession = null as any;
utilities.lazyLoad(exports, ["VpnSession"], () => require("./vpnSession"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ecloud:index/affinityrule:Affinityrule":
                return new Affinityrule(name, <any>undefined, { urn })
            case "ecloud:index/affinityruleMember:AffinityruleMember":
                return new AffinityruleMember(name, <any>undefined, { urn })
            case "ecloud:index/firewallpolicy:Firewallpolicy":
                return new Firewallpolicy(name, <any>undefined, { urn })
            case "ecloud:index/firewallrule:Firewallrule":
                return new Firewallrule(name, <any>undefined, { urn })
            case "ecloud:index/floatingip:Floatingip":
                return new Floatingip(name, <any>undefined, { urn })
            case "ecloud:index/host:Host":
                return new Host(name, <any>undefined, { urn })
            case "ecloud:index/hostgroup:Hostgroup":
                return new Hostgroup(name, <any>undefined, { urn })
            case "ecloud:index/image:Image":
                return new Image(name, <any>undefined, { urn })
            case "ecloud:index/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "ecloud:index/instanceScript:InstanceScript":
                return new InstanceScript(name, <any>undefined, { urn })
            case "ecloud:index/ipaddress:Ipaddress":
                return new Ipaddress(name, <any>undefined, { urn })
            case "ecloud:index/loadbalancer:Loadbalancer":
                return new Loadbalancer(name, <any>undefined, { urn })
            case "ecloud:index/loadbalancerVip:LoadbalancerVip":
                return new LoadbalancerVip(name, <any>undefined, { urn })
            case "ecloud:index/natoverloadrule:Natoverloadrule":
                return new Natoverloadrule(name, <any>undefined, { urn })
            case "ecloud:index/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "ecloud:index/networkpolicy:Networkpolicy":
                return new Networkpolicy(name, <any>undefined, { urn })
            case "ecloud:index/networkrule:Networkrule":
                return new Networkrule(name, <any>undefined, { urn })
            case "ecloud:index/nicIpaddressBinding:NicIpaddressBinding":
                return new NicIpaddressBinding(name, <any>undefined, { urn })
            case "ecloud:index/router:Router":
                return new Router(name, <any>undefined, { urn })
            case "ecloud:index/sshKeypair:SshKeypair":
                return new SshKeypair(name, <any>undefined, { urn })
            case "ecloud:index/volume:Volume":
                return new Volume(name, <any>undefined, { urn })
            case "ecloud:index/volumegroup:Volumegroup":
                return new Volumegroup(name, <any>undefined, { urn })
            case "ecloud:index/volumegroupInstance:VolumegroupInstance":
                return new VolumegroupInstance(name, <any>undefined, { urn })
            case "ecloud:index/vpc:Vpc":
                return new Vpc(name, <any>undefined, { urn })
            case "ecloud:index/vpnEndpoint:VpnEndpoint":
                return new VpnEndpoint(name, <any>undefined, { urn })
            case "ecloud:index/vpnService:VpnService":
                return new VpnService(name, <any>undefined, { urn })
            case "ecloud:index/vpnSession:VpnSession":
                return new VpnSession(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ecloud", "index/affinityrule", _module)
pulumi.runtime.registerResourceModule("ecloud", "index/affinityruleMember", _module)
pulumi.runtime.registerResourceModule("ecloud", "index/firewallpolicy", _module)
pulumi.runtime.registerResourceModule("ecloud", "index/firewallrule", _module)
pulumi.runtime.registerResourceModule("ecloud", "index/floatingip", _module)
pulumi.runtime.registerResourceModule("ecloud", "index/host", _module)
pulumi.runtime.registerResourceModule("ecloud", "index/hostgroup", _module)
pulumi.runtime.registerResourceModule("ecloud", "index/image", _module)
pulumi.runtime.registerResourceModule("ecloud", "index/instance", _module)
pulumi.runtime.registerResourceModule("ecloud", "index/instanceScript", _module)
pulumi.runtime.registerResourceModule("ecloud", "index/ipaddress", _module)
pulumi.runtime.registerResourceModule("ecloud", "index/loadbalancer", _module)
pulumi.runtime.registerResourceModule("ecloud", "index/loadbalancerVip", _module)
pulumi.runtime.registerResourceModule("ecloud", "index/natoverloadrule", _module)
pulumi.runtime.registerResourceModule("ecloud", "index/network", _module)
pulumi.runtime.registerResourceModule("ecloud", "index/networkpolicy", _module)
pulumi.runtime.registerResourceModule("ecloud", "index/networkrule", _module)
pulumi.runtime.registerResourceModule("ecloud", "index/nicIpaddressBinding", _module)
pulumi.runtime.registerResourceModule("ecloud", "index/router", _module)
pulumi.runtime.registerResourceModule("ecloud", "index/sshKeypair", _module)
pulumi.runtime.registerResourceModule("ecloud", "index/volume", _module)
pulumi.runtime.registerResourceModule("ecloud", "index/volumegroup", _module)
pulumi.runtime.registerResourceModule("ecloud", "index/volumegroupInstance", _module)
pulumi.runtime.registerResourceModule("ecloud", "index/vpc", _module)
pulumi.runtime.registerResourceModule("ecloud", "index/vpnEndpoint", _module)
pulumi.runtime.registerResourceModule("ecloud", "index/vpnService", _module)
pulumi.runtime.registerResourceModule("ecloud", "index/vpnSession", _module)
pulumi.runtime.registerResourcePackage("ecloud", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:ecloud") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
