// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VpnSession extends pulumi.CustomResource {
    /**
     * Get an existing VpnSession resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnSessionState, opts?: pulumi.CustomResourceOptions): VpnSession {
        return new VpnSession(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ecloud:index/vpnSession:VpnSession';

    /**
     * Returns true if the given object is an instance of VpnSession.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnSession {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnSession.__pulumiType;
    }

    public readonly localNetworks!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly psk!: pulumi.Output<string>;
    public readonly remoteIp!: pulumi.Output<string>;
    public readonly remoteNetworks!: pulumi.Output<string | undefined>;
    public readonly vpnEndpointId!: pulumi.Output<string>;
    public readonly vpnProfileGroupId!: pulumi.Output<string>;
    public readonly vpnServiceId!: pulumi.Output<string>;

    /**
     * Create a VpnSession resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpnSessionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnSessionArgs | VpnSessionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnSessionState | undefined;
            resourceInputs["localNetworks"] = state ? state.localNetworks : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["psk"] = state ? state.psk : undefined;
            resourceInputs["remoteIp"] = state ? state.remoteIp : undefined;
            resourceInputs["remoteNetworks"] = state ? state.remoteNetworks : undefined;
            resourceInputs["vpnEndpointId"] = state ? state.vpnEndpointId : undefined;
            resourceInputs["vpnProfileGroupId"] = state ? state.vpnProfileGroupId : undefined;
            resourceInputs["vpnServiceId"] = state ? state.vpnServiceId : undefined;
        } else {
            const args = argsOrState as VpnSessionArgs | undefined;
            if ((!args || args.remoteIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteIp'");
            }
            if ((!args || args.vpnEndpointId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpnEndpointId'");
            }
            if ((!args || args.vpnProfileGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpnProfileGroupId'");
            }
            if ((!args || args.vpnServiceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpnServiceId'");
            }
            resourceInputs["localNetworks"] = args ? args.localNetworks : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["psk"] = args?.psk ? pulumi.secret(args.psk) : undefined;
            resourceInputs["remoteIp"] = args ? args.remoteIp : undefined;
            resourceInputs["remoteNetworks"] = args ? args.remoteNetworks : undefined;
            resourceInputs["vpnEndpointId"] = args ? args.vpnEndpointId : undefined;
            resourceInputs["vpnProfileGroupId"] = args ? args.vpnProfileGroupId : undefined;
            resourceInputs["vpnServiceId"] = args ? args.vpnServiceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["psk"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(VpnSession.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpnSession resources.
 */
export interface VpnSessionState {
    localNetworks?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    psk?: pulumi.Input<string>;
    remoteIp?: pulumi.Input<string>;
    remoteNetworks?: pulumi.Input<string>;
    vpnEndpointId?: pulumi.Input<string>;
    vpnProfileGroupId?: pulumi.Input<string>;
    vpnServiceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpnSession resource.
 */
export interface VpnSessionArgs {
    localNetworks?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    psk?: pulumi.Input<string>;
    remoteIp: pulumi.Input<string>;
    remoteNetworks?: pulumi.Input<string>;
    vpnEndpointId: pulumi.Input<string>;
    vpnProfileGroupId: pulumi.Input<string>;
    vpnServiceId: pulumi.Input<string>;
}
