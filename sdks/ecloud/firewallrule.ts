// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Firewallrule extends pulumi.CustomResource {
    /**
     * Get an existing Firewallrule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallruleState, opts?: pulumi.CustomResourceOptions): Firewallrule {
        return new Firewallrule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ecloud:index/firewallrule:Firewallrule';

    /**
     * Returns true if the given object is an instance of Firewallrule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Firewallrule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Firewallrule.__pulumiType;
    }

    public readonly action!: pulumi.Output<string>;
    public readonly destination!: pulumi.Output<string>;
    public readonly direction!: pulumi.Output<string>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly firewallPolicyId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly ports!: pulumi.Output<outputs.FirewallrulePort[] | undefined>;
    public readonly sequence!: pulumi.Output<number>;
    public readonly source!: pulumi.Output<string>;

    /**
     * Create a Firewallrule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirewallruleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallruleArgs | FirewallruleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallruleState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["destination"] = state ? state.destination : undefined;
            resourceInputs["direction"] = state ? state.direction : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["firewallPolicyId"] = state ? state.firewallPolicyId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ports"] = state ? state.ports : undefined;
            resourceInputs["sequence"] = state ? state.sequence : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
        } else {
            const args = argsOrState as FirewallruleArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.destination === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destination'");
            }
            if ((!args || args.direction === undefined) && !opts.urn) {
                throw new Error("Missing required property 'direction'");
            }
            if ((!args || args.firewallPolicyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'firewallPolicyId'");
            }
            if ((!args || args.sequence === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sequence'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["direction"] = args ? args.direction : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["firewallPolicyId"] = args ? args.firewallPolicyId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ports"] = args ? args.ports : undefined;
            resourceInputs["sequence"] = args ? args.sequence : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Firewallrule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Firewallrule resources.
 */
export interface FirewallruleState {
    action?: pulumi.Input<string>;
    destination?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    firewallPolicyId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ports?: pulumi.Input<pulumi.Input<inputs.FirewallrulePort>[]>;
    sequence?: pulumi.Input<number>;
    source?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Firewallrule resource.
 */
export interface FirewallruleArgs {
    action: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    direction: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    firewallPolicyId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ports?: pulumi.Input<pulumi.Input<inputs.FirewallrulePort>[]>;
    sequence: pulumi.Input<number>;
    source: pulumi.Input<string>;
}
