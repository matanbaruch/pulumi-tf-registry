// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceState, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ecloud:index/instance:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    public readonly backupEnabled!: pulumi.Output<boolean | undefined>;
    public readonly dataVolumeIds!: pulumi.Output<string[]>;
    public readonly encrypted!: pulumi.Output<boolean | undefined>;
    public readonly floatingIpId!: pulumi.Output<string | undefined>;
    public readonly hostGroupId!: pulumi.Output<string | undefined>;
    public readonly imageData!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly imageId!: pulumi.Output<string>;
    public readonly ipAddress!: pulumi.Output<string | undefined>;
    public readonly locked!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly nicId!: pulumi.Output<string>;
    public readonly ramCapacity!: pulumi.Output<number>;
    public readonly requiresFloatingIp!: pulumi.Output<boolean | undefined>;
    public readonly resourceTierId!: pulumi.Output<string>;
    public readonly sshKeypairIds!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.InstanceTimeouts | undefined>;
    public readonly userScript!: pulumi.Output<string | undefined>;
    public readonly vcpu!: pulumi.Output<outputs.InstanceVcpu | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly vcpuCores!: pulumi.Output<number>;
    public readonly volumeCapacity!: pulumi.Output<number>;
    public readonly volumeGroupId!: pulumi.Output<string>;
    public /*out*/ readonly volumeId!: pulumi.Output<string>;
    public readonly volumeIops!: pulumi.Output<number>;
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArgs | InstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceState | undefined;
            resourceInputs["backupEnabled"] = state ? state.backupEnabled : undefined;
            resourceInputs["dataVolumeIds"] = state ? state.dataVolumeIds : undefined;
            resourceInputs["encrypted"] = state ? state.encrypted : undefined;
            resourceInputs["floatingIpId"] = state ? state.floatingIpId : undefined;
            resourceInputs["hostGroupId"] = state ? state.hostGroupId : undefined;
            resourceInputs["imageData"] = state ? state.imageData : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["locked"] = state ? state.locked : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["nicId"] = state ? state.nicId : undefined;
            resourceInputs["ramCapacity"] = state ? state.ramCapacity : undefined;
            resourceInputs["requiresFloatingIp"] = state ? state.requiresFloatingIp : undefined;
            resourceInputs["resourceTierId"] = state ? state.resourceTierId : undefined;
            resourceInputs["sshKeypairIds"] = state ? state.sshKeypairIds : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userScript"] = state ? state.userScript : undefined;
            resourceInputs["vcpu"] = state ? state.vcpu : undefined;
            resourceInputs["vcpuCores"] = state ? state.vcpuCores : undefined;
            resourceInputs["volumeCapacity"] = state ? state.volumeCapacity : undefined;
            resourceInputs["volumeGroupId"] = state ? state.volumeGroupId : undefined;
            resourceInputs["volumeId"] = state ? state.volumeId : undefined;
            resourceInputs["volumeIops"] = state ? state.volumeIops : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as InstanceArgs | undefined;
            if ((!args || args.imageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageId'");
            }
            if ((!args || args.ramCapacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ramCapacity'");
            }
            if ((!args || args.volumeCapacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumeCapacity'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["backupEnabled"] = args ? args.backupEnabled : undefined;
            resourceInputs["dataVolumeIds"] = args ? args.dataVolumeIds : undefined;
            resourceInputs["encrypted"] = args ? args.encrypted : undefined;
            resourceInputs["floatingIpId"] = args ? args.floatingIpId : undefined;
            resourceInputs["hostGroupId"] = args ? args.hostGroupId : undefined;
            resourceInputs["imageData"] = args ? args.imageData : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["locked"] = args ? args.locked : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["ramCapacity"] = args ? args.ramCapacity : undefined;
            resourceInputs["requiresFloatingIp"] = args ? args.requiresFloatingIp : undefined;
            resourceInputs["resourceTierId"] = args ? args.resourceTierId : undefined;
            resourceInputs["sshKeypairIds"] = args ? args.sshKeypairIds : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userScript"] = args ? args.userScript : undefined;
            resourceInputs["vcpu"] = args ? args.vcpu : undefined;
            resourceInputs["vcpuCores"] = args ? args.vcpuCores : undefined;
            resourceInputs["volumeCapacity"] = args ? args.volumeCapacity : undefined;
            resourceInputs["volumeGroupId"] = args ? args.volumeGroupId : undefined;
            resourceInputs["volumeIops"] = args ? args.volumeIops : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["nicId"] = undefined /*out*/;
            resourceInputs["volumeId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Instance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Instance resources.
 */
export interface InstanceState {
    backupEnabled?: pulumi.Input<boolean>;
    dataVolumeIds?: pulumi.Input<pulumi.Input<string>[]>;
    encrypted?: pulumi.Input<boolean>;
    floatingIpId?: pulumi.Input<string>;
    hostGroupId?: pulumi.Input<string>;
    imageData?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    imageId?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    locked?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    nicId?: pulumi.Input<string>;
    ramCapacity?: pulumi.Input<number>;
    requiresFloatingIp?: pulumi.Input<boolean>;
    resourceTierId?: pulumi.Input<string>;
    sshKeypairIds?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.InstanceTimeouts>;
    userScript?: pulumi.Input<string>;
    vcpu?: pulumi.Input<inputs.InstanceVcpu>;
    /**
     * @deprecated Deprecated
     */
    vcpuCores?: pulumi.Input<number>;
    volumeCapacity?: pulumi.Input<number>;
    volumeGroupId?: pulumi.Input<string>;
    volumeId?: pulumi.Input<string>;
    volumeIops?: pulumi.Input<number>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    backupEnabled?: pulumi.Input<boolean>;
    dataVolumeIds?: pulumi.Input<pulumi.Input<string>[]>;
    encrypted?: pulumi.Input<boolean>;
    floatingIpId?: pulumi.Input<string>;
    hostGroupId?: pulumi.Input<string>;
    imageData?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    imageId: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    locked?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    ramCapacity: pulumi.Input<number>;
    requiresFloatingIp?: pulumi.Input<boolean>;
    resourceTierId?: pulumi.Input<string>;
    sshKeypairIds?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.InstanceTimeouts>;
    userScript?: pulumi.Input<string>;
    vcpu?: pulumi.Input<inputs.InstanceVcpu>;
    /**
     * @deprecated Deprecated
     */
    vcpuCores?: pulumi.Input<number>;
    volumeCapacity: pulumi.Input<number>;
    volumeGroupId?: pulumi.Input<string>;
    volumeIops?: pulumi.Input<number>;
    vpcId: pulumi.Input<string>;
}
