// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getMsgVpnBridgeRemoteSubscription(args: GetMsgVpnBridgeRemoteSubscriptionArgs, opts?: pulumi.InvokeOptions): Promise<GetMsgVpnBridgeRemoteSubscriptionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("solacebrokerappliance:index/getMsgVpnBridgeRemoteSubscription:getMsgVpnBridgeRemoteSubscription", {
        "bridgeName": args.bridgeName,
        "bridgeVirtualRouter": args.bridgeVirtualRouter,
        "msgVpnName": args.msgVpnName,
        "remoteSubscriptionTopic": args.remoteSubscriptionTopic,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMsgVpnBridgeRemoteSubscription.
 */
export interface GetMsgVpnBridgeRemoteSubscriptionArgs {
    bridgeName: string;
    bridgeVirtualRouter: string;
    msgVpnName: string;
    remoteSubscriptionTopic: string;
}

/**
 * A collection of values returned by getMsgVpnBridgeRemoteSubscription.
 */
export interface GetMsgVpnBridgeRemoteSubscriptionResult {
    readonly bridgeName: string;
    readonly bridgeVirtualRouter: string;
    readonly deliverAlwaysEnabled: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly msgVpnName: string;
    readonly remoteSubscriptionTopic: string;
}
export function getMsgVpnBridgeRemoteSubscriptionOutput(args: GetMsgVpnBridgeRemoteSubscriptionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMsgVpnBridgeRemoteSubscriptionResult> {
    return pulumi.output(args).apply((a: any) => getMsgVpnBridgeRemoteSubscription(a, opts))
}

/**
 * A collection of arguments for invoking getMsgVpnBridgeRemoteSubscription.
 */
export interface GetMsgVpnBridgeRemoteSubscriptionOutputArgs {
    bridgeName: pulumi.Input<string>;
    bridgeVirtualRouter: pulumi.Input<string>;
    msgVpnName: pulumi.Input<string>;
    remoteSubscriptionTopic: pulumi.Input<string>;
}
