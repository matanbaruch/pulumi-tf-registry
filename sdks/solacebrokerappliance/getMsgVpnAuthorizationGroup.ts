// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getMsgVpnAuthorizationGroup(args: GetMsgVpnAuthorizationGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetMsgVpnAuthorizationGroupResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("solacebrokerappliance:index/getMsgVpnAuthorizationGroup:getMsgVpnAuthorizationGroup", {
        "authorizationGroupName": args.authorizationGroupName,
        "msgVpnName": args.msgVpnName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMsgVpnAuthorizationGroup.
 */
export interface GetMsgVpnAuthorizationGroupArgs {
    authorizationGroupName: string;
    msgVpnName: string;
}

/**
 * A collection of values returned by getMsgVpnAuthorizationGroup.
 */
export interface GetMsgVpnAuthorizationGroupResult {
    readonly aclProfileName: string;
    readonly authorizationGroupName: string;
    readonly clientProfileName: string;
    readonly enabled: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly msgVpnName: string;
}
export function getMsgVpnAuthorizationGroupOutput(args: GetMsgVpnAuthorizationGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMsgVpnAuthorizationGroupResult> {
    return pulumi.output(args).apply((a: any) => getMsgVpnAuthorizationGroup(a, opts))
}

/**
 * A collection of arguments for invoking getMsgVpnAuthorizationGroup.
 */
export interface GetMsgVpnAuthorizationGroupOutputArgs {
    authorizationGroupName: pulumi.Input<string>;
    msgVpnName: pulumi.Input<string>;
}
