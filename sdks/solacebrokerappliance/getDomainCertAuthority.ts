// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getDomainCertAuthority(args: GetDomainCertAuthorityArgs, opts?: pulumi.InvokeOptions): Promise<GetDomainCertAuthorityResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("solacebrokerappliance:index/getDomainCertAuthority:getDomainCertAuthority", {
        "certAuthorityName": args.certAuthorityName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDomainCertAuthority.
 */
export interface GetDomainCertAuthorityArgs {
    certAuthorityName: string;
}

/**
 * A collection of values returned by getDomainCertAuthority.
 */
export interface GetDomainCertAuthorityResult {
    readonly certAuthorityName: string;
    readonly certContent: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
}
export function getDomainCertAuthorityOutput(args: GetDomainCertAuthorityOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDomainCertAuthorityResult> {
    return pulumi.output(args).apply((a: any) => getDomainCertAuthority(a, opts))
}

/**
 * A collection of arguments for invoking getDomainCertAuthority.
 */
export interface GetDomainCertAuthorityOutputArgs {
    certAuthorityName: pulumi.Input<string>;
}
