// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMsgVpnMqttSession(args: GetMsgVpnMqttSessionArgs, opts?: pulumi.InvokeOptions): Promise<GetMsgVpnMqttSessionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("solacebrokerappliance:index/getMsgVpnMqttSession:getMsgVpnMqttSession", {
        "mqttSessionClientId": args.mqttSessionClientId,
        "mqttSessionVirtualRouter": args.mqttSessionVirtualRouter,
        "msgVpnName": args.msgVpnName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMsgVpnMqttSession.
 */
export interface GetMsgVpnMqttSessionArgs {
    mqttSessionClientId: string;
    mqttSessionVirtualRouter: string;
    msgVpnName: string;
}

/**
 * A collection of values returned by getMsgVpnMqttSession.
 */
export interface GetMsgVpnMqttSessionResult {
    readonly enabled: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly mqttSessionClientId: string;
    readonly mqttSessionVirtualRouter: string;
    readonly msgVpnName: string;
    readonly owner: string;
    readonly queueConsumerAckPropagationEnabled: boolean;
    readonly queueDeadMsgQueue: string;
    readonly queueEventBindCountThreshold: outputs.GetMsgVpnMqttSessionQueueEventBindCountThreshold;
    readonly queueEventMsgSpoolUsageThreshold: outputs.GetMsgVpnMqttSessionQueueEventMsgSpoolUsageThreshold;
    readonly queueEventRejectLowPriorityMsgLimitThreshold: outputs.GetMsgVpnMqttSessionQueueEventRejectLowPriorityMsgLimitThreshold;
    readonly queueMaxBindCount: number;
    readonly queueMaxDeliveredUnackedMsgsPerFlow: number;
    readonly queueMaxMsgSize: number;
    readonly queueMaxMsgSpoolUsage: number;
    readonly queueMaxRedeliveryCount: number;
    readonly queueMaxTtl: number;
    readonly queueRejectLowPriorityMsgEnabled: boolean;
    readonly queueRejectLowPriorityMsgLimit: number;
    readonly queueRejectMsgToSenderOnDiscardBehavior: string;
    readonly queueRespectTtlEnabled: boolean;
}
export function getMsgVpnMqttSessionOutput(args: GetMsgVpnMqttSessionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMsgVpnMqttSessionResult> {
    return pulumi.output(args).apply((a: any) => getMsgVpnMqttSession(a, opts))
}

/**
 * A collection of arguments for invoking getMsgVpnMqttSession.
 */
export interface GetMsgVpnMqttSessionOutputArgs {
    mqttSessionClientId: pulumi.Input<string>;
    mqttSessionVirtualRouter: pulumi.Input<string>;
    msgVpnName: pulumi.Input<string>;
}
