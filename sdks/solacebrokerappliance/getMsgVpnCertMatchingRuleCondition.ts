// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getMsgVpnCertMatchingRuleCondition(args: GetMsgVpnCertMatchingRuleConditionArgs, opts?: pulumi.InvokeOptions): Promise<GetMsgVpnCertMatchingRuleConditionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("solacebrokerappliance:index/getMsgVpnCertMatchingRuleCondition:getMsgVpnCertMatchingRuleCondition", {
        "msgVpnName": args.msgVpnName,
        "ruleName": args.ruleName,
        "source": args.source,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMsgVpnCertMatchingRuleCondition.
 */
export interface GetMsgVpnCertMatchingRuleConditionArgs {
    msgVpnName: string;
    ruleName: string;
    source: string;
}

/**
 * A collection of values returned by getMsgVpnCertMatchingRuleCondition.
 */
export interface GetMsgVpnCertMatchingRuleConditionResult {
    readonly attribute: string;
    readonly expression: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly msgVpnName: string;
    readonly ruleName: string;
    readonly source: string;
}
export function getMsgVpnCertMatchingRuleConditionOutput(args: GetMsgVpnCertMatchingRuleConditionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMsgVpnCertMatchingRuleConditionResult> {
    return pulumi.output(args).apply((a: any) => getMsgVpnCertMatchingRuleCondition(a, opts))
}

/**
 * A collection of arguments for invoking getMsgVpnCertMatchingRuleCondition.
 */
export interface GetMsgVpnCertMatchingRuleConditionOutputArgs {
    msgVpnName: pulumi.Input<string>;
    ruleName: pulumi.Input<string>;
    source: pulumi.Input<string>;
}
