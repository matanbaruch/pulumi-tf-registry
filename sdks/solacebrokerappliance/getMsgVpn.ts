// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMsgVpn(args: GetMsgVpnArgs, opts?: pulumi.InvokeOptions): Promise<GetMsgVpnResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("solacebrokerappliance:index/getMsgVpn:getMsgVpn", {
        "msgVpnName": args.msgVpnName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMsgVpn.
 */
export interface GetMsgVpnArgs {
    msgVpnName: string;
}

/**
 * A collection of values returned by getMsgVpn.
 */
export interface GetMsgVpnResult {
    readonly alias: string;
    readonly authenticationBasicEnabled: boolean;
    readonly authenticationBasicProfileName: string;
    readonly authenticationBasicRadiusDomain: string;
    readonly authenticationBasicType: string;
    readonly authenticationClientCertAllowApiProvidedUsernameEnabled: boolean;
    readonly authenticationClientCertCertificateMatchingRulesEnabled: boolean;
    readonly authenticationClientCertEnabled: boolean;
    readonly authenticationClientCertMaxChainDepth: number;
    readonly authenticationClientCertRevocationCheckMode: string;
    readonly authenticationClientCertUsernameSource: string;
    readonly authenticationClientCertValidateDateEnabled: boolean;
    readonly authenticationKerberosAllowApiProvidedUsernameEnabled: boolean;
    readonly authenticationKerberosEnabled: boolean;
    readonly authenticationOauthDefaultProfileName: string;
    readonly authenticationOauthEnabled: boolean;
    readonly authorizationLdapGroupMembershipAttributeName: string;
    readonly authorizationLdapTrimClientUsernameDomainEnabled: boolean;
    readonly authorizationProfileName: string;
    readonly authorizationType: string;
    readonly bridgingTlsServerCertMaxChainDepth: number;
    readonly bridgingTlsServerCertValidateDateEnabled: boolean;
    readonly bridgingTlsServerCertValidateNameEnabled: boolean;
    readonly dmrEnabled: boolean;
    readonly enabled: boolean;
    readonly eventConnectionCountThreshold: outputs.GetMsgVpnEventConnectionCountThreshold;
    readonly eventEgressFlowCountThreshold: outputs.GetMsgVpnEventEgressFlowCountThreshold;
    readonly eventEgressMsgRateThreshold: outputs.GetMsgVpnEventEgressMsgRateThreshold;
    readonly eventEndpointCountThreshold: outputs.GetMsgVpnEventEndpointCountThreshold;
    readonly eventIngressFlowCountThreshold: outputs.GetMsgVpnEventIngressFlowCountThreshold;
    readonly eventIngressMsgRateThreshold: outputs.GetMsgVpnEventIngressMsgRateThreshold;
    readonly eventLargeMsgThreshold: number;
    readonly eventLogTag: string;
    readonly eventMsgSpoolUsageThreshold: outputs.GetMsgVpnEventMsgSpoolUsageThreshold;
    readonly eventPublishClientEnabled: boolean;
    readonly eventPublishMsgVpnEnabled: boolean;
    readonly eventPublishSubscriptionMode: string;
    readonly eventPublishTopicFormatMqttEnabled: boolean;
    readonly eventPublishTopicFormatSmfEnabled: boolean;
    readonly eventServiceAmqpConnectionCountThreshold: outputs.GetMsgVpnEventServiceAmqpConnectionCountThreshold;
    readonly eventServiceMqttConnectionCountThreshold: outputs.GetMsgVpnEventServiceMqttConnectionCountThreshold;
    readonly eventServiceRestIncomingConnectionCountThreshold: outputs.GetMsgVpnEventServiceRestIncomingConnectionCountThreshold;
    readonly eventServiceSmfConnectionCountThreshold: outputs.GetMsgVpnEventServiceSmfConnectionCountThreshold;
    readonly eventServiceWebConnectionCountThreshold: outputs.GetMsgVpnEventServiceWebConnectionCountThreshold;
    readonly eventSubscriptionCountThreshold: outputs.GetMsgVpnEventSubscriptionCountThreshold;
    readonly eventTransactedSessionCountThreshold: outputs.GetMsgVpnEventTransactedSessionCountThreshold;
    readonly eventTransactionCountThreshold: outputs.GetMsgVpnEventTransactionCountThreshold;
    readonly exportSubscriptionsEnabled: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly jndiEnabled: boolean;
    readonly maxConnectionCount: number;
    readonly maxEgressFlowCount: number;
    readonly maxEndpointCount: number;
    readonly maxIngressFlowCount: number;
    readonly maxMsgSpoolUsage: number;
    readonly maxSubscriptionCount: number;
    readonly maxTransactedSessionCount: number;
    readonly maxTransactionCount: number;
    readonly mqttRetainMaxMemory: number;
    readonly msgVpnName: string;
    readonly replicationAckPropagationIntervalMsgCount: number;
    readonly replicationBridgeAuthenticationBasicClientUsername: string;
    readonly replicationBridgeAuthenticationScheme: string;
    readonly replicationBridgeCompressedDataEnabled: boolean;
    readonly replicationBridgeEgressFlowWindowSize: number;
    readonly replicationBridgeRetryDelay: number;
    readonly replicationBridgeTlsEnabled: boolean;
    readonly replicationBridgeUnidirectionalClientProfileName: string;
    readonly replicationEnabled: boolean;
    readonly replicationQueueMaxMsgSpoolUsage: number;
    readonly replicationQueueRejectMsgToSenderOnDiscardEnabled: boolean;
    readonly replicationRejectMsgWhenSyncIneligibleEnabled: boolean;
    readonly replicationRole: string;
    readonly replicationTransactionMode: string;
    readonly restTlsServerCertMaxChainDepth: number;
    readonly restTlsServerCertValidateDateEnabled: boolean;
    readonly restTlsServerCertValidateNameEnabled: boolean;
    readonly sempOverMsgBusAdminClientEnabled: boolean;
    readonly sempOverMsgBusAdminDistributedCacheEnabled: boolean;
    readonly sempOverMsgBusAdminEnabled: boolean;
    readonly sempOverMsgBusEnabled: boolean;
    readonly sempOverMsgBusLegacyShowClearEnabled: boolean;
    readonly sempOverMsgBusShowEnabled: boolean;
    readonly serviceAmqpMaxConnectionCount: number;
    readonly serviceAmqpPlainTextEnabled: boolean;
    readonly serviceAmqpPlainTextListenPort: number;
    readonly serviceAmqpTlsEnabled: boolean;
    readonly serviceAmqpTlsListenPort: number;
    readonly serviceMqttAuthenticationClientCertRequest: string;
    readonly serviceMqttMaxConnectionCount: number;
    readonly serviceMqttPlainTextEnabled: boolean;
    readonly serviceMqttPlainTextListenPort: number;
    readonly serviceMqttTlsEnabled: boolean;
    readonly serviceMqttTlsListenPort: number;
    readonly serviceMqttTlsWebSocketEnabled: boolean;
    readonly serviceMqttTlsWebSocketListenPort: number;
    readonly serviceMqttWebSocketEnabled: boolean;
    readonly serviceMqttWebSocketListenPort: number;
    readonly serviceRestIncomingAuthenticationClientCertRequest: string;
    readonly serviceRestIncomingAuthorizationHeaderHandling: string;
    readonly serviceRestIncomingMaxConnectionCount: number;
    readonly serviceRestIncomingPlainTextEnabled: boolean;
    readonly serviceRestIncomingPlainTextListenPort: number;
    readonly serviceRestIncomingTlsEnabled: boolean;
    readonly serviceRestIncomingTlsListenPort: number;
    readonly serviceRestMode: string;
    readonly serviceRestOutgoingMaxConnectionCount: number;
    readonly serviceSmfMaxConnectionCount: number;
    readonly serviceSmfPlainTextEnabled: boolean;
    readonly serviceSmfTlsEnabled: boolean;
    readonly serviceWebAuthenticationClientCertRequest: string;
    readonly serviceWebMaxConnectionCount: number;
    readonly serviceWebPlainTextEnabled: boolean;
    readonly serviceWebTlsEnabled: boolean;
    readonly tlsAllowDowngradeToPlainTextEnabled: boolean;
}
export function getMsgVpnOutput(args: GetMsgVpnOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMsgVpnResult> {
    return pulumi.output(args).apply((a: any) => getMsgVpn(a, opts))
}

/**
 * A collection of arguments for invoking getMsgVpn.
 */
export interface GetMsgVpnOutputArgs {
    msgVpnName: pulumi.Input<string>;
}
