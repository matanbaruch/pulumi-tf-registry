// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getMsgVpnReplayLog(args: GetMsgVpnReplayLogArgs, opts?: pulumi.InvokeOptions): Promise<GetMsgVpnReplayLogResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("solacebrokerappliance:index/getMsgVpnReplayLog:getMsgVpnReplayLog", {
        "msgVpnName": args.msgVpnName,
        "replayLogName": args.replayLogName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMsgVpnReplayLog.
 */
export interface GetMsgVpnReplayLogArgs {
    msgVpnName: string;
    replayLogName: string;
}

/**
 * A collection of values returned by getMsgVpnReplayLog.
 */
export interface GetMsgVpnReplayLogResult {
    readonly egressEnabled: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ingressEnabled: boolean;
    readonly maxSpoolUsage: number;
    readonly msgVpnName: string;
    readonly replayLogName: string;
    readonly topicFilterEnabled: boolean;
}
export function getMsgVpnReplayLogOutput(args: GetMsgVpnReplayLogOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMsgVpnReplayLogResult> {
    return pulumi.output(args).apply((a: any) => getMsgVpnReplayLog(a, opts))
}

/**
 * A collection of arguments for invoking getMsgVpnReplayLog.
 */
export interface GetMsgVpnReplayLogOutputArgs {
    msgVpnName: pulumi.Input<string>;
    replayLogName: pulumi.Input<string>;
}
