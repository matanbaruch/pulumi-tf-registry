// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDmrClusterLink(args: GetDmrClusterLinkArgs, opts?: pulumi.InvokeOptions): Promise<GetDmrClusterLinkResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("solacebrokerappliance:index/getDmrClusterLink:getDmrClusterLink", {
        "dmrClusterName": args.dmrClusterName,
        "remoteNodeName": args.remoteNodeName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDmrClusterLink.
 */
export interface GetDmrClusterLinkArgs {
    dmrClusterName: string;
    remoteNodeName: string;
}

/**
 * A collection of values returned by getDmrClusterLink.
 */
export interface GetDmrClusterLinkResult {
    readonly authenticationScheme: string;
    readonly clientProfileQueueControl1MaxDepth: number;
    readonly clientProfileQueueControl1MinMsgBurst: number;
    readonly clientProfileQueueDirect1MaxDepth: number;
    readonly clientProfileQueueDirect1MinMsgBurst: number;
    readonly clientProfileQueueDirect2MaxDepth: number;
    readonly clientProfileQueueDirect2MinMsgBurst: number;
    readonly clientProfileQueueDirect3MaxDepth: number;
    readonly clientProfileQueueDirect3MinMsgBurst: number;
    readonly clientProfileQueueGuaranteed1MaxDepth: number;
    readonly clientProfileQueueGuaranteed1MinMsgBurst: number;
    readonly clientProfileTcpCongestionWindowSize: number;
    readonly clientProfileTcpKeepaliveCount: number;
    readonly clientProfileTcpKeepaliveIdleTime: number;
    readonly clientProfileTcpKeepaliveInterval: number;
    readonly clientProfileTcpMaxSegmentSize: number;
    readonly clientProfileTcpMaxWindowSize: number;
    readonly connectionRetryCount: number;
    readonly connectionRetryDelay: number;
    readonly dmrClusterName: string;
    readonly egressFlowWindowSize: number;
    readonly enabled: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly initiator: string;
    readonly queueDeadMsgQueue: string;
    readonly queueEventSpoolUsageThreshold: outputs.GetDmrClusterLinkQueueEventSpoolUsageThreshold;
    readonly queueMaxDeliveredUnackedMsgsPerFlow: number;
    readonly queueMaxMsgSpoolUsage: number;
    readonly queueMaxRedeliveryCount: number;
    readonly queueMaxTtl: number;
    readonly queueRejectMsgToSenderOnDiscardBehavior: string;
    readonly queueRespectTtlEnabled: boolean;
    readonly remoteNodeName: string;
    readonly span: string;
    readonly transportCompressedEnabled: boolean;
    readonly transportTlsEnabled: boolean;
}
export function getDmrClusterLinkOutput(args: GetDmrClusterLinkOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDmrClusterLinkResult> {
    return pulumi.output(args).apply((a: any) => getDmrClusterLink(a, opts))
}

/**
 * A collection of arguments for invoking getDmrClusterLink.
 */
export interface GetDmrClusterLinkOutputArgs {
    dmrClusterName: pulumi.Input<string>;
    remoteNodeName: pulumi.Input<string>;
}
