// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CloudaccountAws extends pulumi.CustomResource {
    /**
     * Get an existing CloudaccountAws resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudaccountAwsState, opts?: pulumi.CustomResourceOptions): CloudaccountAws {
        return new CloudaccountAws(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spectrocloud:index/cloudaccountAws:CloudaccountAws';

    /**
     * Returns true if the given object is an instance of CloudaccountAws.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudaccountAws {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudaccountAws.__pulumiType;
    }

    public readonly arn!: pulumi.Output<string | undefined>;
    public readonly awsAccessKey!: pulumi.Output<string | undefined>;
    public readonly awsSecretKey!: pulumi.Output<string | undefined>;
    public readonly context!: pulumi.Output<string | undefined>;
    public readonly externalId!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    /**
     * The AWS partition in which the cloud account is located. Can be 'aws' for standard AWS regions or 'aws-us-gov' for AWS
     * GovCloud (US) regions. Default is 'aws'.
     */
    public readonly partition!: pulumi.Output<string | undefined>;
    /**
     * A set of ARNs for the IAM policies that should be associated with the cloud account.
     */
    public readonly policyArns!: pulumi.Output<string[] | undefined>;
    /**
     * ID of the private cloud gateway. This is the ID of the private cloud gateway that is used to connect to the private
     * cluster endpoint.
     */
    public readonly privateCloudGatewayId!: pulumi.Output<string | undefined>;
    /**
     * The type of AWS credentials to use. Can be `secret` or `sts`.
     */
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a CloudaccountAws resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CloudaccountAwsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudaccountAwsArgs | CloudaccountAwsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudaccountAwsState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["awsAccessKey"] = state ? state.awsAccessKey : undefined;
            resourceInputs["awsSecretKey"] = state ? state.awsSecretKey : undefined;
            resourceInputs["context"] = state ? state.context : undefined;
            resourceInputs["externalId"] = state ? state.externalId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["partition"] = state ? state.partition : undefined;
            resourceInputs["policyArns"] = state ? state.policyArns : undefined;
            resourceInputs["privateCloudGatewayId"] = state ? state.privateCloudGatewayId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as CloudaccountAwsArgs | undefined;
            resourceInputs["arn"] = args ? args.arn : undefined;
            resourceInputs["awsAccessKey"] = args ? args.awsAccessKey : undefined;
            resourceInputs["awsSecretKey"] = args?.awsSecretKey ? pulumi.secret(args.awsSecretKey) : undefined;
            resourceInputs["context"] = args ? args.context : undefined;
            resourceInputs["externalId"] = args?.externalId ? pulumi.secret(args.externalId) : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["partition"] = args ? args.partition : undefined;
            resourceInputs["policyArns"] = args ? args.policyArns : undefined;
            resourceInputs["privateCloudGatewayId"] = args ? args.privateCloudGatewayId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["awsSecretKey", "externalId"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CloudaccountAws.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudaccountAws resources.
 */
export interface CloudaccountAwsState {
    arn?: pulumi.Input<string>;
    awsAccessKey?: pulumi.Input<string>;
    awsSecretKey?: pulumi.Input<string>;
    context?: pulumi.Input<string>;
    externalId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * The AWS partition in which the cloud account is located. Can be 'aws' for standard AWS regions or 'aws-us-gov' for AWS
     * GovCloud (US) regions. Default is 'aws'.
     */
    partition?: pulumi.Input<string>;
    /**
     * A set of ARNs for the IAM policies that should be associated with the cloud account.
     */
    policyArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of the private cloud gateway. This is the ID of the private cloud gateway that is used to connect to the private
     * cluster endpoint.
     */
    privateCloudGatewayId?: pulumi.Input<string>;
    /**
     * The type of AWS credentials to use. Can be `secret` or `sts`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudaccountAws resource.
 */
export interface CloudaccountAwsArgs {
    arn?: pulumi.Input<string>;
    awsAccessKey?: pulumi.Input<string>;
    awsSecretKey?: pulumi.Input<string>;
    context?: pulumi.Input<string>;
    externalId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * The AWS partition in which the cloud account is located. Can be 'aws' for standard AWS regions or 'aws-us-gov' for AWS
     * GovCloud (US) regions. Default is 'aws'.
     */
    partition?: pulumi.Input<string>;
    /**
     * A set of ARNs for the IAM policies that should be associated with the cloud account.
     */
    policyArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of the private cloud gateway. This is the ID of the private cloud gateway that is used to connect to the private
     * cluster endpoint.
     */
    privateCloudGatewayId?: pulumi.Input<string>;
    /**
     * The type of AWS credentials to use. Can be `secret` or `sts`.
     */
    type?: pulumi.Input<string>;
}
