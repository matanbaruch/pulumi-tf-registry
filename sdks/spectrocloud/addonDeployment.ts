// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AddonDeployment extends pulumi.CustomResource {
    /**
     * Get an existing AddonDeployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AddonDeploymentState, opts?: pulumi.CustomResourceOptions): AddonDeployment {
        return new AddonDeployment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spectrocloud:index/addonDeployment:AddonDeployment';

    /**
     * Returns true if the given object is an instance of AddonDeployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AddonDeployment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AddonDeployment.__pulumiType;
    }

    /**
     * The setting to apply the cluster profile. `DownloadAndInstall` will download and install packs in one action.
     * `DownloadAndInstallLater` will only download artifact and postpone install for later. Default value is
     * `DownloadAndInstall`.
     */
    public readonly applySetting!: pulumi.Output<string | undefined>;
    public readonly clusterProfiles!: pulumi.Output<outputs.AddonDeploymentClusterProfile[] | undefined>;
    public readonly clusterUid!: pulumi.Output<string>;
    public readonly context!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.AddonDeploymentTimeouts | undefined>;

    /**
     * Create a AddonDeployment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AddonDeploymentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AddonDeploymentArgs | AddonDeploymentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AddonDeploymentState | undefined;
            resourceInputs["applySetting"] = state ? state.applySetting : undefined;
            resourceInputs["clusterProfiles"] = state ? state.clusterProfiles : undefined;
            resourceInputs["clusterUid"] = state ? state.clusterUid : undefined;
            resourceInputs["context"] = state ? state.context : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as AddonDeploymentArgs | undefined;
            if ((!args || args.clusterUid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterUid'");
            }
            resourceInputs["applySetting"] = args ? args.applySetting : undefined;
            resourceInputs["clusterProfiles"] = args ? args.clusterProfiles : undefined;
            resourceInputs["clusterUid"] = args ? args.clusterUid : undefined;
            resourceInputs["context"] = args ? args.context : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AddonDeployment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AddonDeployment resources.
 */
export interface AddonDeploymentState {
    /**
     * The setting to apply the cluster profile. `DownloadAndInstall` will download and install packs in one action.
     * `DownloadAndInstallLater` will only download artifact and postpone install for later. Default value is
     * `DownloadAndInstall`.
     */
    applySetting?: pulumi.Input<string>;
    clusterProfiles?: pulumi.Input<pulumi.Input<inputs.AddonDeploymentClusterProfile>[]>;
    clusterUid?: pulumi.Input<string>;
    context?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.AddonDeploymentTimeouts>;
}

/**
 * The set of arguments for constructing a AddonDeployment resource.
 */
export interface AddonDeploymentArgs {
    /**
     * The setting to apply the cluster profile. `DownloadAndInstall` will download and install packs in one action.
     * `DownloadAndInstallLater` will only download artifact and postpone install for later. Default value is
     * `DownloadAndInstall`.
     */
    applySetting?: pulumi.Input<string>;
    clusterProfiles?: pulumi.Input<pulumi.Input<inputs.AddonDeploymentClusterProfile>[]>;
    clusterUid: pulumi.Input<string>;
    context?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.AddonDeploymentTimeouts>;
}
