// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PrivatecloudgatewayIppool extends pulumi.CustomResource {
    /**
     * Get an existing PrivatecloudgatewayIppool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PrivatecloudgatewayIppoolState, opts?: pulumi.CustomResourceOptions): PrivatecloudgatewayIppool {
        return new PrivatecloudgatewayIppool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spectrocloud:index/privatecloudgatewayIppool:PrivatecloudgatewayIppool';

    /**
     * Returns true if the given object is an instance of PrivatecloudgatewayIppool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PrivatecloudgatewayIppool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PrivatecloudgatewayIppool.__pulumiType;
    }

    public readonly gateway!: pulumi.Output<string>;
    public readonly ipEndRange!: pulumi.Output<string | undefined>;
    public readonly ipStartRange!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nameserverAddresses!: pulumi.Output<string[] | undefined>;
    public readonly nameserverSearchSuffixes!: pulumi.Output<string[] | undefined>;
    public readonly networkType!: pulumi.Output<string>;
    public readonly prefix!: pulumi.Output<number>;
    public readonly privateCloudGatewayId!: pulumi.Output<string>;
    public readonly restrictToSingleCluster!: pulumi.Output<boolean | undefined>;
    public readonly subnetCidr!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.PrivatecloudgatewayIppoolTimeouts | undefined>;

    /**
     * Create a PrivatecloudgatewayIppool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PrivatecloudgatewayIppoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PrivatecloudgatewayIppoolArgs | PrivatecloudgatewayIppoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PrivatecloudgatewayIppoolState | undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["ipEndRange"] = state ? state.ipEndRange : undefined;
            resourceInputs["ipStartRange"] = state ? state.ipStartRange : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameserverAddresses"] = state ? state.nameserverAddresses : undefined;
            resourceInputs["nameserverSearchSuffixes"] = state ? state.nameserverSearchSuffixes : undefined;
            resourceInputs["networkType"] = state ? state.networkType : undefined;
            resourceInputs["prefix"] = state ? state.prefix : undefined;
            resourceInputs["privateCloudGatewayId"] = state ? state.privateCloudGatewayId : undefined;
            resourceInputs["restrictToSingleCluster"] = state ? state.restrictToSingleCluster : undefined;
            resourceInputs["subnetCidr"] = state ? state.subnetCidr : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as PrivatecloudgatewayIppoolArgs | undefined;
            if ((!args || args.gateway === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gateway'");
            }
            if ((!args || args.networkType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkType'");
            }
            if ((!args || args.prefix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'prefix'");
            }
            if ((!args || args.privateCloudGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateCloudGatewayId'");
            }
            resourceInputs["gateway"] = args ? args.gateway : undefined;
            resourceInputs["ipEndRange"] = args ? args.ipEndRange : undefined;
            resourceInputs["ipStartRange"] = args ? args.ipStartRange : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameserverAddresses"] = args ? args.nameserverAddresses : undefined;
            resourceInputs["nameserverSearchSuffixes"] = args ? args.nameserverSearchSuffixes : undefined;
            resourceInputs["networkType"] = args ? args.networkType : undefined;
            resourceInputs["prefix"] = args ? args.prefix : undefined;
            resourceInputs["privateCloudGatewayId"] = args ? args.privateCloudGatewayId : undefined;
            resourceInputs["restrictToSingleCluster"] = args ? args.restrictToSingleCluster : undefined;
            resourceInputs["subnetCidr"] = args ? args.subnetCidr : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PrivatecloudgatewayIppool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PrivatecloudgatewayIppool resources.
 */
export interface PrivatecloudgatewayIppoolState {
    gateway?: pulumi.Input<string>;
    ipEndRange?: pulumi.Input<string>;
    ipStartRange?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameserverAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    nameserverSearchSuffixes?: pulumi.Input<pulumi.Input<string>[]>;
    networkType?: pulumi.Input<string>;
    prefix?: pulumi.Input<number>;
    privateCloudGatewayId?: pulumi.Input<string>;
    restrictToSingleCluster?: pulumi.Input<boolean>;
    subnetCidr?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.PrivatecloudgatewayIppoolTimeouts>;
}

/**
 * The set of arguments for constructing a PrivatecloudgatewayIppool resource.
 */
export interface PrivatecloudgatewayIppoolArgs {
    gateway: pulumi.Input<string>;
    ipEndRange?: pulumi.Input<string>;
    ipStartRange?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameserverAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    nameserverSearchSuffixes?: pulumi.Input<pulumi.Input<string>[]>;
    networkType: pulumi.Input<string>;
    prefix: pulumi.Input<number>;
    privateCloudGatewayId: pulumi.Input<string>;
    restrictToSingleCluster?: pulumi.Input<boolean>;
    subnetCidr?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.PrivatecloudgatewayIppoolTimeouts>;
}
