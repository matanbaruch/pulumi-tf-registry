// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AddonDeploymentArgs, AddonDeploymentState } from "./addonDeployment";
export type AddonDeployment = import("./addonDeployment").AddonDeployment;
export const AddonDeployment: typeof import("./addonDeployment").AddonDeployment = null as any;
utilities.lazyLoad(exports, ["AddonDeployment"], () => require("./addonDeployment"));

export { AlertArgs, AlertState } from "./alert";
export type Alert = import("./alert").Alert;
export const Alert: typeof import("./alert").Alert = null as any;
utilities.lazyLoad(exports, ["Alert"], () => require("./alert"));

export { ApplianceArgs, ApplianceState } from "./appliance";
export type Appliance = import("./appliance").Appliance;
export const Appliance: typeof import("./appliance").Appliance = null as any;
utilities.lazyLoad(exports, ["Appliance"], () => require("./appliance"));

export { ApplicationArgs, ApplicationState } from "./application";
export type Application = import("./application").Application;
export const Application: typeof import("./application").Application = null as any;
utilities.lazyLoad(exports, ["Application"], () => require("./application"));

export { ApplicationProfileArgs, ApplicationProfileState } from "./applicationProfile";
export type ApplicationProfile = import("./applicationProfile").ApplicationProfile;
export const ApplicationProfile: typeof import("./applicationProfile").ApplicationProfile = null as any;
utilities.lazyLoad(exports, ["ApplicationProfile"], () => require("./applicationProfile"));

export { BackupStorageLocationArgs, BackupStorageLocationState } from "./backupStorageLocation";
export type BackupStorageLocation = import("./backupStorageLocation").BackupStorageLocation;
export const BackupStorageLocation: typeof import("./backupStorageLocation").BackupStorageLocation = null as any;
utilities.lazyLoad(exports, ["BackupStorageLocation"], () => require("./backupStorageLocation"));

export { CloudaccountAwsArgs, CloudaccountAwsState } from "./cloudaccountAws";
export type CloudaccountAws = import("./cloudaccountAws").CloudaccountAws;
export const CloudaccountAws: typeof import("./cloudaccountAws").CloudaccountAws = null as any;
utilities.lazyLoad(exports, ["CloudaccountAws"], () => require("./cloudaccountAws"));

export { CloudaccountAzureArgs, CloudaccountAzureState } from "./cloudaccountAzure";
export type CloudaccountAzure = import("./cloudaccountAzure").CloudaccountAzure;
export const CloudaccountAzure: typeof import("./cloudaccountAzure").CloudaccountAzure = null as any;
utilities.lazyLoad(exports, ["CloudaccountAzure"], () => require("./cloudaccountAzure"));

export { CloudaccountCustomArgs, CloudaccountCustomState } from "./cloudaccountCustom";
export type CloudaccountCustom = import("./cloudaccountCustom").CloudaccountCustom;
export const CloudaccountCustom: typeof import("./cloudaccountCustom").CloudaccountCustom = null as any;
utilities.lazyLoad(exports, ["CloudaccountCustom"], () => require("./cloudaccountCustom"));

export { CloudaccountGcpArgs, CloudaccountGcpState } from "./cloudaccountGcp";
export type CloudaccountGcp = import("./cloudaccountGcp").CloudaccountGcp;
export const CloudaccountGcp: typeof import("./cloudaccountGcp").CloudaccountGcp = null as any;
utilities.lazyLoad(exports, ["CloudaccountGcp"], () => require("./cloudaccountGcp"));

export { CloudaccountMaasArgs, CloudaccountMaasState } from "./cloudaccountMaas";
export type CloudaccountMaas = import("./cloudaccountMaas").CloudaccountMaas;
export const CloudaccountMaas: typeof import("./cloudaccountMaas").CloudaccountMaas = null as any;
utilities.lazyLoad(exports, ["CloudaccountMaas"], () => require("./cloudaccountMaas"));

export { CloudaccountOpenstackArgs, CloudaccountOpenstackState } from "./cloudaccountOpenstack";
export type CloudaccountOpenstack = import("./cloudaccountOpenstack").CloudaccountOpenstack;
export const CloudaccountOpenstack: typeof import("./cloudaccountOpenstack").CloudaccountOpenstack = null as any;
utilities.lazyLoad(exports, ["CloudaccountOpenstack"], () => require("./cloudaccountOpenstack"));

export { CloudaccountTencentArgs, CloudaccountTencentState } from "./cloudaccountTencent";
export type CloudaccountTencent = import("./cloudaccountTencent").CloudaccountTencent;
export const CloudaccountTencent: typeof import("./cloudaccountTencent").CloudaccountTencent = null as any;
utilities.lazyLoad(exports, ["CloudaccountTencent"], () => require("./cloudaccountTencent"));

export { CloudaccountVsphereArgs, CloudaccountVsphereState } from "./cloudaccountVsphere";
export type CloudaccountVsphere = import("./cloudaccountVsphere").CloudaccountVsphere;
export const CloudaccountVsphere: typeof import("./cloudaccountVsphere").CloudaccountVsphere = null as any;
utilities.lazyLoad(exports, ["CloudaccountVsphere"], () => require("./cloudaccountVsphere"));

export { ClusterAksArgs, ClusterAksState } from "./clusterAks";
export type ClusterAks = import("./clusterAks").ClusterAks;
export const ClusterAks: typeof import("./clusterAks").ClusterAks = null as any;
utilities.lazyLoad(exports, ["ClusterAks"], () => require("./clusterAks"));

export { ClusterAwsArgs, ClusterAwsState } from "./clusterAws";
export type ClusterAws = import("./clusterAws").ClusterAws;
export const ClusterAws: typeof import("./clusterAws").ClusterAws = null as any;
utilities.lazyLoad(exports, ["ClusterAws"], () => require("./clusterAws"));

export { ClusterAzureArgs, ClusterAzureState } from "./clusterAzure";
export type ClusterAzure = import("./clusterAzure").ClusterAzure;
export const ClusterAzure: typeof import("./clusterAzure").ClusterAzure = null as any;
utilities.lazyLoad(exports, ["ClusterAzure"], () => require("./clusterAzure"));

export { ClusterCustomCloudArgs, ClusterCustomCloudState } from "./clusterCustomCloud";
export type ClusterCustomCloud = import("./clusterCustomCloud").ClusterCustomCloud;
export const ClusterCustomCloud: typeof import("./clusterCustomCloud").ClusterCustomCloud = null as any;
utilities.lazyLoad(exports, ["ClusterCustomCloud"], () => require("./clusterCustomCloud"));

export { ClusterEdgeNativeArgs, ClusterEdgeNativeState } from "./clusterEdgeNative";
export type ClusterEdgeNative = import("./clusterEdgeNative").ClusterEdgeNative;
export const ClusterEdgeNative: typeof import("./clusterEdgeNative").ClusterEdgeNative = null as any;
utilities.lazyLoad(exports, ["ClusterEdgeNative"], () => require("./clusterEdgeNative"));

export { ClusterEdgeVsphereArgs, ClusterEdgeVsphereState } from "./clusterEdgeVsphere";
export type ClusterEdgeVsphere = import("./clusterEdgeVsphere").ClusterEdgeVsphere;
export const ClusterEdgeVsphere: typeof import("./clusterEdgeVsphere").ClusterEdgeVsphere = null as any;
utilities.lazyLoad(exports, ["ClusterEdgeVsphere"], () => require("./clusterEdgeVsphere"));

export { ClusterEksArgs, ClusterEksState } from "./clusterEks";
export type ClusterEks = import("./clusterEks").ClusterEks;
export const ClusterEks: typeof import("./clusterEks").ClusterEks = null as any;
utilities.lazyLoad(exports, ["ClusterEks"], () => require("./clusterEks"));

export { ClusterGcpArgs, ClusterGcpState } from "./clusterGcp";
export type ClusterGcp = import("./clusterGcp").ClusterGcp;
export const ClusterGcp: typeof import("./clusterGcp").ClusterGcp = null as any;
utilities.lazyLoad(exports, ["ClusterGcp"], () => require("./clusterGcp"));

export { ClusterGkeArgs, ClusterGkeState } from "./clusterGke";
export type ClusterGke = import("./clusterGke").ClusterGke;
export const ClusterGke: typeof import("./clusterGke").ClusterGke = null as any;
utilities.lazyLoad(exports, ["ClusterGke"], () => require("./clusterGke"));

export { ClusterGroupArgs, ClusterGroupState } from "./clusterGroup";
export type ClusterGroup = import("./clusterGroup").ClusterGroup;
export const ClusterGroup: typeof import("./clusterGroup").ClusterGroup = null as any;
utilities.lazyLoad(exports, ["ClusterGroup"], () => require("./clusterGroup"));

export { ClusterImportArgs, ClusterImportState } from "./clusterImport";
export type ClusterImport = import("./clusterImport").ClusterImport;
export const ClusterImport: typeof import("./clusterImport").ClusterImport = null as any;
utilities.lazyLoad(exports, ["ClusterImport"], () => require("./clusterImport"));

export { ClusterMaasArgs, ClusterMaasState } from "./clusterMaas";
export type ClusterMaas = import("./clusterMaas").ClusterMaas;
export const ClusterMaas: typeof import("./clusterMaas").ClusterMaas = null as any;
utilities.lazyLoad(exports, ["ClusterMaas"], () => require("./clusterMaas"));

export { ClusterOpenstackArgs, ClusterOpenstackState } from "./clusterOpenstack";
export type ClusterOpenstack = import("./clusterOpenstack").ClusterOpenstack;
export const ClusterOpenstack: typeof import("./clusterOpenstack").ClusterOpenstack = null as any;
utilities.lazyLoad(exports, ["ClusterOpenstack"], () => require("./clusterOpenstack"));

export { ClusterProfileArgs, ClusterProfileState } from "./clusterProfile";
export type ClusterProfile = import("./clusterProfile").ClusterProfile;
export const ClusterProfile: typeof import("./clusterProfile").ClusterProfile = null as any;
utilities.lazyLoad(exports, ["ClusterProfile"], () => require("./clusterProfile"));

export { ClusterProfileImportArgs, ClusterProfileImportState } from "./clusterProfileImport";
export type ClusterProfileImport = import("./clusterProfileImport").ClusterProfileImport;
export const ClusterProfileImport: typeof import("./clusterProfileImport").ClusterProfileImport = null as any;
utilities.lazyLoad(exports, ["ClusterProfileImport"], () => require("./clusterProfileImport"));

export { ClusterTkeArgs, ClusterTkeState } from "./clusterTke";
export type ClusterTke = import("./clusterTke").ClusterTke;
export const ClusterTke: typeof import("./clusterTke").ClusterTke = null as any;
utilities.lazyLoad(exports, ["ClusterTke"], () => require("./clusterTke"));

export { ClusterVsphereArgs, ClusterVsphereState } from "./clusterVsphere";
export type ClusterVsphere = import("./clusterVsphere").ClusterVsphere;
export const ClusterVsphere: typeof import("./clusterVsphere").ClusterVsphere = null as any;
utilities.lazyLoad(exports, ["ClusterVsphere"], () => require("./clusterVsphere"));

export { DatavolumeArgs, DatavolumeState } from "./datavolume";
export type Datavolume = import("./datavolume").Datavolume;
export const Datavolume: typeof import("./datavolume").Datavolume = null as any;
utilities.lazyLoad(exports, ["Datavolume"], () => require("./datavolume"));

export { FilterArgs, FilterState } from "./filter";
export type Filter = import("./filter").Filter;
export const Filter: typeof import("./filter").Filter = null as any;
utilities.lazyLoad(exports, ["Filter"], () => require("./filter"));

export { GetApplianceArgs, GetApplianceResult, GetApplianceOutputArgs } from "./getAppliance";
export const getAppliance: typeof import("./getAppliance").getAppliance = null as any;
export const getApplianceOutput: typeof import("./getAppliance").getApplianceOutput = null as any;
utilities.lazyLoad(exports, ["getAppliance","getApplianceOutput"], () => require("./getAppliance"));

export { GetAppliancesArgs, GetAppliancesResult, GetAppliancesOutputArgs } from "./getAppliances";
export const getAppliances: typeof import("./getAppliances").getAppliances = null as any;
export const getAppliancesOutput: typeof import("./getAppliances").getAppliancesOutput = null as any;
utilities.lazyLoad(exports, ["getAppliances","getAppliancesOutput"], () => require("./getAppliances"));

export { GetApplicationProfileArgs, GetApplicationProfileResult, GetApplicationProfileOutputArgs } from "./getApplicationProfile";
export const getApplicationProfile: typeof import("./getApplicationProfile").getApplicationProfile = null as any;
export const getApplicationProfileOutput: typeof import("./getApplicationProfile").getApplicationProfileOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationProfile","getApplicationProfileOutput"], () => require("./getApplicationProfile"));

export { GetBackupStorageLocationArgs, GetBackupStorageLocationResult, GetBackupStorageLocationOutputArgs } from "./getBackupStorageLocation";
export const getBackupStorageLocation: typeof import("./getBackupStorageLocation").getBackupStorageLocation = null as any;
export const getBackupStorageLocationOutput: typeof import("./getBackupStorageLocation").getBackupStorageLocationOutput = null as any;
utilities.lazyLoad(exports, ["getBackupStorageLocation","getBackupStorageLocationOutput"], () => require("./getBackupStorageLocation"));

export { GetCloudaccountAwsArgs, GetCloudaccountAwsResult, GetCloudaccountAwsOutputArgs } from "./getCloudaccountAws";
export const getCloudaccountAws: typeof import("./getCloudaccountAws").getCloudaccountAws = null as any;
export const getCloudaccountAwsOutput: typeof import("./getCloudaccountAws").getCloudaccountAwsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudaccountAws","getCloudaccountAwsOutput"], () => require("./getCloudaccountAws"));

export { GetCloudaccountAzureArgs, GetCloudaccountAzureResult, GetCloudaccountAzureOutputArgs } from "./getCloudaccountAzure";
export const getCloudaccountAzure: typeof import("./getCloudaccountAzure").getCloudaccountAzure = null as any;
export const getCloudaccountAzureOutput: typeof import("./getCloudaccountAzure").getCloudaccountAzureOutput = null as any;
utilities.lazyLoad(exports, ["getCloudaccountAzure","getCloudaccountAzureOutput"], () => require("./getCloudaccountAzure"));

export { GetCloudaccountCustomArgs, GetCloudaccountCustomResult, GetCloudaccountCustomOutputArgs } from "./getCloudaccountCustom";
export const getCloudaccountCustom: typeof import("./getCloudaccountCustom").getCloudaccountCustom = null as any;
export const getCloudaccountCustomOutput: typeof import("./getCloudaccountCustom").getCloudaccountCustomOutput = null as any;
utilities.lazyLoad(exports, ["getCloudaccountCustom","getCloudaccountCustomOutput"], () => require("./getCloudaccountCustom"));

export { GetCloudaccountGcpArgs, GetCloudaccountGcpResult, GetCloudaccountGcpOutputArgs } from "./getCloudaccountGcp";
export const getCloudaccountGcp: typeof import("./getCloudaccountGcp").getCloudaccountGcp = null as any;
export const getCloudaccountGcpOutput: typeof import("./getCloudaccountGcp").getCloudaccountGcpOutput = null as any;
utilities.lazyLoad(exports, ["getCloudaccountGcp","getCloudaccountGcpOutput"], () => require("./getCloudaccountGcp"));

export { GetCloudaccountMaasArgs, GetCloudaccountMaasResult, GetCloudaccountMaasOutputArgs } from "./getCloudaccountMaas";
export const getCloudaccountMaas: typeof import("./getCloudaccountMaas").getCloudaccountMaas = null as any;
export const getCloudaccountMaasOutput: typeof import("./getCloudaccountMaas").getCloudaccountMaasOutput = null as any;
utilities.lazyLoad(exports, ["getCloudaccountMaas","getCloudaccountMaasOutput"], () => require("./getCloudaccountMaas"));

export { GetCloudaccountOpenstackArgs, GetCloudaccountOpenstackResult, GetCloudaccountOpenstackOutputArgs } from "./getCloudaccountOpenstack";
export const getCloudaccountOpenstack: typeof import("./getCloudaccountOpenstack").getCloudaccountOpenstack = null as any;
export const getCloudaccountOpenstackOutput: typeof import("./getCloudaccountOpenstack").getCloudaccountOpenstackOutput = null as any;
utilities.lazyLoad(exports, ["getCloudaccountOpenstack","getCloudaccountOpenstackOutput"], () => require("./getCloudaccountOpenstack"));

export { GetCloudaccountTencentArgs, GetCloudaccountTencentResult, GetCloudaccountTencentOutputArgs } from "./getCloudaccountTencent";
export const getCloudaccountTencent: typeof import("./getCloudaccountTencent").getCloudaccountTencent = null as any;
export const getCloudaccountTencentOutput: typeof import("./getCloudaccountTencent").getCloudaccountTencentOutput = null as any;
utilities.lazyLoad(exports, ["getCloudaccountTencent","getCloudaccountTencentOutput"], () => require("./getCloudaccountTencent"));

export { GetCloudaccountVsphereArgs, GetCloudaccountVsphereResult, GetCloudaccountVsphereOutputArgs } from "./getCloudaccountVsphere";
export const getCloudaccountVsphere: typeof import("./getCloudaccountVsphere").getCloudaccountVsphere = null as any;
export const getCloudaccountVsphereOutput: typeof import("./getCloudaccountVsphere").getCloudaccountVsphereOutput = null as any;
utilities.lazyLoad(exports, ["getCloudaccountVsphere","getCloudaccountVsphereOutput"], () => require("./getCloudaccountVsphere"));

export { GetClusterArgs, GetClusterResult, GetClusterOutputArgs } from "./getCluster";
export const getCluster: typeof import("./getCluster").getCluster = null as any;
export const getClusterOutput: typeof import("./getCluster").getClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCluster","getClusterOutput"], () => require("./getCluster"));

export { GetClusterGroupArgs, GetClusterGroupResult, GetClusterGroupOutputArgs } from "./getClusterGroup";
export const getClusterGroup: typeof import("./getClusterGroup").getClusterGroup = null as any;
export const getClusterGroupOutput: typeof import("./getClusterGroup").getClusterGroupOutput = null as any;
utilities.lazyLoad(exports, ["getClusterGroup","getClusterGroupOutput"], () => require("./getClusterGroup"));

export { GetClusterProfileArgs, GetClusterProfileResult, GetClusterProfileOutputArgs } from "./getClusterProfile";
export const getClusterProfile: typeof import("./getClusterProfile").getClusterProfile = null as any;
export const getClusterProfileOutput: typeof import("./getClusterProfile").getClusterProfileOutput = null as any;
utilities.lazyLoad(exports, ["getClusterProfile","getClusterProfileOutput"], () => require("./getClusterProfile"));

export { GetFilterArgs, GetFilterResult, GetFilterOutputArgs } from "./getFilter";
export const getFilter: typeof import("./getFilter").getFilter = null as any;
export const getFilterOutput: typeof import("./getFilter").getFilterOutput = null as any;
utilities.lazyLoad(exports, ["getFilter","getFilterOutput"], () => require("./getFilter"));

export { GetIppoolArgs, GetIppoolResult, GetIppoolOutputArgs } from "./getIppool";
export const getIppool: typeof import("./getIppool").getIppool = null as any;
export const getIppoolOutput: typeof import("./getIppool").getIppoolOutput = null as any;
utilities.lazyLoad(exports, ["getIppool","getIppoolOutput"], () => require("./getIppool"));

export { GetPackArgs, GetPackResult, GetPackOutputArgs } from "./getPack";
export const getPack: typeof import("./getPack").getPack = null as any;
export const getPackOutput: typeof import("./getPack").getPackOutput = null as any;
utilities.lazyLoad(exports, ["getPack","getPackOutput"], () => require("./getPack"));

export { GetPackSimpleArgs, GetPackSimpleResult, GetPackSimpleOutputArgs } from "./getPackSimple";
export const getPackSimple: typeof import("./getPackSimple").getPackSimple = null as any;
export const getPackSimpleOutput: typeof import("./getPackSimple").getPackSimpleOutput = null as any;
utilities.lazyLoad(exports, ["getPackSimple","getPackSimpleOutput"], () => require("./getPackSimple"));

export { GetPrivateCloudGatewayArgs, GetPrivateCloudGatewayResult, GetPrivateCloudGatewayOutputArgs } from "./getPrivateCloudGateway";
export const getPrivateCloudGateway: typeof import("./getPrivateCloudGateway").getPrivateCloudGateway = null as any;
export const getPrivateCloudGatewayOutput: typeof import("./getPrivateCloudGateway").getPrivateCloudGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateCloudGateway","getPrivateCloudGatewayOutput"], () => require("./getPrivateCloudGateway"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetRegistryArgs, GetRegistryResult, GetRegistryOutputArgs } from "./getRegistry";
export const getRegistry: typeof import("./getRegistry").getRegistry = null as any;
export const getRegistryOutput: typeof import("./getRegistry").getRegistryOutput = null as any;
utilities.lazyLoad(exports, ["getRegistry","getRegistryOutput"], () => require("./getRegistry"));

export { GetRegistryHelmArgs, GetRegistryHelmResult, GetRegistryHelmOutputArgs } from "./getRegistryHelm";
export const getRegistryHelm: typeof import("./getRegistryHelm").getRegistryHelm = null as any;
export const getRegistryHelmOutput: typeof import("./getRegistryHelm").getRegistryHelmOutput = null as any;
utilities.lazyLoad(exports, ["getRegistryHelm","getRegistryHelmOutput"], () => require("./getRegistryHelm"));

export { GetRegistryOciArgs, GetRegistryOciResult, GetRegistryOciOutputArgs } from "./getRegistryOci";
export const getRegistryOci: typeof import("./getRegistryOci").getRegistryOci = null as any;
export const getRegistryOciOutput: typeof import("./getRegistryOci").getRegistryOciOutput = null as any;
utilities.lazyLoad(exports, ["getRegistryOci","getRegistryOciOutput"], () => require("./getRegistryOci"));

export { GetRegistryPackArgs, GetRegistryPackResult, GetRegistryPackOutputArgs } from "./getRegistryPack";
export const getRegistryPack: typeof import("./getRegistryPack").getRegistryPack = null as any;
export const getRegistryPackOutput: typeof import("./getRegistryPack").getRegistryPackOutput = null as any;
utilities.lazyLoad(exports, ["getRegistryPack","getRegistryPackOutput"], () => require("./getRegistryPack"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetWorkspaceArgs, GetWorkspaceResult, GetWorkspaceOutputArgs } from "./getWorkspace";
export const getWorkspace: typeof import("./getWorkspace").getWorkspace = null as any;
export const getWorkspaceOutput: typeof import("./getWorkspace").getWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspace","getWorkspaceOutput"], () => require("./getWorkspace"));

export { MacroArgs, MacroState } from "./macro";
export type Macro = import("./macro").Macro;
export const Macro: typeof import("./macro").Macro = null as any;
utilities.lazyLoad(exports, ["Macro"], () => require("./macro"));

export { MacrosArgs, MacrosState } from "./macros";
export type Macros = import("./macros").Macros;
export const Macros: typeof import("./macros").Macros = null as any;
utilities.lazyLoad(exports, ["Macros"], () => require("./macros"));

export { PrivatecloudgatewayIppoolArgs, PrivatecloudgatewayIppoolState } from "./privatecloudgatewayIppool";
export type PrivatecloudgatewayIppool = import("./privatecloudgatewayIppool").PrivatecloudgatewayIppool;
export const PrivatecloudgatewayIppool: typeof import("./privatecloudgatewayIppool").PrivatecloudgatewayIppool = null as any;
utilities.lazyLoad(exports, ["PrivatecloudgatewayIppool"], () => require("./privatecloudgatewayIppool"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RegistryHelmArgs, RegistryHelmState } from "./registryHelm";
export type RegistryHelm = import("./registryHelm").RegistryHelm;
export const RegistryHelm: typeof import("./registryHelm").RegistryHelm = null as any;
utilities.lazyLoad(exports, ["RegistryHelm"], () => require("./registryHelm"));

export { RegistryOciArgs, RegistryOciState } from "./registryOci";
export type RegistryOci = import("./registryOci").RegistryOci;
export const RegistryOci: typeof import("./registryOci").RegistryOci = null as any;
utilities.lazyLoad(exports, ["RegistryOci"], () => require("./registryOci"));

export { TeamArgs, TeamState } from "./team";
export type Team = import("./team").Team;
export const Team: typeof import("./team").Team = null as any;
utilities.lazyLoad(exports, ["Team"], () => require("./team"));

export { VirtualClusterArgs, VirtualClusterState } from "./virtualCluster";
export type VirtualCluster = import("./virtualCluster").VirtualCluster;
export const VirtualCluster: typeof import("./virtualCluster").VirtualCluster = null as any;
utilities.lazyLoad(exports, ["VirtualCluster"], () => require("./virtualCluster"));

export { VirtualMachineArgs, VirtualMachineState } from "./virtualMachine";
export type VirtualMachine = import("./virtualMachine").VirtualMachine;
export const VirtualMachine: typeof import("./virtualMachine").VirtualMachine = null as any;
utilities.lazyLoad(exports, ["VirtualMachine"], () => require("./virtualMachine"));

export { WorkspaceArgs, WorkspaceState } from "./workspace";
export type Workspace = import("./workspace").Workspace;
export const Workspace: typeof import("./workspace").Workspace = null as any;
utilities.lazyLoad(exports, ["Workspace"], () => require("./workspace"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "spectrocloud:index/addonDeployment:AddonDeployment":
                return new AddonDeployment(name, <any>undefined, { urn })
            case "spectrocloud:index/alert:Alert":
                return new Alert(name, <any>undefined, { urn })
            case "spectrocloud:index/appliance:Appliance":
                return new Appliance(name, <any>undefined, { urn })
            case "spectrocloud:index/application:Application":
                return new Application(name, <any>undefined, { urn })
            case "spectrocloud:index/applicationProfile:ApplicationProfile":
                return new ApplicationProfile(name, <any>undefined, { urn })
            case "spectrocloud:index/backupStorageLocation:BackupStorageLocation":
                return new BackupStorageLocation(name, <any>undefined, { urn })
            case "spectrocloud:index/cloudaccountAws:CloudaccountAws":
                return new CloudaccountAws(name, <any>undefined, { urn })
            case "spectrocloud:index/cloudaccountAzure:CloudaccountAzure":
                return new CloudaccountAzure(name, <any>undefined, { urn })
            case "spectrocloud:index/cloudaccountCustom:CloudaccountCustom":
                return new CloudaccountCustom(name, <any>undefined, { urn })
            case "spectrocloud:index/cloudaccountGcp:CloudaccountGcp":
                return new CloudaccountGcp(name, <any>undefined, { urn })
            case "spectrocloud:index/cloudaccountMaas:CloudaccountMaas":
                return new CloudaccountMaas(name, <any>undefined, { urn })
            case "spectrocloud:index/cloudaccountOpenstack:CloudaccountOpenstack":
                return new CloudaccountOpenstack(name, <any>undefined, { urn })
            case "spectrocloud:index/cloudaccountTencent:CloudaccountTencent":
                return new CloudaccountTencent(name, <any>undefined, { urn })
            case "spectrocloud:index/cloudaccountVsphere:CloudaccountVsphere":
                return new CloudaccountVsphere(name, <any>undefined, { urn })
            case "spectrocloud:index/clusterAks:ClusterAks":
                return new ClusterAks(name, <any>undefined, { urn })
            case "spectrocloud:index/clusterAws:ClusterAws":
                return new ClusterAws(name, <any>undefined, { urn })
            case "spectrocloud:index/clusterAzure:ClusterAzure":
                return new ClusterAzure(name, <any>undefined, { urn })
            case "spectrocloud:index/clusterCustomCloud:ClusterCustomCloud":
                return new ClusterCustomCloud(name, <any>undefined, { urn })
            case "spectrocloud:index/clusterEdgeNative:ClusterEdgeNative":
                return new ClusterEdgeNative(name, <any>undefined, { urn })
            case "spectrocloud:index/clusterEdgeVsphere:ClusterEdgeVsphere":
                return new ClusterEdgeVsphere(name, <any>undefined, { urn })
            case "spectrocloud:index/clusterEks:ClusterEks":
                return new ClusterEks(name, <any>undefined, { urn })
            case "spectrocloud:index/clusterGcp:ClusterGcp":
                return new ClusterGcp(name, <any>undefined, { urn })
            case "spectrocloud:index/clusterGke:ClusterGke":
                return new ClusterGke(name, <any>undefined, { urn })
            case "spectrocloud:index/clusterGroup:ClusterGroup":
                return new ClusterGroup(name, <any>undefined, { urn })
            case "spectrocloud:index/clusterImport:ClusterImport":
                return new ClusterImport(name, <any>undefined, { urn })
            case "spectrocloud:index/clusterMaas:ClusterMaas":
                return new ClusterMaas(name, <any>undefined, { urn })
            case "spectrocloud:index/clusterOpenstack:ClusterOpenstack":
                return new ClusterOpenstack(name, <any>undefined, { urn })
            case "spectrocloud:index/clusterProfile:ClusterProfile":
                return new ClusterProfile(name, <any>undefined, { urn })
            case "spectrocloud:index/clusterProfileImport:ClusterProfileImport":
                return new ClusterProfileImport(name, <any>undefined, { urn })
            case "spectrocloud:index/clusterTke:ClusterTke":
                return new ClusterTke(name, <any>undefined, { urn })
            case "spectrocloud:index/clusterVsphere:ClusterVsphere":
                return new ClusterVsphere(name, <any>undefined, { urn })
            case "spectrocloud:index/datavolume:Datavolume":
                return new Datavolume(name, <any>undefined, { urn })
            case "spectrocloud:index/filter:Filter":
                return new Filter(name, <any>undefined, { urn })
            case "spectrocloud:index/macro:Macro":
                return new Macro(name, <any>undefined, { urn })
            case "spectrocloud:index/macros:Macros":
                return new Macros(name, <any>undefined, { urn })
            case "spectrocloud:index/privatecloudgatewayIppool:PrivatecloudgatewayIppool":
                return new PrivatecloudgatewayIppool(name, <any>undefined, { urn })
            case "spectrocloud:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "spectrocloud:index/registryHelm:RegistryHelm":
                return new RegistryHelm(name, <any>undefined, { urn })
            case "spectrocloud:index/registryOci:RegistryOci":
                return new RegistryOci(name, <any>undefined, { urn })
            case "spectrocloud:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "spectrocloud:index/virtualCluster:VirtualCluster":
                return new VirtualCluster(name, <any>undefined, { urn })
            case "spectrocloud:index/virtualMachine:VirtualMachine":
                return new VirtualMachine(name, <any>undefined, { urn })
            case "spectrocloud:index/workspace:Workspace":
                return new Workspace(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("spectrocloud", "index/addonDeployment", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/alert", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/appliance", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/application", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/applicationProfile", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/backupStorageLocation", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/cloudaccountAws", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/cloudaccountAzure", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/cloudaccountCustom", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/cloudaccountGcp", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/cloudaccountMaas", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/cloudaccountOpenstack", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/cloudaccountTencent", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/cloudaccountVsphere", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/clusterAks", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/clusterAws", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/clusterAzure", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/clusterCustomCloud", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/clusterEdgeNative", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/clusterEdgeVsphere", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/clusterEks", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/clusterGcp", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/clusterGke", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/clusterGroup", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/clusterImport", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/clusterMaas", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/clusterOpenstack", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/clusterProfile", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/clusterProfileImport", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/clusterTke", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/clusterVsphere", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/datavolume", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/filter", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/macro", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/macros", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/privatecloudgatewayIppool", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/project", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/registryHelm", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/registryOci", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/team", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/virtualCluster", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/virtualMachine", _module)
pulumi.runtime.registerResourceModule("spectrocloud", "index/workspace", _module)
pulumi.runtime.registerResourcePackage("spectrocloud", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:spectrocloud") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
