// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VirtualMachine extends pulumi.CustomResource {
    /**
     * Get an existing VirtualMachine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualMachineState, opts?: pulumi.CustomResourceOptions): VirtualMachine {
        return new VirtualMachine(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spectrocloud:index/virtualMachine:VirtualMachine';

    /**
     * Returns true if the given object is an instance of VirtualMachine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualMachine {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualMachine.__pulumiType;
    }

    /**
     * Optional pod scheduling constraints.
     */
    public readonly affinity!: pulumi.Output<outputs.VirtualMachineAffinity | undefined>;
    /**
     * An unstructured key value map stored with the VM that may be used to store arbitrary metadata.
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string}>;
    /**
     * The name of the source virtual machine that a clone will be created of.
     */
    public readonly baseVmName!: pulumi.Output<string | undefined>;
    /**
     * Context of the cluster. Allowed values are `project`, `tenant`. Default value is `project`.
     */
    public readonly clusterContext!: pulumi.Output<string | undefined>;
    /**
     * The cluster UID to which the virtual machine belongs to.
     */
    public readonly clusterUid!: pulumi.Output<string>;
    /**
     * CPU allows to specifying the CPU topology. Valid resource keys are "cores" , "sockets" and "threads"
     */
    public readonly cpu!: pulumi.Output<outputs.VirtualMachineCpu | undefined>;
    /**
     * dataVolumeTemplates is a list of dataVolumes that the VirtualMachineInstance template can reference.
     */
    public readonly dataVolumeTemplates!: pulumi.Output<outputs.VirtualMachineDataVolumeTemplate[] | undefined>;
    /**
     * Disks describes disks, cdroms, floppy and luns which are connected to the vmi.
     */
    public readonly disks!: pulumi.Output<outputs.VirtualMachineDisk[] | undefined>;
    /**
     * DNSPolicy defines how a pod's DNS will be configured.
     */
    public readonly dnsPolicy!: pulumi.Output<string | undefined>;
    /**
     * EvictionStrategy can be set to "LiveMigrate" if the VirtualMachineInstance should be migrated instead of shut-off in
     * case of a node drain.
     */
    public readonly evictionStrategy!: pulumi.Output<string | undefined>;
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will
     * also be combined with a unique suffix. Read more:
     * https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    public readonly generateName!: pulumi.Output<string | undefined>;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    public /*out*/ readonly generation!: pulumi.Output<number>;
    /**
     * Specifies the hostname of the vmi.
     */
    public readonly hostname!: pulumi.Output<string | undefined>;
    /**
     * Interfaces describe network interfaces which are added to the vmi.
     */
    public readonly interfaces!: pulumi.Output<outputs.VirtualMachineInterface[] | undefined>;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select). May match selectors of
     * replication controllers and services.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specification of the desired behavior of the VirtualMachineInstance on the host.
     */
    public readonly livenessProbe!: pulumi.Output<outputs.VirtualMachineLivenessProbe | undefined>;
    /**
     * Memory allows specifying the vmi memory features.
     */
    public readonly memory!: pulumi.Output<outputs.VirtualMachineMemory | undefined>;
    /**
     * Name of the virtual machine, must be unique. Cannot be updated.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Namespace defines the space within, Name must be unique.
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * List of networks that can be attached to a vm's virtual interface.
     */
    public readonly networks!: pulumi.Output<outputs.VirtualMachineNetwork[] | undefined>;
    /**
     * NodeSelector is a selector which must be true for the vmi to fit on a node. Selector which must match a node's labels
     * for the vmi to be scheduled on that node.
     */
    public readonly nodeSelector!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based
     * on DNSPolicy. Optional: Defaults to empty
     */
    public readonly podDnsConfig!: pulumi.Output<outputs.VirtualMachinePodDnsConfig | undefined>;
    /**
     * If specified, indicates the pod's priority. If not specified, the pod priority will be default or zero if there is no
     * default.
     */
    public readonly priorityClassName!: pulumi.Output<string | undefined>;
    /**
     * Specification of the desired behavior of the VirtualMachineInstance on the host.
     */
    public readonly readinessProbe!: pulumi.Output<outputs.VirtualMachineReadinessProbe | undefined>;
    /**
     * An opaque value that represents the internal version of this VM that can be used by clients to determine when VM has
     * changed.
     */
    public /*out*/ readonly resourceVersion!: pulumi.Output<string>;
    /**
     * Resources describes the Compute Resources required by this vmi.
     */
    public readonly resources!: pulumi.Output<outputs.VirtualMachineResources>;
    /**
     * If set to `true`, the virtual machine will be started when the cluster is launched. Default value is `true`.
     */
    public readonly runOnLaunch!: pulumi.Output<boolean | undefined>;
    /**
     * Running state indicates the requested running state of the VirtualMachineInstance, mutually exclusive with Running.
     */
    public readonly runStrategy!: pulumi.Output<string | undefined>;
    /**
     * If specified, the VMI will be dispatched by specified scheduler. If not specified, the VMI will be dispatched by default
     * scheduler.
     */
    public readonly schedulerName!: pulumi.Output<string | undefined>;
    /**
     * A URL representing this VM.
     */
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    /**
     * VirtualMachineStatus represents the status returned by the controller to describe how the VirtualMachine is doing.
     */
    public readonly status!: pulumi.Output<outputs.VirtualMachineStatus | undefined>;
    /**
     * If specified, the fully qualified vmi hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>".
     */
    public readonly subdomain!: pulumi.Output<string | undefined>;
    /**
     * Grace period observed after signalling a VirtualMachineInstance to stop after which the VirtualMachineInstance is force
     * terminated.
     */
    public readonly terminationGracePeriodSeconds!: pulumi.Output<number | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.VirtualMachineTimeouts | undefined>;
    /**
     * If specified, the pod's toleration. Optional: Defaults to empty
     */
    public readonly tolerations!: pulumi.Output<outputs.VirtualMachineToleration[] | undefined>;
    /**
     * The unique in time and space value for this VM.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * The action to be performed on the virtual machine. Valid values are: `start`, `stop`, `restart`, `pause`, `resume`,
     * `migrate`. Default value is `start`.
     */
    public readonly vmAction!: pulumi.Output<string | undefined>;
    /**
     * Specification of the desired behavior of the VirtualMachineInstance on the host.
     */
    public readonly volumes!: pulumi.Output<outputs.VirtualMachineVolume[] | undefined>;

    /**
     * Create a VirtualMachine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualMachineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualMachineArgs | VirtualMachineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualMachineState | undefined;
            resourceInputs["affinity"] = state ? state.affinity : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["baseVmName"] = state ? state.baseVmName : undefined;
            resourceInputs["clusterContext"] = state ? state.clusterContext : undefined;
            resourceInputs["clusterUid"] = state ? state.clusterUid : undefined;
            resourceInputs["cpu"] = state ? state.cpu : undefined;
            resourceInputs["dataVolumeTemplates"] = state ? state.dataVolumeTemplates : undefined;
            resourceInputs["disks"] = state ? state.disks : undefined;
            resourceInputs["dnsPolicy"] = state ? state.dnsPolicy : undefined;
            resourceInputs["evictionStrategy"] = state ? state.evictionStrategy : undefined;
            resourceInputs["generateName"] = state ? state.generateName : undefined;
            resourceInputs["generation"] = state ? state.generation : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["livenessProbe"] = state ? state.livenessProbe : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["nodeSelector"] = state ? state.nodeSelector : undefined;
            resourceInputs["podDnsConfig"] = state ? state.podDnsConfig : undefined;
            resourceInputs["priorityClassName"] = state ? state.priorityClassName : undefined;
            resourceInputs["readinessProbe"] = state ? state.readinessProbe : undefined;
            resourceInputs["resourceVersion"] = state ? state.resourceVersion : undefined;
            resourceInputs["resources"] = state ? state.resources : undefined;
            resourceInputs["runOnLaunch"] = state ? state.runOnLaunch : undefined;
            resourceInputs["runStrategy"] = state ? state.runStrategy : undefined;
            resourceInputs["schedulerName"] = state ? state.schedulerName : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subdomain"] = state ? state.subdomain : undefined;
            resourceInputs["terminationGracePeriodSeconds"] = state ? state.terminationGracePeriodSeconds : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["tolerations"] = state ? state.tolerations : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["vmAction"] = state ? state.vmAction : undefined;
            resourceInputs["volumes"] = state ? state.volumes : undefined;
        } else {
            const args = argsOrState as VirtualMachineArgs | undefined;
            if ((!args || args.clusterUid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterUid'");
            }
            if ((!args || args.resources === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resources'");
            }
            resourceInputs["affinity"] = args ? args.affinity : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["baseVmName"] = args ? args.baseVmName : undefined;
            resourceInputs["clusterContext"] = args ? args.clusterContext : undefined;
            resourceInputs["clusterUid"] = args ? args.clusterUid : undefined;
            resourceInputs["cpu"] = args ? args.cpu : undefined;
            resourceInputs["dataVolumeTemplates"] = args ? args.dataVolumeTemplates : undefined;
            resourceInputs["disks"] = args ? args.disks : undefined;
            resourceInputs["dnsPolicy"] = args ? args.dnsPolicy : undefined;
            resourceInputs["evictionStrategy"] = args ? args.evictionStrategy : undefined;
            resourceInputs["generateName"] = args ? args.generateName : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["livenessProbe"] = args ? args.livenessProbe : undefined;
            resourceInputs["memory"] = args ? args.memory : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["nodeSelector"] = args ? args.nodeSelector : undefined;
            resourceInputs["podDnsConfig"] = args ? args.podDnsConfig : undefined;
            resourceInputs["priorityClassName"] = args ? args.priorityClassName : undefined;
            resourceInputs["readinessProbe"] = args ? args.readinessProbe : undefined;
            resourceInputs["resources"] = args ? args.resources : undefined;
            resourceInputs["runOnLaunch"] = args ? args.runOnLaunch : undefined;
            resourceInputs["runStrategy"] = args ? args.runStrategy : undefined;
            resourceInputs["schedulerName"] = args ? args.schedulerName : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["subdomain"] = args ? args.subdomain : undefined;
            resourceInputs["terminationGracePeriodSeconds"] = args ? args.terminationGracePeriodSeconds : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["tolerations"] = args ? args.tolerations : undefined;
            resourceInputs["vmAction"] = args ? args.vmAction : undefined;
            resourceInputs["volumes"] = args ? args.volumes : undefined;
            resourceInputs["generation"] = undefined /*out*/;
            resourceInputs["resourceVersion"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VirtualMachine.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VirtualMachine resources.
 */
export interface VirtualMachineState {
    /**
     * Optional pod scheduling constraints.
     */
    affinity?: pulumi.Input<inputs.VirtualMachineAffinity>;
    /**
     * An unstructured key value map stored with the VM that may be used to store arbitrary metadata.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the source virtual machine that a clone will be created of.
     */
    baseVmName?: pulumi.Input<string>;
    /**
     * Context of the cluster. Allowed values are `project`, `tenant`. Default value is `project`.
     */
    clusterContext?: pulumi.Input<string>;
    /**
     * The cluster UID to which the virtual machine belongs to.
     */
    clusterUid?: pulumi.Input<string>;
    /**
     * CPU allows to specifying the CPU topology. Valid resource keys are "cores" , "sockets" and "threads"
     */
    cpu?: pulumi.Input<inputs.VirtualMachineCpu>;
    /**
     * dataVolumeTemplates is a list of dataVolumes that the VirtualMachineInstance template can reference.
     */
    dataVolumeTemplates?: pulumi.Input<pulumi.Input<inputs.VirtualMachineDataVolumeTemplate>[]>;
    /**
     * Disks describes disks, cdroms, floppy and luns which are connected to the vmi.
     */
    disks?: pulumi.Input<pulumi.Input<inputs.VirtualMachineDisk>[]>;
    /**
     * DNSPolicy defines how a pod's DNS will be configured.
     */
    dnsPolicy?: pulumi.Input<string>;
    /**
     * EvictionStrategy can be set to "LiveMigrate" if the VirtualMachineInstance should be migrated instead of shut-off in
     * case of a node drain.
     */
    evictionStrategy?: pulumi.Input<string>;
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will
     * also be combined with a unique suffix. Read more:
     * https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: pulumi.Input<string>;
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation?: pulumi.Input<number>;
    /**
     * Specifies the hostname of the vmi.
     */
    hostname?: pulumi.Input<string>;
    /**
     * Interfaces describe network interfaces which are added to the vmi.
     */
    interfaces?: pulumi.Input<pulumi.Input<inputs.VirtualMachineInterface>[]>;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select). May match selectors of
     * replication controllers and services.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specification of the desired behavior of the VirtualMachineInstance on the host.
     */
    livenessProbe?: pulumi.Input<inputs.VirtualMachineLivenessProbe>;
    /**
     * Memory allows specifying the vmi memory features.
     */
    memory?: pulumi.Input<inputs.VirtualMachineMemory>;
    /**
     * Name of the virtual machine, must be unique. Cannot be updated.
     */
    name?: pulumi.Input<string>;
    /**
     * Namespace defines the space within, Name must be unique.
     */
    namespace?: pulumi.Input<string>;
    /**
     * List of networks that can be attached to a vm's virtual interface.
     */
    networks?: pulumi.Input<pulumi.Input<inputs.VirtualMachineNetwork>[]>;
    /**
     * NodeSelector is a selector which must be true for the vmi to fit on a node. Selector which must match a node's labels
     * for the vmi to be scheduled on that node.
     */
    nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based
     * on DNSPolicy. Optional: Defaults to empty
     */
    podDnsConfig?: pulumi.Input<inputs.VirtualMachinePodDnsConfig>;
    /**
     * If specified, indicates the pod's priority. If not specified, the pod priority will be default or zero if there is no
     * default.
     */
    priorityClassName?: pulumi.Input<string>;
    /**
     * Specification of the desired behavior of the VirtualMachineInstance on the host.
     */
    readinessProbe?: pulumi.Input<inputs.VirtualMachineReadinessProbe>;
    /**
     * An opaque value that represents the internal version of this VM that can be used by clients to determine when VM has
     * changed.
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * Resources describes the Compute Resources required by this vmi.
     */
    resources?: pulumi.Input<inputs.VirtualMachineResources>;
    /**
     * If set to `true`, the virtual machine will be started when the cluster is launched. Default value is `true`.
     */
    runOnLaunch?: pulumi.Input<boolean>;
    /**
     * Running state indicates the requested running state of the VirtualMachineInstance, mutually exclusive with Running.
     */
    runStrategy?: pulumi.Input<string>;
    /**
     * If specified, the VMI will be dispatched by specified scheduler. If not specified, the VMI will be dispatched by default
     * scheduler.
     */
    schedulerName?: pulumi.Input<string>;
    /**
     * A URL representing this VM.
     */
    selfLink?: pulumi.Input<string>;
    /**
     * VirtualMachineStatus represents the status returned by the controller to describe how the VirtualMachine is doing.
     */
    status?: pulumi.Input<inputs.VirtualMachineStatus>;
    /**
     * If specified, the fully qualified vmi hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>".
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Grace period observed after signalling a VirtualMachineInstance to stop after which the VirtualMachineInstance is force
     * terminated.
     */
    terminationGracePeriodSeconds?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.VirtualMachineTimeouts>;
    /**
     * If specified, the pod's toleration. Optional: Defaults to empty
     */
    tolerations?: pulumi.Input<pulumi.Input<inputs.VirtualMachineToleration>[]>;
    /**
     * The unique in time and space value for this VM.
     */
    uid?: pulumi.Input<string>;
    /**
     * The action to be performed on the virtual machine. Valid values are: `start`, `stop`, `restart`, `pause`, `resume`,
     * `migrate`. Default value is `start`.
     */
    vmAction?: pulumi.Input<string>;
    /**
     * Specification of the desired behavior of the VirtualMachineInstance on the host.
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.VirtualMachineVolume>[]>;
}

/**
 * The set of arguments for constructing a VirtualMachine resource.
 */
export interface VirtualMachineArgs {
    /**
     * Optional pod scheduling constraints.
     */
    affinity?: pulumi.Input<inputs.VirtualMachineAffinity>;
    /**
     * An unstructured key value map stored with the VM that may be used to store arbitrary metadata.
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the source virtual machine that a clone will be created of.
     */
    baseVmName?: pulumi.Input<string>;
    /**
     * Context of the cluster. Allowed values are `project`, `tenant`. Default value is `project`.
     */
    clusterContext?: pulumi.Input<string>;
    /**
     * The cluster UID to which the virtual machine belongs to.
     */
    clusterUid: pulumi.Input<string>;
    /**
     * CPU allows to specifying the CPU topology. Valid resource keys are "cores" , "sockets" and "threads"
     */
    cpu?: pulumi.Input<inputs.VirtualMachineCpu>;
    /**
     * dataVolumeTemplates is a list of dataVolumes that the VirtualMachineInstance template can reference.
     */
    dataVolumeTemplates?: pulumi.Input<pulumi.Input<inputs.VirtualMachineDataVolumeTemplate>[]>;
    /**
     * Disks describes disks, cdroms, floppy and luns which are connected to the vmi.
     */
    disks?: pulumi.Input<pulumi.Input<inputs.VirtualMachineDisk>[]>;
    /**
     * DNSPolicy defines how a pod's DNS will be configured.
     */
    dnsPolicy?: pulumi.Input<string>;
    /**
     * EvictionStrategy can be set to "LiveMigrate" if the VirtualMachineInstance should be migrated instead of shut-off in
     * case of a node drain.
     */
    evictionStrategy?: pulumi.Input<string>;
    /**
     * Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will
     * also be combined with a unique suffix. Read more:
     * https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
     */
    generateName?: pulumi.Input<string>;
    /**
     * Specifies the hostname of the vmi.
     */
    hostname?: pulumi.Input<string>;
    /**
     * Interfaces describe network interfaces which are added to the vmi.
     */
    interfaces?: pulumi.Input<pulumi.Input<inputs.VirtualMachineInterface>[]>;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select). May match selectors of
     * replication controllers and services.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specification of the desired behavior of the VirtualMachineInstance on the host.
     */
    livenessProbe?: pulumi.Input<inputs.VirtualMachineLivenessProbe>;
    /**
     * Memory allows specifying the vmi memory features.
     */
    memory?: pulumi.Input<inputs.VirtualMachineMemory>;
    /**
     * Name of the virtual machine, must be unique. Cannot be updated.
     */
    name?: pulumi.Input<string>;
    /**
     * Namespace defines the space within, Name must be unique.
     */
    namespace?: pulumi.Input<string>;
    /**
     * List of networks that can be attached to a vm's virtual interface.
     */
    networks?: pulumi.Input<pulumi.Input<inputs.VirtualMachineNetwork>[]>;
    /**
     * NodeSelector is a selector which must be true for the vmi to fit on a node. Selector which must match a node's labels
     * for the vmi to be scheduled on that node.
     */
    nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based
     * on DNSPolicy. Optional: Defaults to empty
     */
    podDnsConfig?: pulumi.Input<inputs.VirtualMachinePodDnsConfig>;
    /**
     * If specified, indicates the pod's priority. If not specified, the pod priority will be default or zero if there is no
     * default.
     */
    priorityClassName?: pulumi.Input<string>;
    /**
     * Specification of the desired behavior of the VirtualMachineInstance on the host.
     */
    readinessProbe?: pulumi.Input<inputs.VirtualMachineReadinessProbe>;
    /**
     * Resources describes the Compute Resources required by this vmi.
     */
    resources: pulumi.Input<inputs.VirtualMachineResources>;
    /**
     * If set to `true`, the virtual machine will be started when the cluster is launched. Default value is `true`.
     */
    runOnLaunch?: pulumi.Input<boolean>;
    /**
     * Running state indicates the requested running state of the VirtualMachineInstance, mutually exclusive with Running.
     */
    runStrategy?: pulumi.Input<string>;
    /**
     * If specified, the VMI will be dispatched by specified scheduler. If not specified, the VMI will be dispatched by default
     * scheduler.
     */
    schedulerName?: pulumi.Input<string>;
    /**
     * VirtualMachineStatus represents the status returned by the controller to describe how the VirtualMachine is doing.
     */
    status?: pulumi.Input<inputs.VirtualMachineStatus>;
    /**
     * If specified, the fully qualified vmi hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>".
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Grace period observed after signalling a VirtualMachineInstance to stop after which the VirtualMachineInstance is force
     * terminated.
     */
    terminationGracePeriodSeconds?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.VirtualMachineTimeouts>;
    /**
     * If specified, the pod's toleration. Optional: Defaults to empty
     */
    tolerations?: pulumi.Input<pulumi.Input<inputs.VirtualMachineToleration>[]>;
    /**
     * The action to be performed on the virtual machine. Valid values are: `start`, `stop`, `restart`, `pause`, `resume`,
     * `migrate`. Default value is `start`.
     */
    vmAction?: pulumi.Input<string>;
    /**
     * Specification of the desired behavior of the VirtualMachineInstance on the host.
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.VirtualMachineVolume>[]>;
}
