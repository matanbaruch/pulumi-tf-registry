// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Appliance extends pulumi.CustomResource {
    /**
     * Get an existing Appliance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplianceState, opts?: pulumi.CustomResourceOptions): Appliance {
        return new Appliance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spectrocloud:index/appliance:Appliance';

    /**
     * Returns true if the given object is an instance of Appliance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Appliance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Appliance.__pulumiType;
    }

    public readonly pairingKey!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ApplianceTimeouts | undefined>;
    public readonly uid!: pulumi.Output<string>;
    public readonly wait!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Appliance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplianceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplianceArgs | ApplianceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplianceState | undefined;
            resourceInputs["pairingKey"] = state ? state.pairingKey : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["wait"] = state ? state.wait : undefined;
        } else {
            const args = argsOrState as ApplianceArgs | undefined;
            if ((!args || args.uid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'uid'");
            }
            resourceInputs["pairingKey"] = args ? args.pairingKey : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["uid"] = args ? args.uid : undefined;
            resourceInputs["wait"] = args ? args.wait : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Appliance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Appliance resources.
 */
export interface ApplianceState {
    pairingKey?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ApplianceTimeouts>;
    uid?: pulumi.Input<string>;
    wait?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Appliance resource.
 */
export interface ApplianceArgs {
    pairingKey?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ApplianceTimeouts>;
    uid: pulumi.Input<string>;
    wait?: pulumi.Input<boolean>;
}
