// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Alert extends pulumi.CustomResource {
    /**
     * Get an existing Alert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertState, opts?: pulumi.CustomResourceOptions): Alert {
        return new Alert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spectrocloud:index/alert:Alert';

    /**
     * Returns true if the given object is an instance of Alert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Alert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Alert.__pulumiType;
    }

    public readonly alertAllUsers!: pulumi.Output<boolean | undefined>;
    public readonly component!: pulumi.Output<string>;
    public readonly createdBy!: pulumi.Output<string | undefined>;
    public readonly https!: pulumi.Output<outputs.AlertHttp[] | undefined>;
    public readonly identifiers!: pulumi.Output<string[] | undefined>;
    public readonly isActive!: pulumi.Output<boolean>;
    public readonly project!: pulumi.Output<string>;
    public readonly statuses!: pulumi.Output<outputs.AlertStatus[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.AlertTimeouts | undefined>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Alert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertArgs | AlertState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlertState | undefined;
            resourceInputs["alertAllUsers"] = state ? state.alertAllUsers : undefined;
            resourceInputs["component"] = state ? state.component : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["https"] = state ? state.https : undefined;
            resourceInputs["identifiers"] = state ? state.identifiers : undefined;
            resourceInputs["isActive"] = state ? state.isActive : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["statuses"] = state ? state.statuses : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as AlertArgs | undefined;
            if ((!args || args.component === undefined) && !opts.urn) {
                throw new Error("Missing required property 'component'");
            }
            if ((!args || args.isActive === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isActive'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["alertAllUsers"] = args ? args.alertAllUsers : undefined;
            resourceInputs["component"] = args ? args.component : undefined;
            resourceInputs["createdBy"] = args ? args.createdBy : undefined;
            resourceInputs["https"] = args ? args.https : undefined;
            resourceInputs["identifiers"] = args ? args.identifiers : undefined;
            resourceInputs["isActive"] = args ? args.isActive : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["statuses"] = args ? args.statuses : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Alert.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Alert resources.
 */
export interface AlertState {
    alertAllUsers?: pulumi.Input<boolean>;
    component?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    https?: pulumi.Input<pulumi.Input<inputs.AlertHttp>[]>;
    identifiers?: pulumi.Input<pulumi.Input<string>[]>;
    isActive?: pulumi.Input<boolean>;
    project?: pulumi.Input<string>;
    statuses?: pulumi.Input<pulumi.Input<inputs.AlertStatus>[]>;
    timeouts?: pulumi.Input<inputs.AlertTimeouts>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Alert resource.
 */
export interface AlertArgs {
    alertAllUsers?: pulumi.Input<boolean>;
    component: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    https?: pulumi.Input<pulumi.Input<inputs.AlertHttp>[]>;
    identifiers?: pulumi.Input<pulumi.Input<string>[]>;
    isActive: pulumi.Input<boolean>;
    project: pulumi.Input<string>;
    statuses?: pulumi.Input<pulumi.Input<inputs.AlertStatus>[]>;
    timeouts?: pulumi.Input<inputs.AlertTimeouts>;
    type: pulumi.Input<string>;
}
