// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CloudaccountOpenstack extends pulumi.CustomResource {
    /**
     * Get an existing CloudaccountOpenstack resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudaccountOpenstackState, opts?: pulumi.CustomResourceOptions): CloudaccountOpenstack {
        return new CloudaccountOpenstack(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'spectrocloud:index/cloudaccountOpenstack:CloudaccountOpenstack';

    /**
     * Returns true if the given object is an instance of CloudaccountOpenstack.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudaccountOpenstack {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudaccountOpenstack.__pulumiType;
    }

    /**
     * The CA certificate of the OpenStack cloud that is used to connect to the OpenStack cloud.
     */
    public readonly caCertificate!: pulumi.Output<string | undefined>;
    public readonly context!: pulumi.Output<string | undefined>;
    /**
     * The default domain of the OpenStack cloud that is used to connect to the OpenStack cloud.
     */
    public readonly defaultDomain!: pulumi.Output<string>;
    /**
     * The default project of the OpenStack cloud that is used to connect to the OpenStack cloud.
     */
    public readonly defaultProject!: pulumi.Output<string>;
    /**
     * The identity endpoint of the OpenStack cloud that is used to connect to the OpenStack cloud.
     */
    public readonly identityEndpoint!: pulumi.Output<string>;
    /**
     * Name of the OpenStack cloud account.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Whether to allow insecure connections to the OpenStack cloud. Default is `false`.
     */
    public readonly openstackAllowInsecure!: pulumi.Output<boolean | undefined>;
    /**
     * The password of the OpenStack cloud that is used to connect to the OpenStack cloud.
     */
    public readonly openstackPassword!: pulumi.Output<string>;
    /**
     * The username of the OpenStack cloud that is used to connect to the OpenStack cloud.
     */
    public readonly openstackUsername!: pulumi.Output<string>;
    /**
     * The parent region of the OpenStack cloud that is used to connect to the OpenStack cloud.
     */
    public readonly parentRegion!: pulumi.Output<string>;
    /**
     * ID of the private cloud gateway that is used to connect to the OpenStack cloud.
     */
    public readonly privateCloudGatewayId!: pulumi.Output<string>;

    /**
     * Create a CloudaccountOpenstack resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudaccountOpenstackArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudaccountOpenstackArgs | CloudaccountOpenstackState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudaccountOpenstackState | undefined;
            resourceInputs["caCertificate"] = state ? state.caCertificate : undefined;
            resourceInputs["context"] = state ? state.context : undefined;
            resourceInputs["defaultDomain"] = state ? state.defaultDomain : undefined;
            resourceInputs["defaultProject"] = state ? state.defaultProject : undefined;
            resourceInputs["identityEndpoint"] = state ? state.identityEndpoint : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["openstackAllowInsecure"] = state ? state.openstackAllowInsecure : undefined;
            resourceInputs["openstackPassword"] = state ? state.openstackPassword : undefined;
            resourceInputs["openstackUsername"] = state ? state.openstackUsername : undefined;
            resourceInputs["parentRegion"] = state ? state.parentRegion : undefined;
            resourceInputs["privateCloudGatewayId"] = state ? state.privateCloudGatewayId : undefined;
        } else {
            const args = argsOrState as CloudaccountOpenstackArgs | undefined;
            if ((!args || args.defaultDomain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultDomain'");
            }
            if ((!args || args.defaultProject === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultProject'");
            }
            if ((!args || args.identityEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identityEndpoint'");
            }
            if ((!args || args.openstackPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'openstackPassword'");
            }
            if ((!args || args.openstackUsername === undefined) && !opts.urn) {
                throw new Error("Missing required property 'openstackUsername'");
            }
            if ((!args || args.parentRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentRegion'");
            }
            if ((!args || args.privateCloudGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateCloudGatewayId'");
            }
            resourceInputs["caCertificate"] = args ? args.caCertificate : undefined;
            resourceInputs["context"] = args ? args.context : undefined;
            resourceInputs["defaultDomain"] = args ? args.defaultDomain : undefined;
            resourceInputs["defaultProject"] = args ? args.defaultProject : undefined;
            resourceInputs["identityEndpoint"] = args ? args.identityEndpoint : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["openstackAllowInsecure"] = args ? args.openstackAllowInsecure : undefined;
            resourceInputs["openstackPassword"] = args?.openstackPassword ? pulumi.secret(args.openstackPassword) : undefined;
            resourceInputs["openstackUsername"] = args ? args.openstackUsername : undefined;
            resourceInputs["parentRegion"] = args ? args.parentRegion : undefined;
            resourceInputs["privateCloudGatewayId"] = args ? args.privateCloudGatewayId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["openstackPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CloudaccountOpenstack.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudaccountOpenstack resources.
 */
export interface CloudaccountOpenstackState {
    /**
     * The CA certificate of the OpenStack cloud that is used to connect to the OpenStack cloud.
     */
    caCertificate?: pulumi.Input<string>;
    context?: pulumi.Input<string>;
    /**
     * The default domain of the OpenStack cloud that is used to connect to the OpenStack cloud.
     */
    defaultDomain?: pulumi.Input<string>;
    /**
     * The default project of the OpenStack cloud that is used to connect to the OpenStack cloud.
     */
    defaultProject?: pulumi.Input<string>;
    /**
     * The identity endpoint of the OpenStack cloud that is used to connect to the OpenStack cloud.
     */
    identityEndpoint?: pulumi.Input<string>;
    /**
     * Name of the OpenStack cloud account.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether to allow insecure connections to the OpenStack cloud. Default is `false`.
     */
    openstackAllowInsecure?: pulumi.Input<boolean>;
    /**
     * The password of the OpenStack cloud that is used to connect to the OpenStack cloud.
     */
    openstackPassword?: pulumi.Input<string>;
    /**
     * The username of the OpenStack cloud that is used to connect to the OpenStack cloud.
     */
    openstackUsername?: pulumi.Input<string>;
    /**
     * The parent region of the OpenStack cloud that is used to connect to the OpenStack cloud.
     */
    parentRegion?: pulumi.Input<string>;
    /**
     * ID of the private cloud gateway that is used to connect to the OpenStack cloud.
     */
    privateCloudGatewayId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudaccountOpenstack resource.
 */
export interface CloudaccountOpenstackArgs {
    /**
     * The CA certificate of the OpenStack cloud that is used to connect to the OpenStack cloud.
     */
    caCertificate?: pulumi.Input<string>;
    context?: pulumi.Input<string>;
    /**
     * The default domain of the OpenStack cloud that is used to connect to the OpenStack cloud.
     */
    defaultDomain: pulumi.Input<string>;
    /**
     * The default project of the OpenStack cloud that is used to connect to the OpenStack cloud.
     */
    defaultProject: pulumi.Input<string>;
    /**
     * The identity endpoint of the OpenStack cloud that is used to connect to the OpenStack cloud.
     */
    identityEndpoint: pulumi.Input<string>;
    /**
     * Name of the OpenStack cloud account.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether to allow insecure connections to the OpenStack cloud. Default is `false`.
     */
    openstackAllowInsecure?: pulumi.Input<boolean>;
    /**
     * The password of the OpenStack cloud that is used to connect to the OpenStack cloud.
     */
    openstackPassword: pulumi.Input<string>;
    /**
     * The username of the OpenStack cloud that is used to connect to the OpenStack cloud.
     */
    openstackUsername: pulumi.Input<string>;
    /**
     * The parent region of the OpenStack cloud that is used to connect to the OpenStack cloud.
     */
    parentRegion: pulumi.Input<string>;
    /**
     * ID of the private cloud gateway that is used to connect to the OpenStack cloud.
     */
    privateCloudGatewayId: pulumi.Input<string>;
}
