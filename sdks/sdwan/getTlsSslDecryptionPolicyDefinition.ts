// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getTlsSslDecryptionPolicyDefinition(args: GetTlsSslDecryptionPolicyDefinitionArgs, opts?: pulumi.InvokeOptions): Promise<GetTlsSslDecryptionPolicyDefinitionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sdwan:index/getTlsSslDecryptionPolicyDefinition:getTlsSslDecryptionPolicyDefinition", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getTlsSslDecryptionPolicyDefinition.
 */
export interface GetTlsSslDecryptionPolicyDefinitionArgs {
    id: string;
}

/**
 * A collection of values returned by getTlsSslDecryptionPolicyDefinition.
 */
export interface GetTlsSslDecryptionPolicyDefinitionResult {
    readonly certificateLifetimeInDays: number;
    readonly certificateRevocationStatus: string;
    readonly defaultAction: string;
    readonly description: string;
    readonly ecKeyType: string;
    readonly expiredCertificate: string;
    readonly failureMode: string;
    readonly id: string;
    readonly minimalTlsVersion: string;
    readonly mode: string;
    readonly name: string;
    readonly networkRules: outputs.GetTlsSslDecryptionPolicyDefinitionNetworkRule[];
    readonly rsaKeyPairModulus: string;
    readonly sslDecryptionEnabled: string;
    readonly unknownRevocationStatus: string;
    readonly unsupportedCipherSuites: string;
    readonly unsupportedProtocolVersions: string;
    readonly untrustedCertificate: string;
    readonly urlRules: outputs.GetTlsSslDecryptionPolicyDefinitionUrlRule[];
    readonly useDefaultCaCertBundle: boolean;
    readonly version: number;
}
export function getTlsSslDecryptionPolicyDefinitionOutput(args: GetTlsSslDecryptionPolicyDefinitionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTlsSslDecryptionPolicyDefinitionResult> {
    return pulumi.output(args).apply((a: any) => getTlsSslDecryptionPolicyDefinition(a, opts))
}

/**
 * A collection of arguments for invoking getTlsSslDecryptionPolicyDefinition.
 */
export interface GetTlsSslDecryptionPolicyDefinitionOutputArgs {
    id: pulumi.Input<string>;
}
