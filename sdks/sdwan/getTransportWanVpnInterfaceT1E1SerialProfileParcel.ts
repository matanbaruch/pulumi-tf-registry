// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getTransportWanVpnInterfaceT1E1SerialProfileParcel(args: GetTransportWanVpnInterfaceT1E1SerialProfileParcelArgs, opts?: pulumi.InvokeOptions): Promise<GetTransportWanVpnInterfaceT1E1SerialProfileParcelResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sdwan:index/getTransportWanVpnInterfaceT1E1SerialProfileParcel:getTransportWanVpnInterfaceT1E1SerialProfileParcel", {
        "featureProfileId": args.featureProfileId,
        "id": args.id,
        "transportWanVpnProfileParcelId": args.transportWanVpnProfileParcelId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getTransportWanVpnInterfaceT1E1SerialProfileParcel.
 */
export interface GetTransportWanVpnInterfaceT1E1SerialProfileParcelArgs {
    featureProfileId: string;
    id: string;
    transportWanVpnProfileParcelId: string;
}

/**
 * A collection of values returned by getTransportWanVpnInterfaceT1E1SerialProfileParcel.
 */
export interface GetTransportWanVpnInterfaceT1E1SerialProfileParcelResult {
    readonly bandwidth: number;
    readonly bandwidthDownstream: number;
    readonly bandwidthDownstreamVariable: string;
    readonly bandwidthVariable: string;
    readonly clockRate: string;
    readonly clockRateVariable: string;
    readonly description: string;
    readonly encapsulation: string;
    readonly encapsulationVariable: string;
    readonly featureProfileId: string;
    readonly id: string;
    readonly interfaceName: string;
    readonly interfaceNameVariable: string;
    readonly ipMtu: number;
    readonly ipMtuVariable: string;
    readonly ipv4Address: string;
    readonly ipv4AddressVariable: string;
    readonly ipv4SubnetMask: string;
    readonly ipv4SubnetMaskVariable: string;
    readonly ipv6Address: string;
    readonly ipv6AddressVariable: string;
    readonly mtu: number;
    readonly mtuVariable: string;
    readonly name: string;
    readonly perTunnelQos: boolean;
    readonly perTunnelQosAggregator: boolean;
    readonly perTunnelQosAggregatorVariable: string;
    readonly perTunnelQosVariable: string;
    readonly qosShapingRate: number;
    readonly qosShapingRateVariable: string;
    readonly shutdown: boolean;
    readonly shutdownVariable: string;
    readonly tcpMss: number;
    readonly tcpMssVariable: string;
    readonly tlocExtension: string;
    readonly tlocExtensionVariable: string;
    readonly transportWanVpnProfileParcelId: string;
    readonly tunnelInterface: boolean;
    readonly tunnelInterfaceAllowAll: boolean;
    readonly tunnelInterfaceAllowAllVariable: string;
    readonly tunnelInterfaceAllowBfd: boolean;
    readonly tunnelInterfaceAllowBfdVariable: string;
    readonly tunnelInterfaceAllowBgp: boolean;
    readonly tunnelInterfaceAllowBgpVariable: string;
    readonly tunnelInterfaceAllowDhcp: boolean;
    readonly tunnelInterfaceAllowDhcpVariable: string;
    readonly tunnelInterfaceAllowDns: boolean;
    readonly tunnelInterfaceAllowDnsVariable: string;
    readonly tunnelInterfaceAllowHttps: boolean;
    readonly tunnelInterfaceAllowHttpsVariable: string;
    readonly tunnelInterfaceAllowIcmp: boolean;
    readonly tunnelInterfaceAllowIcmpVariable: string;
    readonly tunnelInterfaceAllowNetconf: boolean;
    readonly tunnelInterfaceAllowNetconfVariable: string;
    readonly tunnelInterfaceAllowNtp: boolean;
    readonly tunnelInterfaceAllowNtpVariable: string;
    readonly tunnelInterfaceAllowOspf: boolean;
    readonly tunnelInterfaceAllowOspfVariable: string;
    readonly tunnelInterfaceAllowSnmp: boolean;
    readonly tunnelInterfaceAllowSnmpVariable: string;
    readonly tunnelInterfaceAllowSsh: boolean;
    readonly tunnelInterfaceAllowSshVariable: string;
    readonly tunnelInterfaceAllowStun: boolean;
    readonly tunnelInterfaceAllowStunVariable: string;
    readonly tunnelInterfaceBindLoopbackTunnel: string;
    readonly tunnelInterfaceBindLoopbackTunnelVariable: string;
    readonly tunnelInterfaceBorder: boolean;
    readonly tunnelInterfaceBorderVariable: string;
    readonly tunnelInterfaceCarrier: string;
    readonly tunnelInterfaceCarrierVariable: string;
    readonly tunnelInterfaceClearDontFragment: boolean;
    readonly tunnelInterfaceClearDontFragmentVariable: string;
    readonly tunnelInterfaceClearNetworkBroadcast: boolean;
    readonly tunnelInterfaceClearNetworkBroadcastVariable: string;
    readonly tunnelInterfaceColor: string;
    readonly tunnelInterfaceColorVariable: string;
    readonly tunnelInterfaceEncapsulations: outputs.GetTransportWanVpnInterfaceT1E1SerialProfileParcelTunnelInterfaceEncapsulation[];
    readonly tunnelInterfaceExcludeControllerGroupListVariable: string;
    readonly tunnelInterfaceExcludeControllerGroupLists: number[];
    readonly tunnelInterfaceGroups: number;
    readonly tunnelInterfaceGroupsVariable: string;
    readonly tunnelInterfaceHelloInterval: number;
    readonly tunnelInterfaceHelloIntervalVariable: string;
    readonly tunnelInterfaceHelloTolerance: number;
    readonly tunnelInterfaceHelloToleranceVariable: string;
    readonly tunnelInterfaceLastResortCircuit: boolean;
    readonly tunnelInterfaceLastResortCircuitVariable: string;
    readonly tunnelInterfaceLowBandwidthLink: boolean;
    readonly tunnelInterfaceLowBandwidthLinkVariable: string;
    readonly tunnelInterfaceMaxControlConnections: number;
    readonly tunnelInterfaceMaxControlConnectionsVariable: string;
    readonly tunnelInterfaceNatRefreshInterval: number;
    readonly tunnelInterfaceNatRefreshIntervalVariable: string;
    readonly tunnelInterfacePortHop: boolean;
    readonly tunnelInterfacePortHopVariable: string;
    readonly tunnelInterfaceRestrict: boolean;
    readonly tunnelInterfaceRestrictVariable: string;
    readonly tunnelInterfaceTunnelTcpMss: number;
    readonly tunnelInterfaceTunnelTcpMssVariable: string;
    readonly tunnelInterfaceVbondAsStunServer: boolean;
    readonly tunnelInterfaceVbondAsStunServerVariable: string;
    readonly tunnelInterfaceVmanageConnectionPreference: number;
    readonly tunnelInterfaceVmanageConnectionPreferenceVariable: string;
    readonly tunnelQosMode: string;
    readonly tunnelQosModeVariable: string;
    readonly version: number;
}
export function getTransportWanVpnInterfaceT1E1SerialProfileParcelOutput(args: GetTransportWanVpnInterfaceT1E1SerialProfileParcelOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTransportWanVpnInterfaceT1E1SerialProfileParcelResult> {
    return pulumi.output(args).apply((a: any) => getTransportWanVpnInterfaceT1E1SerialProfileParcel(a, opts))
}

/**
 * A collection of arguments for invoking getTransportWanVpnInterfaceT1E1SerialProfileParcel.
 */
export interface GetTransportWanVpnInterfaceT1E1SerialProfileParcelOutputArgs {
    featureProfileId: pulumi.Input<string>;
    id: pulumi.Input<string>;
    transportWanVpnProfileParcelId: pulumi.Input<string>;
}
