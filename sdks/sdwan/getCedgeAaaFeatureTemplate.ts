// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCedgeAaaFeatureTemplate(args?: GetCedgeAaaFeatureTemplateArgs, opts?: pulumi.InvokeOptions): Promise<GetCedgeAaaFeatureTemplateResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sdwan:index/getCedgeAaaFeatureTemplate:getCedgeAaaFeatureTemplate", {
        "id": args.id,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCedgeAaaFeatureTemplate.
 */
export interface GetCedgeAaaFeatureTemplateArgs {
    id?: string;
    name?: string;
}

/**
 * A collection of values returned by getCedgeAaaFeatureTemplate.
 */
export interface GetCedgeAaaFeatureTemplateResult {
    readonly accountingRules: outputs.GetCedgeAaaFeatureTemplateAccountingRule[];
    readonly authorizationConfigCommands: boolean;
    readonly authorizationConfigCommandsVariable: string;
    readonly authorizationConsole: boolean;
    readonly authorizationConsoleVariable: string;
    readonly authorizationRules: outputs.GetCedgeAaaFeatureTemplateAuthorizationRule[];
    readonly description: string;
    readonly deviceTypes: string[];
    readonly dot1xAccounting: boolean;
    readonly dot1xAccountingVariable: string;
    readonly dot1xAuthentication: boolean;
    readonly dot1xAuthenticationVariable: string;
    readonly id: string;
    readonly name: string;
    readonly radiusClients: outputs.GetCedgeAaaFeatureTemplateRadiusClient[];
    readonly radiusDynamicAuthorAuthenticationType: string;
    readonly radiusDynamicAuthorAuthenticationTypeVariable: string;
    readonly radiusDynamicAuthorDomainStripping: string;
    readonly radiusDynamicAuthorDomainStrippingVariable: string;
    readonly radiusDynamicAuthorPort: number;
    readonly radiusDynamicAuthorPortVariable: string;
    readonly radiusDynamicAuthorServerKey: string;
    readonly radiusDynamicAuthorServerKeyVariable: string;
    readonly radiusServerGroups: outputs.GetCedgeAaaFeatureTemplateRadiusServerGroup[];
    readonly radiusTrustsecCtsAuthorizationList: string;
    readonly radiusTrustsecCtsAuthorizationListVariable: string;
    readonly radiusTrustsecGroup: string;
    readonly serverGroupsPriorityOrder: string;
    readonly tacacsServerGroups: outputs.GetCedgeAaaFeatureTemplateTacacsServerGroup[];
    readonly templateType: string;
    readonly users: outputs.GetCedgeAaaFeatureTemplateUser[];
    readonly version: number;
}
export function getCedgeAaaFeatureTemplateOutput(args?: GetCedgeAaaFeatureTemplateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCedgeAaaFeatureTemplateResult> {
    return pulumi.output(args).apply((a: any) => getCedgeAaaFeatureTemplate(a, opts))
}

/**
 * A collection of arguments for invoking getCedgeAaaFeatureTemplate.
 */
export interface GetCedgeAaaFeatureTemplateOutputArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}
