// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getTransportWanVpnInterfaceIpsecProfileParcel(args: GetTransportWanVpnInterfaceIpsecProfileParcelArgs, opts?: pulumi.InvokeOptions): Promise<GetTransportWanVpnInterfaceIpsecProfileParcelResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sdwan:index/getTransportWanVpnInterfaceIpsecProfileParcel:getTransportWanVpnInterfaceIpsecProfileParcel", {
        "featureProfileId": args.featureProfileId,
        "id": args.id,
        "transportWanVpnProfileParcelId": args.transportWanVpnProfileParcelId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getTransportWanVpnInterfaceIpsecProfileParcel.
 */
export interface GetTransportWanVpnInterfaceIpsecProfileParcelArgs {
    featureProfileId: string;
    id: string;
    transportWanVpnProfileParcelId: string;
}

/**
 * A collection of values returned by getTransportWanVpnInterfaceIpsecProfileParcel.
 */
export interface GetTransportWanVpnInterfaceIpsecProfileParcelResult {
    readonly applicationTunnelType: string;
    readonly applicationTunnelTypeVariable: string;
    readonly clearDontFragment: boolean;
    readonly clearDontFragmentVariable: string;
    readonly description: string;
    readonly dpdInterval: number;
    readonly dpdIntervalVariable: string;
    readonly dpdRetries: number;
    readonly dpdRetriesVariable: string;
    readonly featureProfileId: string;
    readonly id: string;
    readonly ikeCiphersuite: string;
    readonly ikeCiphersuiteVariable: string;
    readonly ikeDiffieHellmanGroup: string;
    readonly ikeDiffieHellmanGroupVariable: string;
    readonly ikeIdLocalEndPoint: string;
    readonly ikeIdLocalEndPointVariable: string;
    readonly ikeIdRemoteEndPoint: string;
    readonly ikeIdRemoteEndPointVariable: string;
    readonly ikeIntegrityProtocol: string;
    readonly ikeIntegrityProtocolVariable: string;
    readonly ikePresharedKey: string;
    readonly ikePresharedKeyVariable: string;
    readonly ikeRekeyInterval: number;
    readonly ikeRekeyIntervalVariable: string;
    readonly ikeVersion: number;
    readonly interfaceDescription: string;
    readonly interfaceDescriptionVariable: string;
    readonly interfaceName: string;
    readonly interfaceNameVariable: string;
    readonly ipMtu: number;
    readonly ipMtuVariable: string;
    readonly ipsecCiphersuite: string;
    readonly ipsecCiphersuiteVariable: string;
    readonly ipsecRekeyInterval: number;
    readonly ipsecRekeyIntervalVariable: string;
    readonly ipsecReplayWindow: number;
    readonly ipsecReplayWindowVariable: string;
    readonly ipv4Address: string;
    readonly ipv4AddressVariable: string;
    readonly ipv4SubnetMask: string;
    readonly ipv4SubnetMaskVariable: string;
    readonly name: string;
    readonly perfectForwardSecrecy: string;
    readonly perfectForwardSecrecyVariable: string;
    readonly shutdown: boolean;
    readonly shutdownVariable: string;
    readonly tcpMss: number;
    readonly tcpMssVariable: string;
    readonly trackerId: string;
    readonly trackerIdVariable: string;
    readonly transportWanVpnProfileParcelId: string;
    readonly tunnelDestinationIpv4Address: string;
    readonly tunnelDestinationIpv4AddressVariable: string;
    readonly tunnelDestinationIpv4SubnetMask: string;
    readonly tunnelDestinationIpv4SubnetMaskVariable: string;
    readonly tunnelRouteVia: string;
    readonly tunnelRouteViaVariable: string;
    readonly tunnelSourceInterface: string;
    readonly tunnelSourceInterfaceVariable: string;
    readonly tunnelSourceIpv4Address: string;
    readonly tunnelSourceIpv4AddressVariable: string;
    readonly tunnelSourceIpv4SubnetMask: string;
    readonly tunnelSourceIpv4SubnetMaskVariable: string;
    readonly version: number;
}
export function getTransportWanVpnInterfaceIpsecProfileParcelOutput(args: GetTransportWanVpnInterfaceIpsecProfileParcelOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTransportWanVpnInterfaceIpsecProfileParcelResult> {
    return pulumi.output(args).apply((a: any) => getTransportWanVpnInterfaceIpsecProfileParcel(a, opts))
}

/**
 * A collection of arguments for invoking getTransportWanVpnInterfaceIpsecProfileParcel.
 */
export interface GetTransportWanVpnInterfaceIpsecProfileParcelOutputArgs {
    featureProfileId: pulumi.Input<string>;
    id: pulumi.Input<string>;
    transportWanVpnProfileParcelId: pulumi.Input<string>;
}
