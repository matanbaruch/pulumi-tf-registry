// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getServiceLanVpnInterfaceSviProfileParcel(args: GetServiceLanVpnInterfaceSviProfileParcelArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceLanVpnInterfaceSviProfileParcelResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sdwan:index/getServiceLanVpnInterfaceSviProfileParcel:getServiceLanVpnInterfaceSviProfileParcel", {
        "featureProfileId": args.featureProfileId,
        "id": args.id,
        "serviceLanVpnProfileParcelId": args.serviceLanVpnProfileParcelId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getServiceLanVpnInterfaceSviProfileParcel.
 */
export interface GetServiceLanVpnInterfaceSviProfileParcelArgs {
    featureProfileId: string;
    id: string;
    serviceLanVpnProfileParcelId: string;
}

/**
 * A collection of values returned by getServiceLanVpnInterfaceSviProfileParcel.
 */
export interface GetServiceLanVpnInterfaceSviProfileParcelResult {
    readonly arpTimeout: number;
    readonly arpTimeoutVariable: string;
    readonly arps: outputs.GetServiceLanVpnInterfaceSviProfileParcelArp[];
    readonly description: string;
    readonly enableDhcpv6: boolean;
    readonly enableDhcpv6Variable: string;
    readonly featureProfileId: string;
    readonly icmpRedirectDisable: boolean;
    readonly icmpRedirectDisableVariable: string;
    readonly id: string;
    readonly interfaceDescription: string;
    readonly interfaceDescriptionVariable: string;
    readonly interfaceMtu: number;
    readonly interfaceMtuVariable: string;
    readonly interfaceName: string;
    readonly interfaceNameVariable: string;
    readonly ipDirectedBroadcast: boolean;
    readonly ipDirectedBroadcastVariable: string;
    readonly ipMtu: number;
    readonly ipMtuVariable: string;
    readonly ipv4Address: string;
    readonly ipv4AddressVariable: string;
    readonly ipv4DhcpHelpers: string[];
    readonly ipv4DhcpHelpersVariable: string;
    readonly ipv4SecondaryAddresses: outputs.GetServiceLanVpnInterfaceSviProfileParcelIpv4SecondaryAddress[];
    readonly ipv4SubnetMask: string;
    readonly ipv4SubnetMaskVariable: string;
    readonly ipv4Vrrps: outputs.GetServiceLanVpnInterfaceSviProfileParcelIpv4Vrrp[];
    readonly ipv6Address: string;
    readonly ipv6AddressVariable: string;
    readonly ipv6DhcpHelpers: outputs.GetServiceLanVpnInterfaceSviProfileParcelIpv6DhcpHelper[];
    readonly ipv6SecondaryAddresses: outputs.GetServiceLanVpnInterfaceSviProfileParcelIpv6SecondaryAddress[];
    readonly ipv6Vrrps: outputs.GetServiceLanVpnInterfaceSviProfileParcelIpv6Vrrp[];
    readonly name: string;
    readonly serviceLanVpnProfileParcelId: string;
    readonly shutdown: boolean;
    readonly shutdownVariable: string;
    readonly tcpMss: number;
    readonly tcpMssVariable: string;
    readonly version: number;
}
export function getServiceLanVpnInterfaceSviProfileParcelOutput(args: GetServiceLanVpnInterfaceSviProfileParcelOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceLanVpnInterfaceSviProfileParcelResult> {
    return pulumi.output(args).apply((a: any) => getServiceLanVpnInterfaceSviProfileParcel(a, opts))
}

/**
 * A collection of arguments for invoking getServiceLanVpnInterfaceSviProfileParcel.
 */
export interface GetServiceLanVpnInterfaceSviProfileParcelOutputArgs {
    featureProfileId: pulumi.Input<string>;
    id: pulumi.Input<string>;
    serviceLanVpnProfileParcelId: pulumi.Input<string>;
}
