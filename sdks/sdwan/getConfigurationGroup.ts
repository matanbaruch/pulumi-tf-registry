// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getConfigurationGroup(args: GetConfigurationGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetConfigurationGroupResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sdwan:index/getConfigurationGroup:getConfigurationGroup", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getConfigurationGroup.
 */
export interface GetConfigurationGroupArgs {
    id: string;
}

/**
 * A collection of values returned by getConfigurationGroup.
 */
export interface GetConfigurationGroupResult {
    readonly description: string;
    readonly featureProfiles: outputs.GetConfigurationGroupFeatureProfile[];
    readonly id: string;
    readonly name: string;
    readonly solution: string;
    readonly topologyDevices: outputs.GetConfigurationGroupTopologyDevice[];
    readonly topologySiteDevices: number;
}
export function getConfigurationGroupOutput(args: GetConfigurationGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetConfigurationGroupResult> {
    return pulumi.output(args).apply((a: any) => getConfigurationGroup(a, opts))
}

/**
 * A collection of arguments for invoking getConfigurationGroup.
 */
export interface GetConfigurationGroupOutputArgs {
    id: pulumi.Input<string>;
}
