// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCiscoVpnFeatureTemplate(args?: GetCiscoVpnFeatureTemplateArgs, opts?: pulumi.InvokeOptions): Promise<GetCiscoVpnFeatureTemplateResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sdwan:index/getCiscoVpnFeatureTemplate:getCiscoVpnFeatureTemplate", {
        "id": args.id,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCiscoVpnFeatureTemplate.
 */
export interface GetCiscoVpnFeatureTemplateArgs {
    id?: string;
    name?: string;
}

/**
 * A collection of values returned by getCiscoVpnFeatureTemplate.
 */
export interface GetCiscoVpnFeatureTemplateResult {
    readonly description: string;
    readonly deviceTypes: string[];
    readonly dnsHosts: outputs.GetCiscoVpnFeatureTemplateDnsHost[];
    readonly dnsIpv4Servers: outputs.GetCiscoVpnFeatureTemplateDnsIpv4Server[];
    readonly dnsIpv6Servers: outputs.GetCiscoVpnFeatureTemplateDnsIpv6Server[];
    readonly enhanceEcmpKeying: boolean;
    readonly enhanceEcmpKeyingVariable: string;
    readonly id: string;
    readonly ipv4StaticGreRoutes: outputs.GetCiscoVpnFeatureTemplateIpv4StaticGreRoute[];
    readonly ipv4StaticIpsecRoutes: outputs.GetCiscoVpnFeatureTemplateIpv4StaticIpsecRoute[];
    readonly ipv4StaticRoutes: outputs.GetCiscoVpnFeatureTemplateIpv4StaticRoute[];
    readonly ipv4StaticServiceRoutes: outputs.GetCiscoVpnFeatureTemplateIpv4StaticServiceRoute[];
    readonly ipv6StaticRoutes: outputs.GetCiscoVpnFeatureTemplateIpv6StaticRoute[];
    readonly name: string;
    readonly nat64Pools: outputs.GetCiscoVpnFeatureTemplateNat64Pool[];
    readonly natPools: outputs.GetCiscoVpnFeatureTemplateNatPool[];
    readonly ompAdminDistanceIpv4: number;
    readonly ompAdminDistanceIpv4Variable: string;
    readonly ompAdminDistanceIpv6: number;
    readonly ompAdminDistanceIpv6Variable: string;
    readonly ompAdvertiseIpv4Routes: outputs.GetCiscoVpnFeatureTemplateOmpAdvertiseIpv4Route[];
    readonly ompAdvertiseIpv6Routes: outputs.GetCiscoVpnFeatureTemplateOmpAdvertiseIpv6Route[];
    readonly organizationName: string;
    readonly portForwardRules: outputs.GetCiscoVpnFeatureTemplatePortForwardRule[];
    readonly routeGlobalExports: outputs.GetCiscoVpnFeatureTemplateRouteGlobalExport[];
    readonly routeGlobalImports: outputs.GetCiscoVpnFeatureTemplateRouteGlobalImport[];
    readonly routeVpnImports: outputs.GetCiscoVpnFeatureTemplateRouteVpnImport[];
    readonly services: outputs.GetCiscoVpnFeatureTemplateService[];
    readonly staticNatRules: outputs.GetCiscoVpnFeatureTemplateStaticNatRule[];
    readonly staticNatSubnetRules: outputs.GetCiscoVpnFeatureTemplateStaticNatSubnetRule[];
    readonly templateType: string;
    readonly tenantVpnId: number;
    readonly version: number;
    readonly vpnId: number;
    readonly vpnName: string;
    readonly vpnNameVariable: string;
}
export function getCiscoVpnFeatureTemplateOutput(args?: GetCiscoVpnFeatureTemplateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCiscoVpnFeatureTemplateResult> {
    return pulumi.output(args).apply((a: any) => getCiscoVpnFeatureTemplate(a, opts))
}

/**
 * A collection of arguments for invoking getCiscoVpnFeatureTemplate.
 */
export interface GetCiscoVpnFeatureTemplateOutputArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}
