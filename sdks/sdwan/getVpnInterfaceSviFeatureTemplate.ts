// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVpnInterfaceSviFeatureTemplate(args?: GetVpnInterfaceSviFeatureTemplateArgs, opts?: pulumi.InvokeOptions): Promise<GetVpnInterfaceSviFeatureTemplateResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sdwan:index/getVpnInterfaceSviFeatureTemplate:getVpnInterfaceSviFeatureTemplate", {
        "id": args.id,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVpnInterfaceSviFeatureTemplate.
 */
export interface GetVpnInterfaceSviFeatureTemplateArgs {
    id?: string;
    name?: string;
}

/**
 * A collection of values returned by getVpnInterfaceSviFeatureTemplate.
 */
export interface GetVpnInterfaceSviFeatureTemplateResult {
    readonly arpTimeout: number;
    readonly arpTimeoutVariable: string;
    readonly description: string;
    readonly deviceTypes: string[];
    readonly id: string;
    readonly ifName: string;
    readonly ifNameVariable: string;
    readonly interfaceDescription: string;
    readonly interfaceDescriptionVariable: string;
    readonly ipDirectedBroadcast: boolean;
    readonly ipDirectedBroadcastVariable: string;
    readonly ipMtu: number;
    readonly ipMtuVariable: string;
    readonly ipv4AccessLists: outputs.GetVpnInterfaceSviFeatureTemplateIpv4AccessList[];
    readonly ipv4Address: string;
    readonly ipv4AddressVariable: string;
    readonly ipv4DhcpHelperVariable: string;
    readonly ipv4DhcpHelpers: string[];
    readonly ipv4SecondaryAddresses: outputs.GetVpnInterfaceSviFeatureTemplateIpv4SecondaryAddress[];
    readonly ipv4Vrrps: outputs.GetVpnInterfaceSviFeatureTemplateIpv4Vrrp[];
    readonly ipv6AccessLists: outputs.GetVpnInterfaceSviFeatureTemplateIpv6AccessList[];
    readonly ipv6Address: string;
    readonly ipv6AddressVariable: string;
    readonly ipv6DhcpClient: boolean;
    readonly ipv6DhcpClientVariable: string;
    readonly ipv6DhcpDistance: number;
    readonly ipv6DhcpDistanceVariable: string;
    readonly ipv6DhcpHelpers: outputs.GetVpnInterfaceSviFeatureTemplateIpv6DhcpHelper[];
    readonly ipv6DhcpRapidCommit: boolean;
    readonly ipv6DhcpRapidCommitVariable: string;
    readonly ipv6SecondaryAddresses: outputs.GetVpnInterfaceSviFeatureTemplateIpv6SecondaryAddress[];
    readonly ipv6Vrrps: outputs.GetVpnInterfaceSviFeatureTemplateIpv6Vrrp[];
    readonly mtu: number;
    readonly mtuVariable: string;
    readonly name: string;
    readonly policers: outputs.GetVpnInterfaceSviFeatureTemplatePolicer[];
    readonly shutdown: boolean;
    readonly shutdownVariable: string;
    readonly staticArpEntries: outputs.GetVpnInterfaceSviFeatureTemplateStaticArpEntry[];
    readonly tcpMssAdjust: number;
    readonly tcpMssAdjustVariable: string;
    readonly templateType: string;
    readonly version: number;
}
export function getVpnInterfaceSviFeatureTemplateOutput(args?: GetVpnInterfaceSviFeatureTemplateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVpnInterfaceSviFeatureTemplateResult> {
    return pulumi.output(args).apply((a: any) => getVpnInterfaceSviFeatureTemplate(a, opts))
}

/**
 * A collection of arguments for invoking getVpnInterfaceSviFeatureTemplate.
 */
export interface GetVpnInterfaceSviFeatureTemplateOutputArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}
