// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getServiceLanVpnInterfaceEthernetProfileParcel(args: GetServiceLanVpnInterfaceEthernetProfileParcelArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceLanVpnInterfaceEthernetProfileParcelResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sdwan:index/getServiceLanVpnInterfaceEthernetProfileParcel:getServiceLanVpnInterfaceEthernetProfileParcel", {
        "featureProfileId": args.featureProfileId,
        "id": args.id,
        "serviceLanVpnProfileParcelId": args.serviceLanVpnProfileParcelId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getServiceLanVpnInterfaceEthernetProfileParcel.
 */
export interface GetServiceLanVpnInterfaceEthernetProfileParcelArgs {
    featureProfileId: string;
    id: string;
    serviceLanVpnProfileParcelId: string;
}

/**
 * A collection of values returned by getServiceLanVpnInterfaceEthernetProfileParcel.
 */
export interface GetServiceLanVpnInterfaceEthernetProfileParcelResult {
    readonly aclIpv4EgressPolicyId: string;
    readonly aclIpv4IngressPolicyId: string;
    readonly aclIpv6EgressPolicyId: string;
    readonly aclIpv6IngressPolicyId: string;
    readonly aclShapingRate: number;
    readonly aclShapingRateVariable: string;
    readonly arpTimeout: number;
    readonly arpTimeoutVariable: string;
    readonly arps: outputs.GetServiceLanVpnInterfaceEthernetProfileParcelArp[];
    readonly autonegotiate: boolean;
    readonly autonegotiateVariable: string;
    readonly description: string;
    readonly duplex: string;
    readonly duplexVariable: string;
    readonly enableDhcpv6: boolean;
    readonly featureProfileId: string;
    readonly icmpRedirectDisable: boolean;
    readonly icmpRedirectDisableVariable: string;
    readonly id: string;
    readonly interfaceDescription: string;
    readonly interfaceDescriptionVariable: string;
    readonly interfaceMtu: number;
    readonly interfaceMtuVariable: string;
    readonly interfaceName: string;
    readonly interfaceNameVariable: string;
    readonly ipDirectedBroadcast: boolean;
    readonly ipDirectedBroadcastVariable: string;
    readonly ipMtu: number;
    readonly ipMtuVariable: string;
    readonly ipv4Address: string;
    readonly ipv4AddressVariable: string;
    readonly ipv4DhcpDistance: number;
    readonly ipv4DhcpDistanceVariable: string;
    readonly ipv4DhcpHelperVariable: string;
    readonly ipv4DhcpHelpers: string[];
    readonly ipv4Nat: boolean;
    readonly ipv4NatLoopback: string;
    readonly ipv4NatLoopbackVariable: string;
    readonly ipv4NatOverload: boolean;
    readonly ipv4NatOverloadVariable: string;
    readonly ipv4NatPrefixLength: number;
    readonly ipv4NatPrefixLengthVariable: string;
    readonly ipv4NatRangeEnd: string;
    readonly ipv4NatRangeEndVariable: string;
    readonly ipv4NatRangeStart: string;
    readonly ipv4NatRangeStartVariable: string;
    readonly ipv4NatTcpTimeout: number;
    readonly ipv4NatTcpTimeoutVariable: string;
    readonly ipv4NatType: string;
    readonly ipv4NatTypeVariable: string;
    readonly ipv4NatUdpTimeout: number;
    readonly ipv4NatUdpTimeoutVariable: string;
    readonly ipv4SecondaryAddresses: outputs.GetServiceLanVpnInterfaceEthernetProfileParcelIpv4SecondaryAddress[];
    readonly ipv4SubnetMask: string;
    readonly ipv4SubnetMaskVariable: string;
    readonly ipv4Vrrps: outputs.GetServiceLanVpnInterfaceEthernetProfileParcelIpv4Vrrp[];
    readonly ipv6Address: string;
    readonly ipv6AddressVariable: string;
    readonly ipv6DhcpHelpers: outputs.GetServiceLanVpnInterfaceEthernetProfileParcelIpv6DhcpHelper[];
    readonly ipv6DhcpSecondaryAddresses: outputs.GetServiceLanVpnInterfaceEthernetProfileParcelIpv6DhcpSecondaryAddress[];
    readonly ipv6Nat: boolean;
    readonly ipv6SecondaryAddresses: outputs.GetServiceLanVpnInterfaceEthernetProfileParcelIpv6SecondaryAddress[];
    readonly ipv6Vrrps: outputs.GetServiceLanVpnInterfaceEthernetProfileParcelIpv6Vrrp[];
    readonly loadInterval: number;
    readonly loadIntervalVariable: string;
    readonly macAddress: string;
    readonly macAddressVariable: string;
    readonly mediaType: string;
    readonly mediaTypeVariable: string;
    readonly name: string;
    readonly nat64: boolean;
    readonly serviceLanVpnProfileParcelId: string;
    readonly shutdown: boolean;
    readonly shutdownVariable: string;
    readonly speed: string;
    readonly speedVariable: string;
    readonly staticNats: outputs.GetServiceLanVpnInterfaceEthernetProfileParcelStaticNat[];
    readonly tcpMss: number;
    readonly tcpMssVariable: string;
    readonly tracker: string;
    readonly trackerVariable: string;
    readonly trustsecEnableEnforcedPropogation: boolean;
    readonly trustsecEnableSgtPropogation: boolean;
    readonly trustsecEnforcedSecurityGroupTag: number;
    readonly trustsecEnforcedSecurityGroupTagVariable: string;
    readonly trustsecPropogate: boolean;
    readonly trustsecSecurityGroupTag: number;
    readonly trustsecSecurityGroupTagVariable: string;
    readonly version: number;
    readonly xconnect: string;
    readonly xconnectVariable: string;
}
export function getServiceLanVpnInterfaceEthernetProfileParcelOutput(args: GetServiceLanVpnInterfaceEthernetProfileParcelOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceLanVpnInterfaceEthernetProfileParcelResult> {
    return pulumi.output(args).apply((a: any) => getServiceLanVpnInterfaceEthernetProfileParcel(a, opts))
}

/**
 * A collection of arguments for invoking getServiceLanVpnInterfaceEthernetProfileParcel.
 */
export interface GetServiceLanVpnInterfaceEthernetProfileParcelOutputArgs {
    featureProfileId: pulumi.Input<string>;
    id: pulumi.Input<string>;
    serviceLanVpnProfileParcelId: pulumi.Input<string>;
}
