// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { CategoryArgs, CategoryState } from "./category";
export type Category = import("./category").Category;
export const Category: typeof import("./category").Category = null as any;
utilities.lazyLoad(exports, ["Category"], () => require("./category"));

export { GetCategoryArgs, GetCategoryResult, GetCategoryOutputArgs } from "./getCategory";
export const getCategory: typeof import("./getCategory").getCategory = null as any;
export const getCategoryOutput: typeof import("./getCategory").getCategoryOutput = null as any;
utilities.lazyLoad(exports, ["getCategory","getCategoryOutput"], () => require("./getCategory"));

export { GetMailFolderArgs, GetMailFolderResult, GetMailFolderOutputArgs } from "./getMailFolder";
export const getMailFolder: typeof import("./getMailFolder").getMailFolder = null as any;
export const getMailFolderOutput: typeof import("./getMailFolder").getMailFolderOutput = null as any;
utilities.lazyLoad(exports, ["getMailFolder","getMailFolderOutput"], () => require("./getMailFolder"));

export { MailFolderArgs, MailFolderState } from "./mailFolder";
export type MailFolder = import("./mailFolder").MailFolder;
export const MailFolder: typeof import("./mailFolder").MailFolder = null as any;
utilities.lazyLoad(exports, ["MailFolder"], () => require("./mailFolder"));

export { MessageRuleArgs, MessageRuleState } from "./messageRule";
export type MessageRule = import("./messageRule").MessageRule;
export const MessageRule: typeof import("./messageRule").MessageRule = null as any;
utilities.lazyLoad(exports, ["MessageRule"], () => require("./messageRule"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "outlook:index/category:Category":
                return new Category(name, <any>undefined, { urn })
            case "outlook:index/mailFolder:MailFolder":
                return new MailFolder(name, <any>undefined, { urn })
            case "outlook:index/messageRule:MessageRule":
                return new MessageRule(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("outlook", "index/category", _module)
pulumi.runtime.registerResourceModule("outlook", "index/mailFolder", _module)
pulumi.runtime.registerResourceModule("outlook", "index/messageRule", _module)
pulumi.runtime.registerResourcePackage("outlook", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:outlook") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
