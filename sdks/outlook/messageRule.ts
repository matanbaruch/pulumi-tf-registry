// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MessageRule extends pulumi.CustomResource {
    /**
     * Get an existing MessageRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MessageRuleState, opts?: pulumi.CustomResourceOptions): MessageRule {
        return new MessageRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'outlook:index/messageRule:MessageRule';

    /**
     * Returns true if the given object is an instance of MessageRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MessageRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MessageRule.__pulumiType;
    }

    public readonly action!: pulumi.Output<outputs.MessageRuleAction>;
    public readonly condition!: pulumi.Output<outputs.MessageRuleCondition | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly exception!: pulumi.Output<outputs.MessageRuleException | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly sequence!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.MessageRuleTimeouts | undefined>;

    /**
     * Create a MessageRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MessageRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MessageRuleArgs | MessageRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MessageRuleState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["condition"] = state ? state.condition : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["exception"] = state ? state.exception : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sequence"] = state ? state.sequence : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as MessageRuleArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["condition"] = args ? args.condition : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["exception"] = args ? args.exception : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sequence"] = args ? args.sequence : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MessageRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MessageRule resources.
 */
export interface MessageRuleState {
    action?: pulumi.Input<inputs.MessageRuleAction>;
    condition?: pulumi.Input<inputs.MessageRuleCondition>;
    enabled?: pulumi.Input<boolean>;
    exception?: pulumi.Input<inputs.MessageRuleException>;
    name?: pulumi.Input<string>;
    sequence?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.MessageRuleTimeouts>;
}

/**
 * The set of arguments for constructing a MessageRule resource.
 */
export interface MessageRuleArgs {
    action: pulumi.Input<inputs.MessageRuleAction>;
    condition?: pulumi.Input<inputs.MessageRuleCondition>;
    enabled?: pulumi.Input<boolean>;
    exception?: pulumi.Input<inputs.MessageRuleException>;
    name?: pulumi.Input<string>;
    sequence?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.MessageRuleTimeouts>;
}
