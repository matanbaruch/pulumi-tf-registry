// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("outlook");

/**
 * The oauth2 authentication method to use.
 */
export declare const authMethod: string | undefined;
Object.defineProperty(exports, "authMethod", {
    get() {
        return __config.get("authMethod");
    },
    enumerable: true,
});

/**
 * The AzureAD registered application's Object ID (i.e. oauth2 client_id)
 */
export declare const clientId: string | undefined;
Object.defineProperty(exports, "clientId", {
    get() {
        return __config.get("clientId");
    },
    enumerable: true,
});

/**
 * The AzureAD registered application's redirect URL
 */
export declare const clientRedirectUrl: string | undefined;
Object.defineProperty(exports, "clientRedirectUrl", {
    get() {
        return __config.get("clientRedirectUrl");
    },
    enumerable: true,
});

/**
 * The AzureAD registered application's secret (i.e. oauth2 client_secret). For native public application, you can leave it
 * unset.
 */
export declare const clientSecret: string | undefined;
Object.defineProperty(exports, "clientSecret", {
    get() {
        return __config.get("clientSecret");
    },
    enumerable: true,
});

/**
 * Provider level features
 */
export declare const feature: outputs.config.Feature | undefined;
Object.defineProperty(exports, "feature", {
    get() {
        return __config.getObject<outputs.config.Feature>("feature");
    },
    enumerable: true,
});

/**
 * Token cache file path that the provider will export the token info into this file for reuse. Accordingly, the provider
 * will try to load the token from this file if file exists.
 */
export declare const tokenCachePath: string | undefined;
Object.defineProperty(exports, "tokenCachePath", {
    get() {
        return __config.get("tokenCachePath");
    },
    enumerable: true,
});

