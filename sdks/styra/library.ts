// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Library extends pulumi.CustomResource {
    /**
     * Get an existing Library resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LibraryState, opts?: pulumi.CustomResourceOptions): Library {
        return new Library(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'styra:index/library:Library';

    /**
     * Returns true if the given object is an instance of Library.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Library {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Library.__pulumiType;
    }

    public readonly description!: pulumi.Output<string>;
    public readonly readOnly!: pulumi.Output<boolean>;
    public /*out*/ readonly result!: pulumi.Output<outputs.LibraryResult>;
    public readonly sourceControl!: pulumi.Output<outputs.LibrarySourceControl | undefined>;

    /**
     * Create a Library resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LibraryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LibraryArgs | LibraryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LibraryState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["readOnly"] = state ? state.readOnly : undefined;
            resourceInputs["result"] = state ? state.result : undefined;
            resourceInputs["sourceControl"] = state ? state.sourceControl : undefined;
        } else {
            const args = argsOrState as LibraryArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.readOnly === undefined) && !opts.urn) {
                throw new Error("Missing required property 'readOnly'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["readOnly"] = args ? args.readOnly : undefined;
            resourceInputs["sourceControl"] = args ? args.sourceControl : undefined;
            resourceInputs["result"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Library.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Library resources.
 */
export interface LibraryState {
    description?: pulumi.Input<string>;
    readOnly?: pulumi.Input<boolean>;
    result?: pulumi.Input<inputs.LibraryResult>;
    sourceControl?: pulumi.Input<inputs.LibrarySourceControl>;
}

/**
 * The set of arguments for constructing a Library resource.
 */
export interface LibraryArgs {
    description: pulumi.Input<string>;
    readOnly: pulumi.Input<boolean>;
    sourceControl?: pulumi.Input<inputs.LibrarySourceControl>;
}
