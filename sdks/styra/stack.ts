// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Stack extends pulumi.CustomResource {
    /**
     * Get an existing Stack resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StackState, opts?: pulumi.CustomResourceOptions): Stack {
        return new Stack(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'styra:index/stack:Stack';

    /**
     * Returns true if the given object is an instance of Stack.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Stack {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Stack.__pulumiType;
    }

    public /*out*/ readonly authz!: pulumi.Output<outputs.StackAuthz>;
    /**
     * datasources created for the stack
     */
    public /*out*/ readonly datasources!: pulumi.Output<outputs.StackDatasource[]>;
    public readonly description!: pulumi.Output<string>;
    /**
     * current stack deployment errors
     */
    public /*out*/ readonly errors!: pulumi.Output<{[key: string]: outputs.StackErrors}>;
    /**
     * IDs of systems matching the stack
     */
    public /*out*/ readonly matchingSystems!: pulumi.Output<string[]>;
    public /*out*/ readonly metadata!: pulumi.Output<outputs.StackMetadata>;
    /**
     * A history of any migrations performed on this stack
     */
    public /*out*/ readonly migrationHistories!: pulumi.Output<outputs.StackMigrationHistory[]>;
    /**
     * minimum running OPA version for any of the matching systems
     */
    public /*out*/ readonly minimumOpaVersion!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly policies!: pulumi.Output<outputs.StackPolicy[]>;
    public readonly readOnly!: pulumi.Output<boolean>;
    public readonly sourceControl!: pulumi.Output<outputs.StackSourceControl>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    /**
     * stack type parameter values (for template.* types)
     */
    public readonly typeParameters!: pulumi.Output<outputs.StackTypeParameters>;

    /**
     * Create a Stack resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StackArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StackArgs | StackState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StackState | undefined;
            resourceInputs["authz"] = state ? state.authz : undefined;
            resourceInputs["datasources"] = state ? state.datasources : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["errors"] = state ? state.errors : undefined;
            resourceInputs["matchingSystems"] = state ? state.matchingSystems : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["migrationHistories"] = state ? state.migrationHistories : undefined;
            resourceInputs["minimumOpaVersion"] = state ? state.minimumOpaVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
            resourceInputs["readOnly"] = state ? state.readOnly : undefined;
            resourceInputs["sourceControl"] = state ? state.sourceControl : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["typeParameters"] = state ? state.typeParameters : undefined;
        } else {
            const args = argsOrState as StackArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.readOnly === undefined) && !opts.urn) {
                throw new Error("Missing required property 'readOnly'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["readOnly"] = args ? args.readOnly : undefined;
            resourceInputs["sourceControl"] = args ? args.sourceControl : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["typeParameters"] = args ? args.typeParameters : undefined;
            resourceInputs["authz"] = undefined /*out*/;
            resourceInputs["datasources"] = undefined /*out*/;
            resourceInputs["errors"] = undefined /*out*/;
            resourceInputs["matchingSystems"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["migrationHistories"] = undefined /*out*/;
            resourceInputs["minimumOpaVersion"] = undefined /*out*/;
            resourceInputs["policies"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Stack.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Stack resources.
 */
export interface StackState {
    authz?: pulumi.Input<inputs.StackAuthz>;
    /**
     * datasources created for the stack
     */
    datasources?: pulumi.Input<pulumi.Input<inputs.StackDatasource>[]>;
    description?: pulumi.Input<string>;
    /**
     * current stack deployment errors
     */
    errors?: pulumi.Input<{[key: string]: pulumi.Input<inputs.StackErrors>}>;
    /**
     * IDs of systems matching the stack
     */
    matchingSystems?: pulumi.Input<pulumi.Input<string>[]>;
    metadata?: pulumi.Input<inputs.StackMetadata>;
    /**
     * A history of any migrations performed on this stack
     */
    migrationHistories?: pulumi.Input<pulumi.Input<inputs.StackMigrationHistory>[]>;
    /**
     * minimum running OPA version for any of the matching systems
     */
    minimumOpaVersion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    policies?: pulumi.Input<pulumi.Input<inputs.StackPolicy>[]>;
    readOnly?: pulumi.Input<boolean>;
    sourceControl?: pulumi.Input<inputs.StackSourceControl>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    /**
     * stack type parameter values (for template.* types)
     */
    typeParameters?: pulumi.Input<inputs.StackTypeParameters>;
}

/**
 * The set of arguments for constructing a Stack resource.
 */
export interface StackArgs {
    description: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    readOnly: pulumi.Input<boolean>;
    sourceControl?: pulumi.Input<inputs.StackSourceControl>;
    type: pulumi.Input<string>;
    /**
     * stack type parameter values (for template.* types)
     */
    typeParameters?: pulumi.Input<inputs.StackTypeParameters>;
}
