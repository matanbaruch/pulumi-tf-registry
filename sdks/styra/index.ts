// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetLibraryArgs, GetLibraryResult, GetLibraryOutputArgs } from "./getLibrary";
export const getLibrary: typeof import("./getLibrary").getLibrary = null as any;
export const getLibraryOutput: typeof import("./getLibrary").getLibraryOutput = null as any;
utilities.lazyLoad(exports, ["getLibrary","getLibraryOutput"], () => require("./getLibrary"));

export { GetPolicyArgs, GetPolicyResult, GetPolicyOutputArgs } from "./getPolicy";
export const getPolicy: typeof import("./getPolicy").getPolicy = null as any;
export const getPolicyOutput: typeof import("./getPolicy").getPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPolicy","getPolicyOutput"], () => require("./getPolicy"));

export { GetSecretArgs, GetSecretResult, GetSecretOutputArgs } from "./getSecret";
export const getSecret: typeof import("./getSecret").getSecret = null as any;
export const getSecretOutput: typeof import("./getSecret").getSecretOutput = null as any;
utilities.lazyLoad(exports, ["getSecret","getSecretOutput"], () => require("./getSecret"));

export { GetStackArgs, GetStackResult, GetStackOutputArgs } from "./getStack";
export const getStack: typeof import("./getStack").getStack = null as any;
export const getStackOutput: typeof import("./getStack").getStackOutput = null as any;
utilities.lazyLoad(exports, ["getStack","getStackOutput"], () => require("./getStack"));

export { GetSystemArgs, GetSystemResult, GetSystemOutputArgs } from "./getSystem";
export const getSystem: typeof import("./getSystem").getSystem = null as any;
export const getSystemOutput: typeof import("./getSystem").getSystemOutput = null as any;
utilities.lazyLoad(exports, ["getSystem","getSystemOutput"], () => require("./getSystem"));

export { LibraryArgs, LibraryState } from "./library";
export type Library = import("./library").Library;
export const Library: typeof import("./library").Library = null as any;
utilities.lazyLoad(exports, ["Library"], () => require("./library"));

export { PolicyArgs, PolicyState } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SecretArgs, SecretState } from "./secret";
export type Secret = import("./secret").Secret;
export const Secret: typeof import("./secret").Secret = null as any;
utilities.lazyLoad(exports, ["Secret"], () => require("./secret"));

export { StackArgs, StackState } from "./stack";
export type Stack = import("./stack").Stack;
export const Stack: typeof import("./stack").Stack = null as any;
utilities.lazyLoad(exports, ["Stack"], () => require("./stack"));

export { SystemArgs, SystemState } from "./system";
export type System = import("./system").System;
export const System: typeof import("./system").System = null as any;
utilities.lazyLoad(exports, ["System"], () => require("./system"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "styra:index/library:Library":
                return new Library(name, <any>undefined, { urn })
            case "styra:index/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "styra:index/secret:Secret":
                return new Secret(name, <any>undefined, { urn })
            case "styra:index/stack:Stack":
                return new Stack(name, <any>undefined, { urn })
            case "styra:index/system:System":
                return new System(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("styra", "index/library", _module)
pulumi.runtime.registerResourceModule("styra", "index/policy", _module)
pulumi.runtime.registerResourceModule("styra", "index/secret", _module)
pulumi.runtime.registerResourceModule("styra", "index/stack", _module)
pulumi.runtime.registerResourceModule("styra", "index/system", _module)
pulumi.runtime.registerResourcePackage("styra", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:styra") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
