// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class System extends pulumi.CustomResource {
    /**
     * Get an existing System resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemState, opts?: pulumi.CustomResourceOptions): System {
        return new System(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'styra:index/system:System';

    /**
     * Returns true if the given object is an instance of System.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is System {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === System.__pulumiType;
    }

    public /*out*/ readonly authz!: pulumi.Output<outputs.SystemAuthz>;
    public readonly bundleDownload!: pulumi.Output<outputs.SystemBundleDownload>;
    public readonly bundleRegistry!: pulumi.Output<outputs.SystemBundleRegistry>;
    /**
     * only put data in the context bundle
     */
    public readonly contextBundleDataOnly!: pulumi.Output<boolean>;
    /**
     * list of path prefixes for policies/datasources that go into the second (context) bundle
     */
    public readonly contextBundleRoots!: pulumi.Output<string[]>;
    /**
     * datasources created for the system
     */
    public /*out*/ readonly datasources!: pulumi.Output<outputs.SystemDatasource[]>;
    /**
     * location of key attributes and additional columns in the decisions grouped by policy entry point path
     */
    public readonly decisionMappings!: pulumi.Output<{[key: string]: outputs.SystemDecisionMappings}>;
    public readonly deploymentParameters!: pulumi.Output<outputs.SystemDeploymentParameters>;
    /**
     * description for the system
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * error/warning configuration: one of "all", "errors", "none"
     */
    public readonly errorSetting!: pulumi.Output<string>;
    /**
     * current deployment errors
     */
    public /*out*/ readonly errors!: pulumi.Output<{[key: string]: outputs.SystemErrors}>;
    public readonly externalBundles!: pulumi.Output<outputs.SystemExternalBundles>;
    /**
     * optional parameter to map Styra DAS system ID to external IDs used by a customer. (mapping can be retrieved with
     * TranslateExternalIds operation)
     */
    public readonly externalId!: pulumi.Output<string>;
    /**
     * when set, stacks that are not linked to this system will be filtered out of its bundles
     */
    public readonly filterStacks!: pulumi.Output<boolean>;
    /**
     * optional parameter to specify the Kafka topic where the decision logs for this system should be published (ignored if
     * Kafka is not configured for the workspace for decision export)
     */
    public readonly kafkaTopic!: pulumi.Output<string>;
    /**
     * IDs of stacks matching the system
     */
    public /*out*/ readonly matchingStacks!: pulumi.Output<string[]>;
    public /*out*/ readonly metadata!: pulumi.Output<outputs.SystemMetadata>;
    /**
     * A history of any migrations performed on this system
     */
    public /*out*/ readonly migrationHistories!: pulumi.Output<outputs.SystemMigrationHistory[]>;
    /**
     * minimum running OPA version for the systems
     */
    public /*out*/ readonly minimumOpaVersion!: pulumi.Output<string>;
    /**
     * enable mock OPAs for this system
     */
    public readonly mockOpaEnabled!: pulumi.Output<boolean>;
    /**
     * system name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * policies created for the system
     */
    public /*out*/ readonly policies!: pulumi.Output<outputs.SystemPolicy[]>;
    /**
     * prevents users from modifying policies using Styra UIs. Default: false
     */
    public readonly readOnly!: pulumi.Output<boolean>;
    /**
     * if set to 'false', only deletes the system configuration and does not delete associated objects
     */
    public readonly recursive!: pulumi.Output<string | undefined>;
    public /*out*/ readonly requestId!: pulumi.Output<string>;
    public /*out*/ readonly result!: pulumi.Output<outputs.SystemResult>;
    public readonly sourceControl!: pulumi.Output<outputs.SystemSourceControl>;
    /**
     * system status
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * tokens created for the system
     */
    public /*out*/ readonly tokens!: pulumi.Output<outputs.SystemToken[]>;
    /**
     * system type e.g. kubernetes
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * system type parameter values (for template.* types)
     */
    public readonly typeParameters!: pulumi.Output<outputs.SystemTypeParameters>;
    /**
     * uninstallation instructions by installation method (deprecated)
     */
    public /*out*/ readonly uninstall!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a System resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SystemArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemArgs | SystemState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemState | undefined;
            resourceInputs["authz"] = state ? state.authz : undefined;
            resourceInputs["bundleDownload"] = state ? state.bundleDownload : undefined;
            resourceInputs["bundleRegistry"] = state ? state.bundleRegistry : undefined;
            resourceInputs["contextBundleDataOnly"] = state ? state.contextBundleDataOnly : undefined;
            resourceInputs["contextBundleRoots"] = state ? state.contextBundleRoots : undefined;
            resourceInputs["datasources"] = state ? state.datasources : undefined;
            resourceInputs["decisionMappings"] = state ? state.decisionMappings : undefined;
            resourceInputs["deploymentParameters"] = state ? state.deploymentParameters : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["errorSetting"] = state ? state.errorSetting : undefined;
            resourceInputs["errors"] = state ? state.errors : undefined;
            resourceInputs["externalBundles"] = state ? state.externalBundles : undefined;
            resourceInputs["externalId"] = state ? state.externalId : undefined;
            resourceInputs["filterStacks"] = state ? state.filterStacks : undefined;
            resourceInputs["kafkaTopic"] = state ? state.kafkaTopic : undefined;
            resourceInputs["matchingStacks"] = state ? state.matchingStacks : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["migrationHistories"] = state ? state.migrationHistories : undefined;
            resourceInputs["minimumOpaVersion"] = state ? state.minimumOpaVersion : undefined;
            resourceInputs["mockOpaEnabled"] = state ? state.mockOpaEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
            resourceInputs["readOnly"] = state ? state.readOnly : undefined;
            resourceInputs["recursive"] = state ? state.recursive : undefined;
            resourceInputs["requestId"] = state ? state.requestId : undefined;
            resourceInputs["result"] = state ? state.result : undefined;
            resourceInputs["sourceControl"] = state ? state.sourceControl : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tokens"] = state ? state.tokens : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["typeParameters"] = state ? state.typeParameters : undefined;
            resourceInputs["uninstall"] = state ? state.uninstall : undefined;
        } else {
            const args = argsOrState as SystemArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["bundleDownload"] = args ? args.bundleDownload : undefined;
            resourceInputs["bundleRegistry"] = args ? args.bundleRegistry : undefined;
            resourceInputs["contextBundleDataOnly"] = args ? args.contextBundleDataOnly : undefined;
            resourceInputs["contextBundleRoots"] = args ? args.contextBundleRoots : undefined;
            resourceInputs["decisionMappings"] = args ? args.decisionMappings : undefined;
            resourceInputs["deploymentParameters"] = args ? args.deploymentParameters : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["errorSetting"] = args ? args.errorSetting : undefined;
            resourceInputs["externalBundles"] = args ? args.externalBundles : undefined;
            resourceInputs["externalId"] = args ? args.externalId : undefined;
            resourceInputs["filterStacks"] = args ? args.filterStacks : undefined;
            resourceInputs["kafkaTopic"] = args ? args.kafkaTopic : undefined;
            resourceInputs["mockOpaEnabled"] = args ? args.mockOpaEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["readOnly"] = args ? args.readOnly : undefined;
            resourceInputs["recursive"] = args ? args.recursive : undefined;
            resourceInputs["sourceControl"] = args ? args.sourceControl : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["typeParameters"] = args ? args.typeParameters : undefined;
            resourceInputs["authz"] = undefined /*out*/;
            resourceInputs["datasources"] = undefined /*out*/;
            resourceInputs["errors"] = undefined /*out*/;
            resourceInputs["matchingStacks"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["migrationHistories"] = undefined /*out*/;
            resourceInputs["minimumOpaVersion"] = undefined /*out*/;
            resourceInputs["policies"] = undefined /*out*/;
            resourceInputs["requestId"] = undefined /*out*/;
            resourceInputs["result"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tokens"] = undefined /*out*/;
            resourceInputs["uninstall"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(System.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering System resources.
 */
export interface SystemState {
    authz?: pulumi.Input<inputs.SystemAuthz>;
    bundleDownload?: pulumi.Input<inputs.SystemBundleDownload>;
    bundleRegistry?: pulumi.Input<inputs.SystemBundleRegistry>;
    /**
     * only put data in the context bundle
     */
    contextBundleDataOnly?: pulumi.Input<boolean>;
    /**
     * list of path prefixes for policies/datasources that go into the second (context) bundle
     */
    contextBundleRoots?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * datasources created for the system
     */
    datasources?: pulumi.Input<pulumi.Input<inputs.SystemDatasource>[]>;
    /**
     * location of key attributes and additional columns in the decisions grouped by policy entry point path
     */
    decisionMappings?: pulumi.Input<{[key: string]: pulumi.Input<inputs.SystemDecisionMappings>}>;
    deploymentParameters?: pulumi.Input<inputs.SystemDeploymentParameters>;
    /**
     * description for the system
     */
    description?: pulumi.Input<string>;
    /**
     * error/warning configuration: one of "all", "errors", "none"
     */
    errorSetting?: pulumi.Input<string>;
    /**
     * current deployment errors
     */
    errors?: pulumi.Input<{[key: string]: pulumi.Input<inputs.SystemErrors>}>;
    externalBundles?: pulumi.Input<inputs.SystemExternalBundles>;
    /**
     * optional parameter to map Styra DAS system ID to external IDs used by a customer. (mapping can be retrieved with
     * TranslateExternalIds operation)
     */
    externalId?: pulumi.Input<string>;
    /**
     * when set, stacks that are not linked to this system will be filtered out of its bundles
     */
    filterStacks?: pulumi.Input<boolean>;
    /**
     * optional parameter to specify the Kafka topic where the decision logs for this system should be published (ignored if
     * Kafka is not configured for the workspace for decision export)
     */
    kafkaTopic?: pulumi.Input<string>;
    /**
     * IDs of stacks matching the system
     */
    matchingStacks?: pulumi.Input<pulumi.Input<string>[]>;
    metadata?: pulumi.Input<inputs.SystemMetadata>;
    /**
     * A history of any migrations performed on this system
     */
    migrationHistories?: pulumi.Input<pulumi.Input<inputs.SystemMigrationHistory>[]>;
    /**
     * minimum running OPA version for the systems
     */
    minimumOpaVersion?: pulumi.Input<string>;
    /**
     * enable mock OPAs for this system
     */
    mockOpaEnabled?: pulumi.Input<boolean>;
    /**
     * system name
     */
    name?: pulumi.Input<string>;
    /**
     * policies created for the system
     */
    policies?: pulumi.Input<pulumi.Input<inputs.SystemPolicy>[]>;
    /**
     * prevents users from modifying policies using Styra UIs. Default: false
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * if set to 'false', only deletes the system configuration and does not delete associated objects
     */
    recursive?: pulumi.Input<string>;
    requestId?: pulumi.Input<string>;
    result?: pulumi.Input<inputs.SystemResult>;
    sourceControl?: pulumi.Input<inputs.SystemSourceControl>;
    /**
     * system status
     */
    status?: pulumi.Input<string>;
    /**
     * tokens created for the system
     */
    tokens?: pulumi.Input<pulumi.Input<inputs.SystemToken>[]>;
    /**
     * system type e.g. kubernetes
     */
    type?: pulumi.Input<string>;
    /**
     * system type parameter values (for template.* types)
     */
    typeParameters?: pulumi.Input<inputs.SystemTypeParameters>;
    /**
     * uninstallation instructions by installation method (deprecated)
     */
    uninstall?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a System resource.
 */
export interface SystemArgs {
    bundleDownload?: pulumi.Input<inputs.SystemBundleDownload>;
    bundleRegistry?: pulumi.Input<inputs.SystemBundleRegistry>;
    /**
     * only put data in the context bundle
     */
    contextBundleDataOnly?: pulumi.Input<boolean>;
    /**
     * list of path prefixes for policies/datasources that go into the second (context) bundle
     */
    contextBundleRoots?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * location of key attributes and additional columns in the decisions grouped by policy entry point path
     */
    decisionMappings?: pulumi.Input<{[key: string]: pulumi.Input<inputs.SystemDecisionMappings>}>;
    deploymentParameters?: pulumi.Input<inputs.SystemDeploymentParameters>;
    /**
     * description for the system
     */
    description?: pulumi.Input<string>;
    /**
     * error/warning configuration: one of "all", "errors", "none"
     */
    errorSetting?: pulumi.Input<string>;
    externalBundles?: pulumi.Input<inputs.SystemExternalBundles>;
    /**
     * optional parameter to map Styra DAS system ID to external IDs used by a customer. (mapping can be retrieved with
     * TranslateExternalIds operation)
     */
    externalId?: pulumi.Input<string>;
    /**
     * when set, stacks that are not linked to this system will be filtered out of its bundles
     */
    filterStacks?: pulumi.Input<boolean>;
    /**
     * optional parameter to specify the Kafka topic where the decision logs for this system should be published (ignored if
     * Kafka is not configured for the workspace for decision export)
     */
    kafkaTopic?: pulumi.Input<string>;
    /**
     * enable mock OPAs for this system
     */
    mockOpaEnabled?: pulumi.Input<boolean>;
    /**
     * system name
     */
    name?: pulumi.Input<string>;
    /**
     * prevents users from modifying policies using Styra UIs. Default: false
     */
    readOnly?: pulumi.Input<boolean>;
    /**
     * if set to 'false', only deletes the system configuration and does not delete associated objects
     */
    recursive?: pulumi.Input<string>;
    sourceControl?: pulumi.Input<inputs.SystemSourceControl>;
    /**
     * system type e.g. kubernetes
     */
    type: pulumi.Input<string>;
    /**
     * system type parameter values (for template.* types)
     */
    typeParameters?: pulumi.Input<inputs.SystemTypeParameters>;
}
