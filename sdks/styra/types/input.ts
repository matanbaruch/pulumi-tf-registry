// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface LibraryResult {
    datasources?: pulumi.Input<pulumi.Input<inputs.LibraryResultDatasource>[]>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    metadata?: pulumi.Input<inputs.LibraryResultMetadata>;
    policies?: pulumi.Input<pulumi.Input<inputs.LibraryResultPolicy>[]>;
    readOnly?: pulumi.Input<boolean>;
    sourceControl?: pulumi.Input<inputs.LibraryResultSourceControl>;
    usedBies?: pulumi.Input<pulumi.Input<inputs.LibraryResultUsedBy>[]>;
}

export interface LibraryResultDatasource {
    /**
     * datasource category
     */
    category?: pulumi.Input<string>;
    /**
     * datasource ID
     */
    id?: pulumi.Input<string>;
    /**
     * optional datasources can be deleted without being recreated automatically
     */
    optional?: pulumi.Input<boolean>;
    status?: pulumi.Input<inputs.LibraryResultDatasourceStatus>;
}

export interface LibraryResultDatasourceStatus {
    code?: pulumi.Input<string>;
    message?: pulumi.Input<string>;
    timestamp?: pulumi.Input<string>;
}

export interface LibraryResultMetadata {
    createdAt?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    createdThrough?: pulumi.Input<string>;
    lastModifiedAt?: pulumi.Input<string>;
    lastModifiedBy?: pulumi.Input<string>;
    lastModifiedThrough?: pulumi.Input<string>;
}

export interface LibraryResultPolicy {
    /**
     * policy on when to (re)generate the policy
     */
    created?: pulumi.Input<string>;
    enforcement?: pulumi.Input<inputs.LibraryResultPolicyEnforcement>;
    /**
     * policy ID (path)
     */
    id?: pulumi.Input<string>;
    /**
     * rego modules policy consists of
     */
    modules?: pulumi.Input<pulumi.Input<inputs.LibraryResultPolicyModule>[]>;
    rules?: pulumi.Input<inputs.LibraryResultPolicyRules>;
    /**
     * policy type e.g. validating/rules
     */
    type?: pulumi.Input<string>;
}

export interface LibraryResultPolicyEnforcement {
    /**
     * true if the policy is enforced
     */
    enforced?: pulumi.Input<boolean>;
    /**
     * enforcement type e.g. opa, test, mask
     */
    type?: pulumi.Input<string>;
}

export interface LibraryResultPolicyModule {
    /**
     * module name
     */
    name?: pulumi.Input<string>;
    /**
     * module is a placeholder
     */
    placeholder?: pulumi.Input<boolean>;
    /**
     * true if module is read-only
     */
    readOnly?: pulumi.Input<boolean>;
    rules?: pulumi.Input<inputs.LibraryResultPolicyModuleRules>;
}

export interface LibraryResultPolicyModuleRules {
    /**
     * number of allow rules
     */
    allow?: pulumi.Input<number>;
    /**
     * number of deny rules
     */
    deny?: pulumi.Input<number>;
    /**
     * number of enforce rules
     */
    enforce?: pulumi.Input<number>;
    /**
     * number of ignore rules
     */
    ignore?: pulumi.Input<number>;
    /**
     * number of monitor rules
     */
    monitor?: pulumi.Input<number>;
    /**
     * number of notify rules
     */
    notify?: pulumi.Input<number>;
    /**
     * number of unclassified rules
     */
    other?: pulumi.Input<number>;
    /**
     * number of test rules
     */
    test?: pulumi.Input<number>;
    /**
     * total number of rules
     */
    total?: pulumi.Input<number>;
}

export interface LibraryResultPolicyRules {
    /**
     * number of allow rules
     */
    allow?: pulumi.Input<number>;
    /**
     * number of deny rules
     */
    deny?: pulumi.Input<number>;
    /**
     * number of enforce rules
     */
    enforce?: pulumi.Input<number>;
    /**
     * number of ignore rules
     */
    ignore?: pulumi.Input<number>;
    /**
     * number of monitor rules
     */
    monitor?: pulumi.Input<number>;
    /**
     * number of notify rules
     */
    notify?: pulumi.Input<number>;
    /**
     * number of unclassified rules
     */
    other?: pulumi.Input<number>;
    /**
     * number of test rules
     */
    test?: pulumi.Input<number>;
    /**
     * total number of rules
     */
    total?: pulumi.Input<number>;
}

export interface LibraryResultSourceControl {
    libraryOrigin?: pulumi.Input<inputs.LibraryResultSourceControlLibraryOrigin>;
    useWorkspaceSettings?: pulumi.Input<boolean>;
}

export interface LibraryResultSourceControlLibraryOrigin {
    /**
     * Commit SHA. Only one of reference or commit can be set at any time
     */
    commit?: pulumi.Input<string>;
    /**
     * Credentials are looked under the key <name>/<creds>
     */
    credentials?: pulumi.Input<string>;
    /**
     * Path to limit the import to
     */
    path?: pulumi.Input<string>;
    /**
     * Remote reference. Only one of reference or commit can be set at any time
     */
    reference?: pulumi.Input<string>;
    sshCredentials?: pulumi.Input<inputs.LibraryResultSourceControlLibraryOriginSshCredentials>;
    /**
     * Repository URL
     */
    url?: pulumi.Input<string>;
}

export interface LibraryResultSourceControlLibraryOriginSshCredentials {
    /**
     * Passphrase is looked under the key passphrase/<pass>
     */
    passphrase?: pulumi.Input<string>;
    /**
     * PrivateKey is looked under the key private-key/<key>
     */
    privateKey?: pulumi.Input<string>;
}

export interface LibraryResultUsedBy {
    bundles?: pulumi.Input<pulumi.Input<inputs.LibraryResultUsedByBundle>[]>;
    systemId?: pulumi.Input<string>;
}

export interface LibraryResultUsedByBundle {
    bundleId?: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}

export interface LibrarySourceControl {
    libraryOrigin?: pulumi.Input<inputs.LibrarySourceControlLibraryOrigin>;
    useWorkspaceSettings: pulumi.Input<boolean>;
}

export interface LibrarySourceControlLibraryOrigin {
    /**
     * Commit SHA. Only one of reference or commit can be set at any time
     */
    commit: pulumi.Input<string>;
    /**
     * Credentials are looked under the key <name>/<creds>
     */
    credentials: pulumi.Input<string>;
    /**
     * Path to limit the import to
     */
    path: pulumi.Input<string>;
    /**
     * Remote reference. Only one of reference or commit can be set at any time
     */
    reference: pulumi.Input<string>;
    sshCredentials?: pulumi.Input<inputs.LibrarySourceControlLibraryOriginSshCredentials>;
    /**
     * Repository URL
     */
    url: pulumi.Input<string>;
}

export interface LibrarySourceControlLibraryOriginSshCredentials {
    /**
     * Passphrase is looked under the key passphrase/<pass>
     */
    passphrase: pulumi.Input<string>;
    /**
     * PrivateKey is looked under the key private-key/<key>
     */
    privateKey: pulumi.Input<string>;
}

export interface PolicySignature {
    /**
     * Parsed as JSON.
     */
    excluded?: pulumi.Input<string>;
    /**
     * Parsed as JSON.
     */
    signatures?: pulumi.Input<string>;
}

export interface SecretMetadata {
    createdAt?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    createdThrough?: pulumi.Input<string>;
    lastModifiedAt?: pulumi.Input<string>;
    lastModifiedBy?: pulumi.Input<string>;
    lastModifiedThrough?: pulumi.Input<string>;
}

export interface StackAuthz {
    /**
     * a list of role binding configs
     */
    roleBindings?: pulumi.Input<pulumi.Input<inputs.StackAuthzRoleBinding>[]>;
}

export interface StackAuthzRoleBinding {
    /**
     * role binding ID
     */
    id?: pulumi.Input<string>;
    /**
     * role name
     */
    roleName?: pulumi.Input<string>;
}

export interface StackDatasource {
    /**
     * datasource category
     */
    category?: pulumi.Input<string>;
    /**
     * datasource ID
     */
    id?: pulumi.Input<string>;
    /**
     * optional datasources can be deleted without being recreated automatically
     */
    optional?: pulumi.Input<boolean>;
    status?: pulumi.Input<inputs.StackDatasourceStatus>;
}

export interface StackDatasourceStatus {
    code?: pulumi.Input<string>;
    message?: pulumi.Input<string>;
    timestamp?: pulumi.Input<string>;
}

export interface StackErrors {
    /**
     * list of system errors
     */
    errors?: pulumi.Input<pulumi.Input<inputs.StackErrorsError>[]>;
    /**
     * true if the the system is waiting for error to be resolved
     */
    waiting?: pulumi.Input<boolean>;
}

export interface StackErrorsError {
    code?: pulumi.Input<string>;
    message?: pulumi.Input<string>;
    timestamp?: pulumi.Input<string>;
}

export interface StackMetadata {
    createdAt?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    createdThrough?: pulumi.Input<string>;
    lastModifiedAt?: pulumi.Input<string>;
    lastModifiedBy?: pulumi.Input<string>;
    lastModifiedThrough?: pulumi.Input<string>;
}

export interface StackMigrationHistory {
    from?: pulumi.Input<string>;
    initiatedBy?: pulumi.Input<string>;
    initiatingUser?: pulumi.Input<string>;
    migratedAt?: pulumi.Input<string>;
    recovered?: pulumi.Input<boolean>;
    to?: pulumi.Input<string>;
}

export interface StackPolicy {
    /**
     * policy on when to (re)generate the policy
     */
    created?: pulumi.Input<string>;
    enforcement?: pulumi.Input<inputs.StackPolicyEnforcement>;
    /**
     * policy ID (path)
     */
    id?: pulumi.Input<string>;
    /**
     * rego modules policy consists of
     */
    modules?: pulumi.Input<pulumi.Input<inputs.StackPolicyModule>[]>;
    rules?: pulumi.Input<inputs.StackPolicyRules>;
    /**
     * policy type e.g. validating/rules
     */
    type?: pulumi.Input<string>;
}

export interface StackPolicyEnforcement {
    /**
     * true if the policy is enforced
     */
    enforced?: pulumi.Input<boolean>;
    /**
     * enforcement type e.g. opa, test, mask
     */
    type?: pulumi.Input<string>;
}

export interface StackPolicyModule {
    /**
     * module name
     */
    name?: pulumi.Input<string>;
    /**
     * module is a placeholder
     */
    placeholder?: pulumi.Input<boolean>;
    /**
     * true if module is read-only
     */
    readOnly?: pulumi.Input<boolean>;
    rules?: pulumi.Input<inputs.StackPolicyModuleRules>;
}

export interface StackPolicyModuleRules {
    /**
     * number of allow rules
     */
    allow?: pulumi.Input<number>;
    /**
     * number of deny rules
     */
    deny?: pulumi.Input<number>;
    /**
     * number of enforce rules
     */
    enforce?: pulumi.Input<number>;
    /**
     * number of ignore rules
     */
    ignore?: pulumi.Input<number>;
    /**
     * number of monitor rules
     */
    monitor?: pulumi.Input<number>;
    /**
     * number of notify rules
     */
    notify?: pulumi.Input<number>;
    /**
     * number of unclassified rules
     */
    other?: pulumi.Input<number>;
    /**
     * number of test rules
     */
    test?: pulumi.Input<number>;
    /**
     * total number of rules
     */
    total?: pulumi.Input<number>;
}

export interface StackPolicyRules {
    /**
     * number of allow rules
     */
    allow?: pulumi.Input<number>;
    /**
     * number of deny rules
     */
    deny?: pulumi.Input<number>;
    /**
     * number of enforce rules
     */
    enforce?: pulumi.Input<number>;
    /**
     * number of ignore rules
     */
    ignore?: pulumi.Input<number>;
    /**
     * number of monitor rules
     */
    monitor?: pulumi.Input<number>;
    /**
     * number of notify rules
     */
    notify?: pulumi.Input<number>;
    /**
     * number of unclassified rules
     */
    other?: pulumi.Input<number>;
    /**
     * number of test rules
     */
    test?: pulumi.Input<number>;
    /**
     * total number of rules
     */
    total?: pulumi.Input<number>;
}

export interface StackSourceControl {
    stackOrigin?: pulumi.Input<inputs.StackSourceControlStackOrigin>;
    /**
     * Not Null
     */
    useWorkspaceSettings?: pulumi.Input<boolean>;
}

export interface StackSourceControlStackOrigin {
    /**
     * Commit SHA. Only one of reference or commit can be set at any time. Not Null
     */
    commit?: pulumi.Input<string>;
    /**
     * Credentials are looked under the key <name>/<creds>. Not Null
     */
    credentials?: pulumi.Input<string>;
    /**
     * Path to limit the import to. Not Null
     */
    path?: pulumi.Input<string>;
    /**
     * Remote reference. Only one of reference or commit can be set at any time. Not Null
     */
    reference?: pulumi.Input<string>;
    sshCredentials?: pulumi.Input<inputs.StackSourceControlStackOriginSshCredentials>;
    /**
     * Repository URL. Not Null
     */
    url?: pulumi.Input<string>;
}

export interface StackSourceControlStackOriginSshCredentials {
    /**
     * Passphrase is looked under the key passphrase/<pass>. Not Null
     */
    passphrase?: pulumi.Input<string>;
    /**
     * PrivateKey is looked under the key private-key/<key>. Not Null
     */
    privateKey?: pulumi.Input<string>;
}

export interface StackTypeParameters {
}

export interface SystemAuthz {
    /**
     * a list of role binding configs
     */
    roleBindings?: pulumi.Input<pulumi.Input<inputs.SystemAuthzRoleBinding>[]>;
}

export interface SystemAuthzRoleBinding {
    /**
     * role binding ID
     */
    id?: pulumi.Input<string>;
    /**
     * role name
     */
    roleName?: pulumi.Input<string>;
}

export interface SystemBundleDownload {
    /**
     * enabled delta bundles on bundle download. Default: false
     */
    deltaBundles?: pulumi.Input<boolean>;
}

export interface SystemBundleRegistry {
    /**
     * when checked, bundles will be activated regardless of their compatibility with currently running agents
     */
    disableBundleCompatibilityCheck?: pulumi.Input<boolean>;
    distributionS3?: pulumi.Input<inputs.SystemBundleRegistryDistributionS3>;
    /**
     * extra bundle entry points to use when compiling bundles
     */
    entrypoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * manual deployment mode to prevent automatic deployment of new bundles
     */
    manualDeployment?: pulumi.Input<boolean>;
    /**
     * Override of manual deployment mode flag per bundle type
     */
    manualDeploymentOverrides?: pulumi.Input<{[key: string]: pulumi.Input<boolean>}>;
    /**
     * maximum number of all bundles to store
     */
    maxBundles?: pulumi.Input<number>;
    /**
     * maximum number of previously deployed bundles to store
     */
    maxDeployedBundles?: pulumi.Input<number>;
    /**
     * OPA optimization level to use when building bundles
     */
    optimizationLevel?: pulumi.Input<number>;
}

export interface SystemBundleRegistryDistributionS3 {
    /**
     * access key id and secret access key are looked under the key <name>/<access_keys>
     */
    accessKeys?: pulumi.Input<string>;
    /**
     * bucket name. Not Null
     */
    bucket?: pulumi.Input<string>;
    /**
     * context bundle path. The name must not use template variables. Default: "context-{policy_path}"
     */
    contextPath?: pulumi.Input<string>;
    /**
     * discovery bundle path. Template variables can be used in the name. Default: "discovery.tgz"
     */
    discoveryPath?: pulumi.Input<string>;
    /**
     * AWS endpoint
     */
    endpoint?: pulumi.Input<string>;
    opaCredentials?: pulumi.Input<inputs.SystemBundleRegistryDistributionS3OpaCredentials>;
    /**
     * policy bundle path. Template variables can be used in the name. Default: "bundle.tgz"
     */
    policyPath?: pulumi.Input<string>;
    /**
     * AWS region. Not Null
     */
    region?: pulumi.Input<string>;
    /**
     * AWS role
     */
    roleArn?: pulumi.Input<string>;
}

export interface SystemBundleRegistryDistributionS3OpaCredentials {
    environmentCredentials?: pulumi.Input<inputs.SystemBundleRegistryDistributionS3OpaCredentialsEnvironmentCredentials>;
    metadataCredentials?: pulumi.Input<inputs.SystemBundleRegistryDistributionS3OpaCredentialsMetadataCredentials>;
    webIdentityCredentials?: pulumi.Input<inputs.SystemBundleRegistryDistributionS3OpaCredentialsWebIdentityCredentials>;
}

export interface SystemBundleRegistryDistributionS3OpaCredentialsEnvironmentCredentials {
}

export interface SystemBundleRegistryDistributionS3OpaCredentialsMetadataCredentials {
    /**
     * Not Null
     */
    awsRegion?: pulumi.Input<string>;
    iamRole?: pulumi.Input<string>;
}

export interface SystemBundleRegistryDistributionS3OpaCredentialsWebIdentityCredentials {
    /**
     * Not Null
     */
    awsRegion?: pulumi.Input<string>;
    /**
     * Not Null
     */
    sessionName?: pulumi.Input<string>;
}

export interface SystemDatasource {
    /**
     * datasource category
     */
    category?: pulumi.Input<string>;
    /**
     * datasource ID
     */
    id?: pulumi.Input<string>;
    /**
     * optional datasources can be deleted without being recreated automatically
     */
    optional?: pulumi.Input<boolean>;
    status?: pulumi.Input<inputs.SystemDatasourceStatus>;
}

export interface SystemDatasourceStatus {
    code?: pulumi.Input<string>;
    message?: pulumi.Input<string>;
    timestamp?: pulumi.Input<string>;
}

export interface SystemDecisionMappings {
    allowed?: pulumi.Input<inputs.SystemDecisionMappingsAllowed>;
    /**
     * decision mappings for additional columns
     */
    columns?: pulumi.Input<pulumi.Input<inputs.SystemDecisionMappingsColumn>[]>;
    reason?: pulumi.Input<inputs.SystemDecisionMappingsReason>;
}

export interface SystemDecisionMappingsAllowed {
    /**
     * Parsed as JSON.
     */
    expected?: pulumi.Input<string>;
    /**
     * when set to true, decision is Allowed when the mapped property IS NOT equal to the expected value. Default: false
     */
    negated?: pulumi.Input<boolean>;
    /**
     * dot-separated decision property path. Not Null
     */
    path?: pulumi.Input<string>;
}

export interface SystemDecisionMappingsColumn {
    /**
     * column key (also the search key). Not Null
     */
    key?: pulumi.Input<string>;
    /**
     * dot-separated decision property path. Not Null
     */
    path?: pulumi.Input<string>;
    /**
     * column type: one of "string", "boolean", "date", "integer", "float". Default: "string"
     */
    type?: pulumi.Input<string>;
}

export interface SystemDecisionMappingsReason {
    /**
     * dot-separated decision property path. Not Null
     */
    path?: pulumi.Input<string>;
}

export interface SystemDeploymentParameters {
    /**
     * true to fail close. Default: false
     */
    denyOnOpaFail?: pulumi.Input<boolean>;
    /**
     * discovery config settings for OPAs linked to the system. (in case of conflict with system-type defined setting, this value takes precedence)
     */
    discovery?: pulumi.Input<inputs.SystemDeploymentParametersDiscovery>;
    /**
     * extra deployment settings
     */
    extra?: pulumi.Input<inputs.SystemDeploymentParametersExtra>;
    /**
     * HTTP proxy URL
     */
    httpProxy?: pulumi.Input<string>;
    /**
     * HTTPS proxy URL
     */
    httpsProxy?: pulumi.Input<string>;
    /**
     * minimum Kubernetes version expected (where applicable)
     */
    kubernetesVersion?: pulumi.Input<string>;
    /**
     * Custom name for mutating webhook (useful for changing webhook order of execution)
     */
    mutatingWebhookName?: pulumi.Input<string>;
    /**
     * Kubernetes namespace the system is deployed to
     */
    namespace?: pulumi.Input<string>;
    /**
     * URLs that should be excluded from proxying
     */
    noProxy?: pulumi.Input<string>;
    /**
     * Kubernetes webhook timeout (where applicable)
     */
    timeoutSeconds?: pulumi.Input<number>;
    /**
     * trusted CA certificates
     */
    trustedCaCerts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * trusted container registry
     */
    trustedContainerRegistry?: pulumi.Input<string>;
}

export interface SystemDeploymentParametersDiscovery {
}

export interface SystemDeploymentParametersExtra {
}

export interface SystemErrors {
    /**
     * list of system errors
     */
    errors?: pulumi.Input<pulumi.Input<inputs.SystemErrorsError>[]>;
    /**
     * true if the the system is waiting for error to be resolved
     */
    waiting?: pulumi.Input<boolean>;
}

export interface SystemErrorsError {
    code?: pulumi.Input<string>;
    message?: pulumi.Input<string>;
    timestamp?: pulumi.Input<string>;
}

export interface SystemExternalBundles {
    /**
     * externally configured bundles, use name of bundle as key
     */
    bundles?: pulumi.Input<{[key: string]: pulumi.Input<inputs.SystemExternalBundlesBundles>}>;
    /**
     * externally configured services. Not Null
     */
    services?: pulumi.Input<pulumi.Input<inputs.SystemExternalBundlesService>[]>;
}

export interface SystemExternalBundlesBundles {
    /**
     * persist activated bundles to disk
     */
    persist?: pulumi.Input<boolean>;
    polling?: pulumi.Input<inputs.SystemExternalBundlesBundlesPolling>;
    /**
     * resource path to use to download bundle from configured service
     */
    resource?: pulumi.Input<string>;
    /**
     * name of service to use to contact remote server. Not Null
     */
    service?: pulumi.Input<string>;
    signing?: pulumi.Input<inputs.SystemExternalBundlesBundlesSigning>;
    /**
     * size limit for individual files contained in the bundle
     */
    sizeLimitBytes?: pulumi.Input<number>;
}

export interface SystemExternalBundlesBundlesPolling {
    /**
     * maximum amount of time the server should wait before issuing a timeout if there’s no update available
     */
    longPollingTimeoutSeconds?: pulumi.Input<number>;
    /**
     * maximum amount of time to wait between bundle downloads
     */
    maxDelaySeconds?: pulumi.Input<number>;
    /**
     * minimum amount of time to wait between bundle downloads
     */
    minDelaySeconds?: pulumi.Input<number>;
}

export interface SystemExternalBundlesBundlesSigning {
    /**
     * files in the bundle to exclude during verification
     */
    excludeFiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * name of the key to use for bundle signature verification
     */
    keyid?: pulumi.Input<string>;
    /**
     * information about necessary public signing keys
     */
    publicKeys?: pulumi.Input<{[key: string]: pulumi.Input<inputs.SystemExternalBundlesBundlesSigningPublicKeys>}>;
    /**
     * scope to use for bundle signature verification
     */
    scope?: pulumi.Input<string>;
}

export interface SystemExternalBundlesBundlesSigningPublicKeys {
    /**
     * name of the signing algorithm
     */
    algorithm?: pulumi.Input<string>;
    /**
     * PEM encoded public key to use for signature verification
     */
    key?: pulumi.Input<string>;
    /**
     * PEM encoded private key to use for signing
     */
    privateKey?: pulumi.Input<string>;
    /**
     * scope to use for bundle signature verification
     */
    scope?: pulumi.Input<string>;
}

export interface SystemExternalBundlesService {
    /**
     * allow insecure TLS
     */
    allowInsecureTls?: pulumi.Input<boolean>;
    credentials?: pulumi.Input<inputs.SystemExternalBundlesServiceCredentials>;
    /**
     * HTTP headers to include in the requests to the service
     */
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * keys is a dictionary mapping the key name to the actual key and optionally the algorithm and scope.
     */
    keys?: pulumi.Input<{[key: string]: pulumi.Input<inputs.SystemExternalBundlesServiceKeys>}>;
    /**
     * unique name for each service, referred to by plugins. Not Null
     */
    name?: pulumi.Input<string>;
    /**
     * amount of time to wait for a server's response headers after fully writing the request
     */
    responseHeaderTimeoutSeconds?: pulumi.Input<number>;
    tls?: pulumi.Input<inputs.SystemExternalBundlesServiceTls>;
    /**
     * optional parameter that allows to use an “OCI” service type
     */
    type?: pulumi.Input<string>;
    /**
     * base URL to contact the service with. Not Null
     */
    url?: pulumi.Input<string>;
}

export interface SystemExternalBundlesServiceCredentials {
    azureManagedIdentity?: pulumi.Input<inputs.SystemExternalBundlesServiceCredentialsAzureManagedIdentity>;
    bearer?: pulumi.Input<inputs.SystemExternalBundlesServiceCredentialsBearer>;
    clientTls?: pulumi.Input<inputs.SystemExternalBundlesServiceCredentialsClientTls>;
    gcpMetadata?: pulumi.Input<inputs.SystemExternalBundlesServiceCredentialsGcpMetadata>;
    oauth2?: pulumi.Input<inputs.SystemExternalBundlesServiceCredentialsOauth2>;
    /**
     * authenticate using a custom plugin
     */
    plugin?: pulumi.Input<string>;
    s3Signing?: pulumi.Input<inputs.SystemExternalBundlesServiceCredentialsS3Signing>;
}

export interface SystemExternalBundlesServiceCredentialsAzureManagedIdentity {
    /**
     * API version to use. Not Null
     */
    apiVersion?: pulumi.Input<string>;
    /**
     * optional client ID of the managed identity you would like the token for, required if your VM has multiple user-assigned managed identities. Not Null
     */
    clientId?: pulumi.Input<string>;
    /**
     * request endpoint. Not Null
     */
    endpoint?: pulumi.Input<string>;
    /**
     * optional Azure Resource ID of the managed identity you would like the token for, required, if your VM has multiple user-assigned managed identities. Not Null
     */
    miResId?: pulumi.Input<string>;
    /**
     * optional object ID of the managed identity you would like the token for, required if your VM has multiple user-assigned managed identities. Not Null
     */
    objectId?: pulumi.Input<string>;
    /**
     * app ID URI of the target resource. Not Null
     */
    resource?: pulumi.Input<string>;
}

export interface SystemExternalBundlesServiceCredentialsBearer {
    /**
     * bearer token scheme to specify
     */
    scheme?: pulumi.Input<string>;
    /**
     * enables token-based authentication and supplies the bearer token to authenticate with. Not Null
     */
    token?: pulumi.Input<string>;
    /**
     * enables token-based authentication and supplies the path to the bearer token to authenticate with. Not Null
     */
    tokenPath?: pulumi.Input<string>;
}

export interface SystemExternalBundlesServiceCredentialsClientTls {
    /**
     * the path to the client certificate to authenticate with. Not Null
     */
    cert?: pulumi.Input<string>;
    /**
     * the path to the private key of the client certificate. Not Null
     */
    privateKey?: pulumi.Input<string>;
    /**
     * the passphrase to use for the private key
     */
    privateKeyPassphrase?: pulumi.Input<string>;
}

export interface SystemExternalBundlesServiceCredentialsGcpMetadata {
    /**
     * the access token metadata path to use. Not Null
     */
    accessTokenPath?: pulumi.Input<string>;
    /**
     * the audience to use when fetching identity tokens. Not Null
     */
    audience?: pulumi.Input<string>;
    /**
     * the metadata endpoint to use. Not Null
     */
    endpoint?: pulumi.Input<string>;
    /**
     * the identity token metadata path to use. Not Null
     */
    idTokenPath?: pulumi.Input<string>;
    /**
     * the set of scopes to use when fetching access token. Not Null
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SystemExternalBundlesServiceCredentialsOauth2 {
    /**
     * map of claims to include in the JWT. Not Null
     */
    additionalClaims?: pulumi.Input<inputs.SystemExternalBundlesServiceCredentialsOauth2AdditionalClaims>;
    /**
     * map of additional headers to send to token endpoint at the OAuth2 authorization server
     */
    additionalHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * map of additional body parameters to send token endpoint at the OAuth2 authorization server
     */
    additionalParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * the client ID to use for authentication. Not Null
     */
    clientId?: pulumi.Input<string>;
    /**
     * the client secret to use for authentication. Not Null
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * defaults to client_credentials. Not Null
     */
    grantType?: pulumi.Input<string>;
    /**
     * include a uniquely generated jti claim in any issued JWT. Not Null
     */
    includeJtiClaim?: pulumi.Input<boolean>;
    /**
     * optional list of scopes to request for the token
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * reference to private key used for signing the JWT. Not Null
     */
    signingKey?: pulumi.Input<string>;
    /**
     * certificate thumbprint to use for x5t header generation. Not Null
     */
    thumbprint?: pulumi.Input<string>;
    /**
     * URL pointing to the token endpoint at the OAuth2 authorization server. Not Null
     */
    tokenUrl?: pulumi.Input<string>;
}

export interface SystemExternalBundlesServiceCredentialsOauth2AdditionalClaims {
}

export interface SystemExternalBundlesServiceCredentialsS3Signing {
    /**
     * Parsed as JSON.
     */
    environmentCredentials?: pulumi.Input<string>;
    metadataCredentials?: pulumi.Input<inputs.SystemExternalBundlesServiceCredentialsS3SigningMetadataCredentials>;
    profileCredentials?: pulumi.Input<inputs.SystemExternalBundlesServiceCredentialsS3SigningProfileCredentials>;
    /**
     * the AWS service to sign requests with, eg execute-api or s3 (default: s3)
     */
    service?: pulumi.Input<string>;
    webIdentityCredentials?: pulumi.Input<inputs.SystemExternalBundlesServiceCredentialsS3SigningWebIdentityCredentials>;
}

export interface SystemExternalBundlesServiceCredentialsS3SigningMetadataCredentials {
    /**
     * the AWS region to use for the AWS signing service credential method. Not Null
     */
    awsRegion?: pulumi.Input<string>;
    /**
     * the IAM role to use for the AWS signing service credential method
     */
    iamRole?: pulumi.Input<string>;
}

export interface SystemExternalBundlesServiceCredentialsS3SigningProfileCredentials {
    /**
     * the AWS region to use for the AWS signing service credential method. Not Null
     */
    awsRegion?: pulumi.Input<string>;
    /**
     * the path to the shared credentials file
     */
    path?: pulumi.Input<string>;
    /**
     * AWS Profile to extract credentials from the credentials file
     */
    profile?: pulumi.Input<string>;
}

export interface SystemExternalBundlesServiceCredentialsS3SigningWebIdentityCredentials {
    /**
     * the AWS region to use for the sts regional endpoint (default: global). Not Null
     */
    awsRegion?: pulumi.Input<string>;
    /**
     * the session name used to identify the assumed role session (default: open-policy-agent). Not Null
     */
    sessionName?: pulumi.Input<string>;
}

export interface SystemExternalBundlesServiceKeys {
    /**
     * Not Null
     */
    algorithm?: pulumi.Input<string>;
    /**
     * Not Null
     */
    key?: pulumi.Input<string>;
    /**
     * Not Null
     */
    privateKey?: pulumi.Input<string>;
    /**
     * Not Null
     */
    scope?: pulumi.Input<string>;
}

export interface SystemExternalBundlesServiceTls {
    /**
     * the path to the root CA certificate. If not provided, this defaults to TLS using the host’s root CA set
     */
    caCert?: pulumi.Input<string>;
    /**
     * require system certificate appended with root CA certificate
     */
    systemCaRequired?: pulumi.Input<boolean>;
}

export interface SystemMetadata {
    createdAt?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    createdThrough?: pulumi.Input<string>;
    lastModifiedAt?: pulumi.Input<string>;
    lastModifiedBy?: pulumi.Input<string>;
    lastModifiedThrough?: pulumi.Input<string>;
}

export interface SystemMigrationHistory {
    from?: pulumi.Input<string>;
    initiatedBy?: pulumi.Input<string>;
    initiatingUser?: pulumi.Input<string>;
    migratedAt?: pulumi.Input<string>;
    recovered?: pulumi.Input<boolean>;
    to?: pulumi.Input<string>;
}

export interface SystemPolicy {
    /**
     * policy on when to (re)generate the policy
     */
    created?: pulumi.Input<string>;
    enforcement?: pulumi.Input<inputs.SystemPolicyEnforcement>;
    /**
     * policy ID (path)
     */
    id?: pulumi.Input<string>;
    /**
     * rego modules policy consists of
     */
    modules?: pulumi.Input<pulumi.Input<inputs.SystemPolicyModule>[]>;
    rules?: pulumi.Input<inputs.SystemPolicyRules>;
    /**
     * policy type e.g. validating/rules
     */
    type?: pulumi.Input<string>;
}

export interface SystemPolicyEnforcement {
    /**
     * true if the policy is enforced
     */
    enforced?: pulumi.Input<boolean>;
    /**
     * enforcement type e.g. opa, test, mask
     */
    type?: pulumi.Input<string>;
}

export interface SystemPolicyModule {
    /**
     * module name
     */
    name?: pulumi.Input<string>;
    /**
     * module is a placeholder
     */
    placeholder?: pulumi.Input<boolean>;
    /**
     * true if module is read-only
     */
    readOnly?: pulumi.Input<boolean>;
    rules?: pulumi.Input<inputs.SystemPolicyModuleRules>;
}

export interface SystemPolicyModuleRules {
    /**
     * number of allow rules
     */
    allow?: pulumi.Input<number>;
    /**
     * number of deny rules
     */
    deny?: pulumi.Input<number>;
    /**
     * number of enforce rules
     */
    enforce?: pulumi.Input<number>;
    /**
     * number of ignore rules
     */
    ignore?: pulumi.Input<number>;
    /**
     * number of monitor rules
     */
    monitor?: pulumi.Input<number>;
    /**
     * number of notify rules
     */
    notify?: pulumi.Input<number>;
    /**
     * number of unclassified rules
     */
    other?: pulumi.Input<number>;
    /**
     * number of test rules
     */
    test?: pulumi.Input<number>;
    /**
     * total number of rules
     */
    total?: pulumi.Input<number>;
}

export interface SystemPolicyRules {
    /**
     * number of allow rules
     */
    allow?: pulumi.Input<number>;
    /**
     * number of deny rules
     */
    deny?: pulumi.Input<number>;
    /**
     * number of enforce rules
     */
    enforce?: pulumi.Input<number>;
    /**
     * number of ignore rules
     */
    ignore?: pulumi.Input<number>;
    /**
     * number of monitor rules
     */
    monitor?: pulumi.Input<number>;
    /**
     * number of notify rules
     */
    notify?: pulumi.Input<number>;
    /**
     * number of unclassified rules
     */
    other?: pulumi.Input<number>;
    /**
     * number of test rules
     */
    test?: pulumi.Input<number>;
    /**
     * total number of rules
     */
    total?: pulumi.Input<number>;
}

export interface SystemResult {
    authz?: pulumi.Input<inputs.SystemResultAuthz>;
    bundleDownload?: pulumi.Input<inputs.SystemResultBundleDownload>;
    bundleRegistry?: pulumi.Input<inputs.SystemResultBundleRegistry>;
    /**
     * only put data in the context bundle
     */
    contextBundleDataOnly?: pulumi.Input<boolean>;
    /**
     * list of path prefixes for policies/datasources that go into the second (context) bundle
     */
    contextBundleRoots?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * datasources created for the system
     */
    datasources?: pulumi.Input<pulumi.Input<inputs.SystemResultDatasource>[]>;
    /**
     * location of key attributes and additional columns in the decisions grouped by policy entry point path
     */
    decisionMappings?: pulumi.Input<{[key: string]: pulumi.Input<inputs.SystemResultDecisionMappings>}>;
    deploymentParameters?: pulumi.Input<inputs.SystemResultDeploymentParameters>;
    /**
     * description for the system
     */
    description?: pulumi.Input<string>;
    /**
     * error/warning configuration: one of "all", "errors", "none"
     */
    errorSetting?: pulumi.Input<string>;
    /**
     * current deployment errors
     */
    errors?: pulumi.Input<{[key: string]: pulumi.Input<inputs.SystemResultErrors>}>;
    externalBundles?: pulumi.Input<inputs.SystemResultExternalBundles>;
    /**
     * optional parameter to map Styra DAS system ID to external IDs used by a customer. (mapping can be retrieved with TranslateExternalIds operation)
     */
    externalId?: pulumi.Input<string>;
    /**
     * when set, stacks that are not linked to this system will be filtered out of its bundles
     */
    filterStacks?: pulumi.Input<boolean>;
    /**
     * system ID
     */
    id?: pulumi.Input<string>;
    /**
     * optional parameter to specify the Kafka topic where the decision logs for this system should be published (ignored if Kafka is not configured for the workspace for decision export)
     */
    kafkaTopic?: pulumi.Input<string>;
    /**
     * IDs of stacks matching the system
     */
    matchingStacks?: pulumi.Input<pulumi.Input<string>[]>;
    metadata?: pulumi.Input<inputs.SystemResultMetadata>;
    /**
     * A history of any migrations performed on this system
     */
    migrationHistories?: pulumi.Input<pulumi.Input<inputs.SystemResultMigrationHistory>[]>;
    /**
     * minimum running OPA version for the systems
     */
    minimumOpaVersion?: pulumi.Input<string>;
    /**
     * enable mock OPAs for this system
     */
    mockOpaEnabled?: pulumi.Input<boolean>;
    /**
     * system name
     */
    name?: pulumi.Input<string>;
    /**
     * policies created for the system
     */
    policies?: pulumi.Input<pulumi.Input<inputs.SystemResultPolicy>[]>;
    /**
     * prevents users from modifying policies using Styra UIs
     */
    readOnly?: pulumi.Input<boolean>;
    sourceControl?: pulumi.Input<inputs.SystemResultSourceControl>;
    /**
     * system status
     */
    status?: pulumi.Input<string>;
    /**
     * tokens created for the system
     */
    tokens?: pulumi.Input<pulumi.Input<inputs.SystemResultToken>[]>;
    /**
     * system type e.g. kubernetes
     */
    type?: pulumi.Input<string>;
    /**
     * system type parameter values (for template.* types)
     */
    typeParameters?: pulumi.Input<inputs.SystemResultTypeParameters>;
    /**
     * uninstallation instructions by installation method (deprecated)
     */
    uninstall?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface SystemResultAuthz {
    /**
     * a list of role binding configs
     */
    roleBindings?: pulumi.Input<pulumi.Input<inputs.SystemResultAuthzRoleBinding>[]>;
}

export interface SystemResultAuthzRoleBinding {
    /**
     * role binding ID
     */
    id?: pulumi.Input<string>;
    /**
     * role name
     */
    roleName?: pulumi.Input<string>;
}

export interface SystemResultBundleDownload {
    /**
     * enabled delta bundles on bundle download
     */
    deltaBundles?: pulumi.Input<boolean>;
}

export interface SystemResultBundleRegistry {
    /**
     * when checked, bundles will be activated regardless of their compatibility with currently running agents
     */
    disableBundleCompatibilityCheck?: pulumi.Input<boolean>;
    distributionS3?: pulumi.Input<inputs.SystemResultBundleRegistryDistributionS3>;
    /**
     * extra bundle entry points to use when compiling bundles
     */
    entrypoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * manual deployment mode to prevent automatic deployment of new bundles
     */
    manualDeployment?: pulumi.Input<boolean>;
    /**
     * Override of manual deployment mode flag per bundle type
     */
    manualDeploymentOverrides?: pulumi.Input<{[key: string]: pulumi.Input<boolean>}>;
    /**
     * maximum number of all bundles to store
     */
    maxBundles?: pulumi.Input<number>;
    /**
     * maximum number of previously deployed bundles to store
     */
    maxDeployedBundles?: pulumi.Input<number>;
    /**
     * OPA optimization level to use when building bundles
     */
    optimizationLevel?: pulumi.Input<number>;
}

export interface SystemResultBundleRegistryDistributionS3 {
    /**
     * access key id and secret access key are looked under the key <name>/<access_keys>
     */
    accessKeys?: pulumi.Input<string>;
    /**
     * bucket name
     */
    bucket?: pulumi.Input<string>;
    /**
     * context bundle path. The name must not use template variables
     */
    contextPath?: pulumi.Input<string>;
    /**
     * discovery bundle path. Template variables can be used in the name
     */
    discoveryPath?: pulumi.Input<string>;
    /**
     * AWS endpoint
     */
    endpoint?: pulumi.Input<string>;
    opaCredentials?: pulumi.Input<inputs.SystemResultBundleRegistryDistributionS3OpaCredentials>;
    /**
     * policy bundle path. Template variables can be used in the name
     */
    policyPath?: pulumi.Input<string>;
    /**
     * AWS region
     */
    region?: pulumi.Input<string>;
    /**
     * AWS role
     */
    roleArn?: pulumi.Input<string>;
}

export interface SystemResultBundleRegistryDistributionS3OpaCredentials {
    environmentCredentials?: pulumi.Input<inputs.SystemResultBundleRegistryDistributionS3OpaCredentialsEnvironmentCredentials>;
    metadataCredentials?: pulumi.Input<inputs.SystemResultBundleRegistryDistributionS3OpaCredentialsMetadataCredentials>;
    webIdentityCredentials?: pulumi.Input<inputs.SystemResultBundleRegistryDistributionS3OpaCredentialsWebIdentityCredentials>;
}

export interface SystemResultBundleRegistryDistributionS3OpaCredentialsEnvironmentCredentials {
}

export interface SystemResultBundleRegistryDistributionS3OpaCredentialsMetadataCredentials {
    awsRegion?: pulumi.Input<string>;
    iamRole?: pulumi.Input<string>;
}

export interface SystemResultBundleRegistryDistributionS3OpaCredentialsWebIdentityCredentials {
    awsRegion?: pulumi.Input<string>;
    sessionName?: pulumi.Input<string>;
}

export interface SystemResultDatasource {
    /**
     * datasource category
     */
    category?: pulumi.Input<string>;
    /**
     * datasource ID
     */
    id?: pulumi.Input<string>;
    /**
     * optional datasources can be deleted without being recreated automatically
     */
    optional?: pulumi.Input<boolean>;
    status?: pulumi.Input<inputs.SystemResultDatasourceStatus>;
}

export interface SystemResultDatasourceStatus {
    code?: pulumi.Input<string>;
    message?: pulumi.Input<string>;
    timestamp?: pulumi.Input<string>;
}

export interface SystemResultDecisionMappings {
    allowed?: pulumi.Input<inputs.SystemResultDecisionMappingsAllowed>;
    /**
     * decision mappings for additional columns
     */
    columns?: pulumi.Input<pulumi.Input<inputs.SystemResultDecisionMappingsColumn>[]>;
    reason?: pulumi.Input<inputs.SystemResultDecisionMappingsReason>;
}

export interface SystemResultDecisionMappingsAllowed {
    /**
     * Parsed as JSON.
     */
    expected?: pulumi.Input<string>;
    /**
     * when set to true, decision is Allowed when the mapped property IS NOT equal to the expected value
     */
    negated?: pulumi.Input<boolean>;
    /**
     * dot-separated decision property path
     */
    path?: pulumi.Input<string>;
}

export interface SystemResultDecisionMappingsColumn {
    /**
     * column key (also the search key)
     */
    key?: pulumi.Input<string>;
    /**
     * dot-separated decision property path
     */
    path?: pulumi.Input<string>;
    /**
     * column type: one of "string", "boolean", "date", "integer", "float"
     */
    type?: pulumi.Input<string>;
}

export interface SystemResultDecisionMappingsReason {
    /**
     * dot-separated decision property path
     */
    path?: pulumi.Input<string>;
}

export interface SystemResultDeploymentParameters {
    /**
     * true to fail close
     */
    denyOnOpaFail?: pulumi.Input<boolean>;
    /**
     * discovery config settings for OPAs linked to the system. (in case of conflict with system-type defined setting, this value takes precedence)
     */
    discovery?: pulumi.Input<inputs.SystemResultDeploymentParametersDiscovery>;
    /**
     * extra deployment settings
     */
    extra?: pulumi.Input<inputs.SystemResultDeploymentParametersExtra>;
    /**
     * HTTP proxy URL
     */
    httpProxy?: pulumi.Input<string>;
    /**
     * HTTPS proxy URL
     */
    httpsProxy?: pulumi.Input<string>;
    /**
     * minimum Kubernetes version expected (where applicable)
     */
    kubernetesVersion?: pulumi.Input<string>;
    /**
     * Custom name for mutating webhook (useful for changing webhook order of execution)
     */
    mutatingWebhookName?: pulumi.Input<string>;
    /**
     * Kubernetes namespace the system is deployed to
     */
    namespace?: pulumi.Input<string>;
    /**
     * URLs that should be excluded from proxying
     */
    noProxy?: pulumi.Input<string>;
    /**
     * Kubernetes webhook timeout (where applicable)
     */
    timeoutSeconds?: pulumi.Input<number>;
    /**
     * trusted CA certificates
     */
    trustedCaCerts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * trusted container registry
     */
    trustedContainerRegistry?: pulumi.Input<string>;
}

export interface SystemResultDeploymentParametersDiscovery {
}

export interface SystemResultDeploymentParametersExtra {
}

export interface SystemResultErrors {
    /**
     * list of system errors
     */
    errors?: pulumi.Input<pulumi.Input<inputs.SystemResultErrorsError>[]>;
    /**
     * true if the the system is waiting for error to be resolved
     */
    waiting?: pulumi.Input<boolean>;
}

export interface SystemResultErrorsError {
    code?: pulumi.Input<string>;
    message?: pulumi.Input<string>;
    timestamp?: pulumi.Input<string>;
}

export interface SystemResultExternalBundles {
    /**
     * externally configured bundles, use name of bundle as key
     */
    bundles?: pulumi.Input<{[key: string]: pulumi.Input<inputs.SystemResultExternalBundlesBundles>}>;
    /**
     * externally configured services
     */
    services?: pulumi.Input<pulumi.Input<inputs.SystemResultExternalBundlesService>[]>;
}

export interface SystemResultExternalBundlesBundles {
    /**
     * persist activated bundles to disk
     */
    persist?: pulumi.Input<boolean>;
    polling?: pulumi.Input<inputs.SystemResultExternalBundlesBundlesPolling>;
    /**
     * resource path to use to download bundle from configured service
     */
    resource?: pulumi.Input<string>;
    /**
     * name of service to use to contact remote server
     */
    service?: pulumi.Input<string>;
    signing?: pulumi.Input<inputs.SystemResultExternalBundlesBundlesSigning>;
    /**
     * size limit for individual files contained in the bundle
     */
    sizeLimitBytes?: pulumi.Input<number>;
}

export interface SystemResultExternalBundlesBundlesPolling {
    /**
     * maximum amount of time the server should wait before issuing a timeout if there’s no update available
     */
    longPollingTimeoutSeconds?: pulumi.Input<number>;
    /**
     * maximum amount of time to wait between bundle downloads
     */
    maxDelaySeconds?: pulumi.Input<number>;
    /**
     * minimum amount of time to wait between bundle downloads
     */
    minDelaySeconds?: pulumi.Input<number>;
}

export interface SystemResultExternalBundlesBundlesSigning {
    /**
     * files in the bundle to exclude during verification
     */
    excludeFiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * name of the key to use for bundle signature verification
     */
    keyid?: pulumi.Input<string>;
    /**
     * information about necessary public signing keys
     */
    publicKeys?: pulumi.Input<{[key: string]: pulumi.Input<inputs.SystemResultExternalBundlesBundlesSigningPublicKeys>}>;
    /**
     * scope to use for bundle signature verification
     */
    scope?: pulumi.Input<string>;
}

export interface SystemResultExternalBundlesBundlesSigningPublicKeys {
    /**
     * name of the signing algorithm
     */
    algorithm?: pulumi.Input<string>;
    /**
     * PEM encoded public key to use for signature verification
     */
    key?: pulumi.Input<string>;
    /**
     * PEM encoded private key to use for signing
     */
    privateKey?: pulumi.Input<string>;
    /**
     * scope to use for bundle signature verification
     */
    scope?: pulumi.Input<string>;
}

export interface SystemResultExternalBundlesService {
    /**
     * allow insecure TLS
     */
    allowInsecureTls?: pulumi.Input<boolean>;
    credentials?: pulumi.Input<inputs.SystemResultExternalBundlesServiceCredentials>;
    /**
     * HTTP headers to include in the requests to the service
     */
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * keys is a dictionary mapping the key name to the actual key and optionally the algorithm and scope.
     */
    keys?: pulumi.Input<{[key: string]: pulumi.Input<inputs.SystemResultExternalBundlesServiceKeys>}>;
    /**
     * unique name for each service, referred to by plugins
     */
    name?: pulumi.Input<string>;
    /**
     * amount of time to wait for a server's response headers after fully writing the request
     */
    responseHeaderTimeoutSeconds?: pulumi.Input<number>;
    tls?: pulumi.Input<inputs.SystemResultExternalBundlesServiceTls>;
    /**
     * optional parameter that allows to use an “OCI” service type
     */
    type?: pulumi.Input<string>;
    /**
     * base URL to contact the service with
     */
    url?: pulumi.Input<string>;
}

export interface SystemResultExternalBundlesServiceCredentials {
    azureManagedIdentity?: pulumi.Input<inputs.SystemResultExternalBundlesServiceCredentialsAzureManagedIdentity>;
    bearer?: pulumi.Input<inputs.SystemResultExternalBundlesServiceCredentialsBearer>;
    clientTls?: pulumi.Input<inputs.SystemResultExternalBundlesServiceCredentialsClientTls>;
    gcpMetadata?: pulumi.Input<inputs.SystemResultExternalBundlesServiceCredentialsGcpMetadata>;
    oauth2?: pulumi.Input<inputs.SystemResultExternalBundlesServiceCredentialsOauth2>;
    /**
     * authenticate using a custom plugin
     */
    plugin?: pulumi.Input<string>;
    s3Signing?: pulumi.Input<inputs.SystemResultExternalBundlesServiceCredentialsS3Signing>;
}

export interface SystemResultExternalBundlesServiceCredentialsAzureManagedIdentity {
    /**
     * API version to use
     */
    apiVersion?: pulumi.Input<string>;
    /**
     * optional client ID of the managed identity you would like the token for, required if your VM has multiple user-assigned managed identities
     */
    clientId?: pulumi.Input<string>;
    /**
     * request endpoint
     */
    endpoint?: pulumi.Input<string>;
    /**
     * optional Azure Resource ID of the managed identity you would like the token for, required, if your VM has multiple user-assigned managed identities
     */
    miResId?: pulumi.Input<string>;
    /**
     * optional object ID of the managed identity you would like the token for, required if your VM has multiple user-assigned managed identities
     */
    objectId?: pulumi.Input<string>;
    /**
     * app ID URI of the target resource
     */
    resource?: pulumi.Input<string>;
}

export interface SystemResultExternalBundlesServiceCredentialsBearer {
    /**
     * bearer token scheme to specify
     */
    scheme?: pulumi.Input<string>;
    /**
     * enables token-based authentication and supplies the bearer token to authenticate with
     */
    token?: pulumi.Input<string>;
    /**
     * enables token-based authentication and supplies the path to the bearer token to authenticate with
     */
    tokenPath?: pulumi.Input<string>;
}

export interface SystemResultExternalBundlesServiceCredentialsClientTls {
    /**
     * the path to the client certificate to authenticate with
     */
    cert?: pulumi.Input<string>;
    /**
     * the path to the private key of the client certificate
     */
    privateKey?: pulumi.Input<string>;
    /**
     * the passphrase to use for the private key
     */
    privateKeyPassphrase?: pulumi.Input<string>;
}

export interface SystemResultExternalBundlesServiceCredentialsGcpMetadata {
    /**
     * the access token metadata path to use
     */
    accessTokenPath?: pulumi.Input<string>;
    /**
     * the audience to use when fetching identity tokens
     */
    audience?: pulumi.Input<string>;
    /**
     * the metadata endpoint to use
     */
    endpoint?: pulumi.Input<string>;
    /**
     * the identity token metadata path to use
     */
    idTokenPath?: pulumi.Input<string>;
    /**
     * the set of scopes to use when fetching access token
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SystemResultExternalBundlesServiceCredentialsOauth2 {
    /**
     * map of claims to include in the JWT
     */
    additionalClaims?: pulumi.Input<inputs.SystemResultExternalBundlesServiceCredentialsOauth2AdditionalClaims>;
    /**
     * map of additional headers to send to token endpoint at the OAuth2 authorization server
     */
    additionalHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * map of additional body parameters to send token endpoint at the OAuth2 authorization server
     */
    additionalParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * the client ID to use for authentication
     */
    clientId?: pulumi.Input<string>;
    /**
     * the client secret to use for authentication
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * defaults to client_credentials
     */
    grantType?: pulumi.Input<string>;
    /**
     * include a uniquely generated jti claim in any issued JWT
     */
    includeJtiClaim?: pulumi.Input<boolean>;
    /**
     * optional list of scopes to request for the token
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * reference to private key used for signing the JWT
     */
    signingKey?: pulumi.Input<string>;
    /**
     * certificate thumbprint to use for x5t header generation
     */
    thumbprint?: pulumi.Input<string>;
    /**
     * URL pointing to the token endpoint at the OAuth2 authorization server
     */
    tokenUrl?: pulumi.Input<string>;
}

export interface SystemResultExternalBundlesServiceCredentialsOauth2AdditionalClaims {
}

export interface SystemResultExternalBundlesServiceCredentialsS3Signing {
    /**
     * Parsed as JSON.
     */
    environmentCredentials?: pulumi.Input<string>;
    metadataCredentials?: pulumi.Input<inputs.SystemResultExternalBundlesServiceCredentialsS3SigningMetadataCredentials>;
    profileCredentials?: pulumi.Input<inputs.SystemResultExternalBundlesServiceCredentialsS3SigningProfileCredentials>;
    /**
     * the AWS service to sign requests with, eg execute-api or s3 (default: s3)
     */
    service?: pulumi.Input<string>;
    webIdentityCredentials?: pulumi.Input<inputs.SystemResultExternalBundlesServiceCredentialsS3SigningWebIdentityCredentials>;
}

export interface SystemResultExternalBundlesServiceCredentialsS3SigningMetadataCredentials {
    /**
     * the AWS region to use for the AWS signing service credential method
     */
    awsRegion?: pulumi.Input<string>;
    /**
     * the IAM role to use for the AWS signing service credential method
     */
    iamRole?: pulumi.Input<string>;
}

export interface SystemResultExternalBundlesServiceCredentialsS3SigningProfileCredentials {
    /**
     * the AWS region to use for the AWS signing service credential method
     */
    awsRegion?: pulumi.Input<string>;
    /**
     * the path to the shared credentials file
     */
    path?: pulumi.Input<string>;
    /**
     * AWS Profile to extract credentials from the credentials file
     */
    profile?: pulumi.Input<string>;
}

export interface SystemResultExternalBundlesServiceCredentialsS3SigningWebIdentityCredentials {
    /**
     * the AWS region to use for the sts regional endpoint (default: global)
     */
    awsRegion?: pulumi.Input<string>;
    /**
     * the session name used to identify the assumed role session (default: open-policy-agent)
     */
    sessionName?: pulumi.Input<string>;
}

export interface SystemResultExternalBundlesServiceKeys {
    algorithm?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
}

export interface SystemResultExternalBundlesServiceTls {
    /**
     * the path to the root CA certificate. If not provided, this defaults to TLS using the host’s root CA set
     */
    caCert?: pulumi.Input<string>;
    /**
     * require system certificate appended with root CA certificate
     */
    systemCaRequired?: pulumi.Input<boolean>;
}

export interface SystemResultMetadata {
    createdAt?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    createdThrough?: pulumi.Input<string>;
    lastModifiedAt?: pulumi.Input<string>;
    lastModifiedBy?: pulumi.Input<string>;
    lastModifiedThrough?: pulumi.Input<string>;
}

export interface SystemResultMigrationHistory {
    from?: pulumi.Input<string>;
    initiatedBy?: pulumi.Input<string>;
    initiatingUser?: pulumi.Input<string>;
    migratedAt?: pulumi.Input<string>;
    recovered?: pulumi.Input<boolean>;
    to?: pulumi.Input<string>;
}

export interface SystemResultPolicy {
    /**
     * policy on when to (re)generate the policy
     */
    created?: pulumi.Input<string>;
    enforcement?: pulumi.Input<inputs.SystemResultPolicyEnforcement>;
    /**
     * policy ID (path)
     */
    id?: pulumi.Input<string>;
    /**
     * rego modules policy consists of
     */
    modules?: pulumi.Input<pulumi.Input<inputs.SystemResultPolicyModule>[]>;
    rules?: pulumi.Input<inputs.SystemResultPolicyRules>;
    /**
     * policy type e.g. validating/rules
     */
    type?: pulumi.Input<string>;
}

export interface SystemResultPolicyEnforcement {
    /**
     * true if the policy is enforced
     */
    enforced?: pulumi.Input<boolean>;
    /**
     * enforcement type e.g. opa, test, mask
     */
    type?: pulumi.Input<string>;
}

export interface SystemResultPolicyModule {
    /**
     * module name
     */
    name?: pulumi.Input<string>;
    /**
     * module is a placeholder
     */
    placeholder?: pulumi.Input<boolean>;
    /**
     * true if module is read-only
     */
    readOnly?: pulumi.Input<boolean>;
    rules?: pulumi.Input<inputs.SystemResultPolicyModuleRules>;
}

export interface SystemResultPolicyModuleRules {
    /**
     * number of allow rules
     */
    allow?: pulumi.Input<number>;
    /**
     * number of deny rules
     */
    deny?: pulumi.Input<number>;
    /**
     * number of enforce rules
     */
    enforce?: pulumi.Input<number>;
    /**
     * number of ignore rules
     */
    ignore?: pulumi.Input<number>;
    /**
     * number of monitor rules
     */
    monitor?: pulumi.Input<number>;
    /**
     * number of notify rules
     */
    notify?: pulumi.Input<number>;
    /**
     * number of unclassified rules
     */
    other?: pulumi.Input<number>;
    /**
     * number of test rules
     */
    test?: pulumi.Input<number>;
    /**
     * total number of rules
     */
    total?: pulumi.Input<number>;
}

export interface SystemResultPolicyRules {
    /**
     * number of allow rules
     */
    allow?: pulumi.Input<number>;
    /**
     * number of deny rules
     */
    deny?: pulumi.Input<number>;
    /**
     * number of enforce rules
     */
    enforce?: pulumi.Input<number>;
    /**
     * number of ignore rules
     */
    ignore?: pulumi.Input<number>;
    /**
     * number of monitor rules
     */
    monitor?: pulumi.Input<number>;
    /**
     * number of notify rules
     */
    notify?: pulumi.Input<number>;
    /**
     * number of unclassified rules
     */
    other?: pulumi.Input<number>;
    /**
     * number of test rules
     */
    test?: pulumi.Input<number>;
    /**
     * total number of rules
     */
    total?: pulumi.Input<number>;
}

export interface SystemResultSourceControl {
    origin?: pulumi.Input<inputs.SystemResultSourceControlOrigin>;
}

export interface SystemResultSourceControlOrigin {
    /**
     * Commit SHA. Only one of reference or commit can be set at any time
     */
    commit?: pulumi.Input<string>;
    /**
     * Credentials are looked under the key <name>/<creds>
     */
    credentials?: pulumi.Input<string>;
    /**
     * Path to limit the import to
     */
    path?: pulumi.Input<string>;
    /**
     * Remote reference. Only one of reference or commit can be set at any time
     */
    reference?: pulumi.Input<string>;
    sshCredentials?: pulumi.Input<inputs.SystemResultSourceControlOriginSshCredentials>;
    /**
     * Repository URL
     */
    url?: pulumi.Input<string>;
}

export interface SystemResultSourceControlOriginSshCredentials {
    /**
     * Passphrase is looked under the key passphrase/<pass>
     */
    passphrase?: pulumi.Input<string>;
    /**
     * PrivateKey is looked under the key private-key/<key>
     */
    privateKey?: pulumi.Input<string>;
}

export interface SystemResultToken {
    allowPathPatterns?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    expires?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    metadata?: pulumi.Input<inputs.SystemResultTokenMetadata>;
    token?: pulumi.Input<string>;
    ttl?: pulumi.Input<string>;
    uses?: pulumi.Input<number>;
}

export interface SystemResultTokenMetadata {
    createdAt?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    createdThrough?: pulumi.Input<string>;
    lastModifiedAt?: pulumi.Input<string>;
    lastModifiedBy?: pulumi.Input<string>;
    lastModifiedThrough?: pulumi.Input<string>;
}

export interface SystemResultTypeParameters {
}

export interface SystemSourceControl {
    /**
     * Not Null
     */
    origin?: pulumi.Input<inputs.SystemSourceControlOrigin>;
}

export interface SystemSourceControlOrigin {
    /**
     * Commit SHA. Only one of reference or commit can be set at any time. Not Null
     */
    commit?: pulumi.Input<string>;
    /**
     * Credentials are looked under the key <name>/<creds>. Not Null
     */
    credentials?: pulumi.Input<string>;
    /**
     * Path to limit the import to. Not Null
     */
    path?: pulumi.Input<string>;
    /**
     * Remote reference. Only one of reference or commit can be set at any time. Not Null
     */
    reference?: pulumi.Input<string>;
    sshCredentials?: pulumi.Input<inputs.SystemSourceControlOriginSshCredentials>;
    /**
     * Repository URL. Not Null
     */
    url?: pulumi.Input<string>;
}

export interface SystemSourceControlOriginSshCredentials {
    /**
     * Passphrase is looked under the key passphrase/<pass>. Not Null
     */
    passphrase?: pulumi.Input<string>;
    /**
     * PrivateKey is looked under the key private-key/<key>. Not Null
     */
    privateKey?: pulumi.Input<string>;
}

export interface SystemToken {
    allowPathPatterns?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    expires?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    metadata?: pulumi.Input<inputs.SystemTokenMetadata>;
    token?: pulumi.Input<string>;
    ttl?: pulumi.Input<string>;
    uses?: pulumi.Input<number>;
}

export interface SystemTokenMetadata {
    createdAt?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    createdThrough?: pulumi.Input<string>;
    lastModifiedAt?: pulumi.Input<string>;
    lastModifiedBy?: pulumi.Input<string>;
    lastModifiedThrough?: pulumi.Input<string>;
}

export interface SystemTypeParameters {
}
