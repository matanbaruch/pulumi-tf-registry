// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getGroup(args?: GetGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetGroupResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gitlab:index/getGroup:getGroup", {
        "fullPath": args.fullPath,
        "groupId": args.groupId,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getGroup.
 */
export interface GetGroupArgs {
    fullPath?: string;
    groupId?: number;
    id?: string;
}

/**
 * A collection of values returned by getGroup.
 */
export interface GetGroupResult {
    readonly defaultBranchProtection: number;
    readonly description: string;
    readonly extraSharedRunnersMinutesLimit: number;
    readonly fullName: string;
    readonly fullPath: string;
    readonly groupId: number;
    readonly id: string;
    readonly lfsEnabled: boolean;
    readonly membershipLock: boolean;
    readonly name: string;
    readonly parentId: number;
    readonly path: string;
    readonly preventForkingOutsideGroup: boolean;
    readonly requestAccessEnabled: boolean;
    readonly runnersToken: string;
    readonly sharedRunnersMinutesLimit: number;
    readonly sharedRunnersSetting: string;
    readonly sharedWithGroups: outputs.GetGroupSharedWithGroup[];
    readonly visibilityLevel: string;
    readonly webUrl: string;
    readonly wikiAccessLevel: string;
}
export function getGroupOutput(args?: GetGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGroupResult> {
    return pulumi.output(args).apply((a: any) => getGroup(a, opts))
}

/**
 * A collection of arguments for invoking getGroup.
 */
export interface GetGroupOutputArgs {
    fullPath?: pulumi.Input<string>;
    groupId?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
}
