// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getRepositoryTree(args: GetRepositoryTreeArgs, opts?: pulumi.InvokeOptions): Promise<GetRepositoryTreeResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gitlab:index/getRepositoryTree:getRepositoryTree", {
        "id": args.id,
        "path": args.path,
        "project": args.project,
        "recursive": args.recursive,
        "ref": args.ref,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRepositoryTree.
 */
export interface GetRepositoryTreeArgs {
    id?: string;
    path?: string;
    project: string;
    recursive?: boolean;
    ref: string;
}

/**
 * A collection of values returned by getRepositoryTree.
 */
export interface GetRepositoryTreeResult {
    readonly id: string;
    readonly path?: string;
    readonly project: string;
    readonly recursive?: boolean;
    readonly ref: string;
    readonly trees: outputs.GetRepositoryTreeTree[];
}
export function getRepositoryTreeOutput(args: GetRepositoryTreeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRepositoryTreeResult> {
    return pulumi.output(args).apply((a: any) => getRepositoryTree(a, opts))
}

/**
 * A collection of arguments for invoking getRepositoryTree.
 */
export interface GetRepositoryTreeOutputArgs {
    id?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    project: pulumi.Input<string>;
    recursive?: pulumi.Input<boolean>;
    ref: pulumi.Input<string>;
}
