// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getGroupVariable(args: GetGroupVariableArgs, opts?: pulumi.InvokeOptions): Promise<GetGroupVariableResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gitlab:index/getGroupVariable:getGroupVariable", {
        "environmentScope": args.environmentScope,
        "group": args.group,
        "id": args.id,
        "key": args.key,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getGroupVariable.
 */
export interface GetGroupVariableArgs {
    environmentScope?: string;
    group: string;
    id?: string;
    key: string;
}

/**
 * A collection of values returned by getGroupVariable.
 */
export interface GetGroupVariableResult {
    readonly description: string;
    readonly environmentScope: string;
    readonly group: string;
    readonly id: string;
    readonly key: string;
    readonly masked: boolean;
    readonly protected: boolean;
    readonly raw: boolean;
    readonly value: string;
    readonly variableType: string;
}
export function getGroupVariableOutput(args: GetGroupVariableOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGroupVariableResult> {
    return pulumi.output(args).apply((a: any) => getGroupVariable(a, opts))
}

/**
 * A collection of arguments for invoking getGroupVariable.
 */
export interface GetGroupVariableOutputArgs {
    environmentScope?: pulumi.Input<string>;
    group: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    key: pulumi.Input<string>;
}
