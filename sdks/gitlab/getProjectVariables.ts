// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getProjectVariables(args: GetProjectVariablesArgs, opts?: pulumi.InvokeOptions): Promise<GetProjectVariablesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gitlab:index/getProjectVariables:getProjectVariables", {
        "environmentScope": args.environmentScope,
        "id": args.id,
        "project": args.project,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getProjectVariables.
 */
export interface GetProjectVariablesArgs {
    environmentScope?: string;
    id?: string;
    project: string;
}

/**
 * A collection of values returned by getProjectVariables.
 */
export interface GetProjectVariablesResult {
    readonly environmentScope?: string;
    readonly id: string;
    readonly project: string;
    readonly variables: outputs.GetProjectVariablesVariable[];
}
export function getProjectVariablesOutput(args: GetProjectVariablesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetProjectVariablesResult> {
    return pulumi.output(args).apply((a: any) => getProjectVariables(a, opts))
}

/**
 * A collection of arguments for invoking getProjectVariables.
 */
export interface GetProjectVariablesOutputArgs {
    environmentScope?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    project: pulumi.Input<string>;
}
