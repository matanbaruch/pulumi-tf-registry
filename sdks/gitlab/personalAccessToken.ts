// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PersonalAccessToken extends pulumi.CustomResource {
    /**
     * Get an existing PersonalAccessToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PersonalAccessTokenState, opts?: pulumi.CustomResourceOptions): PersonalAccessToken {
        return new PersonalAccessToken(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gitlab:index/personalAccessToken:PersonalAccessToken';

    /**
     * Returns true if the given object is an instance of PersonalAccessToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PersonalAccessToken {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PersonalAccessToken.__pulumiType;
    }

    /**
     * True if the token is active.
     */
    public /*out*/ readonly active!: pulumi.Output<boolean>;
    /**
     * Time the token has been created, RFC3339 format.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * When the token will expire, YYYY-MM-DD format.
     */
    public readonly expiresAt!: pulumi.Output<string>;
    /**
     * The name of the personal access token.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * True if the token is revoked.
     */
    public /*out*/ readonly revoked!: pulumi.Output<boolean>;
    /**
     * The scopes of the personal access token. valid values are: `api`, `read_user`, `read_api`, `read_repository`,
     * `write_repository`, `read_registry`, `write_registry`, `sudo`, `admin_mode`, `create_runner`, `manage_runner`,
     * `ai_features`, `k8s_proxy`, `read_service_ping`
     */
    public readonly scopes!: pulumi.Output<string[]>;
    /**
     * The token of the personal access token. **Note**: the token is not available for imported resources.
     */
    public /*out*/ readonly token!: pulumi.Output<string>;
    /**
     * The ID of the user.
     */
    public readonly userId!: pulumi.Output<number>;

    /**
     * Create a PersonalAccessToken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PersonalAccessTokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PersonalAccessTokenArgs | PersonalAccessTokenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PersonalAccessTokenState | undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["expiresAt"] = state ? state.expiresAt : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["revoked"] = state ? state.revoked : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as PersonalAccessTokenArgs | undefined;
            if ((!args || args.scopes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopes'");
            }
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["expiresAt"] = args ? args.expiresAt : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["active"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["revoked"] = undefined /*out*/;
            resourceInputs["token"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(PersonalAccessToken.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PersonalAccessToken resources.
 */
export interface PersonalAccessTokenState {
    /**
     * True if the token is active.
     */
    active?: pulumi.Input<boolean>;
    /**
     * Time the token has been created, RFC3339 format.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * When the token will expire, YYYY-MM-DD format.
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * The name of the personal access token.
     */
    name?: pulumi.Input<string>;
    /**
     * True if the token is revoked.
     */
    revoked?: pulumi.Input<boolean>;
    /**
     * The scopes of the personal access token. valid values are: `api`, `read_user`, `read_api`, `read_repository`,
     * `write_repository`, `read_registry`, `write_registry`, `sudo`, `admin_mode`, `create_runner`, `manage_runner`,
     * `ai_features`, `k8s_proxy`, `read_service_ping`
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The token of the personal access token. **Note**: the token is not available for imported resources.
     */
    token?: pulumi.Input<string>;
    /**
     * The ID of the user.
     */
    userId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a PersonalAccessToken resource.
 */
export interface PersonalAccessTokenArgs {
    /**
     * When the token will expire, YYYY-MM-DD format.
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * The name of the personal access token.
     */
    name?: pulumi.Input<string>;
    /**
     * The scopes of the personal access token. valid values are: `api`, `read_user`, `read_api`, `read_repository`,
     * `write_repository`, `read_registry`, `write_registry`, `sudo`, `admin_mode`, `create_runner`, `manage_runner`,
     * `ai_features`, `k8s_proxy`, `read_service_ping`
     */
    scopes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the user.
     */
    userId: pulumi.Input<number>;
}
