// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getProjectProtectedBranch(args: GetProjectProtectedBranchArgs, opts?: pulumi.InvokeOptions): Promise<GetProjectProtectedBranchResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gitlab:index/getProjectProtectedBranch:getProjectProtectedBranch", {
        "mergeAccessLevels": args.mergeAccessLevels,
        "name": args.name,
        "projectId": args.projectId,
        "pushAccessLevels": args.pushAccessLevels,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getProjectProtectedBranch.
 */
export interface GetProjectProtectedBranchArgs {
    mergeAccessLevels?: inputs.GetProjectProtectedBranchMergeAccessLevel[];
    name: string;
    projectId: string;
    pushAccessLevels?: inputs.GetProjectProtectedBranchPushAccessLevel[];
}

/**
 * A collection of values returned by getProjectProtectedBranch.
 */
export interface GetProjectProtectedBranchResult {
    readonly allowForcePush: boolean;
    readonly codeOwnerApprovalRequired: boolean;
    readonly id: number;
    readonly mergeAccessLevels?: outputs.GetProjectProtectedBranchMergeAccessLevel[];
    readonly name: string;
    readonly projectId: string;
    readonly pushAccessLevels?: outputs.GetProjectProtectedBranchPushAccessLevel[];
}
export function getProjectProtectedBranchOutput(args: GetProjectProtectedBranchOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetProjectProtectedBranchResult> {
    return pulumi.output(args).apply((a: any) => getProjectProtectedBranch(a, opts))
}

/**
 * A collection of arguments for invoking getProjectProtectedBranch.
 */
export interface GetProjectProtectedBranchOutputArgs {
    mergeAccessLevels?: pulumi.Input<pulumi.Input<inputs.GetProjectProtectedBranchMergeAccessLevelArgs>[]>;
    name: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    pushAccessLevels?: pulumi.Input<pulumi.Input<inputs.GetProjectProtectedBranchPushAccessLevelArgs>[]>;
}
