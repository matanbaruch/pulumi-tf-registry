// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getProjectProtectedBranches(args: GetProjectProtectedBranchesArgs, opts?: pulumi.InvokeOptions): Promise<GetProjectProtectedBranchesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gitlab:index/getProjectProtectedBranches:getProjectProtectedBranches", {
        "projectId": args.projectId,
        "protectedBranches": args.protectedBranches,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getProjectProtectedBranches.
 */
export interface GetProjectProtectedBranchesArgs {
    projectId: string;
    protectedBranches?: inputs.GetProjectProtectedBranchesProtectedBranch[];
}

/**
 * A collection of values returned by getProjectProtectedBranches.
 */
export interface GetProjectProtectedBranchesResult {
    readonly id: number;
    readonly projectId: string;
    readonly protectedBranches?: outputs.GetProjectProtectedBranchesProtectedBranch[];
}
export function getProjectProtectedBranchesOutput(args: GetProjectProtectedBranchesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetProjectProtectedBranchesResult> {
    return pulumi.output(args).apply((a: any) => getProjectProtectedBranches(a, opts))
}

/**
 * A collection of arguments for invoking getProjectProtectedBranches.
 */
export interface GetProjectProtectedBranchesOutputArgs {
    projectId: pulumi.Input<string>;
    protectedBranches?: pulumi.Input<pulumi.Input<inputs.GetProjectProtectedBranchesProtectedBranchArgs>[]>;
}
