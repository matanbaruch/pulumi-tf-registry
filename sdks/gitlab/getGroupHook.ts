// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getGroupHook(args: GetGroupHookArgs, opts?: pulumi.InvokeOptions): Promise<GetGroupHookResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gitlab:index/getGroupHook:getGroupHook", {
        "group": args.group,
        "hookId": args.hookId,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getGroupHook.
 */
export interface GetGroupHookArgs {
    group: string;
    hookId: number;
    id?: string;
}

/**
 * A collection of values returned by getGroupHook.
 */
export interface GetGroupHookResult {
    readonly confidentialIssuesEvents: boolean;
    readonly confidentialNoteEvents: boolean;
    readonly customWebhookTemplate: string;
    readonly deploymentEvents: boolean;
    readonly enableSslVerification: boolean;
    readonly group: string;
    readonly groupId: number;
    readonly hookId: number;
    readonly id: string;
    readonly issuesEvents: boolean;
    readonly jobEvents: boolean;
    readonly mergeRequestsEvents: boolean;
    readonly noteEvents: boolean;
    readonly pipelineEvents: boolean;
    readonly pushEvents: boolean;
    readonly pushEventsBranchFilter: string;
    readonly releasesEvents: boolean;
    readonly subgroupEvents: boolean;
    readonly tagPushEvents: boolean;
    readonly token: string;
    readonly url: string;
    readonly wikiPageEvents: boolean;
}
export function getGroupHookOutput(args: GetGroupHookOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGroupHookResult> {
    return pulumi.output(args).apply((a: any) => getGroupHook(a, opts))
}

/**
 * A collection of arguments for invoking getGroupHook.
 */
export interface GetGroupHookOutputArgs {
    group: pulumi.Input<string>;
    hookId: pulumi.Input<number>;
    id?: pulumi.Input<string>;
}
