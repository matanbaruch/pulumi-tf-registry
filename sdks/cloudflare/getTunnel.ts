// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getTunnel(args: GetTunnelArgs, opts?: pulumi.InvokeOptions): Promise<GetTunnelResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudflare:index/getTunnel:getTunnel", {
        "accountId": args.accountId,
        "isDeleted": args.isDeleted,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getTunnel.
 */
export interface GetTunnelArgs {
    accountId: string;
    isDeleted?: boolean;
    name: string;
}

/**
 * A collection of values returned by getTunnel.
 */
export interface GetTunnelResult {
    readonly accountId: string;
    readonly id: string;
    readonly isDeleted?: boolean;
    readonly name: string;
    readonly remoteConfig: boolean;
    readonly status: string;
    readonly tunnelType: string;
}
export function getTunnelOutput(args: GetTunnelOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTunnelResult> {
    return pulumi.output(args).apply((a: any) => getTunnel(a, opts))
}

/**
 * A collection of arguments for invoking getTunnel.
 */
export interface GetTunnelOutputArgs {
    accountId: pulumi.Input<string>;
    isDeleted?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
}
