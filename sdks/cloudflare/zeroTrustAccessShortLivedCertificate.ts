// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ZeroTrustAccessShortLivedCertificate extends pulumi.CustomResource {
    /**
     * Get an existing ZeroTrustAccessShortLivedCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZeroTrustAccessShortLivedCertificateState, opts?: pulumi.CustomResourceOptions): ZeroTrustAccessShortLivedCertificate {
        return new ZeroTrustAccessShortLivedCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/zeroTrustAccessShortLivedCertificate:ZeroTrustAccessShortLivedCertificate';

    /**
     * Returns true if the given object is an instance of ZeroTrustAccessShortLivedCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ZeroTrustAccessShortLivedCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ZeroTrustAccessShortLivedCertificate.__pulumiType;
    }

    /**
     * The account identifier to target for the resource. Conflicts with `zone_id`.
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * The Access Application ID to associate with the CA certificate.
     */
    public readonly applicationId!: pulumi.Output<string>;
    /**
     * Application Audience (AUD) Tag of the CA certificate.
     */
    public /*out*/ readonly aud!: pulumi.Output<string>;
    /**
     * Cryptographic public key of the generated CA certificate.
     */
    public /*out*/ readonly publicKey!: pulumi.Output<string>;
    /**
     * The zone identifier to target for the resource. Conflicts with `account_id`.
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a ZeroTrustAccessShortLivedCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZeroTrustAccessShortLivedCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZeroTrustAccessShortLivedCertificateArgs | ZeroTrustAccessShortLivedCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZeroTrustAccessShortLivedCertificateState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["applicationId"] = state ? state.applicationId : undefined;
            resourceInputs["aud"] = state ? state.aud : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as ZeroTrustAccessShortLivedCertificateArgs | undefined;
            if ((!args || args.applicationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationId'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["applicationId"] = args ? args.applicationId : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["aud"] = undefined /*out*/;
            resourceInputs["publicKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ZeroTrustAccessShortLivedCertificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ZeroTrustAccessShortLivedCertificate resources.
 */
export interface ZeroTrustAccessShortLivedCertificateState {
    /**
     * The account identifier to target for the resource. Conflicts with `zone_id`.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The Access Application ID to associate with the CA certificate.
     */
    applicationId?: pulumi.Input<string>;
    /**
     * Application Audience (AUD) Tag of the CA certificate.
     */
    aud?: pulumi.Input<string>;
    /**
     * Cryptographic public key of the generated CA certificate.
     */
    publicKey?: pulumi.Input<string>;
    /**
     * The zone identifier to target for the resource. Conflicts with `account_id`.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ZeroTrustAccessShortLivedCertificate resource.
 */
export interface ZeroTrustAccessShortLivedCertificateArgs {
    /**
     * The account identifier to target for the resource. Conflicts with `zone_id`.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The Access Application ID to associate with the CA certificate.
     */
    applicationId: pulumi.Input<string>;
    /**
     * The zone identifier to target for the resource. Conflicts with `account_id`.
     */
    zoneId?: pulumi.Input<string>;
}
