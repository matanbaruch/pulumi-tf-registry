// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ZeroTrustAccessMtlsCertificate extends pulumi.CustomResource {
    /**
     * Get an existing ZeroTrustAccessMtlsCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZeroTrustAccessMtlsCertificateState, opts?: pulumi.CustomResourceOptions): ZeroTrustAccessMtlsCertificate {
        return new ZeroTrustAccessMtlsCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudflare:index/zeroTrustAccessMtlsCertificate:ZeroTrustAccessMtlsCertificate';

    /**
     * Returns true if the given object is an instance of ZeroTrustAccessMtlsCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ZeroTrustAccessMtlsCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ZeroTrustAccessMtlsCertificate.__pulumiType;
    }

    /**
     * The account identifier to target for the resource. Conflicts with `zone_id`.
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * The hostnames that will be prompted for this certificate.
     */
    public readonly associatedHostnames!: pulumi.Output<string[] | undefined>;
    /**
     * The Root CA for your certificates.
     */
    public readonly certificate!: pulumi.Output<string | undefined>;
    public /*out*/ readonly fingerprint!: pulumi.Output<string>;
    /**
     * The name of the certificate.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The zone identifier to target for the resource. Conflicts with `account_id`.
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a ZeroTrustAccessMtlsCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ZeroTrustAccessMtlsCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZeroTrustAccessMtlsCertificateArgs | ZeroTrustAccessMtlsCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZeroTrustAccessMtlsCertificateState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["associatedHostnames"] = state ? state.associatedHostnames : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["fingerprint"] = state ? state.fingerprint : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as ZeroTrustAccessMtlsCertificateArgs | undefined;
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["associatedHostnames"] = args ? args.associatedHostnames : undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["fingerprint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ZeroTrustAccessMtlsCertificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ZeroTrustAccessMtlsCertificate resources.
 */
export interface ZeroTrustAccessMtlsCertificateState {
    /**
     * The account identifier to target for the resource. Conflicts with `zone_id`.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The hostnames that will be prompted for this certificate.
     */
    associatedHostnames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Root CA for your certificates.
     */
    certificate?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    /**
     * The name of the certificate.
     */
    name?: pulumi.Input<string>;
    /**
     * The zone identifier to target for the resource. Conflicts with `account_id`.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ZeroTrustAccessMtlsCertificate resource.
 */
export interface ZeroTrustAccessMtlsCertificateArgs {
    /**
     * The account identifier to target for the resource. Conflicts with `zone_id`.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The hostnames that will be prompted for this certificate.
     */
    associatedHostnames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Root CA for your certificates.
     */
    certificate?: pulumi.Input<string>;
    /**
     * The name of the certificate.
     */
    name?: pulumi.Input<string>;
    /**
     * The zone identifier to target for the resource. Conflicts with `account_id`.
     */
    zoneId?: pulumi.Input<string>;
}
