// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Block extends pulumi.CustomResource {
    /**
     * Get an existing Block resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BlockState, opts?: pulumi.CustomResourceOptions): Block {
        return new Block(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prefect:index/block:Block';

    /**
     * Returns true if the given object is an instance of Block.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Block {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Block.__pulumiType;
    }

    /**
     * Account ID (UUID) where the Block is located
     */
    public readonly accountId!: pulumi.Output<string | undefined>;
    /**
     * Timestamp of when the resource was created (RFC3339)
     */
    public /*out*/ readonly created!: pulumi.Output<string>;
    /**
     * The user-inputted Block payload, as a JSON string. The value's schema will depend on the selected `type` slug. Use
     * `prefect block type inspect <slug>` to view the data schema for a given Block type.
     */
    public readonly data!: pulumi.Output<string>;
    /**
     * Unique name of the Block
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Block Type slug, which determines the schema of the `data` JSON attribute. Use `prefect block type ls` to view all
     * available Block type slugs.
     */
    public readonly typeSlug!: pulumi.Output<string>;
    /**
     * Timestamp of when the resource was updated (RFC3339)
     */
    public /*out*/ readonly updated!: pulumi.Output<string>;
    /**
     * Workspace ID (UUID) where the Block is located. In Prefect Cloud, either the `prefect.Block` resource or the provider's
     * `workspace_id` must be set.
     */
    public readonly workspaceId!: pulumi.Output<string | undefined>;

    /**
     * Create a Block resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BlockArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BlockArgs | BlockState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BlockState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["data"] = state ? state.data : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["typeSlug"] = state ? state.typeSlug : undefined;
            resourceInputs["updated"] = state ? state.updated : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        } else {
            const args = argsOrState as BlockArgs | undefined;
            if ((!args || args.data === undefined) && !opts.urn) {
                throw new Error("Missing required property 'data'");
            }
            if ((!args || args.typeSlug === undefined) && !opts.urn) {
                throw new Error("Missing required property 'typeSlug'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["data"] = args?.data ? pulumi.secret(args.data) : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["typeSlug"] = args ? args.typeSlug : undefined;
            resourceInputs["workspaceId"] = args ? args.workspaceId : undefined;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["updated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["data"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Block.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Block resources.
 */
export interface BlockState {
    /**
     * Account ID (UUID) where the Block is located
     */
    accountId?: pulumi.Input<string>;
    /**
     * Timestamp of when the resource was created (RFC3339)
     */
    created?: pulumi.Input<string>;
    /**
     * The user-inputted Block payload, as a JSON string. The value's schema will depend on the selected `type` slug. Use
     * `prefect block type inspect <slug>` to view the data schema for a given Block type.
     */
    data?: pulumi.Input<string>;
    /**
     * Unique name of the Block
     */
    name?: pulumi.Input<string>;
    /**
     * Block Type slug, which determines the schema of the `data` JSON attribute. Use `prefect block type ls` to view all
     * available Block type slugs.
     */
    typeSlug?: pulumi.Input<string>;
    /**
     * Timestamp of when the resource was updated (RFC3339)
     */
    updated?: pulumi.Input<string>;
    /**
     * Workspace ID (UUID) where the Block is located. In Prefect Cloud, either the `prefect.Block` resource or the provider's
     * `workspace_id` must be set.
     */
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Block resource.
 */
export interface BlockArgs {
    /**
     * Account ID (UUID) where the Block is located
     */
    accountId?: pulumi.Input<string>;
    /**
     * The user-inputted Block payload, as a JSON string. The value's schema will depend on the selected `type` slug. Use
     * `prefect block type inspect <slug>` to view the data schema for a given Block type.
     */
    data: pulumi.Input<string>;
    /**
     * Unique name of the Block
     */
    name?: pulumi.Input<string>;
    /**
     * Block Type slug, which determines the schema of the `data` JSON attribute. Use `prefect block type ls` to view all
     * available Block type slugs.
     */
    typeSlug: pulumi.Input<string>;
    /**
     * Workspace ID (UUID) where the Block is located. In Prefect Cloud, either the `prefect.Block` resource or the provider's
     * `workspace_id` must be set.
     */
    workspaceId?: pulumi.Input<string>;
}
