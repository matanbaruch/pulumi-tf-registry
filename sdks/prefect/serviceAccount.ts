// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ServiceAccount extends pulumi.CustomResource {
    /**
     * Get an existing ServiceAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceAccountState, opts?: pulumi.CustomResourceOptions): ServiceAccount {
        return new ServiceAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prefect:index/serviceAccount:ServiceAccount';

    /**
     * Returns true if the given object is an instance of ServiceAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceAccount.__pulumiType;
    }

    /**
     * Account ID (UUID), defaults to the account set in the provider
     */
    public readonly accountId!: pulumi.Output<string>;
    /**
     * Account Role name of the service account (one of: Admin, Member, Owner)
     */
    public readonly accountRoleName!: pulumi.Output<string>;
    /**
     * Actor ID (UUID), used for granting access to resources like Blocks and Deployments
     */
    public /*out*/ readonly actorId!: pulumi.Output<string>;
    /**
     * API Key associated with the service account
     */
    public /*out*/ readonly apiKey!: pulumi.Output<string>;
    /**
     * Timestamp of the API Key creation (RFC3339)
     */
    public /*out*/ readonly apiKeyCreated!: pulumi.Output<string>;
    /**
     * Timestamp of the API Key expiration (RFC3339). If left as null, the API Key will not expire. Modify this attribute to
     * force a key rotation.
     */
    public readonly apiKeyExpiration!: pulumi.Output<string | undefined>;
    /**
     * API Key ID associated with the service account
     */
    public /*out*/ readonly apiKeyId!: pulumi.Output<string>;
    /**
     * API Key Name associated with the service account
     */
    public /*out*/ readonly apiKeyName!: pulumi.Output<string>;
    /**
     * Timestamp of when the resource was created (RFC3339)
     */
    public /*out*/ readonly created!: pulumi.Output<string>;
    /**
     * Name of the service account
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Provide this field to set an expiration for the currently active api key. If not provided or provided Null, the current
     * key will be deleted. If provided, it cannot be more than 48 hours (172800 seconds) in the future.
     */
    public readonly oldKeyExpiresInSeconds!: pulumi.Output<number>;
    /**
     * Timestamp of when the resource was updated (RFC3339)
     */
    public /*out*/ readonly updated!: pulumi.Output<string>;

    /**
     * Create a ServiceAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ServiceAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceAccountArgs | ServiceAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceAccountState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["accountRoleName"] = state ? state.accountRoleName : undefined;
            resourceInputs["actorId"] = state ? state.actorId : undefined;
            resourceInputs["apiKey"] = state ? state.apiKey : undefined;
            resourceInputs["apiKeyCreated"] = state ? state.apiKeyCreated : undefined;
            resourceInputs["apiKeyExpiration"] = state ? state.apiKeyExpiration : undefined;
            resourceInputs["apiKeyId"] = state ? state.apiKeyId : undefined;
            resourceInputs["apiKeyName"] = state ? state.apiKeyName : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["oldKeyExpiresInSeconds"] = state ? state.oldKeyExpiresInSeconds : undefined;
            resourceInputs["updated"] = state ? state.updated : undefined;
        } else {
            const args = argsOrState as ServiceAccountArgs | undefined;
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["accountRoleName"] = args ? args.accountRoleName : undefined;
            resourceInputs["apiKeyExpiration"] = args ? args.apiKeyExpiration : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["oldKeyExpiresInSeconds"] = args ? args.oldKeyExpiresInSeconds : undefined;
            resourceInputs["actorId"] = undefined /*out*/;
            resourceInputs["apiKey"] = undefined /*out*/;
            resourceInputs["apiKeyCreated"] = undefined /*out*/;
            resourceInputs["apiKeyId"] = undefined /*out*/;
            resourceInputs["apiKeyName"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["updated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["apiKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ServiceAccount.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServiceAccount resources.
 */
export interface ServiceAccountState {
    /**
     * Account ID (UUID), defaults to the account set in the provider
     */
    accountId?: pulumi.Input<string>;
    /**
     * Account Role name of the service account (one of: Admin, Member, Owner)
     */
    accountRoleName?: pulumi.Input<string>;
    /**
     * Actor ID (UUID), used for granting access to resources like Blocks and Deployments
     */
    actorId?: pulumi.Input<string>;
    /**
     * API Key associated with the service account
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Timestamp of the API Key creation (RFC3339)
     */
    apiKeyCreated?: pulumi.Input<string>;
    /**
     * Timestamp of the API Key expiration (RFC3339). If left as null, the API Key will not expire. Modify this attribute to
     * force a key rotation.
     */
    apiKeyExpiration?: pulumi.Input<string>;
    /**
     * API Key ID associated with the service account
     */
    apiKeyId?: pulumi.Input<string>;
    /**
     * API Key Name associated with the service account
     */
    apiKeyName?: pulumi.Input<string>;
    /**
     * Timestamp of when the resource was created (RFC3339)
     */
    created?: pulumi.Input<string>;
    /**
     * Name of the service account
     */
    name?: pulumi.Input<string>;
    /**
     * Provide this field to set an expiration for the currently active api key. If not provided or provided Null, the current
     * key will be deleted. If provided, it cannot be more than 48 hours (172800 seconds) in the future.
     */
    oldKeyExpiresInSeconds?: pulumi.Input<number>;
    /**
     * Timestamp of when the resource was updated (RFC3339)
     */
    updated?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceAccount resource.
 */
export interface ServiceAccountArgs {
    /**
     * Account ID (UUID), defaults to the account set in the provider
     */
    accountId?: pulumi.Input<string>;
    /**
     * Account Role name of the service account (one of: Admin, Member, Owner)
     */
    accountRoleName?: pulumi.Input<string>;
    /**
     * Timestamp of the API Key expiration (RFC3339). If left as null, the API Key will not expire. Modify this attribute to
     * force a key rotation.
     */
    apiKeyExpiration?: pulumi.Input<string>;
    /**
     * Name of the service account
     */
    name?: pulumi.Input<string>;
    /**
     * Provide this field to set an expiration for the currently active api key. If not provided or provided Null, the current
     * key will be deleted. If provided, it cannot be more than 48 hours (172800 seconds) in the future.
     */
    oldKeyExpiresInSeconds?: pulumi.Input<number>;
}
