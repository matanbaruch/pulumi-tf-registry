// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Deployment extends pulumi.CustomResource {
    /**
     * Get an existing Deployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeploymentState, opts?: pulumi.CustomResourceOptions): Deployment {
        return new Deployment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prefect:index/deployment:Deployment';

    /**
     * Returns true if the given object is an instance of Deployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Deployment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Deployment.__pulumiType;
    }

    /**
     * Account ID (UUID), defaults to the account set in the provider
     */
    public readonly accountId!: pulumi.Output<string | undefined>;
    /**
     * Timestamp of when the resource was created (RFC3339)
     */
    public /*out*/ readonly created!: pulumi.Output<string>;
    /**
     * A description for the deployment.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Whether or not the deployment should enforce the parameter schema.
     */
    public readonly enforceParameterSchema!: pulumi.Output<boolean>;
    /**
     * The path to the entrypoint for the workflow, relative to the path.
     */
    public readonly entrypoint!: pulumi.Output<string>;
    /**
     * Flow ID (UUID) to associate deployment to
     */
    public readonly flowId!: pulumi.Output<string>;
    /**
     * Overrides for the flow's infrastructure configuration.
     */
    public readonly jobVariables!: pulumi.Output<string>;
    /**
     * The path to the flow's manifest file, relative to the chosen storage.
     */
    public readonly manifestPath!: pulumi.Output<string>;
    /**
     * Name of the workspace
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Parameters for flow runs scheduled by the deployment.
     */
    public readonly parameters!: pulumi.Output<string>;
    /**
     * The path to the working directory for the workflow, relative to remote storage or an absolute path.
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * Whether or not the deployment is paused.
     */
    public readonly paused!: pulumi.Output<boolean>;
    /**
     * Tags associated with the deployment
     */
    public readonly tags!: pulumi.Output<string[]>;
    /**
     * Timestamp of when the resource was updated (RFC3339)
     */
    public /*out*/ readonly updated!: pulumi.Output<string>;
    /**
     * An optional version for the deployment.
     */
    public readonly version!: pulumi.Output<string>;
    /**
     * The name of the deployment's work pool.
     */
    public readonly workPoolName!: pulumi.Output<string>;
    /**
     * The work queue for the deployment. If no work queue is set, work will not be scheduled.
     */
    public readonly workQueueName!: pulumi.Output<string>;
    /**
     * Workspace ID (UUID) to associate deployment to
     */
    public readonly workspaceId!: pulumi.Output<string | undefined>;

    /**
     * Create a Deployment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeploymentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeploymentArgs | DeploymentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeploymentState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enforceParameterSchema"] = state ? state.enforceParameterSchema : undefined;
            resourceInputs["entrypoint"] = state ? state.entrypoint : undefined;
            resourceInputs["flowId"] = state ? state.flowId : undefined;
            resourceInputs["jobVariables"] = state ? state.jobVariables : undefined;
            resourceInputs["manifestPath"] = state ? state.manifestPath : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["paused"] = state ? state.paused : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updated"] = state ? state.updated : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["workPoolName"] = state ? state.workPoolName : undefined;
            resourceInputs["workQueueName"] = state ? state.workQueueName : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        } else {
            const args = argsOrState as DeploymentArgs | undefined;
            if ((!args || args.flowId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flowId'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enforceParameterSchema"] = args ? args.enforceParameterSchema : undefined;
            resourceInputs["entrypoint"] = args ? args.entrypoint : undefined;
            resourceInputs["flowId"] = args ? args.flowId : undefined;
            resourceInputs["jobVariables"] = args ? args.jobVariables : undefined;
            resourceInputs["manifestPath"] = args ? args.manifestPath : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["paused"] = args ? args.paused : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["workPoolName"] = args ? args.workPoolName : undefined;
            resourceInputs["workQueueName"] = args ? args.workQueueName : undefined;
            resourceInputs["workspaceId"] = args ? args.workspaceId : undefined;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["updated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Deployment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Deployment resources.
 */
export interface DeploymentState {
    /**
     * Account ID (UUID), defaults to the account set in the provider
     */
    accountId?: pulumi.Input<string>;
    /**
     * Timestamp of when the resource was created (RFC3339)
     */
    created?: pulumi.Input<string>;
    /**
     * A description for the deployment.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether or not the deployment should enforce the parameter schema.
     */
    enforceParameterSchema?: pulumi.Input<boolean>;
    /**
     * The path to the entrypoint for the workflow, relative to the path.
     */
    entrypoint?: pulumi.Input<string>;
    /**
     * Flow ID (UUID) to associate deployment to
     */
    flowId?: pulumi.Input<string>;
    /**
     * Overrides for the flow's infrastructure configuration.
     */
    jobVariables?: pulumi.Input<string>;
    /**
     * The path to the flow's manifest file, relative to the chosen storage.
     */
    manifestPath?: pulumi.Input<string>;
    /**
     * Name of the workspace
     */
    name?: pulumi.Input<string>;
    /**
     * Parameters for flow runs scheduled by the deployment.
     */
    parameters?: pulumi.Input<string>;
    /**
     * The path to the working directory for the workflow, relative to remote storage or an absolute path.
     */
    path?: pulumi.Input<string>;
    /**
     * Whether or not the deployment is paused.
     */
    paused?: pulumi.Input<boolean>;
    /**
     * Tags associated with the deployment
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Timestamp of when the resource was updated (RFC3339)
     */
    updated?: pulumi.Input<string>;
    /**
     * An optional version for the deployment.
     */
    version?: pulumi.Input<string>;
    /**
     * The name of the deployment's work pool.
     */
    workPoolName?: pulumi.Input<string>;
    /**
     * The work queue for the deployment. If no work queue is set, work will not be scheduled.
     */
    workQueueName?: pulumi.Input<string>;
    /**
     * Workspace ID (UUID) to associate deployment to
     */
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Deployment resource.
 */
export interface DeploymentArgs {
    /**
     * Account ID (UUID), defaults to the account set in the provider
     */
    accountId?: pulumi.Input<string>;
    /**
     * A description for the deployment.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether or not the deployment should enforce the parameter schema.
     */
    enforceParameterSchema?: pulumi.Input<boolean>;
    /**
     * The path to the entrypoint for the workflow, relative to the path.
     */
    entrypoint?: pulumi.Input<string>;
    /**
     * Flow ID (UUID) to associate deployment to
     */
    flowId: pulumi.Input<string>;
    /**
     * Overrides for the flow's infrastructure configuration.
     */
    jobVariables?: pulumi.Input<string>;
    /**
     * The path to the flow's manifest file, relative to the chosen storage.
     */
    manifestPath?: pulumi.Input<string>;
    /**
     * Name of the workspace
     */
    name?: pulumi.Input<string>;
    /**
     * Parameters for flow runs scheduled by the deployment.
     */
    parameters?: pulumi.Input<string>;
    /**
     * The path to the working directory for the workflow, relative to remote storage or an absolute path.
     */
    path?: pulumi.Input<string>;
    /**
     * Whether or not the deployment is paused.
     */
    paused?: pulumi.Input<boolean>;
    /**
     * Tags associated with the deployment
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An optional version for the deployment.
     */
    version?: pulumi.Input<string>;
    /**
     * The name of the deployment's work pool.
     */
    workPoolName?: pulumi.Input<string>;
    /**
     * The work queue for the deployment. If no work queue is set, work will not be scheduled.
     */
    workQueueName?: pulumi.Input<string>;
    /**
     * Workspace ID (UUID) to associate deployment to
     */
    workspaceId?: pulumi.Input<string>;
}
