// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getWorkPools(args?: GetWorkPoolsArgs, opts?: pulumi.InvokeOptions): Promise<GetWorkPoolsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("prefect:index/getWorkPools:getWorkPools", {
        "accountId": args.accountId,
        "filterAnies": args.filterAnies,
        "workspaceId": args.workspaceId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getWorkPools.
 */
export interface GetWorkPoolsArgs {
    accountId?: string;
    filterAnies?: string[];
    workspaceId?: string;
}

/**
 * A collection of values returned by getWorkPools.
 */
export interface GetWorkPoolsResult {
    readonly accountId?: string;
    readonly filterAnies?: string[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly workPools: outputs.GetWorkPoolsWorkPool[];
    readonly workspaceId?: string;
}
export function getWorkPoolsOutput(args?: GetWorkPoolsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetWorkPoolsResult> {
    return pulumi.output(args).apply((a: any) => getWorkPools(a, opts))
}

/**
 * A collection of arguments for invoking getWorkPools.
 */
export interface GetWorkPoolsOutputArgs {
    accountId?: pulumi.Input<string>;
    filterAnies?: pulumi.Input<pulumi.Input<string>[]>;
    workspaceId?: pulumi.Input<string>;
}
