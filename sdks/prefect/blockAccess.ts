// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class BlockAccess extends pulumi.CustomResource {
    /**
     * Get an existing BlockAccess resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BlockAccessState, opts?: pulumi.CustomResourceOptions): BlockAccess {
        return new BlockAccess(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prefect:index/blockAccess:BlockAccess';

    /**
     * Returns true if the given object is an instance of BlockAccess.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BlockAccess {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BlockAccess.__pulumiType;
    }

    /**
     * Account ID (UUID) where the Block is located
     */
    public readonly accountId!: pulumi.Output<string | undefined>;
    /**
     * Block ID (UUID)
     */
    public readonly blockId!: pulumi.Output<string>;
    /**
     * List of actor IDs with manage access to the Block
     */
    public readonly manageActorIds!: pulumi.Output<string[]>;
    /**
     * List of team IDs with manage access to the Block
     */
    public readonly manageTeamIds!: pulumi.Output<string[]>;
    /**
     * List of actor IDs with view access to the Block
     */
    public readonly viewActorIds!: pulumi.Output<string[]>;
    /**
     * List of team IDs with view access to the Block
     */
    public readonly viewTeamIds!: pulumi.Output<string[]>;
    /**
     * Workspace ID (UUID) where the Block is located. In Prefect Cloud, either the `prefect.BlockAccess` resource or the
     * provider's `workspace_id` must be set.
     */
    public readonly workspaceId!: pulumi.Output<string | undefined>;

    /**
     * Create a BlockAccess resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BlockAccessArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BlockAccessArgs | BlockAccessState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BlockAccessState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["blockId"] = state ? state.blockId : undefined;
            resourceInputs["manageActorIds"] = state ? state.manageActorIds : undefined;
            resourceInputs["manageTeamIds"] = state ? state.manageTeamIds : undefined;
            resourceInputs["viewActorIds"] = state ? state.viewActorIds : undefined;
            resourceInputs["viewTeamIds"] = state ? state.viewTeamIds : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        } else {
            const args = argsOrState as BlockAccessArgs | undefined;
            if ((!args || args.blockId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blockId'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["blockId"] = args ? args.blockId : undefined;
            resourceInputs["manageActorIds"] = args ? args.manageActorIds : undefined;
            resourceInputs["manageTeamIds"] = args ? args.manageTeamIds : undefined;
            resourceInputs["viewActorIds"] = args ? args.viewActorIds : undefined;
            resourceInputs["viewTeamIds"] = args ? args.viewTeamIds : undefined;
            resourceInputs["workspaceId"] = args ? args.workspaceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BlockAccess.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BlockAccess resources.
 */
export interface BlockAccessState {
    /**
     * Account ID (UUID) where the Block is located
     */
    accountId?: pulumi.Input<string>;
    /**
     * Block ID (UUID)
     */
    blockId?: pulumi.Input<string>;
    /**
     * List of actor IDs with manage access to the Block
     */
    manageActorIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of team IDs with manage access to the Block
     */
    manageTeamIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of actor IDs with view access to the Block
     */
    viewActorIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of team IDs with view access to the Block
     */
    viewTeamIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Workspace ID (UUID) where the Block is located. In Prefect Cloud, either the `prefect.BlockAccess` resource or the
     * provider's `workspace_id` must be set.
     */
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BlockAccess resource.
 */
export interface BlockAccessArgs {
    /**
     * Account ID (UUID) where the Block is located
     */
    accountId?: pulumi.Input<string>;
    /**
     * Block ID (UUID)
     */
    blockId: pulumi.Input<string>;
    /**
     * List of actor IDs with manage access to the Block
     */
    manageActorIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of team IDs with manage access to the Block
     */
    manageTeamIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of actor IDs with view access to the Block
     */
    viewActorIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of team IDs with view access to the Block
     */
    viewTeamIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Workspace ID (UUID) where the Block is located. In Prefect Cloud, either the `prefect.BlockAccess` resource or the
     * provider's `workspace_id` must be set.
     */
    workspaceId?: pulumi.Input<string>;
}
