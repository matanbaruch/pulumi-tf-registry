// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GkeCluster extends pulumi.CustomResource {
    /**
     * Get an existing GkeCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GkeClusterState, opts?: pulumi.CustomResourceOptions): GkeCluster {
        return new GkeCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rafay:index/gkeCluster:GkeCluster';

    /**
     * Returns true if the given object is an instance of GkeCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GkeCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GkeCluster.__pulumiType;
    }

    /**
     * apiVersion of the resource
     */
    public readonly apiVersion!: pulumi.Output<string | undefined>;
    /**
     * kind of the resource
     */
    public readonly kind!: pulumi.Output<string | undefined>;
    /**
     * Metadata of the cluster resource
     */
    public readonly metadata!: pulumi.Output<outputs.GkeClusterMetadata | undefined>;
    /**
     * GKE specific cluster configuration
     */
    public readonly specs!: pulumi.Output<outputs.GkeClusterSpec[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.GkeClusterTimeouts | undefined>;

    /**
     * Create a GkeCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: GkeClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GkeClusterArgs | GkeClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GkeClusterState | undefined;
            resourceInputs["apiVersion"] = state ? state.apiVersion : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["specs"] = state ? state.specs : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as GkeClusterArgs | undefined;
            resourceInputs["apiVersion"] = args ? args.apiVersion : undefined;
            resourceInputs["kind"] = args ? args.kind : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["specs"] = args ? args.specs : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GkeCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GkeCluster resources.
 */
export interface GkeClusterState {
    /**
     * apiVersion of the resource
     */
    apiVersion?: pulumi.Input<string>;
    /**
     * kind of the resource
     */
    kind?: pulumi.Input<string>;
    /**
     * Metadata of the cluster resource
     */
    metadata?: pulumi.Input<inputs.GkeClusterMetadata>;
    /**
     * GKE specific cluster configuration
     */
    specs?: pulumi.Input<pulumi.Input<inputs.GkeClusterSpec>[]>;
    timeouts?: pulumi.Input<inputs.GkeClusterTimeouts>;
}

/**
 * The set of arguments for constructing a GkeCluster resource.
 */
export interface GkeClusterArgs {
    /**
     * apiVersion of the resource
     */
    apiVersion?: pulumi.Input<string>;
    /**
     * kind of the resource
     */
    kind?: pulumi.Input<string>;
    /**
     * Metadata of the cluster resource
     */
    metadata?: pulumi.Input<inputs.GkeClusterMetadata>;
    /**
     * GKE specific cluster configuration
     */
    specs?: pulumi.Input<pulumi.Input<inputs.GkeClusterSpec>[]>;
    timeouts?: pulumi.Input<inputs.GkeClusterTimeouts>;
}
