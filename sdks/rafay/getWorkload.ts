// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getWorkload(args?: GetWorkloadArgs, opts?: pulumi.InvokeOptions): Promise<GetWorkloadResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("rafay:index/getWorkload:getWorkload", {
        "condition": args.condition,
        "conditionStatus": args.conditionStatus,
        "id": args.id,
        "impersonate": args.impersonate,
        "metadata": args.metadata,
        "reason": args.reason,
        "spec": args.spec,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getWorkload.
 */
export interface GetWorkloadArgs {
    condition?: string;
    conditionStatus?: string;
    id?: string;
    impersonate?: string;
    metadata?: inputs.GetWorkloadMetadata;
    reason?: string;
    spec?: inputs.GetWorkloadSpec;
    timeouts?: inputs.GetWorkloadTimeouts;
}

/**
 * A collection of values returned by getWorkload.
 */
export interface GetWorkloadResult {
    readonly condition?: string;
    readonly conditionStatus?: string;
    readonly id: string;
    readonly impersonate?: string;
    readonly metadata?: outputs.GetWorkloadMetadata;
    readonly reason?: string;
    readonly spec?: outputs.GetWorkloadSpec;
    readonly timeouts?: outputs.GetWorkloadTimeouts;
}
export function getWorkloadOutput(args?: GetWorkloadOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetWorkloadResult> {
    return pulumi.output(args).apply((a: any) => getWorkload(a, opts))
}

/**
 * A collection of arguments for invoking getWorkload.
 */
export interface GetWorkloadOutputArgs {
    condition?: pulumi.Input<string>;
    conditionStatus?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    impersonate?: pulumi.Input<string>;
    metadata?: pulumi.Input<inputs.GetWorkloadMetadataArgs>;
    reason?: pulumi.Input<string>;
    spec?: pulumi.Input<inputs.GetWorkloadSpecArgs>;
    timeouts?: pulumi.Input<inputs.GetWorkloadTimeoutsArgs>;
}
