// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ImportCluster extends pulumi.CustomResource {
    /**
     * Get an existing ImportCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImportClusterState, opts?: pulumi.CustomResourceOptions): ImportCluster {
        return new ImportCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rafay:index/importCluster:ImportCluster';

    /**
     * Returns true if the given object is an instance of ImportCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImportCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImportCluster.__pulumiType;
    }

    public readonly blueprint!: pulumi.Output<string>;
    public readonly blueprintVersion!: pulumi.Output<string | undefined>;
    public /*out*/ readonly bootstrapData!: pulumi.Output<string>;
    public readonly bootstrapPath!: pulumi.Output<string | undefined>;
    public readonly clustername!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly kubeconfigPath!: pulumi.Output<string | undefined>;
    public readonly kubernetesProvider!: pulumi.Output<string | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly location!: pulumi.Output<string | undefined>;
    public readonly projectname!: pulumi.Output<string>;
    public readonly provisionEnvironment!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ImportClusterTimeouts | undefined>;
    public /*out*/ readonly valuesData!: pulumi.Output<string>;
    public readonly valuesPath!: pulumi.Output<string | undefined>;

    /**
     * Create a ImportCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImportClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImportClusterArgs | ImportClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImportClusterState | undefined;
            resourceInputs["blueprint"] = state ? state.blueprint : undefined;
            resourceInputs["blueprintVersion"] = state ? state.blueprintVersion : undefined;
            resourceInputs["bootstrapData"] = state ? state.bootstrapData : undefined;
            resourceInputs["bootstrapPath"] = state ? state.bootstrapPath : undefined;
            resourceInputs["clustername"] = state ? state.clustername : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["kubeconfigPath"] = state ? state.kubeconfigPath : undefined;
            resourceInputs["kubernetesProvider"] = state ? state.kubernetesProvider : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["projectname"] = state ? state.projectname : undefined;
            resourceInputs["provisionEnvironment"] = state ? state.provisionEnvironment : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["valuesData"] = state ? state.valuesData : undefined;
            resourceInputs["valuesPath"] = state ? state.valuesPath : undefined;
        } else {
            const args = argsOrState as ImportClusterArgs | undefined;
            if ((!args || args.blueprint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blueprint'");
            }
            if ((!args || args.clustername === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clustername'");
            }
            if ((!args || args.projectname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectname'");
            }
            resourceInputs["blueprint"] = args ? args.blueprint : undefined;
            resourceInputs["blueprintVersion"] = args ? args.blueprintVersion : undefined;
            resourceInputs["bootstrapPath"] = args ? args.bootstrapPath : undefined;
            resourceInputs["clustername"] = args ? args.clustername : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["kubeconfigPath"] = args ? args.kubeconfigPath : undefined;
            resourceInputs["kubernetesProvider"] = args ? args.kubernetesProvider : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["projectname"] = args ? args.projectname : undefined;
            resourceInputs["provisionEnvironment"] = args ? args.provisionEnvironment : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["valuesPath"] = args ? args.valuesPath : undefined;
            resourceInputs["bootstrapData"] = undefined /*out*/;
            resourceInputs["valuesData"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ImportCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ImportCluster resources.
 */
export interface ImportClusterState {
    blueprint?: pulumi.Input<string>;
    blueprintVersion?: pulumi.Input<string>;
    bootstrapData?: pulumi.Input<string>;
    bootstrapPath?: pulumi.Input<string>;
    clustername?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    kubeconfigPath?: pulumi.Input<string>;
    kubernetesProvider?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    location?: pulumi.Input<string>;
    projectname?: pulumi.Input<string>;
    provisionEnvironment?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ImportClusterTimeouts>;
    valuesData?: pulumi.Input<string>;
    valuesPath?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ImportCluster resource.
 */
export interface ImportClusterArgs {
    blueprint: pulumi.Input<string>;
    blueprintVersion?: pulumi.Input<string>;
    bootstrapPath?: pulumi.Input<string>;
    clustername: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    kubeconfigPath?: pulumi.Input<string>;
    kubernetesProvider?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    location?: pulumi.Input<string>;
    projectname: pulumi.Input<string>;
    provisionEnvironment?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ImportClusterTimeouts>;
    valuesPath?: pulumi.Input<string>;
}
