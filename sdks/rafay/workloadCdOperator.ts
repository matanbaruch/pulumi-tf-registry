// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WorkloadCdOperator extends pulumi.CustomResource {
    /**
     * Get an existing WorkloadCdOperator resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkloadCdOperatorState, opts?: pulumi.CustomResourceOptions): WorkloadCdOperator {
        return new WorkloadCdOperator(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rafay:index/workloadCdOperator:WorkloadCdOperator';

    /**
     * Returns true if the given object is an instance of WorkloadCdOperator.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WorkloadCdOperator {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkloadCdOperator.__pulumiType;
    }

    /**
     * always run
     */
    public readonly alwaysRun!: pulumi.Output<string | undefined>;
    /**
     * Metadata of the secret sealer resource
     */
    public readonly metadata!: pulumi.Output<outputs.WorkloadCdOperatorMetadata | undefined>;
    /**
     * Specification of the repository resource
     */
    public readonly spec!: pulumi.Output<outputs.WorkloadCdOperatorSpec | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.WorkloadCdOperatorTimeouts | undefined>;
    /**
     * List of deleted/unpublished the workloads
     */
    public readonly workloadDecommissions!: pulumi.Output<outputs.WorkloadCdOperatorWorkloadDecommission[] | undefined>;
    /**
     * Status of the workload resource
     */
    public readonly workloadStatuses!: pulumi.Output<outputs.WorkloadCdOperatorWorkloadStatus[] | undefined>;
    /**
     * created/updated workload resources
     */
    public readonly workloadUpserts!: pulumi.Output<outputs.WorkloadCdOperatorWorkloadUpsert[] | undefined>;

    /**
     * Create a WorkloadCdOperator resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WorkloadCdOperatorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkloadCdOperatorArgs | WorkloadCdOperatorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkloadCdOperatorState | undefined;
            resourceInputs["alwaysRun"] = state ? state.alwaysRun : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["spec"] = state ? state.spec : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["workloadDecommissions"] = state ? state.workloadDecommissions : undefined;
            resourceInputs["workloadStatuses"] = state ? state.workloadStatuses : undefined;
            resourceInputs["workloadUpserts"] = state ? state.workloadUpserts : undefined;
        } else {
            const args = argsOrState as WorkloadCdOperatorArgs | undefined;
            resourceInputs["alwaysRun"] = args ? args.alwaysRun : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["spec"] = args ? args.spec : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["workloadDecommissions"] = args ? args.workloadDecommissions : undefined;
            resourceInputs["workloadStatuses"] = args ? args.workloadStatuses : undefined;
            resourceInputs["workloadUpserts"] = args ? args.workloadUpserts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WorkloadCdOperator.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WorkloadCdOperator resources.
 */
export interface WorkloadCdOperatorState {
    /**
     * always run
     */
    alwaysRun?: pulumi.Input<string>;
    /**
     * Metadata of the secret sealer resource
     */
    metadata?: pulumi.Input<inputs.WorkloadCdOperatorMetadata>;
    /**
     * Specification of the repository resource
     */
    spec?: pulumi.Input<inputs.WorkloadCdOperatorSpec>;
    timeouts?: pulumi.Input<inputs.WorkloadCdOperatorTimeouts>;
    /**
     * List of deleted/unpublished the workloads
     */
    workloadDecommissions?: pulumi.Input<pulumi.Input<inputs.WorkloadCdOperatorWorkloadDecommission>[]>;
    /**
     * Status of the workload resource
     */
    workloadStatuses?: pulumi.Input<pulumi.Input<inputs.WorkloadCdOperatorWorkloadStatus>[]>;
    /**
     * created/updated workload resources
     */
    workloadUpserts?: pulumi.Input<pulumi.Input<inputs.WorkloadCdOperatorWorkloadUpsert>[]>;
}

/**
 * The set of arguments for constructing a WorkloadCdOperator resource.
 */
export interface WorkloadCdOperatorArgs {
    /**
     * always run
     */
    alwaysRun?: pulumi.Input<string>;
    /**
     * Metadata of the secret sealer resource
     */
    metadata?: pulumi.Input<inputs.WorkloadCdOperatorMetadata>;
    /**
     * Specification of the repository resource
     */
    spec?: pulumi.Input<inputs.WorkloadCdOperatorSpec>;
    timeouts?: pulumi.Input<inputs.WorkloadCdOperatorTimeouts>;
    /**
     * List of deleted/unpublished the workloads
     */
    workloadDecommissions?: pulumi.Input<pulumi.Input<inputs.WorkloadCdOperatorWorkloadDecommission>[]>;
    /**
     * Status of the workload resource
     */
    workloadStatuses?: pulumi.Input<pulumi.Input<inputs.WorkloadCdOperatorWorkloadStatus>[]>;
    /**
     * created/updated workload resources
     */
    workloadUpserts?: pulumi.Input<pulumi.Input<inputs.WorkloadCdOperatorWorkloadUpsert>[]>;
}
