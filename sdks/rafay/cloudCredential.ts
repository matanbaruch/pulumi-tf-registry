// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudCredential extends pulumi.CustomResource {
    /**
     * Get an existing CloudCredential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudCredentialState, opts?: pulumi.CustomResourceOptions): CloudCredential {
        return new CloudCredential(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rafay:index/cloudCredential:CloudCredential';

    /**
     * Returns true if the given object is an instance of CloudCredential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudCredential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudCredential.__pulumiType;
    }

    /**
     * AWS accesskey.
     */
    public readonly accesskey!: pulumi.Output<string | undefined>;
    /**
     * AWS cloud provider credential type. Accepted values are 'rolearn', 'accesskey'
     */
    public readonly awscredtype!: pulumi.Output<string | undefined>;
    /**
     * Azure client ID.
     */
    public readonly clientid!: pulumi.Output<string | undefined>;
    /**
     * Azure client secret.
     */
    public readonly clientsecret!: pulumi.Output<string | undefined>;
    /**
     * Credential file.
     */
    public readonly credfile!: pulumi.Output<string | undefined>;
    /**
     * Description of the project
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * External ID.
     */
    public readonly externalid!: pulumi.Output<string | undefined>;
    /**
     * Name of cloud crredential
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Name of the project
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * Type of the cloud provider. Accepted values are 'AWS', 'AZURE', 'GCP', 'MINIO'
     */
    public readonly providertype!: pulumi.Output<string>;
    /**
     * AWS role ARN.
     */
    public readonly rolearn!: pulumi.Output<string | undefined>;
    /**
     * AWS secret key.
     */
    public readonly secretkey!: pulumi.Output<string | undefined>;
    /**
     * Azure subscription ID.
     */
    public readonly subscriptionid!: pulumi.Output<string | undefined>;
    /**
     * Azure tenant ID.
     */
    public readonly tenantid!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.CloudCredentialTimeouts | undefined>;
    /**
     * Cloud credential type. Accepted values are 'cluster-provisioning', 'data-backup'
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a CloudCredential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudCredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudCredentialArgs | CloudCredentialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudCredentialState | undefined;
            resourceInputs["accesskey"] = state ? state.accesskey : undefined;
            resourceInputs["awscredtype"] = state ? state.awscredtype : undefined;
            resourceInputs["clientid"] = state ? state.clientid : undefined;
            resourceInputs["clientsecret"] = state ? state.clientsecret : undefined;
            resourceInputs["credfile"] = state ? state.credfile : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["externalid"] = state ? state.externalid : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["providertype"] = state ? state.providertype : undefined;
            resourceInputs["rolearn"] = state ? state.rolearn : undefined;
            resourceInputs["secretkey"] = state ? state.secretkey : undefined;
            resourceInputs["subscriptionid"] = state ? state.subscriptionid : undefined;
            resourceInputs["tenantid"] = state ? state.tenantid : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as CloudCredentialArgs | undefined;
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.providertype === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providertype'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["accesskey"] = args?.accesskey ? pulumi.secret(args.accesskey) : undefined;
            resourceInputs["awscredtype"] = args ? args.awscredtype : undefined;
            resourceInputs["clientid"] = args?.clientid ? pulumi.secret(args.clientid) : undefined;
            resourceInputs["clientsecret"] = args?.clientsecret ? pulumi.secret(args.clientsecret) : undefined;
            resourceInputs["credfile"] = args ? args.credfile : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["externalid"] = args?.externalid ? pulumi.secret(args.externalid) : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["providertype"] = args ? args.providertype : undefined;
            resourceInputs["rolearn"] = args ? args.rolearn : undefined;
            resourceInputs["secretkey"] = args?.secretkey ? pulumi.secret(args.secretkey) : undefined;
            resourceInputs["subscriptionid"] = args?.subscriptionid ? pulumi.secret(args.subscriptionid) : undefined;
            resourceInputs["tenantid"] = args?.tenantid ? pulumi.secret(args.tenantid) : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accesskey", "clientid", "clientsecret", "externalid", "secretkey", "subscriptionid", "tenantid"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CloudCredential.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudCredential resources.
 */
export interface CloudCredentialState {
    /**
     * AWS accesskey.
     */
    accesskey?: pulumi.Input<string>;
    /**
     * AWS cloud provider credential type. Accepted values are 'rolearn', 'accesskey'
     */
    awscredtype?: pulumi.Input<string>;
    /**
     * Azure client ID.
     */
    clientid?: pulumi.Input<string>;
    /**
     * Azure client secret.
     */
    clientsecret?: pulumi.Input<string>;
    /**
     * Credential file.
     */
    credfile?: pulumi.Input<string>;
    /**
     * Description of the project
     */
    description?: pulumi.Input<string>;
    /**
     * External ID.
     */
    externalid?: pulumi.Input<string>;
    /**
     * Name of cloud crredential
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the project
     */
    project?: pulumi.Input<string>;
    /**
     * Type of the cloud provider. Accepted values are 'AWS', 'AZURE', 'GCP', 'MINIO'
     */
    providertype?: pulumi.Input<string>;
    /**
     * AWS role ARN.
     */
    rolearn?: pulumi.Input<string>;
    /**
     * AWS secret key.
     */
    secretkey?: pulumi.Input<string>;
    /**
     * Azure subscription ID.
     */
    subscriptionid?: pulumi.Input<string>;
    /**
     * Azure tenant ID.
     */
    tenantid?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CloudCredentialTimeouts>;
    /**
     * Cloud credential type. Accepted values are 'cluster-provisioning', 'data-backup'
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudCredential resource.
 */
export interface CloudCredentialArgs {
    /**
     * AWS accesskey.
     */
    accesskey?: pulumi.Input<string>;
    /**
     * AWS cloud provider credential type. Accepted values are 'rolearn', 'accesskey'
     */
    awscredtype?: pulumi.Input<string>;
    /**
     * Azure client ID.
     */
    clientid?: pulumi.Input<string>;
    /**
     * Azure client secret.
     */
    clientsecret?: pulumi.Input<string>;
    /**
     * Credential file.
     */
    credfile?: pulumi.Input<string>;
    /**
     * Description of the project
     */
    description?: pulumi.Input<string>;
    /**
     * External ID.
     */
    externalid?: pulumi.Input<string>;
    /**
     * Name of cloud crredential
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the project
     */
    project: pulumi.Input<string>;
    /**
     * Type of the cloud provider. Accepted values are 'AWS', 'AZURE', 'GCP', 'MINIO'
     */
    providertype: pulumi.Input<string>;
    /**
     * AWS role ARN.
     */
    rolearn?: pulumi.Input<string>;
    /**
     * AWS secret key.
     */
    secretkey?: pulumi.Input<string>;
    /**
     * Azure subscription ID.
     */
    subscriptionid?: pulumi.Input<string>;
    /**
     * Azure tenant ID.
     */
    tenantid?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CloudCredentialTimeouts>;
    /**
     * Cloud credential type. Accepted values are 'cluster-provisioning', 'data-backup'
     */
    type: pulumi.Input<string>;
}
