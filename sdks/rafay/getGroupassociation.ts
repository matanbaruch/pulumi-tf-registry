// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getGroupassociation(args: GetGroupassociationArgs, opts?: pulumi.InvokeOptions): Promise<GetGroupassociationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("rafay:index/getGroupassociation:getGroupassociation", {
        "addUsers": args.addUsers,
        "customRoles": args.customRoles,
        "group": args.group,
        "id": args.id,
        "idpUser": args.idpUser,
        "namespaces": args.namespaces,
        "project": args.project,
        "removeUsers": args.removeUsers,
        "roles": args.roles,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getGroupassociation.
 */
export interface GetGroupassociationArgs {
    addUsers?: string[];
    customRoles?: string[];
    group: string;
    id?: string;
    idpUser?: boolean;
    namespaces?: string[];
    project: string;
    removeUsers?: string[];
    roles?: string[];
    timeouts?: inputs.GetGroupassociationTimeouts;
}

/**
 * A collection of values returned by getGroupassociation.
 */
export interface GetGroupassociationResult {
    readonly addUsers?: string[];
    readonly customRoles?: string[];
    readonly group: string;
    readonly id: string;
    readonly idpUser?: boolean;
    readonly namespaces?: string[];
    readonly project: string;
    readonly removeUsers?: string[];
    readonly roles?: string[];
    readonly timeouts?: outputs.GetGroupassociationTimeouts;
}
export function getGroupassociationOutput(args: GetGroupassociationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGroupassociationResult> {
    return pulumi.output(args).apply((a: any) => getGroupassociation(a, opts))
}

/**
 * A collection of arguments for invoking getGroupassociation.
 */
export interface GetGroupassociationOutputArgs {
    addUsers?: pulumi.Input<pulumi.Input<string>[]>;
    customRoles?: pulumi.Input<pulumi.Input<string>[]>;
    group: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    idpUser?: pulumi.Input<boolean>;
    namespaces?: pulumi.Input<pulumi.Input<string>[]>;
    project: pulumi.Input<string>;
    removeUsers?: pulumi.Input<pulumi.Input<string>[]>;
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.GetGroupassociationTimeoutsArgs>;
}
