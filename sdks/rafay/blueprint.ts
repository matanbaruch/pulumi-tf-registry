// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Blueprint extends pulumi.CustomResource {
    /**
     * Get an existing Blueprint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BlueprintState, opts?: pulumi.CustomResourceOptions): Blueprint {
        return new Blueprint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rafay:index/blueprint:Blueprint';

    /**
     * Returns true if the given object is an instance of Blueprint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Blueprint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Blueprint.__pulumiType;
    }

    /**
     * Metadata of the blueprint resource
     */
    public readonly metadata!: pulumi.Output<outputs.BlueprintMetadata | undefined>;
    /**
     * Specification of the blueprint resource
     */
    public readonly spec!: pulumi.Output<outputs.BlueprintSpec | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.BlueprintTimeouts | undefined>;

    /**
     * Create a Blueprint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: BlueprintArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BlueprintArgs | BlueprintState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BlueprintState | undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["spec"] = state ? state.spec : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as BlueprintArgs | undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["spec"] = args ? args.spec : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Blueprint.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Blueprint resources.
 */
export interface BlueprintState {
    /**
     * Metadata of the blueprint resource
     */
    metadata?: pulumi.Input<inputs.BlueprintMetadata>;
    /**
     * Specification of the blueprint resource
     */
    spec?: pulumi.Input<inputs.BlueprintSpec>;
    timeouts?: pulumi.Input<inputs.BlueprintTimeouts>;
}

/**
 * The set of arguments for constructing a Blueprint resource.
 */
export interface BlueprintArgs {
    /**
     * Metadata of the blueprint resource
     */
    metadata?: pulumi.Input<inputs.BlueprintMetadata>;
    /**
     * Specification of the blueprint resource
     */
    spec?: pulumi.Input<inputs.BlueprintSpec>;
    timeouts?: pulumi.Input<inputs.BlueprintTimeouts>;
}
