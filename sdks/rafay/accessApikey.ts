// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AccessApikey extends pulumi.CustomResource {
    /**
     * Get an existing AccessApikey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccessApikeyState, opts?: pulumi.CustomResourceOptions): AccessApikey {
        return new AccessApikey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rafay:index/accessApikey:AccessApikey';

    /**
     * Returns true if the given object is an instance of AccessApikey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccessApikey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccessApikey.__pulumiType;
    }

    /**
     * The API secret that allow to interact with the system
     */
    public readonly apiSecret!: pulumi.Output<string>;
    /**
     * The API Keys that allow to interact with the system
     */
    public readonly apikey!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.AccessApikeyTimeouts | undefined>;
    /**
     * User name for the API Keys that allow to interact with the system via the RESTful API exposed by the platform.
     */
    public readonly userName!: pulumi.Output<string>;

    /**
     * Create a AccessApikey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccessApikeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccessApikeyArgs | AccessApikeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccessApikeyState | undefined;
            resourceInputs["apiSecret"] = state ? state.apiSecret : undefined;
            resourceInputs["apikey"] = state ? state.apikey : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
        } else {
            const args = argsOrState as AccessApikeyArgs | undefined;
            if ((!args || args.userName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            resourceInputs["apiSecret"] = args?.apiSecret ? pulumi.secret(args.apiSecret) : undefined;
            resourceInputs["apikey"] = args?.apikey ? pulumi.secret(args.apikey) : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["apiSecret", "apikey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AccessApikey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AccessApikey resources.
 */
export interface AccessApikeyState {
    /**
     * The API secret that allow to interact with the system
     */
    apiSecret?: pulumi.Input<string>;
    /**
     * The API Keys that allow to interact with the system
     */
    apikey?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.AccessApikeyTimeouts>;
    /**
     * User name for the API Keys that allow to interact with the system via the RESTful API exposed by the platform.
     */
    userName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccessApikey resource.
 */
export interface AccessApikeyArgs {
    /**
     * The API secret that allow to interact with the system
     */
    apiSecret?: pulumi.Input<string>;
    /**
     * The API Keys that allow to interact with the system
     */
    apikey?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.AccessApikeyTimeouts>;
    /**
     * User name for the API Keys that allow to interact with the system via the RESTful API exposed by the platform.
     */
    userName: pulumi.Input<string>;
}
