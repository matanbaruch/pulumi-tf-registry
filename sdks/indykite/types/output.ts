// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ApplicationAgentCredentialTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    read?: string;
}

export interface ApplicationAgentTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface ApplicationSpaceTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface ApplicationTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface AuditSinkKafka {
    brokers: string[];
    /**
     * Disable TLS for communication. Highly NOT RECOMMENDED.
     */
    disableTls?: boolean;
    password: string;
    /**
     * Skip TLS certificate verification. NOT RECOMMENDED.
     */
    tlsSkipVerify?: boolean;
    topic: string;
    username: string;
}

export interface AuditSinkTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface AuthorizationPolicyTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface ConsentTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface GetApplicationAgentTimeouts {
    default?: string;
    read?: string;
}

export interface GetApplicationAgentsAppAgent {
    appSpaceId: string;
    applicationId: string;
    customerId: string;
    description: string;
    displayName: string;
    id: string;
    name: string;
}

export interface GetApplicationAgentsTimeouts {
    default?: string;
    read?: string;
}

export interface GetApplicationSpaceTimeouts {
    default?: string;
    read?: string;
}

export interface GetApplicationSpacesAppSpace {
    customerId: string;
    description: string;
    displayName: string;
    id: string;
    name: string;
}

export interface GetApplicationSpacesTimeouts {
    default?: string;
    read?: string;
}

export interface GetApplicationTimeouts {
    default?: string;
    read?: string;
}

export interface GetApplicationsApplication {
    appSpaceId: string;
    customerId: string;
    description: string;
    displayName: string;
    id: string;
    name: string;
}

export interface GetApplicationsTimeouts {
    default?: string;
    read?: string;
}

export interface GetCustomerTimeouts {
    default?: string;
    read?: string;
}

export interface IngestPipelineTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface TokenIntrospectJwtMatcher {
    /**
     * Audience is used to exact match based on `aud` claim in JWT.
     */
    audience: string;
    /**
     * Issuer is used to exact match based on `iss` claim in JWT.
     */
    issuer: string;
}

export interface TokenIntrospectOfflineValidation {
    /**
     * Public JWKs to validate signature of JWT. If there are no public keys specified, they will be fetched and cached from jwks_uri at https://jwt-issuer.tld/.well-known/openid-configuration
     */
    publicJwks?: string[];
}

export interface TokenIntrospectOnlineValidation {
    /**
     * Cache TTL of token validity can be used to minimize calls to userinfo endpoint.
     *     The final cache TTL will be set to lower limit of this value and exp claim of JWT token.
     *     If not set, token will not be cached and call to userinfo endpoint will be made on every request.
     *
     *     However, token validity will be checked first if possible (JWT tokens).
     *     If token is expired, userinfo endpoint will not be called, nor cache checked.
     */
    cacheTtl?: number;
    /**
     * URI of userinfo endpoint which will be used to validate access token.
     *     And also fetch user claims when opaque token is received
     *
     *     It can remain empty, if JWT token matcher is used.
     *     Then the URI under "userinfo_endpoint" in .well-known/openid-configuration endpoint is used.
     */
    userInfoEndpoint?: string;
}

export interface TokenIntrospectOpaqueMatcher {
}

export interface TokenIntrospectTimeouts {
    create?: string;
    default?: string;
    delete?: string;
    read?: string;
    update?: string;
}

