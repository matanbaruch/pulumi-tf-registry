// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ApplicationArgs, ApplicationState } from "./application";
export type Application = import("./application").Application;
export const Application: typeof import("./application").Application = null as any;
utilities.lazyLoad(exports, ["Application"], () => require("./application"));

export { ApplicationAgentArgs, ApplicationAgentState } from "./applicationAgent";
export type ApplicationAgent = import("./applicationAgent").ApplicationAgent;
export const ApplicationAgent: typeof import("./applicationAgent").ApplicationAgent = null as any;
utilities.lazyLoad(exports, ["ApplicationAgent"], () => require("./applicationAgent"));

export { ApplicationAgentCredentialArgs, ApplicationAgentCredentialState } from "./applicationAgentCredential";
export type ApplicationAgentCredential = import("./applicationAgentCredential").ApplicationAgentCredential;
export const ApplicationAgentCredential: typeof import("./applicationAgentCredential").ApplicationAgentCredential = null as any;
utilities.lazyLoad(exports, ["ApplicationAgentCredential"], () => require("./applicationAgentCredential"));

export { ApplicationSpaceArgs, ApplicationSpaceState } from "./applicationSpace";
export type ApplicationSpace = import("./applicationSpace").ApplicationSpace;
export const ApplicationSpace: typeof import("./applicationSpace").ApplicationSpace = null as any;
utilities.lazyLoad(exports, ["ApplicationSpace"], () => require("./applicationSpace"));

export { AuditSinkArgs, AuditSinkState } from "./auditSink";
export type AuditSink = import("./auditSink").AuditSink;
export const AuditSink: typeof import("./auditSink").AuditSink = null as any;
utilities.lazyLoad(exports, ["AuditSink"], () => require("./auditSink"));

export { AuthorizationPolicyArgs, AuthorizationPolicyState } from "./authorizationPolicy";
export type AuthorizationPolicy = import("./authorizationPolicy").AuthorizationPolicy;
export const AuthorizationPolicy: typeof import("./authorizationPolicy").AuthorizationPolicy = null as any;
utilities.lazyLoad(exports, ["AuthorizationPolicy"], () => require("./authorizationPolicy"));

export { ConsentArgs, ConsentState } from "./consent";
export type Consent = import("./consent").Consent;
export const Consent: typeof import("./consent").Consent = null as any;
utilities.lazyLoad(exports, ["Consent"], () => require("./consent"));

export { GetApplicationArgs, GetApplicationResult, GetApplicationOutputArgs } from "./getApplication";
export const getApplication: typeof import("./getApplication").getApplication = null as any;
export const getApplicationOutput: typeof import("./getApplication").getApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getApplication","getApplicationOutput"], () => require("./getApplication"));

export { GetApplicationAgentArgs, GetApplicationAgentResult, GetApplicationAgentOutputArgs } from "./getApplicationAgent";
export const getApplicationAgent: typeof import("./getApplicationAgent").getApplicationAgent = null as any;
export const getApplicationAgentOutput: typeof import("./getApplicationAgent").getApplicationAgentOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationAgent","getApplicationAgentOutput"], () => require("./getApplicationAgent"));

export { GetApplicationAgentsArgs, GetApplicationAgentsResult, GetApplicationAgentsOutputArgs } from "./getApplicationAgents";
export const getApplicationAgents: typeof import("./getApplicationAgents").getApplicationAgents = null as any;
export const getApplicationAgentsOutput: typeof import("./getApplicationAgents").getApplicationAgentsOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationAgents","getApplicationAgentsOutput"], () => require("./getApplicationAgents"));

export { GetApplicationSpaceArgs, GetApplicationSpaceResult, GetApplicationSpaceOutputArgs } from "./getApplicationSpace";
export const getApplicationSpace: typeof import("./getApplicationSpace").getApplicationSpace = null as any;
export const getApplicationSpaceOutput: typeof import("./getApplicationSpace").getApplicationSpaceOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationSpace","getApplicationSpaceOutput"], () => require("./getApplicationSpace"));

export { GetApplicationSpacesArgs, GetApplicationSpacesResult, GetApplicationSpacesOutputArgs } from "./getApplicationSpaces";
export const getApplicationSpaces: typeof import("./getApplicationSpaces").getApplicationSpaces = null as any;
export const getApplicationSpacesOutput: typeof import("./getApplicationSpaces").getApplicationSpacesOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationSpaces","getApplicationSpacesOutput"], () => require("./getApplicationSpaces"));

export { GetApplicationsArgs, GetApplicationsResult, GetApplicationsOutputArgs } from "./getApplications";
export const getApplications: typeof import("./getApplications").getApplications = null as any;
export const getApplicationsOutput: typeof import("./getApplications").getApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getApplications","getApplicationsOutput"], () => require("./getApplications"));

export { GetCustomerArgs, GetCustomerResult, GetCustomerOutputArgs } from "./getCustomer";
export const getCustomer: typeof import("./getCustomer").getCustomer = null as any;
export const getCustomerOutput: typeof import("./getCustomer").getCustomerOutput = null as any;
utilities.lazyLoad(exports, ["getCustomer","getCustomerOutput"], () => require("./getCustomer"));

export { IngestPipelineArgs, IngestPipelineState } from "./ingestPipeline";
export type IngestPipeline = import("./ingestPipeline").IngestPipeline;
export const IngestPipeline: typeof import("./ingestPipeline").IngestPipeline = null as any;
utilities.lazyLoad(exports, ["IngestPipeline"], () => require("./ingestPipeline"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { TokenIntrospectArgs, TokenIntrospectState } from "./tokenIntrospect";
export type TokenIntrospect = import("./tokenIntrospect").TokenIntrospect;
export const TokenIntrospect: typeof import("./tokenIntrospect").TokenIntrospect = null as any;
utilities.lazyLoad(exports, ["TokenIntrospect"], () => require("./tokenIntrospect"));


// Export sub-modules:
import * as types from "./types";

export {
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "indykite:index/application:Application":
                return new Application(name, <any>undefined, { urn })
            case "indykite:index/applicationAgent:ApplicationAgent":
                return new ApplicationAgent(name, <any>undefined, { urn })
            case "indykite:index/applicationAgentCredential:ApplicationAgentCredential":
                return new ApplicationAgentCredential(name, <any>undefined, { urn })
            case "indykite:index/applicationSpace:ApplicationSpace":
                return new ApplicationSpace(name, <any>undefined, { urn })
            case "indykite:index/auditSink:AuditSink":
                return new AuditSink(name, <any>undefined, { urn })
            case "indykite:index/authorizationPolicy:AuthorizationPolicy":
                return new AuthorizationPolicy(name, <any>undefined, { urn })
            case "indykite:index/consent:Consent":
                return new Consent(name, <any>undefined, { urn })
            case "indykite:index/ingestPipeline:IngestPipeline":
                return new IngestPipeline(name, <any>undefined, { urn })
            case "indykite:index/tokenIntrospect:TokenIntrospect":
                return new TokenIntrospect(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("indykite", "index/application", _module)
pulumi.runtime.registerResourceModule("indykite", "index/applicationAgent", _module)
pulumi.runtime.registerResourceModule("indykite", "index/applicationAgentCredential", _module)
pulumi.runtime.registerResourceModule("indykite", "index/applicationSpace", _module)
pulumi.runtime.registerResourceModule("indykite", "index/auditSink", _module)
pulumi.runtime.registerResourceModule("indykite", "index/authorizationPolicy", _module)
pulumi.runtime.registerResourceModule("indykite", "index/consent", _module)
pulumi.runtime.registerResourceModule("indykite", "index/ingestPipeline", _module)
pulumi.runtime.registerResourceModule("indykite", "index/tokenIntrospect", _module)
pulumi.runtime.registerResourcePackage("indykite", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:indykite") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
