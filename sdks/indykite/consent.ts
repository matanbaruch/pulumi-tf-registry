// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Consent extends pulumi.CustomResource {
    /**
     * Get an existing Consent resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConsentState, opts?: pulumi.CustomResourceOptions): Consent {
        return new Consent(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'indykite:index/consent:Consent';

    /**
     * Returns true if the given object is an instance of Consent.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Consent {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Consent.__pulumiType;
    }

    /**
     * identifier of Application Space
     */
    public /*out*/ readonly appSpaceId!: pulumi.Output<string>;
    /**
     * identifier of Application
     */
    public readonly applicationId!: pulumi.Output<string>;
    /**
     * Timestamp when the Resource was created. Assigned by the server. A timestamp in RFC3339 UTC "Zulu" format, accurate to
     * nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * identifier of Customer
     */
    public /*out*/ readonly customerId!: pulumi.Output<string>;
    /**
     * Data points is a list of properties related to the Digital twin that the consent is for
     */
    public readonly dataPoints!: pulumi.Output<string[]>;
    /**
     * Your own description of resource. Must be less than or equal to 256 UTF-8 bytes.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The display name for the instance. Can be updated without creating a new resource.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * identifier of Location, where to create resource
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Unique client assigned immutable identifier. Can not be updated without creating a new resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Purpose of the consent
     */
    public readonly purpose!: pulumi.Output<string>;
    /**
     * If set to true, the consent will be revoked after it is used once
     */
    public readonly revokeAfterUse!: pulumi.Output<boolean | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ConsentTimeouts | undefined>;
    /**
     * Timestamp when the Resource was last updated. Assigned by the server. A timestamp in RFC3339 UTC "Zulu" format, accurate
     * to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * Specifies the duration in second that the consent remains valid, ranging from 1 day to 2 years
     */
    public readonly validityPeriod!: pulumi.Output<number>;

    /**
     * Create a Consent resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConsentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConsentArgs | ConsentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConsentState | undefined;
            resourceInputs["appSpaceId"] = state ? state.appSpaceId : undefined;
            resourceInputs["applicationId"] = state ? state.applicationId : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["customerId"] = state ? state.customerId : undefined;
            resourceInputs["dataPoints"] = state ? state.dataPoints : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["purpose"] = state ? state.purpose : undefined;
            resourceInputs["revokeAfterUse"] = state ? state.revokeAfterUse : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["validityPeriod"] = state ? state.validityPeriod : undefined;
        } else {
            const args = argsOrState as ConsentArgs | undefined;
            if ((!args || args.applicationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationId'");
            }
            if ((!args || args.dataPoints === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataPoints'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            if ((!args || args.purpose === undefined) && !opts.urn) {
                throw new Error("Missing required property 'purpose'");
            }
            if ((!args || args.validityPeriod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'validityPeriod'");
            }
            resourceInputs["applicationId"] = args ? args.applicationId : undefined;
            resourceInputs["dataPoints"] = args ? args.dataPoints : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["purpose"] = args ? args.purpose : undefined;
            resourceInputs["revokeAfterUse"] = args ? args.revokeAfterUse : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["validityPeriod"] = args ? args.validityPeriod : undefined;
            resourceInputs["appSpaceId"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["customerId"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Consent.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Consent resources.
 */
export interface ConsentState {
    /**
     * identifier of Application Space
     */
    appSpaceId?: pulumi.Input<string>;
    /**
     * identifier of Application
     */
    applicationId?: pulumi.Input<string>;
    /**
     * Timestamp when the Resource was created. Assigned by the server. A timestamp in RFC3339 UTC "Zulu" format, accurate to
     * nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
     */
    createTime?: pulumi.Input<string>;
    /**
     * identifier of Customer
     */
    customerId?: pulumi.Input<string>;
    /**
     * Data points is a list of properties related to the Digital twin that the consent is for
     */
    dataPoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Your own description of resource. Must be less than or equal to 256 UTF-8 bytes.
     */
    description?: pulumi.Input<string>;
    /**
     * The display name for the instance. Can be updated without creating a new resource.
     */
    displayName?: pulumi.Input<string>;
    /**
     * identifier of Location, where to create resource
     */
    location?: pulumi.Input<string>;
    /**
     * Unique client assigned immutable identifier. Can not be updated without creating a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Purpose of the consent
     */
    purpose?: pulumi.Input<string>;
    /**
     * If set to true, the consent will be revoked after it is used once
     */
    revokeAfterUse?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.ConsentTimeouts>;
    /**
     * Timestamp when the Resource was last updated. Assigned by the server. A timestamp in RFC3339 UTC "Zulu" format, accurate
     * to nanoseconds. Example: "2014-10-02T15:01:23.045123456Z".
     */
    updateTime?: pulumi.Input<string>;
    /**
     * Specifies the duration in second that the consent remains valid, ranging from 1 day to 2 years
     */
    validityPeriod?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Consent resource.
 */
export interface ConsentArgs {
    /**
     * identifier of Application
     */
    applicationId: pulumi.Input<string>;
    /**
     * Data points is a list of properties related to the Digital twin that the consent is for
     */
    dataPoints: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Your own description of resource. Must be less than or equal to 256 UTF-8 bytes.
     */
    description?: pulumi.Input<string>;
    /**
     * The display name for the instance. Can be updated without creating a new resource.
     */
    displayName?: pulumi.Input<string>;
    /**
     * identifier of Location, where to create resource
     */
    location: pulumi.Input<string>;
    /**
     * Unique client assigned immutable identifier. Can not be updated without creating a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Purpose of the consent
     */
    purpose: pulumi.Input<string>;
    /**
     * If set to true, the consent will be revoked after it is used once
     */
    revokeAfterUse?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.ConsentTimeouts>;
    /**
     * Specifies the duration in second that the consent remains valid, ranging from 1 day to 2 years
     */
    validityPeriod: pulumi.Input<number>;
}
