// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class InstanceConfig extends pulumi.CustomResource {
    /**
     * Get an existing InstanceConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceConfigState, opts?: pulumi.CustomResourceOptions): InstanceConfig {
        return new InstanceConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'linode:index/instanceConfig:InstanceConfig';

    /**
     * Returns true if the given object is an instance of InstanceConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InstanceConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InstanceConfig.__pulumiType;
    }

    /**
     * If true, the Linode will be booted to running state. If false, the Linode will be shutdown. If undefined, no action will
     * be taken.
     */
    public readonly booted!: pulumi.Output<boolean>;
    /**
     * Optional field for arbitrary User comments on this Config.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * Blocks for device disks in a Linode's configuration profile.
     */
    public readonly device!: pulumi.Output<outputs.InstanceConfigDevice[] | undefined>;
    /**
     * A dictionary of device disks to use as a device map in a Linode's configuration profile.
     *
     * @deprecated Deprecated
     */
    public readonly devices!: pulumi.Output<outputs.InstanceConfigDevices | undefined>;
    /**
     * Helpers enabled when booting to this Linode Config.
     */
    public readonly helpers!: pulumi.Output<outputs.InstanceConfigHelper[] | undefined>;
    /**
     * An array of Network Interfaces to add to this Linode's Configuration Profile.
     */
    public readonly interfaces!: pulumi.Output<outputs.InstanceConfigInterface[] | undefined>;
    /**
     * A Kernel ID to boot a Linode with. Defaults to “linode/latest-64bit”.
     */
    public readonly kernel!: pulumi.Output<string | undefined>;
    /**
     * The Config's label for display purposes only.
     */
    public readonly label!: pulumi.Output<string>;
    /**
     * The ID of the Linode to create this configuration profile under.
     */
    public readonly linodeId!: pulumi.Output<number>;
    /**
     * The memory limit of the Linode.
     */
    public readonly memoryLimit!: pulumi.Output<number>;
    /**
     * The root device to boot. If no value or an invalid value is provided, root device will default to /dev/sda. If the
     * device specified at the root device location is not mounted, the Linode will not boot until a device is mounted.
     */
    public readonly rootDevice!: pulumi.Output<string | undefined>;
    /**
     * Defines the state of your Linode after booting.
     */
    public readonly runLevel!: pulumi.Output<string | undefined>;
    /**
     * Controls the virtualization mode.
     */
    public readonly virtMode!: pulumi.Output<string | undefined>;

    /**
     * Create a InstanceConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceConfigArgs | InstanceConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceConfigState | undefined;
            resourceInputs["booted"] = state ? state.booted : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["devices"] = state ? state.devices : undefined;
            resourceInputs["helpers"] = state ? state.helpers : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["kernel"] = state ? state.kernel : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["linodeId"] = state ? state.linodeId : undefined;
            resourceInputs["memoryLimit"] = state ? state.memoryLimit : undefined;
            resourceInputs["rootDevice"] = state ? state.rootDevice : undefined;
            resourceInputs["runLevel"] = state ? state.runLevel : undefined;
            resourceInputs["virtMode"] = state ? state.virtMode : undefined;
        } else {
            const args = argsOrState as InstanceConfigArgs | undefined;
            if ((!args || args.label === undefined) && !opts.urn) {
                throw new Error("Missing required property 'label'");
            }
            if ((!args || args.linodeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'linodeId'");
            }
            resourceInputs["booted"] = args ? args.booted : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["devices"] = args ? args.devices : undefined;
            resourceInputs["helpers"] = args ? args.helpers : undefined;
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["kernel"] = args ? args.kernel : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["linodeId"] = args ? args.linodeId : undefined;
            resourceInputs["memoryLimit"] = args ? args.memoryLimit : undefined;
            resourceInputs["rootDevice"] = args ? args.rootDevice : undefined;
            resourceInputs["runLevel"] = args ? args.runLevel : undefined;
            resourceInputs["virtMode"] = args ? args.virtMode : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InstanceConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering InstanceConfig resources.
 */
export interface InstanceConfigState {
    /**
     * If true, the Linode will be booted to running state. If false, the Linode will be shutdown. If undefined, no action will
     * be taken.
     */
    booted?: pulumi.Input<boolean>;
    /**
     * Optional field for arbitrary User comments on this Config.
     */
    comments?: pulumi.Input<string>;
    /**
     * Blocks for device disks in a Linode's configuration profile.
     */
    device?: pulumi.Input<pulumi.Input<inputs.InstanceConfigDevice>[]>;
    /**
     * A dictionary of device disks to use as a device map in a Linode's configuration profile.
     *
     * @deprecated Deprecated
     */
    devices?: pulumi.Input<inputs.InstanceConfigDevices>;
    /**
     * Helpers enabled when booting to this Linode Config.
     */
    helpers?: pulumi.Input<pulumi.Input<inputs.InstanceConfigHelper>[]>;
    /**
     * An array of Network Interfaces to add to this Linode's Configuration Profile.
     */
    interfaces?: pulumi.Input<pulumi.Input<inputs.InstanceConfigInterface>[]>;
    /**
     * A Kernel ID to boot a Linode with. Defaults to “linode/latest-64bit”.
     */
    kernel?: pulumi.Input<string>;
    /**
     * The Config's label for display purposes only.
     */
    label?: pulumi.Input<string>;
    /**
     * The ID of the Linode to create this configuration profile under.
     */
    linodeId?: pulumi.Input<number>;
    /**
     * The memory limit of the Linode.
     */
    memoryLimit?: pulumi.Input<number>;
    /**
     * The root device to boot. If no value or an invalid value is provided, root device will default to /dev/sda. If the
     * device specified at the root device location is not mounted, the Linode will not boot until a device is mounted.
     */
    rootDevice?: pulumi.Input<string>;
    /**
     * Defines the state of your Linode after booting.
     */
    runLevel?: pulumi.Input<string>;
    /**
     * Controls the virtualization mode.
     */
    virtMode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InstanceConfig resource.
 */
export interface InstanceConfigArgs {
    /**
     * If true, the Linode will be booted to running state. If false, the Linode will be shutdown. If undefined, no action will
     * be taken.
     */
    booted?: pulumi.Input<boolean>;
    /**
     * Optional field for arbitrary User comments on this Config.
     */
    comments?: pulumi.Input<string>;
    /**
     * Blocks for device disks in a Linode's configuration profile.
     */
    device?: pulumi.Input<pulumi.Input<inputs.InstanceConfigDevice>[]>;
    /**
     * A dictionary of device disks to use as a device map in a Linode's configuration profile.
     *
     * @deprecated Deprecated
     */
    devices?: pulumi.Input<inputs.InstanceConfigDevices>;
    /**
     * Helpers enabled when booting to this Linode Config.
     */
    helpers?: pulumi.Input<pulumi.Input<inputs.InstanceConfigHelper>[]>;
    /**
     * An array of Network Interfaces to add to this Linode's Configuration Profile.
     */
    interfaces?: pulumi.Input<pulumi.Input<inputs.InstanceConfigInterface>[]>;
    /**
     * A Kernel ID to boot a Linode with. Defaults to “linode/latest-64bit”.
     */
    kernel?: pulumi.Input<string>;
    /**
     * The Config's label for display purposes only.
     */
    label: pulumi.Input<string>;
    /**
     * The ID of the Linode to create this configuration profile under.
     */
    linodeId: pulumi.Input<number>;
    /**
     * The memory limit of the Linode.
     */
    memoryLimit?: pulumi.Input<number>;
    /**
     * The root device to boot. If no value or an invalid value is provided, root device will default to /dev/sda. If the
     * device specified at the root device location is not mounted, the Linode will not boot until a device is mounted.
     */
    rootDevice?: pulumi.Input<string>;
    /**
     * Defines the state of your Linode after booting.
     */
    runLevel?: pulumi.Input<string>;
    /**
     * Controls the virtualization mode.
     */
    virtMode?: pulumi.Input<string>;
}
