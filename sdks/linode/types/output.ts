// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface DatabaseMysqlTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabaseMysqlUpdates {
    /**
     * The day to perform maintenance.
     */
    dayOfWeek: string;
    /**
     * The maximum maintenance window time in hours.
     */
    duration: number;
    /**
     * Whether maintenance occurs on a weekly or monthly basis.
     */
    frequency: string;
    /**
     * The hour to begin maintenance based in UTC time.
     */
    hourOfDay: number;
    /**
     * The week of the month to perform monthly frequency updates. Required for monthly frequency updates.
     */
    weekOfMonth?: number;
}

export interface DatabasePostgresqlTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DatabasePostgresqlUpdates {
    /**
     * The day to perform maintenance.
     */
    dayOfWeek: string;
    /**
     * The maximum maintenance window time in hours.
     */
    duration: number;
    /**
     * Whether maintenance occurs on a weekly or monthly basis.
     */
    frequency: string;
    /**
     * The hour to begin maintenance based in UTC time.
     */
    hourOfDay: number;
    /**
     * The week of the month to perform monthly frequency updates. Required for monthly frequency updates.
     */
    weekOfMonth?: number;
}

export interface FirewallDevice {
    entityId: number;
    id: number;
    label: string;
    type: string;
    url: string;
}

export interface FirewallInbound {
    /**
     * Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.
     */
    action: string;
    /**
     * A list of CIDR blocks or 0.0.0.0/0 (to allow all) this rule applies to.
     */
    ipv4s?: string[];
    /**
     * A list of IPv6 addresses or networks this rule applies to.
     */
    ipv6s?: string[];
    /**
     * Used to identify this rule. For display purposes only.
     */
    label: string;
    /**
     * A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
     */
    ports?: string;
    /**
     * The network protocol this rule controls.
     */
    protocol: string;
}

export interface FirewallOutbound {
    /**
     * Controls whether traffic is accepted or dropped by this rule. Overrides the Firewall’s inbound_policy if this is an inbound rule, or the outbound_policy if this is an outbound rule.
     */
    action: string;
    /**
     * A list of CIDR blocks or 0.0.0.0/0 (to allow all) this rule applies to.
     */
    ipv4s?: string[];
    /**
     * A list of IPv6 addresses or networks this rule applies to.
     */
    ipv6s?: string[];
    /**
     * Used to identify this rule. For display purposes only.
     */
    label: string;
    /**
     * A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
     */
    ports?: string;
    /**
     * The network protocol this rule controls.
     */
    protocol: string;
}

export interface GetAccountAvailabilitiesAvailability {
    /**
     * A set of available services for the current account in this region.
     */
    availables: string[];
    /**
     * The region of this availability entry.
     */
    region: string;
    /**
     * A set of unavailable services for the current account in this region.
     */
    unavailables: string[];
}

export interface GetAccountAvailabilitiesFilter {
    /**
     * The type of comparison to use for this filter.
     */
    matchBy?: string;
    /**
     * The name of the attribute to filter on.
     */
    name: string;
    /**
     * The value(s) to be used in the filter.
     */
    values: string[];
}

export interface GetAccountLoginsFilter {
    /**
     * The type of comparison to use for this filter.
     */
    matchBy?: string;
    /**
     * The name of the attribute to filter on.
     */
    name: string;
    /**
     * The value(s) to be used in the filter.
     */
    values: string[];
}

export interface GetAccountLoginsLogin {
    /**
     * The time when the login was initiated.
     */
    datetime: string;
    /**
     * The unique ID of this login object.
     */
    id: number;
    /**
     * The remote IP address that requested the login.
     */
    ip: string;
    /**
     * True if the User that was logged into was a restricted User, false otherwise.
     */
    restricted: boolean;
    /**
     * Whether the login attempt succeeded or failed.
     */
    status: string;
    /**
     * The username of the User that was logged into.
     */
    username: string;
}

export interface GetChildAccountsChildAccount {
    /**
     * When this account was activated.
     */
    activeSince: string;
    /**
     * First line of this Account's billing address.
     */
    address1: string;
    /**
     * Second line of this Account's billing address.
     */
    address2: string;
    /**
     * This Account's balance, in US dollars.
     */
    balance: number;
    /**
     * The capabilities of this account.
     */
    capabilities: string[];
    /**
     * The city for this Account's billing address.
     */
    city: string;
    /**
     * The company name associated with this Account.
     */
    company: string;
    /**
     * The two-letter country code of this Account's billing address.
     */
    country: string;
    /**
     * The email address for this Account, for account management communications, and may be used for other communications as configured.
     */
    email: string;
    /**
     * The unique ID of this Account.
     */
    euuid: string;
    /**
     * The first name of the person associated with this Account.
     */
    firstName: string;
    /**
     * The Email of the Account.
     */
    id: string;
    /**
     * The last name of the person associated with this Account.
     */
    lastName: string;
    /**
     * The phone number associated with this Account.
     */
    phone: string;
    /**
     * If billing address is in the United States, this is the State portion of the Account's billing address. If the address is outside the US, this is the Province associated with the Account's billing address.
     */
    state: string;
    /**
     * The zip code of this Account's billing address.
     */
    zip: string;
}

export interface GetChildAccountsFilter {
    /**
     * The type of comparison to use for this filter.
     */
    matchBy?: string;
    /**
     * The name of the attribute to filter on.
     */
    name: string;
    /**
     * The value(s) to be used in the filter.
     */
    values: string[];
}

export interface GetDatabaseBackupsBackup {
    /**
     * A time value given in a combined date and time format that represents when the database backup was created.
     */
    created: string;
    /**
     * The ID of the database backup object.
     */
    id: number;
    /**
     * The database backup’s label, for display purposes only.
     */
    label: string;
    /**
     * The type of database backup, determined by how the backup was created.
     */
    type: string;
}

export interface GetDatabaseBackupsFilter {
    /**
     * The type of comparison to use for this filter.
     */
    matchBy?: string;
    /**
     * The name of the attribute to filter on.
     */
    name: string;
    /**
     * The value(s) to be used in the filter.
     */
    values: string[];
}

export interface GetDatabaseEnginesEngine {
    /**
     * The Managed Database engine type.
     */
    engine: string;
    /**
     * The Managed Database engine ID in engine/version format.
     */
    id: string;
    /**
     * The Managed Database engine version.
     */
    version: string;
}

export interface GetDatabaseEnginesFilter {
    /**
     * The type of comparison to use for this filter.
     */
    matchBy?: string;
    /**
     * The name of the attribute to filter on.
     */
    name: string;
    /**
     * The value(s) to be used in the filter.
     */
    values: string[];
}

export interface GetDatabaseMysqlBackupsBackup {
    created: string;
    id: number;
    label: string;
    type: string;
}

export interface GetDatabaseMysqlBackupsFilter {
    /**
     * The type of comparison to use for this filter.
     */
    matchBy?: string;
    /**
     * The name of the attribute to filter on.
     */
    name: string;
    /**
     * The value(s) to be used in the filter.
     */
    values: string[];
}

export interface GetDatabaseMysqlUpdate {
    dayOfWeek: string;
    duration: number;
    frequency: string;
    hourOfDay: number;
    weekOfMonth: number;
}

export interface GetDatabasePostgresqlUpdate {
    dayOfWeek: string;
    duration: number;
    frequency: string;
    hourOfDay: number;
    weekOfMonth: number;
}

export interface GetDatabasesDatabase {
    /**
     * A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.
     */
    allowLists: string[];
    /**
     * The number of Linode Instance nodes deployed to the Managed Database.
     */
    clusterSize: number;
    /**
     * When this Managed Database was created.
     */
    created: string;
    /**
     * Whether the Managed Databases is encrypted.
     */
    encrypted: boolean;
    /**
     * The Managed Database engine type.
     */
    engine: string;
    /**
     * The primary host for the Managed Database.
     */
    hostPrimary: string;
    /**
     * The secondary/private host for the Managed Database.
     */
    hostSecondary: string;
    /**
     * A unique ID that can be used to identify and reference the Managed Database.
     */
    id: number;
    /**
     * he API route for the database instance.
     */
    instanceUri: string;
    /**
     * A unique, user-defined string referring to the Managed Database.
     */
    label: string;
    /**
     * The Region ID for the Managed Database.
     */
    region: string;
    /**
     * The replication method used for the Managed Database.
     */
    replicationType: string;
    /**
     * Whether to require SSL credentials to establish a connection to the Managed Database.
     */
    sslConnection: boolean;
    /**
     * The operating status of the Managed Database.
     */
    status: string;
    /**
     * The Linode Instance type used by the Managed Database for its nodes.
     */
    type: string;
    /**
     * When this Managed Database was last updated.
     */
    updated: string;
    /**
     * The Managed Database engine version.
     */
    version: string;
}

export interface GetDatabasesFilter {
    /**
     * The type of comparison to use for this filter.
     */
    matchBy?: string;
    /**
     * The name of the attribute to filter on.
     */
    name: string;
    /**
     * The value(s) to be used in the filter.
     */
    values: string[];
}

export interface GetDomainsDomain {
    /**
     * The list of IPs that may perform a zone transfer for this Domain. This is potentially dangerous, and should be set to an empty list unless you intend to use it.
     */
    axfrIps: string[];
    /**
     * A description for this Domain. This is for display purposes only.
     */
    description: string;
    /**
     * The domain this Domain represents. These must be unique in our system; you cannot have two Domains representing the same domain.
     */
    domain?: string;
    /**
     * The amount of time in seconds that may pass before this Domain is no longer Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.
     */
    expireSec: number;
    /**
     * The group this Domain belongs to. This is for display purposes only.
     */
    group: string;
    /**
     * The Domain's unique ID.
     */
    id?: number;
    /**
     * The IP addresses representing the master DNS for this Domain.
     */
    masterIps: string[];
    /**
     * The amount of time in seconds before this Domain should be refreshed. Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.
     */
    refreshSec: number;
    /**
     * The interval, in seconds, at which a failed refresh should be retried. Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.
     */
    retrySec: number;
    /**
     * Start of Authority email address. This is required for master Domains.
     */
    soaEmail: string;
    /**
     * Used to control whether this Domain is currently being rendered.
     */
    status: string;
    /**
     * An array of tags applied to this object. Tags are for organizational purposes only.
     */
    tags: string[];
    /**
     * 'Time to Live' - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers. Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200 - any other value will be rounded to the nearest valid value.
     */
    ttlSec: number;
    /**
     * If this Domain represents the authoritative source of information for the domain it describes, or if it is a read-only copy of a master (also called a slave).
     */
    type: string;
}

export interface GetDomainsFilter {
    /**
     * The type of comparison to use for this filter.
     */
    matchBy?: string;
    /**
     * The name of the attribute to filter on.
     */
    name: string;
    /**
     * The value(s) to be used in the filter.
     */
    values: string[];
}

export interface GetFirewallDevice {
    entityId: number;
    id: number;
    label: string;
    type: string;
    url: string;
}

export interface GetFirewallInbound {
    action: string;
    ipv4s: string[];
    ipv6s: string[];
    label: string;
    ports: string;
    protocol: string;
}

export interface GetFirewallOutbound {
    action: string;
    ipv4s: string[];
    ipv6s: string[];
    label: string;
    ports: string;
    protocol: string;
}

export interface GetFirewallsFilter {
    /**
     * The type of comparison to use for this filter.
     */
    matchBy?: string;
    /**
     * The name of the attribute to filter on.
     */
    name: string;
    /**
     * The value(s) to be used in the filter.
     */
    values: string[];
}

export interface GetFirewallsFirewall {
    /**
     * When this Firewall was created.
     */
    created: string;
    /**
     * The devices associated with this firewall.
     */
    devices?: outputs.GetFirewallsFirewallDevice[];
    /**
     * If true, the Firewall is inactive.
     */
    disabled: boolean;
    /**
     * The unique ID assigned to this Firewall.
     */
    id: number;
    /**
     * The default behavior for inbound traffic.
     */
    inboundPolicy: string;
    /**
     * A set of firewall rules that specify what inbound network traffic is allowed.
     */
    inbounds?: outputs.GetFirewallsFirewallInbound[];
    /**
     * The label for the Firewall. For display purposes only. If no label is provided, a default will be assigned.
     */
    label: string;
    /**
     * The IDs of Linodes assigned to this Firewall.
     */
    linodes: number[];
    /**
     * The IDs of NodeBalancers assigned to this Firewall..
     */
    nodebalancers: number[];
    /**
     * The default behavior for outbound traffic.
     */
    outboundPolicy: string;
    /**
     * A set of firewall rules that specify what outbound network traffic is allowed.
     */
    outbounds?: outputs.GetFirewallsFirewallOutbound[];
    /**
     * The status of the firewall.
     */
    status: string;
    /**
     * An array of tags applied to this object. Tags are for organizational purposes only.
     */
    tags: string[];
    /**
     * When this Firewall was last updated.
     */
    updated: string;
}

export interface GetFirewallsFirewallDevice {
    /**
     * The ID of the underlying entity this device references (i.e. the Linode's ID).
     */
    entityId: number;
    /**
     * The unique ID of the Firewall Device.
     */
    id: number;
    /**
     * The label of the underlying entity this device references.
     */
    label: string;
    /**
     * The type of Firewall Device.
     */
    type: string;
    /**
     * The URL of the underlying entity this device references.
     */
    url: string;
}

export interface GetFirewallsFirewallInbound {
    /**
     * Controls whether traffic is accepted or dropped by this rule (ACCEPT, DROP).
     */
    action: string;
    /**
     * A list of IPv4 addresses or networks in IP/mask format.
     */
    ipv4s: string[];
    /**
     * A list of IPv6 addresses or networks in IP/mask format.
     */
    ipv6s: string[];
    /**
     * The label of this rule for display purposes only.
     */
    label: string;
    /**
     * A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
     */
    ports: string;
    /**
     * The network protocol this rule controls. (TCP, UDP, ICMP)
     */
    protocol: string;
}

export interface GetFirewallsFirewallOutbound {
    /**
     * Controls whether traffic is accepted or dropped by this rule (ACCEPT, DROP).
     */
    action: string;
    /**
     * A list of IPv4 addresses or networks in IP/mask format.
     */
    ipv4s: string[];
    /**
     * A list of IPv6 addresses or networks in IP/mask format.
     */
    ipv6s: string[];
    /**
     * The label of this rule for display purposes only.
     */
    label: string;
    /**
     * A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
     */
    ports: string;
    /**
     * The network protocol this rule controls. (TCP, UDP, ICMP)
     */
    protocol: string;
}

export interface GetImageReplication {
    /**
     * The region of an image replica.
     */
    region: string;
    /**
     * The status of an image replica.
     */
    status: string;
}

export interface GetImagesFilter {
    /**
     * The type of comparison to use for this filter.
     */
    matchBy?: string;
    /**
     * The name of the attribute to filter on.
     */
    name: string;
    /**
     * The value(s) to be used in the filter.
     */
    values: string[];
}

export interface GetImagesImage {
    /**
     * The capabilities of this Image.
     */
    capabilities: string[];
    /**
     * When this Image was created.
     */
    created: string;
    /**
     * The name of the User who created this Image.
     */
    createdBy: string;
    /**
     * Whether or not this Image is deprecated. Will only be True for deprecated public Images.
     */
    deprecated: boolean;
    /**
     * A detailed description of this Image.
     */
    description: string;
    /**
     * Only Images created automatically (from a deleted Linode; type=automatic) will expire.
     */
    expiry: string;
    /**
     * The unique ID assigned to this Image.
     */
    id: string;
    /**
     * True if the Image is public.
     */
    isPublic: boolean;
    /**
     * A short description of the Image. Labels cannot contain special characters.
     */
    label: string;
    /**
     * A list of image replications region and corresponding status.
     */
    replications?: outputs.GetImagesImageReplication[];
    /**
     * The minimum size this Image needs to deploy. Size is in MB.
     */
    size: number;
    /**
     * The current status of this Image.
     */
    status: string;
    /**
     * The customized tags for the image.
     */
    tags: string[];
    /**
     * The total size of the image in all available regions.
     */
    totalSize: number;
    /**
     * How the Image was created. 'Manual' Images can be created at any time. 'Automatic' images are created automatically from a deleted Linode.
     */
    type: string;
    /**
     * The upstream distribution vendor. Nil for private Images.
     */
    vendor: string;
}

export interface GetImagesImageReplication {
    /**
     * The region of an image replica.
     */
    region: string;
    /**
     * The status of an image replica.
     */
    status: string;
}

export interface GetInstanceBackupsAutomatic {
    available: boolean;
    configs: string[];
    created: string;
    disks: outputs.GetInstanceBackupsAutomaticDisk[];
    finished: string;
    id: number;
    label: string;
    status: string;
    type: string;
    updated: string;
}

export interface GetInstanceBackupsAutomaticDisk {
    filesystem: string;
    label: string;
    size: number;
}

export interface GetInstanceBackupsCurrent {
    available: boolean;
    configs: string[];
    created: string;
    disks: outputs.GetInstanceBackupsCurrentDisk[];
    finished: string;
    id: number;
    label: string;
    status: string;
    type: string;
    updated: string;
}

export interface GetInstanceBackupsCurrentDisk {
    filesystem: string;
    label: string;
    size: number;
}

export interface GetInstanceBackupsInProgress {
    available: boolean;
    configs: string[];
    created: string;
    disks: outputs.GetInstanceBackupsInProgressDisk[];
    finished: string;
    id: number;
    label: string;
    status: string;
    type: string;
    updated: string;
}

export interface GetInstanceBackupsInProgressDisk {
    filesystem: string;
    label: string;
    size: number;
}

export interface GetInstanceNetworkingIpv4 {
    privates: outputs.GetInstanceNetworkingIpv4Private[];
    publics: outputs.GetInstanceNetworkingIpv4Public[];
    reserveds: outputs.GetInstanceNetworkingIpv4Reserved[];
    shareds: outputs.GetInstanceNetworkingIpv4Shared[];
    vpcs: outputs.GetInstanceNetworkingIpv4Vpc[];
}

export interface GetInstanceNetworkingIpv4Private {
    address: string;
    gateway: string;
    linodeId: number;
    prefix: number;
    public: boolean;
    rdns: string;
    region: string;
    subnetMask: string;
    type: string;
    vpcNat11: outputs.GetInstanceNetworkingIpv4PrivateVpcNat11;
}

export interface GetInstanceNetworkingIpv4PrivateVpcNat11 {
    address: string;
    subnetId: number;
    vpcId: number;
}

export interface GetInstanceNetworkingIpv4Public {
    address: string;
    gateway: string;
    linodeId: number;
    prefix: number;
    public: boolean;
    rdns: string;
    region: string;
    subnetMask: string;
    type: string;
    vpcNat11: outputs.GetInstanceNetworkingIpv4PublicVpcNat11;
}

export interface GetInstanceNetworkingIpv4PublicVpcNat11 {
    address: string;
    subnetId: number;
    vpcId: number;
}

export interface GetInstanceNetworkingIpv4Reserved {
    address: string;
    gateway: string;
    linodeId: number;
    prefix: number;
    public: boolean;
    rdns: string;
    region: string;
    subnetMask: string;
    type: string;
    vpcNat11: outputs.GetInstanceNetworkingIpv4ReservedVpcNat11;
}

export interface GetInstanceNetworkingIpv4ReservedVpcNat11 {
    address: string;
    subnetId: number;
    vpcId: number;
}

export interface GetInstanceNetworkingIpv4Shared {
    address: string;
    gateway: string;
    linodeId: number;
    prefix: number;
    public: boolean;
    rdns: string;
    region: string;
    subnetMask: string;
    type: string;
    vpcNat11: outputs.GetInstanceNetworkingIpv4SharedVpcNat11;
}

export interface GetInstanceNetworkingIpv4SharedVpcNat11 {
    address: string;
    subnetId: number;
    vpcId: number;
}

export interface GetInstanceNetworkingIpv4Vpc {
    active: boolean;
    address: string;
    addressRange: string;
    configId: number;
    gateway: string;
    interfaceId: number;
    linodeId: number;
    nat11: string;
    prefix: number;
    region: string;
    subnetId: number;
    subnetMask: string;
    vpcId: number;
}

export interface GetInstanceNetworkingIpv6 {
    globals: outputs.GetInstanceNetworkingIpv6Global[];
    linkLocal: outputs.GetInstanceNetworkingIpv6LinkLocal;
    slaac: outputs.GetInstanceNetworkingIpv6Slaac;
}

export interface GetInstanceNetworkingIpv6Global {
    prefix: number;
    range: string;
    region: string;
    routeTarget: string;
}

export interface GetInstanceNetworkingIpv6LinkLocal {
    address: string;
    gateway: string;
    linodeId: number;
    prefix: number;
    public: boolean;
    rdns: string;
    region: string;
    subnetMask: string;
    type: string;
    vpcNat11: outputs.GetInstanceNetworkingIpv6LinkLocalVpcNat11;
}

export interface GetInstanceNetworkingIpv6LinkLocalVpcNat11 {
    address: string;
    subnetId: number;
    vpcId: number;
}

export interface GetInstanceNetworkingIpv6Slaac {
    address: string;
    gateway: string;
    linodeId: number;
    prefix: number;
    public: boolean;
    rdns: string;
    region: string;
    subnetMask: string;
    type: string;
    vpcNat11: outputs.GetInstanceNetworkingIpv6SlaacVpcNat11;
}

export interface GetInstanceNetworkingIpv6SlaacVpcNat11 {
    address: string;
    subnetId: number;
    vpcId: number;
}

export interface GetInstanceTypeAddon {
    backups: outputs.GetInstanceTypeAddonBackup[];
}

export interface GetInstanceTypeAddonBackup {
    prices: outputs.GetInstanceTypeAddonBackupPrice[];
    regionPrices: outputs.GetInstanceTypeAddonBackupRegionPrice[];
}

export interface GetInstanceTypeAddonBackupPrice {
    hourly: number;
    monthly: number;
}

export interface GetInstanceTypeAddonBackupRegionPrice {
    hourly: number;
    id: string;
    monthly: number;
}

export interface GetInstanceTypePrice {
    hourly: number;
    monthly: number;
}

export interface GetInstanceTypeRegionPrice {
    hourly: number;
    id: string;
    monthly: number;
}

export interface GetInstanceTypesFilter {
    /**
     * The type of comparison to use for this filter.
     */
    matchBy?: string;
    /**
     * The name of the attribute to filter on.
     */
    name: string;
    /**
     * The value(s) to be used in the filter.
     */
    values: string[];
}

export interface GetInstanceTypesType {
    /**
     * Information about the optional Backup service offered for Linodes.
     */
    addons: outputs.GetInstanceTypesTypeAddon[];
    /**
     * The class of the Linode Type. There are currently three classes of Linodes: nanode, standard, highmem, dedicated
     */
    class: string;
    /**
     * The Disk size, in MB, of the Linode Type.
     */
    disk: number;
    /**
     * The unique ID assigned to this Instance type.
     */
    id: string;
    /**
     * The Linode Type's label is for display purposes only.
     */
    label: string;
    /**
     * Amount of RAM included in this Linode Type.
     */
    memory: number;
    /**
     * The Mbits outbound bandwidth allocation.
     */
    networkOut: number;
    /**
     * Cost in US dollars, broken down into hourly and monthly charges.
     */
    prices: outputs.GetInstanceTypesTypePrice[];
    /**
     * A list of region-specific prices for this plan.
     */
    regionPrices: outputs.GetInstanceTypesTypeRegionPrice[];
    /**
     * The monthly outbound transfer amount, in MB.
     */
    transfer: number;
    /**
     * The number of VCPU cores this Linode Type offers.
     */
    vcpus: number;
}

export interface GetInstanceTypesTypeAddon {
    backups: outputs.GetInstanceTypesTypeAddonBackup[];
}

export interface GetInstanceTypesTypeAddonBackup {
    prices: outputs.GetInstanceTypesTypeAddonBackupPrice[];
    regionPrices: outputs.GetInstanceTypesTypeAddonBackupRegionPrice[];
}

export interface GetInstanceTypesTypeAddonBackupPrice {
    hourly: number;
    monthly: number;
}

export interface GetInstanceTypesTypeAddonBackupRegionPrice {
    hourly: number;
    id: string;
    monthly: number;
}

export interface GetInstanceTypesTypePrice {
    hourly: number;
    monthly: number;
}

export interface GetInstanceTypesTypeRegionPrice {
    hourly: number;
    id: string;
    monthly: number;
}

export interface GetInstancesFilter {
    /**
     * The type of comparison to use for this filter.
     */
    matchBy?: string;
    /**
     * The name of the attribute to filter on.
     */
    name: string;
    /**
     * The value(s) to be used in the filter.
     */
    values: string[];
}

export interface GetInstancesInstance {
    alerts: outputs.GetInstancesInstanceAlert[];
    backups: outputs.GetInstancesInstanceBackup[];
    bootConfigLabel: string;
    configs: outputs.GetInstancesInstanceConfig[];
    disks: outputs.GetInstancesInstanceDisk[];
    group: string;
    hasUserData: boolean;
    hostUuid: string;
    id: number;
    image: string;
    ipAddress: string;
    ipv4s: string[];
    ipv6: string;
    label: string;
    placementGroups: outputs.GetInstancesInstancePlacementGroup[];
    privateIpAddress: string;
    region: string;
    specs: outputs.GetInstancesInstanceSpec[];
    status: string;
    swapSize: number;
    tags: string[];
    type: string;
    watchdogEnabled: boolean;
}

export interface GetInstancesInstanceAlert {
    cpu: number;
    io: number;
    networkIn: number;
    networkOut: number;
    transferQuota: number;
}

export interface GetInstancesInstanceBackup {
    available: boolean;
    enabled: boolean;
    schedules: outputs.GetInstancesInstanceBackupSchedule[];
}

export interface GetInstancesInstanceBackupSchedule {
    day: string;
    window: string;
}

export interface GetInstancesInstanceConfig {
    comments: string;
    devices: outputs.GetInstancesInstanceConfigDevice[];
    helpers: outputs.GetInstancesInstanceConfigHelper[];
    id: number;
    interfaces: outputs.GetInstancesInstanceConfigInterface[];
    kernel: string;
    label: string;
    memoryLimit: number;
    rootDevice: string;
    runLevel: string;
    virtMode: string;
}

export interface GetInstancesInstanceConfigDevice {
    sdas: outputs.GetInstancesInstanceConfigDeviceSda[];
    sdbs: outputs.GetInstancesInstanceConfigDeviceSdb[];
    sdcs: outputs.GetInstancesInstanceConfigDeviceSdc[];
    sdds: outputs.GetInstancesInstanceConfigDeviceSdd[];
    sdes: outputs.GetInstancesInstanceConfigDeviceSde[];
    sdfs: outputs.GetInstancesInstanceConfigDeviceSdf[];
    sdgs: outputs.GetInstancesInstanceConfigDeviceSdg[];
    sdhs: outputs.GetInstancesInstanceConfigDeviceSdh[];
}

export interface GetInstancesInstanceConfigDeviceSda {
    diskId: number;
    diskLabel: string;
    volumeId: number;
}

export interface GetInstancesInstanceConfigDeviceSdb {
    diskId: number;
    diskLabel: string;
    volumeId: number;
}

export interface GetInstancesInstanceConfigDeviceSdc {
    diskId: number;
    diskLabel: string;
    volumeId: number;
}

export interface GetInstancesInstanceConfigDeviceSdd {
    diskId: number;
    diskLabel: string;
    volumeId: number;
}

export interface GetInstancesInstanceConfigDeviceSde {
    diskId: number;
    diskLabel: string;
    volumeId: number;
}

export interface GetInstancesInstanceConfigDeviceSdf {
    diskId: number;
    diskLabel: string;
    volumeId: number;
}

export interface GetInstancesInstanceConfigDeviceSdg {
    diskId: number;
    diskLabel: string;
    volumeId: number;
}

export interface GetInstancesInstanceConfigDeviceSdh {
    diskId: number;
    diskLabel: string;
    volumeId: number;
}

export interface GetInstancesInstanceConfigHelper {
    devtmpfsAutomount: boolean;
    distro: boolean;
    modulesDep: boolean;
    network: boolean;
    updatedbDisabled: boolean;
}

export interface GetInstancesInstanceConfigInterface {
    active: boolean;
    id: number;
    ipRanges: string[];
    ipamAddress: string;
    ipv4s: outputs.GetInstancesInstanceConfigInterfaceIpv4[];
    label: string;
    primary: boolean;
    purpose: string;
    subnetId: number;
    vpcId: number;
}

export interface GetInstancesInstanceConfigInterfaceIpv4 {
    nat11: string;
    vpc: string;
}

export interface GetInstancesInstanceDisk {
    filesystem: string;
    id: number;
    label: string;
    size: number;
}

export interface GetInstancesInstancePlacementGroup {
    id: number;
    label: string;
    placementGroupPolicy: string;
    placementGroupType: string;
}

export interface GetInstancesInstanceSpec {
    disk: number;
    memory: number;
    transfer: number;
    vcpus: number;
}

export interface GetIpv6RangesFilter {
    /**
     * The type of comparison to use for this filter.
     */
    matchBy?: string;
    /**
     * The name of the attribute to filter on.
     */
    name: string;
    /**
     * The value(s) to be used in the filter.
     */
    values: string[];
}

export interface GetIpv6RangesRange {
    /**
     * The prefix length of the address, denoting how many addresses can be assigned from this range.
     */
    prefix: number;
    /**
     * The IPv6 address of this range.
     */
    range: string;
    /**
     * The region for this range of IPv6 addresses.
     */
    region: string;
    /**
     * The IPv6 SLAAC address.
     */
    routeTarget: string;
}

export interface GetKernelsFilter {
    /**
     * The type of comparison to use for this filter.
     */
    matchBy?: string;
    /**
     * The name of the attribute to filter on.
     */
    name: string;
    /**
     * The value(s) to be used in the filter.
     */
    values: string[];
}

export interface GetKernelsKernel {
    /**
     * The architecture of this Kernel.
     */
    architecture: string;
    /**
     * The date on which this Kernel was built.
     */
    built: string;
    /**
     * Whether or not this Kernel is deprecated.
     */
    deprecated: boolean;
    /**
     * The unique ID of this Kernel.
     */
    id: string;
    /**
     * If this Kernel is suitable for KVM Linodes.
     */
    kvm: boolean;
    /**
     * The friendly name of this Kernel.
     */
    label: string;
    /**
     * If this Kernel is suitable for paravirtualized operations.
     */
    pvops: boolean;
    /**
     * Linux Kernel version.
     */
    version: string;
    /**
     * If this Kernel is suitable for Xen Linodes.
     */
    xen: boolean;
}

export interface GetLkeClusterControlPlane {
    /**
     * The ACL configuration for an LKE cluster's control plane.
     */
    acls?: outputs.GetLkeClusterControlPlaneAcl[];
    /**
     * Defines whether High Availability is enabled for the Control Plane Components of the cluster.
     */
    highAvailability: boolean;
}

export interface GetLkeClusterControlPlaneAcl {
    /**
     * A list of ip addresses allowed.
     */
    addresses?: outputs.GetLkeClusterControlPlaneAclAddress[];
    /**
     * The default policy. A value of true means a default policy of DENY. A value of false means default policy of ALLOW.
     */
    enabled: boolean;
}

export interface GetLkeClusterControlPlaneAclAddress {
    /**
     * A set of individual ipv4 addresses or CIDRs allowed.
     */
    ipv4s: string[];
    /**
     * A set of individual ipv6 addresses or CIDRs allowed.
     */
    ipv6s: string[];
}

export interface GetLkeClusterPool {
    /**
     * When specified, the number of nodes autoscales within the defined minimum and maximum values.
     */
    autoscalers?: outputs.GetLkeClusterPoolAutoscaler[];
    /**
     * The number of nodes in the Node Pool.
     */
    count: number;
    /**
     * This Node Pool’s custom disk layout.
     */
    disks?: outputs.GetLkeClusterPoolDisk[];
    /**
     * The ID of the Node Pool.
     */
    id: number;
    /**
     * Key-value pairs added as labels to nodes in the node pool. Labels help classify your nodes and to easily select subsets of objects.
     */
    labels: {[key: string]: string};
    /**
     * The nodes in the node pool.
     */
    nodes?: outputs.GetLkeClusterPoolNode[];
    /**
     * An array of tags applied to this object. Tags are for organizational purposes only.
     */
    tags: string[];
    /**
     * Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically allowing them to repel certain pods.
     */
    taints: outputs.GetLkeClusterPoolTaint[];
    /**
     * A Linode Type for all of the nodes in the Node Pool.
     */
    type: string;
}

export interface GetLkeClusterPoolAutoscaler {
    /**
     * Whether autoscaling is enabled for this Node Pool. Defaults to false.
     */
    enabled: boolean;
    /**
     * The maximum number of nodes to autoscale to. Defaults to the Node Pool’s count.
     */
    max: number;
    /**
     * The minimum number of nodes to autoscale to. Defaults to the Node Pool’s count.
     */
    min: number;
}

export interface GetLkeClusterPoolDisk {
    /**
     * The size of this custom disk partition in MB.
     */
    size: number;
    /**
     * This custom disk partition’s filesystem type.
     */
    type: string;
}

export interface GetLkeClusterPoolNode {
    /**
     * The ID of the node.
     */
    id: string;
    /**
     * The ID of the underlying Linode instance.
     */
    instanceId: number;
    /**
     * The status of the node.
     */
    status: string;
}

export interface GetLkeClusterPoolTaint {
    effect: string;
    key: string;
    value: string;
}

export interface GetLkeClustersFilter {
    /**
     * The type of comparison to use for this filter.
     */
    matchBy?: string;
    /**
     * The name of the attribute to filter on.
     */
    name: string;
    /**
     * The value(s) to be used in the filter.
     */
    values: string[];
}

export interface GetLkeClustersLkeCluster {
    /**
     * Defines settings for the Kubernetes Control Plane.
     */
    controlPlane?: outputs.GetLkeClustersLkeClusterControlPlane;
    /**
     * When this Kubernetes cluster was created.
     */
    created: string;
    /**
     * This Kubernetes cluster’s unique ID.
     */
    id: number;
    /**
     * The desired Kubernetes version for this Kubernetes cluster in the format of <major>.<minor>. The latest supported patch version will be deployed.
     */
    k8sVersion: string;
    /**
     * The unique label for the cluster.
     */
    label: string;
    /**
     * This cluster's location.
     */
    region: string;
    /**
     * The status of the cluster.
     */
    status: string;
    /**
     * An array of tags applied to this object. Tags are for organizational purposes only.
     */
    tags: string[];
    /**
     * When this Kubernetes cluster was updated.
     */
    updated: string;
}

export interface GetLkeClustersLkeClusterControlPlane {
    /**
     * Defines whether High Availability is enabled for the Control Plane Components of the cluster.
     */
    highAvailability: boolean;
}

export interface GetLkeVersionsVersion {
    id: string;
}

export interface GetNodebalancerConfigNodeStatus {
    down: number;
    up: number;
}

export interface GetNodebalancerConfigsFilter {
    /**
     * The type of comparison to use for this filter.
     */
    matchBy?: string;
    /**
     * The name of the attribute to filter on.
     */
    name: string;
    /**
     * The value(s) to be used in the filter.
     */
    values: string[];
}

export interface GetNodebalancerConfigsNodebalancerConfig {
    /**
     * What algorithm this NodeBalancer should use for routing traffic to backends: roundrobin, leastconn, source
     */
    algorithm: string;
    /**
     * The type of check to perform against backends to ensure they are serving requests. This is used to determine if backends are up or down. If none no check is performed. connection requires only a connection to the backend to succeed. http and http_body rely on the backend serving HTTP, and that the response returned matches what is expected.
     */
    check: string;
    /**
     * How many times to attempt a check before considering a backend to be down. (1-30)
     */
    checkAttempts: number;
    /**
     * This value must be present in the response body of the check in order for it to pass. If this value is not present in the response body of a check request, the backend is considered to be down
     */
    checkBody: string;
    /**
     * How often, in seconds, to check that backends are up and serving requests.
     */
    checkInterval: number;
    /**
     * If true, any response from this backend with a 5xx status code will be enough for it to be considered unhealthy and taken out of rotation.
     */
    checkPassive: boolean;
    /**
     * The URL path to check on each backend. If the backend does not respond to this request it is considered to be down.
     */
    checkPath: string;
    /**
     * How long, in seconds, to wait for a check attempt before considering it failed. (1-30)
     */
    checkTimeout: number;
    /**
     * What ciphers to use for SSL connections served by this NodeBalancer. `legacy` is considered insecure and should only be used if necessary.
     */
    cipherSuite: string;
    /**
     * The ID of the NodeBalancer config.
     */
    id: number;
    /**
     * A structure containing information about the health of the backends for this port. This information is updated periodically as checks are performed against backends.
     */
    nodeStatuses: outputs.GetNodebalancerConfigsNodebalancerConfigNodeStatus[];
    /**
     * The ID of the NodeBalancer to access.
     */
    nodebalancerId: number;
    /**
     * The TCP port this Config is for. These values must be unique across configs on a single NodeBalancer (you can't have two configs for port 80, for example). While some ports imply some protocols, no enforcement is done and you may configure your NodeBalancer however is useful to you. For example, while port 443 is generally used for HTTPS, you do not need SSL configured to have a NodeBalancer listening on port 443.
     */
    port: number;
    /**
     * The protocol this port is configured to serve. If this is set to https you must include an ssl_cert and an ssl_key.
     */
    protocol: string;
    /**
     * The version of ProxyProtocol to use for the underlying NodeBalancer. This requires protocol to be `tcp`. Valid values are `none`, `v1`, and `v2`.
     */
    proxyProtocol: string;
    /**
     * The read-only common name automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
     */
    sslCommonname: string;
    /**
     * The read-only fingerprint automatically derived from the SSL certificate assigned to this NodeBalancerConfig. Please refer to this field to verify that the appropriate certificate is assigned to your NodeBalancerConfig.
     */
    sslFingerprint: string;
    /**
     * Controls how session stickiness is handled on this port: 'none', 'table', 'http_cookie'
     */
    stickiness: string;
}

export interface GetNodebalancerConfigsNodebalancerConfigNodeStatus {
    down: number;
    up: number;
}

export interface GetNodebalancerFirewall {
    /**
     * When this Firewall was created.
     */
    created: string;
    /**
     * The unique ID assigned to this Firewall.
     */
    id: number;
    /**
     * The default behavior for inbound traffic.
     */
    inboundPolicy: string;
    /**
     * A set of firewall rules that specify what inbound network traffic is allowed.
     */
    inbounds?: outputs.GetNodebalancerFirewallInbound[];
    /**
     * The label for the Firewall. For display purposes only. If no label is provided, a default will be assigned.
     */
    label: string;
    /**
     * The default behavior for outbound traffic.
     */
    outboundPolicy: string;
    /**
     * A set of firewall rules that specify what outbound network traffic is allowed.
     */
    outbounds?: outputs.GetNodebalancerFirewallOutbound[];
    /**
     * The status of the firewall.
     */
    status: string;
    /**
     * An array of tags applied to this object. Tags are for organizational purposes only.
     */
    tags: string[];
    /**
     * When this Firewall was last updated.
     */
    updated: string;
}

export interface GetNodebalancerFirewallInbound {
    /**
     * Controls whether traffic is accepted or dropped by this rule (ACCEPT, DROP).
     */
    action: string;
    /**
     * A list of IPv4 addresses or networks in IP/mask format.
     */
    ipv4s: string[];
    /**
     * A list of IPv6 addresses or networks in IP/mask format.
     */
    ipv6s: string[];
    /**
     * The label of this rule for display purposes only.
     */
    label: string;
    /**
     * A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
     */
    ports: string;
    /**
     * The network protocol this rule controls. (TCP, UDP, ICMP)
     */
    protocol: string;
}

export interface GetNodebalancerFirewallOutbound {
    /**
     * Controls whether traffic is accepted or dropped by this rule (ACCEPT, DROP).
     */
    action: string;
    /**
     * A list of IPv4 addresses or networks in IP/mask format.
     */
    ipv4s: string[];
    /**
     * A list of IPv6 addresses or networks in IP/mask format.
     */
    ipv6s: string[];
    /**
     * The label of this rule for display purposes only.
     */
    label: string;
    /**
     * A string representation of ports and/or port ranges (i.e. "443" or "80-90, 91").
     */
    ports: string;
    /**
     * The network protocol this rule controls. (TCP, UDP, ICMP)
     */
    protocol: string;
}

export interface GetNodebalancerTransfer {
    in: number;
    out: number;
    total: number;
}

export interface GetNodebalancersFilter {
    /**
     * The type of comparison to use for this filter.
     */
    matchBy?: string;
    /**
     * The name of the attribute to filter on.
     */
    name: string;
    /**
     * The value(s) to be used in the filter.
     */
    values: string[];
}

export interface GetNodebalancersNodebalancer {
    /**
     * Throttle connections per second (0-20). Set to 0 (zero) to disable throttling.
     */
    clientConnThrottle: number;
    /**
     * When this NodeBalancer was created.
     */
    created: string;
    /**
     * This NodeBalancer's hostname, ending with .nodebalancer.linode.com
     */
    hostname: string;
    /**
     * The unique ID of the Linode NodeBalancer.
     */
    id: number;
    /**
     * The Public IPv4 Address of this NodeBalancer
     */
    ipv4: string;
    /**
     * The Public IPv6 Address of this NodeBalancer
     */
    ipv6: string;
    /**
     * The label of the Linode NodeBalancer.
     */
    label: string;
    /**
     * The region where this NodeBalancer will be deployed.
     */
    region: string;
    /**
     * An array of tags applied to this object. Tags are for organizational purposes only.
     */
    tags: string[];
    /**
     * Information about the amount of transfer this NodeBalancer has had so far this month.
     */
    transfers: outputs.GetNodebalancersNodebalancerTransfer[];
    /**
     * When this NodeBalancer was last updated.
     */
    updated: string;
}

export interface GetNodebalancersNodebalancerTransfer {
    in: number;
    out: number;
    total: number;
}

export interface GetPlacementGroupMember {
    /**
     * Whether this Linode is currently compliant with the group's placement group type.
     */
    isCompliant: boolean;
    /**
     * The ID of the Linode.
     */
    linodeId: number;
}

export interface GetPlacementGroupsFilter {
    /**
     * The type of comparison to use for this filter.
     */
    matchBy?: string;
    /**
     * The name of the attribute to filter on.
     */
    name: string;
    /**
     * The value(s) to be used in the filter.
     */
    values: string[];
}

export interface GetPlacementGroupsPlacementGroup {
    /**
     * The ID of the placement group.
     */
    id: number;
    /**
     * Whether all Linodes in this group are currently compliant with the group's placement group type.
     */
    isCompliant: boolean;
    /**
     * The label of the placement group.
     */
    label: string;
    /**
     * A list of Linodes assigned to a placement group.
     */
    members?: outputs.GetPlacementGroupsPlacementGroupMember[];
    /**
     * Whether Linodes must be able to become compliant during assignment.
     */
    placementGroupPolicy: string;
    /**
     * The placement group type for Linodes in a placement group
     */
    placementGroupType: string;
    /**
     * The region that the placement group is in.
     */
    region: string;
}

export interface GetPlacementGroupsPlacementGroupMember {
    /**
     * Whether this Linode is currently compliant with the group's placement group type.
     */
    isCompliant: boolean;
    /**
     * The ID of the Linode.
     */
    linodeId: number;
}

export interface GetProfileReferral {
    code: string;
    completed: number;
    credit: number;
    pending: number;
    total: number;
    url: string;
}

export interface GetRegionPlacementGroupLimit {
    maximumLinodesPerPg: number;
    maximumPgsPerCustomer: number;
}

export interface GetRegionResolver {
    /**
     * The IPv4 addresses for this region’s DNS resolvers, separated by commas.
     */
    ipv4: string;
    /**
     * The IPv6 addresses for this region’s DNS resolvers, separated by commas.
     */
    ipv6: string;
}

export interface GetRegionsFilter {
    /**
     * The type of comparison to use for this filter.
     */
    matchBy?: string;
    /**
     * The name of the attribute to filter on.
     */
    name: string;
    /**
     * The value(s) to be used in the filter.
     */
    values: string[];
}

export interface GetRegionsRegion {
    /**
     * A list of capabilities of this region.
     */
    capabilities: string[];
    /**
     * The country where this Region resides.
     */
    country: string;
    /**
     * The unique ID of this Region.
     */
    id: string;
    /**
     * Detailed location information for this Region, including city, state or region, and country.
     */
    label: string;
    /**
     * Information about placement groups limits for this region.
     */
    placementGroupLimits: outputs.GetRegionsRegionPlacementGroupLimit[];
    resolvers?: outputs.GetRegionsRegionResolver[];
    /**
     * The type of this Region.
     */
    siteType: string;
    /**
     * This region’s current operational status.
     */
    status: string;
}

export interface GetRegionsRegionPlacementGroupLimit {
    maximumLinodesPerPg: number;
    maximumPgsPerCustomer: number;
}

export interface GetRegionsRegionResolver {
    /**
     * The IPv4 addresses for this region’s DNS resolvers, separated by commas.
     */
    ipv4: string;
    /**
     * The IPv6 addresses for this region’s DNS resolvers, separated by commas.
     */
    ipv6: string;
}

export interface GetSshkeysFilter {
    /**
     * The type of comparison to use for this filter.
     */
    matchBy?: string;
    /**
     * The name of the attribute to filter on.
     */
    name: string;
    /**
     * The value(s) to be used in the filter.
     */
    values: string[];
}

export interface GetSshkeysSshkey {
    /**
     * The date this key was added.
     */
    created: string;
    /**
     * A unique identifier for this datasource.
     */
    id?: string;
    /**
     * The label of the Linode SSH Key.
     */
    label: string;
    /**
     * The public SSH Key, which is used to authenticate to the root user of the Linodes you deploy.
     */
    sshKey: string;
}

export interface GetStackscriptUserDefinedField {
    default: string;
    example: string;
    label: string;
    manyOf: string;
    name: string;
    oneOf: string;
}

export interface GetStackscriptsFilter {
    /**
     * The type of comparison to use for this filter.
     */
    matchBy?: string;
    /**
     * The name of the attribute to filter on.
     */
    name: string;
    /**
     * The value(s) to be used in the filter.
     */
    values: string[];
}

export interface GetStackscriptsStackscript {
    /**
     * The date this StackScript was created.
     */
    created: string;
    /**
     * Count of currently active, deployed Linodes created from this StackScript.
     */
    deploymentsActive: number;
    /**
     * The total number of times this StackScript has been deployed.
     */
    deploymentsTotal: number;
    /**
     * A description for the StackScript.
     */
    description: string;
    /**
     * The StackScript's unique ID.
     */
    id: string;
    /**
     * An array of Image IDs representing the Images that this StackScript is compatible for deploying with.
     */
    images: string[];
    /**
     * This determines whether other users can use your StackScript. Once a StackScript is made public, it cannot be made private.
     */
    isPublic: boolean;
    /**
     * The StackScript's label is for display purposes only.
     */
    label: string;
    /**
     * This field allows you to add notes for the set of revisions made to this StackScript.
     */
    revNote: string;
    /**
     * The script to execute when provisioning a new Linode with this StackScript.
     */
    script: string;
    /**
     * The date this StackScript was updated.
     */
    updated: string;
    /**
     * This is a list of fields defined with a special syntax inside this StackScript that allow for supplying customized parameters during deployment.
     */
    userDefinedFields: outputs.GetStackscriptsStackscriptUserDefinedField[];
    /**
     * The Gravatar ID for the User who created the StackScript.
     */
    userGravatarId: string;
    /**
     * The User who created the StackScript.
     */
    username: string;
}

export interface GetStackscriptsStackscriptUserDefinedField {
    default: string;
    example: string;
    label: string;
    manyOf: string;
    name: string;
    oneOf: string;
}

export interface GetUserDatabaseGrant {
    id: number;
    label: string;
    permissions: string;
}

export interface GetUserDomainGrant {
    id: number;
    label: string;
    permissions: string;
}

export interface GetUserFirewallGrant {
    id: number;
    label: string;
    permissions: string;
}

export interface GetUserGlobalGrant {
    accountAccess: string;
    addDatabases: boolean;
    addDomains: boolean;
    addFirewalls: boolean;
    addImages: boolean;
    addLinodes: boolean;
    addLongview: boolean;
    addNodebalancers: boolean;
    addStackscripts: boolean;
    addVolumes: boolean;
    cancelAccount: boolean;
    longviewSubscription: boolean;
}

export interface GetUserImageGrant {
    id: number;
    label: string;
    permissions: string;
}

export interface GetUserLinodeGrant {
    id: number;
    label: string;
    permissions: string;
}

export interface GetUserLongviewGrant {
    id: number;
    label: string;
    permissions: string;
}

export interface GetUserNodebalancerGrant {
    id: number;
    label: string;
    permissions: string;
}

export interface GetUserStackscriptGrant {
    id: number;
    label: string;
    permissions: string;
}

export interface GetUserVolumeGrant {
    id: number;
    label: string;
    permissions: string;
}

export interface GetUsersFilter {
    /**
     * The type of comparison to use for this filter.
     */
    matchBy?: string;
    /**
     * The name of the attribute to filter on.
     */
    name: string;
    /**
     * The value(s) to be used in the filter.
     */
    values: string[];
}

export interface GetUsersUser {
    /**
     * A set containing all of the user's active grants.
     */
    databaseGrants: outputs.GetUsersUserDatabaseGrant[];
    /**
     * A set containing all of the user's active grants.
     */
    domainGrants: outputs.GetUsersUserDomainGrant[];
    /**
     * The email address for this User, for account management communications, and may be used for other communications as configured.
     */
    email: string;
    /**
     * A set containing all of the user's active grants.
     */
    firewallGrants: outputs.GetUsersUserFirewallGrant[];
    /**
     * A structure containing the Account-level grants a User has.
     */
    globalGrants: outputs.GetUsersUserGlobalGrant[];
    /**
     * Unique identifier for this DataSource.
     */
    id: string;
    /**
     * A set containing all of the user's active grants.
     */
    imageGrants: outputs.GetUsersUserImageGrant[];
    /**
     * A set containing all of the user's active grants.
     */
    linodeGrants: outputs.GetUsersUserLinodeGrant[];
    /**
     * A set containing all of the user's active grants.
     */
    longviewGrants: outputs.GetUsersUserLongviewGrant[];
    /**
     * A set containing all of the user's active grants.
     */
    nodebalancerGrants: outputs.GetUsersUserNodebalancerGrant[];
    /**
     * The date and time when this User’s current password was created.User passwords are first created during the Account sign-up process, and updated using the Reset Password webpage.null if this User has not created a password yet.
     */
    passwordCreated: string;
    /**
     * If true, this User must be granted access to perform actions or access entities on this Account.
     */
    restricted: boolean;
    /**
     * A list of SSH Key labels added by this User. These are the keys that will be deployed if this User is included in the authorized_users field of a create Linode, rebuild Linode, or create Disk request.
     */
    sshKeys: string[];
    /**
     * A set containing all of the user's active grants.
     */
    stackscriptGrants: outputs.GetUsersUserStackscriptGrant[];
    /**
     * A boolean value indicating if the User has Two Factor Authentication (TFA) enabled.
     */
    tfaEnabled: boolean;
    /**
     * The type of this user.
     */
    userType: string;
    /**
     * This User's username. This is used for logging in, and may also be displayed alongside actions the User performs (for example, in Events or public StackScripts).
     */
    username: string;
    /**
     * The phone number verified for this User Profile with the Phone Number Verify command.null if this User Profile has no verified phone number.
     */
    verifiedPhoneNumber: string;
    /**
     * A set containing all of the user's active grants.
     */
    volumeGrants: outputs.GetUsersUserVolumeGrant[];
}

export interface GetUsersUserDatabaseGrant {
    id: number;
    label: string;
    permissions: string;
}

export interface GetUsersUserDomainGrant {
    id: number;
    label: string;
    permissions: string;
}

export interface GetUsersUserFirewallGrant {
    id: number;
    label: string;
    permissions: string;
}

export interface GetUsersUserGlobalGrant {
    accountAccess: string;
    addDatabases: boolean;
    addDomains: boolean;
    addFirewalls: boolean;
    addImages: boolean;
    addLinodes: boolean;
    addLongview: boolean;
    addNodebalancers: boolean;
    addStackscripts: boolean;
    addVolumes: boolean;
    cancelAccount: boolean;
    longviewSubscription: boolean;
}

export interface GetUsersUserImageGrant {
    id: number;
    label: string;
    permissions: string;
}

export interface GetUsersUserLinodeGrant {
    id: number;
    label: string;
    permissions: string;
}

export interface GetUsersUserLongviewGrant {
    id: number;
    label: string;
    permissions: string;
}

export interface GetUsersUserNodebalancerGrant {
    id: number;
    label: string;
    permissions: string;
}

export interface GetUsersUserStackscriptGrant {
    id: number;
    label: string;
    permissions: string;
}

export interface GetUsersUserVolumeGrant {
    id: number;
    label: string;
    permissions: string;
}

export interface GetVlansFilter {
    /**
     * The type of comparison to use for this filter.
     */
    matchBy?: string;
    /**
     * The name of the attribute to filter on.
     */
    name: string;
    /**
     * The value(s) to be used in the filter.
     */
    values: string[];
}

export interface GetVlansVlan {
    /**
     * When this VLAN was created.
     */
    created: string;
    /**
     * The unique label of this VLAN.
     */
    label: string;
    /**
     * The Linodes currently attached to this VLAN.
     */
    linodes: number[];
    /**
     * The region this VLAN is located in.
     */
    region: string;
}

export interface GetVolumesFilter {
    /**
     * The type of comparison to use for this filter.
     */
    matchBy?: string;
    /**
     * The name of the attribute to filter on.
     */
    name: string;
    /**
     * The value(s) to be used in the filter.
     */
    values: string[];
}

export interface GetVolumesVolume {
    /**
     * Datetime string representing when the Volume was created.
     */
    created: string;
    /**
     * The full filesystem path for the Volume based on the Volume's label. Path is /dev/disk/by-id/scsi-0LinodeVolume + Volume label.
     */
    filesystemPath: string;
    /**
     * The unique id of this Volume.
     */
    id: number;
    /**
     * The Volume's label. For display purposes only.
     */
    label: string;
    /**
     * If a Volume is attached to a specific Linode, the ID of that Linode will be displayed here.
     */
    linodeId: number;
    /**
     * The datacenter where this Volume is located.
     */
    region: string;
    /**
     * The size of this Volume in GiB.
     */
    size: number;
    /**
     * The status of the Volume. Can be one of active | creating | resizing | contact_support
     */
    status: string;
    /**
     * An array of tags applied to this Volume. Tags are for organizational purposes only.
     */
    tags: string[];
    /**
     * Datetime string representing when the Volume was last updated.
     */
    updated: string;
}

export interface GetVpcIpsFilter {
    /**
     * The type of comparison to use for this filter.
     */
    matchBy?: string;
    /**
     * The name of the attribute to filter on.
     */
    name: string;
    /**
     * The value(s) to be used in the filter.
     */
    values: string[];
}

export interface GetVpcIpsVpcIp {
    /**
     * Returns true if the VPC interface is in use, meaning that the Linode was powered on using the config_id to which the interface belongs. Otherwise returns false
     */
    active: boolean;
    /**
     * An IPv4 address configured for this VPC interface. These follow the RFC 1918 private address format. Displayed as null if an address_range.
     */
    address: string;
    /**
     * A range of IPv4 addresses configured for this VPC interface. Displayed as null if a single address.
     */
    addressRange: string;
    /**
     * The globally general entity identifier for the Linode configuration profile where the VPC is included.
     */
    configId: number;
    /**
     * The default gateway for the VPC subnet that the IP or IP range belongs to.
     */
    gateway: string;
    /**
     * The globally general API entity identifier for the Linode interface.
     */
    interfaceId: number;
    /**
     * The identifier for the Linode the VPC interface currently belongs to.
     */
    linodeId: number;
    /**
     * The public IP address used for NAT 1:1 with the VPC. This is empty if NAT 1:1 isn't used.
     */
    nat11: string;
    /**
     * The number of bits set in the subnet_mask.
     */
    prefix: number;
    /**
     * The region of the VPC.
     */
    region: string;
    /**
     * The id of the VPC Subnet for this interface.
     */
    subnetId: number;
    /**
     * The mask that separates host bits from network bits for the address or address_range.
     */
    subnetMask: string;
    /**
     * The unique globally general API entity identifier for the VPC.
     */
    vpcId: number;
}

export interface GetVpcSubnetLinode {
    id: number;
    interfaces: outputs.GetVpcSubnetLinodeInterface[];
}

export interface GetVpcSubnetLinodeInterface {
    active: boolean;
    id: number;
}

export interface GetVpcSubnetsFilter {
    /**
     * The type of comparison to use for this filter.
     */
    matchBy?: string;
    /**
     * The name of the attribute to filter on.
     */
    name: string;
    /**
     * The value(s) to be used in the filter.
     */
    values: string[];
}

export interface GetVpcSubnetsVpcSubnet {
    /**
     * The date and time when the VPC Subnet was created.
     */
    created: string;
    /**
     * The id of the VPC Subnet.
     */
    id: number;
    /**
     * The IPv4 range of this subnet in CIDR format.
     */
    ipv4: string;
    /**
     * The label of the VPC Subnet.
     */
    label: string;
    linodes: outputs.GetVpcSubnetsVpcSubnetLinode[];
    /**
     * The date and time when the VPC Subnet was updated.
     */
    updated: string;
}

export interface GetVpcSubnetsVpcSubnetLinode {
    id: number;
    interfaces: outputs.GetVpcSubnetsVpcSubnetLinodeInterface[];
}

export interface GetVpcSubnetsVpcSubnetLinodeInterface {
    active: boolean;
    id: number;
}

export interface GetVpcsFilter {
    /**
     * The type of comparison to use for this filter.
     */
    matchBy?: string;
    /**
     * The name of the attribute to filter on.
     */
    name: string;
    /**
     * The value(s) to be used in the filter.
     */
    values: string[];
}

export interface GetVpcsVpc {
    /**
     * The date and time when the VPC was created.
     */
    created: string;
    /**
     * The user-defined description of this VPC.
     */
    description: string;
    /**
     * The id of the VPC.
     */
    id: string;
    /**
     * The label of the VPC.
     */
    label: string;
    /**
     * The region of the VPC.
     */
    region: string;
    /**
     * The date and time when the VPC was updated.
     */
    updated: string;
}

export interface ImageReplication {
    region: string;
    status: string;
}

export interface ImageTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: string;
}

export interface InstanceAlerts {
    /**
     * The percentage of CPU usage required to trigger an alert. If the average CPU usage over two hours exceeds this value, we'll send you an alert. If this is set to 0, the alert is disabled.
     */
    cpu: number;
    /**
     * The amount of disk IO operation per second required to trigger an alert. If the average disk IO over two hours exceeds this value, we'll send you an alert. If set to 0, this alert is disabled.
     */
    io: number;
    /**
     * The amount of incoming traffic, in Mbit/s, required to trigger an alert. If the average incoming traffic over two hours exceeds this value, we'll send you an alert. If this is set to 0 (zero), the alert is disabled.
     */
    networkIn: number;
    /**
     * The amount of outbound traffic, in Mbit/s, required to trigger an alert. If the average outbound traffic over two hours exceeds this value, we'll send you an alert. If this is set to 0 (zero), the alert is disabled.
     */
    networkOut: number;
    /**
     * The percentage of network transfer that may be used before an alert is triggered. When this value is exceeded, we'll alert you. If this is set to 0 (zero), the alert is disabled.
     */
    transferQuota: number;
}

export interface InstanceBackup {
    available: boolean;
    enabled: boolean;
    schedules: outputs.InstanceBackupSchedule[];
}

export interface InstanceBackupSchedule {
    day: string;
    window: string;
}

export interface InstanceConfig {
    /**
     * Optional field for arbitrary User comments on this Config.
     */
    comments?: string;
    /**
     * Device sda-sdh can be either a Disk or Volume identified by disk_label or volume_id. Only one type per slot allowed.
     */
    devices?: outputs.InstanceConfigDevices;
    /**
     * Helpers enabled when booting to this Linode Config.
     */
    helpers?: outputs.InstanceConfigHelpers;
    /**
     * The unique ID of this Config.
     */
    id: number;
    /**
     * An array of Network Interfaces for this Linode’s Configuration Profile.
     */
    interfaces?: outputs.InstanceConfigInterface[];
    /**
     * A Kernel ID to boot a Linode with. Default is based on image choice. (examples: linode/latest-64bit, linode/grub2, linode/direct-disk)
     */
    kernel?: string;
    /**
     * The Config's label for display purposes.  Also used by `boot_config_label`.
     */
    label: string;
    /**
     * Defaults to the total RAM of the Linode
     */
    memoryLimit?: number;
    /**
     * The root device to boot. The corresponding disk must be attached.
     */
    rootDevice: string;
    /**
     * Defines the state of your Linode after booting. Defaults to default.
     */
    runLevel?: string;
    /**
     * Controls the virtualization mode. Defaults to paravirt.
     */
    virtMode?: string;
}

export interface InstanceConfigDevice {
    /**
     * The Disk ID to map to this disk slot
     */
    deviceName: string;
    /**
     * The Disk ID to map to this disk slot
     */
    diskId?: number;
    /**
     * The Block Storage volume ID to map to this disk slot
     */
    volumeId?: number;
}

export interface InstanceConfigDevices {
    /**
     * Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
     */
    sda?: outputs.InstanceConfigDevicesSda;
    /**
     * Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
     */
    sdb?: outputs.InstanceConfigDevicesSdb;
    /**
     * Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
     */
    sdc?: outputs.InstanceConfigDevicesSdc;
    /**
     * Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
     */
    sdd?: outputs.InstanceConfigDevicesSdd;
    /**
     * Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
     */
    sde?: outputs.InstanceConfigDevicesSde;
    /**
     * Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
     */
    sdf?: outputs.InstanceConfigDevicesSdf;
    /**
     * Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
     */
    sdg?: outputs.InstanceConfigDevicesSdg;
    /**
     * Device can be either a Disk or Volume identified by disk_id or volume_id. Only one type per slot allowed.
     */
    sdh?: outputs.InstanceConfigDevicesSdh;
}

export interface InstanceConfigDevicesSda {
    /**
     * The Disk ID to map to this disk slot
     */
    diskId?: number;
    /**
     * The Block Storage volume ID to map to this disk slot
     */
    volumeId?: number;
}

export interface InstanceConfigDevicesSdb {
    /**
     * The Disk ID to map to this disk slot
     */
    diskId?: number;
    /**
     * The Block Storage volume ID to map to this disk slot
     */
    volumeId?: number;
}

export interface InstanceConfigDevicesSdc {
    /**
     * The Disk ID to map to this disk slot
     */
    diskId?: number;
    /**
     * The Block Storage volume ID to map to this disk slot
     */
    volumeId?: number;
}

export interface InstanceConfigDevicesSdd {
    /**
     * The Disk ID to map to this disk slot
     */
    diskId?: number;
    /**
     * The Block Storage volume ID to map to this disk slot
     */
    volumeId?: number;
}

export interface InstanceConfigDevicesSde {
    /**
     * The Disk ID to map to this disk slot
     */
    diskId?: number;
    /**
     * The Block Storage volume ID to map to this disk slot
     */
    volumeId?: number;
}

export interface InstanceConfigDevicesSdf {
    /**
     * The Disk ID to map to this disk slot
     */
    diskId?: number;
    /**
     * The Block Storage volume ID to map to this disk slot
     */
    volumeId?: number;
}

export interface InstanceConfigDevicesSdg {
    /**
     * The Disk ID to map to this disk slot
     */
    diskId?: number;
    /**
     * The Block Storage volume ID to map to this disk slot
     */
    volumeId?: number;
}

export interface InstanceConfigDevicesSdh {
    /**
     * The Disk ID to map to this disk slot
     */
    diskId?: number;
    /**
     * The Block Storage volume ID to map to this disk slot
     */
    volumeId?: number;
}

export interface InstanceConfigHelper {
    /**
     * Populates the /dev directory early during boot without udev.
     */
    devtmpfsAutomount?: boolean;
    /**
     * Helps maintain correct inittab/upstart console device.
     */
    distro?: boolean;
    /**
     * Creates a modules dependency file for the Kernel you run.
     */
    modulesDep?: boolean;
    /**
     * Automatically configures static networking.
     */
    network?: boolean;
    /**
     * Disables updatedb cron job to avoid disk thrashing.
     */
    updatedbDisabled?: boolean;
}

export interface InstanceConfigHelpers {
    /**
     * Populates the /dev directory early during boot without udev. Defaults to false.
     */
    devtmpfsAutomount?: boolean;
    /**
     * Controls the behavior of the Linode Config's Distribution Helper setting.
     */
    distro?: boolean;
    /**
     * Creates a modules dependency file for the Kernel you run.
     */
    modulesDep?: boolean;
    /**
     * Controls the behavior of the Linode Config's Network Helper setting, used to automatically configure additional IP addresses assigned to this instance.
     */
    network?: boolean;
    /**
     * Disables updatedb cron job to avoid disk thrashing.
     */
    updatedbDisabled?: boolean;
}

export interface InstanceConfigInterface {
    /**
     * Whether this interface is currently booted and active.
     */
    active: boolean;
    /**
     * The ID of the interface.
     */
    id: number;
    /**
     * List of VPC IPs or IP ranges inside the VPC subnet.
     */
    ipRanges?: string[];
    /**
     * This Network Interface's private IP address in Classless Inter-Domain Routing (CIDR) notation.This attribute is only allowed for VLAN interfaces.
     */
    ipamAddress?: string;
    /**
     * The IPv4 configuration of the VPC interface.This attribute is only allowed for VPC interfaces.
     */
    ipv4?: outputs.InstanceConfigInterfaceIpv4;
    /**
     * The name of the VALN. This attribute is required for VLAN interfaces. This attribute is only allowed for VLAN interfaces.
     */
    label?: string;
    /**
     * Whether the interface is the primary interface that should have the default route for this Linode.
     */
    primary?: boolean;
    /**
     * The type of interface.
     */
    purpose: string;
    /**
     * The ID of the subnet which the VPC interface is connected to.This attribute is required for VPC interfaces.This attribute is only allowed for VPC interfaces.
     */
    subnetId?: number;
    /**
     * The ID of VPC of the subnet which the VPC interface is connected to.
     */
    vpcId: number;
}

export interface InstanceConfigInterfaceIpv4 {
    /**
     * The public IP that will be used for the one-to-one NAT purpose.
     */
    nat11: string;
    /**
     * The IP from the VPC subnet to use for this interface.
     */
    vpc: string;
}

export interface InstanceDisk {
    /**
     * A list of SSH public keys to deploy for the root user on the newly created Linode. Only accepted if 'image' is provided.
     */
    authorizedKeys?: string[];
    /**
     * A list of Linode usernames. If the usernames have associated SSH keys, the keys will be appended to the `root` user's `~/.ssh/authorized_keys` file automatically. Only accepted if 'image' is provided.
     */
    authorizedUsers?: string[];
    /**
     * The Disk filesystem can be one of: raw, swap, ext3, ext4, initrd (max 32mb)
     */
    filesystem: string;
    /**
     * The ID of the Disk (for use in Linode Image resources and Linode Instance Config Devices)
     */
    id: number;
    /**
     * An Image ID to deploy the Disk from. Official Linode Images start with linode/, while your Images start with private/.
     */
    image: string;
    label: string;
    /**
     * If true, this Disk is read-only.
     */
    readOnly: boolean;
    /**
     * The password that will be initialially assigned to the 'root' user account.
     */
    rootPass?: string;
    /**
     * The size of the Disk in MB.
     */
    size: number;
    /**
     * An object containing responses to any User Defined Fields present in the StackScript being deployed to this Linode. Only accepted if 'stackscript_id' is given. The required values depend on the StackScript being deployed.
     */
    stackscriptData: {[key: string]: string};
    /**
     * The StackScript to deploy to the newly created Linode. If provided, 'image' must also be provided, and must be an Image that is compatible with this StackScript.
     */
    stackscriptId: number;
}

export interface InstanceDiskTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
     */
    delete?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    update?: string;
}

export interface InstanceInterface {
    /**
     * Whether this interface is currently booted and active.
     */
    active: boolean;
    /**
     * The ID of the interface.
     */
    id: number;
    /**
     * List of VPC IPs or IP ranges inside the VPC subnet.
     */
    ipRanges?: string[];
    /**
     * This Network Interface's private IP address in Classless Inter-Domain Routing (CIDR) notation.This attribute is only allowed for VLAN interfaces.
     */
    ipamAddress?: string;
    /**
     * The IPv4 configuration of the VPC interface.This attribute is only allowed for VPC interfaces.
     */
    ipv4?: outputs.InstanceInterfaceIpv4;
    /**
     * The name of the VALN. This attribute is required for VLAN interfaces. This attribute is only allowed for VLAN interfaces.
     */
    label?: string;
    /**
     * Whether the interface is the primary interface that should have the default route for this Linode.
     */
    primary?: boolean;
    /**
     * The type of interface.
     */
    purpose: string;
    /**
     * The ID of the subnet which the VPC interface is connected to.This attribute is required for VPC interfaces.This attribute is only allowed for VPC interfaces.
     */
    subnetId?: number;
    /**
     * The ID of VPC of the subnet which the VPC interface is connected to.
     */
    vpcId: number;
}

export interface InstanceInterfaceIpv4 {
    /**
     * The public IP that will be used for the one-to-one NAT purpose.
     */
    nat11: string;
    /**
     * The IP from the VPC subnet to use for this interface.
     */
    vpc: string;
}

export interface InstanceIpVpcNat11 {
    address: string;
    subnetId: number;
    vpcId: number;
}

export interface InstanceMetadata {
    /**
     * The base64-encoded user-defined data exposed to this instance through the Linode Metadata service. Refer to the base64encode(...) function for information on encoding content for this field.
     */
    userData?: string;
}

export interface InstancePlacementGroup {
    compliantOnly?: boolean;
    /**
     * The ID of the Placement Group to assign this Linode to.
     */
    id: number;
    /**
     * The label of this Placement Group.
     */
    label: string;
    /**
     * Whether compliance is strictly enforced by this Placement Group.
     */
    placementGroupPolicy: string;
    /**
     * The placement group type for this Placement Group.
     */
    placementGroupType: string;
}

export interface InstanceSpec {
    disk: number;
    memory: number;
    transfer: number;
    vcpus: number;
}

export interface InstanceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LkeClusterControlPlane {
    /**
     * Defines the ACL configuration for an LKE cluster's control plane.
     */
    acl?: outputs.LkeClusterControlPlaneAcl;
    /**
     * Defines whether High Availability is enabled for the Control Plane Components of the cluster.
     */
    highAvailability: boolean;
}

export interface LkeClusterControlPlaneAcl {
    /**
     * A list of ip addresses to allow.
     */
    addresses?: outputs.LkeClusterControlPlaneAclAddress[];
    /**
     * Defines default policy. A value of true results in a default policy of DENY. A value of false results in default policy of ALLOW, and has the same effect as delete the ACL configuration.
     */
    enabled: boolean;
}

export interface LkeClusterControlPlaneAclAddress {
    /**
     * A set of individual ipv4 addresses or CIDRs to ALLOW.
     */
    ipv4s: string[];
    /**
     * A set of individual ipv6 addresses or CIDRs to ALLOW.
     */
    ipv6s: string[];
}

export interface LkeClusterPool {
    /**
     * When specified, the number of nodes autoscales within the defined minimum and maximum values.
     */
    autoscaler?: outputs.LkeClusterPoolAutoscaler;
    /**
     * The number of nodes in the Node Pool.
     */
    count: number;
    /**
     * The ID of the Node Pool.
     */
    id: number;
    /**
     * The nodes in the node pool.
     */
    nodes: outputs.LkeClusterPoolNode[];
    /**
     * A set of tags applied to this node pool.
     */
    tags?: string[];
    /**
     * A Linode Type for all of the nodes in the Node Pool.
     */
    type: string;
}

export interface LkeClusterPoolAutoscaler {
    /**
     * The maximum number of nodes to autoscale to.
     */
    max: number;
    /**
     * The minimum number of nodes to autoscale to.
     */
    min: number;
}

export interface LkeClusterPoolNode {
    id: string;
    instanceId: number;
    status: string;
}

export interface LkeClusterTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LkeNodePoolAutoscaler {
    max: number;
    min: number;
}

export interface LkeNodePoolNode {
    id: string;
    instanceId: number;
    status: string;
}

export interface LkeNodePoolTaint {
    /**
     * The Kubernetes taint effect.
     */
    effect: string;
    /**
     * The Kubernetes taint key.
     */
    key: string;
    /**
     * The Kubernetes taint value.
     */
    value: string;
}

export interface NodebalancerConfigNodeStatus {
    down: number;
    up: number;
}

export interface NodebalancerFirewall {
    created: string;
    id: number;
    inboundPolicy: string;
    inbounds: outputs.NodebalancerFirewallInbound[];
    label: string;
    outboundPolicy: string;
    outbounds: outputs.NodebalancerFirewallOutbound[];
    status: string;
    tags: string[];
    updated: string;
}

export interface NodebalancerFirewallInbound {
    action: string;
    ipv4s: string[];
    ipv6s: string[];
    label: string;
    ports: string;
    protocol: string;
}

export interface NodebalancerFirewallOutbound {
    action: string;
    ipv4s: string[];
    ipv6s: string[];
    label: string;
    ports: string;
    protocol: string;
}

export interface NodebalancerTransfer {
    in: number;
    out: number;
    total: number;
}

export interface ObjectStorageBucketCert {
    /**
     * The Base64 encoded and PEM formatted SSL certificate.
     */
    certificate: string;
    /**
     * The private key associated with the TLS/SSL certificate.
     */
    privateKey: string;
}

export interface ObjectStorageBucketLifecycleRule {
    /**
     * Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
     */
    abortIncompleteMultipartUploadDays?: number;
    /**
     * Specifies whether the lifecycle rule is active.
     */
    enabled: boolean;
    /**
     * Specifies a period in the object's expire.
     */
    expiration?: outputs.ObjectStorageBucketLifecycleRuleExpiration;
    /**
     * The unique identifier for the rule.
     */
    id: string;
    /**
     * Specifies when non-current object versions expire.
     */
    noncurrentVersionExpiration?: outputs.ObjectStorageBucketLifecycleRuleNoncurrentVersionExpiration;
    /**
     * The object key prefix identifying one or more objects to which the rule applies.
     */
    prefix?: string;
}

export interface ObjectStorageBucketLifecycleRuleExpiration {
    /**
     * Specifies the date after which you want the corresponding action to take effect.
     */
    date?: string;
    /**
     * Specifies the number of days after object creation when the specific rule action takes effect.
     */
    days?: number;
    /**
     * Directs Linode Object Storage to remove expired deleted markers.
     */
    expiredObjectDeleteMarker?: boolean;
}

export interface ObjectStorageBucketLifecycleRuleNoncurrentVersionExpiration {
    /**
     * Specifies the number of days non-current object versions expire.
     */
    days: number;
}

export interface ObjectStorageKeyBucketAccess {
    /**
     * The unique label of the bucket to which the key will grant limited access.
     */
    bucketName: string;
    /**
     * The Object Storage cluster where the bucket resides. Deprecated in favor of `region`
     *
     * @deprecated Deprecated
     */
    cluster: string;
    /**
     * This Limited Access Key's permissions for the selected bucket.
     */
    permissions: string;
    /**
     * The region where the bucket resides.
     */
    region: string;
}

export interface ObjectStorageKeyRegionsDetail {
    id: string;
    s3Endpoint: string;
}

export interface PlacementGroupMember {
    isCompliant: boolean;
    linodeId: number;
}

export interface RdnsTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    update?: string;
}

export interface StackscriptUserDefinedField {
    default: string;
    example: string;
    label: string;
    manyOf: string;
    name: string;
    oneOf: string;
}

export interface UserDomainGrant {
    /**
     * The ID of the entity this grant applies to.
     */
    id: number;
    /**
     * The level of access this User has to this entity. If null, this User has no access.
     */
    permissions: string;
}

export interface UserFirewallGrant {
    /**
     * The ID of the entity this grant applies to.
     */
    id: number;
    /**
     * The level of access this User has to this entity. If null, this User has no access.
     */
    permissions: string;
}

export interface UserGlobalGrants {
    /**
     * The level of access this User has to Account-level actions, like billing information. A restricted User will never be able to manage users.
     */
    accountAccess?: string;
    /**
     * If true, this User may add Databases.
     */
    addDatabases?: boolean;
    /**
     * If true, this User may add Domains.
     */
    addDomains?: boolean;
    /**
     * If true, this User may add Firewalls.
     */
    addFirewalls?: boolean;
    /**
     * If true, this User may add Images.
     */
    addImages?: boolean;
    /**
     * If true, this User may create Linodes.
     */
    addLinodes?: boolean;
    /**
     * If true, this User may create Longview clients and view the current plan.
     */
    addLongview?: boolean;
    /**
     * If true, this User may add NodeBalancers.
     */
    addNodebalancers?: boolean;
    /**
     * If true, this User may add StackScripts.
     */
    addStackscripts?: boolean;
    /**
     * If true, this User may add Volumes.
     */
    addVolumes?: boolean;
    /**
     * If true, this User may cancel the entire Account.
     */
    cancelAccount?: boolean;
    /**
     * If true, this User may manage the Account’s Longview subscription.
     */
    longviewSubscription?: boolean;
}

export interface UserImageGrant {
    /**
     * The ID of the entity this grant applies to.
     */
    id: number;
    /**
     * The level of access this User has to this entity. If null, this User has no access.
     */
    permissions: string;
}

export interface UserLinodeGrant {
    /**
     * The ID of the entity this grant applies to.
     */
    id: number;
    /**
     * The level of access this User has to this entity. If null, this User has no access.
     */
    permissions: string;
}

export interface UserLongviewGrant {
    /**
     * The ID of the entity this grant applies to.
     */
    id: number;
    /**
     * The level of access this User has to this entity. If null, this User has no access.
     */
    permissions: string;
}

export interface UserNodebalancerGrant {
    /**
     * The ID of the entity this grant applies to.
     */
    id: number;
    /**
     * The level of access this User has to this entity. If null, this User has no access.
     */
    permissions: string;
}

export interface UserStackscriptGrant {
    /**
     * The ID of the entity this grant applies to.
     */
    id: number;
    /**
     * The level of access this User has to this entity. If null, this User has no access.
     */
    permissions: string;
}

export interface UserVolumeGrant {
    /**
     * The ID of the entity this grant applies to.
     */
    id: number;
    /**
     * The level of access this User has to this entity. If null, this User has no access.
     */
    permissions: string;
}

export interface VolumeTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
     */
    delete?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    update?: string;
}

export interface VpcSubnetLinode {
    id: number;
    interfaces: outputs.VpcSubnetLinodeInterface[];
}

export interface VpcSubnetLinodeInterface {
    active: boolean;
    id: number;
}

