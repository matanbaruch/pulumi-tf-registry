// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NodebalancerNode extends pulumi.CustomResource {
    /**
     * Get an existing NodebalancerNode resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NodebalancerNodeState, opts?: pulumi.CustomResourceOptions): NodebalancerNode {
        return new NodebalancerNode(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'linode:index/nodebalancerNode:NodebalancerNode';

    /**
     * Returns true if the given object is an instance of NodebalancerNode.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NodebalancerNode {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NodebalancerNode.__pulumiType;
    }

    /**
     * The private IP Address and port (IP:PORT) where this backend can be reached. This must be a private IP address.
     */
    public readonly address!: pulumi.Output<string>;
    /**
     * The ID of the NodeBalancerConfig to access.
     */
    public readonly configId!: pulumi.Output<number>;
    /**
     * The label for this node. This is for display purposes only.
     */
    public readonly label!: pulumi.Output<string>;
    /**
     * The mode this NodeBalancer should use when sending traffic to this backend. If set to `accept` this backend is accepting
     * traffic. If set to `reject` this backend will not receive traffic. If set to `drain` this backend will not receive new
     * traffic, but connections already pinned to it will continue to be routed to it. If set to `backup` this backend will
     * only accept traffic if all other nodes are down.
     */
    public readonly mode!: pulumi.Output<string>;
    /**
     * The ID of the NodeBalancer to access.
     */
    public readonly nodebalancerId!: pulumi.Output<number>;
    /**
     * The current status of this node, based on the configured checks of its NodeBalancer Config. (unknown, UP, DOWN)
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Used when picking a backend to serve a request and is not pinned to a single backend yet. Nodes with a higher weight
     * will receive more traffic. (1-255)
     */
    public readonly weight!: pulumi.Output<number>;

    /**
     * Create a NodebalancerNode resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NodebalancerNodeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NodebalancerNodeArgs | NodebalancerNodeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NodebalancerNodeState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["configId"] = state ? state.configId : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["nodebalancerId"] = state ? state.nodebalancerId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as NodebalancerNodeArgs | undefined;
            if ((!args || args.address === undefined) && !opts.urn) {
                throw new Error("Missing required property 'address'");
            }
            if ((!args || args.configId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configId'");
            }
            if ((!args || args.label === undefined) && !opts.urn) {
                throw new Error("Missing required property 'label'");
            }
            if ((!args || args.nodebalancerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodebalancerId'");
            }
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["configId"] = args ? args.configId : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["nodebalancerId"] = args ? args.nodebalancerId : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NodebalancerNode.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NodebalancerNode resources.
 */
export interface NodebalancerNodeState {
    /**
     * The private IP Address and port (IP:PORT) where this backend can be reached. This must be a private IP address.
     */
    address?: pulumi.Input<string>;
    /**
     * The ID of the NodeBalancerConfig to access.
     */
    configId?: pulumi.Input<number>;
    /**
     * The label for this node. This is for display purposes only.
     */
    label?: pulumi.Input<string>;
    /**
     * The mode this NodeBalancer should use when sending traffic to this backend. If set to `accept` this backend is accepting
     * traffic. If set to `reject` this backend will not receive traffic. If set to `drain` this backend will not receive new
     * traffic, but connections already pinned to it will continue to be routed to it. If set to `backup` this backend will
     * only accept traffic if all other nodes are down.
     */
    mode?: pulumi.Input<string>;
    /**
     * The ID of the NodeBalancer to access.
     */
    nodebalancerId?: pulumi.Input<number>;
    /**
     * The current status of this node, based on the configured checks of its NodeBalancer Config. (unknown, UP, DOWN)
     */
    status?: pulumi.Input<string>;
    /**
     * Used when picking a backend to serve a request and is not pinned to a single backend yet. Nodes with a higher weight
     * will receive more traffic. (1-255)
     */
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a NodebalancerNode resource.
 */
export interface NodebalancerNodeArgs {
    /**
     * The private IP Address and port (IP:PORT) where this backend can be reached. This must be a private IP address.
     */
    address: pulumi.Input<string>;
    /**
     * The ID of the NodeBalancerConfig to access.
     */
    configId: pulumi.Input<number>;
    /**
     * The label for this node. This is for display purposes only.
     */
    label: pulumi.Input<string>;
    /**
     * The mode this NodeBalancer should use when sending traffic to this backend. If set to `accept` this backend is accepting
     * traffic. If set to `reject` this backend will not receive traffic. If set to `drain` this backend will not receive new
     * traffic, but connections already pinned to it will continue to be routed to it. If set to `backup` this backend will
     * only accept traffic if all other nodes are down.
     */
    mode?: pulumi.Input<string>;
    /**
     * The ID of the NodeBalancer to access.
     */
    nodebalancerId: pulumi.Input<number>;
    /**
     * Used when picking a backend to serve a request and is not pinned to a single backend yet. Nodes with a higher weight
     * will receive more traffic. (1-255)
     */
    weight?: pulumi.Input<number>;
}
