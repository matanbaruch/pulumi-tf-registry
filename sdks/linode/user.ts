// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'linode:index/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * A set containing all of the user's active grants.
     */
    public readonly domainGrants!: pulumi.Output<outputs.UserDomainGrant[] | undefined>;
    /**
     * The email of the user.
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * A set containing all of the user's active grants.
     */
    public readonly firewallGrants!: pulumi.Output<outputs.UserFirewallGrant[] | undefined>;
    /**
     * A structure containing the Account-level grants a User has.
     */
    public readonly globalGrants!: pulumi.Output<outputs.UserGlobalGrants | undefined>;
    /**
     * A set containing all of the user's active grants.
     */
    public readonly imageGrants!: pulumi.Output<outputs.UserImageGrant[] | undefined>;
    /**
     * A set containing all of the user's active grants.
     */
    public readonly linodeGrants!: pulumi.Output<outputs.UserLinodeGrant[] | undefined>;
    /**
     * A set containing all of the user's active grants.
     */
    public readonly longviewGrants!: pulumi.Output<outputs.UserLongviewGrant[] | undefined>;
    /**
     * A set containing all of the user's active grants.
     */
    public readonly nodebalancerGrants!: pulumi.Output<outputs.UserNodebalancerGrant[] | undefined>;
    /**
     * If true, the user must be explicitly granted access to platform actions and entities.
     */
    public readonly restricted!: pulumi.Output<boolean | undefined>;
    /**
     * SSH keys to add to the user profile.
     */
    public /*out*/ readonly sshKeys!: pulumi.Output<string[]>;
    /**
     * A set containing all of the user's active grants.
     */
    public readonly stackscriptGrants!: pulumi.Output<outputs.UserStackscriptGrant[] | undefined>;
    /**
     * If the User has Two Factor Authentication (TFA) enabled.
     */
    public /*out*/ readonly tfaEnabled!: pulumi.Output<boolean>;
    /**
     * The type of this user.
     */
    public /*out*/ readonly userType!: pulumi.Output<string>;
    /**
     * The username of the user.
     */
    public readonly username!: pulumi.Output<string>;
    /**
     * A set containing all of the user's active grants.
     */
    public readonly volumeGrants!: pulumi.Output<outputs.UserVolumeGrant[] | undefined>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["domainGrants"] = state ? state.domainGrants : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["firewallGrants"] = state ? state.firewallGrants : undefined;
            resourceInputs["globalGrants"] = state ? state.globalGrants : undefined;
            resourceInputs["imageGrants"] = state ? state.imageGrants : undefined;
            resourceInputs["linodeGrants"] = state ? state.linodeGrants : undefined;
            resourceInputs["longviewGrants"] = state ? state.longviewGrants : undefined;
            resourceInputs["nodebalancerGrants"] = state ? state.nodebalancerGrants : undefined;
            resourceInputs["restricted"] = state ? state.restricted : undefined;
            resourceInputs["sshKeys"] = state ? state.sshKeys : undefined;
            resourceInputs["stackscriptGrants"] = state ? state.stackscriptGrants : undefined;
            resourceInputs["tfaEnabled"] = state ? state.tfaEnabled : undefined;
            resourceInputs["userType"] = state ? state.userType : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["volumeGrants"] = state ? state.volumeGrants : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["domainGrants"] = args ? args.domainGrants : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["firewallGrants"] = args ? args.firewallGrants : undefined;
            resourceInputs["globalGrants"] = args ? args.globalGrants : undefined;
            resourceInputs["imageGrants"] = args ? args.imageGrants : undefined;
            resourceInputs["linodeGrants"] = args ? args.linodeGrants : undefined;
            resourceInputs["longviewGrants"] = args ? args.longviewGrants : undefined;
            resourceInputs["nodebalancerGrants"] = args ? args.nodebalancerGrants : undefined;
            resourceInputs["restricted"] = args ? args.restricted : undefined;
            resourceInputs["stackscriptGrants"] = args ? args.stackscriptGrants : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["volumeGrants"] = args ? args.volumeGrants : undefined;
            resourceInputs["sshKeys"] = undefined /*out*/;
            resourceInputs["tfaEnabled"] = undefined /*out*/;
            resourceInputs["userType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(User.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    /**
     * A set containing all of the user's active grants.
     */
    domainGrants?: pulumi.Input<pulumi.Input<inputs.UserDomainGrant>[]>;
    /**
     * The email of the user.
     */
    email?: pulumi.Input<string>;
    /**
     * A set containing all of the user's active grants.
     */
    firewallGrants?: pulumi.Input<pulumi.Input<inputs.UserFirewallGrant>[]>;
    /**
     * A structure containing the Account-level grants a User has.
     */
    globalGrants?: pulumi.Input<inputs.UserGlobalGrants>;
    /**
     * A set containing all of the user's active grants.
     */
    imageGrants?: pulumi.Input<pulumi.Input<inputs.UserImageGrant>[]>;
    /**
     * A set containing all of the user's active grants.
     */
    linodeGrants?: pulumi.Input<pulumi.Input<inputs.UserLinodeGrant>[]>;
    /**
     * A set containing all of the user's active grants.
     */
    longviewGrants?: pulumi.Input<pulumi.Input<inputs.UserLongviewGrant>[]>;
    /**
     * A set containing all of the user's active grants.
     */
    nodebalancerGrants?: pulumi.Input<pulumi.Input<inputs.UserNodebalancerGrant>[]>;
    /**
     * If true, the user must be explicitly granted access to platform actions and entities.
     */
    restricted?: pulumi.Input<boolean>;
    /**
     * SSH keys to add to the user profile.
     */
    sshKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A set containing all of the user's active grants.
     */
    stackscriptGrants?: pulumi.Input<pulumi.Input<inputs.UserStackscriptGrant>[]>;
    /**
     * If the User has Two Factor Authentication (TFA) enabled.
     */
    tfaEnabled?: pulumi.Input<boolean>;
    /**
     * The type of this user.
     */
    userType?: pulumi.Input<string>;
    /**
     * The username of the user.
     */
    username?: pulumi.Input<string>;
    /**
     * A set containing all of the user's active grants.
     */
    volumeGrants?: pulumi.Input<pulumi.Input<inputs.UserVolumeGrant>[]>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * A set containing all of the user's active grants.
     */
    domainGrants?: pulumi.Input<pulumi.Input<inputs.UserDomainGrant>[]>;
    /**
     * The email of the user.
     */
    email: pulumi.Input<string>;
    /**
     * A set containing all of the user's active grants.
     */
    firewallGrants?: pulumi.Input<pulumi.Input<inputs.UserFirewallGrant>[]>;
    /**
     * A structure containing the Account-level grants a User has.
     */
    globalGrants?: pulumi.Input<inputs.UserGlobalGrants>;
    /**
     * A set containing all of the user's active grants.
     */
    imageGrants?: pulumi.Input<pulumi.Input<inputs.UserImageGrant>[]>;
    /**
     * A set containing all of the user's active grants.
     */
    linodeGrants?: pulumi.Input<pulumi.Input<inputs.UserLinodeGrant>[]>;
    /**
     * A set containing all of the user's active grants.
     */
    longviewGrants?: pulumi.Input<pulumi.Input<inputs.UserLongviewGrant>[]>;
    /**
     * A set containing all of the user's active grants.
     */
    nodebalancerGrants?: pulumi.Input<pulumi.Input<inputs.UserNodebalancerGrant>[]>;
    /**
     * If true, the user must be explicitly granted access to platform actions and entities.
     */
    restricted?: pulumi.Input<boolean>;
    /**
     * A set containing all of the user's active grants.
     */
    stackscriptGrants?: pulumi.Input<pulumi.Input<inputs.UserStackscriptGrant>[]>;
    /**
     * The username of the user.
     */
    username: pulumi.Input<string>;
    /**
     * A set containing all of the user's active grants.
     */
    volumeGrants?: pulumi.Input<pulumi.Input<inputs.UserVolumeGrant>[]>;
}
