// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Rdns extends pulumi.CustomResource {
    /**
     * Get an existing Rdns resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RdnsState, opts?: pulumi.CustomResourceOptions): Rdns {
        return new Rdns(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'linode:index/rdns:Rdns';

    /**
     * Returns true if the given object is an instance of Rdns.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Rdns {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Rdns.__pulumiType;
    }

    /**
     * The public Linode IPv4 or IPv6 address to operate on.
     */
    public readonly address!: pulumi.Output<string>;
    /**
     * The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by
     * Linode if not explicitly set.
     */
    public readonly rdns!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.RdnsTimeouts | undefined>;
    /**
     * If true, the RDNS assignment will be retried within the operation timeout period.
     */
    public readonly waitForAvailable!: pulumi.Output<boolean>;

    /**
     * Create a Rdns resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RdnsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RdnsArgs | RdnsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RdnsState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["rdns"] = state ? state.rdns : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["waitForAvailable"] = state ? state.waitForAvailable : undefined;
        } else {
            const args = argsOrState as RdnsArgs | undefined;
            if ((!args || args.address === undefined) && !opts.urn) {
                throw new Error("Missing required property 'address'");
            }
            if ((!args || args.rdns === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rdns'");
            }
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["rdns"] = args ? args.rdns : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["waitForAvailable"] = args ? args.waitForAvailable : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Rdns.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Rdns resources.
 */
export interface RdnsState {
    /**
     * The public Linode IPv4 or IPv6 address to operate on.
     */
    address?: pulumi.Input<string>;
    /**
     * The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by
     * Linode if not explicitly set.
     */
    rdns?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.RdnsTimeouts>;
    /**
     * If true, the RDNS assignment will be retried within the operation timeout period.
     */
    waitForAvailable?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Rdns resource.
 */
export interface RdnsArgs {
    /**
     * The public Linode IPv4 or IPv6 address to operate on.
     */
    address: pulumi.Input<string>;
    /**
     * The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by
     * Linode if not explicitly set.
     */
    rdns: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.RdnsTimeouts>;
    /**
     * If true, the RDNS assignment will be retried within the operation timeout period.
     */
    waitForAvailable?: pulumi.Input<boolean>;
}
