// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LkeNodePool extends pulumi.CustomResource {
    /**
     * Get an existing LkeNodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LkeNodePoolState, opts?: pulumi.CustomResourceOptions): LkeNodePool {
        return new LkeNodePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'linode:index/lkeNodePool:LkeNodePool';

    /**
     * Returns true if the given object is an instance of LkeNodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LkeNodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LkeNodePool.__pulumiType;
    }

    public readonly autoscalers!: pulumi.Output<outputs.LkeNodePoolAutoscaler[] | undefined>;
    /**
     * The ID of the cluster to associate this node pool with.
     */
    public readonly clusterId!: pulumi.Output<number>;
    /**
     * Key-value pairs added as labels to nodes in the node pool. Labels help classify your nodes and to easily select subsets
     * of objects.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The number of nodes in the Node Pool.
     */
    public readonly nodeCount!: pulumi.Output<number>;
    /**
     * A list of nodes in the node pool.
     */
    public /*out*/ readonly nodes!: pulumi.Output<outputs.LkeNodePoolNode[]>;
    /**
     * An array of tags applied to this object. Tags are for organizational purposes only.
     */
    public readonly tags!: pulumi.Output<string[]>;
    /**
     * Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically
     * allowing them to repel certain pods.
     */
    public readonly taints!: pulumi.Output<outputs.LkeNodePoolTaint[] | undefined>;
    /**
     * The type of node pool.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a LkeNodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LkeNodePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LkeNodePoolArgs | LkeNodePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LkeNodePoolState | undefined;
            resourceInputs["autoscalers"] = state ? state.autoscalers : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["nodeCount"] = state ? state.nodeCount : undefined;
            resourceInputs["nodes"] = state ? state.nodes : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["taints"] = state ? state.taints : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as LkeNodePoolArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["autoscalers"] = args ? args.autoscalers : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["nodeCount"] = args ? args.nodeCount : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["taints"] = args ? args.taints : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["nodes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LkeNodePool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LkeNodePool resources.
 */
export interface LkeNodePoolState {
    autoscalers?: pulumi.Input<pulumi.Input<inputs.LkeNodePoolAutoscaler>[]>;
    /**
     * The ID of the cluster to associate this node pool with.
     */
    clusterId?: pulumi.Input<number>;
    /**
     * Key-value pairs added as labels to nodes in the node pool. Labels help classify your nodes and to easily select subsets
     * of objects.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The number of nodes in the Node Pool.
     */
    nodeCount?: pulumi.Input<number>;
    /**
     * A list of nodes in the node pool.
     */
    nodes?: pulumi.Input<pulumi.Input<inputs.LkeNodePoolNode>[]>;
    /**
     * An array of tags applied to this object. Tags are for organizational purposes only.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically
     * allowing them to repel certain pods.
     */
    taints?: pulumi.Input<pulumi.Input<inputs.LkeNodePoolTaint>[]>;
    /**
     * The type of node pool.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LkeNodePool resource.
 */
export interface LkeNodePoolArgs {
    autoscalers?: pulumi.Input<pulumi.Input<inputs.LkeNodePoolAutoscaler>[]>;
    /**
     * The ID of the cluster to associate this node pool with.
     */
    clusterId: pulumi.Input<number>;
    /**
     * Key-value pairs added as labels to nodes in the node pool. Labels help classify your nodes and to easily select subsets
     * of objects.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The number of nodes in the Node Pool.
     */
    nodeCount?: pulumi.Input<number>;
    /**
     * An array of tags applied to this object. Tags are for organizational purposes only.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Kubernetes taints to add to node pool nodes. Taints help control how pods are scheduled onto nodes, specifically
     * allowing them to repel certain pods.
     */
    taints?: pulumi.Input<pulumi.Input<inputs.LkeNodePoolTaint>[]>;
    /**
     * The type of node pool.
     */
    type: pulumi.Input<string>;
}
