// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Nodebalancer extends pulumi.CustomResource {
    /**
     * Get an existing Nodebalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NodebalancerState, opts?: pulumi.CustomResourceOptions): Nodebalancer {
        return new Nodebalancer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'linode:index/nodebalancer:Nodebalancer';

    /**
     * Returns true if the given object is an instance of Nodebalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Nodebalancer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Nodebalancer.__pulumiType;
    }

    /**
     * Throttle connections per second (0-20). Set to 0 (zero) to disable throttling.
     */
    public readonly clientConnThrottle!: pulumi.Output<number>;
    /**
     * When this NodeBalancer was created.
     */
    public /*out*/ readonly created!: pulumi.Output<string>;
    /**
     * ID for the firewall you'd like to use with this NodeBalancer.
     */
    public readonly firewallId!: pulumi.Output<number | undefined>;
    /**
     * A list of Firewalls assigned to this NodeBalancer.
     */
    public /*out*/ readonly firewalls!: pulumi.Output<outputs.NodebalancerFirewall[]>;
    /**
     * This NodeBalancer's hostname, ending with .nodebalancer.linode.com
     */
    public /*out*/ readonly hostname!: pulumi.Output<string>;
    /**
     * The Public IPv4 Address of this NodeBalancer
     */
    public /*out*/ readonly ipv4!: pulumi.Output<string>;
    /**
     * The Public IPv6 Address of this NodeBalancer
     */
    public /*out*/ readonly ipv6!: pulumi.Output<string>;
    /**
     * The label of the Linode NodeBalancer.
     */
    public readonly label!: pulumi.Output<string | undefined>;
    /**
     * The region where this NodeBalancer will be deployed.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * An array of tags applied to this object. Tags are for organizational purposes only.
     */
    public readonly tags!: pulumi.Output<string[]>;
    /**
     * Information about the amount of transfer this NodeBalancer has had so far this month.
     */
    public /*out*/ readonly transfers!: pulumi.Output<outputs.NodebalancerTransfer[]>;
    /**
     * When this NodeBalancer was last updated.
     */
    public /*out*/ readonly updated!: pulumi.Output<string>;

    /**
     * Create a Nodebalancer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NodebalancerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NodebalancerArgs | NodebalancerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NodebalancerState | undefined;
            resourceInputs["clientConnThrottle"] = state ? state.clientConnThrottle : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["firewallId"] = state ? state.firewallId : undefined;
            resourceInputs["firewalls"] = state ? state.firewalls : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["ipv4"] = state ? state.ipv4 : undefined;
            resourceInputs["ipv6"] = state ? state.ipv6 : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["transfers"] = state ? state.transfers : undefined;
            resourceInputs["updated"] = state ? state.updated : undefined;
        } else {
            const args = argsOrState as NodebalancerArgs | undefined;
            resourceInputs["clientConnThrottle"] = args ? args.clientConnThrottle : undefined;
            resourceInputs["firewallId"] = args ? args.firewallId : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["firewalls"] = undefined /*out*/;
            resourceInputs["hostname"] = undefined /*out*/;
            resourceInputs["ipv4"] = undefined /*out*/;
            resourceInputs["ipv6"] = undefined /*out*/;
            resourceInputs["transfers"] = undefined /*out*/;
            resourceInputs["updated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Nodebalancer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Nodebalancer resources.
 */
export interface NodebalancerState {
    /**
     * Throttle connections per second (0-20). Set to 0 (zero) to disable throttling.
     */
    clientConnThrottle?: pulumi.Input<number>;
    /**
     * When this NodeBalancer was created.
     */
    created?: pulumi.Input<string>;
    /**
     * ID for the firewall you'd like to use with this NodeBalancer.
     */
    firewallId?: pulumi.Input<number>;
    /**
     * A list of Firewalls assigned to this NodeBalancer.
     */
    firewalls?: pulumi.Input<pulumi.Input<inputs.NodebalancerFirewall>[]>;
    /**
     * This NodeBalancer's hostname, ending with .nodebalancer.linode.com
     */
    hostname?: pulumi.Input<string>;
    /**
     * The Public IPv4 Address of this NodeBalancer
     */
    ipv4?: pulumi.Input<string>;
    /**
     * The Public IPv6 Address of this NodeBalancer
     */
    ipv6?: pulumi.Input<string>;
    /**
     * The label of the Linode NodeBalancer.
     */
    label?: pulumi.Input<string>;
    /**
     * The region where this NodeBalancer will be deployed.
     */
    region?: pulumi.Input<string>;
    /**
     * An array of tags applied to this object. Tags are for organizational purposes only.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Information about the amount of transfer this NodeBalancer has had so far this month.
     */
    transfers?: pulumi.Input<pulumi.Input<inputs.NodebalancerTransfer>[]>;
    /**
     * When this NodeBalancer was last updated.
     */
    updated?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Nodebalancer resource.
 */
export interface NodebalancerArgs {
    /**
     * Throttle connections per second (0-20). Set to 0 (zero) to disable throttling.
     */
    clientConnThrottle?: pulumi.Input<number>;
    /**
     * ID for the firewall you'd like to use with this NodeBalancer.
     */
    firewallId?: pulumi.Input<number>;
    /**
     * The label of the Linode NodeBalancer.
     */
    label?: pulumi.Input<string>;
    /**
     * The region where this NodeBalancer will be deployed.
     */
    region?: pulumi.Input<string>;
    /**
     * An array of tags applied to this object. Tags are for organizational purposes only.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
