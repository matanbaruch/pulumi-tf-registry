// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ObjectStorageObject extends pulumi.CustomResource {
    /**
     * Get an existing ObjectStorageObject resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectStorageObjectState, opts?: pulumi.CustomResourceOptions): ObjectStorageObject {
        return new ObjectStorageObject(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'linode:index/objectStorageObject:ObjectStorageObject';

    /**
     * Returns true if the given object is an instance of ObjectStorageObject.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectStorageObject {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectStorageObject.__pulumiType;
    }

    /**
     * The REQUIRED S3 access key with access to the target bucket. If not specified with the resource, you must provide its
     * value by configuring the obj_access_key, or, opting-in generating it implicitly at apply-time using obj_use_temp_keys at
     * provider-level.
     */
    public readonly accessKey!: pulumi.Output<string | undefined>;
    /**
     * The ACL config given to this object.
     */
    public readonly acl!: pulumi.Output<string | undefined>;
    /**
     * The target bucket to put this object in.
     */
    public readonly bucket!: pulumi.Output<string>;
    /**
     * This cache_control configuration of this object.
     */
    public readonly cacheControl!: pulumi.Output<string | undefined>;
    /**
     * The target cluster that the bucket is in.
     *
     * @deprecated Deprecated
     */
    public readonly cluster!: pulumi.Output<string | undefined>;
    /**
     * The contents of the Object to upload.
     */
    public readonly content!: pulumi.Output<string | undefined>;
    /**
     * The base64 contents of the Object to upload.
     */
    public readonly contentBase64!: pulumi.Output<string | undefined>;
    /**
     * The content disposition configuration of this object.
     */
    public readonly contentDisposition!: pulumi.Output<string | undefined>;
    /**
     * The encoding of the content of this object.
     */
    public readonly contentEncoding!: pulumi.Output<string | undefined>;
    /**
     * The language metadata of this object.
     */
    public readonly contentLanguage!: pulumi.Output<string | undefined>;
    /**
     * The MIME type of the content.
     */
    public readonly contentType!: pulumi.Output<string>;
    /**
     * The endpoint for the bucket used for s3 connections.
     */
    public readonly endpoint!: pulumi.Output<string>;
    /**
     * The specific version of this object.
     */
    public readonly etag!: pulumi.Output<string>;
    /**
     * Whether the object should bypass deletion restrictions.
     */
    public readonly forceDestroy!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the uploaded object.
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * The metadata of this object
     */
    public readonly metadata!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The target region that the bucket is in.
     */
    public readonly region!: pulumi.Output<string | undefined>;
    /**
     * The REQUIRED S3 secret key with access to the target bucket. If not specified with the resource, you must provide its
     * value by configuring the obj_secret_key, or, opting-in generating it implicitly at apply-time using obj_use_temp_keys at
     * provider-level.
     */
    public readonly secretKey!: pulumi.Output<string | undefined>;
    /**
     * The source file to upload.
     */
    public readonly source!: pulumi.Output<string | undefined>;
    /**
     * The version ID of this object.
     */
    public /*out*/ readonly versionId!: pulumi.Output<string>;
    /**
     * The website redirect location of this object.
     */
    public readonly websiteRedirect!: pulumi.Output<string | undefined>;

    /**
     * Create a ObjectStorageObject resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObjectStorageObjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectStorageObjectArgs | ObjectStorageObjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectStorageObjectState | undefined;
            resourceInputs["accessKey"] = state ? state.accessKey : undefined;
            resourceInputs["acl"] = state ? state.acl : undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["cacheControl"] = state ? state.cacheControl : undefined;
            resourceInputs["cluster"] = state ? state.cluster : undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["contentBase64"] = state ? state.contentBase64 : undefined;
            resourceInputs["contentDisposition"] = state ? state.contentDisposition : undefined;
            resourceInputs["contentEncoding"] = state ? state.contentEncoding : undefined;
            resourceInputs["contentLanguage"] = state ? state.contentLanguage : undefined;
            resourceInputs["contentType"] = state ? state.contentType : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["forceDestroy"] = state ? state.forceDestroy : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["secretKey"] = state ? state.secretKey : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["versionId"] = state ? state.versionId : undefined;
            resourceInputs["websiteRedirect"] = state ? state.websiteRedirect : undefined;
        } else {
            const args = argsOrState as ObjectStorageObjectArgs | undefined;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            resourceInputs["accessKey"] = args ? args.accessKey : undefined;
            resourceInputs["acl"] = args ? args.acl : undefined;
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["cacheControl"] = args ? args.cacheControl : undefined;
            resourceInputs["cluster"] = args ? args.cluster : undefined;
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["contentBase64"] = args ? args.contentBase64 : undefined;
            resourceInputs["contentDisposition"] = args ? args.contentDisposition : undefined;
            resourceInputs["contentEncoding"] = args ? args.contentEncoding : undefined;
            resourceInputs["contentLanguage"] = args ? args.contentLanguage : undefined;
            resourceInputs["contentType"] = args ? args.contentType : undefined;
            resourceInputs["endpoint"] = args ? args.endpoint : undefined;
            resourceInputs["etag"] = args ? args.etag : undefined;
            resourceInputs["forceDestroy"] = args ? args.forceDestroy : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["secretKey"] = args?.secretKey ? pulumi.secret(args.secretKey) : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["websiteRedirect"] = args ? args.websiteRedirect : undefined;
            resourceInputs["versionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secretKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ObjectStorageObject.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectStorageObject resources.
 */
export interface ObjectStorageObjectState {
    /**
     * The REQUIRED S3 access key with access to the target bucket. If not specified with the resource, you must provide its
     * value by configuring the obj_access_key, or, opting-in generating it implicitly at apply-time using obj_use_temp_keys at
     * provider-level.
     */
    accessKey?: pulumi.Input<string>;
    /**
     * The ACL config given to this object.
     */
    acl?: pulumi.Input<string>;
    /**
     * The target bucket to put this object in.
     */
    bucket?: pulumi.Input<string>;
    /**
     * This cache_control configuration of this object.
     */
    cacheControl?: pulumi.Input<string>;
    /**
     * The target cluster that the bucket is in.
     *
     * @deprecated Deprecated
     */
    cluster?: pulumi.Input<string>;
    /**
     * The contents of the Object to upload.
     */
    content?: pulumi.Input<string>;
    /**
     * The base64 contents of the Object to upload.
     */
    contentBase64?: pulumi.Input<string>;
    /**
     * The content disposition configuration of this object.
     */
    contentDisposition?: pulumi.Input<string>;
    /**
     * The encoding of the content of this object.
     */
    contentEncoding?: pulumi.Input<string>;
    /**
     * The language metadata of this object.
     */
    contentLanguage?: pulumi.Input<string>;
    /**
     * The MIME type of the content.
     */
    contentType?: pulumi.Input<string>;
    /**
     * The endpoint for the bucket used for s3 connections.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * The specific version of this object.
     */
    etag?: pulumi.Input<string>;
    /**
     * Whether the object should bypass deletion restrictions.
     */
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * The name of the uploaded object.
     */
    key?: pulumi.Input<string>;
    /**
     * The metadata of this object
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The target region that the bucket is in.
     */
    region?: pulumi.Input<string>;
    /**
     * The REQUIRED S3 secret key with access to the target bucket. If not specified with the resource, you must provide its
     * value by configuring the obj_secret_key, or, opting-in generating it implicitly at apply-time using obj_use_temp_keys at
     * provider-level.
     */
    secretKey?: pulumi.Input<string>;
    /**
     * The source file to upload.
     */
    source?: pulumi.Input<string>;
    /**
     * The version ID of this object.
     */
    versionId?: pulumi.Input<string>;
    /**
     * The website redirect location of this object.
     */
    websiteRedirect?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectStorageObject resource.
 */
export interface ObjectStorageObjectArgs {
    /**
     * The REQUIRED S3 access key with access to the target bucket. If not specified with the resource, you must provide its
     * value by configuring the obj_access_key, or, opting-in generating it implicitly at apply-time using obj_use_temp_keys at
     * provider-level.
     */
    accessKey?: pulumi.Input<string>;
    /**
     * The ACL config given to this object.
     */
    acl?: pulumi.Input<string>;
    /**
     * The target bucket to put this object in.
     */
    bucket: pulumi.Input<string>;
    /**
     * This cache_control configuration of this object.
     */
    cacheControl?: pulumi.Input<string>;
    /**
     * The target cluster that the bucket is in.
     *
     * @deprecated Deprecated
     */
    cluster?: pulumi.Input<string>;
    /**
     * The contents of the Object to upload.
     */
    content?: pulumi.Input<string>;
    /**
     * The base64 contents of the Object to upload.
     */
    contentBase64?: pulumi.Input<string>;
    /**
     * The content disposition configuration of this object.
     */
    contentDisposition?: pulumi.Input<string>;
    /**
     * The encoding of the content of this object.
     */
    contentEncoding?: pulumi.Input<string>;
    /**
     * The language metadata of this object.
     */
    contentLanguage?: pulumi.Input<string>;
    /**
     * The MIME type of the content.
     */
    contentType?: pulumi.Input<string>;
    /**
     * The endpoint for the bucket used for s3 connections.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * The specific version of this object.
     */
    etag?: pulumi.Input<string>;
    /**
     * Whether the object should bypass deletion restrictions.
     */
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * The name of the uploaded object.
     */
    key: pulumi.Input<string>;
    /**
     * The metadata of this object
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The target region that the bucket is in.
     */
    region?: pulumi.Input<string>;
    /**
     * The REQUIRED S3 secret key with access to the target bucket. If not specified with the resource, you must provide its
     * value by configuring the obj_secret_key, or, opting-in generating it implicitly at apply-time using obj_use_temp_keys at
     * provider-level.
     */
    secretKey?: pulumi.Input<string>;
    /**
     * The source file to upload.
     */
    source?: pulumi.Input<string>;
    /**
     * The website redirect location of this object.
     */
    websiteRedirect?: pulumi.Input<string>;
}
