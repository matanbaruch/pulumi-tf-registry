// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CryptoIpsecTransformSet extends pulumi.CustomResource {
    /**
     * Get an existing CryptoIpsecTransformSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CryptoIpsecTransformSetState, opts?: pulumi.CustomResourceOptions): CryptoIpsecTransformSet {
        return new CryptoIpsecTransformSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'iosxe:index/cryptoIpsecTransformSet:CryptoIpsecTransformSet';

    /**
     * Returns true if the given object is an instance of CryptoIpsecTransformSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CryptoIpsecTransformSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CryptoIpsecTransformSet.__pulumiType;
    }

    /**
     * A device name from the provider configuration.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * - Choices: `esp-3des`, `esp-aes`, `esp-des`, `esp-gcm`, `esp-gmac`, `esp-null`, `esp-seal`
     */
    public readonly esp!: pulumi.Output<string>;
    /**
     * - Choices: `esp-md5-hmac`, `esp-sha-hmac`, `esp-sha256-hmac`, `esp-sha384-hmac`, `esp-sha512-hmac`
     */
    public readonly espHmac!: pulumi.Output<string>;
    /**
     * tunnel (datagram encapsulation) mode
     */
    public readonly modeTunnel!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a CryptoIpsecTransformSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CryptoIpsecTransformSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CryptoIpsecTransformSetArgs | CryptoIpsecTransformSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CryptoIpsecTransformSetState | undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["esp"] = state ? state.esp : undefined;
            resourceInputs["espHmac"] = state ? state.espHmac : undefined;
            resourceInputs["modeTunnel"] = state ? state.modeTunnel : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as CryptoIpsecTransformSetArgs | undefined;
            if ((!args || args.esp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'esp'");
            }
            if ((!args || args.espHmac === undefined) && !opts.urn) {
                throw new Error("Missing required property 'espHmac'");
            }
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["esp"] = args ? args.esp : undefined;
            resourceInputs["espHmac"] = args ? args.espHmac : undefined;
            resourceInputs["modeTunnel"] = args ? args.modeTunnel : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CryptoIpsecTransformSet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CryptoIpsecTransformSet resources.
 */
export interface CryptoIpsecTransformSetState {
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * - Choices: `esp-3des`, `esp-aes`, `esp-des`, `esp-gcm`, `esp-gmac`, `esp-null`, `esp-seal`
     */
    esp?: pulumi.Input<string>;
    /**
     * - Choices: `esp-md5-hmac`, `esp-sha-hmac`, `esp-sha256-hmac`, `esp-sha384-hmac`, `esp-sha512-hmac`
     */
    espHmac?: pulumi.Input<string>;
    /**
     * tunnel (datagram encapsulation) mode
     */
    modeTunnel?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CryptoIpsecTransformSet resource.
 */
export interface CryptoIpsecTransformSetArgs {
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * - Choices: `esp-3des`, `esp-aes`, `esp-des`, `esp-gcm`, `esp-gmac`, `esp-null`, `esp-seal`
     */
    esp: pulumi.Input<string>;
    /**
     * - Choices: `esp-md5-hmac`, `esp-sha-hmac`, `esp-sha256-hmac`, `esp-sha384-hmac`, `esp-sha512-hmac`
     */
    espHmac: pulumi.Input<string>;
    /**
     * tunnel (datagram encapsulation) mode
     */
    modeTunnel?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
}
