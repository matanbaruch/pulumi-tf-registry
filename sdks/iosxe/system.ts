// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class System extends pulumi.CustomResource {
    /**
     * Get an existing System resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemState, opts?: pulumi.CustomResourceOptions): System {
        return new System(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'iosxe:index/system:System';

    /**
     * Returns true if the given object is an instance of System.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is System {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === System.__pulumiType;
    }

    /**
     * A device name from the provider configuration.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * Set system's network name
     */
    public readonly hostname!: pulumi.Output<string | undefined>;
    /**
     * select aa:nn format for BGP community
     */
    public readonly ipBgpCommunityNewFormat!: pulumi.Output<boolean | undefined>;
    /**
     * Enable IP Domain Name System hostname translation
     */
    public readonly ipDomainLookup!: pulumi.Output<boolean | undefined>;
    /**
     * Define the default domain name
     */
    public readonly ipDomainName!: pulumi.Output<string | undefined>;
    /**
     * Restrict http server access by access-class - Range: `1`-`99`
     */
    public readonly ipHttpAccessClass!: pulumi.Output<number | undefined>;
    /**
     * Use AAA access control methods
     */
    public readonly ipHttpAuthenticationAaa!: pulumi.Output<boolean | undefined>;
    /**
     * Set method list for command authorization
     */
    public readonly ipHttpAuthenticationAaaCommandAuthorizations!: pulumi.Output<outputs.SystemIpHttpAuthenticationAaaCommandAuthorization[] | undefined>;
    /**
     * Set method list for exec authorization
     */
    public readonly ipHttpAuthenticationAaaExecAuthorization!: pulumi.Output<string | undefined>;
    /**
     * Set method list for login authentication
     */
    public readonly ipHttpAuthenticationAaaLoginAuthentication!: pulumi.Output<string | undefined>;
    /**
     * Use local username and passwords
     */
    public readonly ipHttpAuthenticationLocal!: pulumi.Output<boolean | undefined>;
    /**
     * Set http client certificate secure trustpoint
     */
    public readonly ipHttpClientSecureTrustpoint!: pulumi.Output<string | undefined>;
    /**
     * Specify interface for source address in all HTTP(S) client connections
     */
    public readonly ipHttpClientSourceInterface!: pulumi.Output<string | undefined>;
    /**
     * Enable HTTP secure server
     */
    public readonly ipHttpSecureServer!: pulumi.Output<boolean | undefined>;
    /**
     * Set http secure server certificate trustpoint
     */
    public readonly ipHttpSecureTrustpoint!: pulumi.Output<string | undefined>;
    /**
     * Enable http server
     */
    public readonly ipHttpServer!: pulumi.Output<boolean | undefined>;
    /**
     * Set TLS version for HTTP secure server - Choices: `TLSv1.0`, `TLSv1.1`, `TLSv1.2`
     */
    public readonly ipHttpTlsVersion!: pulumi.Output<string | undefined>;
    /**
     * Enable IP multicast forwarding
     */
    public readonly ipMulticastRouting!: pulumi.Output<boolean | undefined>;
    /**
     * Distributed multicast switching
     */
    public readonly ipMulticastRoutingDistributed!: pulumi.Output<boolean | undefined>;
    /**
     * Enable or disable IP routing
     */
    public readonly ipRouting!: pulumi.Output<boolean | undefined>;
    /**
     * Process packets with source routing header options
     */
    public readonly ipSourceRoute!: pulumi.Output<boolean | undefined>;
    /**
     * Enable unicast routing
     */
    public readonly ipv6UnicastRouting!: pulumi.Output<boolean | undefined>;
    /**
     * Set delay between successive fail login - Range: `1`-`10`
     */
    public readonly loginDelay!: pulumi.Output<number | undefined>;
    /**
     * Set options for failed login attempt
     */
    public readonly loginOnFailure!: pulumi.Output<boolean | undefined>;
    /**
     * Generate syslogs on failure logins
     */
    public readonly loginOnFailureLog!: pulumi.Output<boolean | undefined>;
    /**
     * Set options for successful login attempt
     */
    public readonly loginOnSuccess!: pulumi.Output<boolean | undefined>;
    /**
     * Generate syslogs on successful logins
     */
    public readonly loginOnSuccessLog!: pulumi.Output<boolean | undefined>;
    /**
     * - Range: `1500`-`9198`
     */
    public readonly mtu!: pulumi.Output<number | undefined>;
    /**
     * Enable IP multicast forwarding, some XE devices use this option instead of `multicast_routing`.
     */
    public readonly multicastRoutingSwitch!: pulumi.Output<boolean | undefined>;
    /**
     * Select VPN Routing/Forwarding instance
     */
    public readonly multicastRoutingVrfs!: pulumi.Output<outputs.SystemMulticastRoutingVrf[] | undefined>;

    /**
     * Create a System resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemArgs | SystemState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemState | undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["ipBgpCommunityNewFormat"] = state ? state.ipBgpCommunityNewFormat : undefined;
            resourceInputs["ipDomainLookup"] = state ? state.ipDomainLookup : undefined;
            resourceInputs["ipDomainName"] = state ? state.ipDomainName : undefined;
            resourceInputs["ipHttpAccessClass"] = state ? state.ipHttpAccessClass : undefined;
            resourceInputs["ipHttpAuthenticationAaa"] = state ? state.ipHttpAuthenticationAaa : undefined;
            resourceInputs["ipHttpAuthenticationAaaCommandAuthorizations"] = state ? state.ipHttpAuthenticationAaaCommandAuthorizations : undefined;
            resourceInputs["ipHttpAuthenticationAaaExecAuthorization"] = state ? state.ipHttpAuthenticationAaaExecAuthorization : undefined;
            resourceInputs["ipHttpAuthenticationAaaLoginAuthentication"] = state ? state.ipHttpAuthenticationAaaLoginAuthentication : undefined;
            resourceInputs["ipHttpAuthenticationLocal"] = state ? state.ipHttpAuthenticationLocal : undefined;
            resourceInputs["ipHttpClientSecureTrustpoint"] = state ? state.ipHttpClientSecureTrustpoint : undefined;
            resourceInputs["ipHttpClientSourceInterface"] = state ? state.ipHttpClientSourceInterface : undefined;
            resourceInputs["ipHttpSecureServer"] = state ? state.ipHttpSecureServer : undefined;
            resourceInputs["ipHttpSecureTrustpoint"] = state ? state.ipHttpSecureTrustpoint : undefined;
            resourceInputs["ipHttpServer"] = state ? state.ipHttpServer : undefined;
            resourceInputs["ipHttpTlsVersion"] = state ? state.ipHttpTlsVersion : undefined;
            resourceInputs["ipMulticastRouting"] = state ? state.ipMulticastRouting : undefined;
            resourceInputs["ipMulticastRoutingDistributed"] = state ? state.ipMulticastRoutingDistributed : undefined;
            resourceInputs["ipRouting"] = state ? state.ipRouting : undefined;
            resourceInputs["ipSourceRoute"] = state ? state.ipSourceRoute : undefined;
            resourceInputs["ipv6UnicastRouting"] = state ? state.ipv6UnicastRouting : undefined;
            resourceInputs["loginDelay"] = state ? state.loginDelay : undefined;
            resourceInputs["loginOnFailure"] = state ? state.loginOnFailure : undefined;
            resourceInputs["loginOnFailureLog"] = state ? state.loginOnFailureLog : undefined;
            resourceInputs["loginOnSuccess"] = state ? state.loginOnSuccess : undefined;
            resourceInputs["loginOnSuccessLog"] = state ? state.loginOnSuccessLog : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["multicastRoutingSwitch"] = state ? state.multicastRoutingSwitch : undefined;
            resourceInputs["multicastRoutingVrfs"] = state ? state.multicastRoutingVrfs : undefined;
        } else {
            const args = argsOrState as SystemArgs | undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["ipBgpCommunityNewFormat"] = args ? args.ipBgpCommunityNewFormat : undefined;
            resourceInputs["ipDomainLookup"] = args ? args.ipDomainLookup : undefined;
            resourceInputs["ipDomainName"] = args ? args.ipDomainName : undefined;
            resourceInputs["ipHttpAccessClass"] = args ? args.ipHttpAccessClass : undefined;
            resourceInputs["ipHttpAuthenticationAaa"] = args ? args.ipHttpAuthenticationAaa : undefined;
            resourceInputs["ipHttpAuthenticationAaaCommandAuthorizations"] = args ? args.ipHttpAuthenticationAaaCommandAuthorizations : undefined;
            resourceInputs["ipHttpAuthenticationAaaExecAuthorization"] = args ? args.ipHttpAuthenticationAaaExecAuthorization : undefined;
            resourceInputs["ipHttpAuthenticationAaaLoginAuthentication"] = args ? args.ipHttpAuthenticationAaaLoginAuthentication : undefined;
            resourceInputs["ipHttpAuthenticationLocal"] = args ? args.ipHttpAuthenticationLocal : undefined;
            resourceInputs["ipHttpClientSecureTrustpoint"] = args ? args.ipHttpClientSecureTrustpoint : undefined;
            resourceInputs["ipHttpClientSourceInterface"] = args ? args.ipHttpClientSourceInterface : undefined;
            resourceInputs["ipHttpSecureServer"] = args ? args.ipHttpSecureServer : undefined;
            resourceInputs["ipHttpSecureTrustpoint"] = args ? args.ipHttpSecureTrustpoint : undefined;
            resourceInputs["ipHttpServer"] = args ? args.ipHttpServer : undefined;
            resourceInputs["ipHttpTlsVersion"] = args ? args.ipHttpTlsVersion : undefined;
            resourceInputs["ipMulticastRouting"] = args ? args.ipMulticastRouting : undefined;
            resourceInputs["ipMulticastRoutingDistributed"] = args ? args.ipMulticastRoutingDistributed : undefined;
            resourceInputs["ipRouting"] = args ? args.ipRouting : undefined;
            resourceInputs["ipSourceRoute"] = args ? args.ipSourceRoute : undefined;
            resourceInputs["ipv6UnicastRouting"] = args ? args.ipv6UnicastRouting : undefined;
            resourceInputs["loginDelay"] = args ? args.loginDelay : undefined;
            resourceInputs["loginOnFailure"] = args ? args.loginOnFailure : undefined;
            resourceInputs["loginOnFailureLog"] = args ? args.loginOnFailureLog : undefined;
            resourceInputs["loginOnSuccess"] = args ? args.loginOnSuccess : undefined;
            resourceInputs["loginOnSuccessLog"] = args ? args.loginOnSuccessLog : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["multicastRoutingSwitch"] = args ? args.multicastRoutingSwitch : undefined;
            resourceInputs["multicastRoutingVrfs"] = args ? args.multicastRoutingVrfs : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(System.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering System resources.
 */
export interface SystemState {
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Set system's network name
     */
    hostname?: pulumi.Input<string>;
    /**
     * select aa:nn format for BGP community
     */
    ipBgpCommunityNewFormat?: pulumi.Input<boolean>;
    /**
     * Enable IP Domain Name System hostname translation
     */
    ipDomainLookup?: pulumi.Input<boolean>;
    /**
     * Define the default domain name
     */
    ipDomainName?: pulumi.Input<string>;
    /**
     * Restrict http server access by access-class - Range: `1`-`99`
     */
    ipHttpAccessClass?: pulumi.Input<number>;
    /**
     * Use AAA access control methods
     */
    ipHttpAuthenticationAaa?: pulumi.Input<boolean>;
    /**
     * Set method list for command authorization
     */
    ipHttpAuthenticationAaaCommandAuthorizations?: pulumi.Input<pulumi.Input<inputs.SystemIpHttpAuthenticationAaaCommandAuthorization>[]>;
    /**
     * Set method list for exec authorization
     */
    ipHttpAuthenticationAaaExecAuthorization?: pulumi.Input<string>;
    /**
     * Set method list for login authentication
     */
    ipHttpAuthenticationAaaLoginAuthentication?: pulumi.Input<string>;
    /**
     * Use local username and passwords
     */
    ipHttpAuthenticationLocal?: pulumi.Input<boolean>;
    /**
     * Set http client certificate secure trustpoint
     */
    ipHttpClientSecureTrustpoint?: pulumi.Input<string>;
    /**
     * Specify interface for source address in all HTTP(S) client connections
     */
    ipHttpClientSourceInterface?: pulumi.Input<string>;
    /**
     * Enable HTTP secure server
     */
    ipHttpSecureServer?: pulumi.Input<boolean>;
    /**
     * Set http secure server certificate trustpoint
     */
    ipHttpSecureTrustpoint?: pulumi.Input<string>;
    /**
     * Enable http server
     */
    ipHttpServer?: pulumi.Input<boolean>;
    /**
     * Set TLS version for HTTP secure server - Choices: `TLSv1.0`, `TLSv1.1`, `TLSv1.2`
     */
    ipHttpTlsVersion?: pulumi.Input<string>;
    /**
     * Enable IP multicast forwarding
     */
    ipMulticastRouting?: pulumi.Input<boolean>;
    /**
     * Distributed multicast switching
     */
    ipMulticastRoutingDistributed?: pulumi.Input<boolean>;
    /**
     * Enable or disable IP routing
     */
    ipRouting?: pulumi.Input<boolean>;
    /**
     * Process packets with source routing header options
     */
    ipSourceRoute?: pulumi.Input<boolean>;
    /**
     * Enable unicast routing
     */
    ipv6UnicastRouting?: pulumi.Input<boolean>;
    /**
     * Set delay between successive fail login - Range: `1`-`10`
     */
    loginDelay?: pulumi.Input<number>;
    /**
     * Set options for failed login attempt
     */
    loginOnFailure?: pulumi.Input<boolean>;
    /**
     * Generate syslogs on failure logins
     */
    loginOnFailureLog?: pulumi.Input<boolean>;
    /**
     * Set options for successful login attempt
     */
    loginOnSuccess?: pulumi.Input<boolean>;
    /**
     * Generate syslogs on successful logins
     */
    loginOnSuccessLog?: pulumi.Input<boolean>;
    /**
     * - Range: `1500`-`9198`
     */
    mtu?: pulumi.Input<number>;
    /**
     * Enable IP multicast forwarding, some XE devices use this option instead of `multicast_routing`.
     */
    multicastRoutingSwitch?: pulumi.Input<boolean>;
    /**
     * Select VPN Routing/Forwarding instance
     */
    multicastRoutingVrfs?: pulumi.Input<pulumi.Input<inputs.SystemMulticastRoutingVrf>[]>;
}

/**
 * The set of arguments for constructing a System resource.
 */
export interface SystemArgs {
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Set system's network name
     */
    hostname?: pulumi.Input<string>;
    /**
     * select aa:nn format for BGP community
     */
    ipBgpCommunityNewFormat?: pulumi.Input<boolean>;
    /**
     * Enable IP Domain Name System hostname translation
     */
    ipDomainLookup?: pulumi.Input<boolean>;
    /**
     * Define the default domain name
     */
    ipDomainName?: pulumi.Input<string>;
    /**
     * Restrict http server access by access-class - Range: `1`-`99`
     */
    ipHttpAccessClass?: pulumi.Input<number>;
    /**
     * Use AAA access control methods
     */
    ipHttpAuthenticationAaa?: pulumi.Input<boolean>;
    /**
     * Set method list for command authorization
     */
    ipHttpAuthenticationAaaCommandAuthorizations?: pulumi.Input<pulumi.Input<inputs.SystemIpHttpAuthenticationAaaCommandAuthorization>[]>;
    /**
     * Set method list for exec authorization
     */
    ipHttpAuthenticationAaaExecAuthorization?: pulumi.Input<string>;
    /**
     * Set method list for login authentication
     */
    ipHttpAuthenticationAaaLoginAuthentication?: pulumi.Input<string>;
    /**
     * Use local username and passwords
     */
    ipHttpAuthenticationLocal?: pulumi.Input<boolean>;
    /**
     * Set http client certificate secure trustpoint
     */
    ipHttpClientSecureTrustpoint?: pulumi.Input<string>;
    /**
     * Specify interface for source address in all HTTP(S) client connections
     */
    ipHttpClientSourceInterface?: pulumi.Input<string>;
    /**
     * Enable HTTP secure server
     */
    ipHttpSecureServer?: pulumi.Input<boolean>;
    /**
     * Set http secure server certificate trustpoint
     */
    ipHttpSecureTrustpoint?: pulumi.Input<string>;
    /**
     * Enable http server
     */
    ipHttpServer?: pulumi.Input<boolean>;
    /**
     * Set TLS version for HTTP secure server - Choices: `TLSv1.0`, `TLSv1.1`, `TLSv1.2`
     */
    ipHttpTlsVersion?: pulumi.Input<string>;
    /**
     * Enable IP multicast forwarding
     */
    ipMulticastRouting?: pulumi.Input<boolean>;
    /**
     * Distributed multicast switching
     */
    ipMulticastRoutingDistributed?: pulumi.Input<boolean>;
    /**
     * Enable or disable IP routing
     */
    ipRouting?: pulumi.Input<boolean>;
    /**
     * Process packets with source routing header options
     */
    ipSourceRoute?: pulumi.Input<boolean>;
    /**
     * Enable unicast routing
     */
    ipv6UnicastRouting?: pulumi.Input<boolean>;
    /**
     * Set delay between successive fail login - Range: `1`-`10`
     */
    loginDelay?: pulumi.Input<number>;
    /**
     * Set options for failed login attempt
     */
    loginOnFailure?: pulumi.Input<boolean>;
    /**
     * Generate syslogs on failure logins
     */
    loginOnFailureLog?: pulumi.Input<boolean>;
    /**
     * Set options for successful login attempt
     */
    loginOnSuccess?: pulumi.Input<boolean>;
    /**
     * Generate syslogs on successful logins
     */
    loginOnSuccessLog?: pulumi.Input<boolean>;
    /**
     * - Range: `1500`-`9198`
     */
    mtu?: pulumi.Input<number>;
    /**
     * Enable IP multicast forwarding, some XE devices use this option instead of `multicast_routing`.
     */
    multicastRoutingSwitch?: pulumi.Input<boolean>;
    /**
     * Select VPN Routing/Forwarding instance
     */
    multicastRoutingVrfs?: pulumi.Input<pulumi.Input<inputs.SystemMulticastRoutingVrf>[]>;
}
