// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Service extends pulumi.CustomResource {
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceState, opts?: pulumi.CustomResourceOptions): Service {
        return new Service(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'iosxe:index/service:Service';

    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Service {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Service.__pulumiType;
    }

    /**
     * Enable call-home service
     */
    public readonly callHome!: pulumi.Output<boolean | undefined>;
    /**
     * Compress the configuration file
     */
    public readonly compressConfig!: pulumi.Output<boolean | undefined>;
    /**
     * A device name from the provider configuration.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * Enable DHCP server and relay agent
     */
    public readonly dhcp!: pulumi.Output<boolean | undefined>;
    /**
     * Enable PAD commands
     */
    public readonly pad!: pulumi.Output<boolean | undefined>;
    /**
     * Encrypt system passwords
     */
    public readonly passwordEncryption!: pulumi.Output<boolean | undefined>;
    /**
     * Enable password recovery
     */
    public readonly passwordRecovery!: pulumi.Output<boolean | undefined>;
    /**
     * Stamp logger messages with a sequence number
     */
    public readonly sequenceNumbers!: pulumi.Output<boolean | undefined>;
    /**
     * Generate keepalives on idle incoming network connections
     */
    public readonly tcpKeepalivesIn!: pulumi.Output<boolean | undefined>;
    /**
     * Generate keepalives on idle outgoing network connections
     */
    public readonly tcpKeepalivesOut!: pulumi.Output<boolean | undefined>;
    /**
     * Timestamp debug/log messages
     */
    public readonly timestamps!: pulumi.Output<boolean | undefined>;
    /**
     * Timestamp debug messages
     */
    public readonly timestampsDebug!: pulumi.Output<boolean | undefined>;
    /**
     * Timestamp with date and time
     */
    public readonly timestampsDebugDatetime!: pulumi.Output<boolean | undefined>;
    /**
     * Use local time zone for timestamps
     */
    public readonly timestampsDebugDatetimeLocaltime!: pulumi.Output<boolean | undefined>;
    /**
     * Include milliseconds in timestamp
     */
    public readonly timestampsDebugDatetimeMsec!: pulumi.Output<boolean | undefined>;
    /**
     * Add time zone information to timestamp
     */
    public readonly timestampsDebugDatetimeShowTimezone!: pulumi.Output<boolean | undefined>;
    /**
     * Include year in timestamp
     */
    public readonly timestampsDebugDatetimeYear!: pulumi.Output<boolean | undefined>;
    /**
     * Timestamp with system uptime
     */
    public readonly timestampsDebugUptime!: pulumi.Output<boolean | undefined>;
    /**
     * Timestamp log messages
     */
    public readonly timestampsLog!: pulumi.Output<boolean | undefined>;
    /**
     * Timestamp with date and time
     */
    public readonly timestampsLogDatetime!: pulumi.Output<boolean | undefined>;
    /**
     * Use local time zone for timestamps
     */
    public readonly timestampsLogDatetimeLocaltime!: pulumi.Output<boolean | undefined>;
    /**
     * Include milliseconds in timestamp
     */
    public readonly timestampsLogDatetimeMsec!: pulumi.Output<boolean | undefined>;
    /**
     * Add time zone information to timestamp
     */
    public readonly timestampsLogDatetimeShowTimezone!: pulumi.Output<boolean | undefined>;
    /**
     * Include year in timestamp
     */
    public readonly timestampsLogDatetimeYear!: pulumi.Output<boolean | undefined>;
    /**
     * Timestamp with system uptime
     */
    public readonly timestampsLogUptime!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Service resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceArgs | ServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceState | undefined;
            resourceInputs["callHome"] = state ? state.callHome : undefined;
            resourceInputs["compressConfig"] = state ? state.compressConfig : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["dhcp"] = state ? state.dhcp : undefined;
            resourceInputs["pad"] = state ? state.pad : undefined;
            resourceInputs["passwordEncryption"] = state ? state.passwordEncryption : undefined;
            resourceInputs["passwordRecovery"] = state ? state.passwordRecovery : undefined;
            resourceInputs["sequenceNumbers"] = state ? state.sequenceNumbers : undefined;
            resourceInputs["tcpKeepalivesIn"] = state ? state.tcpKeepalivesIn : undefined;
            resourceInputs["tcpKeepalivesOut"] = state ? state.tcpKeepalivesOut : undefined;
            resourceInputs["timestamps"] = state ? state.timestamps : undefined;
            resourceInputs["timestampsDebug"] = state ? state.timestampsDebug : undefined;
            resourceInputs["timestampsDebugDatetime"] = state ? state.timestampsDebugDatetime : undefined;
            resourceInputs["timestampsDebugDatetimeLocaltime"] = state ? state.timestampsDebugDatetimeLocaltime : undefined;
            resourceInputs["timestampsDebugDatetimeMsec"] = state ? state.timestampsDebugDatetimeMsec : undefined;
            resourceInputs["timestampsDebugDatetimeShowTimezone"] = state ? state.timestampsDebugDatetimeShowTimezone : undefined;
            resourceInputs["timestampsDebugDatetimeYear"] = state ? state.timestampsDebugDatetimeYear : undefined;
            resourceInputs["timestampsDebugUptime"] = state ? state.timestampsDebugUptime : undefined;
            resourceInputs["timestampsLog"] = state ? state.timestampsLog : undefined;
            resourceInputs["timestampsLogDatetime"] = state ? state.timestampsLogDatetime : undefined;
            resourceInputs["timestampsLogDatetimeLocaltime"] = state ? state.timestampsLogDatetimeLocaltime : undefined;
            resourceInputs["timestampsLogDatetimeMsec"] = state ? state.timestampsLogDatetimeMsec : undefined;
            resourceInputs["timestampsLogDatetimeShowTimezone"] = state ? state.timestampsLogDatetimeShowTimezone : undefined;
            resourceInputs["timestampsLogDatetimeYear"] = state ? state.timestampsLogDatetimeYear : undefined;
            resourceInputs["timestampsLogUptime"] = state ? state.timestampsLogUptime : undefined;
        } else {
            const args = argsOrState as ServiceArgs | undefined;
            resourceInputs["callHome"] = args ? args.callHome : undefined;
            resourceInputs["compressConfig"] = args ? args.compressConfig : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["dhcp"] = args ? args.dhcp : undefined;
            resourceInputs["pad"] = args ? args.pad : undefined;
            resourceInputs["passwordEncryption"] = args ? args.passwordEncryption : undefined;
            resourceInputs["passwordRecovery"] = args ? args.passwordRecovery : undefined;
            resourceInputs["sequenceNumbers"] = args ? args.sequenceNumbers : undefined;
            resourceInputs["tcpKeepalivesIn"] = args ? args.tcpKeepalivesIn : undefined;
            resourceInputs["tcpKeepalivesOut"] = args ? args.tcpKeepalivesOut : undefined;
            resourceInputs["timestamps"] = args ? args.timestamps : undefined;
            resourceInputs["timestampsDebug"] = args ? args.timestampsDebug : undefined;
            resourceInputs["timestampsDebugDatetime"] = args ? args.timestampsDebugDatetime : undefined;
            resourceInputs["timestampsDebugDatetimeLocaltime"] = args ? args.timestampsDebugDatetimeLocaltime : undefined;
            resourceInputs["timestampsDebugDatetimeMsec"] = args ? args.timestampsDebugDatetimeMsec : undefined;
            resourceInputs["timestampsDebugDatetimeShowTimezone"] = args ? args.timestampsDebugDatetimeShowTimezone : undefined;
            resourceInputs["timestampsDebugDatetimeYear"] = args ? args.timestampsDebugDatetimeYear : undefined;
            resourceInputs["timestampsDebugUptime"] = args ? args.timestampsDebugUptime : undefined;
            resourceInputs["timestampsLog"] = args ? args.timestampsLog : undefined;
            resourceInputs["timestampsLogDatetime"] = args ? args.timestampsLogDatetime : undefined;
            resourceInputs["timestampsLogDatetimeLocaltime"] = args ? args.timestampsLogDatetimeLocaltime : undefined;
            resourceInputs["timestampsLogDatetimeMsec"] = args ? args.timestampsLogDatetimeMsec : undefined;
            resourceInputs["timestampsLogDatetimeShowTimezone"] = args ? args.timestampsLogDatetimeShowTimezone : undefined;
            resourceInputs["timestampsLogDatetimeYear"] = args ? args.timestampsLogDatetimeYear : undefined;
            resourceInputs["timestampsLogUptime"] = args ? args.timestampsLogUptime : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Service.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Service resources.
 */
export interface ServiceState {
    /**
     * Enable call-home service
     */
    callHome?: pulumi.Input<boolean>;
    /**
     * Compress the configuration file
     */
    compressConfig?: pulumi.Input<boolean>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Enable DHCP server and relay agent
     */
    dhcp?: pulumi.Input<boolean>;
    /**
     * Enable PAD commands
     */
    pad?: pulumi.Input<boolean>;
    /**
     * Encrypt system passwords
     */
    passwordEncryption?: pulumi.Input<boolean>;
    /**
     * Enable password recovery
     */
    passwordRecovery?: pulumi.Input<boolean>;
    /**
     * Stamp logger messages with a sequence number
     */
    sequenceNumbers?: pulumi.Input<boolean>;
    /**
     * Generate keepalives on idle incoming network connections
     */
    tcpKeepalivesIn?: pulumi.Input<boolean>;
    /**
     * Generate keepalives on idle outgoing network connections
     */
    tcpKeepalivesOut?: pulumi.Input<boolean>;
    /**
     * Timestamp debug/log messages
     */
    timestamps?: pulumi.Input<boolean>;
    /**
     * Timestamp debug messages
     */
    timestampsDebug?: pulumi.Input<boolean>;
    /**
     * Timestamp with date and time
     */
    timestampsDebugDatetime?: pulumi.Input<boolean>;
    /**
     * Use local time zone for timestamps
     */
    timestampsDebugDatetimeLocaltime?: pulumi.Input<boolean>;
    /**
     * Include milliseconds in timestamp
     */
    timestampsDebugDatetimeMsec?: pulumi.Input<boolean>;
    /**
     * Add time zone information to timestamp
     */
    timestampsDebugDatetimeShowTimezone?: pulumi.Input<boolean>;
    /**
     * Include year in timestamp
     */
    timestampsDebugDatetimeYear?: pulumi.Input<boolean>;
    /**
     * Timestamp with system uptime
     */
    timestampsDebugUptime?: pulumi.Input<boolean>;
    /**
     * Timestamp log messages
     */
    timestampsLog?: pulumi.Input<boolean>;
    /**
     * Timestamp with date and time
     */
    timestampsLogDatetime?: pulumi.Input<boolean>;
    /**
     * Use local time zone for timestamps
     */
    timestampsLogDatetimeLocaltime?: pulumi.Input<boolean>;
    /**
     * Include milliseconds in timestamp
     */
    timestampsLogDatetimeMsec?: pulumi.Input<boolean>;
    /**
     * Add time zone information to timestamp
     */
    timestampsLogDatetimeShowTimezone?: pulumi.Input<boolean>;
    /**
     * Include year in timestamp
     */
    timestampsLogDatetimeYear?: pulumi.Input<boolean>;
    /**
     * Timestamp with system uptime
     */
    timestampsLogUptime?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Service resource.
 */
export interface ServiceArgs {
    /**
     * Enable call-home service
     */
    callHome?: pulumi.Input<boolean>;
    /**
     * Compress the configuration file
     */
    compressConfig?: pulumi.Input<boolean>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Enable DHCP server and relay agent
     */
    dhcp?: pulumi.Input<boolean>;
    /**
     * Enable PAD commands
     */
    pad?: pulumi.Input<boolean>;
    /**
     * Encrypt system passwords
     */
    passwordEncryption?: pulumi.Input<boolean>;
    /**
     * Enable password recovery
     */
    passwordRecovery?: pulumi.Input<boolean>;
    /**
     * Stamp logger messages with a sequence number
     */
    sequenceNumbers?: pulumi.Input<boolean>;
    /**
     * Generate keepalives on idle incoming network connections
     */
    tcpKeepalivesIn?: pulumi.Input<boolean>;
    /**
     * Generate keepalives on idle outgoing network connections
     */
    tcpKeepalivesOut?: pulumi.Input<boolean>;
    /**
     * Timestamp debug/log messages
     */
    timestamps?: pulumi.Input<boolean>;
    /**
     * Timestamp debug messages
     */
    timestampsDebug?: pulumi.Input<boolean>;
    /**
     * Timestamp with date and time
     */
    timestampsDebugDatetime?: pulumi.Input<boolean>;
    /**
     * Use local time zone for timestamps
     */
    timestampsDebugDatetimeLocaltime?: pulumi.Input<boolean>;
    /**
     * Include milliseconds in timestamp
     */
    timestampsDebugDatetimeMsec?: pulumi.Input<boolean>;
    /**
     * Add time zone information to timestamp
     */
    timestampsDebugDatetimeShowTimezone?: pulumi.Input<boolean>;
    /**
     * Include year in timestamp
     */
    timestampsDebugDatetimeYear?: pulumi.Input<boolean>;
    /**
     * Timestamp with system uptime
     */
    timestampsDebugUptime?: pulumi.Input<boolean>;
    /**
     * Timestamp log messages
     */
    timestampsLog?: pulumi.Input<boolean>;
    /**
     * Timestamp with date and time
     */
    timestampsLogDatetime?: pulumi.Input<boolean>;
    /**
     * Use local time zone for timestamps
     */
    timestampsLogDatetimeLocaltime?: pulumi.Input<boolean>;
    /**
     * Include milliseconds in timestamp
     */
    timestampsLogDatetimeMsec?: pulumi.Input<boolean>;
    /**
     * Add time zone information to timestamp
     */
    timestampsLogDatetimeShowTimezone?: pulumi.Input<boolean>;
    /**
     * Include year in timestamp
     */
    timestampsLogDatetimeYear?: pulumi.Input<boolean>;
    /**
     * Timestamp with system uptime
     */
    timestampsLogUptime?: pulumi.Input<boolean>;
}
