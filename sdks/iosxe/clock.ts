// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Clock extends pulumi.CustomResource {
    /**
     * Get an existing Clock resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClockState, opts?: pulumi.CustomResourceOptions): Clock {
        return new Clock(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'iosxe:index/clock:Clock';

    /**
     * Returns true if the given object is an instance of Clock.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Clock {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Clock.__pulumiType;
    }

    /**
     * Calendar time is authoritative
     */
    public readonly calendarValid!: pulumi.Output<boolean | undefined>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    public readonly deleteMode!: pulumi.Output<string | undefined>;
    /**
     * A device name from the provider configuration.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * Configure absolute summer time
     */
    public readonly summerTimeDate!: pulumi.Output<boolean | undefined>;
    /**
     * - Range: `1`-`31`
     */
    public readonly summerTimeDateEndDay!: pulumi.Output<number | undefined>;
    /**
     * - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
     */
    public readonly summerTimeDateEndMonth!: pulumi.Output<string | undefined>;
    public readonly summerTimeDateEndTime!: pulumi.Output<string | undefined>;
    /**
     * - Range: `1993`-`2035`
     */
    public readonly summerTimeDateEndYear!: pulumi.Output<number | undefined>;
    /**
     * - Range: `1`-`1440`
     */
    public readonly summerTimeDateOffset!: pulumi.Output<number | undefined>;
    /**
     * - Range: `1`-`31`
     */
    public readonly summerTimeDateStartDay!: pulumi.Output<number | undefined>;
    /**
     * - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
     */
    public readonly summerTimeDateStartMonth!: pulumi.Output<string | undefined>;
    public readonly summerTimeDateStartTime!: pulumi.Output<string | undefined>;
    /**
     * - Range: `1993`-`2035`
     */
    public readonly summerTimeDateStartYear!: pulumi.Output<number | undefined>;
    /**
     * Configure recurring summer time
     */
    public readonly summerTimeRecurring!: pulumi.Output<boolean | undefined>;
    /**
     * - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
     */
    public readonly summerTimeRecurringEndMonth!: pulumi.Output<string | undefined>;
    public readonly summerTimeRecurringEndTime!: pulumi.Output<string | undefined>;
    public readonly summerTimeRecurringEndWeek!: pulumi.Output<string | undefined>;
    /**
     * - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
     */
    public readonly summerTimeRecurringEndWeekday!: pulumi.Output<string | undefined>;
    /**
     * - Range: `1`-`1440`
     */
    public readonly summerTimeRecurringOffset!: pulumi.Output<number | undefined>;
    /**
     * - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
     */
    public readonly summerTimeRecurringStartMonth!: pulumi.Output<string | undefined>;
    public readonly summerTimeRecurringStartTime!: pulumi.Output<string | undefined>;
    public readonly summerTimeRecurringStartWeek!: pulumi.Output<string | undefined>;
    /**
     * - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
     */
    public readonly summerTimeRecurringStartWeekday!: pulumi.Output<string | undefined>;
    /**
     * Name of time zone in summer
     */
    public readonly summerTimeZone!: pulumi.Output<string | undefined>;

    /**
     * Create a Clock resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ClockArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClockArgs | ClockState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClockState | undefined;
            resourceInputs["calendarValid"] = state ? state.calendarValid : undefined;
            resourceInputs["deleteMode"] = state ? state.deleteMode : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["summerTimeDate"] = state ? state.summerTimeDate : undefined;
            resourceInputs["summerTimeDateEndDay"] = state ? state.summerTimeDateEndDay : undefined;
            resourceInputs["summerTimeDateEndMonth"] = state ? state.summerTimeDateEndMonth : undefined;
            resourceInputs["summerTimeDateEndTime"] = state ? state.summerTimeDateEndTime : undefined;
            resourceInputs["summerTimeDateEndYear"] = state ? state.summerTimeDateEndYear : undefined;
            resourceInputs["summerTimeDateOffset"] = state ? state.summerTimeDateOffset : undefined;
            resourceInputs["summerTimeDateStartDay"] = state ? state.summerTimeDateStartDay : undefined;
            resourceInputs["summerTimeDateStartMonth"] = state ? state.summerTimeDateStartMonth : undefined;
            resourceInputs["summerTimeDateStartTime"] = state ? state.summerTimeDateStartTime : undefined;
            resourceInputs["summerTimeDateStartYear"] = state ? state.summerTimeDateStartYear : undefined;
            resourceInputs["summerTimeRecurring"] = state ? state.summerTimeRecurring : undefined;
            resourceInputs["summerTimeRecurringEndMonth"] = state ? state.summerTimeRecurringEndMonth : undefined;
            resourceInputs["summerTimeRecurringEndTime"] = state ? state.summerTimeRecurringEndTime : undefined;
            resourceInputs["summerTimeRecurringEndWeek"] = state ? state.summerTimeRecurringEndWeek : undefined;
            resourceInputs["summerTimeRecurringEndWeekday"] = state ? state.summerTimeRecurringEndWeekday : undefined;
            resourceInputs["summerTimeRecurringOffset"] = state ? state.summerTimeRecurringOffset : undefined;
            resourceInputs["summerTimeRecurringStartMonth"] = state ? state.summerTimeRecurringStartMonth : undefined;
            resourceInputs["summerTimeRecurringStartTime"] = state ? state.summerTimeRecurringStartTime : undefined;
            resourceInputs["summerTimeRecurringStartWeek"] = state ? state.summerTimeRecurringStartWeek : undefined;
            resourceInputs["summerTimeRecurringStartWeekday"] = state ? state.summerTimeRecurringStartWeekday : undefined;
            resourceInputs["summerTimeZone"] = state ? state.summerTimeZone : undefined;
        } else {
            const args = argsOrState as ClockArgs | undefined;
            resourceInputs["calendarValid"] = args ? args.calendarValid : undefined;
            resourceInputs["deleteMode"] = args ? args.deleteMode : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["summerTimeDate"] = args ? args.summerTimeDate : undefined;
            resourceInputs["summerTimeDateEndDay"] = args ? args.summerTimeDateEndDay : undefined;
            resourceInputs["summerTimeDateEndMonth"] = args ? args.summerTimeDateEndMonth : undefined;
            resourceInputs["summerTimeDateEndTime"] = args ? args.summerTimeDateEndTime : undefined;
            resourceInputs["summerTimeDateEndYear"] = args ? args.summerTimeDateEndYear : undefined;
            resourceInputs["summerTimeDateOffset"] = args ? args.summerTimeDateOffset : undefined;
            resourceInputs["summerTimeDateStartDay"] = args ? args.summerTimeDateStartDay : undefined;
            resourceInputs["summerTimeDateStartMonth"] = args ? args.summerTimeDateStartMonth : undefined;
            resourceInputs["summerTimeDateStartTime"] = args ? args.summerTimeDateStartTime : undefined;
            resourceInputs["summerTimeDateStartYear"] = args ? args.summerTimeDateStartYear : undefined;
            resourceInputs["summerTimeRecurring"] = args ? args.summerTimeRecurring : undefined;
            resourceInputs["summerTimeRecurringEndMonth"] = args ? args.summerTimeRecurringEndMonth : undefined;
            resourceInputs["summerTimeRecurringEndTime"] = args ? args.summerTimeRecurringEndTime : undefined;
            resourceInputs["summerTimeRecurringEndWeek"] = args ? args.summerTimeRecurringEndWeek : undefined;
            resourceInputs["summerTimeRecurringEndWeekday"] = args ? args.summerTimeRecurringEndWeekday : undefined;
            resourceInputs["summerTimeRecurringOffset"] = args ? args.summerTimeRecurringOffset : undefined;
            resourceInputs["summerTimeRecurringStartMonth"] = args ? args.summerTimeRecurringStartMonth : undefined;
            resourceInputs["summerTimeRecurringStartTime"] = args ? args.summerTimeRecurringStartTime : undefined;
            resourceInputs["summerTimeRecurringStartWeek"] = args ? args.summerTimeRecurringStartWeek : undefined;
            resourceInputs["summerTimeRecurringStartWeekday"] = args ? args.summerTimeRecurringStartWeekday : undefined;
            resourceInputs["summerTimeZone"] = args ? args.summerTimeZone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Clock.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Clock resources.
 */
export interface ClockState {
    /**
     * Calendar time is authoritative
     */
    calendarValid?: pulumi.Input<boolean>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Configure absolute summer time
     */
    summerTimeDate?: pulumi.Input<boolean>;
    /**
     * - Range: `1`-`31`
     */
    summerTimeDateEndDay?: pulumi.Input<number>;
    /**
     * - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
     */
    summerTimeDateEndMonth?: pulumi.Input<string>;
    summerTimeDateEndTime?: pulumi.Input<string>;
    /**
     * - Range: `1993`-`2035`
     */
    summerTimeDateEndYear?: pulumi.Input<number>;
    /**
     * - Range: `1`-`1440`
     */
    summerTimeDateOffset?: pulumi.Input<number>;
    /**
     * - Range: `1`-`31`
     */
    summerTimeDateStartDay?: pulumi.Input<number>;
    /**
     * - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
     */
    summerTimeDateStartMonth?: pulumi.Input<string>;
    summerTimeDateStartTime?: pulumi.Input<string>;
    /**
     * - Range: `1993`-`2035`
     */
    summerTimeDateStartYear?: pulumi.Input<number>;
    /**
     * Configure recurring summer time
     */
    summerTimeRecurring?: pulumi.Input<boolean>;
    /**
     * - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
     */
    summerTimeRecurringEndMonth?: pulumi.Input<string>;
    summerTimeRecurringEndTime?: pulumi.Input<string>;
    summerTimeRecurringEndWeek?: pulumi.Input<string>;
    /**
     * - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
     */
    summerTimeRecurringEndWeekday?: pulumi.Input<string>;
    /**
     * - Range: `1`-`1440`
     */
    summerTimeRecurringOffset?: pulumi.Input<number>;
    /**
     * - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
     */
    summerTimeRecurringStartMonth?: pulumi.Input<string>;
    summerTimeRecurringStartTime?: pulumi.Input<string>;
    summerTimeRecurringStartWeek?: pulumi.Input<string>;
    /**
     * - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
     */
    summerTimeRecurringStartWeekday?: pulumi.Input<string>;
    /**
     * Name of time zone in summer
     */
    summerTimeZone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Clock resource.
 */
export interface ClockArgs {
    /**
     * Calendar time is authoritative
     */
    calendarValid?: pulumi.Input<boolean>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Configure absolute summer time
     */
    summerTimeDate?: pulumi.Input<boolean>;
    /**
     * - Range: `1`-`31`
     */
    summerTimeDateEndDay?: pulumi.Input<number>;
    /**
     * - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
     */
    summerTimeDateEndMonth?: pulumi.Input<string>;
    summerTimeDateEndTime?: pulumi.Input<string>;
    /**
     * - Range: `1993`-`2035`
     */
    summerTimeDateEndYear?: pulumi.Input<number>;
    /**
     * - Range: `1`-`1440`
     */
    summerTimeDateOffset?: pulumi.Input<number>;
    /**
     * - Range: `1`-`31`
     */
    summerTimeDateStartDay?: pulumi.Input<number>;
    /**
     * - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
     */
    summerTimeDateStartMonth?: pulumi.Input<string>;
    summerTimeDateStartTime?: pulumi.Input<string>;
    /**
     * - Range: `1993`-`2035`
     */
    summerTimeDateStartYear?: pulumi.Input<number>;
    /**
     * Configure recurring summer time
     */
    summerTimeRecurring?: pulumi.Input<boolean>;
    /**
     * - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
     */
    summerTimeRecurringEndMonth?: pulumi.Input<string>;
    summerTimeRecurringEndTime?: pulumi.Input<string>;
    summerTimeRecurringEndWeek?: pulumi.Input<string>;
    /**
     * - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
     */
    summerTimeRecurringEndWeekday?: pulumi.Input<string>;
    /**
     * - Range: `1`-`1440`
     */
    summerTimeRecurringOffset?: pulumi.Input<number>;
    /**
     * - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
     */
    summerTimeRecurringStartMonth?: pulumi.Input<string>;
    summerTimeRecurringStartTime?: pulumi.Input<string>;
    summerTimeRecurringStartWeek?: pulumi.Input<string>;
    /**
     * - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
     */
    summerTimeRecurringStartWeekday?: pulumi.Input<string>;
    /**
     * Name of time zone in summer
     */
    summerTimeZone?: pulumi.Input<string>;
}
