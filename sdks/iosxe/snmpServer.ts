// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SnmpServer extends pulumi.CustomResource {
    /**
     * Get an existing SnmpServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnmpServerState, opts?: pulumi.CustomResourceOptions): SnmpServer {
        return new SnmpServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'iosxe:index/snmpServer:SnmpServer';

    /**
     * Returns true if the given object is an instance of SnmpServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SnmpServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnmpServer.__pulumiType;
    }

    /**
     * String to uniquely identify this chassis
     */
    public readonly chassisId!: pulumi.Output<string | undefined>;
    /**
     * Text for mib object sysContact
     */
    public readonly contact!: pulumi.Output<string | undefined>;
    /**
     * Create/Delete a context apart from default
     */
    public readonly contexts!: pulumi.Output<outputs.SnmpServerContext[] | undefined>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    public readonly deleteMode!: pulumi.Output<string | undefined>;
    /**
     * A device name from the provider configuration.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * Enable SNMP Informs
     */
    public readonly enableInforms!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP GET Operation logging
     */
    public readonly enableLoggingGetop!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP SET Operation logging
     */
    public readonly enableLoggingSetop!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP Traps
     */
    public readonly enableTraps!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsAuthFrameworkSecViolation!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsBfd!: pulumi.Output<boolean | undefined>;
    /**
     * Enable BGP MIBv2 traps
     */
    public readonly enableTrapsBgpCbgp2!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsBridgeNewroot!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsBridgeTopologychange!: pulumi.Output<boolean | undefined>;
    /**
     * Enable Data-Collection-MIB Collection notifications
     */
    public readonly enableTrapsBulkstatCollection!: pulumi.Output<boolean | undefined>;
    /**
     * Enable Data-Collection-MIB Transfer notifications
     */
    public readonly enableTrapsBulkstatTransfer!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsCallHomeMessageSendFail!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsCallHomeServerFail!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsCefInconsistency!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsCefPeerFibStateChange!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsCefPeerStateChange!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsCefResourceFailure!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP config traps
     */
    public readonly enableTrapsConfig!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP config-copy traps
     */
    public readonly enableTrapsConfigCopy!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsConfigCtid!: pulumi.Output<boolean | undefined>;
    /**
     * Allow CPU utilization threshold violation traps
     */
    public readonly enableTrapsCpuThreshold!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP dhcp traps
     */
    public readonly enableTrapsDhcp!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP EIGRP traps
     */
    public readonly enableTrapsEigrp!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsEnergywise!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP entity traps
     */
    public readonly enableTrapsEntity!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP ceDiagBootUpFailedNotif traps
     */
    public readonly enableTrapsEntityDiagBootUpFail!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP ceDiagHMTestRecoverNotif traps
     */
    public readonly enableTrapsEntityDiagHmTestRecover!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP ceDiagHMThresholdReachedNotif traps
     */
    public readonly enableTrapsEntityDiagHmThreshReached!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP ceDiagScheduledTestFailedNotif traps
     */
    public readonly enableTrapsEntityDiagScheduledTestFail!: pulumi.Output<boolean | undefined>;
    /**
     * Enable ENTITY PERFORMANCE MIB throughput traps
     */
    public readonly enableTrapsEntityPerfThroughputNotif!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP environmental monitor traps
     */
    public readonly enableTrapsEnvmon!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP errdisable notifications
     */
    public readonly enableTrapsErrdisable!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP Embedded Event Manager traps
     */
    public readonly enableTrapsEventManager!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsFastRerouteProtected!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP Flash Insertion notifications
     */
    public readonly enableTrapsFlashInsertion!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP Flash Lowspace notifications
     */
    public readonly enableTrapsFlashLowspace!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP Flash Removal notifications
     */
    public readonly enableTrapsFlashRemoval!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP flowmon notifications
     */
    public readonly enableTrapsFlowmon!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP entity FRU control traps
     */
    public readonly enableTrapsFruCtrl!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP HSRP traps
     */
    public readonly enableTrapsHsrp!: pulumi.Output<boolean | undefined>;
    /**
     * Enable IKE Policy add trap
     */
    public readonly enableTrapsIkePolicyAdd!: pulumi.Output<boolean | undefined>;
    /**
     * Enable IKE Policy delete trap
     */
    public readonly enableTrapsIkePolicyDelete!: pulumi.Output<boolean | undefined>;
    /**
     * Enable IKE Tunnel start trap
     */
    public readonly enableTrapsIkeTunnelStart!: pulumi.Output<boolean | undefined>;
    /**
     * Enable IKE Tunnel stop trap
     */
    public readonly enableTrapsIkeTunnelStop!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP ipmulticast traps
     */
    public readonly enableTrapsIpmulticast!: pulumi.Output<boolean | undefined>;
    /**
     * Enable IPsec Cryptomap add trap
     */
    public readonly enableTrapsIpsecCryptomapAdd!: pulumi.Output<boolean | undefined>;
    /**
     * Enable IPsec Cryptomap Attach trap
     */
    public readonly enableTrapsIpsecCryptomapAttach!: pulumi.Output<boolean | undefined>;
    /**
     * Enable IPsec Cryptomap delete trap
     */
    public readonly enableTrapsIpsecCryptomapDelete!: pulumi.Output<boolean | undefined>;
    /**
     * Enable IPsec Cryptomap Detach trap
     */
    public readonly enableTrapsIpsecCryptomapDetach!: pulumi.Output<boolean | undefined>;
    /**
     * Enable IPsec Tunnel Start trap
     */
    public readonly enableTrapsIpsecTooManySas!: pulumi.Output<boolean | undefined>;
    /**
     * Enable IPsec Tunnel Start trap
     */
    public readonly enableTrapsIpsecTunnelStart!: pulumi.Output<boolean | undefined>;
    /**
     * Enable IPsec Tunnel Stop trap
     */
    public readonly enableTrapsIpsecTunnelStop!: pulumi.Output<boolean | undefined>;
    /**
     * Enable IPSLA traps traps
     */
    public readonly enableTrapsIpsla!: pulumi.Output<boolean | undefined>;
    /**
     * Enable ISIS traps traps
     */
    public readonly enableTrapsIsis!: pulumi.Output<boolean | undefined>;
    /**
     * Enable license traps
     */
    public readonly enableTrapsLicense!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP local auth traps
     */
    public readonly enableTrapsLocalAuth!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP Change traps
     */
    public readonly enableTrapsMacNotificationChange!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP Move traps
     */
    public readonly enableTrapsMacNotificationMove!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP Threshold traps
     */
    public readonly enableTrapsMacNotificationThreshold!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP Memory Bufferpeak traps
     */
    public readonly enableTrapsMemoryBufferpeak!: pulumi.Output<boolean | undefined>;
    /**
     * SNMP MPLS label distribution protocol traps
     */
    public readonly enableTrapsMplsLdp!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsMplsRfcLdp!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsMplsTrafficEng!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsMplsVpn!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP MSDP traps
     */
    public readonly enableTrapsMsdp!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsNhrpNhc!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsNhrpNhp!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsNhrpNhs!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsNhrpQuotaExceeded!: pulumi.Output<boolean | undefined>;
    /**
     * Enable all traps of errors
     */
    public readonly enableTrapsOspfConfigErrors!: pulumi.Output<boolean | undefined>;
    /**
     * Enable all traps of lsa
     */
    public readonly enableTrapsOspfConfigLsa!: pulumi.Output<boolean | undefined>;
    /**
     * Enable all traps of retransmit
     */
    public readonly enableTrapsOspfConfigRetransmit!: pulumi.Output<boolean | undefined>;
    /**
     * Enable all traps of state-change
     */
    public readonly enableTrapsOspfConfigStateChange!: pulumi.Output<boolean | undefined>;
    /**
     * Enable all traps of errors
     */
    public readonly enableTrapsOspfErrorsEnable!: pulumi.Output<boolean | undefined>;
    /**
     * Enable all traps of lsa
     */
    public readonly enableTrapsOspfLsaEnable!: pulumi.Output<boolean | undefined>;
    /**
     * Nssa translator state changes
     */
    public readonly enableTrapsOspfNssaTransChange!: pulumi.Output<boolean | undefined>;
    /**
     * Enable all traps of retransmit
     */
    public readonly enableTrapsOspfRetransmitEnable!: pulumi.Output<boolean | undefined>;
    /**
     * Sham link interface state changes
     */
    public readonly enableTrapsOspfShamlinkInterface!: pulumi.Output<boolean | undefined>;
    /**
     * Sham link neighbor state changes
     */
    public readonly enableTrapsOspfShamlinkNeighbor!: pulumi.Output<boolean | undefined>;
    /**
     * Enable all traps of errors
     */
    public readonly enableTrapsOspfv3ConfigErrors!: pulumi.Output<boolean | undefined>;
    /**
     * Enable all traps of state-change
     */
    public readonly enableTrapsOspfv3ConfigStateChange!: pulumi.Output<boolean | undefined>;
    /**
     * Enable invalid pim message trap
     */
    public readonly enableTrapsPimInvalidPimMessage!: pulumi.Output<boolean | undefined>;
    /**
     * Enable neighbor change trap
     */
    public readonly enableTrapsPimNeighborChange!: pulumi.Output<boolean | undefined>;
    /**
     * Enable rp mapping change trap
     */
    public readonly enableTrapsPimRpMappingChange!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP port security traps
     */
    public readonly enableTrapsPortSecurity!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP inline power group based traps
     */
    public readonly enableTrapsPowerEthernetGroup!: pulumi.Output<string | undefined>;
    /**
     * Enable Policing Trap
     */
    public readonly enableTrapsPowerEthernetPolice!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsPwVc!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsRep!: pulumi.Output<boolean | undefined>;
    /**
     * Enable all SNMP traps defined in CISCO-RF-MIB
     */
    public readonly enableTrapsRf!: pulumi.Output<boolean | undefined>;
    /**
     * Enable smart license traps
     */
    public readonly enableTrapsSmartLicense!: pulumi.Output<boolean | undefined>;
    /**
     * Enable authentication trap
     */
    public readonly enableTrapsSnmpAuthentication!: pulumi.Output<boolean | undefined>;
    /**
     * Enable coldStart trap
     */
    public readonly enableTrapsSnmpColdstart!: pulumi.Output<boolean | undefined>;
    /**
     * Enable linkDown trap
     */
    public readonly enableTrapsSnmpLinkdown!: pulumi.Output<boolean | undefined>;
    /**
     * Enable linkUp trap
     */
    public readonly enableTrapsSnmpLinkup!: pulumi.Output<boolean | undefined>;
    /**
     * Enable warmStart trap
     */
    public readonly enableTrapsSnmpWarmstart!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP stackwise traps
     */
    public readonly enableTrapsStackwise!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsStpxInconsistency!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsStpxLoopInconsistency!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsStpxRootInconsistency!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP syslog traps
     */
    public readonly enableTrapsSyslog!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsTransceiverAll!: pulumi.Output<boolean | undefined>;
    /**
     * Enable TCP connection traps
     */
    public readonly enableTrapsTty!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP cudldpFastHelloLinkFailRptNotification traps
     */
    public readonly enableTrapsUdldLinkFailRpt!: pulumi.Output<boolean | undefined>;
    /**
     * Enable SNMP cudldpFastHelloStatusChangeNotification traps
     */
    public readonly enableTrapsUdldStatusChange!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsVlanMembership!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsVlancreate!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsVlandelete!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsVrfmibVnetTrunkDown!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsVrfmibVnetTrunkUp!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsVrfmibVrfDown!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsVrfmibVrfUp!: pulumi.Output<boolean | undefined>;
    public readonly enableTrapsVtp!: pulumi.Output<boolean | undefined>;
    /**
     * Specify hosts keyed by (ip-address, community-or-user)
     */
    public readonly hosts!: pulumi.Output<outputs.SnmpServerHost[] | undefined>;
    /**
     * Persist interface indices
     */
    public readonly ifindexPersist!: pulumi.Output<boolean | undefined>;
    /**
     * Text for mib object sysLocation
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * Largest SNMP packet size - Range: `484`-`17892`
     */
    public readonly packetsize!: pulumi.Output<number | undefined>;
    /**
     * Message queue length for each TRAP host - Range: `1`-`5000`
     */
    public readonly queueLength!: pulumi.Output<number | undefined>;
    /**
     * Enable SNMP; set community string and access privs
     */
    public readonly snmpCommunities!: pulumi.Output<outputs.SnmpServerSnmpCommunity[] | undefined>;
    /**
     * Forty GigabitEthernet
     */
    public readonly sourceInterfaceInformsFortyGigabitEthernet!: pulumi.Output<string | undefined>;
    /**
     * GigabitEthernet IEEE 802.3z
     */
    public readonly sourceInterfaceInformsGigabitEthernet!: pulumi.Output<string | undefined>;
    /**
     * Hundred GigabitEthernet
     */
    public readonly sourceInterfaceInformsHundredGigE!: pulumi.Output<string | undefined>;
    /**
     * Loopback interface - Range: `0`-`2147483647`
     */
    public readonly sourceInterfaceInformsLoopback!: pulumi.Output<number | undefined>;
    /**
     * Ethernet Channel of interfaces - Range: `0`-`4294967295`
     */
    public readonly sourceInterfaceInformsPortChannel!: pulumi.Output<number | undefined>;
    public readonly sourceInterfaceInformsPortChannelSubinterface!: pulumi.Output<string | undefined>;
    /**
     * Ten Gigabit Ethernet
     */
    public readonly sourceInterfaceInformsTenGigabitEthernet!: pulumi.Output<string | undefined>;
    /**
     * Iosxr Vlans - Range: `0`-`65535`
     */
    public readonly sourceInterfaceInformsVlan!: pulumi.Output<number | undefined>;
    /**
     * Forty GigabitEthernet
     */
    public readonly sourceInterfaceTrapsFortyGigabitEthernet!: pulumi.Output<string | undefined>;
    /**
     * GigabitEthernet IEEE 802.3z
     */
    public readonly sourceInterfaceTrapsGigabitEthernet!: pulumi.Output<string | undefined>;
    /**
     * Hundred GigabitEthernet
     */
    public readonly sourceInterfaceTrapsHundredGigE!: pulumi.Output<string | undefined>;
    /**
     * Loopback interface - Range: `0`-`2147483647`
     */
    public readonly sourceInterfaceTrapsLoopback!: pulumi.Output<number | undefined>;
    /**
     * Ethernet Channel of interfaces - Range: `0`-`4294967295`
     */
    public readonly sourceInterfaceTrapsPortChannel!: pulumi.Output<number | undefined>;
    public readonly sourceInterfaceTrapsPortChannelSubinterface!: pulumi.Output<string | undefined>;
    /**
     * Ten Gigabit Ethernet
     */
    public readonly sourceInterfaceTrapsTenGigabitEthernet!: pulumi.Output<string | undefined>;
    /**
     * Iosxr Vlans - Range: `0`-`65535`
     */
    public readonly sourceInterfaceTrapsVlan!: pulumi.Output<number | undefined>;
    /**
     * Enable use of the SNMP reload command
     */
    public readonly systemShutdown!: pulumi.Output<boolean | undefined>;
    /**
     * Forty GigabitEthernet
     */
    public readonly trapSourceFortyGigabitEthernet!: pulumi.Output<string | undefined>;
    /**
     * GigabitEthernet IEEE 802.3z
     */
    public readonly trapSourceGigabitEthernet!: pulumi.Output<string | undefined>;
    /**
     * Hundred GigabitEthernet
     */
    public readonly trapSourceHundredGigE!: pulumi.Output<string | undefined>;
    /**
     * Loopback interface - Range: `0`-`2147483647`
     */
    public readonly trapSourceLoopback!: pulumi.Output<number | undefined>;
    /**
     * Ethernet Channel of interfaces - Range: `0`-`4294967295`
     */
    public readonly trapSourcePortChannel!: pulumi.Output<number | undefined>;
    public readonly trapSourcePortChannelSubinterface!: pulumi.Output<string | undefined>;
    /**
     * Ten Gigabit Ethernet
     */
    public readonly trapSourceTenGigabitEthernet!: pulumi.Output<string | undefined>;
    /**
     * Iosxr Vlans - Range: `0`-`65535`
     */
    public readonly trapSourceVlan!: pulumi.Output<number | undefined>;
    /**
     * Define an SNMPv2 MIB view
     */
    public readonly views!: pulumi.Output<outputs.SnmpServerView[] | undefined>;

    /**
     * Create a SnmpServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SnmpServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnmpServerArgs | SnmpServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnmpServerState | undefined;
            resourceInputs["chassisId"] = state ? state.chassisId : undefined;
            resourceInputs["contact"] = state ? state.contact : undefined;
            resourceInputs["contexts"] = state ? state.contexts : undefined;
            resourceInputs["deleteMode"] = state ? state.deleteMode : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["enableInforms"] = state ? state.enableInforms : undefined;
            resourceInputs["enableLoggingGetop"] = state ? state.enableLoggingGetop : undefined;
            resourceInputs["enableLoggingSetop"] = state ? state.enableLoggingSetop : undefined;
            resourceInputs["enableTraps"] = state ? state.enableTraps : undefined;
            resourceInputs["enableTrapsAuthFrameworkSecViolation"] = state ? state.enableTrapsAuthFrameworkSecViolation : undefined;
            resourceInputs["enableTrapsBfd"] = state ? state.enableTrapsBfd : undefined;
            resourceInputs["enableTrapsBgpCbgp2"] = state ? state.enableTrapsBgpCbgp2 : undefined;
            resourceInputs["enableTrapsBridgeNewroot"] = state ? state.enableTrapsBridgeNewroot : undefined;
            resourceInputs["enableTrapsBridgeTopologychange"] = state ? state.enableTrapsBridgeTopologychange : undefined;
            resourceInputs["enableTrapsBulkstatCollection"] = state ? state.enableTrapsBulkstatCollection : undefined;
            resourceInputs["enableTrapsBulkstatTransfer"] = state ? state.enableTrapsBulkstatTransfer : undefined;
            resourceInputs["enableTrapsCallHomeMessageSendFail"] = state ? state.enableTrapsCallHomeMessageSendFail : undefined;
            resourceInputs["enableTrapsCallHomeServerFail"] = state ? state.enableTrapsCallHomeServerFail : undefined;
            resourceInputs["enableTrapsCefInconsistency"] = state ? state.enableTrapsCefInconsistency : undefined;
            resourceInputs["enableTrapsCefPeerFibStateChange"] = state ? state.enableTrapsCefPeerFibStateChange : undefined;
            resourceInputs["enableTrapsCefPeerStateChange"] = state ? state.enableTrapsCefPeerStateChange : undefined;
            resourceInputs["enableTrapsCefResourceFailure"] = state ? state.enableTrapsCefResourceFailure : undefined;
            resourceInputs["enableTrapsConfig"] = state ? state.enableTrapsConfig : undefined;
            resourceInputs["enableTrapsConfigCopy"] = state ? state.enableTrapsConfigCopy : undefined;
            resourceInputs["enableTrapsConfigCtid"] = state ? state.enableTrapsConfigCtid : undefined;
            resourceInputs["enableTrapsCpuThreshold"] = state ? state.enableTrapsCpuThreshold : undefined;
            resourceInputs["enableTrapsDhcp"] = state ? state.enableTrapsDhcp : undefined;
            resourceInputs["enableTrapsEigrp"] = state ? state.enableTrapsEigrp : undefined;
            resourceInputs["enableTrapsEnergywise"] = state ? state.enableTrapsEnergywise : undefined;
            resourceInputs["enableTrapsEntity"] = state ? state.enableTrapsEntity : undefined;
            resourceInputs["enableTrapsEntityDiagBootUpFail"] = state ? state.enableTrapsEntityDiagBootUpFail : undefined;
            resourceInputs["enableTrapsEntityDiagHmTestRecover"] = state ? state.enableTrapsEntityDiagHmTestRecover : undefined;
            resourceInputs["enableTrapsEntityDiagHmThreshReached"] = state ? state.enableTrapsEntityDiagHmThreshReached : undefined;
            resourceInputs["enableTrapsEntityDiagScheduledTestFail"] = state ? state.enableTrapsEntityDiagScheduledTestFail : undefined;
            resourceInputs["enableTrapsEntityPerfThroughputNotif"] = state ? state.enableTrapsEntityPerfThroughputNotif : undefined;
            resourceInputs["enableTrapsEnvmon"] = state ? state.enableTrapsEnvmon : undefined;
            resourceInputs["enableTrapsErrdisable"] = state ? state.enableTrapsErrdisable : undefined;
            resourceInputs["enableTrapsEventManager"] = state ? state.enableTrapsEventManager : undefined;
            resourceInputs["enableTrapsFastRerouteProtected"] = state ? state.enableTrapsFastRerouteProtected : undefined;
            resourceInputs["enableTrapsFlashInsertion"] = state ? state.enableTrapsFlashInsertion : undefined;
            resourceInputs["enableTrapsFlashLowspace"] = state ? state.enableTrapsFlashLowspace : undefined;
            resourceInputs["enableTrapsFlashRemoval"] = state ? state.enableTrapsFlashRemoval : undefined;
            resourceInputs["enableTrapsFlowmon"] = state ? state.enableTrapsFlowmon : undefined;
            resourceInputs["enableTrapsFruCtrl"] = state ? state.enableTrapsFruCtrl : undefined;
            resourceInputs["enableTrapsHsrp"] = state ? state.enableTrapsHsrp : undefined;
            resourceInputs["enableTrapsIkePolicyAdd"] = state ? state.enableTrapsIkePolicyAdd : undefined;
            resourceInputs["enableTrapsIkePolicyDelete"] = state ? state.enableTrapsIkePolicyDelete : undefined;
            resourceInputs["enableTrapsIkeTunnelStart"] = state ? state.enableTrapsIkeTunnelStart : undefined;
            resourceInputs["enableTrapsIkeTunnelStop"] = state ? state.enableTrapsIkeTunnelStop : undefined;
            resourceInputs["enableTrapsIpmulticast"] = state ? state.enableTrapsIpmulticast : undefined;
            resourceInputs["enableTrapsIpsecCryptomapAdd"] = state ? state.enableTrapsIpsecCryptomapAdd : undefined;
            resourceInputs["enableTrapsIpsecCryptomapAttach"] = state ? state.enableTrapsIpsecCryptomapAttach : undefined;
            resourceInputs["enableTrapsIpsecCryptomapDelete"] = state ? state.enableTrapsIpsecCryptomapDelete : undefined;
            resourceInputs["enableTrapsIpsecCryptomapDetach"] = state ? state.enableTrapsIpsecCryptomapDetach : undefined;
            resourceInputs["enableTrapsIpsecTooManySas"] = state ? state.enableTrapsIpsecTooManySas : undefined;
            resourceInputs["enableTrapsIpsecTunnelStart"] = state ? state.enableTrapsIpsecTunnelStart : undefined;
            resourceInputs["enableTrapsIpsecTunnelStop"] = state ? state.enableTrapsIpsecTunnelStop : undefined;
            resourceInputs["enableTrapsIpsla"] = state ? state.enableTrapsIpsla : undefined;
            resourceInputs["enableTrapsIsis"] = state ? state.enableTrapsIsis : undefined;
            resourceInputs["enableTrapsLicense"] = state ? state.enableTrapsLicense : undefined;
            resourceInputs["enableTrapsLocalAuth"] = state ? state.enableTrapsLocalAuth : undefined;
            resourceInputs["enableTrapsMacNotificationChange"] = state ? state.enableTrapsMacNotificationChange : undefined;
            resourceInputs["enableTrapsMacNotificationMove"] = state ? state.enableTrapsMacNotificationMove : undefined;
            resourceInputs["enableTrapsMacNotificationThreshold"] = state ? state.enableTrapsMacNotificationThreshold : undefined;
            resourceInputs["enableTrapsMemoryBufferpeak"] = state ? state.enableTrapsMemoryBufferpeak : undefined;
            resourceInputs["enableTrapsMplsLdp"] = state ? state.enableTrapsMplsLdp : undefined;
            resourceInputs["enableTrapsMplsRfcLdp"] = state ? state.enableTrapsMplsRfcLdp : undefined;
            resourceInputs["enableTrapsMplsTrafficEng"] = state ? state.enableTrapsMplsTrafficEng : undefined;
            resourceInputs["enableTrapsMplsVpn"] = state ? state.enableTrapsMplsVpn : undefined;
            resourceInputs["enableTrapsMsdp"] = state ? state.enableTrapsMsdp : undefined;
            resourceInputs["enableTrapsNhrpNhc"] = state ? state.enableTrapsNhrpNhc : undefined;
            resourceInputs["enableTrapsNhrpNhp"] = state ? state.enableTrapsNhrpNhp : undefined;
            resourceInputs["enableTrapsNhrpNhs"] = state ? state.enableTrapsNhrpNhs : undefined;
            resourceInputs["enableTrapsNhrpQuotaExceeded"] = state ? state.enableTrapsNhrpQuotaExceeded : undefined;
            resourceInputs["enableTrapsOspfConfigErrors"] = state ? state.enableTrapsOspfConfigErrors : undefined;
            resourceInputs["enableTrapsOspfConfigLsa"] = state ? state.enableTrapsOspfConfigLsa : undefined;
            resourceInputs["enableTrapsOspfConfigRetransmit"] = state ? state.enableTrapsOspfConfigRetransmit : undefined;
            resourceInputs["enableTrapsOspfConfigStateChange"] = state ? state.enableTrapsOspfConfigStateChange : undefined;
            resourceInputs["enableTrapsOspfErrorsEnable"] = state ? state.enableTrapsOspfErrorsEnable : undefined;
            resourceInputs["enableTrapsOspfLsaEnable"] = state ? state.enableTrapsOspfLsaEnable : undefined;
            resourceInputs["enableTrapsOspfNssaTransChange"] = state ? state.enableTrapsOspfNssaTransChange : undefined;
            resourceInputs["enableTrapsOspfRetransmitEnable"] = state ? state.enableTrapsOspfRetransmitEnable : undefined;
            resourceInputs["enableTrapsOspfShamlinkInterface"] = state ? state.enableTrapsOspfShamlinkInterface : undefined;
            resourceInputs["enableTrapsOspfShamlinkNeighbor"] = state ? state.enableTrapsOspfShamlinkNeighbor : undefined;
            resourceInputs["enableTrapsOspfv3ConfigErrors"] = state ? state.enableTrapsOspfv3ConfigErrors : undefined;
            resourceInputs["enableTrapsOspfv3ConfigStateChange"] = state ? state.enableTrapsOspfv3ConfigStateChange : undefined;
            resourceInputs["enableTrapsPimInvalidPimMessage"] = state ? state.enableTrapsPimInvalidPimMessage : undefined;
            resourceInputs["enableTrapsPimNeighborChange"] = state ? state.enableTrapsPimNeighborChange : undefined;
            resourceInputs["enableTrapsPimRpMappingChange"] = state ? state.enableTrapsPimRpMappingChange : undefined;
            resourceInputs["enableTrapsPortSecurity"] = state ? state.enableTrapsPortSecurity : undefined;
            resourceInputs["enableTrapsPowerEthernetGroup"] = state ? state.enableTrapsPowerEthernetGroup : undefined;
            resourceInputs["enableTrapsPowerEthernetPolice"] = state ? state.enableTrapsPowerEthernetPolice : undefined;
            resourceInputs["enableTrapsPwVc"] = state ? state.enableTrapsPwVc : undefined;
            resourceInputs["enableTrapsRep"] = state ? state.enableTrapsRep : undefined;
            resourceInputs["enableTrapsRf"] = state ? state.enableTrapsRf : undefined;
            resourceInputs["enableTrapsSmartLicense"] = state ? state.enableTrapsSmartLicense : undefined;
            resourceInputs["enableTrapsSnmpAuthentication"] = state ? state.enableTrapsSnmpAuthentication : undefined;
            resourceInputs["enableTrapsSnmpColdstart"] = state ? state.enableTrapsSnmpColdstart : undefined;
            resourceInputs["enableTrapsSnmpLinkdown"] = state ? state.enableTrapsSnmpLinkdown : undefined;
            resourceInputs["enableTrapsSnmpLinkup"] = state ? state.enableTrapsSnmpLinkup : undefined;
            resourceInputs["enableTrapsSnmpWarmstart"] = state ? state.enableTrapsSnmpWarmstart : undefined;
            resourceInputs["enableTrapsStackwise"] = state ? state.enableTrapsStackwise : undefined;
            resourceInputs["enableTrapsStpxInconsistency"] = state ? state.enableTrapsStpxInconsistency : undefined;
            resourceInputs["enableTrapsStpxLoopInconsistency"] = state ? state.enableTrapsStpxLoopInconsistency : undefined;
            resourceInputs["enableTrapsStpxRootInconsistency"] = state ? state.enableTrapsStpxRootInconsistency : undefined;
            resourceInputs["enableTrapsSyslog"] = state ? state.enableTrapsSyslog : undefined;
            resourceInputs["enableTrapsTransceiverAll"] = state ? state.enableTrapsTransceiverAll : undefined;
            resourceInputs["enableTrapsTty"] = state ? state.enableTrapsTty : undefined;
            resourceInputs["enableTrapsUdldLinkFailRpt"] = state ? state.enableTrapsUdldLinkFailRpt : undefined;
            resourceInputs["enableTrapsUdldStatusChange"] = state ? state.enableTrapsUdldStatusChange : undefined;
            resourceInputs["enableTrapsVlanMembership"] = state ? state.enableTrapsVlanMembership : undefined;
            resourceInputs["enableTrapsVlancreate"] = state ? state.enableTrapsVlancreate : undefined;
            resourceInputs["enableTrapsVlandelete"] = state ? state.enableTrapsVlandelete : undefined;
            resourceInputs["enableTrapsVrfmibVnetTrunkDown"] = state ? state.enableTrapsVrfmibVnetTrunkDown : undefined;
            resourceInputs["enableTrapsVrfmibVnetTrunkUp"] = state ? state.enableTrapsVrfmibVnetTrunkUp : undefined;
            resourceInputs["enableTrapsVrfmibVrfDown"] = state ? state.enableTrapsVrfmibVrfDown : undefined;
            resourceInputs["enableTrapsVrfmibVrfUp"] = state ? state.enableTrapsVrfmibVrfUp : undefined;
            resourceInputs["enableTrapsVtp"] = state ? state.enableTrapsVtp : undefined;
            resourceInputs["hosts"] = state ? state.hosts : undefined;
            resourceInputs["ifindexPersist"] = state ? state.ifindexPersist : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["packetsize"] = state ? state.packetsize : undefined;
            resourceInputs["queueLength"] = state ? state.queueLength : undefined;
            resourceInputs["snmpCommunities"] = state ? state.snmpCommunities : undefined;
            resourceInputs["sourceInterfaceInformsFortyGigabitEthernet"] = state ? state.sourceInterfaceInformsFortyGigabitEthernet : undefined;
            resourceInputs["sourceInterfaceInformsGigabitEthernet"] = state ? state.sourceInterfaceInformsGigabitEthernet : undefined;
            resourceInputs["sourceInterfaceInformsHundredGigE"] = state ? state.sourceInterfaceInformsHundredGigE : undefined;
            resourceInputs["sourceInterfaceInformsLoopback"] = state ? state.sourceInterfaceInformsLoopback : undefined;
            resourceInputs["sourceInterfaceInformsPortChannel"] = state ? state.sourceInterfaceInformsPortChannel : undefined;
            resourceInputs["sourceInterfaceInformsPortChannelSubinterface"] = state ? state.sourceInterfaceInformsPortChannelSubinterface : undefined;
            resourceInputs["sourceInterfaceInformsTenGigabitEthernet"] = state ? state.sourceInterfaceInformsTenGigabitEthernet : undefined;
            resourceInputs["sourceInterfaceInformsVlan"] = state ? state.sourceInterfaceInformsVlan : undefined;
            resourceInputs["sourceInterfaceTrapsFortyGigabitEthernet"] = state ? state.sourceInterfaceTrapsFortyGigabitEthernet : undefined;
            resourceInputs["sourceInterfaceTrapsGigabitEthernet"] = state ? state.sourceInterfaceTrapsGigabitEthernet : undefined;
            resourceInputs["sourceInterfaceTrapsHundredGigE"] = state ? state.sourceInterfaceTrapsHundredGigE : undefined;
            resourceInputs["sourceInterfaceTrapsLoopback"] = state ? state.sourceInterfaceTrapsLoopback : undefined;
            resourceInputs["sourceInterfaceTrapsPortChannel"] = state ? state.sourceInterfaceTrapsPortChannel : undefined;
            resourceInputs["sourceInterfaceTrapsPortChannelSubinterface"] = state ? state.sourceInterfaceTrapsPortChannelSubinterface : undefined;
            resourceInputs["sourceInterfaceTrapsTenGigabitEthernet"] = state ? state.sourceInterfaceTrapsTenGigabitEthernet : undefined;
            resourceInputs["sourceInterfaceTrapsVlan"] = state ? state.sourceInterfaceTrapsVlan : undefined;
            resourceInputs["systemShutdown"] = state ? state.systemShutdown : undefined;
            resourceInputs["trapSourceFortyGigabitEthernet"] = state ? state.trapSourceFortyGigabitEthernet : undefined;
            resourceInputs["trapSourceGigabitEthernet"] = state ? state.trapSourceGigabitEthernet : undefined;
            resourceInputs["trapSourceHundredGigE"] = state ? state.trapSourceHundredGigE : undefined;
            resourceInputs["trapSourceLoopback"] = state ? state.trapSourceLoopback : undefined;
            resourceInputs["trapSourcePortChannel"] = state ? state.trapSourcePortChannel : undefined;
            resourceInputs["trapSourcePortChannelSubinterface"] = state ? state.trapSourcePortChannelSubinterface : undefined;
            resourceInputs["trapSourceTenGigabitEthernet"] = state ? state.trapSourceTenGigabitEthernet : undefined;
            resourceInputs["trapSourceVlan"] = state ? state.trapSourceVlan : undefined;
            resourceInputs["views"] = state ? state.views : undefined;
        } else {
            const args = argsOrState as SnmpServerArgs | undefined;
            resourceInputs["chassisId"] = args ? args.chassisId : undefined;
            resourceInputs["contact"] = args ? args.contact : undefined;
            resourceInputs["contexts"] = args ? args.contexts : undefined;
            resourceInputs["deleteMode"] = args ? args.deleteMode : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["enableInforms"] = args ? args.enableInforms : undefined;
            resourceInputs["enableLoggingGetop"] = args ? args.enableLoggingGetop : undefined;
            resourceInputs["enableLoggingSetop"] = args ? args.enableLoggingSetop : undefined;
            resourceInputs["enableTraps"] = args ? args.enableTraps : undefined;
            resourceInputs["enableTrapsAuthFrameworkSecViolation"] = args ? args.enableTrapsAuthFrameworkSecViolation : undefined;
            resourceInputs["enableTrapsBfd"] = args ? args.enableTrapsBfd : undefined;
            resourceInputs["enableTrapsBgpCbgp2"] = args ? args.enableTrapsBgpCbgp2 : undefined;
            resourceInputs["enableTrapsBridgeNewroot"] = args ? args.enableTrapsBridgeNewroot : undefined;
            resourceInputs["enableTrapsBridgeTopologychange"] = args ? args.enableTrapsBridgeTopologychange : undefined;
            resourceInputs["enableTrapsBulkstatCollection"] = args ? args.enableTrapsBulkstatCollection : undefined;
            resourceInputs["enableTrapsBulkstatTransfer"] = args ? args.enableTrapsBulkstatTransfer : undefined;
            resourceInputs["enableTrapsCallHomeMessageSendFail"] = args ? args.enableTrapsCallHomeMessageSendFail : undefined;
            resourceInputs["enableTrapsCallHomeServerFail"] = args ? args.enableTrapsCallHomeServerFail : undefined;
            resourceInputs["enableTrapsCefInconsistency"] = args ? args.enableTrapsCefInconsistency : undefined;
            resourceInputs["enableTrapsCefPeerFibStateChange"] = args ? args.enableTrapsCefPeerFibStateChange : undefined;
            resourceInputs["enableTrapsCefPeerStateChange"] = args ? args.enableTrapsCefPeerStateChange : undefined;
            resourceInputs["enableTrapsCefResourceFailure"] = args ? args.enableTrapsCefResourceFailure : undefined;
            resourceInputs["enableTrapsConfig"] = args ? args.enableTrapsConfig : undefined;
            resourceInputs["enableTrapsConfigCopy"] = args ? args.enableTrapsConfigCopy : undefined;
            resourceInputs["enableTrapsConfigCtid"] = args ? args.enableTrapsConfigCtid : undefined;
            resourceInputs["enableTrapsCpuThreshold"] = args ? args.enableTrapsCpuThreshold : undefined;
            resourceInputs["enableTrapsDhcp"] = args ? args.enableTrapsDhcp : undefined;
            resourceInputs["enableTrapsEigrp"] = args ? args.enableTrapsEigrp : undefined;
            resourceInputs["enableTrapsEnergywise"] = args ? args.enableTrapsEnergywise : undefined;
            resourceInputs["enableTrapsEntity"] = args ? args.enableTrapsEntity : undefined;
            resourceInputs["enableTrapsEntityDiagBootUpFail"] = args ? args.enableTrapsEntityDiagBootUpFail : undefined;
            resourceInputs["enableTrapsEntityDiagHmTestRecover"] = args ? args.enableTrapsEntityDiagHmTestRecover : undefined;
            resourceInputs["enableTrapsEntityDiagHmThreshReached"] = args ? args.enableTrapsEntityDiagHmThreshReached : undefined;
            resourceInputs["enableTrapsEntityDiagScheduledTestFail"] = args ? args.enableTrapsEntityDiagScheduledTestFail : undefined;
            resourceInputs["enableTrapsEntityPerfThroughputNotif"] = args ? args.enableTrapsEntityPerfThroughputNotif : undefined;
            resourceInputs["enableTrapsEnvmon"] = args ? args.enableTrapsEnvmon : undefined;
            resourceInputs["enableTrapsErrdisable"] = args ? args.enableTrapsErrdisable : undefined;
            resourceInputs["enableTrapsEventManager"] = args ? args.enableTrapsEventManager : undefined;
            resourceInputs["enableTrapsFastRerouteProtected"] = args ? args.enableTrapsFastRerouteProtected : undefined;
            resourceInputs["enableTrapsFlashInsertion"] = args ? args.enableTrapsFlashInsertion : undefined;
            resourceInputs["enableTrapsFlashLowspace"] = args ? args.enableTrapsFlashLowspace : undefined;
            resourceInputs["enableTrapsFlashRemoval"] = args ? args.enableTrapsFlashRemoval : undefined;
            resourceInputs["enableTrapsFlowmon"] = args ? args.enableTrapsFlowmon : undefined;
            resourceInputs["enableTrapsFruCtrl"] = args ? args.enableTrapsFruCtrl : undefined;
            resourceInputs["enableTrapsHsrp"] = args ? args.enableTrapsHsrp : undefined;
            resourceInputs["enableTrapsIkePolicyAdd"] = args ? args.enableTrapsIkePolicyAdd : undefined;
            resourceInputs["enableTrapsIkePolicyDelete"] = args ? args.enableTrapsIkePolicyDelete : undefined;
            resourceInputs["enableTrapsIkeTunnelStart"] = args ? args.enableTrapsIkeTunnelStart : undefined;
            resourceInputs["enableTrapsIkeTunnelStop"] = args ? args.enableTrapsIkeTunnelStop : undefined;
            resourceInputs["enableTrapsIpmulticast"] = args ? args.enableTrapsIpmulticast : undefined;
            resourceInputs["enableTrapsIpsecCryptomapAdd"] = args ? args.enableTrapsIpsecCryptomapAdd : undefined;
            resourceInputs["enableTrapsIpsecCryptomapAttach"] = args ? args.enableTrapsIpsecCryptomapAttach : undefined;
            resourceInputs["enableTrapsIpsecCryptomapDelete"] = args ? args.enableTrapsIpsecCryptomapDelete : undefined;
            resourceInputs["enableTrapsIpsecCryptomapDetach"] = args ? args.enableTrapsIpsecCryptomapDetach : undefined;
            resourceInputs["enableTrapsIpsecTooManySas"] = args ? args.enableTrapsIpsecTooManySas : undefined;
            resourceInputs["enableTrapsIpsecTunnelStart"] = args ? args.enableTrapsIpsecTunnelStart : undefined;
            resourceInputs["enableTrapsIpsecTunnelStop"] = args ? args.enableTrapsIpsecTunnelStop : undefined;
            resourceInputs["enableTrapsIpsla"] = args ? args.enableTrapsIpsla : undefined;
            resourceInputs["enableTrapsIsis"] = args ? args.enableTrapsIsis : undefined;
            resourceInputs["enableTrapsLicense"] = args ? args.enableTrapsLicense : undefined;
            resourceInputs["enableTrapsLocalAuth"] = args ? args.enableTrapsLocalAuth : undefined;
            resourceInputs["enableTrapsMacNotificationChange"] = args ? args.enableTrapsMacNotificationChange : undefined;
            resourceInputs["enableTrapsMacNotificationMove"] = args ? args.enableTrapsMacNotificationMove : undefined;
            resourceInputs["enableTrapsMacNotificationThreshold"] = args ? args.enableTrapsMacNotificationThreshold : undefined;
            resourceInputs["enableTrapsMemoryBufferpeak"] = args ? args.enableTrapsMemoryBufferpeak : undefined;
            resourceInputs["enableTrapsMplsLdp"] = args ? args.enableTrapsMplsLdp : undefined;
            resourceInputs["enableTrapsMplsRfcLdp"] = args ? args.enableTrapsMplsRfcLdp : undefined;
            resourceInputs["enableTrapsMplsTrafficEng"] = args ? args.enableTrapsMplsTrafficEng : undefined;
            resourceInputs["enableTrapsMplsVpn"] = args ? args.enableTrapsMplsVpn : undefined;
            resourceInputs["enableTrapsMsdp"] = args ? args.enableTrapsMsdp : undefined;
            resourceInputs["enableTrapsNhrpNhc"] = args ? args.enableTrapsNhrpNhc : undefined;
            resourceInputs["enableTrapsNhrpNhp"] = args ? args.enableTrapsNhrpNhp : undefined;
            resourceInputs["enableTrapsNhrpNhs"] = args ? args.enableTrapsNhrpNhs : undefined;
            resourceInputs["enableTrapsNhrpQuotaExceeded"] = args ? args.enableTrapsNhrpQuotaExceeded : undefined;
            resourceInputs["enableTrapsOspfConfigErrors"] = args ? args.enableTrapsOspfConfigErrors : undefined;
            resourceInputs["enableTrapsOspfConfigLsa"] = args ? args.enableTrapsOspfConfigLsa : undefined;
            resourceInputs["enableTrapsOspfConfigRetransmit"] = args ? args.enableTrapsOspfConfigRetransmit : undefined;
            resourceInputs["enableTrapsOspfConfigStateChange"] = args ? args.enableTrapsOspfConfigStateChange : undefined;
            resourceInputs["enableTrapsOspfErrorsEnable"] = args ? args.enableTrapsOspfErrorsEnable : undefined;
            resourceInputs["enableTrapsOspfLsaEnable"] = args ? args.enableTrapsOspfLsaEnable : undefined;
            resourceInputs["enableTrapsOspfNssaTransChange"] = args ? args.enableTrapsOspfNssaTransChange : undefined;
            resourceInputs["enableTrapsOspfRetransmitEnable"] = args ? args.enableTrapsOspfRetransmitEnable : undefined;
            resourceInputs["enableTrapsOspfShamlinkInterface"] = args ? args.enableTrapsOspfShamlinkInterface : undefined;
            resourceInputs["enableTrapsOspfShamlinkNeighbor"] = args ? args.enableTrapsOspfShamlinkNeighbor : undefined;
            resourceInputs["enableTrapsOspfv3ConfigErrors"] = args ? args.enableTrapsOspfv3ConfigErrors : undefined;
            resourceInputs["enableTrapsOspfv3ConfigStateChange"] = args ? args.enableTrapsOspfv3ConfigStateChange : undefined;
            resourceInputs["enableTrapsPimInvalidPimMessage"] = args ? args.enableTrapsPimInvalidPimMessage : undefined;
            resourceInputs["enableTrapsPimNeighborChange"] = args ? args.enableTrapsPimNeighborChange : undefined;
            resourceInputs["enableTrapsPimRpMappingChange"] = args ? args.enableTrapsPimRpMappingChange : undefined;
            resourceInputs["enableTrapsPortSecurity"] = args ? args.enableTrapsPortSecurity : undefined;
            resourceInputs["enableTrapsPowerEthernetGroup"] = args ? args.enableTrapsPowerEthernetGroup : undefined;
            resourceInputs["enableTrapsPowerEthernetPolice"] = args ? args.enableTrapsPowerEthernetPolice : undefined;
            resourceInputs["enableTrapsPwVc"] = args ? args.enableTrapsPwVc : undefined;
            resourceInputs["enableTrapsRep"] = args ? args.enableTrapsRep : undefined;
            resourceInputs["enableTrapsRf"] = args ? args.enableTrapsRf : undefined;
            resourceInputs["enableTrapsSmartLicense"] = args ? args.enableTrapsSmartLicense : undefined;
            resourceInputs["enableTrapsSnmpAuthentication"] = args ? args.enableTrapsSnmpAuthentication : undefined;
            resourceInputs["enableTrapsSnmpColdstart"] = args ? args.enableTrapsSnmpColdstart : undefined;
            resourceInputs["enableTrapsSnmpLinkdown"] = args ? args.enableTrapsSnmpLinkdown : undefined;
            resourceInputs["enableTrapsSnmpLinkup"] = args ? args.enableTrapsSnmpLinkup : undefined;
            resourceInputs["enableTrapsSnmpWarmstart"] = args ? args.enableTrapsSnmpWarmstart : undefined;
            resourceInputs["enableTrapsStackwise"] = args ? args.enableTrapsStackwise : undefined;
            resourceInputs["enableTrapsStpxInconsistency"] = args ? args.enableTrapsStpxInconsistency : undefined;
            resourceInputs["enableTrapsStpxLoopInconsistency"] = args ? args.enableTrapsStpxLoopInconsistency : undefined;
            resourceInputs["enableTrapsStpxRootInconsistency"] = args ? args.enableTrapsStpxRootInconsistency : undefined;
            resourceInputs["enableTrapsSyslog"] = args ? args.enableTrapsSyslog : undefined;
            resourceInputs["enableTrapsTransceiverAll"] = args ? args.enableTrapsTransceiverAll : undefined;
            resourceInputs["enableTrapsTty"] = args ? args.enableTrapsTty : undefined;
            resourceInputs["enableTrapsUdldLinkFailRpt"] = args ? args.enableTrapsUdldLinkFailRpt : undefined;
            resourceInputs["enableTrapsUdldStatusChange"] = args ? args.enableTrapsUdldStatusChange : undefined;
            resourceInputs["enableTrapsVlanMembership"] = args ? args.enableTrapsVlanMembership : undefined;
            resourceInputs["enableTrapsVlancreate"] = args ? args.enableTrapsVlancreate : undefined;
            resourceInputs["enableTrapsVlandelete"] = args ? args.enableTrapsVlandelete : undefined;
            resourceInputs["enableTrapsVrfmibVnetTrunkDown"] = args ? args.enableTrapsVrfmibVnetTrunkDown : undefined;
            resourceInputs["enableTrapsVrfmibVnetTrunkUp"] = args ? args.enableTrapsVrfmibVnetTrunkUp : undefined;
            resourceInputs["enableTrapsVrfmibVrfDown"] = args ? args.enableTrapsVrfmibVrfDown : undefined;
            resourceInputs["enableTrapsVrfmibVrfUp"] = args ? args.enableTrapsVrfmibVrfUp : undefined;
            resourceInputs["enableTrapsVtp"] = args ? args.enableTrapsVtp : undefined;
            resourceInputs["hosts"] = args ? args.hosts : undefined;
            resourceInputs["ifindexPersist"] = args ? args.ifindexPersist : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["packetsize"] = args ? args.packetsize : undefined;
            resourceInputs["queueLength"] = args ? args.queueLength : undefined;
            resourceInputs["snmpCommunities"] = args ? args.snmpCommunities : undefined;
            resourceInputs["sourceInterfaceInformsFortyGigabitEthernet"] = args ? args.sourceInterfaceInformsFortyGigabitEthernet : undefined;
            resourceInputs["sourceInterfaceInformsGigabitEthernet"] = args ? args.sourceInterfaceInformsGigabitEthernet : undefined;
            resourceInputs["sourceInterfaceInformsHundredGigE"] = args ? args.sourceInterfaceInformsHundredGigE : undefined;
            resourceInputs["sourceInterfaceInformsLoopback"] = args ? args.sourceInterfaceInformsLoopback : undefined;
            resourceInputs["sourceInterfaceInformsPortChannel"] = args ? args.sourceInterfaceInformsPortChannel : undefined;
            resourceInputs["sourceInterfaceInformsPortChannelSubinterface"] = args ? args.sourceInterfaceInformsPortChannelSubinterface : undefined;
            resourceInputs["sourceInterfaceInformsTenGigabitEthernet"] = args ? args.sourceInterfaceInformsTenGigabitEthernet : undefined;
            resourceInputs["sourceInterfaceInformsVlan"] = args ? args.sourceInterfaceInformsVlan : undefined;
            resourceInputs["sourceInterfaceTrapsFortyGigabitEthernet"] = args ? args.sourceInterfaceTrapsFortyGigabitEthernet : undefined;
            resourceInputs["sourceInterfaceTrapsGigabitEthernet"] = args ? args.sourceInterfaceTrapsGigabitEthernet : undefined;
            resourceInputs["sourceInterfaceTrapsHundredGigE"] = args ? args.sourceInterfaceTrapsHundredGigE : undefined;
            resourceInputs["sourceInterfaceTrapsLoopback"] = args ? args.sourceInterfaceTrapsLoopback : undefined;
            resourceInputs["sourceInterfaceTrapsPortChannel"] = args ? args.sourceInterfaceTrapsPortChannel : undefined;
            resourceInputs["sourceInterfaceTrapsPortChannelSubinterface"] = args ? args.sourceInterfaceTrapsPortChannelSubinterface : undefined;
            resourceInputs["sourceInterfaceTrapsTenGigabitEthernet"] = args ? args.sourceInterfaceTrapsTenGigabitEthernet : undefined;
            resourceInputs["sourceInterfaceTrapsVlan"] = args ? args.sourceInterfaceTrapsVlan : undefined;
            resourceInputs["systemShutdown"] = args ? args.systemShutdown : undefined;
            resourceInputs["trapSourceFortyGigabitEthernet"] = args ? args.trapSourceFortyGigabitEthernet : undefined;
            resourceInputs["trapSourceGigabitEthernet"] = args ? args.trapSourceGigabitEthernet : undefined;
            resourceInputs["trapSourceHundredGigE"] = args ? args.trapSourceHundredGigE : undefined;
            resourceInputs["trapSourceLoopback"] = args ? args.trapSourceLoopback : undefined;
            resourceInputs["trapSourcePortChannel"] = args ? args.trapSourcePortChannel : undefined;
            resourceInputs["trapSourcePortChannelSubinterface"] = args ? args.trapSourcePortChannelSubinterface : undefined;
            resourceInputs["trapSourceTenGigabitEthernet"] = args ? args.trapSourceTenGigabitEthernet : undefined;
            resourceInputs["trapSourceVlan"] = args ? args.trapSourceVlan : undefined;
            resourceInputs["views"] = args ? args.views : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SnmpServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SnmpServer resources.
 */
export interface SnmpServerState {
    /**
     * String to uniquely identify this chassis
     */
    chassisId?: pulumi.Input<string>;
    /**
     * Text for mib object sysContact
     */
    contact?: pulumi.Input<string>;
    /**
     * Create/Delete a context apart from default
     */
    contexts?: pulumi.Input<pulumi.Input<inputs.SnmpServerContext>[]>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Enable SNMP Informs
     */
    enableInforms?: pulumi.Input<boolean>;
    /**
     * Enable SNMP GET Operation logging
     */
    enableLoggingGetop?: pulumi.Input<boolean>;
    /**
     * Enable SNMP SET Operation logging
     */
    enableLoggingSetop?: pulumi.Input<boolean>;
    /**
     * Enable SNMP Traps
     */
    enableTraps?: pulumi.Input<boolean>;
    enableTrapsAuthFrameworkSecViolation?: pulumi.Input<boolean>;
    enableTrapsBfd?: pulumi.Input<boolean>;
    /**
     * Enable BGP MIBv2 traps
     */
    enableTrapsBgpCbgp2?: pulumi.Input<boolean>;
    enableTrapsBridgeNewroot?: pulumi.Input<boolean>;
    enableTrapsBridgeTopologychange?: pulumi.Input<boolean>;
    /**
     * Enable Data-Collection-MIB Collection notifications
     */
    enableTrapsBulkstatCollection?: pulumi.Input<boolean>;
    /**
     * Enable Data-Collection-MIB Transfer notifications
     */
    enableTrapsBulkstatTransfer?: pulumi.Input<boolean>;
    enableTrapsCallHomeMessageSendFail?: pulumi.Input<boolean>;
    enableTrapsCallHomeServerFail?: pulumi.Input<boolean>;
    enableTrapsCefInconsistency?: pulumi.Input<boolean>;
    enableTrapsCefPeerFibStateChange?: pulumi.Input<boolean>;
    enableTrapsCefPeerStateChange?: pulumi.Input<boolean>;
    enableTrapsCefResourceFailure?: pulumi.Input<boolean>;
    /**
     * Enable SNMP config traps
     */
    enableTrapsConfig?: pulumi.Input<boolean>;
    /**
     * Enable SNMP config-copy traps
     */
    enableTrapsConfigCopy?: pulumi.Input<boolean>;
    enableTrapsConfigCtid?: pulumi.Input<boolean>;
    /**
     * Allow CPU utilization threshold violation traps
     */
    enableTrapsCpuThreshold?: pulumi.Input<boolean>;
    /**
     * Enable SNMP dhcp traps
     */
    enableTrapsDhcp?: pulumi.Input<boolean>;
    /**
     * Enable SNMP EIGRP traps
     */
    enableTrapsEigrp?: pulumi.Input<boolean>;
    enableTrapsEnergywise?: pulumi.Input<boolean>;
    /**
     * Enable SNMP entity traps
     */
    enableTrapsEntity?: pulumi.Input<boolean>;
    /**
     * Enable SNMP ceDiagBootUpFailedNotif traps
     */
    enableTrapsEntityDiagBootUpFail?: pulumi.Input<boolean>;
    /**
     * Enable SNMP ceDiagHMTestRecoverNotif traps
     */
    enableTrapsEntityDiagHmTestRecover?: pulumi.Input<boolean>;
    /**
     * Enable SNMP ceDiagHMThresholdReachedNotif traps
     */
    enableTrapsEntityDiagHmThreshReached?: pulumi.Input<boolean>;
    /**
     * Enable SNMP ceDiagScheduledTestFailedNotif traps
     */
    enableTrapsEntityDiagScheduledTestFail?: pulumi.Input<boolean>;
    /**
     * Enable ENTITY PERFORMANCE MIB throughput traps
     */
    enableTrapsEntityPerfThroughputNotif?: pulumi.Input<boolean>;
    /**
     * Enable SNMP environmental monitor traps
     */
    enableTrapsEnvmon?: pulumi.Input<boolean>;
    /**
     * Enable SNMP errdisable notifications
     */
    enableTrapsErrdisable?: pulumi.Input<boolean>;
    /**
     * Enable SNMP Embedded Event Manager traps
     */
    enableTrapsEventManager?: pulumi.Input<boolean>;
    enableTrapsFastRerouteProtected?: pulumi.Input<boolean>;
    /**
     * Enable SNMP Flash Insertion notifications
     */
    enableTrapsFlashInsertion?: pulumi.Input<boolean>;
    /**
     * Enable SNMP Flash Lowspace notifications
     */
    enableTrapsFlashLowspace?: pulumi.Input<boolean>;
    /**
     * Enable SNMP Flash Removal notifications
     */
    enableTrapsFlashRemoval?: pulumi.Input<boolean>;
    /**
     * Enable SNMP flowmon notifications
     */
    enableTrapsFlowmon?: pulumi.Input<boolean>;
    /**
     * Enable SNMP entity FRU control traps
     */
    enableTrapsFruCtrl?: pulumi.Input<boolean>;
    /**
     * Enable SNMP HSRP traps
     */
    enableTrapsHsrp?: pulumi.Input<boolean>;
    /**
     * Enable IKE Policy add trap
     */
    enableTrapsIkePolicyAdd?: pulumi.Input<boolean>;
    /**
     * Enable IKE Policy delete trap
     */
    enableTrapsIkePolicyDelete?: pulumi.Input<boolean>;
    /**
     * Enable IKE Tunnel start trap
     */
    enableTrapsIkeTunnelStart?: pulumi.Input<boolean>;
    /**
     * Enable IKE Tunnel stop trap
     */
    enableTrapsIkeTunnelStop?: pulumi.Input<boolean>;
    /**
     * Enable SNMP ipmulticast traps
     */
    enableTrapsIpmulticast?: pulumi.Input<boolean>;
    /**
     * Enable IPsec Cryptomap add trap
     */
    enableTrapsIpsecCryptomapAdd?: pulumi.Input<boolean>;
    /**
     * Enable IPsec Cryptomap Attach trap
     */
    enableTrapsIpsecCryptomapAttach?: pulumi.Input<boolean>;
    /**
     * Enable IPsec Cryptomap delete trap
     */
    enableTrapsIpsecCryptomapDelete?: pulumi.Input<boolean>;
    /**
     * Enable IPsec Cryptomap Detach trap
     */
    enableTrapsIpsecCryptomapDetach?: pulumi.Input<boolean>;
    /**
     * Enable IPsec Tunnel Start trap
     */
    enableTrapsIpsecTooManySas?: pulumi.Input<boolean>;
    /**
     * Enable IPsec Tunnel Start trap
     */
    enableTrapsIpsecTunnelStart?: pulumi.Input<boolean>;
    /**
     * Enable IPsec Tunnel Stop trap
     */
    enableTrapsIpsecTunnelStop?: pulumi.Input<boolean>;
    /**
     * Enable IPSLA traps traps
     */
    enableTrapsIpsla?: pulumi.Input<boolean>;
    /**
     * Enable ISIS traps traps
     */
    enableTrapsIsis?: pulumi.Input<boolean>;
    /**
     * Enable license traps
     */
    enableTrapsLicense?: pulumi.Input<boolean>;
    /**
     * Enable SNMP local auth traps
     */
    enableTrapsLocalAuth?: pulumi.Input<boolean>;
    /**
     * Enable SNMP Change traps
     */
    enableTrapsMacNotificationChange?: pulumi.Input<boolean>;
    /**
     * Enable SNMP Move traps
     */
    enableTrapsMacNotificationMove?: pulumi.Input<boolean>;
    /**
     * Enable SNMP Threshold traps
     */
    enableTrapsMacNotificationThreshold?: pulumi.Input<boolean>;
    /**
     * Enable SNMP Memory Bufferpeak traps
     */
    enableTrapsMemoryBufferpeak?: pulumi.Input<boolean>;
    /**
     * SNMP MPLS label distribution protocol traps
     */
    enableTrapsMplsLdp?: pulumi.Input<boolean>;
    enableTrapsMplsRfcLdp?: pulumi.Input<boolean>;
    enableTrapsMplsTrafficEng?: pulumi.Input<boolean>;
    enableTrapsMplsVpn?: pulumi.Input<boolean>;
    /**
     * Enable SNMP MSDP traps
     */
    enableTrapsMsdp?: pulumi.Input<boolean>;
    enableTrapsNhrpNhc?: pulumi.Input<boolean>;
    enableTrapsNhrpNhp?: pulumi.Input<boolean>;
    enableTrapsNhrpNhs?: pulumi.Input<boolean>;
    enableTrapsNhrpQuotaExceeded?: pulumi.Input<boolean>;
    /**
     * Enable all traps of errors
     */
    enableTrapsOspfConfigErrors?: pulumi.Input<boolean>;
    /**
     * Enable all traps of lsa
     */
    enableTrapsOspfConfigLsa?: pulumi.Input<boolean>;
    /**
     * Enable all traps of retransmit
     */
    enableTrapsOspfConfigRetransmit?: pulumi.Input<boolean>;
    /**
     * Enable all traps of state-change
     */
    enableTrapsOspfConfigStateChange?: pulumi.Input<boolean>;
    /**
     * Enable all traps of errors
     */
    enableTrapsOspfErrorsEnable?: pulumi.Input<boolean>;
    /**
     * Enable all traps of lsa
     */
    enableTrapsOspfLsaEnable?: pulumi.Input<boolean>;
    /**
     * Nssa translator state changes
     */
    enableTrapsOspfNssaTransChange?: pulumi.Input<boolean>;
    /**
     * Enable all traps of retransmit
     */
    enableTrapsOspfRetransmitEnable?: pulumi.Input<boolean>;
    /**
     * Sham link interface state changes
     */
    enableTrapsOspfShamlinkInterface?: pulumi.Input<boolean>;
    /**
     * Sham link neighbor state changes
     */
    enableTrapsOspfShamlinkNeighbor?: pulumi.Input<boolean>;
    /**
     * Enable all traps of errors
     */
    enableTrapsOspfv3ConfigErrors?: pulumi.Input<boolean>;
    /**
     * Enable all traps of state-change
     */
    enableTrapsOspfv3ConfigStateChange?: pulumi.Input<boolean>;
    /**
     * Enable invalid pim message trap
     */
    enableTrapsPimInvalidPimMessage?: pulumi.Input<boolean>;
    /**
     * Enable neighbor change trap
     */
    enableTrapsPimNeighborChange?: pulumi.Input<boolean>;
    /**
     * Enable rp mapping change trap
     */
    enableTrapsPimRpMappingChange?: pulumi.Input<boolean>;
    /**
     * Enable SNMP port security traps
     */
    enableTrapsPortSecurity?: pulumi.Input<boolean>;
    /**
     * Enable SNMP inline power group based traps
     */
    enableTrapsPowerEthernetGroup?: pulumi.Input<string>;
    /**
     * Enable Policing Trap
     */
    enableTrapsPowerEthernetPolice?: pulumi.Input<boolean>;
    enableTrapsPwVc?: pulumi.Input<boolean>;
    enableTrapsRep?: pulumi.Input<boolean>;
    /**
     * Enable all SNMP traps defined in CISCO-RF-MIB
     */
    enableTrapsRf?: pulumi.Input<boolean>;
    /**
     * Enable smart license traps
     */
    enableTrapsSmartLicense?: pulumi.Input<boolean>;
    /**
     * Enable authentication trap
     */
    enableTrapsSnmpAuthentication?: pulumi.Input<boolean>;
    /**
     * Enable coldStart trap
     */
    enableTrapsSnmpColdstart?: pulumi.Input<boolean>;
    /**
     * Enable linkDown trap
     */
    enableTrapsSnmpLinkdown?: pulumi.Input<boolean>;
    /**
     * Enable linkUp trap
     */
    enableTrapsSnmpLinkup?: pulumi.Input<boolean>;
    /**
     * Enable warmStart trap
     */
    enableTrapsSnmpWarmstart?: pulumi.Input<boolean>;
    /**
     * Enable SNMP stackwise traps
     */
    enableTrapsStackwise?: pulumi.Input<boolean>;
    enableTrapsStpxInconsistency?: pulumi.Input<boolean>;
    enableTrapsStpxLoopInconsistency?: pulumi.Input<boolean>;
    enableTrapsStpxRootInconsistency?: pulumi.Input<boolean>;
    /**
     * Enable SNMP syslog traps
     */
    enableTrapsSyslog?: pulumi.Input<boolean>;
    enableTrapsTransceiverAll?: pulumi.Input<boolean>;
    /**
     * Enable TCP connection traps
     */
    enableTrapsTty?: pulumi.Input<boolean>;
    /**
     * Enable SNMP cudldpFastHelloLinkFailRptNotification traps
     */
    enableTrapsUdldLinkFailRpt?: pulumi.Input<boolean>;
    /**
     * Enable SNMP cudldpFastHelloStatusChangeNotification traps
     */
    enableTrapsUdldStatusChange?: pulumi.Input<boolean>;
    enableTrapsVlanMembership?: pulumi.Input<boolean>;
    enableTrapsVlancreate?: pulumi.Input<boolean>;
    enableTrapsVlandelete?: pulumi.Input<boolean>;
    enableTrapsVrfmibVnetTrunkDown?: pulumi.Input<boolean>;
    enableTrapsVrfmibVnetTrunkUp?: pulumi.Input<boolean>;
    enableTrapsVrfmibVrfDown?: pulumi.Input<boolean>;
    enableTrapsVrfmibVrfUp?: pulumi.Input<boolean>;
    enableTrapsVtp?: pulumi.Input<boolean>;
    /**
     * Specify hosts keyed by (ip-address, community-or-user)
     */
    hosts?: pulumi.Input<pulumi.Input<inputs.SnmpServerHost>[]>;
    /**
     * Persist interface indices
     */
    ifindexPersist?: pulumi.Input<boolean>;
    /**
     * Text for mib object sysLocation
     */
    location?: pulumi.Input<string>;
    /**
     * Largest SNMP packet size - Range: `484`-`17892`
     */
    packetsize?: pulumi.Input<number>;
    /**
     * Message queue length for each TRAP host - Range: `1`-`5000`
     */
    queueLength?: pulumi.Input<number>;
    /**
     * Enable SNMP; set community string and access privs
     */
    snmpCommunities?: pulumi.Input<pulumi.Input<inputs.SnmpServerSnmpCommunity>[]>;
    /**
     * Forty GigabitEthernet
     */
    sourceInterfaceInformsFortyGigabitEthernet?: pulumi.Input<string>;
    /**
     * GigabitEthernet IEEE 802.3z
     */
    sourceInterfaceInformsGigabitEthernet?: pulumi.Input<string>;
    /**
     * Hundred GigabitEthernet
     */
    sourceInterfaceInformsHundredGigE?: pulumi.Input<string>;
    /**
     * Loopback interface - Range: `0`-`2147483647`
     */
    sourceInterfaceInformsLoopback?: pulumi.Input<number>;
    /**
     * Ethernet Channel of interfaces - Range: `0`-`4294967295`
     */
    sourceInterfaceInformsPortChannel?: pulumi.Input<number>;
    sourceInterfaceInformsPortChannelSubinterface?: pulumi.Input<string>;
    /**
     * Ten Gigabit Ethernet
     */
    sourceInterfaceInformsTenGigabitEthernet?: pulumi.Input<string>;
    /**
     * Iosxr Vlans - Range: `0`-`65535`
     */
    sourceInterfaceInformsVlan?: pulumi.Input<number>;
    /**
     * Forty GigabitEthernet
     */
    sourceInterfaceTrapsFortyGigabitEthernet?: pulumi.Input<string>;
    /**
     * GigabitEthernet IEEE 802.3z
     */
    sourceInterfaceTrapsGigabitEthernet?: pulumi.Input<string>;
    /**
     * Hundred GigabitEthernet
     */
    sourceInterfaceTrapsHundredGigE?: pulumi.Input<string>;
    /**
     * Loopback interface - Range: `0`-`2147483647`
     */
    sourceInterfaceTrapsLoopback?: pulumi.Input<number>;
    /**
     * Ethernet Channel of interfaces - Range: `0`-`4294967295`
     */
    sourceInterfaceTrapsPortChannel?: pulumi.Input<number>;
    sourceInterfaceTrapsPortChannelSubinterface?: pulumi.Input<string>;
    /**
     * Ten Gigabit Ethernet
     */
    sourceInterfaceTrapsTenGigabitEthernet?: pulumi.Input<string>;
    /**
     * Iosxr Vlans - Range: `0`-`65535`
     */
    sourceInterfaceTrapsVlan?: pulumi.Input<number>;
    /**
     * Enable use of the SNMP reload command
     */
    systemShutdown?: pulumi.Input<boolean>;
    /**
     * Forty GigabitEthernet
     */
    trapSourceFortyGigabitEthernet?: pulumi.Input<string>;
    /**
     * GigabitEthernet IEEE 802.3z
     */
    trapSourceGigabitEthernet?: pulumi.Input<string>;
    /**
     * Hundred GigabitEthernet
     */
    trapSourceHundredGigE?: pulumi.Input<string>;
    /**
     * Loopback interface - Range: `0`-`2147483647`
     */
    trapSourceLoopback?: pulumi.Input<number>;
    /**
     * Ethernet Channel of interfaces - Range: `0`-`4294967295`
     */
    trapSourcePortChannel?: pulumi.Input<number>;
    trapSourcePortChannelSubinterface?: pulumi.Input<string>;
    /**
     * Ten Gigabit Ethernet
     */
    trapSourceTenGigabitEthernet?: pulumi.Input<string>;
    /**
     * Iosxr Vlans - Range: `0`-`65535`
     */
    trapSourceVlan?: pulumi.Input<number>;
    /**
     * Define an SNMPv2 MIB view
     */
    views?: pulumi.Input<pulumi.Input<inputs.SnmpServerView>[]>;
}

/**
 * The set of arguments for constructing a SnmpServer resource.
 */
export interface SnmpServerArgs {
    /**
     * String to uniquely identify this chassis
     */
    chassisId?: pulumi.Input<string>;
    /**
     * Text for mib object sysContact
     */
    contact?: pulumi.Input<string>;
    /**
     * Create/Delete a context apart from default
     */
    contexts?: pulumi.Input<pulumi.Input<inputs.SnmpServerContext>[]>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Enable SNMP Informs
     */
    enableInforms?: pulumi.Input<boolean>;
    /**
     * Enable SNMP GET Operation logging
     */
    enableLoggingGetop?: pulumi.Input<boolean>;
    /**
     * Enable SNMP SET Operation logging
     */
    enableLoggingSetop?: pulumi.Input<boolean>;
    /**
     * Enable SNMP Traps
     */
    enableTraps?: pulumi.Input<boolean>;
    enableTrapsAuthFrameworkSecViolation?: pulumi.Input<boolean>;
    enableTrapsBfd?: pulumi.Input<boolean>;
    /**
     * Enable BGP MIBv2 traps
     */
    enableTrapsBgpCbgp2?: pulumi.Input<boolean>;
    enableTrapsBridgeNewroot?: pulumi.Input<boolean>;
    enableTrapsBridgeTopologychange?: pulumi.Input<boolean>;
    /**
     * Enable Data-Collection-MIB Collection notifications
     */
    enableTrapsBulkstatCollection?: pulumi.Input<boolean>;
    /**
     * Enable Data-Collection-MIB Transfer notifications
     */
    enableTrapsBulkstatTransfer?: pulumi.Input<boolean>;
    enableTrapsCallHomeMessageSendFail?: pulumi.Input<boolean>;
    enableTrapsCallHomeServerFail?: pulumi.Input<boolean>;
    enableTrapsCefInconsistency?: pulumi.Input<boolean>;
    enableTrapsCefPeerFibStateChange?: pulumi.Input<boolean>;
    enableTrapsCefPeerStateChange?: pulumi.Input<boolean>;
    enableTrapsCefResourceFailure?: pulumi.Input<boolean>;
    /**
     * Enable SNMP config traps
     */
    enableTrapsConfig?: pulumi.Input<boolean>;
    /**
     * Enable SNMP config-copy traps
     */
    enableTrapsConfigCopy?: pulumi.Input<boolean>;
    enableTrapsConfigCtid?: pulumi.Input<boolean>;
    /**
     * Allow CPU utilization threshold violation traps
     */
    enableTrapsCpuThreshold?: pulumi.Input<boolean>;
    /**
     * Enable SNMP dhcp traps
     */
    enableTrapsDhcp?: pulumi.Input<boolean>;
    /**
     * Enable SNMP EIGRP traps
     */
    enableTrapsEigrp?: pulumi.Input<boolean>;
    enableTrapsEnergywise?: pulumi.Input<boolean>;
    /**
     * Enable SNMP entity traps
     */
    enableTrapsEntity?: pulumi.Input<boolean>;
    /**
     * Enable SNMP ceDiagBootUpFailedNotif traps
     */
    enableTrapsEntityDiagBootUpFail?: pulumi.Input<boolean>;
    /**
     * Enable SNMP ceDiagHMTestRecoverNotif traps
     */
    enableTrapsEntityDiagHmTestRecover?: pulumi.Input<boolean>;
    /**
     * Enable SNMP ceDiagHMThresholdReachedNotif traps
     */
    enableTrapsEntityDiagHmThreshReached?: pulumi.Input<boolean>;
    /**
     * Enable SNMP ceDiagScheduledTestFailedNotif traps
     */
    enableTrapsEntityDiagScheduledTestFail?: pulumi.Input<boolean>;
    /**
     * Enable ENTITY PERFORMANCE MIB throughput traps
     */
    enableTrapsEntityPerfThroughputNotif?: pulumi.Input<boolean>;
    /**
     * Enable SNMP environmental monitor traps
     */
    enableTrapsEnvmon?: pulumi.Input<boolean>;
    /**
     * Enable SNMP errdisable notifications
     */
    enableTrapsErrdisable?: pulumi.Input<boolean>;
    /**
     * Enable SNMP Embedded Event Manager traps
     */
    enableTrapsEventManager?: pulumi.Input<boolean>;
    enableTrapsFastRerouteProtected?: pulumi.Input<boolean>;
    /**
     * Enable SNMP Flash Insertion notifications
     */
    enableTrapsFlashInsertion?: pulumi.Input<boolean>;
    /**
     * Enable SNMP Flash Lowspace notifications
     */
    enableTrapsFlashLowspace?: pulumi.Input<boolean>;
    /**
     * Enable SNMP Flash Removal notifications
     */
    enableTrapsFlashRemoval?: pulumi.Input<boolean>;
    /**
     * Enable SNMP flowmon notifications
     */
    enableTrapsFlowmon?: pulumi.Input<boolean>;
    /**
     * Enable SNMP entity FRU control traps
     */
    enableTrapsFruCtrl?: pulumi.Input<boolean>;
    /**
     * Enable SNMP HSRP traps
     */
    enableTrapsHsrp?: pulumi.Input<boolean>;
    /**
     * Enable IKE Policy add trap
     */
    enableTrapsIkePolicyAdd?: pulumi.Input<boolean>;
    /**
     * Enable IKE Policy delete trap
     */
    enableTrapsIkePolicyDelete?: pulumi.Input<boolean>;
    /**
     * Enable IKE Tunnel start trap
     */
    enableTrapsIkeTunnelStart?: pulumi.Input<boolean>;
    /**
     * Enable IKE Tunnel stop trap
     */
    enableTrapsIkeTunnelStop?: pulumi.Input<boolean>;
    /**
     * Enable SNMP ipmulticast traps
     */
    enableTrapsIpmulticast?: pulumi.Input<boolean>;
    /**
     * Enable IPsec Cryptomap add trap
     */
    enableTrapsIpsecCryptomapAdd?: pulumi.Input<boolean>;
    /**
     * Enable IPsec Cryptomap Attach trap
     */
    enableTrapsIpsecCryptomapAttach?: pulumi.Input<boolean>;
    /**
     * Enable IPsec Cryptomap delete trap
     */
    enableTrapsIpsecCryptomapDelete?: pulumi.Input<boolean>;
    /**
     * Enable IPsec Cryptomap Detach trap
     */
    enableTrapsIpsecCryptomapDetach?: pulumi.Input<boolean>;
    /**
     * Enable IPsec Tunnel Start trap
     */
    enableTrapsIpsecTooManySas?: pulumi.Input<boolean>;
    /**
     * Enable IPsec Tunnel Start trap
     */
    enableTrapsIpsecTunnelStart?: pulumi.Input<boolean>;
    /**
     * Enable IPsec Tunnel Stop trap
     */
    enableTrapsIpsecTunnelStop?: pulumi.Input<boolean>;
    /**
     * Enable IPSLA traps traps
     */
    enableTrapsIpsla?: pulumi.Input<boolean>;
    /**
     * Enable ISIS traps traps
     */
    enableTrapsIsis?: pulumi.Input<boolean>;
    /**
     * Enable license traps
     */
    enableTrapsLicense?: pulumi.Input<boolean>;
    /**
     * Enable SNMP local auth traps
     */
    enableTrapsLocalAuth?: pulumi.Input<boolean>;
    /**
     * Enable SNMP Change traps
     */
    enableTrapsMacNotificationChange?: pulumi.Input<boolean>;
    /**
     * Enable SNMP Move traps
     */
    enableTrapsMacNotificationMove?: pulumi.Input<boolean>;
    /**
     * Enable SNMP Threshold traps
     */
    enableTrapsMacNotificationThreshold?: pulumi.Input<boolean>;
    /**
     * Enable SNMP Memory Bufferpeak traps
     */
    enableTrapsMemoryBufferpeak?: pulumi.Input<boolean>;
    /**
     * SNMP MPLS label distribution protocol traps
     */
    enableTrapsMplsLdp?: pulumi.Input<boolean>;
    enableTrapsMplsRfcLdp?: pulumi.Input<boolean>;
    enableTrapsMplsTrafficEng?: pulumi.Input<boolean>;
    enableTrapsMplsVpn?: pulumi.Input<boolean>;
    /**
     * Enable SNMP MSDP traps
     */
    enableTrapsMsdp?: pulumi.Input<boolean>;
    enableTrapsNhrpNhc?: pulumi.Input<boolean>;
    enableTrapsNhrpNhp?: pulumi.Input<boolean>;
    enableTrapsNhrpNhs?: pulumi.Input<boolean>;
    enableTrapsNhrpQuotaExceeded?: pulumi.Input<boolean>;
    /**
     * Enable all traps of errors
     */
    enableTrapsOspfConfigErrors?: pulumi.Input<boolean>;
    /**
     * Enable all traps of lsa
     */
    enableTrapsOspfConfigLsa?: pulumi.Input<boolean>;
    /**
     * Enable all traps of retransmit
     */
    enableTrapsOspfConfigRetransmit?: pulumi.Input<boolean>;
    /**
     * Enable all traps of state-change
     */
    enableTrapsOspfConfigStateChange?: pulumi.Input<boolean>;
    /**
     * Enable all traps of errors
     */
    enableTrapsOspfErrorsEnable?: pulumi.Input<boolean>;
    /**
     * Enable all traps of lsa
     */
    enableTrapsOspfLsaEnable?: pulumi.Input<boolean>;
    /**
     * Nssa translator state changes
     */
    enableTrapsOspfNssaTransChange?: pulumi.Input<boolean>;
    /**
     * Enable all traps of retransmit
     */
    enableTrapsOspfRetransmitEnable?: pulumi.Input<boolean>;
    /**
     * Sham link interface state changes
     */
    enableTrapsOspfShamlinkInterface?: pulumi.Input<boolean>;
    /**
     * Sham link neighbor state changes
     */
    enableTrapsOspfShamlinkNeighbor?: pulumi.Input<boolean>;
    /**
     * Enable all traps of errors
     */
    enableTrapsOspfv3ConfigErrors?: pulumi.Input<boolean>;
    /**
     * Enable all traps of state-change
     */
    enableTrapsOspfv3ConfigStateChange?: pulumi.Input<boolean>;
    /**
     * Enable invalid pim message trap
     */
    enableTrapsPimInvalidPimMessage?: pulumi.Input<boolean>;
    /**
     * Enable neighbor change trap
     */
    enableTrapsPimNeighborChange?: pulumi.Input<boolean>;
    /**
     * Enable rp mapping change trap
     */
    enableTrapsPimRpMappingChange?: pulumi.Input<boolean>;
    /**
     * Enable SNMP port security traps
     */
    enableTrapsPortSecurity?: pulumi.Input<boolean>;
    /**
     * Enable SNMP inline power group based traps
     */
    enableTrapsPowerEthernetGroup?: pulumi.Input<string>;
    /**
     * Enable Policing Trap
     */
    enableTrapsPowerEthernetPolice?: pulumi.Input<boolean>;
    enableTrapsPwVc?: pulumi.Input<boolean>;
    enableTrapsRep?: pulumi.Input<boolean>;
    /**
     * Enable all SNMP traps defined in CISCO-RF-MIB
     */
    enableTrapsRf?: pulumi.Input<boolean>;
    /**
     * Enable smart license traps
     */
    enableTrapsSmartLicense?: pulumi.Input<boolean>;
    /**
     * Enable authentication trap
     */
    enableTrapsSnmpAuthentication?: pulumi.Input<boolean>;
    /**
     * Enable coldStart trap
     */
    enableTrapsSnmpColdstart?: pulumi.Input<boolean>;
    /**
     * Enable linkDown trap
     */
    enableTrapsSnmpLinkdown?: pulumi.Input<boolean>;
    /**
     * Enable linkUp trap
     */
    enableTrapsSnmpLinkup?: pulumi.Input<boolean>;
    /**
     * Enable warmStart trap
     */
    enableTrapsSnmpWarmstart?: pulumi.Input<boolean>;
    /**
     * Enable SNMP stackwise traps
     */
    enableTrapsStackwise?: pulumi.Input<boolean>;
    enableTrapsStpxInconsistency?: pulumi.Input<boolean>;
    enableTrapsStpxLoopInconsistency?: pulumi.Input<boolean>;
    enableTrapsStpxRootInconsistency?: pulumi.Input<boolean>;
    /**
     * Enable SNMP syslog traps
     */
    enableTrapsSyslog?: pulumi.Input<boolean>;
    enableTrapsTransceiverAll?: pulumi.Input<boolean>;
    /**
     * Enable TCP connection traps
     */
    enableTrapsTty?: pulumi.Input<boolean>;
    /**
     * Enable SNMP cudldpFastHelloLinkFailRptNotification traps
     */
    enableTrapsUdldLinkFailRpt?: pulumi.Input<boolean>;
    /**
     * Enable SNMP cudldpFastHelloStatusChangeNotification traps
     */
    enableTrapsUdldStatusChange?: pulumi.Input<boolean>;
    enableTrapsVlanMembership?: pulumi.Input<boolean>;
    enableTrapsVlancreate?: pulumi.Input<boolean>;
    enableTrapsVlandelete?: pulumi.Input<boolean>;
    enableTrapsVrfmibVnetTrunkDown?: pulumi.Input<boolean>;
    enableTrapsVrfmibVnetTrunkUp?: pulumi.Input<boolean>;
    enableTrapsVrfmibVrfDown?: pulumi.Input<boolean>;
    enableTrapsVrfmibVrfUp?: pulumi.Input<boolean>;
    enableTrapsVtp?: pulumi.Input<boolean>;
    /**
     * Specify hosts keyed by (ip-address, community-or-user)
     */
    hosts?: pulumi.Input<pulumi.Input<inputs.SnmpServerHost>[]>;
    /**
     * Persist interface indices
     */
    ifindexPersist?: pulumi.Input<boolean>;
    /**
     * Text for mib object sysLocation
     */
    location?: pulumi.Input<string>;
    /**
     * Largest SNMP packet size - Range: `484`-`17892`
     */
    packetsize?: pulumi.Input<number>;
    /**
     * Message queue length for each TRAP host - Range: `1`-`5000`
     */
    queueLength?: pulumi.Input<number>;
    /**
     * Enable SNMP; set community string and access privs
     */
    snmpCommunities?: pulumi.Input<pulumi.Input<inputs.SnmpServerSnmpCommunity>[]>;
    /**
     * Forty GigabitEthernet
     */
    sourceInterfaceInformsFortyGigabitEthernet?: pulumi.Input<string>;
    /**
     * GigabitEthernet IEEE 802.3z
     */
    sourceInterfaceInformsGigabitEthernet?: pulumi.Input<string>;
    /**
     * Hundred GigabitEthernet
     */
    sourceInterfaceInformsHundredGigE?: pulumi.Input<string>;
    /**
     * Loopback interface - Range: `0`-`2147483647`
     */
    sourceInterfaceInformsLoopback?: pulumi.Input<number>;
    /**
     * Ethernet Channel of interfaces - Range: `0`-`4294967295`
     */
    sourceInterfaceInformsPortChannel?: pulumi.Input<number>;
    sourceInterfaceInformsPortChannelSubinterface?: pulumi.Input<string>;
    /**
     * Ten Gigabit Ethernet
     */
    sourceInterfaceInformsTenGigabitEthernet?: pulumi.Input<string>;
    /**
     * Iosxr Vlans - Range: `0`-`65535`
     */
    sourceInterfaceInformsVlan?: pulumi.Input<number>;
    /**
     * Forty GigabitEthernet
     */
    sourceInterfaceTrapsFortyGigabitEthernet?: pulumi.Input<string>;
    /**
     * GigabitEthernet IEEE 802.3z
     */
    sourceInterfaceTrapsGigabitEthernet?: pulumi.Input<string>;
    /**
     * Hundred GigabitEthernet
     */
    sourceInterfaceTrapsHundredGigE?: pulumi.Input<string>;
    /**
     * Loopback interface - Range: `0`-`2147483647`
     */
    sourceInterfaceTrapsLoopback?: pulumi.Input<number>;
    /**
     * Ethernet Channel of interfaces - Range: `0`-`4294967295`
     */
    sourceInterfaceTrapsPortChannel?: pulumi.Input<number>;
    sourceInterfaceTrapsPortChannelSubinterface?: pulumi.Input<string>;
    /**
     * Ten Gigabit Ethernet
     */
    sourceInterfaceTrapsTenGigabitEthernet?: pulumi.Input<string>;
    /**
     * Iosxr Vlans - Range: `0`-`65535`
     */
    sourceInterfaceTrapsVlan?: pulumi.Input<number>;
    /**
     * Enable use of the SNMP reload command
     */
    systemShutdown?: pulumi.Input<boolean>;
    /**
     * Forty GigabitEthernet
     */
    trapSourceFortyGigabitEthernet?: pulumi.Input<string>;
    /**
     * GigabitEthernet IEEE 802.3z
     */
    trapSourceGigabitEthernet?: pulumi.Input<string>;
    /**
     * Hundred GigabitEthernet
     */
    trapSourceHundredGigE?: pulumi.Input<string>;
    /**
     * Loopback interface - Range: `0`-`2147483647`
     */
    trapSourceLoopback?: pulumi.Input<number>;
    /**
     * Ethernet Channel of interfaces - Range: `0`-`4294967295`
     */
    trapSourcePortChannel?: pulumi.Input<number>;
    trapSourcePortChannelSubinterface?: pulumi.Input<string>;
    /**
     * Ten Gigabit Ethernet
     */
    trapSourceTenGigabitEthernet?: pulumi.Input<string>;
    /**
     * Iosxr Vlans - Range: `0`-`65535`
     */
    trapSourceVlan?: pulumi.Input<number>;
    /**
     * Define an SNMPv2 MIB view
     */
    views?: pulumi.Input<pulumi.Input<inputs.SnmpServerView>[]>;
}
