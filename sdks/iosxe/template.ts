// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Template extends pulumi.CustomResource {
    /**
     * Get an existing Template resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TemplateState, opts?: pulumi.CustomResourceOptions): Template {
        return new Template(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'iosxe:index/template:Template';

    /**
     * Returns true if the given object is an instance of Template.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Template {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Template.__pulumiType;
    }

    /**
     * Enable closed access on port (disabled by default, i.e. open access)
     */
    public readonly accessSessionClosed!: pulumi.Output<boolean | undefined>;
    /**
     * Set the control-direction on the interface - Choices: `both`, `in`
     */
    public readonly accessSessionControlDirection!: pulumi.Output<string | undefined>;
    /**
     * Set the Host mode for authentication on this interface - Choices: `multi-auth`, `multi-domain`, `multi-host`,
     * `single-host`
     */
    public readonly accessSessionHostMode!: pulumi.Output<string | undefined>;
    /**
     * Interface templates set to sticky
     */
    public readonly accessSessionInterfaceTemplateSticky!: pulumi.Output<boolean | undefined>;
    /**
     * Sticky timer value - Range: `1`-`65535`
     */
    public readonly accessSessionInterfaceTemplateStickyTimer!: pulumi.Output<number | undefined>;
    /**
     * Apply template to monitor access sessions on the port
     */
    public readonly accessSessionMonitor!: pulumi.Output<boolean | undefined>;
    /**
     * Set the port-control value - Choices: `auto`, `force-authorized`, `force-unauthorized`
     */
    public readonly accessSessionPortControl!: pulumi.Output<string | undefined>;
    /**
     * Enable or Disable Reauthentication for this port
     */
    public readonly authenticationPeriodic!: pulumi.Output<boolean | undefined>;
    /**
     * Enter a value between 1 and 65535 - Range: `1`-`65535`
     */
    public readonly authenticationTimerReauthenticateRange!: pulumi.Output<number | undefined>;
    /**
     * Obtain re-authentication timeout value from the server
     */
    public readonly authenticationTimerReauthenticateServer!: pulumi.Output<boolean | undefined>;
    /**
     * Supply local configuration for CTS parameters
     */
    public readonly ctsManual!: pulumi.Output<boolean | undefined>;
    /**
     * Source Security Group Tag to apply to untagged or non-trusted incoming traffic - Range: `2`-`65519`
     */
    public readonly ctsManualPolicyStaticSgt!: pulumi.Output<number | undefined>;
    /**
     * Trust the Source Group Tags (SGT) that the peer uses for sending
     */
    public readonly ctsManualPolicyStaticTrusted!: pulumi.Output<boolean | undefined>;
    /**
     * CTS SGT Propagation configuration
     */
    public readonly ctsManualPropagateSgt!: pulumi.Output<boolean | undefined>;
    /**
     * Enable Role-based Access Control enforcement
     */
    public readonly ctsRoleBasedEnforcement!: pulumi.Output<boolean | undefined>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    public readonly deleteMode!: pulumi.Output<string | undefined>;
    /**
     * A device name from the provider configuration.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * Configure device-tracking on the interface
     */
    public readonly deviceTracking!: pulumi.Output<boolean | undefined>;
    /**
     * policy name for device tracking
     */
    public readonly deviceTrackingAttachPolicies!: pulumi.Output<outputs.TemplateDeviceTrackingAttachPolicy[] | undefined>;
    /**
     * VLAN IDs of the VLANs for which this policy applies
     */
    public readonly deviceTrackingVlanRange!: pulumi.Output<string | undefined>;
    /**
     * Max No. of Reauthentication Attempts - Range: `1`-`10`
     */
    public readonly dot1xMaxReauthReq!: pulumi.Output<number | undefined>;
    /**
     * Max No. of Retries - Range: `1`-`10`
     */
    public readonly dot1xMaxReq!: pulumi.Output<number | undefined>;
    /**
     * Set 802.1x interface pae type - Choices: `authenticator`, `both`, `supplicant`
     */
    public readonly dot1xPae!: pulumi.Output<string | undefined>;
    /**
     * Timeout for supplicant retries - Range: `1`-`65535`
     */
    public readonly dot1xTimeoutTxPeriod!: pulumi.Output<number | undefined>;
    /**
     * Access control list for IP packets
     */
    public readonly ipAccessGroups!: pulumi.Output<outputs.TemplateIpAccessGroup[] | undefined>;
    /**
     * DHCP snooping rate limit - Range: `1`-`2048`
     */
    public readonly ipDhcpSnoopingLimitRate!: pulumi.Output<number | undefined>;
    /**
     * DHCP Snooping trust config
     */
    public readonly ipDhcpSnoopingTrust!: pulumi.Output<boolean | undefined>;
    /**
     * Load interval delay in seconds - Range: `30`-`600`
     */
    public readonly loadInterval!: pulumi.Output<number | undefined>;
    /**
     * MAC Authentication Bypass Interface Config Commands
     */
    public readonly mab!: pulumi.Output<boolean | undefined>;
    /**
     * Use EAP authentication for MAC Auth Bypass
     */
    public readonly mabEap!: pulumi.Output<boolean | undefined>;
    /**
     * policy-map name
     */
    public readonly servicePolicyInput!: pulumi.Output<string | undefined>;
    /**
     * policy-map name
     */
    public readonly servicePolicyOutput!: pulumi.Output<string | undefined>;
    /**
     * Apply a subscriber control policy to the interface
     */
    public readonly servicePolicyTypeControlSubscriber!: pulumi.Output<string | undefined>;
    /**
     * Get config from a template
     */
    public readonly sourceTemplate!: pulumi.Output<string | undefined>;
    /**
     * Enable BPDU guard for this interface
     */
    public readonly spanningTreeBpduguardEnable!: pulumi.Output<boolean | undefined>;
    /**
     * Portfast options for the interface
     */
    public readonly spanningTreePortfast!: pulumi.Output<boolean | undefined>;
    /**
     * Disable portfast for this interface
     */
    public readonly spanningTreePortfastDisable!: pulumi.Output<boolean | undefined>;
    /**
     * Enable portfast edge on the interface
     */
    public readonly spanningTreePortfastEdge!: pulumi.Output<boolean | undefined>;
    /**
     * Enable portfast network on the interface
     */
    public readonly spanningTreePortfastNetwork!: pulumi.Output<boolean | undefined>;
    /**
     * help
     */
    public readonly spanningTreeServicePolicy!: pulumi.Output<boolean | undefined>;
    /**
     * Shutdown this interface if a storm occurs
     */
    public readonly stormControlActionShutdown!: pulumi.Output<boolean | undefined>;
    /**
     * Send SNMP trap if a storm occurs
     */
    public readonly stormControlActionTrap!: pulumi.Output<boolean | undefined>;
    /**
     * Enter threshold
     */
    public readonly stormControlBroadcastLevelBpsThreshold!: pulumi.Output<number | undefined>;
    /**
     * Enter threshold
     */
    public readonly stormControlBroadcastLevelPpsThreshold!: pulumi.Output<string | undefined>;
    /**
     * Enter threshold
     */
    public readonly stormControlBroadcastLevelThreshold!: pulumi.Output<number | undefined>;
    /**
     * Enter threshold
     */
    public readonly stormControlMulticastLevelBpsThreshold!: pulumi.Output<number | undefined>;
    /**
     * Enter threshold
     */
    public readonly stormControlMulticastLevelPpsThreshold!: pulumi.Output<string | undefined>;
    /**
     * Enter threshold
     */
    public readonly stormControlMulticastLevelThreshold!: pulumi.Output<number | undefined>;
    /**
     * ARP probe
     */
    public readonly subscriberAgingInactivityTimerProbe!: pulumi.Output<boolean | undefined>;
    /**
     * Enter a value between 1 and 65535 in seconds - Range: `1`-`65535`
     */
    public readonly subscriberAgingInactivityTimerValue!: pulumi.Output<number | undefined>;
    /**
     * ARP probe
     */
    public readonly subscriberAgingProbe!: pulumi.Output<boolean | undefined>;
    /**
     * VLAN ID of the VLAN when this port is in access mode - Range: `1`-`4094`
     */
    public readonly switchportAccessVlan!: pulumi.Output<number | undefined>;
    /**
     * Block unknown unicast addresses
     */
    public readonly switchportBlockUnicast!: pulumi.Output<boolean | undefined>;
    /**
     * Set trunking mode to ACCESS unconditionally
     */
    public readonly switchportModeAccess!: pulumi.Output<boolean | undefined>;
    /**
     * Set trunking mode to TRUNK unconditionally
     */
    public readonly switchportModeTrunk!: pulumi.Output<boolean | undefined>;
    /**
     * Device will not engage in negotiation protocol on this interface
     */
    public readonly switchportNonegotiate!: pulumi.Output<boolean | undefined>;
    /**
     * Security related command
     */
    public readonly switchportPortSecurity!: pulumi.Output<boolean | undefined>;
    /**
     * Enable aging for configured secure addresses
     */
    public readonly switchportPortSecurityAgingStatic!: pulumi.Output<boolean | undefined>;
    /**
     * Port-security aging time - Range: `1`-`1440`
     */
    public readonly switchportPortSecurityAgingTime!: pulumi.Output<number | undefined>;
    /**
     * Port-security aging type
     */
    public readonly switchportPortSecurityAgingType!: pulumi.Output<boolean | undefined>;
    /**
     * Aging based on inactivity time period
     */
    public readonly switchportPortSecurityAgingTypeInactivity!: pulumi.Output<boolean | undefined>;
    public readonly switchportPortSecurityMaximumRanges!: pulumi.Output<outputs.TemplateSwitchportPortSecurityMaximumRange[] | undefined>;
    /**
     * Security violation protect mode
     */
    public readonly switchportPortSecurityViolationProtect!: pulumi.Output<boolean | undefined>;
    /**
     * Security violation restrict mode
     */
    public readonly switchportPortSecurityViolationRestrict!: pulumi.Output<boolean | undefined>;
    /**
     * Security violation shutdown mode
     */
    public readonly switchportPortSecurityViolationShutdown!: pulumi.Output<boolean | undefined>;
    /**
     * Primary normal range VLAN ID of the private VLAN port association - Range: `2`-`1001`
     */
    public readonly switchportPrivateVlanHostAssociationPrimaryRange!: pulumi.Output<number | undefined>;
    /**
     * Secondary normal range VLAN ID of the private VLAN host port association - Range: `2`-`1001`
     */
    public readonly switchportPrivateVlanHostAssociationSecondaryRange!: pulumi.Output<number | undefined>;
    /**
     * VLAN IDs of the allowed VLANs when this port is in trunking mode
     */
    public readonly switchportTrunkAllowedVlans!: pulumi.Output<string | undefined>;
    /**
     * all VLANs
     */
    public readonly switchportTrunkAllowedVlansAll!: pulumi.Output<boolean | undefined>;
    /**
     * no VLANs
     */
    public readonly switchportTrunkAllowedVlansNone!: pulumi.Output<boolean | undefined>;
    /**
     * Set native VLAN tagging state
     */
    public readonly switchportTrunkNativeVlanTag!: pulumi.Output<boolean | undefined>;
    /**
     * VLAN ID of the native VLAN when this port is in trunking mode - Range: `1`-`4094`
     */
    public readonly switchportTrunkNativeVlanVlanId!: pulumi.Output<number | undefined>;
    /**
     * Vlan for voice traffic - Range: `1`-`4094`
     */
    public readonly switchportVoiceVlan!: pulumi.Output<number | undefined>;
    /**
     * Template name
     */
    public readonly templateName!: pulumi.Output<string>;

    /**
     * Create a Template resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TemplateArgs | TemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TemplateState | undefined;
            resourceInputs["accessSessionClosed"] = state ? state.accessSessionClosed : undefined;
            resourceInputs["accessSessionControlDirection"] = state ? state.accessSessionControlDirection : undefined;
            resourceInputs["accessSessionHostMode"] = state ? state.accessSessionHostMode : undefined;
            resourceInputs["accessSessionInterfaceTemplateSticky"] = state ? state.accessSessionInterfaceTemplateSticky : undefined;
            resourceInputs["accessSessionInterfaceTemplateStickyTimer"] = state ? state.accessSessionInterfaceTemplateStickyTimer : undefined;
            resourceInputs["accessSessionMonitor"] = state ? state.accessSessionMonitor : undefined;
            resourceInputs["accessSessionPortControl"] = state ? state.accessSessionPortControl : undefined;
            resourceInputs["authenticationPeriodic"] = state ? state.authenticationPeriodic : undefined;
            resourceInputs["authenticationTimerReauthenticateRange"] = state ? state.authenticationTimerReauthenticateRange : undefined;
            resourceInputs["authenticationTimerReauthenticateServer"] = state ? state.authenticationTimerReauthenticateServer : undefined;
            resourceInputs["ctsManual"] = state ? state.ctsManual : undefined;
            resourceInputs["ctsManualPolicyStaticSgt"] = state ? state.ctsManualPolicyStaticSgt : undefined;
            resourceInputs["ctsManualPolicyStaticTrusted"] = state ? state.ctsManualPolicyStaticTrusted : undefined;
            resourceInputs["ctsManualPropagateSgt"] = state ? state.ctsManualPropagateSgt : undefined;
            resourceInputs["ctsRoleBasedEnforcement"] = state ? state.ctsRoleBasedEnforcement : undefined;
            resourceInputs["deleteMode"] = state ? state.deleteMode : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["deviceTracking"] = state ? state.deviceTracking : undefined;
            resourceInputs["deviceTrackingAttachPolicies"] = state ? state.deviceTrackingAttachPolicies : undefined;
            resourceInputs["deviceTrackingVlanRange"] = state ? state.deviceTrackingVlanRange : undefined;
            resourceInputs["dot1xMaxReauthReq"] = state ? state.dot1xMaxReauthReq : undefined;
            resourceInputs["dot1xMaxReq"] = state ? state.dot1xMaxReq : undefined;
            resourceInputs["dot1xPae"] = state ? state.dot1xPae : undefined;
            resourceInputs["dot1xTimeoutTxPeriod"] = state ? state.dot1xTimeoutTxPeriod : undefined;
            resourceInputs["ipAccessGroups"] = state ? state.ipAccessGroups : undefined;
            resourceInputs["ipDhcpSnoopingLimitRate"] = state ? state.ipDhcpSnoopingLimitRate : undefined;
            resourceInputs["ipDhcpSnoopingTrust"] = state ? state.ipDhcpSnoopingTrust : undefined;
            resourceInputs["loadInterval"] = state ? state.loadInterval : undefined;
            resourceInputs["mab"] = state ? state.mab : undefined;
            resourceInputs["mabEap"] = state ? state.mabEap : undefined;
            resourceInputs["servicePolicyInput"] = state ? state.servicePolicyInput : undefined;
            resourceInputs["servicePolicyOutput"] = state ? state.servicePolicyOutput : undefined;
            resourceInputs["servicePolicyTypeControlSubscriber"] = state ? state.servicePolicyTypeControlSubscriber : undefined;
            resourceInputs["sourceTemplate"] = state ? state.sourceTemplate : undefined;
            resourceInputs["spanningTreeBpduguardEnable"] = state ? state.spanningTreeBpduguardEnable : undefined;
            resourceInputs["spanningTreePortfast"] = state ? state.spanningTreePortfast : undefined;
            resourceInputs["spanningTreePortfastDisable"] = state ? state.spanningTreePortfastDisable : undefined;
            resourceInputs["spanningTreePortfastEdge"] = state ? state.spanningTreePortfastEdge : undefined;
            resourceInputs["spanningTreePortfastNetwork"] = state ? state.spanningTreePortfastNetwork : undefined;
            resourceInputs["spanningTreeServicePolicy"] = state ? state.spanningTreeServicePolicy : undefined;
            resourceInputs["stormControlActionShutdown"] = state ? state.stormControlActionShutdown : undefined;
            resourceInputs["stormControlActionTrap"] = state ? state.stormControlActionTrap : undefined;
            resourceInputs["stormControlBroadcastLevelBpsThreshold"] = state ? state.stormControlBroadcastLevelBpsThreshold : undefined;
            resourceInputs["stormControlBroadcastLevelPpsThreshold"] = state ? state.stormControlBroadcastLevelPpsThreshold : undefined;
            resourceInputs["stormControlBroadcastLevelThreshold"] = state ? state.stormControlBroadcastLevelThreshold : undefined;
            resourceInputs["stormControlMulticastLevelBpsThreshold"] = state ? state.stormControlMulticastLevelBpsThreshold : undefined;
            resourceInputs["stormControlMulticastLevelPpsThreshold"] = state ? state.stormControlMulticastLevelPpsThreshold : undefined;
            resourceInputs["stormControlMulticastLevelThreshold"] = state ? state.stormControlMulticastLevelThreshold : undefined;
            resourceInputs["subscriberAgingInactivityTimerProbe"] = state ? state.subscriberAgingInactivityTimerProbe : undefined;
            resourceInputs["subscriberAgingInactivityTimerValue"] = state ? state.subscriberAgingInactivityTimerValue : undefined;
            resourceInputs["subscriberAgingProbe"] = state ? state.subscriberAgingProbe : undefined;
            resourceInputs["switchportAccessVlan"] = state ? state.switchportAccessVlan : undefined;
            resourceInputs["switchportBlockUnicast"] = state ? state.switchportBlockUnicast : undefined;
            resourceInputs["switchportModeAccess"] = state ? state.switchportModeAccess : undefined;
            resourceInputs["switchportModeTrunk"] = state ? state.switchportModeTrunk : undefined;
            resourceInputs["switchportNonegotiate"] = state ? state.switchportNonegotiate : undefined;
            resourceInputs["switchportPortSecurity"] = state ? state.switchportPortSecurity : undefined;
            resourceInputs["switchportPortSecurityAgingStatic"] = state ? state.switchportPortSecurityAgingStatic : undefined;
            resourceInputs["switchportPortSecurityAgingTime"] = state ? state.switchportPortSecurityAgingTime : undefined;
            resourceInputs["switchportPortSecurityAgingType"] = state ? state.switchportPortSecurityAgingType : undefined;
            resourceInputs["switchportPortSecurityAgingTypeInactivity"] = state ? state.switchportPortSecurityAgingTypeInactivity : undefined;
            resourceInputs["switchportPortSecurityMaximumRanges"] = state ? state.switchportPortSecurityMaximumRanges : undefined;
            resourceInputs["switchportPortSecurityViolationProtect"] = state ? state.switchportPortSecurityViolationProtect : undefined;
            resourceInputs["switchportPortSecurityViolationRestrict"] = state ? state.switchportPortSecurityViolationRestrict : undefined;
            resourceInputs["switchportPortSecurityViolationShutdown"] = state ? state.switchportPortSecurityViolationShutdown : undefined;
            resourceInputs["switchportPrivateVlanHostAssociationPrimaryRange"] = state ? state.switchportPrivateVlanHostAssociationPrimaryRange : undefined;
            resourceInputs["switchportPrivateVlanHostAssociationSecondaryRange"] = state ? state.switchportPrivateVlanHostAssociationSecondaryRange : undefined;
            resourceInputs["switchportTrunkAllowedVlans"] = state ? state.switchportTrunkAllowedVlans : undefined;
            resourceInputs["switchportTrunkAllowedVlansAll"] = state ? state.switchportTrunkAllowedVlansAll : undefined;
            resourceInputs["switchportTrunkAllowedVlansNone"] = state ? state.switchportTrunkAllowedVlansNone : undefined;
            resourceInputs["switchportTrunkNativeVlanTag"] = state ? state.switchportTrunkNativeVlanTag : undefined;
            resourceInputs["switchportTrunkNativeVlanVlanId"] = state ? state.switchportTrunkNativeVlanVlanId : undefined;
            resourceInputs["switchportVoiceVlan"] = state ? state.switchportVoiceVlan : undefined;
            resourceInputs["templateName"] = state ? state.templateName : undefined;
        } else {
            const args = argsOrState as TemplateArgs | undefined;
            if ((!args || args.templateName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateName'");
            }
            resourceInputs["accessSessionClosed"] = args ? args.accessSessionClosed : undefined;
            resourceInputs["accessSessionControlDirection"] = args ? args.accessSessionControlDirection : undefined;
            resourceInputs["accessSessionHostMode"] = args ? args.accessSessionHostMode : undefined;
            resourceInputs["accessSessionInterfaceTemplateSticky"] = args ? args.accessSessionInterfaceTemplateSticky : undefined;
            resourceInputs["accessSessionInterfaceTemplateStickyTimer"] = args ? args.accessSessionInterfaceTemplateStickyTimer : undefined;
            resourceInputs["accessSessionMonitor"] = args ? args.accessSessionMonitor : undefined;
            resourceInputs["accessSessionPortControl"] = args ? args.accessSessionPortControl : undefined;
            resourceInputs["authenticationPeriodic"] = args ? args.authenticationPeriodic : undefined;
            resourceInputs["authenticationTimerReauthenticateRange"] = args ? args.authenticationTimerReauthenticateRange : undefined;
            resourceInputs["authenticationTimerReauthenticateServer"] = args ? args.authenticationTimerReauthenticateServer : undefined;
            resourceInputs["ctsManual"] = args ? args.ctsManual : undefined;
            resourceInputs["ctsManualPolicyStaticSgt"] = args ? args.ctsManualPolicyStaticSgt : undefined;
            resourceInputs["ctsManualPolicyStaticTrusted"] = args ? args.ctsManualPolicyStaticTrusted : undefined;
            resourceInputs["ctsManualPropagateSgt"] = args ? args.ctsManualPropagateSgt : undefined;
            resourceInputs["ctsRoleBasedEnforcement"] = args ? args.ctsRoleBasedEnforcement : undefined;
            resourceInputs["deleteMode"] = args ? args.deleteMode : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["deviceTracking"] = args ? args.deviceTracking : undefined;
            resourceInputs["deviceTrackingAttachPolicies"] = args ? args.deviceTrackingAttachPolicies : undefined;
            resourceInputs["deviceTrackingVlanRange"] = args ? args.deviceTrackingVlanRange : undefined;
            resourceInputs["dot1xMaxReauthReq"] = args ? args.dot1xMaxReauthReq : undefined;
            resourceInputs["dot1xMaxReq"] = args ? args.dot1xMaxReq : undefined;
            resourceInputs["dot1xPae"] = args ? args.dot1xPae : undefined;
            resourceInputs["dot1xTimeoutTxPeriod"] = args ? args.dot1xTimeoutTxPeriod : undefined;
            resourceInputs["ipAccessGroups"] = args ? args.ipAccessGroups : undefined;
            resourceInputs["ipDhcpSnoopingLimitRate"] = args ? args.ipDhcpSnoopingLimitRate : undefined;
            resourceInputs["ipDhcpSnoopingTrust"] = args ? args.ipDhcpSnoopingTrust : undefined;
            resourceInputs["loadInterval"] = args ? args.loadInterval : undefined;
            resourceInputs["mab"] = args ? args.mab : undefined;
            resourceInputs["mabEap"] = args ? args.mabEap : undefined;
            resourceInputs["servicePolicyInput"] = args ? args.servicePolicyInput : undefined;
            resourceInputs["servicePolicyOutput"] = args ? args.servicePolicyOutput : undefined;
            resourceInputs["servicePolicyTypeControlSubscriber"] = args ? args.servicePolicyTypeControlSubscriber : undefined;
            resourceInputs["sourceTemplate"] = args ? args.sourceTemplate : undefined;
            resourceInputs["spanningTreeBpduguardEnable"] = args ? args.spanningTreeBpduguardEnable : undefined;
            resourceInputs["spanningTreePortfast"] = args ? args.spanningTreePortfast : undefined;
            resourceInputs["spanningTreePortfastDisable"] = args ? args.spanningTreePortfastDisable : undefined;
            resourceInputs["spanningTreePortfastEdge"] = args ? args.spanningTreePortfastEdge : undefined;
            resourceInputs["spanningTreePortfastNetwork"] = args ? args.spanningTreePortfastNetwork : undefined;
            resourceInputs["spanningTreeServicePolicy"] = args ? args.spanningTreeServicePolicy : undefined;
            resourceInputs["stormControlActionShutdown"] = args ? args.stormControlActionShutdown : undefined;
            resourceInputs["stormControlActionTrap"] = args ? args.stormControlActionTrap : undefined;
            resourceInputs["stormControlBroadcastLevelBpsThreshold"] = args ? args.stormControlBroadcastLevelBpsThreshold : undefined;
            resourceInputs["stormControlBroadcastLevelPpsThreshold"] = args ? args.stormControlBroadcastLevelPpsThreshold : undefined;
            resourceInputs["stormControlBroadcastLevelThreshold"] = args ? args.stormControlBroadcastLevelThreshold : undefined;
            resourceInputs["stormControlMulticastLevelBpsThreshold"] = args ? args.stormControlMulticastLevelBpsThreshold : undefined;
            resourceInputs["stormControlMulticastLevelPpsThreshold"] = args ? args.stormControlMulticastLevelPpsThreshold : undefined;
            resourceInputs["stormControlMulticastLevelThreshold"] = args ? args.stormControlMulticastLevelThreshold : undefined;
            resourceInputs["subscriberAgingInactivityTimerProbe"] = args ? args.subscriberAgingInactivityTimerProbe : undefined;
            resourceInputs["subscriberAgingInactivityTimerValue"] = args ? args.subscriberAgingInactivityTimerValue : undefined;
            resourceInputs["subscriberAgingProbe"] = args ? args.subscriberAgingProbe : undefined;
            resourceInputs["switchportAccessVlan"] = args ? args.switchportAccessVlan : undefined;
            resourceInputs["switchportBlockUnicast"] = args ? args.switchportBlockUnicast : undefined;
            resourceInputs["switchportModeAccess"] = args ? args.switchportModeAccess : undefined;
            resourceInputs["switchportModeTrunk"] = args ? args.switchportModeTrunk : undefined;
            resourceInputs["switchportNonegotiate"] = args ? args.switchportNonegotiate : undefined;
            resourceInputs["switchportPortSecurity"] = args ? args.switchportPortSecurity : undefined;
            resourceInputs["switchportPortSecurityAgingStatic"] = args ? args.switchportPortSecurityAgingStatic : undefined;
            resourceInputs["switchportPortSecurityAgingTime"] = args ? args.switchportPortSecurityAgingTime : undefined;
            resourceInputs["switchportPortSecurityAgingType"] = args ? args.switchportPortSecurityAgingType : undefined;
            resourceInputs["switchportPortSecurityAgingTypeInactivity"] = args ? args.switchportPortSecurityAgingTypeInactivity : undefined;
            resourceInputs["switchportPortSecurityMaximumRanges"] = args ? args.switchportPortSecurityMaximumRanges : undefined;
            resourceInputs["switchportPortSecurityViolationProtect"] = args ? args.switchportPortSecurityViolationProtect : undefined;
            resourceInputs["switchportPortSecurityViolationRestrict"] = args ? args.switchportPortSecurityViolationRestrict : undefined;
            resourceInputs["switchportPortSecurityViolationShutdown"] = args ? args.switchportPortSecurityViolationShutdown : undefined;
            resourceInputs["switchportPrivateVlanHostAssociationPrimaryRange"] = args ? args.switchportPrivateVlanHostAssociationPrimaryRange : undefined;
            resourceInputs["switchportPrivateVlanHostAssociationSecondaryRange"] = args ? args.switchportPrivateVlanHostAssociationSecondaryRange : undefined;
            resourceInputs["switchportTrunkAllowedVlans"] = args ? args.switchportTrunkAllowedVlans : undefined;
            resourceInputs["switchportTrunkAllowedVlansAll"] = args ? args.switchportTrunkAllowedVlansAll : undefined;
            resourceInputs["switchportTrunkAllowedVlansNone"] = args ? args.switchportTrunkAllowedVlansNone : undefined;
            resourceInputs["switchportTrunkNativeVlanTag"] = args ? args.switchportTrunkNativeVlanTag : undefined;
            resourceInputs["switchportTrunkNativeVlanVlanId"] = args ? args.switchportTrunkNativeVlanVlanId : undefined;
            resourceInputs["switchportVoiceVlan"] = args ? args.switchportVoiceVlan : undefined;
            resourceInputs["templateName"] = args ? args.templateName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Template.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Template resources.
 */
export interface TemplateState {
    /**
     * Enable closed access on port (disabled by default, i.e. open access)
     */
    accessSessionClosed?: pulumi.Input<boolean>;
    /**
     * Set the control-direction on the interface - Choices: `both`, `in`
     */
    accessSessionControlDirection?: pulumi.Input<string>;
    /**
     * Set the Host mode for authentication on this interface - Choices: `multi-auth`, `multi-domain`, `multi-host`,
     * `single-host`
     */
    accessSessionHostMode?: pulumi.Input<string>;
    /**
     * Interface templates set to sticky
     */
    accessSessionInterfaceTemplateSticky?: pulumi.Input<boolean>;
    /**
     * Sticky timer value - Range: `1`-`65535`
     */
    accessSessionInterfaceTemplateStickyTimer?: pulumi.Input<number>;
    /**
     * Apply template to monitor access sessions on the port
     */
    accessSessionMonitor?: pulumi.Input<boolean>;
    /**
     * Set the port-control value - Choices: `auto`, `force-authorized`, `force-unauthorized`
     */
    accessSessionPortControl?: pulumi.Input<string>;
    /**
     * Enable or Disable Reauthentication for this port
     */
    authenticationPeriodic?: pulumi.Input<boolean>;
    /**
     * Enter a value between 1 and 65535 - Range: `1`-`65535`
     */
    authenticationTimerReauthenticateRange?: pulumi.Input<number>;
    /**
     * Obtain re-authentication timeout value from the server
     */
    authenticationTimerReauthenticateServer?: pulumi.Input<boolean>;
    /**
     * Supply local configuration for CTS parameters
     */
    ctsManual?: pulumi.Input<boolean>;
    /**
     * Source Security Group Tag to apply to untagged or non-trusted incoming traffic - Range: `2`-`65519`
     */
    ctsManualPolicyStaticSgt?: pulumi.Input<number>;
    /**
     * Trust the Source Group Tags (SGT) that the peer uses for sending
     */
    ctsManualPolicyStaticTrusted?: pulumi.Input<boolean>;
    /**
     * CTS SGT Propagation configuration
     */
    ctsManualPropagateSgt?: pulumi.Input<boolean>;
    /**
     * Enable Role-based Access Control enforcement
     */
    ctsRoleBasedEnforcement?: pulumi.Input<boolean>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Configure device-tracking on the interface
     */
    deviceTracking?: pulumi.Input<boolean>;
    /**
     * policy name for device tracking
     */
    deviceTrackingAttachPolicies?: pulumi.Input<pulumi.Input<inputs.TemplateDeviceTrackingAttachPolicy>[]>;
    /**
     * VLAN IDs of the VLANs for which this policy applies
     */
    deviceTrackingVlanRange?: pulumi.Input<string>;
    /**
     * Max No. of Reauthentication Attempts - Range: `1`-`10`
     */
    dot1xMaxReauthReq?: pulumi.Input<number>;
    /**
     * Max No. of Retries - Range: `1`-`10`
     */
    dot1xMaxReq?: pulumi.Input<number>;
    /**
     * Set 802.1x interface pae type - Choices: `authenticator`, `both`, `supplicant`
     */
    dot1xPae?: pulumi.Input<string>;
    /**
     * Timeout for supplicant retries - Range: `1`-`65535`
     */
    dot1xTimeoutTxPeriod?: pulumi.Input<number>;
    /**
     * Access control list for IP packets
     */
    ipAccessGroups?: pulumi.Input<pulumi.Input<inputs.TemplateIpAccessGroup>[]>;
    /**
     * DHCP snooping rate limit - Range: `1`-`2048`
     */
    ipDhcpSnoopingLimitRate?: pulumi.Input<number>;
    /**
     * DHCP Snooping trust config
     */
    ipDhcpSnoopingTrust?: pulumi.Input<boolean>;
    /**
     * Load interval delay in seconds - Range: `30`-`600`
     */
    loadInterval?: pulumi.Input<number>;
    /**
     * MAC Authentication Bypass Interface Config Commands
     */
    mab?: pulumi.Input<boolean>;
    /**
     * Use EAP authentication for MAC Auth Bypass
     */
    mabEap?: pulumi.Input<boolean>;
    /**
     * policy-map name
     */
    servicePolicyInput?: pulumi.Input<string>;
    /**
     * policy-map name
     */
    servicePolicyOutput?: pulumi.Input<string>;
    /**
     * Apply a subscriber control policy to the interface
     */
    servicePolicyTypeControlSubscriber?: pulumi.Input<string>;
    /**
     * Get config from a template
     */
    sourceTemplate?: pulumi.Input<string>;
    /**
     * Enable BPDU guard for this interface
     */
    spanningTreeBpduguardEnable?: pulumi.Input<boolean>;
    /**
     * Portfast options for the interface
     */
    spanningTreePortfast?: pulumi.Input<boolean>;
    /**
     * Disable portfast for this interface
     */
    spanningTreePortfastDisable?: pulumi.Input<boolean>;
    /**
     * Enable portfast edge on the interface
     */
    spanningTreePortfastEdge?: pulumi.Input<boolean>;
    /**
     * Enable portfast network on the interface
     */
    spanningTreePortfastNetwork?: pulumi.Input<boolean>;
    /**
     * help
     */
    spanningTreeServicePolicy?: pulumi.Input<boolean>;
    /**
     * Shutdown this interface if a storm occurs
     */
    stormControlActionShutdown?: pulumi.Input<boolean>;
    /**
     * Send SNMP trap if a storm occurs
     */
    stormControlActionTrap?: pulumi.Input<boolean>;
    /**
     * Enter threshold
     */
    stormControlBroadcastLevelBpsThreshold?: pulumi.Input<number>;
    /**
     * Enter threshold
     */
    stormControlBroadcastLevelPpsThreshold?: pulumi.Input<string>;
    /**
     * Enter threshold
     */
    stormControlBroadcastLevelThreshold?: pulumi.Input<number>;
    /**
     * Enter threshold
     */
    stormControlMulticastLevelBpsThreshold?: pulumi.Input<number>;
    /**
     * Enter threshold
     */
    stormControlMulticastLevelPpsThreshold?: pulumi.Input<string>;
    /**
     * Enter threshold
     */
    stormControlMulticastLevelThreshold?: pulumi.Input<number>;
    /**
     * ARP probe
     */
    subscriberAgingInactivityTimerProbe?: pulumi.Input<boolean>;
    /**
     * Enter a value between 1 and 65535 in seconds - Range: `1`-`65535`
     */
    subscriberAgingInactivityTimerValue?: pulumi.Input<number>;
    /**
     * ARP probe
     */
    subscriberAgingProbe?: pulumi.Input<boolean>;
    /**
     * VLAN ID of the VLAN when this port is in access mode - Range: `1`-`4094`
     */
    switchportAccessVlan?: pulumi.Input<number>;
    /**
     * Block unknown unicast addresses
     */
    switchportBlockUnicast?: pulumi.Input<boolean>;
    /**
     * Set trunking mode to ACCESS unconditionally
     */
    switchportModeAccess?: pulumi.Input<boolean>;
    /**
     * Set trunking mode to TRUNK unconditionally
     */
    switchportModeTrunk?: pulumi.Input<boolean>;
    /**
     * Device will not engage in negotiation protocol on this interface
     */
    switchportNonegotiate?: pulumi.Input<boolean>;
    /**
     * Security related command
     */
    switchportPortSecurity?: pulumi.Input<boolean>;
    /**
     * Enable aging for configured secure addresses
     */
    switchportPortSecurityAgingStatic?: pulumi.Input<boolean>;
    /**
     * Port-security aging time - Range: `1`-`1440`
     */
    switchportPortSecurityAgingTime?: pulumi.Input<number>;
    /**
     * Port-security aging type
     */
    switchportPortSecurityAgingType?: pulumi.Input<boolean>;
    /**
     * Aging based on inactivity time period
     */
    switchportPortSecurityAgingTypeInactivity?: pulumi.Input<boolean>;
    switchportPortSecurityMaximumRanges?: pulumi.Input<pulumi.Input<inputs.TemplateSwitchportPortSecurityMaximumRange>[]>;
    /**
     * Security violation protect mode
     */
    switchportPortSecurityViolationProtect?: pulumi.Input<boolean>;
    /**
     * Security violation restrict mode
     */
    switchportPortSecurityViolationRestrict?: pulumi.Input<boolean>;
    /**
     * Security violation shutdown mode
     */
    switchportPortSecurityViolationShutdown?: pulumi.Input<boolean>;
    /**
     * Primary normal range VLAN ID of the private VLAN port association - Range: `2`-`1001`
     */
    switchportPrivateVlanHostAssociationPrimaryRange?: pulumi.Input<number>;
    /**
     * Secondary normal range VLAN ID of the private VLAN host port association - Range: `2`-`1001`
     */
    switchportPrivateVlanHostAssociationSecondaryRange?: pulumi.Input<number>;
    /**
     * VLAN IDs of the allowed VLANs when this port is in trunking mode
     */
    switchportTrunkAllowedVlans?: pulumi.Input<string>;
    /**
     * all VLANs
     */
    switchportTrunkAllowedVlansAll?: pulumi.Input<boolean>;
    /**
     * no VLANs
     */
    switchportTrunkAllowedVlansNone?: pulumi.Input<boolean>;
    /**
     * Set native VLAN tagging state
     */
    switchportTrunkNativeVlanTag?: pulumi.Input<boolean>;
    /**
     * VLAN ID of the native VLAN when this port is in trunking mode - Range: `1`-`4094`
     */
    switchportTrunkNativeVlanVlanId?: pulumi.Input<number>;
    /**
     * Vlan for voice traffic - Range: `1`-`4094`
     */
    switchportVoiceVlan?: pulumi.Input<number>;
    /**
     * Template name
     */
    templateName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Template resource.
 */
export interface TemplateArgs {
    /**
     * Enable closed access on port (disabled by default, i.e. open access)
     */
    accessSessionClosed?: pulumi.Input<boolean>;
    /**
     * Set the control-direction on the interface - Choices: `both`, `in`
     */
    accessSessionControlDirection?: pulumi.Input<string>;
    /**
     * Set the Host mode for authentication on this interface - Choices: `multi-auth`, `multi-domain`, `multi-host`,
     * `single-host`
     */
    accessSessionHostMode?: pulumi.Input<string>;
    /**
     * Interface templates set to sticky
     */
    accessSessionInterfaceTemplateSticky?: pulumi.Input<boolean>;
    /**
     * Sticky timer value - Range: `1`-`65535`
     */
    accessSessionInterfaceTemplateStickyTimer?: pulumi.Input<number>;
    /**
     * Apply template to monitor access sessions on the port
     */
    accessSessionMonitor?: pulumi.Input<boolean>;
    /**
     * Set the port-control value - Choices: `auto`, `force-authorized`, `force-unauthorized`
     */
    accessSessionPortControl?: pulumi.Input<string>;
    /**
     * Enable or Disable Reauthentication for this port
     */
    authenticationPeriodic?: pulumi.Input<boolean>;
    /**
     * Enter a value between 1 and 65535 - Range: `1`-`65535`
     */
    authenticationTimerReauthenticateRange?: pulumi.Input<number>;
    /**
     * Obtain re-authentication timeout value from the server
     */
    authenticationTimerReauthenticateServer?: pulumi.Input<boolean>;
    /**
     * Supply local configuration for CTS parameters
     */
    ctsManual?: pulumi.Input<boolean>;
    /**
     * Source Security Group Tag to apply to untagged or non-trusted incoming traffic - Range: `2`-`65519`
     */
    ctsManualPolicyStaticSgt?: pulumi.Input<number>;
    /**
     * Trust the Source Group Tags (SGT) that the peer uses for sending
     */
    ctsManualPolicyStaticTrusted?: pulumi.Input<boolean>;
    /**
     * CTS SGT Propagation configuration
     */
    ctsManualPropagateSgt?: pulumi.Input<boolean>;
    /**
     * Enable Role-based Access Control enforcement
     */
    ctsRoleBasedEnforcement?: pulumi.Input<boolean>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Configure device-tracking on the interface
     */
    deviceTracking?: pulumi.Input<boolean>;
    /**
     * policy name for device tracking
     */
    deviceTrackingAttachPolicies?: pulumi.Input<pulumi.Input<inputs.TemplateDeviceTrackingAttachPolicy>[]>;
    /**
     * VLAN IDs of the VLANs for which this policy applies
     */
    deviceTrackingVlanRange?: pulumi.Input<string>;
    /**
     * Max No. of Reauthentication Attempts - Range: `1`-`10`
     */
    dot1xMaxReauthReq?: pulumi.Input<number>;
    /**
     * Max No. of Retries - Range: `1`-`10`
     */
    dot1xMaxReq?: pulumi.Input<number>;
    /**
     * Set 802.1x interface pae type - Choices: `authenticator`, `both`, `supplicant`
     */
    dot1xPae?: pulumi.Input<string>;
    /**
     * Timeout for supplicant retries - Range: `1`-`65535`
     */
    dot1xTimeoutTxPeriod?: pulumi.Input<number>;
    /**
     * Access control list for IP packets
     */
    ipAccessGroups?: pulumi.Input<pulumi.Input<inputs.TemplateIpAccessGroup>[]>;
    /**
     * DHCP snooping rate limit - Range: `1`-`2048`
     */
    ipDhcpSnoopingLimitRate?: pulumi.Input<number>;
    /**
     * DHCP Snooping trust config
     */
    ipDhcpSnoopingTrust?: pulumi.Input<boolean>;
    /**
     * Load interval delay in seconds - Range: `30`-`600`
     */
    loadInterval?: pulumi.Input<number>;
    /**
     * MAC Authentication Bypass Interface Config Commands
     */
    mab?: pulumi.Input<boolean>;
    /**
     * Use EAP authentication for MAC Auth Bypass
     */
    mabEap?: pulumi.Input<boolean>;
    /**
     * policy-map name
     */
    servicePolicyInput?: pulumi.Input<string>;
    /**
     * policy-map name
     */
    servicePolicyOutput?: pulumi.Input<string>;
    /**
     * Apply a subscriber control policy to the interface
     */
    servicePolicyTypeControlSubscriber?: pulumi.Input<string>;
    /**
     * Get config from a template
     */
    sourceTemplate?: pulumi.Input<string>;
    /**
     * Enable BPDU guard for this interface
     */
    spanningTreeBpduguardEnable?: pulumi.Input<boolean>;
    /**
     * Portfast options for the interface
     */
    spanningTreePortfast?: pulumi.Input<boolean>;
    /**
     * Disable portfast for this interface
     */
    spanningTreePortfastDisable?: pulumi.Input<boolean>;
    /**
     * Enable portfast edge on the interface
     */
    spanningTreePortfastEdge?: pulumi.Input<boolean>;
    /**
     * Enable portfast network on the interface
     */
    spanningTreePortfastNetwork?: pulumi.Input<boolean>;
    /**
     * help
     */
    spanningTreeServicePolicy?: pulumi.Input<boolean>;
    /**
     * Shutdown this interface if a storm occurs
     */
    stormControlActionShutdown?: pulumi.Input<boolean>;
    /**
     * Send SNMP trap if a storm occurs
     */
    stormControlActionTrap?: pulumi.Input<boolean>;
    /**
     * Enter threshold
     */
    stormControlBroadcastLevelBpsThreshold?: pulumi.Input<number>;
    /**
     * Enter threshold
     */
    stormControlBroadcastLevelPpsThreshold?: pulumi.Input<string>;
    /**
     * Enter threshold
     */
    stormControlBroadcastLevelThreshold?: pulumi.Input<number>;
    /**
     * Enter threshold
     */
    stormControlMulticastLevelBpsThreshold?: pulumi.Input<number>;
    /**
     * Enter threshold
     */
    stormControlMulticastLevelPpsThreshold?: pulumi.Input<string>;
    /**
     * Enter threshold
     */
    stormControlMulticastLevelThreshold?: pulumi.Input<number>;
    /**
     * ARP probe
     */
    subscriberAgingInactivityTimerProbe?: pulumi.Input<boolean>;
    /**
     * Enter a value between 1 and 65535 in seconds - Range: `1`-`65535`
     */
    subscriberAgingInactivityTimerValue?: pulumi.Input<number>;
    /**
     * ARP probe
     */
    subscriberAgingProbe?: pulumi.Input<boolean>;
    /**
     * VLAN ID of the VLAN when this port is in access mode - Range: `1`-`4094`
     */
    switchportAccessVlan?: pulumi.Input<number>;
    /**
     * Block unknown unicast addresses
     */
    switchportBlockUnicast?: pulumi.Input<boolean>;
    /**
     * Set trunking mode to ACCESS unconditionally
     */
    switchportModeAccess?: pulumi.Input<boolean>;
    /**
     * Set trunking mode to TRUNK unconditionally
     */
    switchportModeTrunk?: pulumi.Input<boolean>;
    /**
     * Device will not engage in negotiation protocol on this interface
     */
    switchportNonegotiate?: pulumi.Input<boolean>;
    /**
     * Security related command
     */
    switchportPortSecurity?: pulumi.Input<boolean>;
    /**
     * Enable aging for configured secure addresses
     */
    switchportPortSecurityAgingStatic?: pulumi.Input<boolean>;
    /**
     * Port-security aging time - Range: `1`-`1440`
     */
    switchportPortSecurityAgingTime?: pulumi.Input<number>;
    /**
     * Port-security aging type
     */
    switchportPortSecurityAgingType?: pulumi.Input<boolean>;
    /**
     * Aging based on inactivity time period
     */
    switchportPortSecurityAgingTypeInactivity?: pulumi.Input<boolean>;
    switchportPortSecurityMaximumRanges?: pulumi.Input<pulumi.Input<inputs.TemplateSwitchportPortSecurityMaximumRange>[]>;
    /**
     * Security violation protect mode
     */
    switchportPortSecurityViolationProtect?: pulumi.Input<boolean>;
    /**
     * Security violation restrict mode
     */
    switchportPortSecurityViolationRestrict?: pulumi.Input<boolean>;
    /**
     * Security violation shutdown mode
     */
    switchportPortSecurityViolationShutdown?: pulumi.Input<boolean>;
    /**
     * Primary normal range VLAN ID of the private VLAN port association - Range: `2`-`1001`
     */
    switchportPrivateVlanHostAssociationPrimaryRange?: pulumi.Input<number>;
    /**
     * Secondary normal range VLAN ID of the private VLAN host port association - Range: `2`-`1001`
     */
    switchportPrivateVlanHostAssociationSecondaryRange?: pulumi.Input<number>;
    /**
     * VLAN IDs of the allowed VLANs when this port is in trunking mode
     */
    switchportTrunkAllowedVlans?: pulumi.Input<string>;
    /**
     * all VLANs
     */
    switchportTrunkAllowedVlansAll?: pulumi.Input<boolean>;
    /**
     * no VLANs
     */
    switchportTrunkAllowedVlansNone?: pulumi.Input<boolean>;
    /**
     * Set native VLAN tagging state
     */
    switchportTrunkNativeVlanTag?: pulumi.Input<boolean>;
    /**
     * VLAN ID of the native VLAN when this port is in trunking mode - Range: `1`-`4094`
     */
    switchportTrunkNativeVlanVlanId?: pulumi.Input<number>;
    /**
     * Vlan for voice traffic - Range: `1`-`4094`
     */
    switchportVoiceVlan?: pulumi.Input<number>;
    /**
     * Template name
     */
    templateName: pulumi.Input<string>;
}
