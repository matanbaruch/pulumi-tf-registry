// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Vlan extends pulumi.CustomResource {
    /**
     * Get an existing Vlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VlanState, opts?: pulumi.CustomResourceOptions): Vlan {
        return new Vlan(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'iosxe:index/vlan:Vlan';

    /**
     * Returns true if the given object is an instance of Vlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vlan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vlan.__pulumiType;
    }

    /**
     * A device name from the provider configuration.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * Ascii name of the VLAN
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Configure association between private VLANs
     */
    public readonly privateVlanAssociation!: pulumi.Output<string | undefined>;
    /**
     * Configure the VLAN as a community private VLAN
     */
    public readonly privateVlanCommunity!: pulumi.Output<boolean | undefined>;
    /**
     * Configure the VLAN as an isolated private VLAN
     */
    public readonly privateVlanIsolated!: pulumi.Output<boolean | undefined>;
    /**
     * Configure the VLAN as a primary private VLAN
     */
    public readonly privateVlanPrimary!: pulumi.Output<boolean | undefined>;
    /**
     * Configure as Remote SPAN VLAN
     */
    public readonly remoteSpan!: pulumi.Output<boolean | undefined>;
    /**
     * Shutdown VLAN switching
     */
    public readonly shutdown!: pulumi.Output<boolean | undefined>;
    /**
     * a single VLAN id (allowed value range 1-4094)or Comma-separated VLAN id range.e.g. 99 or 1-30 or 1-20,30,40-50 - Range:
     * `1`-`4094`
     */
    public readonly vlanId!: pulumi.Output<number>;

    /**
     * Create a Vlan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VlanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VlanArgs | VlanState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VlanState | undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privateVlanAssociation"] = state ? state.privateVlanAssociation : undefined;
            resourceInputs["privateVlanCommunity"] = state ? state.privateVlanCommunity : undefined;
            resourceInputs["privateVlanIsolated"] = state ? state.privateVlanIsolated : undefined;
            resourceInputs["privateVlanPrimary"] = state ? state.privateVlanPrimary : undefined;
            resourceInputs["remoteSpan"] = state ? state.remoteSpan : undefined;
            resourceInputs["shutdown"] = state ? state.shutdown : undefined;
            resourceInputs["vlanId"] = state ? state.vlanId : undefined;
        } else {
            const args = argsOrState as VlanArgs | undefined;
            if ((!args || args.vlanId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vlanId'");
            }
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privateVlanAssociation"] = args ? args.privateVlanAssociation : undefined;
            resourceInputs["privateVlanCommunity"] = args ? args.privateVlanCommunity : undefined;
            resourceInputs["privateVlanIsolated"] = args ? args.privateVlanIsolated : undefined;
            resourceInputs["privateVlanPrimary"] = args ? args.privateVlanPrimary : undefined;
            resourceInputs["remoteSpan"] = args ? args.remoteSpan : undefined;
            resourceInputs["shutdown"] = args ? args.shutdown : undefined;
            resourceInputs["vlanId"] = args ? args.vlanId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vlan.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Vlan resources.
 */
export interface VlanState {
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Ascii name of the VLAN
     */
    name?: pulumi.Input<string>;
    /**
     * Configure association between private VLANs
     */
    privateVlanAssociation?: pulumi.Input<string>;
    /**
     * Configure the VLAN as a community private VLAN
     */
    privateVlanCommunity?: pulumi.Input<boolean>;
    /**
     * Configure the VLAN as an isolated private VLAN
     */
    privateVlanIsolated?: pulumi.Input<boolean>;
    /**
     * Configure the VLAN as a primary private VLAN
     */
    privateVlanPrimary?: pulumi.Input<boolean>;
    /**
     * Configure as Remote SPAN VLAN
     */
    remoteSpan?: pulumi.Input<boolean>;
    /**
     * Shutdown VLAN switching
     */
    shutdown?: pulumi.Input<boolean>;
    /**
     * a single VLAN id (allowed value range 1-4094)or Comma-separated VLAN id range.e.g. 99 or 1-30 or 1-20,30,40-50 - Range:
     * `1`-`4094`
     */
    vlanId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Vlan resource.
 */
export interface VlanArgs {
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Ascii name of the VLAN
     */
    name?: pulumi.Input<string>;
    /**
     * Configure association between private VLANs
     */
    privateVlanAssociation?: pulumi.Input<string>;
    /**
     * Configure the VLAN as a community private VLAN
     */
    privateVlanCommunity?: pulumi.Input<boolean>;
    /**
     * Configure the VLAN as an isolated private VLAN
     */
    privateVlanIsolated?: pulumi.Input<boolean>;
    /**
     * Configure the VLAN as a primary private VLAN
     */
    privateVlanPrimary?: pulumi.Input<boolean>;
    /**
     * Configure as Remote SPAN VLAN
     */
    remoteSpan?: pulumi.Input<boolean>;
    /**
     * Shutdown VLAN switching
     */
    shutdown?: pulumi.Input<boolean>;
    /**
     * a single VLAN id (allowed value range 1-4094)or Comma-separated VLAN id range.e.g. 99 or 1-30 or 1-20,30,40-50 - Range:
     * `1`-`4094`
     */
    vlanId: pulumi.Input<number>;
}
