// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getInterfaceEthernet(args: GetInterfaceEthernetArgs, opts?: pulumi.InvokeOptions): Promise<GetInterfaceEthernetResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("iosxe:index/getInterfaceEthernet:getInterfaceEthernet", {
        "device": args.device,
        "name": args.name,
        "type": args.type,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getInterfaceEthernet.
 */
export interface GetInterfaceEthernetArgs {
    device?: string;
    name: string;
    type: string;
}

/**
 * A collection of values returned by getInterfaceEthernet.
 */
export interface GetInterfaceEthernetResult {
    readonly arpTimeout: number;
    readonly authenticationHostMode: string;
    readonly authenticationOrderDot1x: boolean;
    readonly authenticationOrderDot1xMab: boolean;
    readonly authenticationOrderDot1xWebauth: boolean;
    readonly authenticationOrderMab: boolean;
    readonly authenticationOrderMabDot1x: boolean;
    readonly authenticationOrderMabWebauth: boolean;
    readonly authenticationOrderWebauth: boolean;
    readonly authenticationPeriodic: boolean;
    readonly authenticationPortControl: string;
    readonly authenticationPriorityDot1x: boolean;
    readonly authenticationPriorityDot1xMab: boolean;
    readonly authenticationPriorityDot1xWebauth: boolean;
    readonly authenticationPriorityMab: boolean;
    readonly authenticationPriorityMabDot1x: boolean;
    readonly authenticationPriorityMabWebauth: boolean;
    readonly authenticationPriorityWebauth: boolean;
    readonly authenticationTimerReauthenticate: number;
    readonly authenticationTimerReauthenticateServer: boolean;
    readonly autoQosClassify: boolean;
    readonly autoQosClassifyPolice: boolean;
    readonly autoQosTrust: boolean;
    readonly autoQosTrustCos: boolean;
    readonly autoQosTrustDscp: boolean;
    readonly autoQosVideoCts: boolean;
    readonly autoQosVideoIpCamera: boolean;
    readonly autoQosVideoMediaPlayer: boolean;
    readonly autoQosVoip: boolean;
    readonly autoQosVoipCiscoPhone: boolean;
    readonly autoQosVoipCiscoSoftphone: boolean;
    readonly autoQosVoipTrust: boolean;
    readonly bandwidth: number;
    readonly bfdEcho: boolean;
    readonly bfdEnable: boolean;
    readonly bfdInterval: number;
    readonly bfdIntervalMinRx: number;
    readonly bfdIntervalMultiplier: number;
    readonly bfdLocalAddress: string;
    readonly bfdTemplate: string;
    readonly channelGroupMode: string;
    readonly channelGroupNumber: number;
    readonly description: string;
    readonly device?: string;
    readonly dot1xMaxReauthReq: number;
    readonly dot1xMaxReq: number;
    readonly dot1xPae: string;
    readonly dot1xTimeoutAuthPeriod: number;
    readonly dot1xTimeoutHeldPeriod: number;
    readonly dot1xTimeoutQuietPeriod: number;
    readonly dot1xTimeoutRatelimitPeriod: number;
    readonly dot1xTimeoutServerTimeout: number;
    readonly dot1xTimeoutStartPeriod: number;
    readonly dot1xTimeoutSuppTimeout: number;
    readonly dot1xTimeoutTxPeriod: number;
    readonly encapsulationDot1qVlanId: number;
    readonly helperAddresses: outputs.GetInterfaceEthernetHelperAddress[];
    readonly id: string;
    readonly ipAccessGroupIn: string;
    readonly ipAccessGroupInEnable: boolean;
    readonly ipAccessGroupOut: string;
    readonly ipAccessGroupOutEnable: boolean;
    readonly ipArpInspectionLimitRate: number;
    readonly ipArpInspectionTrust: boolean;
    readonly ipDhcpRelaySourceInterface: string;
    readonly ipDhcpSnoopingTrust: boolean;
    readonly ipFlowMonitors: outputs.GetInterfaceEthernetIpFlowMonitor[];
    readonly ipProxyArp: boolean;
    readonly ipRedirects: boolean;
    readonly ipUnreachables: boolean;
    readonly ipv4Address: string;
    readonly ipv4AddressMask: string;
    readonly ipv6AddressAutoconfigDefault: boolean;
    readonly ipv6AddressDhcp: boolean;
    readonly ipv6Addresses: outputs.GetInterfaceEthernetIpv6Address[];
    readonly ipv6Enable: boolean;
    readonly ipv6LinkLocalAddresses: outputs.GetInterfaceEthernetIpv6LinkLocalAddress[];
    readonly ipv6Mtu: number;
    readonly ipv6NdRaSuppressAll: boolean;
    readonly loadInterval: number;
    readonly loggingEventLinkStatusEnable: boolean;
    readonly mab: boolean;
    readonly mabEap: boolean;
    readonly mediaType: string;
    readonly name: string;
    readonly negotiationAuto: boolean;
    readonly servicePolicyInput: string;
    readonly servicePolicyOutput: string;
    readonly shutdown: boolean;
    readonly snmpTrapLinkStatus: boolean;
    readonly sourceTemplates: outputs.GetInterfaceEthernetSourceTemplate[];
    readonly spanningTreeGuard: string;
    readonly spanningTreeLinkType: string;
    readonly spanningTreePortfastTrunk: boolean;
    readonly speed100: boolean;
    readonly speed1000: boolean;
    readonly speed10000: boolean;
    readonly speed100000: boolean;
    readonly speed2500: boolean;
    readonly speed25000: boolean;
    readonly speed40000: boolean;
    readonly speed5000: boolean;
    readonly speedNonegotiate: boolean;
    readonly switchport: boolean;
    readonly trustDevice: string;
    readonly type: string;
    readonly unnumbered: string;
    readonly vrfForwarding: string;
}
export function getInterfaceEthernetOutput(args: GetInterfaceEthernetOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetInterfaceEthernetResult> {
    return pulumi.output(args).apply((a: any) => getInterfaceEthernet(a, opts))
}

/**
 * A collection of arguments for invoking getInterfaceEthernet.
 */
export interface GetInterfaceEthernetOutputArgs {
    device?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    type: pulumi.Input<string>;
}
