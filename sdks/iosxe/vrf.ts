// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Vrf extends pulumi.CustomResource {
    /**
     * Get an existing Vrf resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VrfState, opts?: pulumi.CustomResourceOptions): Vrf {
        return new Vrf(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'iosxe:index/vrf:Vrf';

    /**
     * Returns true if the given object is an instance of Vrf.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vrf {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vrf.__pulumiType;
    }

    /**
     * Address family
     */
    public readonly addressFamilyIpv4!: pulumi.Output<boolean | undefined>;
    /**
     * Address family
     */
    public readonly addressFamilyIpv6!: pulumi.Output<boolean | undefined>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    public readonly deleteMode!: pulumi.Output<string | undefined>;
    /**
     * VRF specific description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A device name from the provider configuration.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * Export Target-VPN community
     */
    public readonly ipv4RouteTargetExportStitchings!: pulumi.Output<outputs.VrfIpv4RouteTargetExportStitching[] | undefined>;
    /**
     * Export Target-VPN community
     */
    public readonly ipv4RouteTargetExports!: pulumi.Output<outputs.VrfIpv4RouteTargetExport[] | undefined>;
    /**
     * Import Target-VPN community
     */
    public readonly ipv4RouteTargetImportStitchings!: pulumi.Output<outputs.VrfIpv4RouteTargetImportStitching[] | undefined>;
    /**
     * Import Target-VPN community
     */
    public readonly ipv4RouteTargetImports!: pulumi.Output<outputs.VrfIpv4RouteTargetImport[] | undefined>;
    /**
     * Export Target-VPN community
     */
    public readonly ipv6RouteTargetExportStitchings!: pulumi.Output<outputs.VrfIpv6RouteTargetExportStitching[] | undefined>;
    /**
     * Export Target-VPN community
     */
    public readonly ipv6RouteTargetExports!: pulumi.Output<outputs.VrfIpv6RouteTargetExport[] | undefined>;
    /**
     * Import Target-VPN community
     */
    public readonly ipv6RouteTargetImportStitchings!: pulumi.Output<outputs.VrfIpv6RouteTargetImportStitching[] | undefined>;
    /**
     * Import Target-VPN community
     */
    public readonly ipv6RouteTargetImports!: pulumi.Output<outputs.VrfIpv6RouteTargetImport[] | undefined>;
    /**
     * WORD;;VRF name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specify Route Distinguisher
     */
    public readonly rd!: pulumi.Output<string | undefined>;
    /**
     * Export Target-VPN community
     */
    public readonly routeTargetExports!: pulumi.Output<outputs.VrfRouteTargetExport[] | undefined>;
    /**
     * Import Target-VPN community
     */
    public readonly routeTargetImports!: pulumi.Output<outputs.VrfRouteTargetImport[] | undefined>;
    /**
     * Configure VPN ID in rfc2685 format
     */
    public readonly vpnId!: pulumi.Output<string | undefined>;

    /**
     * Create a Vrf resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VrfArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VrfArgs | VrfState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VrfState | undefined;
            resourceInputs["addressFamilyIpv4"] = state ? state.addressFamilyIpv4 : undefined;
            resourceInputs["addressFamilyIpv6"] = state ? state.addressFamilyIpv6 : undefined;
            resourceInputs["deleteMode"] = state ? state.deleteMode : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["ipv4RouteTargetExportStitchings"] = state ? state.ipv4RouteTargetExportStitchings : undefined;
            resourceInputs["ipv4RouteTargetExports"] = state ? state.ipv4RouteTargetExports : undefined;
            resourceInputs["ipv4RouteTargetImportStitchings"] = state ? state.ipv4RouteTargetImportStitchings : undefined;
            resourceInputs["ipv4RouteTargetImports"] = state ? state.ipv4RouteTargetImports : undefined;
            resourceInputs["ipv6RouteTargetExportStitchings"] = state ? state.ipv6RouteTargetExportStitchings : undefined;
            resourceInputs["ipv6RouteTargetExports"] = state ? state.ipv6RouteTargetExports : undefined;
            resourceInputs["ipv6RouteTargetImportStitchings"] = state ? state.ipv6RouteTargetImportStitchings : undefined;
            resourceInputs["ipv6RouteTargetImports"] = state ? state.ipv6RouteTargetImports : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["rd"] = state ? state.rd : undefined;
            resourceInputs["routeTargetExports"] = state ? state.routeTargetExports : undefined;
            resourceInputs["routeTargetImports"] = state ? state.routeTargetImports : undefined;
            resourceInputs["vpnId"] = state ? state.vpnId : undefined;
        } else {
            const args = argsOrState as VrfArgs | undefined;
            resourceInputs["addressFamilyIpv4"] = args ? args.addressFamilyIpv4 : undefined;
            resourceInputs["addressFamilyIpv6"] = args ? args.addressFamilyIpv6 : undefined;
            resourceInputs["deleteMode"] = args ? args.deleteMode : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["ipv4RouteTargetExportStitchings"] = args ? args.ipv4RouteTargetExportStitchings : undefined;
            resourceInputs["ipv4RouteTargetExports"] = args ? args.ipv4RouteTargetExports : undefined;
            resourceInputs["ipv4RouteTargetImportStitchings"] = args ? args.ipv4RouteTargetImportStitchings : undefined;
            resourceInputs["ipv4RouteTargetImports"] = args ? args.ipv4RouteTargetImports : undefined;
            resourceInputs["ipv6RouteTargetExportStitchings"] = args ? args.ipv6RouteTargetExportStitchings : undefined;
            resourceInputs["ipv6RouteTargetExports"] = args ? args.ipv6RouteTargetExports : undefined;
            resourceInputs["ipv6RouteTargetImportStitchings"] = args ? args.ipv6RouteTargetImportStitchings : undefined;
            resourceInputs["ipv6RouteTargetImports"] = args ? args.ipv6RouteTargetImports : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rd"] = args ? args.rd : undefined;
            resourceInputs["routeTargetExports"] = args ? args.routeTargetExports : undefined;
            resourceInputs["routeTargetImports"] = args ? args.routeTargetImports : undefined;
            resourceInputs["vpnId"] = args ? args.vpnId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vrf.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Vrf resources.
 */
export interface VrfState {
    /**
     * Address family
     */
    addressFamilyIpv4?: pulumi.Input<boolean>;
    /**
     * Address family
     */
    addressFamilyIpv6?: pulumi.Input<boolean>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * VRF specific description
     */
    description?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Export Target-VPN community
     */
    ipv4RouteTargetExportStitchings?: pulumi.Input<pulumi.Input<inputs.VrfIpv4RouteTargetExportStitching>[]>;
    /**
     * Export Target-VPN community
     */
    ipv4RouteTargetExports?: pulumi.Input<pulumi.Input<inputs.VrfIpv4RouteTargetExport>[]>;
    /**
     * Import Target-VPN community
     */
    ipv4RouteTargetImportStitchings?: pulumi.Input<pulumi.Input<inputs.VrfIpv4RouteTargetImportStitching>[]>;
    /**
     * Import Target-VPN community
     */
    ipv4RouteTargetImports?: pulumi.Input<pulumi.Input<inputs.VrfIpv4RouteTargetImport>[]>;
    /**
     * Export Target-VPN community
     */
    ipv6RouteTargetExportStitchings?: pulumi.Input<pulumi.Input<inputs.VrfIpv6RouteTargetExportStitching>[]>;
    /**
     * Export Target-VPN community
     */
    ipv6RouteTargetExports?: pulumi.Input<pulumi.Input<inputs.VrfIpv6RouteTargetExport>[]>;
    /**
     * Import Target-VPN community
     */
    ipv6RouteTargetImportStitchings?: pulumi.Input<pulumi.Input<inputs.VrfIpv6RouteTargetImportStitching>[]>;
    /**
     * Import Target-VPN community
     */
    ipv6RouteTargetImports?: pulumi.Input<pulumi.Input<inputs.VrfIpv6RouteTargetImport>[]>;
    /**
     * WORD;;VRF name
     */
    name?: pulumi.Input<string>;
    /**
     * Specify Route Distinguisher
     */
    rd?: pulumi.Input<string>;
    /**
     * Export Target-VPN community
     */
    routeTargetExports?: pulumi.Input<pulumi.Input<inputs.VrfRouteTargetExport>[]>;
    /**
     * Import Target-VPN community
     */
    routeTargetImports?: pulumi.Input<pulumi.Input<inputs.VrfRouteTargetImport>[]>;
    /**
     * Configure VPN ID in rfc2685 format
     */
    vpnId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vrf resource.
 */
export interface VrfArgs {
    /**
     * Address family
     */
    addressFamilyIpv4?: pulumi.Input<boolean>;
    /**
     * Address family
     */
    addressFamilyIpv6?: pulumi.Input<boolean>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * VRF specific description
     */
    description?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Export Target-VPN community
     */
    ipv4RouteTargetExportStitchings?: pulumi.Input<pulumi.Input<inputs.VrfIpv4RouteTargetExportStitching>[]>;
    /**
     * Export Target-VPN community
     */
    ipv4RouteTargetExports?: pulumi.Input<pulumi.Input<inputs.VrfIpv4RouteTargetExport>[]>;
    /**
     * Import Target-VPN community
     */
    ipv4RouteTargetImportStitchings?: pulumi.Input<pulumi.Input<inputs.VrfIpv4RouteTargetImportStitching>[]>;
    /**
     * Import Target-VPN community
     */
    ipv4RouteTargetImports?: pulumi.Input<pulumi.Input<inputs.VrfIpv4RouteTargetImport>[]>;
    /**
     * Export Target-VPN community
     */
    ipv6RouteTargetExportStitchings?: pulumi.Input<pulumi.Input<inputs.VrfIpv6RouteTargetExportStitching>[]>;
    /**
     * Export Target-VPN community
     */
    ipv6RouteTargetExports?: pulumi.Input<pulumi.Input<inputs.VrfIpv6RouteTargetExport>[]>;
    /**
     * Import Target-VPN community
     */
    ipv6RouteTargetImportStitchings?: pulumi.Input<pulumi.Input<inputs.VrfIpv6RouteTargetImportStitching>[]>;
    /**
     * Import Target-VPN community
     */
    ipv6RouteTargetImports?: pulumi.Input<pulumi.Input<inputs.VrfIpv6RouteTargetImport>[]>;
    /**
     * WORD;;VRF name
     */
    name?: pulumi.Input<string>;
    /**
     * Specify Route Distinguisher
     */
    rd?: pulumi.Input<string>;
    /**
     * Export Target-VPN community
     */
    routeTargetExports?: pulumi.Input<pulumi.Input<inputs.VrfRouteTargetExport>[]>;
    /**
     * Import Target-VPN community
     */
    routeTargetImports?: pulumi.Input<pulumi.Input<inputs.VrfRouteTargetImport>[]>;
    /**
     * Configure VPN ID in rfc2685 format
     */
    vpnId?: pulumi.Input<string>;
}
