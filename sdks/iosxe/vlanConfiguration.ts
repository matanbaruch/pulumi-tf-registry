// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VlanConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing VlanConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VlanConfigurationState, opts?: pulumi.CustomResourceOptions): VlanConfiguration {
        return new VlanConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'iosxe:index/vlanConfiguration:VlanConfiguration';

    /**
     * Returns true if the given object is an instance of VlanConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VlanConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VlanConfiguration.__pulumiType;
    }

    /**
     * Enter VFI name
     */
    public readonly accessVfi!: pulumi.Output<string | undefined>;
    /**
     * A device name from the provider configuration.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * - Range: `1`-`65535`
     */
    public readonly evpnInstance!: pulumi.Output<number | undefined>;
    /**
     * VxLAN VNI value - Range: `4096`-`16777215`
     */
    public readonly evpnInstanceVni!: pulumi.Output<number | undefined>;
    /**
     * VLAN ID List Eg. 1-10,15 - Range: `1`-`4094`
     */
    public readonly vlanId!: pulumi.Output<number>;
    /**
     * VxLAN VNI value - Range: `4096`-`16777215`
     */
    public readonly vni!: pulumi.Output<number | undefined>;

    /**
     * Create a VlanConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VlanConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VlanConfigurationArgs | VlanConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VlanConfigurationState | undefined;
            resourceInputs["accessVfi"] = state ? state.accessVfi : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["evpnInstance"] = state ? state.evpnInstance : undefined;
            resourceInputs["evpnInstanceVni"] = state ? state.evpnInstanceVni : undefined;
            resourceInputs["vlanId"] = state ? state.vlanId : undefined;
            resourceInputs["vni"] = state ? state.vni : undefined;
        } else {
            const args = argsOrState as VlanConfigurationArgs | undefined;
            if ((!args || args.vlanId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vlanId'");
            }
            resourceInputs["accessVfi"] = args ? args.accessVfi : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["evpnInstance"] = args ? args.evpnInstance : undefined;
            resourceInputs["evpnInstanceVni"] = args ? args.evpnInstanceVni : undefined;
            resourceInputs["vlanId"] = args ? args.vlanId : undefined;
            resourceInputs["vni"] = args ? args.vni : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VlanConfiguration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VlanConfiguration resources.
 */
export interface VlanConfigurationState {
    /**
     * Enter VFI name
     */
    accessVfi?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * - Range: `1`-`65535`
     */
    evpnInstance?: pulumi.Input<number>;
    /**
     * VxLAN VNI value - Range: `4096`-`16777215`
     */
    evpnInstanceVni?: pulumi.Input<number>;
    /**
     * VLAN ID List Eg. 1-10,15 - Range: `1`-`4094`
     */
    vlanId?: pulumi.Input<number>;
    /**
     * VxLAN VNI value - Range: `4096`-`16777215`
     */
    vni?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a VlanConfiguration resource.
 */
export interface VlanConfigurationArgs {
    /**
     * Enter VFI name
     */
    accessVfi?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * - Range: `1`-`65535`
     */
    evpnInstance?: pulumi.Input<number>;
    /**
     * VxLAN VNI value - Range: `4096`-`16777215`
     */
    evpnInstanceVni?: pulumi.Input<number>;
    /**
     * VLAN ID List Eg. 1-10,15 - Range: `1`-`4094`
     */
    vlanId: pulumi.Input<number>;
    /**
     * VxLAN VNI value - Range: `4096`-`16777215`
     */
    vni?: pulumi.Input<number>;
}
