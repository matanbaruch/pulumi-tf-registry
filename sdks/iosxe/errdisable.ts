// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Errdisable extends pulumi.CustomResource {
    /**
     * Get an existing Errdisable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ErrdisableState, opts?: pulumi.CustomResourceOptions): Errdisable {
        return new Errdisable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'iosxe:index/errdisable:Errdisable';

    /**
     * Returns true if the given object is an instance of Errdisable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Errdisable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Errdisable.__pulumiType;
    }

    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    public readonly deleteMode!: pulumi.Output<string | undefined>;
    /**
     * Enable error detection on all cases
     */
    public readonly detectCauseAll!: pulumi.Output<boolean | undefined>;
    /**
     * Enable error detection for arp inspection
     */
    public readonly detectCauseArpInspection!: pulumi.Output<boolean | undefined>;
    /**
     * Enable error detection on bpdu-guard
     */
    public readonly detectCauseBpduguard!: pulumi.Output<boolean | undefined>;
    /**
     * Enable error detection on dhcp-rate-limit
     */
    public readonly detectCauseDhcpRateLimit!: pulumi.Output<boolean | undefined>;
    /**
     * Enable error detection on dtp-flapping
     */
    public readonly detectCauseDtpFlap!: pulumi.Output<boolean | undefined>;
    /**
     * Enable error detection on gbic-invalid
     */
    public readonly detectCauseGbicInvalid!: pulumi.Output<boolean | undefined>;
    /**
     * Enable error detection for inline-power
     */
    public readonly detectCauseInlinePower!: pulumi.Output<boolean | undefined>;
    /**
     * Enable timer to recover from l2protocol-tunnel error disable state
     */
    public readonly detectCauseL2ptguard!: pulumi.Output<boolean | undefined>;
    /**
     * Enable error detection on linkstate-flapping
     */
    public readonly detectCauseLinkFlap!: pulumi.Output<boolean | undefined>;
    /**
     * Enable error detection on loopback
     */
    public readonly detectCauseLoopback!: pulumi.Output<boolean | undefined>;
    /**
     * Enable error detection on loop detect
     */
    public readonly detectCauseLoopdetect!: pulumi.Output<boolean | undefined>;
    public readonly detectCauseMlacpMinlink!: pulumi.Output<boolean | undefined>;
    /**
     * Enable error detection on pagp-flapping
     */
    public readonly detectCausePagpFlap!: pulumi.Output<boolean | undefined>;
    /**
     * Enable error detection on PPPoE IA rate-limit
     */
    public readonly detectCausePppoeIaRateLimit!: pulumi.Output<boolean | undefined>;
    /**
     * Shutdown vlan on 802.1x-guard violation
     */
    public readonly detectCauseSecurityViolationShutdownVlan!: pulumi.Output<boolean | undefined>;
    /**
     * Enable error detection on SFP config mismatch
     */
    public readonly detectCauseSfpConfigMismatch!: pulumi.Output<boolean | undefined>;
    /**
     * Enable error detection on small_frame
     */
    public readonly detectCauseSmallFrame!: pulumi.Output<boolean | undefined>;
    /**
     * A device name from the provider configuration.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * maximum flaps allowed before setting to errdisable - Range: `1`-`100`
     */
    public readonly flapSettingCauseDtpFlapMaxFlaps!: pulumi.Output<number | undefined>;
    /**
     * time period the flaps are counted - Range: `1`-`120`
     */
    public readonly flapSettingCauseDtpFlapTime!: pulumi.Output<number | undefined>;
    /**
     * maximum flaps allowed before setting to errdisable - Range: `1`-`100`
     */
    public readonly flapSettingCauseLinkFlapMaxFlaps!: pulumi.Output<number | undefined>;
    /**
     * time period the flaps are counted - Range: `1`-`120`
     */
    public readonly flapSettingCauseLinkFlapTime!: pulumi.Output<number | undefined>;
    /**
     * maximum flaps allowed before setting to errdisable - Range: `1`-`100`
     */
    public readonly flapSettingCausePagpFlapMaxFlaps!: pulumi.Output<number | undefined>;
    /**
     * time period the flaps are counted - Range: `1`-`120`
     */
    public readonly flapSettingCausePagpFlapTime!: pulumi.Output<number | undefined>;
    /**
     * Enable timer to recover from all error causes
     */
    public readonly recoveryCauseAll!: pulumi.Output<boolean | undefined>;
    /**
     * Enable timer to recover from arp inspection error disable state
     */
    public readonly recoveryCauseArpInspection!: pulumi.Output<boolean | undefined>;
    /**
     * Enable timer to recover from BPDU Guard error
     */
    public readonly recoveryCauseBpduguard!: pulumi.Output<boolean | undefined>;
    /**
     * (STP) Enable timer to recover from channel misconfiguration error
     */
    public readonly recoveryCauseChannelMisconfig!: pulumi.Output<boolean | undefined>;
    /**
     * Enable timer to recover from dhcp-rate-limit error
     */
    public readonly recoveryCauseDhcpRateLimit!: pulumi.Output<boolean | undefined>;
    /**
     * Enable timer to recover from dtp-flap error
     */
    public readonly recoveryCauseDtpFlap!: pulumi.Output<boolean | undefined>;
    /**
     * Enable timer to recover from invalid GBIC error
     */
    public readonly recoveryCauseGbicInvalid!: pulumi.Output<boolean | undefined>;
    /**
     * Enable timer to recover from inline-power error
     */
    public readonly recoveryCauseInlinePower!: pulumi.Output<boolean | undefined>;
    /**
     * Enable timer to recover from l2protocol-tunnel error disable state
     */
    public readonly recoveryCauseL2ptguard!: pulumi.Output<boolean | undefined>;
    /**
     * Enable timer to recover from link-flap error
     */
    public readonly recoveryCauseLinkFlap!: pulumi.Output<boolean | undefined>;
    public readonly recoveryCauseLinkMonitorFailure!: pulumi.Output<boolean | undefined>;
    /**
     * Enable timer to recover from loopback error
     */
    public readonly recoveryCauseLoopback!: pulumi.Output<boolean | undefined>;
    /**
     * Enable timer to recover from loop detect error
     */
    public readonly recoveryCauseLoopdetect!: pulumi.Output<boolean | undefined>;
    /**
     * Enable timer to recover from mac limit disable state
     */
    public readonly recoveryCauseMacLimit!: pulumi.Output<boolean | undefined>;
    public readonly recoveryCauseMlacpMinlink!: pulumi.Output<boolean | undefined>;
    /**
     * Enable timer to recover from pagp-flap error
     */
    public readonly recoveryCausePagpFlap!: pulumi.Output<boolean | undefined>;
    /**
     * Enable timer to recover from port mode change failure
     */
    public readonly recoveryCausePortModeFailure!: pulumi.Output<boolean | undefined>;
    /**
     * Enable timer to recover from PPPoE IA rate-limit error
     */
    public readonly recoveryCausePppoeIaRateLimit!: pulumi.Output<boolean | undefined>;
    /**
     * Enable timer to recover from psecure violation error
     */
    public readonly recoveryCausePsecureViolation!: pulumi.Output<boolean | undefined>;
    public readonly recoveryCausePsp!: pulumi.Output<boolean | undefined>;
    /**
     * Enable timer to recover from 802.1x violation error
     */
    public readonly recoveryCauseSecurityViolation!: pulumi.Output<boolean | undefined>;
    /**
     * Enable timer to recover from SFP config mismatch error
     */
    public readonly recoveryCauseSfpConfigMismatch!: pulumi.Output<boolean | undefined>;
    /**
     * Enable timer to recover from small frame error
     */
    public readonly recoveryCauseSmallFrame!: pulumi.Output<boolean | undefined>;
    /**
     * Enable timer to recover from storm-control error
     */
    public readonly recoveryCauseStormControl!: pulumi.Output<boolean | undefined>;
    /**
     * Enable timer to recover from udld error
     */
    public readonly recoveryCauseUdld!: pulumi.Output<boolean | undefined>;
    public readonly recoveryCauseUnicastFlood!: pulumi.Output<boolean | undefined>;
    /**
     * Enable timer to recover from vmps shutdown error
     */
    public readonly recoveryCauseVmps!: pulumi.Output<boolean | undefined>;
    /**
     * Error disable recovery timer value - Range: `30`-`86400`
     */
    public readonly recoveryInterval!: pulumi.Output<number | undefined>;

    /**
     * Create a Errdisable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ErrdisableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ErrdisableArgs | ErrdisableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ErrdisableState | undefined;
            resourceInputs["deleteMode"] = state ? state.deleteMode : undefined;
            resourceInputs["detectCauseAll"] = state ? state.detectCauseAll : undefined;
            resourceInputs["detectCauseArpInspection"] = state ? state.detectCauseArpInspection : undefined;
            resourceInputs["detectCauseBpduguard"] = state ? state.detectCauseBpduguard : undefined;
            resourceInputs["detectCauseDhcpRateLimit"] = state ? state.detectCauseDhcpRateLimit : undefined;
            resourceInputs["detectCauseDtpFlap"] = state ? state.detectCauseDtpFlap : undefined;
            resourceInputs["detectCauseGbicInvalid"] = state ? state.detectCauseGbicInvalid : undefined;
            resourceInputs["detectCauseInlinePower"] = state ? state.detectCauseInlinePower : undefined;
            resourceInputs["detectCauseL2ptguard"] = state ? state.detectCauseL2ptguard : undefined;
            resourceInputs["detectCauseLinkFlap"] = state ? state.detectCauseLinkFlap : undefined;
            resourceInputs["detectCauseLoopback"] = state ? state.detectCauseLoopback : undefined;
            resourceInputs["detectCauseLoopdetect"] = state ? state.detectCauseLoopdetect : undefined;
            resourceInputs["detectCauseMlacpMinlink"] = state ? state.detectCauseMlacpMinlink : undefined;
            resourceInputs["detectCausePagpFlap"] = state ? state.detectCausePagpFlap : undefined;
            resourceInputs["detectCausePppoeIaRateLimit"] = state ? state.detectCausePppoeIaRateLimit : undefined;
            resourceInputs["detectCauseSecurityViolationShutdownVlan"] = state ? state.detectCauseSecurityViolationShutdownVlan : undefined;
            resourceInputs["detectCauseSfpConfigMismatch"] = state ? state.detectCauseSfpConfigMismatch : undefined;
            resourceInputs["detectCauseSmallFrame"] = state ? state.detectCauseSmallFrame : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["flapSettingCauseDtpFlapMaxFlaps"] = state ? state.flapSettingCauseDtpFlapMaxFlaps : undefined;
            resourceInputs["flapSettingCauseDtpFlapTime"] = state ? state.flapSettingCauseDtpFlapTime : undefined;
            resourceInputs["flapSettingCauseLinkFlapMaxFlaps"] = state ? state.flapSettingCauseLinkFlapMaxFlaps : undefined;
            resourceInputs["flapSettingCauseLinkFlapTime"] = state ? state.flapSettingCauseLinkFlapTime : undefined;
            resourceInputs["flapSettingCausePagpFlapMaxFlaps"] = state ? state.flapSettingCausePagpFlapMaxFlaps : undefined;
            resourceInputs["flapSettingCausePagpFlapTime"] = state ? state.flapSettingCausePagpFlapTime : undefined;
            resourceInputs["recoveryCauseAll"] = state ? state.recoveryCauseAll : undefined;
            resourceInputs["recoveryCauseArpInspection"] = state ? state.recoveryCauseArpInspection : undefined;
            resourceInputs["recoveryCauseBpduguard"] = state ? state.recoveryCauseBpduguard : undefined;
            resourceInputs["recoveryCauseChannelMisconfig"] = state ? state.recoveryCauseChannelMisconfig : undefined;
            resourceInputs["recoveryCauseDhcpRateLimit"] = state ? state.recoveryCauseDhcpRateLimit : undefined;
            resourceInputs["recoveryCauseDtpFlap"] = state ? state.recoveryCauseDtpFlap : undefined;
            resourceInputs["recoveryCauseGbicInvalid"] = state ? state.recoveryCauseGbicInvalid : undefined;
            resourceInputs["recoveryCauseInlinePower"] = state ? state.recoveryCauseInlinePower : undefined;
            resourceInputs["recoveryCauseL2ptguard"] = state ? state.recoveryCauseL2ptguard : undefined;
            resourceInputs["recoveryCauseLinkFlap"] = state ? state.recoveryCauseLinkFlap : undefined;
            resourceInputs["recoveryCauseLinkMonitorFailure"] = state ? state.recoveryCauseLinkMonitorFailure : undefined;
            resourceInputs["recoveryCauseLoopback"] = state ? state.recoveryCauseLoopback : undefined;
            resourceInputs["recoveryCauseLoopdetect"] = state ? state.recoveryCauseLoopdetect : undefined;
            resourceInputs["recoveryCauseMacLimit"] = state ? state.recoveryCauseMacLimit : undefined;
            resourceInputs["recoveryCauseMlacpMinlink"] = state ? state.recoveryCauseMlacpMinlink : undefined;
            resourceInputs["recoveryCausePagpFlap"] = state ? state.recoveryCausePagpFlap : undefined;
            resourceInputs["recoveryCausePortModeFailure"] = state ? state.recoveryCausePortModeFailure : undefined;
            resourceInputs["recoveryCausePppoeIaRateLimit"] = state ? state.recoveryCausePppoeIaRateLimit : undefined;
            resourceInputs["recoveryCausePsecureViolation"] = state ? state.recoveryCausePsecureViolation : undefined;
            resourceInputs["recoveryCausePsp"] = state ? state.recoveryCausePsp : undefined;
            resourceInputs["recoveryCauseSecurityViolation"] = state ? state.recoveryCauseSecurityViolation : undefined;
            resourceInputs["recoveryCauseSfpConfigMismatch"] = state ? state.recoveryCauseSfpConfigMismatch : undefined;
            resourceInputs["recoveryCauseSmallFrame"] = state ? state.recoveryCauseSmallFrame : undefined;
            resourceInputs["recoveryCauseStormControl"] = state ? state.recoveryCauseStormControl : undefined;
            resourceInputs["recoveryCauseUdld"] = state ? state.recoveryCauseUdld : undefined;
            resourceInputs["recoveryCauseUnicastFlood"] = state ? state.recoveryCauseUnicastFlood : undefined;
            resourceInputs["recoveryCauseVmps"] = state ? state.recoveryCauseVmps : undefined;
            resourceInputs["recoveryInterval"] = state ? state.recoveryInterval : undefined;
        } else {
            const args = argsOrState as ErrdisableArgs | undefined;
            resourceInputs["deleteMode"] = args ? args.deleteMode : undefined;
            resourceInputs["detectCauseAll"] = args ? args.detectCauseAll : undefined;
            resourceInputs["detectCauseArpInspection"] = args ? args.detectCauseArpInspection : undefined;
            resourceInputs["detectCauseBpduguard"] = args ? args.detectCauseBpduguard : undefined;
            resourceInputs["detectCauseDhcpRateLimit"] = args ? args.detectCauseDhcpRateLimit : undefined;
            resourceInputs["detectCauseDtpFlap"] = args ? args.detectCauseDtpFlap : undefined;
            resourceInputs["detectCauseGbicInvalid"] = args ? args.detectCauseGbicInvalid : undefined;
            resourceInputs["detectCauseInlinePower"] = args ? args.detectCauseInlinePower : undefined;
            resourceInputs["detectCauseL2ptguard"] = args ? args.detectCauseL2ptguard : undefined;
            resourceInputs["detectCauseLinkFlap"] = args ? args.detectCauseLinkFlap : undefined;
            resourceInputs["detectCauseLoopback"] = args ? args.detectCauseLoopback : undefined;
            resourceInputs["detectCauseLoopdetect"] = args ? args.detectCauseLoopdetect : undefined;
            resourceInputs["detectCauseMlacpMinlink"] = args ? args.detectCauseMlacpMinlink : undefined;
            resourceInputs["detectCausePagpFlap"] = args ? args.detectCausePagpFlap : undefined;
            resourceInputs["detectCausePppoeIaRateLimit"] = args ? args.detectCausePppoeIaRateLimit : undefined;
            resourceInputs["detectCauseSecurityViolationShutdownVlan"] = args ? args.detectCauseSecurityViolationShutdownVlan : undefined;
            resourceInputs["detectCauseSfpConfigMismatch"] = args ? args.detectCauseSfpConfigMismatch : undefined;
            resourceInputs["detectCauseSmallFrame"] = args ? args.detectCauseSmallFrame : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["flapSettingCauseDtpFlapMaxFlaps"] = args ? args.flapSettingCauseDtpFlapMaxFlaps : undefined;
            resourceInputs["flapSettingCauseDtpFlapTime"] = args ? args.flapSettingCauseDtpFlapTime : undefined;
            resourceInputs["flapSettingCauseLinkFlapMaxFlaps"] = args ? args.flapSettingCauseLinkFlapMaxFlaps : undefined;
            resourceInputs["flapSettingCauseLinkFlapTime"] = args ? args.flapSettingCauseLinkFlapTime : undefined;
            resourceInputs["flapSettingCausePagpFlapMaxFlaps"] = args ? args.flapSettingCausePagpFlapMaxFlaps : undefined;
            resourceInputs["flapSettingCausePagpFlapTime"] = args ? args.flapSettingCausePagpFlapTime : undefined;
            resourceInputs["recoveryCauseAll"] = args ? args.recoveryCauseAll : undefined;
            resourceInputs["recoveryCauseArpInspection"] = args ? args.recoveryCauseArpInspection : undefined;
            resourceInputs["recoveryCauseBpduguard"] = args ? args.recoveryCauseBpduguard : undefined;
            resourceInputs["recoveryCauseChannelMisconfig"] = args ? args.recoveryCauseChannelMisconfig : undefined;
            resourceInputs["recoveryCauseDhcpRateLimit"] = args ? args.recoveryCauseDhcpRateLimit : undefined;
            resourceInputs["recoveryCauseDtpFlap"] = args ? args.recoveryCauseDtpFlap : undefined;
            resourceInputs["recoveryCauseGbicInvalid"] = args ? args.recoveryCauseGbicInvalid : undefined;
            resourceInputs["recoveryCauseInlinePower"] = args ? args.recoveryCauseInlinePower : undefined;
            resourceInputs["recoveryCauseL2ptguard"] = args ? args.recoveryCauseL2ptguard : undefined;
            resourceInputs["recoveryCauseLinkFlap"] = args ? args.recoveryCauseLinkFlap : undefined;
            resourceInputs["recoveryCauseLinkMonitorFailure"] = args ? args.recoveryCauseLinkMonitorFailure : undefined;
            resourceInputs["recoveryCauseLoopback"] = args ? args.recoveryCauseLoopback : undefined;
            resourceInputs["recoveryCauseLoopdetect"] = args ? args.recoveryCauseLoopdetect : undefined;
            resourceInputs["recoveryCauseMacLimit"] = args ? args.recoveryCauseMacLimit : undefined;
            resourceInputs["recoveryCauseMlacpMinlink"] = args ? args.recoveryCauseMlacpMinlink : undefined;
            resourceInputs["recoveryCausePagpFlap"] = args ? args.recoveryCausePagpFlap : undefined;
            resourceInputs["recoveryCausePortModeFailure"] = args ? args.recoveryCausePortModeFailure : undefined;
            resourceInputs["recoveryCausePppoeIaRateLimit"] = args ? args.recoveryCausePppoeIaRateLimit : undefined;
            resourceInputs["recoveryCausePsecureViolation"] = args ? args.recoveryCausePsecureViolation : undefined;
            resourceInputs["recoveryCausePsp"] = args ? args.recoveryCausePsp : undefined;
            resourceInputs["recoveryCauseSecurityViolation"] = args ? args.recoveryCauseSecurityViolation : undefined;
            resourceInputs["recoveryCauseSfpConfigMismatch"] = args ? args.recoveryCauseSfpConfigMismatch : undefined;
            resourceInputs["recoveryCauseSmallFrame"] = args ? args.recoveryCauseSmallFrame : undefined;
            resourceInputs["recoveryCauseStormControl"] = args ? args.recoveryCauseStormControl : undefined;
            resourceInputs["recoveryCauseUdld"] = args ? args.recoveryCauseUdld : undefined;
            resourceInputs["recoveryCauseUnicastFlood"] = args ? args.recoveryCauseUnicastFlood : undefined;
            resourceInputs["recoveryCauseVmps"] = args ? args.recoveryCauseVmps : undefined;
            resourceInputs["recoveryInterval"] = args ? args.recoveryInterval : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Errdisable.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Errdisable resources.
 */
export interface ErrdisableState {
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * Enable error detection on all cases
     */
    detectCauseAll?: pulumi.Input<boolean>;
    /**
     * Enable error detection for arp inspection
     */
    detectCauseArpInspection?: pulumi.Input<boolean>;
    /**
     * Enable error detection on bpdu-guard
     */
    detectCauseBpduguard?: pulumi.Input<boolean>;
    /**
     * Enable error detection on dhcp-rate-limit
     */
    detectCauseDhcpRateLimit?: pulumi.Input<boolean>;
    /**
     * Enable error detection on dtp-flapping
     */
    detectCauseDtpFlap?: pulumi.Input<boolean>;
    /**
     * Enable error detection on gbic-invalid
     */
    detectCauseGbicInvalid?: pulumi.Input<boolean>;
    /**
     * Enable error detection for inline-power
     */
    detectCauseInlinePower?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from l2protocol-tunnel error disable state
     */
    detectCauseL2ptguard?: pulumi.Input<boolean>;
    /**
     * Enable error detection on linkstate-flapping
     */
    detectCauseLinkFlap?: pulumi.Input<boolean>;
    /**
     * Enable error detection on loopback
     */
    detectCauseLoopback?: pulumi.Input<boolean>;
    /**
     * Enable error detection on loop detect
     */
    detectCauseLoopdetect?: pulumi.Input<boolean>;
    detectCauseMlacpMinlink?: pulumi.Input<boolean>;
    /**
     * Enable error detection on pagp-flapping
     */
    detectCausePagpFlap?: pulumi.Input<boolean>;
    /**
     * Enable error detection on PPPoE IA rate-limit
     */
    detectCausePppoeIaRateLimit?: pulumi.Input<boolean>;
    /**
     * Shutdown vlan on 802.1x-guard violation
     */
    detectCauseSecurityViolationShutdownVlan?: pulumi.Input<boolean>;
    /**
     * Enable error detection on SFP config mismatch
     */
    detectCauseSfpConfigMismatch?: pulumi.Input<boolean>;
    /**
     * Enable error detection on small_frame
     */
    detectCauseSmallFrame?: pulumi.Input<boolean>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * maximum flaps allowed before setting to errdisable - Range: `1`-`100`
     */
    flapSettingCauseDtpFlapMaxFlaps?: pulumi.Input<number>;
    /**
     * time period the flaps are counted - Range: `1`-`120`
     */
    flapSettingCauseDtpFlapTime?: pulumi.Input<number>;
    /**
     * maximum flaps allowed before setting to errdisable - Range: `1`-`100`
     */
    flapSettingCauseLinkFlapMaxFlaps?: pulumi.Input<number>;
    /**
     * time period the flaps are counted - Range: `1`-`120`
     */
    flapSettingCauseLinkFlapTime?: pulumi.Input<number>;
    /**
     * maximum flaps allowed before setting to errdisable - Range: `1`-`100`
     */
    flapSettingCausePagpFlapMaxFlaps?: pulumi.Input<number>;
    /**
     * time period the flaps are counted - Range: `1`-`120`
     */
    flapSettingCausePagpFlapTime?: pulumi.Input<number>;
    /**
     * Enable timer to recover from all error causes
     */
    recoveryCauseAll?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from arp inspection error disable state
     */
    recoveryCauseArpInspection?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from BPDU Guard error
     */
    recoveryCauseBpduguard?: pulumi.Input<boolean>;
    /**
     * (STP) Enable timer to recover from channel misconfiguration error
     */
    recoveryCauseChannelMisconfig?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from dhcp-rate-limit error
     */
    recoveryCauseDhcpRateLimit?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from dtp-flap error
     */
    recoveryCauseDtpFlap?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from invalid GBIC error
     */
    recoveryCauseGbicInvalid?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from inline-power error
     */
    recoveryCauseInlinePower?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from l2protocol-tunnel error disable state
     */
    recoveryCauseL2ptguard?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from link-flap error
     */
    recoveryCauseLinkFlap?: pulumi.Input<boolean>;
    recoveryCauseLinkMonitorFailure?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from loopback error
     */
    recoveryCauseLoopback?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from loop detect error
     */
    recoveryCauseLoopdetect?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from mac limit disable state
     */
    recoveryCauseMacLimit?: pulumi.Input<boolean>;
    recoveryCauseMlacpMinlink?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from pagp-flap error
     */
    recoveryCausePagpFlap?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from port mode change failure
     */
    recoveryCausePortModeFailure?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from PPPoE IA rate-limit error
     */
    recoveryCausePppoeIaRateLimit?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from psecure violation error
     */
    recoveryCausePsecureViolation?: pulumi.Input<boolean>;
    recoveryCausePsp?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from 802.1x violation error
     */
    recoveryCauseSecurityViolation?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from SFP config mismatch error
     */
    recoveryCauseSfpConfigMismatch?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from small frame error
     */
    recoveryCauseSmallFrame?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from storm-control error
     */
    recoveryCauseStormControl?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from udld error
     */
    recoveryCauseUdld?: pulumi.Input<boolean>;
    recoveryCauseUnicastFlood?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from vmps shutdown error
     */
    recoveryCauseVmps?: pulumi.Input<boolean>;
    /**
     * Error disable recovery timer value - Range: `30`-`86400`
     */
    recoveryInterval?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Errdisable resource.
 */
export interface ErrdisableArgs {
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * Enable error detection on all cases
     */
    detectCauseAll?: pulumi.Input<boolean>;
    /**
     * Enable error detection for arp inspection
     */
    detectCauseArpInspection?: pulumi.Input<boolean>;
    /**
     * Enable error detection on bpdu-guard
     */
    detectCauseBpduguard?: pulumi.Input<boolean>;
    /**
     * Enable error detection on dhcp-rate-limit
     */
    detectCauseDhcpRateLimit?: pulumi.Input<boolean>;
    /**
     * Enable error detection on dtp-flapping
     */
    detectCauseDtpFlap?: pulumi.Input<boolean>;
    /**
     * Enable error detection on gbic-invalid
     */
    detectCauseGbicInvalid?: pulumi.Input<boolean>;
    /**
     * Enable error detection for inline-power
     */
    detectCauseInlinePower?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from l2protocol-tunnel error disable state
     */
    detectCauseL2ptguard?: pulumi.Input<boolean>;
    /**
     * Enable error detection on linkstate-flapping
     */
    detectCauseLinkFlap?: pulumi.Input<boolean>;
    /**
     * Enable error detection on loopback
     */
    detectCauseLoopback?: pulumi.Input<boolean>;
    /**
     * Enable error detection on loop detect
     */
    detectCauseLoopdetect?: pulumi.Input<boolean>;
    detectCauseMlacpMinlink?: pulumi.Input<boolean>;
    /**
     * Enable error detection on pagp-flapping
     */
    detectCausePagpFlap?: pulumi.Input<boolean>;
    /**
     * Enable error detection on PPPoE IA rate-limit
     */
    detectCausePppoeIaRateLimit?: pulumi.Input<boolean>;
    /**
     * Shutdown vlan on 802.1x-guard violation
     */
    detectCauseSecurityViolationShutdownVlan?: pulumi.Input<boolean>;
    /**
     * Enable error detection on SFP config mismatch
     */
    detectCauseSfpConfigMismatch?: pulumi.Input<boolean>;
    /**
     * Enable error detection on small_frame
     */
    detectCauseSmallFrame?: pulumi.Input<boolean>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * maximum flaps allowed before setting to errdisable - Range: `1`-`100`
     */
    flapSettingCauseDtpFlapMaxFlaps?: pulumi.Input<number>;
    /**
     * time period the flaps are counted - Range: `1`-`120`
     */
    flapSettingCauseDtpFlapTime?: pulumi.Input<number>;
    /**
     * maximum flaps allowed before setting to errdisable - Range: `1`-`100`
     */
    flapSettingCauseLinkFlapMaxFlaps?: pulumi.Input<number>;
    /**
     * time period the flaps are counted - Range: `1`-`120`
     */
    flapSettingCauseLinkFlapTime?: pulumi.Input<number>;
    /**
     * maximum flaps allowed before setting to errdisable - Range: `1`-`100`
     */
    flapSettingCausePagpFlapMaxFlaps?: pulumi.Input<number>;
    /**
     * time period the flaps are counted - Range: `1`-`120`
     */
    flapSettingCausePagpFlapTime?: pulumi.Input<number>;
    /**
     * Enable timer to recover from all error causes
     */
    recoveryCauseAll?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from arp inspection error disable state
     */
    recoveryCauseArpInspection?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from BPDU Guard error
     */
    recoveryCauseBpduguard?: pulumi.Input<boolean>;
    /**
     * (STP) Enable timer to recover from channel misconfiguration error
     */
    recoveryCauseChannelMisconfig?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from dhcp-rate-limit error
     */
    recoveryCauseDhcpRateLimit?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from dtp-flap error
     */
    recoveryCauseDtpFlap?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from invalid GBIC error
     */
    recoveryCauseGbicInvalid?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from inline-power error
     */
    recoveryCauseInlinePower?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from l2protocol-tunnel error disable state
     */
    recoveryCauseL2ptguard?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from link-flap error
     */
    recoveryCauseLinkFlap?: pulumi.Input<boolean>;
    recoveryCauseLinkMonitorFailure?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from loopback error
     */
    recoveryCauseLoopback?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from loop detect error
     */
    recoveryCauseLoopdetect?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from mac limit disable state
     */
    recoveryCauseMacLimit?: pulumi.Input<boolean>;
    recoveryCauseMlacpMinlink?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from pagp-flap error
     */
    recoveryCausePagpFlap?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from port mode change failure
     */
    recoveryCausePortModeFailure?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from PPPoE IA rate-limit error
     */
    recoveryCausePppoeIaRateLimit?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from psecure violation error
     */
    recoveryCausePsecureViolation?: pulumi.Input<boolean>;
    recoveryCausePsp?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from 802.1x violation error
     */
    recoveryCauseSecurityViolation?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from SFP config mismatch error
     */
    recoveryCauseSfpConfigMismatch?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from small frame error
     */
    recoveryCauseSmallFrame?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from storm-control error
     */
    recoveryCauseStormControl?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from udld error
     */
    recoveryCauseUdld?: pulumi.Input<boolean>;
    recoveryCauseUnicastFlood?: pulumi.Input<boolean>;
    /**
     * Enable timer to recover from vmps shutdown error
     */
    recoveryCauseVmps?: pulumi.Input<boolean>;
    /**
     * Error disable recovery timer value - Range: `30`-`86400`
     */
    recoveryInterval?: pulumi.Input<number>;
}
