// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Radius extends pulumi.CustomResource {
    /**
     * Get an existing Radius resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RadiusState, opts?: pulumi.CustomResourceOptions): Radius {
        return new Radius(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'iosxe:index/radius:Radius';

    /**
     * Returns true if the given object is an instance of Radius.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Radius {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Radius.__pulumiType;
    }

    /**
     * UDP port for RADIUS accounting server (default is 1813) - Range: `0`-`65534`
     */
    public readonly accountingPort!: pulumi.Output<number | undefined>;
    /**
     * UDP port for RADIUS authentication server (default is 1812) - Range: `0`-`65534`
     */
    public readonly authenticationPort!: pulumi.Output<number | undefined>;
    /**
     * Do not test accounting ports of the servers.
     */
    public readonly automateTesterIgnoreAcctPort!: pulumi.Output<boolean | undefined>;
    /**
     * Send a packet to verify the server status
     */
    public readonly automateTesterProbeOnConfig!: pulumi.Output<boolean | undefined>;
    public readonly automateTesterUsername!: pulumi.Output<string | undefined>;
    /**
     * A device name from the provider configuration.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * IPv4 address or Hostname for radius server
     */
    public readonly ipv4Address!: pulumi.Output<string | undefined>;
    public readonly key!: pulumi.Output<string | undefined>;
    /**
     * Name for the radius server configuration
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The UNENCRYPTED (cleartext) server key
     */
    public readonly pacKey!: pulumi.Output<string | undefined>;
    /**
     * 0 - Specifies an UNENCRYPTED key will follow 6 - Specifies an ENCRYPTED key will follow 7 - Specifies HIDDEN key will
     * follow - Choices: `0`, `6`, `7`
     */
    public readonly pacKeyEncryption!: pulumi.Output<string | undefined>;
    /**
     * Number of retries to active server (overrides default) - Range: `0`-`100`
     */
    public readonly retransmit!: pulumi.Output<number | undefined>;
    /**
     * Time to wait for a RADIUS server to reply (overrides default) - Range: `1`-`1000`
     */
    public readonly timeout!: pulumi.Output<number | undefined>;

    /**
     * Create a Radius resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RadiusArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RadiusArgs | RadiusState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RadiusState | undefined;
            resourceInputs["accountingPort"] = state ? state.accountingPort : undefined;
            resourceInputs["authenticationPort"] = state ? state.authenticationPort : undefined;
            resourceInputs["automateTesterIgnoreAcctPort"] = state ? state.automateTesterIgnoreAcctPort : undefined;
            resourceInputs["automateTesterProbeOnConfig"] = state ? state.automateTesterProbeOnConfig : undefined;
            resourceInputs["automateTesterUsername"] = state ? state.automateTesterUsername : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["ipv4Address"] = state ? state.ipv4Address : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pacKey"] = state ? state.pacKey : undefined;
            resourceInputs["pacKeyEncryption"] = state ? state.pacKeyEncryption : undefined;
            resourceInputs["retransmit"] = state ? state.retransmit : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
        } else {
            const args = argsOrState as RadiusArgs | undefined;
            resourceInputs["accountingPort"] = args ? args.accountingPort : undefined;
            resourceInputs["authenticationPort"] = args ? args.authenticationPort : undefined;
            resourceInputs["automateTesterIgnoreAcctPort"] = args ? args.automateTesterIgnoreAcctPort : undefined;
            resourceInputs["automateTesterProbeOnConfig"] = args ? args.automateTesterProbeOnConfig : undefined;
            resourceInputs["automateTesterUsername"] = args ? args.automateTesterUsername : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["ipv4Address"] = args ? args.ipv4Address : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pacKey"] = args ? args.pacKey : undefined;
            resourceInputs["pacKeyEncryption"] = args ? args.pacKeyEncryption : undefined;
            resourceInputs["retransmit"] = args ? args.retransmit : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Radius.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Radius resources.
 */
export interface RadiusState {
    /**
     * UDP port for RADIUS accounting server (default is 1813) - Range: `0`-`65534`
     */
    accountingPort?: pulumi.Input<number>;
    /**
     * UDP port for RADIUS authentication server (default is 1812) - Range: `0`-`65534`
     */
    authenticationPort?: pulumi.Input<number>;
    /**
     * Do not test accounting ports of the servers.
     */
    automateTesterIgnoreAcctPort?: pulumi.Input<boolean>;
    /**
     * Send a packet to verify the server status
     */
    automateTesterProbeOnConfig?: pulumi.Input<boolean>;
    automateTesterUsername?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * IPv4 address or Hostname for radius server
     */
    ipv4Address?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    /**
     * Name for the radius server configuration
     */
    name?: pulumi.Input<string>;
    /**
     * The UNENCRYPTED (cleartext) server key
     */
    pacKey?: pulumi.Input<string>;
    /**
     * 0 - Specifies an UNENCRYPTED key will follow 6 - Specifies an ENCRYPTED key will follow 7 - Specifies HIDDEN key will
     * follow - Choices: `0`, `6`, `7`
     */
    pacKeyEncryption?: pulumi.Input<string>;
    /**
     * Number of retries to active server (overrides default) - Range: `0`-`100`
     */
    retransmit?: pulumi.Input<number>;
    /**
     * Time to wait for a RADIUS server to reply (overrides default) - Range: `1`-`1000`
     */
    timeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Radius resource.
 */
export interface RadiusArgs {
    /**
     * UDP port for RADIUS accounting server (default is 1813) - Range: `0`-`65534`
     */
    accountingPort?: pulumi.Input<number>;
    /**
     * UDP port for RADIUS authentication server (default is 1812) - Range: `0`-`65534`
     */
    authenticationPort?: pulumi.Input<number>;
    /**
     * Do not test accounting ports of the servers.
     */
    automateTesterIgnoreAcctPort?: pulumi.Input<boolean>;
    /**
     * Send a packet to verify the server status
     */
    automateTesterProbeOnConfig?: pulumi.Input<boolean>;
    automateTesterUsername?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * IPv4 address or Hostname for radius server
     */
    ipv4Address?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    /**
     * Name for the radius server configuration
     */
    name?: pulumi.Input<string>;
    /**
     * The UNENCRYPTED (cleartext) server key
     */
    pacKey?: pulumi.Input<string>;
    /**
     * 0 - Specifies an UNENCRYPTED key will follow 6 - Specifies an ENCRYPTED key will follow 7 - Specifies HIDDEN key will
     * follow - Choices: `0`, `6`, `7`
     */
    pacKeyEncryption?: pulumi.Input<string>;
    /**
     * Number of retries to active server (overrides default) - Range: `0`-`100`
     */
    retransmit?: pulumi.Input<number>;
    /**
     * Time to wait for a RADIUS server to reply (overrides default) - Range: `1`-`1000`
     */
    timeout?: pulumi.Input<number>;
}
