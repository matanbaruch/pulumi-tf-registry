// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Ntp extends pulumi.CustomResource {
    /**
     * Get an existing Ntp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NtpState, opts?: pulumi.CustomResourceOptions): Ntp {
        return new Ntp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'iosxe:index/ntp:Ntp';

    /**
     * Returns true if the given object is an instance of Ntp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ntp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ntp.__pulumiType;
    }

    public readonly accessGroupPeerAcl!: pulumi.Output<string | undefined>;
    public readonly accessGroupQueryOnlyAcl!: pulumi.Output<string | undefined>;
    public readonly accessGroupServeAcl!: pulumi.Output<string | undefined>;
    public readonly accessGroupServeOnlyAcl!: pulumi.Output<string | undefined>;
    /**
     * Authenticate time sources
     */
    public readonly authenticate!: pulumi.Output<boolean | undefined>;
    /**
     * Authentication key for trusted time sources
     */
    public readonly authenticationKeys!: pulumi.Output<outputs.NtpAuthenticationKey[] | undefined>;
    /**
     * Length of hardware clock tick - Range: `0`-`4294967295`
     */
    public readonly clockPeriod!: pulumi.Output<number | undefined>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    public readonly deleteMode!: pulumi.Output<string | undefined>;
    /**
     * A device name from the provider configuration.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * Enable NTP message logging
     */
    public readonly logging!: pulumi.Output<boolean | undefined>;
    /**
     * Act as NTP master clock
     */
    public readonly master!: pulumi.Output<boolean | undefined>;
    /**
     * - Range: `1`-`15`
     */
    public readonly masterStratum!: pulumi.Output<number | undefined>;
    /**
     * NTP passive mode
     */
    public readonly passive!: pulumi.Output<boolean | undefined>;
    /**
     * VPN Routing/Forwarding Information
     */
    public readonly peerVrfs!: pulumi.Output<outputs.NtpPeerVrf[] | undefined>;
    public readonly peers!: pulumi.Output<outputs.NtpPeer[] | undefined>;
    /**
     * VPN Routing/Forwarding Information
     */
    public readonly serverVrfs!: pulumi.Output<outputs.NtpServerVrf[] | undefined>;
    public readonly servers!: pulumi.Output<outputs.NtpServer[] | undefined>;
    /**
     * Forty GigabitEthernet
     */
    public readonly trapSourceFortyGigabitEthernet!: pulumi.Output<string | undefined>;
    /**
     * GigabitEthernet IEEE 802.3z
     */
    public readonly trapSourceGigabitEthernet!: pulumi.Output<string | undefined>;
    /**
     * Hundred GigabitEthernet
     */
    public readonly trapSourceHundredGigE!: pulumi.Output<string | undefined>;
    /**
     * Loopback interface - Range: `0`-`2147483647`
     */
    public readonly trapSourceLoopback!: pulumi.Output<number | undefined>;
    /**
     * Ethernet Channel of interfaces - Range: `0`-`4294967295`
     */
    public readonly trapSourcePortChannel!: pulumi.Output<number | undefined>;
    public readonly trapSourcePortChannelSubinterface!: pulumi.Output<string | undefined>;
    /**
     * Ten Gigabit Ethernet
     */
    public readonly trapSourceTenGigabitEthernet!: pulumi.Output<string | undefined>;
    /**
     * Iosxr Vlans - Range: `0`-`65535`
     */
    public readonly trapSourceVlan!: pulumi.Output<number | undefined>;
    /**
     * Periodically update calendar with NTP time
     */
    public readonly updateCalendar!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Ntp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NtpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NtpArgs | NtpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NtpState | undefined;
            resourceInputs["accessGroupPeerAcl"] = state ? state.accessGroupPeerAcl : undefined;
            resourceInputs["accessGroupQueryOnlyAcl"] = state ? state.accessGroupQueryOnlyAcl : undefined;
            resourceInputs["accessGroupServeAcl"] = state ? state.accessGroupServeAcl : undefined;
            resourceInputs["accessGroupServeOnlyAcl"] = state ? state.accessGroupServeOnlyAcl : undefined;
            resourceInputs["authenticate"] = state ? state.authenticate : undefined;
            resourceInputs["authenticationKeys"] = state ? state.authenticationKeys : undefined;
            resourceInputs["clockPeriod"] = state ? state.clockPeriod : undefined;
            resourceInputs["deleteMode"] = state ? state.deleteMode : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["logging"] = state ? state.logging : undefined;
            resourceInputs["master"] = state ? state.master : undefined;
            resourceInputs["masterStratum"] = state ? state.masterStratum : undefined;
            resourceInputs["passive"] = state ? state.passive : undefined;
            resourceInputs["peerVrfs"] = state ? state.peerVrfs : undefined;
            resourceInputs["peers"] = state ? state.peers : undefined;
            resourceInputs["serverVrfs"] = state ? state.serverVrfs : undefined;
            resourceInputs["servers"] = state ? state.servers : undefined;
            resourceInputs["trapSourceFortyGigabitEthernet"] = state ? state.trapSourceFortyGigabitEthernet : undefined;
            resourceInputs["trapSourceGigabitEthernet"] = state ? state.trapSourceGigabitEthernet : undefined;
            resourceInputs["trapSourceHundredGigE"] = state ? state.trapSourceHundredGigE : undefined;
            resourceInputs["trapSourceLoopback"] = state ? state.trapSourceLoopback : undefined;
            resourceInputs["trapSourcePortChannel"] = state ? state.trapSourcePortChannel : undefined;
            resourceInputs["trapSourcePortChannelSubinterface"] = state ? state.trapSourcePortChannelSubinterface : undefined;
            resourceInputs["trapSourceTenGigabitEthernet"] = state ? state.trapSourceTenGigabitEthernet : undefined;
            resourceInputs["trapSourceVlan"] = state ? state.trapSourceVlan : undefined;
            resourceInputs["updateCalendar"] = state ? state.updateCalendar : undefined;
        } else {
            const args = argsOrState as NtpArgs | undefined;
            resourceInputs["accessGroupPeerAcl"] = args ? args.accessGroupPeerAcl : undefined;
            resourceInputs["accessGroupQueryOnlyAcl"] = args ? args.accessGroupQueryOnlyAcl : undefined;
            resourceInputs["accessGroupServeAcl"] = args ? args.accessGroupServeAcl : undefined;
            resourceInputs["accessGroupServeOnlyAcl"] = args ? args.accessGroupServeOnlyAcl : undefined;
            resourceInputs["authenticate"] = args ? args.authenticate : undefined;
            resourceInputs["authenticationKeys"] = args ? args.authenticationKeys : undefined;
            resourceInputs["clockPeriod"] = args ? args.clockPeriod : undefined;
            resourceInputs["deleteMode"] = args ? args.deleteMode : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["logging"] = args ? args.logging : undefined;
            resourceInputs["master"] = args ? args.master : undefined;
            resourceInputs["masterStratum"] = args ? args.masterStratum : undefined;
            resourceInputs["passive"] = args ? args.passive : undefined;
            resourceInputs["peerVrfs"] = args ? args.peerVrfs : undefined;
            resourceInputs["peers"] = args ? args.peers : undefined;
            resourceInputs["serverVrfs"] = args ? args.serverVrfs : undefined;
            resourceInputs["servers"] = args ? args.servers : undefined;
            resourceInputs["trapSourceFortyGigabitEthernet"] = args ? args.trapSourceFortyGigabitEthernet : undefined;
            resourceInputs["trapSourceGigabitEthernet"] = args ? args.trapSourceGigabitEthernet : undefined;
            resourceInputs["trapSourceHundredGigE"] = args ? args.trapSourceHundredGigE : undefined;
            resourceInputs["trapSourceLoopback"] = args ? args.trapSourceLoopback : undefined;
            resourceInputs["trapSourcePortChannel"] = args ? args.trapSourcePortChannel : undefined;
            resourceInputs["trapSourcePortChannelSubinterface"] = args ? args.trapSourcePortChannelSubinterface : undefined;
            resourceInputs["trapSourceTenGigabitEthernet"] = args ? args.trapSourceTenGigabitEthernet : undefined;
            resourceInputs["trapSourceVlan"] = args ? args.trapSourceVlan : undefined;
            resourceInputs["updateCalendar"] = args ? args.updateCalendar : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ntp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ntp resources.
 */
export interface NtpState {
    accessGroupPeerAcl?: pulumi.Input<string>;
    accessGroupQueryOnlyAcl?: pulumi.Input<string>;
    accessGroupServeAcl?: pulumi.Input<string>;
    accessGroupServeOnlyAcl?: pulumi.Input<string>;
    /**
     * Authenticate time sources
     */
    authenticate?: pulumi.Input<boolean>;
    /**
     * Authentication key for trusted time sources
     */
    authenticationKeys?: pulumi.Input<pulumi.Input<inputs.NtpAuthenticationKey>[]>;
    /**
     * Length of hardware clock tick - Range: `0`-`4294967295`
     */
    clockPeriod?: pulumi.Input<number>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Enable NTP message logging
     */
    logging?: pulumi.Input<boolean>;
    /**
     * Act as NTP master clock
     */
    master?: pulumi.Input<boolean>;
    /**
     * - Range: `1`-`15`
     */
    masterStratum?: pulumi.Input<number>;
    /**
     * NTP passive mode
     */
    passive?: pulumi.Input<boolean>;
    /**
     * VPN Routing/Forwarding Information
     */
    peerVrfs?: pulumi.Input<pulumi.Input<inputs.NtpPeerVrf>[]>;
    peers?: pulumi.Input<pulumi.Input<inputs.NtpPeer>[]>;
    /**
     * VPN Routing/Forwarding Information
     */
    serverVrfs?: pulumi.Input<pulumi.Input<inputs.NtpServerVrf>[]>;
    servers?: pulumi.Input<pulumi.Input<inputs.NtpServer>[]>;
    /**
     * Forty GigabitEthernet
     */
    trapSourceFortyGigabitEthernet?: pulumi.Input<string>;
    /**
     * GigabitEthernet IEEE 802.3z
     */
    trapSourceGigabitEthernet?: pulumi.Input<string>;
    /**
     * Hundred GigabitEthernet
     */
    trapSourceHundredGigE?: pulumi.Input<string>;
    /**
     * Loopback interface - Range: `0`-`2147483647`
     */
    trapSourceLoopback?: pulumi.Input<number>;
    /**
     * Ethernet Channel of interfaces - Range: `0`-`4294967295`
     */
    trapSourcePortChannel?: pulumi.Input<number>;
    trapSourcePortChannelSubinterface?: pulumi.Input<string>;
    /**
     * Ten Gigabit Ethernet
     */
    trapSourceTenGigabitEthernet?: pulumi.Input<string>;
    /**
     * Iosxr Vlans - Range: `0`-`65535`
     */
    trapSourceVlan?: pulumi.Input<number>;
    /**
     * Periodically update calendar with NTP time
     */
    updateCalendar?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Ntp resource.
 */
export interface NtpArgs {
    accessGroupPeerAcl?: pulumi.Input<string>;
    accessGroupQueryOnlyAcl?: pulumi.Input<string>;
    accessGroupServeAcl?: pulumi.Input<string>;
    accessGroupServeOnlyAcl?: pulumi.Input<string>;
    /**
     * Authenticate time sources
     */
    authenticate?: pulumi.Input<boolean>;
    /**
     * Authentication key for trusted time sources
     */
    authenticationKeys?: pulumi.Input<pulumi.Input<inputs.NtpAuthenticationKey>[]>;
    /**
     * Length of hardware clock tick - Range: `0`-`4294967295`
     */
    clockPeriod?: pulumi.Input<number>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Enable NTP message logging
     */
    logging?: pulumi.Input<boolean>;
    /**
     * Act as NTP master clock
     */
    master?: pulumi.Input<boolean>;
    /**
     * - Range: `1`-`15`
     */
    masterStratum?: pulumi.Input<number>;
    /**
     * NTP passive mode
     */
    passive?: pulumi.Input<boolean>;
    /**
     * VPN Routing/Forwarding Information
     */
    peerVrfs?: pulumi.Input<pulumi.Input<inputs.NtpPeerVrf>[]>;
    peers?: pulumi.Input<pulumi.Input<inputs.NtpPeer>[]>;
    /**
     * VPN Routing/Forwarding Information
     */
    serverVrfs?: pulumi.Input<pulumi.Input<inputs.NtpServerVrf>[]>;
    servers?: pulumi.Input<pulumi.Input<inputs.NtpServer>[]>;
    /**
     * Forty GigabitEthernet
     */
    trapSourceFortyGigabitEthernet?: pulumi.Input<string>;
    /**
     * GigabitEthernet IEEE 802.3z
     */
    trapSourceGigabitEthernet?: pulumi.Input<string>;
    /**
     * Hundred GigabitEthernet
     */
    trapSourceHundredGigE?: pulumi.Input<string>;
    /**
     * Loopback interface - Range: `0`-`2147483647`
     */
    trapSourceLoopback?: pulumi.Input<number>;
    /**
     * Ethernet Channel of interfaces - Range: `0`-`4294967295`
     */
    trapSourcePortChannel?: pulumi.Input<number>;
    trapSourcePortChannelSubinterface?: pulumi.Input<string>;
    /**
     * Ten Gigabit Ethernet
     */
    trapSourceTenGigabitEthernet?: pulumi.Input<string>;
    /**
     * Iosxr Vlans - Range: `0`-`65535`
     */
    trapSourceVlan?: pulumi.Input<number>;
    /**
     * Periodically update calendar with NTP time
     */
    updateCalendar?: pulumi.Input<boolean>;
}
