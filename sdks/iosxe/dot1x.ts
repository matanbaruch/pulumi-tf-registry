// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Dot1x extends pulumi.CustomResource {
    /**
     * Get an existing Dot1x resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Dot1xState, opts?: pulumi.CustomResourceOptions): Dot1x {
        return new Dot1x(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'iosxe:index/dot1x:Dot1x';

    /**
     * Returns true if the given object is an instance of Dot1x.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Dot1x {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dot1x.__pulumiType;
    }

    /**
     * Send EAPOL-Success on successful auth-fail Authorization
     */
    public readonly authFailEapol!: pulumi.Output<boolean | undefined>;
    /**
     * Configure 802.1X credentials profiles
     */
    public readonly credentials!: pulumi.Output<outputs.Dot1xCredential[] | undefined>;
    /**
     * Block all EAPoL transaction on Critical Authentication
     */
    public readonly criticalEapolConfigBlock!: pulumi.Output<boolean | undefined>;
    /**
     * Set 802.1x Critical Authentication Recovery Delay period - Range: `1`-`10000`
     */
    public readonly criticalRecoveryDelay!: pulumi.Output<number | undefined>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    public readonly deleteMode!: pulumi.Output<string | undefined>;
    /**
     * A device name from the provider configuration.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * Show verbose messages in system logs
     */
    public readonly loggingVerbose!: pulumi.Output<boolean | undefined>;
    /**
     * Controlled access is only applied during authentication
     */
    public readonly supplicantControlledTransient!: pulumi.Output<boolean | undefined>;
    /**
     * Force 802.1X supplicant to send multicast packets
     */
    public readonly supplicantForceMulticast!: pulumi.Output<boolean | undefined>;
    /**
     * Enable or Disable SysAuthControl
     */
    public readonly systemAuthControl!: pulumi.Output<boolean | undefined>;
    /**
     * Timeout for device EAPOL capabilities test in seconds - Range: `1`-`65535`
     */
    public readonly testTimeout!: pulumi.Output<number | undefined>;

    /**
     * Create a Dot1x resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: Dot1xArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Dot1xArgs | Dot1xState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Dot1xState | undefined;
            resourceInputs["authFailEapol"] = state ? state.authFailEapol : undefined;
            resourceInputs["credentials"] = state ? state.credentials : undefined;
            resourceInputs["criticalEapolConfigBlock"] = state ? state.criticalEapolConfigBlock : undefined;
            resourceInputs["criticalRecoveryDelay"] = state ? state.criticalRecoveryDelay : undefined;
            resourceInputs["deleteMode"] = state ? state.deleteMode : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["loggingVerbose"] = state ? state.loggingVerbose : undefined;
            resourceInputs["supplicantControlledTransient"] = state ? state.supplicantControlledTransient : undefined;
            resourceInputs["supplicantForceMulticast"] = state ? state.supplicantForceMulticast : undefined;
            resourceInputs["systemAuthControl"] = state ? state.systemAuthControl : undefined;
            resourceInputs["testTimeout"] = state ? state.testTimeout : undefined;
        } else {
            const args = argsOrState as Dot1xArgs | undefined;
            resourceInputs["authFailEapol"] = args ? args.authFailEapol : undefined;
            resourceInputs["credentials"] = args ? args.credentials : undefined;
            resourceInputs["criticalEapolConfigBlock"] = args ? args.criticalEapolConfigBlock : undefined;
            resourceInputs["criticalRecoveryDelay"] = args ? args.criticalRecoveryDelay : undefined;
            resourceInputs["deleteMode"] = args ? args.deleteMode : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["loggingVerbose"] = args ? args.loggingVerbose : undefined;
            resourceInputs["supplicantControlledTransient"] = args ? args.supplicantControlledTransient : undefined;
            resourceInputs["supplicantForceMulticast"] = args ? args.supplicantForceMulticast : undefined;
            resourceInputs["systemAuthControl"] = args ? args.systemAuthControl : undefined;
            resourceInputs["testTimeout"] = args ? args.testTimeout : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Dot1x.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Dot1x resources.
 */
export interface Dot1xState {
    /**
     * Send EAPOL-Success on successful auth-fail Authorization
     */
    authFailEapol?: pulumi.Input<boolean>;
    /**
     * Configure 802.1X credentials profiles
     */
    credentials?: pulumi.Input<pulumi.Input<inputs.Dot1xCredential>[]>;
    /**
     * Block all EAPoL transaction on Critical Authentication
     */
    criticalEapolConfigBlock?: pulumi.Input<boolean>;
    /**
     * Set 802.1x Critical Authentication Recovery Delay period - Range: `1`-`10000`
     */
    criticalRecoveryDelay?: pulumi.Input<number>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Show verbose messages in system logs
     */
    loggingVerbose?: pulumi.Input<boolean>;
    /**
     * Controlled access is only applied during authentication
     */
    supplicantControlledTransient?: pulumi.Input<boolean>;
    /**
     * Force 802.1X supplicant to send multicast packets
     */
    supplicantForceMulticast?: pulumi.Input<boolean>;
    /**
     * Enable or Disable SysAuthControl
     */
    systemAuthControl?: pulumi.Input<boolean>;
    /**
     * Timeout for device EAPOL capabilities test in seconds - Range: `1`-`65535`
     */
    testTimeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Dot1x resource.
 */
export interface Dot1xArgs {
    /**
     * Send EAPOL-Success on successful auth-fail Authorization
     */
    authFailEapol?: pulumi.Input<boolean>;
    /**
     * Configure 802.1X credentials profiles
     */
    credentials?: pulumi.Input<pulumi.Input<inputs.Dot1xCredential>[]>;
    /**
     * Block all EAPoL transaction on Critical Authentication
     */
    criticalEapolConfigBlock?: pulumi.Input<boolean>;
    /**
     * Set 802.1x Critical Authentication Recovery Delay period - Range: `1`-`10000`
     */
    criticalRecoveryDelay?: pulumi.Input<number>;
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Show verbose messages in system logs
     */
    loggingVerbose?: pulumi.Input<boolean>;
    /**
     * Controlled access is only applied during authentication
     */
    supplicantControlledTransient?: pulumi.Input<boolean>;
    /**
     * Force 802.1X supplicant to send multicast packets
     */
    supplicantForceMulticast?: pulumi.Input<boolean>;
    /**
     * Enable or Disable SysAuthControl
     */
    systemAuthControl?: pulumi.Input<boolean>;
    /**
     * Timeout for device EAPOL capabilities test in seconds - Range: `1`-`65535`
     */
    testTimeout?: pulumi.Input<number>;
}
