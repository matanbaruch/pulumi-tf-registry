// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CryptoIkev2Policy extends pulumi.CustomResource {
    /**
     * Get an existing CryptoIkev2Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CryptoIkev2PolicyState, opts?: pulumi.CustomResourceOptions): CryptoIkev2Policy {
        return new CryptoIkev2Policy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'iosxe:index/cryptoIkev2Policy:CryptoIkev2Policy';

    /**
     * Returns true if the given object is an instance of CryptoIkev2Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CryptoIkev2Policy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CryptoIkev2Policy.__pulumiType;
    }

    /**
     * A device name from the provider configuration.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * Local address
     */
    public readonly matchAddressLocalIps!: pulumi.Output<string[] | undefined>;
    public readonly matchFvrf!: pulumi.Output<string | undefined>;
    /**
     * Any fvrf
     */
    public readonly matchFvrfAny!: pulumi.Output<boolean | undefined>;
    /**
     * inbound only for controller
     */
    public readonly matchInboundOnly!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    /**
     * Specify Proposal
     */
    public readonly proposals!: pulumi.Output<outputs.CryptoIkev2PolicyProposal[]>;

    /**
     * Create a CryptoIkev2Policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CryptoIkev2PolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CryptoIkev2PolicyArgs | CryptoIkev2PolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CryptoIkev2PolicyState | undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["matchAddressLocalIps"] = state ? state.matchAddressLocalIps : undefined;
            resourceInputs["matchFvrf"] = state ? state.matchFvrf : undefined;
            resourceInputs["matchFvrfAny"] = state ? state.matchFvrfAny : undefined;
            resourceInputs["matchInboundOnly"] = state ? state.matchInboundOnly : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["proposals"] = state ? state.proposals : undefined;
        } else {
            const args = argsOrState as CryptoIkev2PolicyArgs | undefined;
            if ((!args || args.proposals === undefined) && !opts.urn) {
                throw new Error("Missing required property 'proposals'");
            }
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["matchAddressLocalIps"] = args ? args.matchAddressLocalIps : undefined;
            resourceInputs["matchFvrf"] = args ? args.matchFvrf : undefined;
            resourceInputs["matchFvrfAny"] = args ? args.matchFvrfAny : undefined;
            resourceInputs["matchInboundOnly"] = args ? args.matchInboundOnly : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["proposals"] = args ? args.proposals : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CryptoIkev2Policy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CryptoIkev2Policy resources.
 */
export interface CryptoIkev2PolicyState {
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Local address
     */
    matchAddressLocalIps?: pulumi.Input<pulumi.Input<string>[]>;
    matchFvrf?: pulumi.Input<string>;
    /**
     * Any fvrf
     */
    matchFvrfAny?: pulumi.Input<boolean>;
    /**
     * inbound only for controller
     */
    matchInboundOnly?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    /**
     * Specify Proposal
     */
    proposals?: pulumi.Input<pulumi.Input<inputs.CryptoIkev2PolicyProposal>[]>;
}

/**
 * The set of arguments for constructing a CryptoIkev2Policy resource.
 */
export interface CryptoIkev2PolicyArgs {
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Local address
     */
    matchAddressLocalIps?: pulumi.Input<pulumi.Input<string>[]>;
    matchFvrf?: pulumi.Input<string>;
    /**
     * Any fvrf
     */
    matchFvrfAny?: pulumi.Input<boolean>;
    /**
     * inbound only for controller
     */
    matchInboundOnly?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    /**
     * Specify Proposal
     */
    proposals: pulumi.Input<pulumi.Input<inputs.CryptoIkev2PolicyProposal>[]>;
}
