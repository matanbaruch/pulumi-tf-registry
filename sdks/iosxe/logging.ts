// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Logging extends pulumi.CustomResource {
    /**
     * Get an existing Logging resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoggingState, opts?: pulumi.CustomResourceOptions): Logging {
        return new Logging(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'iosxe:index/logging:Logging';

    /**
     * Returns true if the given object is an instance of Logging.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Logging {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Logging.__pulumiType;
    }

    /**
     * Logging severity level
     */
    public readonly bufferedSeverity!: pulumi.Output<string | undefined>;
    /**
     * Logging buffer size - Range: `4096`-`2147483647`
     */
    public readonly bufferedSize!: pulumi.Output<number | undefined>;
    public readonly consoleSeverity!: pulumi.Output<string | undefined>;
    /**
     * A device name from the provider configuration.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * Facility parameter for syslog messages - Choices: `auth`, `cron`, `daemon`, `kern`, `local0`, `local1`, `local2`,
     * `local3`, `local4`, `local5`, `local6`, `local7`, `lpr`, `mail`, `news`, `sys10`, `sys11`, `sys12`, `sys13`, `sys14`,
     * `sys9`, `syslog`, `user`, `uucp`
     */
    public readonly facility!: pulumi.Output<string | undefined>;
    /**
     * - Range: `0`-`4294967295`
     */
    public readonly fileMaxSize!: pulumi.Output<number | undefined>;
    /**
     * - Range: `0`-`4294967295`
     */
    public readonly fileMinSize!: pulumi.Output<number | undefined>;
    public readonly fileName!: pulumi.Output<string | undefined>;
    public readonly fileSeverity!: pulumi.Output<string | undefined>;
    public readonly historySeverity!: pulumi.Output<string | undefined>;
    /**
     * Set history table size - Range: `0`-`65535`
     */
    public readonly historySize!: pulumi.Output<number | undefined>;
    public readonly ipv4Hosts!: pulumi.Output<outputs.LoggingIpv4Host[] | undefined>;
    public readonly ipv4VrfHosts!: pulumi.Output<outputs.LoggingIpv4VrfHost[] | undefined>;
    public readonly ipv6Hosts!: pulumi.Output<outputs.LoggingIpv6Host[] | undefined>;
    public readonly ipv6VrfHosts!: pulumi.Output<outputs.LoggingIpv6VrfHost[] | undefined>;
    public readonly monitorSeverity!: pulumi.Output<string | undefined>;
    /**
     * Define a unique text string as ID
     */
    public readonly originIdName!: pulumi.Output<string | undefined>;
    /**
     * Use origin hostname/ip/ipv6 as ID - Choices: `hostname`, `ip`, `ipv6`
     */
    public readonly originIdType!: pulumi.Output<string | undefined>;
    public readonly sourceInterface!: pulumi.Output<string | undefined>;
    /**
     * Specify interface and vrf for source address in logging transactions
     */
    public readonly sourceInterfacesVrves!: pulumi.Output<outputs.LoggingSourceInterfacesVrf[] | undefined>;
    /**
     * Set trap server logging level
     */
    public readonly trap!: pulumi.Output<boolean | undefined>;
    public readonly trapSeverity!: pulumi.Output<string | undefined>;

    /**
     * Create a Logging resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LoggingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoggingArgs | LoggingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoggingState | undefined;
            resourceInputs["bufferedSeverity"] = state ? state.bufferedSeverity : undefined;
            resourceInputs["bufferedSize"] = state ? state.bufferedSize : undefined;
            resourceInputs["consoleSeverity"] = state ? state.consoleSeverity : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["facility"] = state ? state.facility : undefined;
            resourceInputs["fileMaxSize"] = state ? state.fileMaxSize : undefined;
            resourceInputs["fileMinSize"] = state ? state.fileMinSize : undefined;
            resourceInputs["fileName"] = state ? state.fileName : undefined;
            resourceInputs["fileSeverity"] = state ? state.fileSeverity : undefined;
            resourceInputs["historySeverity"] = state ? state.historySeverity : undefined;
            resourceInputs["historySize"] = state ? state.historySize : undefined;
            resourceInputs["ipv4Hosts"] = state ? state.ipv4Hosts : undefined;
            resourceInputs["ipv4VrfHosts"] = state ? state.ipv4VrfHosts : undefined;
            resourceInputs["ipv6Hosts"] = state ? state.ipv6Hosts : undefined;
            resourceInputs["ipv6VrfHosts"] = state ? state.ipv6VrfHosts : undefined;
            resourceInputs["monitorSeverity"] = state ? state.monitorSeverity : undefined;
            resourceInputs["originIdName"] = state ? state.originIdName : undefined;
            resourceInputs["originIdType"] = state ? state.originIdType : undefined;
            resourceInputs["sourceInterface"] = state ? state.sourceInterface : undefined;
            resourceInputs["sourceInterfacesVrves"] = state ? state.sourceInterfacesVrves : undefined;
            resourceInputs["trap"] = state ? state.trap : undefined;
            resourceInputs["trapSeverity"] = state ? state.trapSeverity : undefined;
        } else {
            const args = argsOrState as LoggingArgs | undefined;
            resourceInputs["bufferedSeverity"] = args ? args.bufferedSeverity : undefined;
            resourceInputs["bufferedSize"] = args ? args.bufferedSize : undefined;
            resourceInputs["consoleSeverity"] = args ? args.consoleSeverity : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["facility"] = args ? args.facility : undefined;
            resourceInputs["fileMaxSize"] = args ? args.fileMaxSize : undefined;
            resourceInputs["fileMinSize"] = args ? args.fileMinSize : undefined;
            resourceInputs["fileName"] = args ? args.fileName : undefined;
            resourceInputs["fileSeverity"] = args ? args.fileSeverity : undefined;
            resourceInputs["historySeverity"] = args ? args.historySeverity : undefined;
            resourceInputs["historySize"] = args ? args.historySize : undefined;
            resourceInputs["ipv4Hosts"] = args ? args.ipv4Hosts : undefined;
            resourceInputs["ipv4VrfHosts"] = args ? args.ipv4VrfHosts : undefined;
            resourceInputs["ipv6Hosts"] = args ? args.ipv6Hosts : undefined;
            resourceInputs["ipv6VrfHosts"] = args ? args.ipv6VrfHosts : undefined;
            resourceInputs["monitorSeverity"] = args ? args.monitorSeverity : undefined;
            resourceInputs["originIdName"] = args ? args.originIdName : undefined;
            resourceInputs["originIdType"] = args ? args.originIdType : undefined;
            resourceInputs["sourceInterface"] = args ? args.sourceInterface : undefined;
            resourceInputs["sourceInterfacesVrves"] = args ? args.sourceInterfacesVrves : undefined;
            resourceInputs["trap"] = args ? args.trap : undefined;
            resourceInputs["trapSeverity"] = args ? args.trapSeverity : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Logging.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Logging resources.
 */
export interface LoggingState {
    /**
     * Logging severity level
     */
    bufferedSeverity?: pulumi.Input<string>;
    /**
     * Logging buffer size - Range: `4096`-`2147483647`
     */
    bufferedSize?: pulumi.Input<number>;
    consoleSeverity?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Facility parameter for syslog messages - Choices: `auth`, `cron`, `daemon`, `kern`, `local0`, `local1`, `local2`,
     * `local3`, `local4`, `local5`, `local6`, `local7`, `lpr`, `mail`, `news`, `sys10`, `sys11`, `sys12`, `sys13`, `sys14`,
     * `sys9`, `syslog`, `user`, `uucp`
     */
    facility?: pulumi.Input<string>;
    /**
     * - Range: `0`-`4294967295`
     */
    fileMaxSize?: pulumi.Input<number>;
    /**
     * - Range: `0`-`4294967295`
     */
    fileMinSize?: pulumi.Input<number>;
    fileName?: pulumi.Input<string>;
    fileSeverity?: pulumi.Input<string>;
    historySeverity?: pulumi.Input<string>;
    /**
     * Set history table size - Range: `0`-`65535`
     */
    historySize?: pulumi.Input<number>;
    ipv4Hosts?: pulumi.Input<pulumi.Input<inputs.LoggingIpv4Host>[]>;
    ipv4VrfHosts?: pulumi.Input<pulumi.Input<inputs.LoggingIpv4VrfHost>[]>;
    ipv6Hosts?: pulumi.Input<pulumi.Input<inputs.LoggingIpv6Host>[]>;
    ipv6VrfHosts?: pulumi.Input<pulumi.Input<inputs.LoggingIpv6VrfHost>[]>;
    monitorSeverity?: pulumi.Input<string>;
    /**
     * Define a unique text string as ID
     */
    originIdName?: pulumi.Input<string>;
    /**
     * Use origin hostname/ip/ipv6 as ID - Choices: `hostname`, `ip`, `ipv6`
     */
    originIdType?: pulumi.Input<string>;
    sourceInterface?: pulumi.Input<string>;
    /**
     * Specify interface and vrf for source address in logging transactions
     */
    sourceInterfacesVrves?: pulumi.Input<pulumi.Input<inputs.LoggingSourceInterfacesVrf>[]>;
    /**
     * Set trap server logging level
     */
    trap?: pulumi.Input<boolean>;
    trapSeverity?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Logging resource.
 */
export interface LoggingArgs {
    /**
     * Logging severity level
     */
    bufferedSeverity?: pulumi.Input<string>;
    /**
     * Logging buffer size - Range: `4096`-`2147483647`
     */
    bufferedSize?: pulumi.Input<number>;
    consoleSeverity?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Facility parameter for syslog messages - Choices: `auth`, `cron`, `daemon`, `kern`, `local0`, `local1`, `local2`,
     * `local3`, `local4`, `local5`, `local6`, `local7`, `lpr`, `mail`, `news`, `sys10`, `sys11`, `sys12`, `sys13`, `sys14`,
     * `sys9`, `syslog`, `user`, `uucp`
     */
    facility?: pulumi.Input<string>;
    /**
     * - Range: `0`-`4294967295`
     */
    fileMaxSize?: pulumi.Input<number>;
    /**
     * - Range: `0`-`4294967295`
     */
    fileMinSize?: pulumi.Input<number>;
    fileName?: pulumi.Input<string>;
    fileSeverity?: pulumi.Input<string>;
    historySeverity?: pulumi.Input<string>;
    /**
     * Set history table size - Range: `0`-`65535`
     */
    historySize?: pulumi.Input<number>;
    ipv4Hosts?: pulumi.Input<pulumi.Input<inputs.LoggingIpv4Host>[]>;
    ipv4VrfHosts?: pulumi.Input<pulumi.Input<inputs.LoggingIpv4VrfHost>[]>;
    ipv6Hosts?: pulumi.Input<pulumi.Input<inputs.LoggingIpv6Host>[]>;
    ipv6VrfHosts?: pulumi.Input<pulumi.Input<inputs.LoggingIpv6VrfHost>[]>;
    monitorSeverity?: pulumi.Input<string>;
    /**
     * Define a unique text string as ID
     */
    originIdName?: pulumi.Input<string>;
    /**
     * Use origin hostname/ip/ipv6 as ID - Choices: `hostname`, `ip`, `ipv6`
     */
    originIdType?: pulumi.Input<string>;
    sourceInterface?: pulumi.Input<string>;
    /**
     * Specify interface and vrf for source address in logging transactions
     */
    sourceInterfacesVrves?: pulumi.Input<pulumi.Input<inputs.LoggingSourceInterfacesVrf>[]>;
    /**
     * Set trap server logging level
     */
    trap?: pulumi.Input<boolean>;
    trapSeverity?: pulumi.Input<string>;
}
