// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getOspfVrf(args: GetOspfVrfArgs, opts?: pulumi.InvokeOptions): Promise<GetOspfVrfResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("iosxe:index/getOspfVrf:getOspfVrf", {
        "device": args.device,
        "processId": args.processId,
        "vrf": args.vrf,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getOspfVrf.
 */
export interface GetOspfVrfArgs {
    device?: string;
    processId: number;
    vrf: string;
}

/**
 * A collection of values returned by getOspfVrf.
 */
export interface GetOspfVrfResult {
    readonly areas: outputs.GetOspfVrfArea[];
    readonly bfdAllInterfaces: boolean;
    readonly defaultInformationOriginate: boolean;
    readonly defaultInformationOriginateAlways: boolean;
    readonly defaultMetric: number;
    readonly device?: string;
    readonly distance: number;
    readonly domainTag: number;
    readonly id: string;
    readonly mplsLdpAutoconfig: boolean;
    readonly mplsLdpSync: boolean;
    readonly neighbors: outputs.GetOspfVrfNeighbor[];
    readonly networks: outputs.GetOspfVrfNetwork[];
    readonly passiveInterfaceDefault: boolean;
    readonly priority: number;
    readonly processId: number;
    readonly routerId: string;
    readonly shutdown: boolean;
    readonly summaryAddresses: outputs.GetOspfVrfSummaryAddress[];
    readonly vrf: string;
}
export function getOspfVrfOutput(args: GetOspfVrfOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetOspfVrfResult> {
    return pulumi.output(args).apply((a: any) => getOspfVrf(a, opts))
}

/**
 * A collection of arguments for invoking getOspfVrf.
 */
export interface GetOspfVrfOutputArgs {
    device?: pulumi.Input<string>;
    processId: pulumi.Input<number>;
    vrf: pulumi.Input<string>;
}
