// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getTemplate(args: GetTemplateArgs, opts?: pulumi.InvokeOptions): Promise<GetTemplateResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("iosxe:index/getTemplate:getTemplate", {
        "device": args.device,
        "templateName": args.templateName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getTemplate.
 */
export interface GetTemplateArgs {
    device?: string;
    templateName: string;
}

/**
 * A collection of values returned by getTemplate.
 */
export interface GetTemplateResult {
    readonly accessSessionClosed: boolean;
    readonly accessSessionControlDirection: string;
    readonly accessSessionHostMode: string;
    readonly accessSessionInterfaceTemplateSticky: boolean;
    readonly accessSessionInterfaceTemplateStickyTimer: number;
    readonly accessSessionMonitor: boolean;
    readonly accessSessionPortControl: string;
    readonly authenticationPeriodic: boolean;
    readonly authenticationTimerReauthenticateRange: number;
    readonly authenticationTimerReauthenticateServer: boolean;
    readonly ctsManual: boolean;
    readonly ctsManualPolicyStaticSgt: number;
    readonly ctsManualPolicyStaticTrusted: boolean;
    readonly ctsManualPropagateSgt: boolean;
    readonly ctsRoleBasedEnforcement: boolean;
    readonly device?: string;
    readonly deviceTracking: boolean;
    readonly deviceTrackingAttachPolicies: outputs.GetTemplateDeviceTrackingAttachPolicy[];
    readonly deviceTrackingVlanRange: string;
    readonly dot1xMaxReauthReq: number;
    readonly dot1xMaxReq: number;
    readonly dot1xPae: string;
    readonly dot1xTimeoutTxPeriod: number;
    readonly id: string;
    readonly ipAccessGroups: outputs.GetTemplateIpAccessGroup[];
    readonly ipDhcpSnoopingLimitRate: number;
    readonly ipDhcpSnoopingTrust: boolean;
    readonly loadInterval: number;
    readonly mab: boolean;
    readonly mabEap: boolean;
    readonly servicePolicyInput: string;
    readonly servicePolicyOutput: string;
    readonly servicePolicyTypeControlSubscriber: string;
    readonly sourceTemplate: string;
    readonly spanningTreeBpduguardEnable: boolean;
    readonly spanningTreePortfast: boolean;
    readonly spanningTreePortfastDisable: boolean;
    readonly spanningTreePortfastEdge: boolean;
    readonly spanningTreePortfastNetwork: boolean;
    readonly spanningTreeServicePolicy: boolean;
    readonly stormControlActionShutdown: boolean;
    readonly stormControlActionTrap: boolean;
    readonly stormControlBroadcastLevelBpsThreshold: number;
    readonly stormControlBroadcastLevelPpsThreshold: string;
    readonly stormControlBroadcastLevelThreshold: number;
    readonly stormControlMulticastLevelBpsThreshold: number;
    readonly stormControlMulticastLevelPpsThreshold: string;
    readonly stormControlMulticastLevelThreshold: number;
    readonly subscriberAgingInactivityTimerProbe: boolean;
    readonly subscriberAgingInactivityTimerValue: number;
    readonly subscriberAgingProbe: boolean;
    readonly switchportAccessVlan: number;
    readonly switchportBlockUnicast: boolean;
    readonly switchportModeAccess: boolean;
    readonly switchportModeTrunk: boolean;
    readonly switchportNonegotiate: boolean;
    readonly switchportPortSecurity: boolean;
    readonly switchportPortSecurityAgingStatic: boolean;
    readonly switchportPortSecurityAgingTime: number;
    readonly switchportPortSecurityAgingType: boolean;
    readonly switchportPortSecurityAgingTypeInactivity: boolean;
    readonly switchportPortSecurityMaximumRanges: outputs.GetTemplateSwitchportPortSecurityMaximumRange[];
    readonly switchportPortSecurityViolationProtect: boolean;
    readonly switchportPortSecurityViolationRestrict: boolean;
    readonly switchportPortSecurityViolationShutdown: boolean;
    readonly switchportPrivateVlanHostAssociationPrimaryRange: number;
    readonly switchportPrivateVlanHostAssociationSecondaryRange: number;
    readonly switchportTrunkAllowedVlans: string;
    readonly switchportTrunkAllowedVlansAll: boolean;
    readonly switchportTrunkAllowedVlansNone: boolean;
    readonly switchportTrunkNativeVlanTag: boolean;
    readonly switchportTrunkNativeVlanVlanId: number;
    readonly switchportVoiceVlan: number;
    readonly templateName: string;
}
export function getTemplateOutput(args: GetTemplateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTemplateResult> {
    return pulumi.output(args).apply((a: any) => getTemplate(a, opts))
}

/**
 * A collection of arguments for invoking getTemplate.
 */
export interface GetTemplateOutputArgs {
    device?: pulumi.Input<string>;
    templateName: pulumi.Input<string>;
}
