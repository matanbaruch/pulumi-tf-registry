// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AaaAccountingExec {
    name: string;
    /**
     * Use Server-group
     */
    startStopGroup1?: string;
}

export interface AaaAccountingIdentity {
    name: string;
    /**
     * Use Broadcast for Accounting
     */
    startStopBroadcast?: boolean;
    /**
     * Use Server-group
     */
    startStopGroup1?: string;
    /**
     * Use Server-group
     */
    startStopGroup2?: string;
    /**
     * Use Server-group
     */
    startStopGroup3?: string;
    /**
     * Use Server-group
     */
    startStopGroup4?: string;
    /**
     * Use Broadcast for Accounting
     */
    startStopGroupBroadcast?: boolean;
    /**
     * Use system logger for Accounting
     */
    startStopGroupLogger?: boolean;
}

export interface AaaAccountingNetwork {
    id: string;
    /**
     * Use Server-group
     */
    startStopGroup1?: string;
    /**
     * Use Server-group
     */
    startStopGroup2?: string;
}

export interface AaaAuthenticationDot1x {
    /**
     * Use Cached-group
     */
    a1Cache?: string;
    /**
     * Use Server-group
     */
    a1Group?: string;
    /**
     * Use local username authentication
     */
    a1Local?: boolean;
    /**
     * Use list of all Radius hosts
     */
    a1Radius?: boolean;
    /**
     * Use Cached-group
     */
    a2Cache?: string;
    /**
     * Use Server-group
     */
    a2Group?: string;
    /**
     * Use local username authentication
     */
    a2Local?: boolean;
    /**
     * Use list of all Radius hosts
     */
    a2Radius?: boolean;
    /**
     * Use Cached-group
     */
    a3Cache?: string;
    /**
     * Use Server-group
     */
    a3Group?: string;
    /**
     * Use local username authentication
     */
    a3Local?: boolean;
    /**
     * Use list of all Radius hosts
     */
    a3Radius?: boolean;
    /**
     * Use Cached-group
     */
    a4Cache?: string;
    /**
     * Use Server-group
     */
    a4Group?: string;
    /**
     * Use local username authentication
     */
    a4Local?: boolean;
    /**
     * Use list of all Radius hosts
     */
    a4Radius?: boolean;
    /**
     * Named authentication method list for dot1x service.
     */
    name: string;
}

export interface AaaAuthenticationLogin {
    /**
     * Use enable password for authentication.
     */
    a1Enable?: boolean;
    /**
     * Use Server-group
     */
    a1Group?: string;
    /**
     * Use line password for authentication.
     */
    a1Line?: boolean;
    /**
     * Use local username authentication.
     */
    a1Local?: boolean;
    /**
     * NO authentication.
     */
    a1None?: boolean;
    /**
     * Use enable password for authentication.
     */
    a2Enable?: boolean;
    /**
     * Use Server-group
     */
    a2Group?: string;
    /**
     * Use line password for authentication.
     */
    a2Line?: boolean;
    a2Local?: boolean;
    /**
     * NO authentication.
     */
    a2None?: boolean;
    /**
     * Use enable password for authentication.
     */
    a3Enable?: boolean;
    /**
     * Use Server-group
     */
    a3Group?: string;
    /**
     * Use line password for authentication.
     */
    a3Line?: boolean;
    a3Local?: boolean;
    /**
     * NO authentication.
     */
    a3None?: boolean;
    /**
     * Use enable password for authentication.
     */
    a4Enable?: boolean;
    /**
     * Use Server-group
     */
    a4Group?: string;
    /**
     * Use line password for authentication.
     */
    a4Line?: boolean;
    a4Local?: boolean;
    /**
     * NO authentication.
     */
    a4None?: boolean;
    name: string;
}

export interface AaaAuthorizationExec {
    /**
     * Use Server-group
     */
    a1Group?: string;
    /**
     * Succeed if user has authenticated.
     */
    a1IfAuthenticated?: boolean;
    /**
     * Use local database
     */
    a1Local?: boolean;
    /**
     * Use radius
     */
    a1Radius?: boolean;
    /**
     * Use TACACS+
     */
    a1Tacacs?: boolean;
    /**
     * Use Server-group
     */
    a2Group?: string;
    /**
     * Succeed if user has authenticated.
     */
    a2IfAuthenticated?: boolean;
    a2Local?: boolean;
    /**
     * Use Radius
     */
    a2Radius?: boolean;
    /**
     * Use TACACS+
     */
    a2Tacacs?: boolean;
    /**
     * Use Server-group
     */
    a3Group?: string;
    /**
     * Succeed if user has authenticated.
     */
    a3IfAuthenticated?: boolean;
    a3Local?: boolean;
    /**
     * Use Radius
     */
    a3Radius?: boolean;
    /**
     * Use TACACS+
     */
    a3Tacacs?: boolean;
    /**
     * Use Server-group
     */
    a4Group?: string;
    /**
     * Succeed if user has authenticated.
     */
    a4IfAuthenticated?: boolean;
    a4Local?: boolean;
    /**
     * Use radius
     */
    a4Radius?: boolean;
    /**
     * Use TACACS+
     */
    a4Tacacs?: boolean;
    name: string;
}

export interface AaaAuthorizationNetwork {
    /**
     * Use Server-group
     */
    a1Group?: string;
    /**
     * Use local username authentication.
     */
    a1Local?: boolean;
    /**
     * Use Server-group
     */
    a2Group?: string;
    a2Local?: boolean;
    /**
     * Use Server-group
     */
    a3Group?: string;
    a3Local?: boolean;
    /**
     * Use Server-group
     */
    a4Group?: string;
    a4Local?: boolean;
    id: string;
}

export interface AaaGroupServerRadius {
    /**
     * Five GigabitEthernet
     */
    ipRadiusSourceInterfaceFiveGigabitEthernet?: string;
    /**
     * Forty GigabitEthernet
     */
    ipRadiusSourceInterfaceFortyGigabitEthernet?: string;
    /**
     * GigabitEthernet IEEE 802.3z
     */
    ipRadiusSourceInterfaceGigabitEthernet?: string;
    /**
     * Hundred GigabitEthernet
     */
    ipRadiusSourceInterfaceHundredGigabitEthernet?: string;
    /**
     * Loopback interface
     *   - Range: `0`-`2147483647`
     */
    ipRadiusSourceInterfaceLoopback?: number;
    /**
     * Ten Gigabit Ethernet
     */
    ipRadiusSourceInterfaceTenGigabitEthernet?: string;
    /**
     * Twenty Five GigabitEthernet
     */
    ipRadiusSourceInterfaceTwentyFiveGigabitEthernet?: string;
    /**
     * Two GigabitEthernet
     */
    ipRadiusSourceInterfaceTwoGigabitEthernet?: string;
    /**
     * Iosxr Vlans
     *   - Range: `0`-`65535`
     */
    ipRadiusSourceInterfaceVlan?: number;
    /**
     * Radius Server-group name with max string length 32
     */
    name: string;
    /**
     * Name of radius server
     */
    serverNames?: outputs.AaaGroupServerRadiusServerName[];
}

export interface AaaGroupServerRadiusServerName {
    /**
     * Radius server name
     */
    name: string;
}

export interface AaaGroupServerTacacsplus {
    /**
     * Five GigabitEthernet
     */
    ipTacacsSourceInterfaceFiveGigabitEthernet?: string;
    /**
     * Forty GigabitEthernet
     */
    ipTacacsSourceInterfaceFortyGigabitEthernet?: string;
    /**
     * GigabitEthernet IEEE 802.3z
     */
    ipTacacsSourceInterfaceGigabitEthernet?: string;
    /**
     * Hundred GigabitEthernet
     */
    ipTacacsSourceInterfaceHundredGigabitEthernet?: string;
    /**
     * Loopback interface
     *   - Range: `0`-`2147483647`
     */
    ipTacacsSourceInterfaceLoopback?: number;
    /**
     * Ten Gigabit Ethernet
     */
    ipTacacsSourceInterfaceTenGigabitEthernet?: string;
    /**
     * Twenty Five GigabitEthernet
     */
    ipTacacsSourceInterfaceTwentyFiveGigabitEthernet?: string;
    /**
     * Two GigabitEthernet
     */
    ipTacacsSourceInterfaceTwoGigabitEthernet?: string;
    /**
     * Iosxr Vlans
     *   - Range: `0`-`65535`
     */
    ipTacacsSourceInterfaceVlan?: number;
    /**
     * Server-group name with max string length 32
     */
    name: string;
    /**
     * Name of tacacs server
     */
    serverNames?: outputs.AaaGroupServerTacacsplusServerName[];
}

export interface AaaGroupServerTacacsplusServerName {
    name: string;
}

export interface AaaServerRadiusDynamicAuthorClient {
    ip: string;
    serverKey?: string;
    /**
     * - Choices: `0`, `6`, `7`
     */
    serverKeyType?: string;
}

export interface AccessListExtendedEntry {
    /**
     * - Choices: `deny`, `permit`
     */
    aceRuleAction?: string;
    aceRuleProtocol?: string;
    /**
     * Match on the ACK bit
     */
    ack?: boolean;
    /**
     * Any destination host
     */
    destinationAny?: boolean;
    /**
     * A single destination host
     */
    destinationHost?: string;
    /**
     * Destination network object group
     */
    destinationObjectGroup?: string;
    /**
     * Match only packets on a given port number up to 10 ports
     */
    destinationPortEqual?: string;
    /**
     * Match only packets with a greater port number
     */
    destinationPortGreaterThan?: string;
    /**
     * Match only packets with a lower port number
     */
    destinationPortLesserThan?: string;
    /**
     * Match only packets in the range of port numbers
     */
    destinationPortRangeFrom?: string;
    /**
     * Match only packets in the range of port numbers
     */
    destinationPortRangeTo?: string;
    destinationPrefix?: string;
    destinationPrefixMask?: string;
    /**
     * Match packets with given dscp value
     */
    dscp?: string;
    /**
     * Match established connections
     */
    established?: boolean;
    /**
     * Match on the FIN bit
     */
    fin?: boolean;
    /**
     * Check non-initial fragments
     */
    fragments?: boolean;
    /**
     * Log matches against this entry
     */
    log?: boolean;
    /**
     * Log matches against this entry, including input interface
     */
    logInput?: boolean;
    /**
     * Match packets with given precedence value
     */
    precedence?: string;
    /**
     * Match on the PSH bit
     */
    psh?: boolean;
    /**
     * Access list entry comment
     */
    remark?: string;
    /**
     * Match on the RST bit
     */
    rst?: boolean;
    /**
     * - Range: `1`-`2147483647`
     */
    sequence: number;
    /**
     * Service object group name
     */
    serviceObjectGroup?: string;
    /**
     * Any source host
     */
    sourceAny?: boolean;
    /**
     * A single source host
     */
    sourceHost?: string;
    /**
     * Source network object group
     */
    sourceObjectGroup?: string;
    /**
     * Match only packets on a given port number up to 10 ports
     */
    sourcePortEqual?: string;
    /**
     * Match only packets with a greater port number
     */
    sourcePortGreaterThan?: string;
    /**
     * Match only packets with a lower port number
     */
    sourcePortLesserThan?: string;
    /**
     * Match only packets in the range of port numbers
     */
    sourcePortRangeFrom?: string;
    /**
     * Match only packets in the range of port numbers
     */
    sourcePortRangeTo?: string;
    sourcePrefix?: string;
    sourcePrefixMask?: string;
    /**
     * Match on the SYN bit
     */
    syn?: boolean;
    /**
     * Match packets with given TOS value
     */
    tos?: string;
    /**
     * Match on the URG bit
     */
    urg?: boolean;
}

export interface AccessListStandardEntry {
    /**
     * Any source prefix
     */
    denyAny?: boolean;
    /**
     * A single source host
     */
    denyHost?: string;
    /**
     * Log matches against this entry
     */
    denyLog?: boolean;
    /**
     * Network address prefix
     */
    denyPrefix?: string;
    /**
     * Wildcard bits
     */
    denyPrefixMask?: string;
    /**
     * Any source prefix
     */
    permitAny?: boolean;
    /**
     * A single source host
     */
    permitHost?: string;
    /**
     * Log matches against this entry
     */
    permitLog?: boolean;
    /**
     * Network address prefix
     */
    permitPrefix?: string;
    /**
     * Wildcard bits
     */
    permitPrefixMask?: string;
    /**
     * Access list entry comment
     */
    remark?: string;
    /**
     * - Range: `1`-`2147483647`
     */
    sequence: number;
}

export interface ArpInspectionFilter {
    name: string;
    /**
     * Vlans to apply the filter
     */
    vlans?: outputs.ArpInspectionFilterVlan[];
}

export interface ArpInspectionFilterVlan {
    /**
     * Apply the ACL statically
     */
    static?: boolean;
    vlanRange: string;
}

export interface AsPathAccessListEntry {
    /**
     * - Choices: `deny`, `permit`
     */
    action: string;
    regex: string;
}

export interface BfdIpv4BothVrf {
    /**
     * Destination IP prefix/len
     */
    destIp: string;
    /**
     * Destination VRF instance name
     */
    dstVrf: string;
    /**
     * Source IP prefix/len
     */
    srcIp: string;
    /**
     * source VRF instance name
     */
    srcVrf: string;
    /**
     * BFD template name
     */
    templateName: string;
}

export interface BfdIpv4WithDstVrf {
    /**
     * Destination IP prefix/len
     */
    destIp: string;
    /**
     * Destination VRF instance name
     */
    dstVrf: string;
    /**
     * Source IP prefix/len
     */
    srcIp: string;
    /**
     * BFD template name
     */
    templateName: string;
}

export interface BfdIpv4WithSrcVrf {
    /**
     * Destination IP prefix/len
     */
    destIp: string;
    /**
     * Source IP prefix/len
     */
    srcIp: string;
    /**
     * source VRF instance name
     */
    srcVrf: string;
    /**
     * BFD template name
     */
    templateName: string;
}

export interface BfdIpv4WithoutVrf {
    /**
     * Destination IP prefix/len
     */
    destIp: string;
    /**
     * Source IP prefix/len
     */
    srcIp: string;
    /**
     * BFD template name
     */
    templateName: string;
}

export interface BfdIpv6WithBothVrf {
    /**
     * Destination IPv6 prefix/len
     */
    destIpv6: string;
    /**
     * Destination VRF instance name
     */
    dstVrf: string;
    /**
     * Source IPv6 prefix/len
     */
    srcIpv6: string;
    /**
     * source VRF instance name
     */
    srcVrf: string;
    /**
     * BFD template name
     */
    templateName: string;
}

export interface BfdIpv6WithDstVrf {
    /**
     * Destination IPv6 prefix/len
     */
    destIpv6: string;
    /**
     * Destination VRF instance name
     */
    dstVrf: string;
    /**
     * Source IPv6 prefix/len
     */
    srcIpv6: string;
    /**
     * BFD template name
     */
    templateName: string;
}

export interface BfdIpv6WithSrcVrf {
    /**
     * Destination IPv6 prefix/len
     */
    destIpv6: string;
    /**
     * Source IPv6 prefix/len
     */
    srcIpv6: string;
    /**
     * source VRF instance name
     */
    srcVrf: string;
    /**
     * BFD template name
     */
    templateName: string;
}

export interface BfdIpv6WithoutVrf {
    /**
     * Destination IPv6 prefix/len
     */
    destIpv6: string;
    /**
     * Source IPv6 prefix/len
     */
    srcIpv6: string;
    /**
     * BFD template name
     */
    templateName: string;
}

export interface BgpAddressFamilyIpv4Ipv4UnicastAggregateAddress {
    ipv4Address: string;
    ipv4Mask: string;
}

export interface BgpAddressFamilyIpv4Ipv4UnicastNetwork {
    /**
     * Specify a BGP backdoor route
     */
    backdoor?: boolean;
    network: string;
    /**
     * Route-map to modify the attributes
     */
    routeMap?: string;
}

export interface BgpAddressFamilyIpv4Ipv4UnicastNetworksMask {
    /**
     * Specify a BGP backdoor route
     */
    backdoor?: boolean;
    /**
     * Network mask
     */
    mask: string;
    network: string;
    /**
     * Route-map to modify the attributes
     */
    routeMap?: string;
}

export interface BgpAddressFamilyIpv4VrfVrf {
    /**
     * Advertise/export prefixes to l2vpn evpn table
     */
    ipv4UnicastAdvertiseL2vpnEvpn?: boolean;
    /**
     * Configure BGP aggregate entries
     */
    ipv4UnicastAggregateAddresses?: outputs.BgpAddressFamilyIpv4VrfVrfIpv4UnicastAggregateAddress[];
    /**
     * Specify a network to announce via BGP
     */
    ipv4UnicastNetworks?: outputs.BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork[];
    /**
     * Specify a network to announce via BGP
     */
    ipv4UnicastNetworksMasks?: outputs.BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask[];
    /**
     * Connected
     */
    ipv4UnicastRedistributeConnected?: boolean;
    /**
     * Static routes
     */
    ipv4UnicastRedistributeStatic?: boolean;
    /**
     * Loopback interface
     *   - Range: `0`-`2147483647`
     */
    ipv4UnicastRouterIdLoopback?: number;
    name: string;
}

export interface BgpAddressFamilyIpv4VrfVrfIpv4UnicastAggregateAddress {
    ipv4Address: string;
    ipv4Mask: string;
}

export interface BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork {
    /**
     * Specify a BGP backdoor route
     */
    backdoor?: boolean;
    /**
     * Advertise or export to EVPN address-family
     */
    evpn?: boolean;
    network: string;
    /**
     * Route-map to modify the attributes
     */
    routeMap?: string;
}

export interface BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask {
    /**
     * Specify a BGP backdoor route
     */
    backdoor?: boolean;
    /**
     * Advertise or export to EVPN address-family
     */
    evpn?: boolean;
    /**
     * Network mask
     */
    mask: string;
    network: string;
    /**
     * Route-map to modify the attributes
     */
    routeMap?: string;
}

export interface BgpAddressFamilyIpv6Ipv6UnicastNetwork {
    /**
     * Specify a BGP backdoor route
     */
    backdoor?: boolean;
    network: string;
    /**
     * Route-map to modify the attributes
     */
    routeMap?: string;
}

export interface BgpAddressFamilyIpv6VrfVrf {
    /**
     * Advertise/export prefixes to l2vpn evpn table
     */
    ipv6UnicastAdvertiseL2vpnEvpn?: boolean;
    /**
     * Specify a network to announce via BGP
     */
    ipv6UnicastNetworks?: outputs.BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork[];
    /**
     * Connected
     */
    ipv6UnicastRedistributeConnected?: boolean;
    /**
     * Static routes
     */
    ipv6UnicastRedistributeStatic?: boolean;
    name: string;
}

export interface BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork {
    /**
     * Specify a BGP backdoor route
     */
    backdoor?: boolean;
    /**
     * Advertise or export to EVPN address-family
     */
    evpn?: boolean;
    network: string;
    /**
     * Route-map to modify the attributes
     */
    routeMap?: string;
}

export interface BgpIpv4UnicastNeighborRouteMap {
    /**
     * - Choices: `in`, `out`
     */
    inOut: string;
    routeMapName: string;
}

export interface BgpIpv4UnicastVrfNeighborRouteMap {
    /**
     * - Choices: `in`, `out`
     */
    inOut: string;
    routeMapName: string;
}

export interface BgpIpv6UnicastNeighborRouteMap {
    /**
     * - Choices: `in`, `out`
     */
    inOut: string;
    routeMapName: string;
}

export interface CdpTlvList {
    /**
     * Select cos TLV
     */
    cos?: boolean;
    /**
     * Select duplex TLV
     */
    duplex?: boolean;
    /**
     * Tlv-list
     */
    name: string;
    /**
     * Select trust TLV
     */
    trust?: boolean;
    /**
     * Select version TLV
     */
    version?: boolean;
    /**
     * Select vtp mgmt domain TLV
     */
    vtpMgmtDomain?: boolean;
}

export interface ClassMapMatchActivatedServiceTemplate {
    /**
     * Enter service name
     */
    serviceName: string;
}

export interface CommunityListExpandedEntry {
    /**
     * - Choices: `deny`, `permit`
     */
    action: string;
    regex: string;
}

export interface CryptoIkev2KeyringPeer {
    /**
     * Specify a description of this peer
     */
    description?: string;
    /**
     * Hostname of peer
     */
    hostname?: string;
    /**
     * IP address
     */
    identityAddress?: string;
    /**
     * email Domain Name
     */
    identityEmailDomain?: string;
    /**
     * Specify the name string
     */
    identityEmailName?: string;
    /**
     * email Domain Name
     */
    identityFqdnDomain?: string;
    /**
     * Specify the name string
     */
    identityFqdnName?: string;
    /**
     * proprietary types of identification (ID KEY ID)
     */
    identityKeyId?: string;
    ipv4Address?: string;
    ipv4Mask?: string;
    ipv6Prefix?: string;
    name: string;
    preSharedKey?: string;
    /**
     * - Choices: `0`, `6`
     */
    preSharedKeyEncryption?: string;
    preSharedKeyLocal?: string;
    /**
     * - Choices: `0`, `6`
     */
    preSharedKeyLocalEncryption?: string;
    preSharedKeyRemote?: string;
    /**
     * - Choices: `0`, `6`
     */
    preSharedKeyRemoteEncryption?: string;
}

export interface CryptoIkev2PolicyProposal {
    proposals: string;
}

export interface CryptoIkev2ProfileMatchIdentityRemoteIpv4Address {
    address: string;
    mask?: string;
}

export interface DhcpSnoopingVlan {
    /**
     * DHCP Snooping vlan first number or vlan range,example: 1,3-5,7,9-11
     */
    vlanId: string;
}

export interface Dot1xCredential {
    /**
     * Set the anonymous userid
     */
    anonymousId?: string;
    /**
     * Provide a description for the credentials profile
     */
    description?: string;
    password?: string;
    /**
     * - Choices: `0`, `7`
     */
    passwordType?: string;
    /**
     * Set the default pki trustpoint
     */
    pkiTrustpoint?: string;
    /**
     * Specify a profile name
     */
    profileName: string;
    /**
     * Set the authentication userid
     */
    username?: string;
}

export interface FlowMonitorExporter {
    name: string;
}

export interface GetAaaAccountingExec {
    name: string;
    /**
     * Use Server-group
     */
    startStopGroup1: string;
}

export interface GetAaaAccountingIdentity {
    name: string;
    /**
     * Use Broadcast for Accounting
     */
    startStopBroadcast: boolean;
    /**
     * Use Server-group
     */
    startStopGroup1: string;
    /**
     * Use Server-group
     */
    startStopGroup2: string;
    /**
     * Use Server-group
     */
    startStopGroup3: string;
    /**
     * Use Server-group
     */
    startStopGroup4: string;
    /**
     * Use Broadcast for Accounting
     */
    startStopGroupBroadcast: boolean;
    /**
     * Use system logger for Accounting
     */
    startStopGroupLogger: boolean;
}

export interface GetAaaAccountingNetwork {
    id: string;
    /**
     * Use Server-group
     */
    startStopGroup1: string;
    /**
     * Use Server-group
     */
    startStopGroup2: string;
}

export interface GetAaaAuthenticationDot1x {
    /**
     * Use Cached-group
     */
    a1Cache: string;
    /**
     * Use Server-group
     */
    a1Group: string;
    /**
     * Use local username authentication
     */
    a1Local: boolean;
    /**
     * Use list of all Radius hosts
     */
    a1Radius: boolean;
    /**
     * Use Cached-group
     */
    a2Cache: string;
    /**
     * Use Server-group
     */
    a2Group: string;
    /**
     * Use local username authentication
     */
    a2Local: boolean;
    /**
     * Use list of all Radius hosts
     */
    a2Radius: boolean;
    /**
     * Use Cached-group
     */
    a3Cache: string;
    /**
     * Use Server-group
     */
    a3Group: string;
    /**
     * Use local username authentication
     */
    a3Local: boolean;
    /**
     * Use list of all Radius hosts
     */
    a3Radius: boolean;
    /**
     * Use Cached-group
     */
    a4Cache: string;
    /**
     * Use Server-group
     */
    a4Group: string;
    /**
     * Use local username authentication
     */
    a4Local: boolean;
    /**
     * Use list of all Radius hosts
     */
    a4Radius: boolean;
    /**
     * Named authentication method list for dot1x service.
     */
    name: string;
}

export interface GetAaaAuthenticationLogin {
    /**
     * Use enable password for authentication.
     */
    a1Enable: boolean;
    /**
     * Use Server-group
     */
    a1Group: string;
    /**
     * Use line password for authentication.
     */
    a1Line: boolean;
    /**
     * Use local username authentication.
     */
    a1Local: boolean;
    /**
     * NO authentication.
     */
    a1None: boolean;
    /**
     * Use enable password for authentication.
     */
    a2Enable: boolean;
    /**
     * Use Server-group
     */
    a2Group: string;
    /**
     * Use line password for authentication.
     */
    a2Line: boolean;
    a2Local: boolean;
    /**
     * NO authentication.
     */
    a2None: boolean;
    /**
     * Use enable password for authentication.
     */
    a3Enable: boolean;
    /**
     * Use Server-group
     */
    a3Group: string;
    /**
     * Use line password for authentication.
     */
    a3Line: boolean;
    a3Local: boolean;
    /**
     * NO authentication.
     */
    a3None: boolean;
    /**
     * Use enable password for authentication.
     */
    a4Enable: boolean;
    /**
     * Use Server-group
     */
    a4Group: string;
    /**
     * Use line password for authentication.
     */
    a4Line: boolean;
    a4Local: boolean;
    /**
     * NO authentication.
     */
    a4None: boolean;
    name: string;
}

export interface GetAaaAuthorizationExec {
    /**
     * Use Server-group
     */
    a1Group: string;
    /**
     * Succeed if user has authenticated.
     */
    a1IfAuthenticated: boolean;
    /**
     * Use local database
     */
    a1Local: boolean;
    /**
     * Use radius
     */
    a1Radius: boolean;
    /**
     * Use TACACS+
     */
    a1Tacacs: boolean;
    /**
     * Use Server-group
     */
    a2Group: string;
    /**
     * Succeed if user has authenticated.
     */
    a2IfAuthenticated: boolean;
    a2Local: boolean;
    /**
     * Use Radius
     */
    a2Radius: boolean;
    /**
     * Use TACACS+
     */
    a2Tacacs: boolean;
    /**
     * Use Server-group
     */
    a3Group: string;
    /**
     * Succeed if user has authenticated.
     */
    a3IfAuthenticated: boolean;
    a3Local: boolean;
    /**
     * Use Radius
     */
    a3Radius: boolean;
    /**
     * Use TACACS+
     */
    a3Tacacs: boolean;
    /**
     * Use Server-group
     */
    a4Group: string;
    /**
     * Succeed if user has authenticated.
     */
    a4IfAuthenticated: boolean;
    a4Local: boolean;
    /**
     * Use radius
     */
    a4Radius: boolean;
    /**
     * Use TACACS+
     */
    a4Tacacs: boolean;
    name: string;
}

export interface GetAaaAuthorizationNetwork {
    /**
     * Use Server-group
     */
    a1Group: string;
    /**
     * Use local username authentication.
     */
    a1Local: boolean;
    /**
     * Use Server-group
     */
    a2Group: string;
    a2Local: boolean;
    /**
     * Use Server-group
     */
    a3Group: string;
    a3Local: boolean;
    /**
     * Use Server-group
     */
    a4Group: string;
    a4Local: boolean;
    id: string;
}

export interface GetAaaGroupServerRadius {
    /**
     * Five GigabitEthernet
     */
    ipRadiusSourceInterfaceFiveGigabitEthernet: string;
    /**
     * Forty GigabitEthernet
     */
    ipRadiusSourceInterfaceFortyGigabitEthernet: string;
    /**
     * GigabitEthernet IEEE 802.3z
     */
    ipRadiusSourceInterfaceGigabitEthernet: string;
    /**
     * Hundred GigabitEthernet
     */
    ipRadiusSourceInterfaceHundredGigabitEthernet: string;
    /**
     * Loopback interface
     */
    ipRadiusSourceInterfaceLoopback: number;
    /**
     * Ten Gigabit Ethernet
     */
    ipRadiusSourceInterfaceTenGigabitEthernet: string;
    /**
     * Twenty Five GigabitEthernet
     */
    ipRadiusSourceInterfaceTwentyFiveGigabitEthernet: string;
    /**
     * Two GigabitEthernet
     */
    ipRadiusSourceInterfaceTwoGigabitEthernet: string;
    /**
     * Iosxr Vlans
     */
    ipRadiusSourceInterfaceVlan: number;
    /**
     * Radius Server-group name with max string length 32
     */
    name: string;
    /**
     * Name of radius server
     */
    serverNames: outputs.GetAaaGroupServerRadiusServerName[];
}

export interface GetAaaGroupServerRadiusServerName {
    /**
     * Radius server name
     */
    name: string;
}

export interface GetAaaGroupServerTacacsplus {
    /**
     * Five GigabitEthernet
     */
    ipTacacsSourceInterfaceFiveGigabitEthernet: string;
    /**
     * Forty GigabitEthernet
     */
    ipTacacsSourceInterfaceFortyGigabitEthernet: string;
    /**
     * GigabitEthernet IEEE 802.3z
     */
    ipTacacsSourceInterfaceGigabitEthernet: string;
    /**
     * Hundred GigabitEthernet
     */
    ipTacacsSourceInterfaceHundredGigabitEthernet: string;
    /**
     * Loopback interface
     */
    ipTacacsSourceInterfaceLoopback: number;
    /**
     * Ten Gigabit Ethernet
     */
    ipTacacsSourceInterfaceTenGigabitEthernet: string;
    /**
     * Twenty Five GigabitEthernet
     */
    ipTacacsSourceInterfaceTwentyFiveGigabitEthernet: string;
    /**
     * Two GigabitEthernet
     */
    ipTacacsSourceInterfaceTwoGigabitEthernet: string;
    /**
     * Iosxr Vlans
     */
    ipTacacsSourceInterfaceVlan: number;
    /**
     * Server-group name with max string length 32
     */
    name: string;
    /**
     * Name of tacacs server
     */
    serverNames: outputs.GetAaaGroupServerTacacsplusServerName[];
}

export interface GetAaaGroupServerTacacsplusServerName {
    name: string;
}

export interface GetAaaServerRadiusDynamicAuthorClient {
    ip: string;
    serverKey: string;
    serverKeyType: string;
}

export interface GetAccessListExtendedEntry {
    aceRuleAction: string;
    aceRuleProtocol: string;
    /**
     * Match on the ACK bit
     */
    ack: boolean;
    /**
     * Any destination host
     */
    destinationAny: boolean;
    /**
     * A single destination host
     */
    destinationHost: string;
    /**
     * Destination network object group
     */
    destinationObjectGroup: string;
    /**
     * Match only packets on a given port number up to 10 ports
     */
    destinationPortEqual: string;
    /**
     * Match only packets with a greater port number
     */
    destinationPortGreaterThan: string;
    /**
     * Match only packets with a lower port number
     */
    destinationPortLesserThan: string;
    /**
     * Match only packets in the range of port numbers
     */
    destinationPortRangeFrom: string;
    /**
     * Match only packets in the range of port numbers
     */
    destinationPortRangeTo: string;
    destinationPrefix: string;
    destinationPrefixMask: string;
    /**
     * Match packets with given dscp value
     */
    dscp: string;
    /**
     * Match established connections
     */
    established: boolean;
    /**
     * Match on the FIN bit
     */
    fin: boolean;
    /**
     * Check non-initial fragments
     */
    fragments: boolean;
    /**
     * Log matches against this entry
     */
    log: boolean;
    /**
     * Log matches against this entry, including input interface
     */
    logInput: boolean;
    /**
     * Match packets with given precedence value
     */
    precedence: string;
    /**
     * Match on the PSH bit
     */
    psh: boolean;
    /**
     * Access list entry comment
     */
    remark: string;
    /**
     * Match on the RST bit
     */
    rst: boolean;
    sequence: number;
    /**
     * Service object group name
     */
    serviceObjectGroup: string;
    /**
     * Any source host
     */
    sourceAny: boolean;
    /**
     * A single source host
     */
    sourceHost: string;
    /**
     * Source network object group
     */
    sourceObjectGroup: string;
    /**
     * Match only packets on a given port number up to 10 ports
     */
    sourcePortEqual: string;
    /**
     * Match only packets with a greater port number
     */
    sourcePortGreaterThan: string;
    /**
     * Match only packets with a lower port number
     */
    sourcePortLesserThan: string;
    /**
     * Match only packets in the range of port numbers
     */
    sourcePortRangeFrom: string;
    /**
     * Match only packets in the range of port numbers
     */
    sourcePortRangeTo: string;
    sourcePrefix: string;
    sourcePrefixMask: string;
    /**
     * Match on the SYN bit
     */
    syn: boolean;
    /**
     * Match packets with given TOS value
     */
    tos: string;
    /**
     * Match on the URG bit
     */
    urg: boolean;
}

export interface GetAccessListStandardEntry {
    /**
     * Any source prefix
     */
    denyAny: boolean;
    /**
     * A single source host
     */
    denyHost: string;
    /**
     * Log matches against this entry
     */
    denyLog: boolean;
    /**
     * Network address prefix
     */
    denyPrefix: string;
    /**
     * Wildcard bits
     */
    denyPrefixMask: string;
    /**
     * Any source prefix
     */
    permitAny: boolean;
    /**
     * A single source host
     */
    permitHost: string;
    /**
     * Log matches against this entry
     */
    permitLog: boolean;
    /**
     * Network address prefix
     */
    permitPrefix: string;
    /**
     * Wildcard bits
     */
    permitPrefixMask: string;
    /**
     * Access list entry comment
     */
    remark: string;
    sequence: number;
}

export interface GetArpInspectionFilter {
    name: string;
    /**
     * Vlans to apply the filter
     */
    vlans: outputs.GetArpInspectionFilterVlan[];
}

export interface GetArpInspectionFilterVlan {
    /**
     * Apply the ACL statically
     */
    static: boolean;
    vlanRange: string;
}

export interface GetAsPathAccessListEntry {
    action: string;
    regex: string;
}

export interface GetBfdIpv4BothVrf {
    /**
     * Destination IP prefix/len
     */
    destIp: string;
    /**
     * Destination VRF instance name
     */
    dstVrf: string;
    /**
     * Source IP prefix/len
     */
    srcIp: string;
    /**
     * source VRF instance name
     */
    srcVrf: string;
    /**
     * BFD template name
     */
    templateName: string;
}

export interface GetBfdIpv4WithDstVrf {
    /**
     * Destination IP prefix/len
     */
    destIp: string;
    /**
     * Destination VRF instance name
     */
    dstVrf: string;
    /**
     * Source IP prefix/len
     */
    srcIp: string;
    /**
     * BFD template name
     */
    templateName: string;
}

export interface GetBfdIpv4WithSrcVrf {
    /**
     * Destination IP prefix/len
     */
    destIp: string;
    /**
     * Source IP prefix/len
     */
    srcIp: string;
    /**
     * source VRF instance name
     */
    srcVrf: string;
    /**
     * BFD template name
     */
    templateName: string;
}

export interface GetBfdIpv4WithoutVrf {
    /**
     * Destination IP prefix/len
     */
    destIp: string;
    /**
     * Source IP prefix/len
     */
    srcIp: string;
    /**
     * BFD template name
     */
    templateName: string;
}

export interface GetBfdIpv6WithBothVrf {
    /**
     * Destination IPv6 prefix/len
     */
    destIpv6: string;
    /**
     * Destination VRF instance name
     */
    dstVrf: string;
    /**
     * Source IPv6 prefix/len
     */
    srcIpv6: string;
    /**
     * source VRF instance name
     */
    srcVrf: string;
    /**
     * BFD template name
     */
    templateName: string;
}

export interface GetBfdIpv6WithDstVrf {
    /**
     * Destination IPv6 prefix/len
     */
    destIpv6: string;
    /**
     * Destination VRF instance name
     */
    dstVrf: string;
    /**
     * Source IPv6 prefix/len
     */
    srcIpv6: string;
    /**
     * BFD template name
     */
    templateName: string;
}

export interface GetBfdIpv6WithSrcVrf {
    /**
     * Destination IPv6 prefix/len
     */
    destIpv6: string;
    /**
     * Source IPv6 prefix/len
     */
    srcIpv6: string;
    /**
     * source VRF instance name
     */
    srcVrf: string;
    /**
     * BFD template name
     */
    templateName: string;
}

export interface GetBfdIpv6WithoutVrf {
    /**
     * Destination IPv6 prefix/len
     */
    destIpv6: string;
    /**
     * Source IPv6 prefix/len
     */
    srcIpv6: string;
    /**
     * BFD template name
     */
    templateName: string;
}

export interface GetBgpAddressFamilyIpv4Ipv4UnicastAggregateAddress {
    ipv4Address: string;
    ipv4Mask: string;
}

export interface GetBgpAddressFamilyIpv4Ipv4UnicastNetwork {
    /**
     * Specify a BGP backdoor route
     */
    backdoor: boolean;
    network: string;
    /**
     * Route-map to modify the attributes
     */
    routeMap: string;
}

export interface GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMask {
    /**
     * Specify a BGP backdoor route
     */
    backdoor: boolean;
    /**
     * Network mask
     */
    mask: string;
    network: string;
    /**
     * Route-map to modify the attributes
     */
    routeMap: string;
}

export interface GetBgpAddressFamilyIpv4VrfVrf {
    /**
     * Advertise/export prefixes to l2vpn evpn table
     */
    ipv4UnicastAdvertiseL2vpnEvpn: boolean;
    /**
     * Configure BGP aggregate entries
     */
    ipv4UnicastAggregateAddresses: outputs.GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastAggregateAddress[];
    /**
     * Specify a network to announce via BGP
     */
    ipv4UnicastNetworks: outputs.GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork[];
    /**
     * Specify a network to announce via BGP
     */
    ipv4UnicastNetworksMasks: outputs.GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask[];
    /**
     * Connected
     */
    ipv4UnicastRedistributeConnected: boolean;
    /**
     * Static routes
     */
    ipv4UnicastRedistributeStatic: boolean;
    /**
     * Loopback interface
     */
    ipv4UnicastRouterIdLoopback: number;
    name: string;
}

export interface GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastAggregateAddress {
    ipv4Address: string;
    ipv4Mask: string;
}

export interface GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork {
    /**
     * Specify a BGP backdoor route
     */
    backdoor: boolean;
    /**
     * Advertise or export to EVPN address-family
     */
    evpn: boolean;
    network: string;
    /**
     * Route-map to modify the attributes
     */
    routeMap: string;
}

export interface GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask {
    /**
     * Specify a BGP backdoor route
     */
    backdoor: boolean;
    /**
     * Advertise or export to EVPN address-family
     */
    evpn: boolean;
    /**
     * Network mask
     */
    mask: string;
    network: string;
    /**
     * Route-map to modify the attributes
     */
    routeMap: string;
}

export interface GetBgpAddressFamilyIpv6Ipv6UnicastNetwork {
    /**
     * Specify a BGP backdoor route
     */
    backdoor: boolean;
    network: string;
    /**
     * Route-map to modify the attributes
     */
    routeMap: string;
}

export interface GetBgpAddressFamilyIpv6VrfVrf {
    /**
     * Advertise/export prefixes to l2vpn evpn table
     */
    ipv6UnicastAdvertiseL2vpnEvpn: boolean;
    /**
     * Specify a network to announce via BGP
     */
    ipv6UnicastNetworks: outputs.GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork[];
    /**
     * Connected
     */
    ipv6UnicastRedistributeConnected: boolean;
    /**
     * Static routes
     */
    ipv6UnicastRedistributeStatic: boolean;
    name: string;
}

export interface GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork {
    /**
     * Specify a BGP backdoor route
     */
    backdoor: boolean;
    /**
     * Advertise or export to EVPN address-family
     */
    evpn: boolean;
    network: string;
    /**
     * Route-map to modify the attributes
     */
    routeMap: string;
}

export interface GetBgpIpv4UnicastNeighborRouteMap {
    inOut: string;
    routeMapName: string;
}

export interface GetBgpIpv4UnicastVrfNeighborRouteMap {
    inOut: string;
    routeMapName: string;
}

export interface GetBgpIpv6UnicastNeighborRouteMap {
    inOut: string;
    routeMapName: string;
}

export interface GetCdpTlvList {
    /**
     * Select cos TLV
     */
    cos: boolean;
    /**
     * Select duplex TLV
     */
    duplex: boolean;
    /**
     * Tlv-list
     */
    name: string;
    /**
     * Select trust TLV
     */
    trust: boolean;
    /**
     * Select version TLV
     */
    version: boolean;
    /**
     * Select vtp mgmt domain TLV
     */
    vtpMgmtDomain: boolean;
}

export interface GetClassMapMatchActivatedServiceTemplate {
    /**
     * Enter service name
     */
    serviceName: string;
}

export interface GetCommunityListExpandedEntry {
    action: string;
    regex: string;
}

export interface GetCryptoIkev2KeyringPeer {
    /**
     * Specify a description of this peer
     */
    description: string;
    /**
     * Hostname of peer
     */
    hostname: string;
    /**
     * IP address
     */
    identityAddress: string;
    /**
     * email Domain Name
     */
    identityEmailDomain: string;
    /**
     * Specify the name string
     */
    identityEmailName: string;
    /**
     * email Domain Name
     */
    identityFqdnDomain: string;
    /**
     * Specify the name string
     */
    identityFqdnName: string;
    /**
     * proprietary types of identification (ID KEY ID)
     */
    identityKeyId: string;
    ipv4Address: string;
    ipv4Mask: string;
    ipv6Prefix: string;
    name: string;
    preSharedKey: string;
    preSharedKeyEncryption: string;
    preSharedKeyLocal: string;
    preSharedKeyLocalEncryption: string;
    preSharedKeyRemote: string;
    preSharedKeyRemoteEncryption: string;
}

export interface GetCryptoIkev2PolicyProposal {
    proposals: string;
}

export interface GetCryptoIkev2ProfileMatchIdentityRemoteIpv4Address {
    address: string;
    mask: string;
}

export interface GetDhcpSnoopingVlan {
    /**
     * DHCP Snooping vlan first number or vlan range,example: 1,3-5,7,9-11
     */
    vlanId: string;
}

export interface GetDot1xCredential {
    /**
     * Set the anonymous userid
     */
    anonymousId: string;
    /**
     * Provide a description for the credentials profile
     */
    description: string;
    password: string;
    passwordType: string;
    /**
     * Set the default pki trustpoint
     */
    pkiTrustpoint: string;
    /**
     * Specify a profile name
     */
    profileName: string;
    /**
     * Set the authentication userid
     */
    username: string;
}

export interface GetFlowMonitorExporter {
    name: string;
}

export interface GetInterfaceEthernetHelperAddress {
    address: string;
    /**
     * Helper-address is global
     */
    global: boolean;
    /**
     * VRF name for helper-address (if different from interface VRF)
     */
    vrf: string;
}

export interface GetInterfaceEthernetIpFlowMonitor {
    direction: string;
    /**
     * User defined
     */
    name: string;
}

export interface GetInterfaceEthernetIpv6Address {
    /**
     * Use eui-64 interface identifier
     */
    eui64: boolean;
    prefix: string;
}

export interface GetInterfaceEthernetIpv6LinkLocalAddress {
    address: string;
    /**
     * Use link-local address
     */
    linkLocal: boolean;
}

export interface GetInterfaceEthernetSourceTemplate {
    /**
     * merge option of binding
     */
    merge: boolean;
    templateName: string;
}

export interface GetInterfaceLoopbackIpv6Address {
    /**
     * Use eui-64 interface identifier
     */
    eui64: boolean;
    prefix: string;
}

export interface GetInterfaceLoopbackIpv6LinkLocalAddress {
    address: string;
    /**
     * Use link-local address
     */
    linkLocal: boolean;
}

export interface GetInterfaceNveVni {
    /**
     * Ingress Replication control-plane (BGP) signaling
     */
    ingressReplication: boolean;
    /**
     * Starting Multicast Group IPv4 Address
     */
    ipv4MulticastGroup: string;
    /**
     * VNI range or instance between 4096-16777215, example: 6010-6030 or 7115
     */
    vniRange: string;
}

export interface GetInterfaceNveVniVrf {
    /**
     * VNI range or instance between 4096-16777215, example: 6010-6030 or 7115
     */
    vniRange: string;
    /**
     * Specify a particular VRF
     */
    vrf: string;
}

export interface GetInterfaceOspfMessageDigestKey {
    /**
     * Key ID
     */
    id: number;
    /**
     * The OSPF password (key) (only the first 16 characters are used)
     */
    md5AuthKey: string;
    /**
     * Encryption type (0 for not yet encrypted, 7 for proprietary)
     */
    md5AuthType: number;
}

export interface GetInterfaceOspfProcessId {
    areas: outputs.GetInterfaceOspfProcessIdArea[];
    /**
     * Process ID
     */
    id: number;
}

export interface GetInterfaceOspfProcessIdArea {
    /**
     * Set the OSPF area ID
     */
    areaId: string;
}

export interface GetInterfacePortChannelHelperAddress {
    address: string;
    /**
     * Helper-address is global
     */
    global: boolean;
    /**
     * VRF name for helper-address (if different from interface VRF)
     */
    vrf: string;
}

export interface GetInterfacePortChannelIpv6Address {
    /**
     * Use eui-64 interface identifier
     */
    eui64: boolean;
    prefix: string;
}

export interface GetInterfacePortChannelIpv6LinkLocalAddress {
    address: string;
    /**
     * Use link-local address
     */
    linkLocal: boolean;
}

export interface GetInterfacePortChannelSubinterfaceHelperAddress {
    address: string;
    /**
     * Helper-address is global
     */
    global: boolean;
    /**
     * VRF name for helper-address (if different from interface VRF)
     */
    vrf: string;
}

export interface GetInterfacePortChannelSubinterfaceIpv6Address {
    /**
     * Use eui-64 interface identifier
     */
    eui64: boolean;
    prefix: string;
}

export interface GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddress {
    address: string;
    /**
     * Use link-local address
     */
    linkLocal: boolean;
}

export interface GetInterfaceTunnelHelperAddress {
    address: string;
    /**
     * Helper-address is global
     */
    global: boolean;
    /**
     * VRF name for helper-address (if different from interface VRF)
     */
    vrf: string;
}

export interface GetInterfaceTunnelIpv6Address {
    /**
     * Use eui-64 interface identifier
     */
    eui64: boolean;
    prefix: string;
}

export interface GetInterfaceTunnelIpv6LinkLocalAddress {
    address: string;
    /**
     * Use link-local address
     */
    linkLocal: boolean;
}

export interface GetInterfaceVlanHelperAddress {
    address: string;
    /**
     * Helper-address is global
     */
    global: boolean;
    /**
     * VRF name for helper-address (if different from interface VRF)
     */
    vrf: string;
}

export interface GetInterfaceVlanIpv6Address {
    /**
     * Use eui-64 interface identifier
     */
    eui64: boolean;
    prefix: string;
}

export interface GetInterfaceVlanIpv6LinkLocalAddress {
    address: string;
    /**
     * Use link-local address
     */
    linkLocal: boolean;
}

export interface GetLineConsole {
    /**
     * <0-35791>;;Timeout in minutes
     */
    execTimeoutMinutes: number;
    /**
     * <0-2147483>;;Timeout in seconds
     */
    execTimeoutSeconds: number;
    first: string;
    loginAuthentication: string;
    loginLocal: boolean;
    password: string;
    /**
     * Set exec level password
     */
    passwordLevel: number;
    passwordType: string;
    privilegeLevel: number;
    /**
     * Set async line stop bits
     */
    stopbits: string;
}

export interface GetLineVty {
    accessClasses: outputs.GetLineVtyAccessClass[];
    /**
     * Use an authorization list with this name
     */
    authorizationExec: string;
    /**
     * Use the default authorization list
     */
    authorizationExecDefault: boolean;
    escapeCharacter: string;
    /**
     * <0-35791>;;Timeout in minutes
     */
    execTimeoutMinutes: number;
    /**
     * <0-2147483>;;Timeout in seconds
     */
    execTimeoutSeconds: number;
    first: number;
    last: number;
    loginAuthentication: string;
    password: string;
    /**
     * Set exec level password
     */
    passwordLevel: number;
    passwordType: string;
    /**
     * Define which protocols to use when connecting to the terminal server
     */
    transportInput: string;
    /**
     * All protocols
     */
    transportInputAll: boolean;
    /**
     * Define no transport protocols for line
     */
    transportInputNone: boolean;
    transportPreferredProtocol: string;
}

export interface GetLineVtyAccessClass {
    accessList: string;
    direction: string;
    /**
     * Same access list is applied for all VRFs
     */
    vrfAlso: boolean;
}

export interface GetLoggingIpv4Host {
    ipv4Host: string;
}

export interface GetLoggingIpv4HostTransportTransportTcpPort {
    /**
     * Specify the TCP port number (default=601)
     */
    portNumber: number;
}

export interface GetLoggingIpv4HostTransportTransportTlsPort {
    /**
     * Specify the TLS port number (default=6514)
     */
    portNumber: number;
    /**
     * Specify the TLS profile
     */
    profile: string;
}

export interface GetLoggingIpv4HostTransportTransportUdpPort {
    /**
     * Specify the UDP port number (default=514)
     */
    portNumber: number;
}

export interface GetLoggingIpv4HostVrfTransportTransportTcpPort {
    /**
     * Specify the TCP port number (default=601)
     */
    portNumber: number;
}

export interface GetLoggingIpv4HostVrfTransportTransportTlsPort {
    /**
     * Specify the TLS port number (default=6514)
     */
    portNumber: number;
    /**
     * Specify the TLS profile
     */
    profile: string;
}

export interface GetLoggingIpv4HostVrfTransportTransportUdpPort {
    /**
     * Specify the UDP port number (default=514)
     */
    portNumber: number;
}

export interface GetLoggingIpv4VrfHost {
    ipv4Host: string;
    /**
     * Set VRF option
     */
    vrf: string;
}

export interface GetLoggingIpv6Host {
    ipv6Host: string;
}

export interface GetLoggingIpv6HostTransportTransportTcpPort {
    /**
     * Specify the TCP port number (default=601)
     */
    portNumber: number;
}

export interface GetLoggingIpv6HostTransportTransportTlsPort {
    /**
     * Specify the TLS port number (default=6514)
     */
    portNumber: number;
    /**
     * Specify the TLS profile
     */
    profile: string;
}

export interface GetLoggingIpv6HostTransportTransportUdpPort {
    /**
     * Specify the UDP port number (default=514)
     */
    portNumber: number;
}

export interface GetLoggingIpv6HostVrfTransportTransportTcpPort {
    /**
     * Specify the TCP port number (default=601)
     */
    portNumber: number;
}

export interface GetLoggingIpv6HostVrfTransportTransportTlsPort {
    /**
     * Specify the TLS port number (default=6514)
     */
    portNumber: number;
    /**
     * Specify the TLS profile
     */
    profile: string;
}

export interface GetLoggingIpv6HostVrfTransportTransportUdpPort {
    /**
     * Specify the UDP port number (default=514)
     */
    portNumber: number;
}

export interface GetLoggingIpv6VrfHost {
    ipv6Host: string;
    /**
     * Set VRF option
     */
    vrf: string;
}

export interface GetLoggingSourceInterfacesVrf {
    interfaceName: string;
    /**
     * Specify the vrf of source interface for logging transactions
     */
    vrf: string;
}

export interface GetMdtSubscriptionReceiver {
    /**
     * IP address of the receiver
     */
    address: string;
    /**
     * Network port of the receiver
     */
    port: number;
    /**
     * Receiver transport protocol.
     */
    protocol: string;
}

export interface GetMsdpPassword {
    addr: string;
    encryption: number;
    password: string;
}

export interface GetMsdpPeer {
    addr: string;
    /**
     * Loopback interface
     */
    connectSourceLoopback: number;
    /**
     * Configured AS number
     */
    remoteAs: number;
}

export interface GetMsdpVrfPassword {
    addr: string;
    encryption: number;
    password: string;
}

export interface GetMsdpVrfPeer {
    addr: string;
    /**
     * Loopback interface
     */
    connectSourceLoopback: number;
    /**
     * Configured AS number
     */
    remoteAs: number;
}

export interface GetNtpAuthenticationKey {
    /**
     * CMAC-AES-128 (digest length = 128 bits,  key length = [16 or 32] bytes)
     */
    cmacAes128: string;
    /**
     * Authentication key encryption type
     */
    encryptionType: number;
    /**
     * HMAC-SHA1 (digest length = 160 bits,  key length = [1-32] bytes)
     */
    hmacSha1: string;
    /**
     * HMAC-SHA2-256 (digest length = 256 bits,  key length = [1-32] bytes)
     */
    hmacSha2256: string;
    /**
     * MD5 authentication
     */
    md5: string;
    number: number;
    /**
     * SHA1 (digest length = 160 bits,  key length = [1-32] bytes)
     */
    sha1: string;
    /**
     * SHA-256 (digest length = 256 bits,  key length = [1-32] bytes)
     */
    sha2: string;
}

export interface GetNtpPeer {
    ipAddress: string;
    /**
     * Configure peer authentication key
     */
    key: number;
    /**
     * Prefer this peer when possible
     */
    prefer: boolean;
    /**
     * Interface for source address
     */
    source: string;
    /**
     * Configure NTP version
     */
    version: number;
}

export interface GetNtpPeerVrf {
    name: string;
    peers: outputs.GetNtpPeerVrfPeer[];
}

export interface GetNtpPeerVrfPeer {
    ipAddress: string;
    /**
     * Configure peer authentication key
     */
    key: number;
    /**
     * Prefer this peer when possible
     */
    prefer: boolean;
    /**
     * Configure NTP version
     */
    version: number;
}

export interface GetNtpServer {
    ipAddress: string;
    /**
     * Configure peer authentication key
     */
    key: number;
    /**
     * Prefer this peer when possible
     */
    prefer: boolean;
    /**
     * Interface for source address
     */
    source: string;
    /**
     * Configure NTP version
     */
    version: number;
}

export interface GetNtpServerVrf {
    name: string;
    servers: outputs.GetNtpServerVrfServer[];
}

export interface GetNtpServerVrfServer {
    ipAddress: string;
    /**
     * Configure peer authentication key
     */
    key: number;
    /**
     * Prefer this peer when possible
     */
    prefer: boolean;
    /**
     * Configure NTP version
     */
    version: number;
}

export interface GetOspfArea {
    /**
     * OSPF area ID
     */
    areaId: string;
    /**
     * Use message-digest authentication
     */
    authenticationMessageDigest: boolean;
    /**
     * Specify a NSSA area
     */
    nssa: boolean;
    /**
     * Originate Type 7 default into NSSA area
     */
    nssaDefaultInformationOriginate: boolean;
    /**
     * OSPF default metric
     */
    nssaDefaultInformationOriginateMetric: number;
    /**
     * OSPF metric type for default routes
     */
    nssaDefaultInformationOriginateMetricType: number;
    /**
     * No redistribution into this NSSA area
     */
    nssaNoRedistribution: boolean;
    /**
     * Do not send summary LSA into NSSA
     */
    nssaNoSummary: boolean;
}

export interface GetOspfNeighbor {
    /**
     * OSPF cost for point-to-multipoint neighbor
     */
    cost: number;
    /**
     * Neighbor address
     */
    ip: string;
    /**
     * OSPF priority of non-broadcast neighbor
     */
    priority: number;
}

export interface GetOspfNetwork {
    /**
     * Set the OSPF area ID
     */
    area: string;
    /**
     * Network number
     */
    ip: string;
    /**
     * OSPF wild card bits
     */
    wildcard: string;
}

export interface GetOspfSummaryAddress {
    /**
     * IP summary address
     */
    ip: string;
    /**
     * Summary mask
     */
    mask: string;
}

export interface GetOspfVrfArea {
    /**
     * OSPF area ID
     */
    areaId: string;
    /**
     * Use message-digest authentication
     */
    authenticationMessageDigest: boolean;
    /**
     * Specify a NSSA area
     */
    nssa: boolean;
    /**
     * Originate Type 7 default into NSSA area
     */
    nssaDefaultInformationOriginate: boolean;
    /**
     * OSPF default metric
     */
    nssaDefaultInformationOriginateMetric: number;
    /**
     * OSPF metric type for default routes
     */
    nssaDefaultInformationOriginateMetricType: number;
    /**
     * No redistribution into this NSSA area
     */
    nssaNoRedistribution: boolean;
    /**
     * Do not send summary LSA into NSSA
     */
    nssaNoSummary: boolean;
}

export interface GetOspfVrfNeighbor {
    /**
     * OSPF cost for point-to-multipoint neighbor
     */
    cost: number;
    /**
     * Neighbor address
     */
    ip: string;
    /**
     * OSPF priority of non-broadcast neighbor
     */
    priority: number;
}

export interface GetOspfVrfNetwork {
    /**
     * Set the OSPF area ID
     */
    area: string;
    /**
     * Network number
     */
    ip: string;
    /**
     * OSPF wild card bits
     */
    wildcard: string;
}

export interface GetOspfVrfSummaryAddress {
    /**
     * IP summary address
     */
    ip: string;
    /**
     * Summary mask
     */
    mask: string;
}

export interface GetPimRpAddress {
    /**
     * IP Access-list
     */
    accessList: string;
    /**
     * Group range treated in bidirectional shared-tree mode
     */
    bidir: boolean;
    /**
     * Overrides dynamically learnt RP mappings
     */
    override: boolean;
    /**
     * IP address of Rendezvous-point for group
     */
    rpAddress: string;
}

export interface GetPimRpCandidate {
    /**
     * Group range treated in bidirectional shared-tree mode
     */
    bidir: boolean;
    /**
     * IP Access list
     */
    groupList: string;
    /**
     * Autonomic-Networking virtual interface
     */
    interface: string;
    /**
     * RP candidate advertisement interval
     */
    interval: number;
    /**
     * RP candidate priority
     */
    priority: number;
}

export interface GetPimVrfRpAddress {
    /**
     * IP Access-list
     */
    accessList: string;
    /**
     * Group range treated in bidirectional shared-tree mode
     */
    bidir: boolean;
    /**
     * Overrides dynamically learnt RP mappings
     */
    override: boolean;
    /**
     * IP address of Rendezvous-point for group
     */
    rpAddress: string;
}

export interface GetPimVrfRpCandidate {
    /**
     * Group range treated in bidirectional shared-tree mode
     */
    bidir: boolean;
    /**
     * IP Access list
     */
    groupList: string;
    /**
     * Autonomic-Networking virtual interface
     */
    interface: string;
    /**
     * RP candidate advertisement interval
     */
    interval: number;
    /**
     * RP candidate priority
     */
    priority: number;
}

export interface GetPolicyMapClass {
    actions: outputs.GetPolicyMapClassAction[];
    name: string;
}

export interface GetPolicyMapClassAction {
    bandwidthBits: number;
    /**
     * % of total Bandwidth
     */
    bandwidthPercent: number;
    bandwidthRemainingOption: string;
    /**
     * % of the remaining bandwidth
     */
    bandwidthRemainingPercent: number;
    /**
     * ratio for sharing excess bandwidth
     */
    bandwidthRemainingRatio: number;
    priorityBurst: number;
    /**
     * Multi-Level Priority Queue
     */
    priorityLevel: number;
    queueLimit: number;
    queueLimitType: string;
    /**
     * Target Bit Rate (bits/sec)
     */
    shapeAverageBitRate: number;
    /**
     * bits per interval, excess.
     */
    shapeAverageBitsPerIntervalExcess: number;
    /**
     * bits per interval, sustained. Recommend not to configure, algo finds the best value
     */
    shapeAverageBitsPerIntervalSustained: number;
    /**
     * sustained burst in milliseconds. Recommend not to configure it, the algorithm will find out the best value
     */
    shapeAverageBurstSizeSustained: number;
    /**
     * milliseconds
     */
    shapeAverageMs: boolean;
    /**
     * % of interface bandwidth for Committed information rate
     */
    shapeAveragePercent: number;
    type: string;
}

export interface GetPolicyMapEventClassNumber {
    /**
     * action number, 1 for 1st class, 2 for 2nd...
     */
    actionNumbers: outputs.GetPolicyMapEventClassNumberActionNumber[];
    /**
     * The class type this control policy-map triggers upon
     */
    class: string;
    executionType: string;
    number: number;
}

export interface GetPolicyMapEventClassNumberActionNumber {
    /**
     * activate interface template
     */
    activateInterfaceTemplate: string;
    /**
     * policy type control subscriber
     */
    activatePolicyTypeControlSubscriber: string;
    /**
     * Named Method List
     */
    activateServiceTemplateConfigAaaList: string;
    /**
     * Template precedence
     */
    activateServiceTemplateConfigPrecedence: number;
    /**
     * Replace all existing authorization data and services
     */
    activateServiceTemplateConfigReplaceAll: boolean;
    /**
     * activate service template
     */
    activateServiceTemplateConfigServiceTemplate: string;
    /**
     * Specify authentication method list
     */
    authenticateUsingAaaAuthcList: string;
    /**
     * Specify authorization method list
     */
    authenticateUsingAaaAuthzList: string;
    /**
     * Enabling Dot1x Authenticator & Supplicant
     */
    authenticateUsingBoth: boolean;
    authenticateUsingMethod: string;
    /**
     * Specify parameter map name
     */
    authenticateUsingParameterMap: string;
    /**
     * Method priority
     */
    authenticateUsingPriority: number;
    /**
     * Number of times to retry failed authentications
     */
    authenticateUsingRetries: number;
    /**
     * Time interval between retries
     */
    authenticateUsingRetryTime: number;
    /**
     * restarts the auth sequence after the specified number of sec
     */
    authenticationRestart: number;
    /**
     * authorize session
     */
    authorize: boolean;
    /**
     * clears authenticated data hosts on the port
     */
    clearAuthenticatedDataHostsOnPort: boolean;
    /**
     * clears an active session
     */
    clearSession: boolean;
    /**
     * activate interface template
     */
    deactivateInterfaceTemplate: string;
    /**
     * policy type control subscriber
     */
    deactivatePolicyTypeControlSubscriber: string;
    /**
     * activate service template
     */
    deactivateServiceTemplate: string;
    /**
     * temporarily disable port
     */
    errDisable: boolean;
    /**
     * map identity-update attribute to a auto-conf templates
     */
    mapAttributeToServiceTable: string;
    /**
     * notifies the session attributes
     */
    notify: boolean;
    number: number;
    /**
     * pause reauthentication
     */
    pauseReauthentication: boolean;
    /**
     * silently drop violating packets
     */
    protect: boolean;
    /**
     * clear existing session and create session for violating host
     */
    replace: boolean;
    /**
     * drop violating packets and generate a syslog
     */
    restrict: boolean;
    /**
     * resume reauthentication
     */
    resumeReauthentication: boolean;
    /**
     * set domain
     */
    setDomain: string;
    /**
     * timer name
     */
    setTimerName: string;
    /**
     * Enter a value between 1 and 65535
     */
    setTimerValue: number;
    /**
     * terminate auth method
     */
    terminateConfig: string;
    /**
     * unauthorize session
     */
    unauthorize: boolean;
}

export interface GetPrefixListPrefix {
    /**
     * Specify deny or permit action
     */
    action: string;
    /**
     * Minimum prefix length to be matched
     */
    ge: number;
    /**
     * IPv4 Prefix
     */
    ip: string;
    /**
     * Maximum prefix length to be matched
     */
    le: number;
    /**
     * Name of the prefix-list
     */
    name: string;
    /**
     * Seq Number of the prefix-list
     */
    seq: number;
}

export interface GetPrefixListPrefixListDescription {
    /**
     * Prefix-list specific description
     */
    description: string;
    name: string;
}

export interface GetRadiusServerAttribute {
    /**
     * Include attribute
     */
    accessRequestInclude: boolean;
    attribute31Parameters: outputs.GetRadiusServerAttributeAttribute31Parameter[];
    number: string;
    sendAttributes: string[];
}

export interface GetRadiusServerAttributeAttribute31Parameter {
    callingStationId: string;
    /**
     * Specify format (default format ex: 0000.4096.3e4a) ietf - format ex: 00-00-40-96-3E-4A
     */
    idMacFormat: string;
    idMacLuCase: string;
    idSendMacOnly: boolean;
    idSendNasPortDetail: boolean;
}

export interface GetRouteMapEntry {
    /**
     * Continue on a different entry within the route-map
     */
    continue: boolean;
    /**
     * Route-map entry sequence number
     */
    continueSequenceNumber: number;
    /**
     * Route-map comment
     */
    description: string;
    /**
     * AS path access-list
     */
    matchAsPaths: number[];
    /**
     * AS path access-list (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
     */
    matchAsPathsLegacies: number[];
    /**
     * Do exact matching of communities
     */
    matchCommunityListExactMatch: boolean;
    /**
     * Named Access List
     */
    matchCommunityLists: string[];
    /**
     * Named Access List (DEPRECATED- please use community-list in Cisco-IOS-XE-bgp.yang)
     */
    matchCommunityListsLegacies: string[];
    /**
     * Named Access List
     */
    matchExtcommunityLists: string[];
    /**
     * Named Access List (DEPRECATED- please use extcommunity-list in Cisco-IOS-XE-bgp.yang)
     */
    matchExtcommunityListsLegacies: string[];
    matchInterfaces: string[];
    matchIpAddressAccessLists: string[];
    /**
     * Match entries of prefix-lists
     */
    matchIpAddressPrefixLists: string[];
    matchIpNextHopAccessLists: string[];
    /**
     * Match entries of prefix-lists
     */
    matchIpNextHopPrefixLists: string[];
    matchIpv6AddressAccessLists: string;
    /**
     * IPv6 prefix-list
     */
    matchIpv6AddressPrefixLists: string;
    matchIpv6NextHopAccessLists: string;
    /**
     * IPv6 prefix-list
     */
    matchIpv6NextHopPrefixLists: string;
    matchLocalPreferences: number[];
    matchLocalPreferencesLegacies: number[];
    /**
     * external route (BGP, EIGRP and OSPF type 1/2)
     */
    matchRouteTypeExternal: boolean;
    /**
     * OSPF external type 1 route
     */
    matchRouteTypeExternalType1: boolean;
    /**
     * OSPF external type 2 route
     */
    matchRouteTypeExternalType2: boolean;
    /**
     * internal route (including OSPF intra/inter area)
     */
    matchRouteTypeInternal: boolean;
    /**
     * IS-IS level-1 route
     */
    matchRouteTypeLevel1: boolean;
    /**
     * IS-IS level-2 route
     */
    matchRouteTypeLevel2: boolean;
    /**
     * locally generated route (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
     */
    matchRouteTypeLocal: boolean;
    /**
     * Border Gateway Protocol (BGP)
     */
    matchSourceProtocolBgps: string[];
    /**
     * Connected
     */
    matchSourceProtocolConnected: boolean;
    /**
     * Border Gateway Protocol (BGP)
     */
    matchSourceProtocolEigrps: string[];
    /**
     * ISO IS-IS
     */
    matchSourceProtocolIsis: boolean;
    /**
     * Locator ID Separation Protocol (LISP)
     */
    matchSourceProtocolLisp: boolean;
    /**
     * Open Shortest Path First (OSPF)
     */
    matchSourceProtocolOspfs: string[];
    /**
     * OSPFv3
     */
    matchSourceProtocolOspfv3s: string[];
    /**
     * Routing Information Protocol (RIP)
     */
    matchSourceProtocolRip: boolean;
    /**
     * Static routes
     */
    matchSourceProtocolStatic: boolean;
    /**
     * Tag value
     */
    matchTags: number[];
    /**
     * tracking object
     */
    matchTrack: number;
    operation: string;
    seq: number;
    /**
     * <1-65535>;;AS number
     */
    setAsPathPrependAs: string;
    /**
     * <1-65535>;;AS number (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
     */
    setAsPathPrependAsLegacy: string;
    setAsPathPrependLastAs: number;
    setAsPathPrependLastAsLegacy: number;
    /**
     * Replace each AS number in the AS-path with the local AS
     */
    setAsPathReplaceAny: boolean;
    setAsPathReplaceAs: outputs.GetRouteMapEntrySetAsPathReplaceA[];
    /**
     * Set the tag as an AS-path attribute
     */
    setAsPathTag: boolean;
    /**
     * Set the tag as an AS-path attribute (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
     */
    setAsPathTagLegacy: boolean;
    setCommunities: string[];
    setCommunitiesAdditive: boolean;
    setCommunitiesAdditiveLegacy: boolean;
    setCommunitiesLegacies: string[];
    /**
     * Delete matching communities
     */
    setCommunityListDelete: boolean;
    /**
     * Delete matching communities (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
     */
    setCommunityListDeleteLegacy: boolean;
    setCommunityListExpanded: number;
    setCommunityListExpandedLegacy: number;
    setCommunityListName: string;
    setCommunityListNameLegacy: string;
    setCommunityListStandard: number;
    setCommunityListStandardLegacy: number;
    /**
     * No community attribute
     */
    setCommunityNone: boolean;
    /**
     * No community attribute (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
     */
    setCommunityNoneLegacy: boolean;
    /**
     * SPAN source interface
     */
    setDefaultInterfaces: string[];
    setExtcomunityRtLegacies: string[];
    setExtcomunityRts: string[];
    setExtcomunitySoo: string;
    setExtcomunitySooLegacy: string;
    /**
     * VPN Distinguisher Extended Community
     */
    setExtcomunityVpnDistinguisher: string;
    setExtcomunityVpnDistinguisherAdditive: boolean;
    setExtcomunityVpnDistinguisherLegacy: string;
    setGlobal: boolean;
    /**
     * Interface specific information
     */
    setInterfaces: string[];
    /**
     * Specify prefix-list
     */
    setIpAddress: string;
    setIpDefaultGlobalNextHopAddresses: string[];
    setIpDefaultNextHopAddresses: string[];
    setIpGlobalNextHopAddresses: string[];
    setIpNextHopAddresses: string[];
    /**
     * Use self address (for BGP only)
     */
    setIpNextHopSelf: boolean;
    setIpQosGroup: number;
    /**
     * IPv6 prefix-list
     */
    setIpv6Addresses: string[];
    /**
     * Next hop along path
     */
    setIpv6DefaultGlobalNextHop: string;
    /**
     * Default next hop IPv6 address
     */
    setIpv6DefaultNextHops: string[];
    /**
     * Next hop IPv6 address
     */
    setIpv6NextHops: string[];
    /**
     * Import into a level-1 area
     */
    setLevel1: boolean;
    /**
     * Import into level-1 and level-2
     */
    setLevel12: boolean;
    /**
     * Import into level-2 sub-domain
     */
    setLevel2: boolean;
    /**
     * Preference value
     */
    setLocalPreference: number;
    /**
     * Preference value (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
     */
    setLocalPreferenceLegacy: number;
    /**
     * +/-<metric>;;Add or subtract metric
     */
    setMetricChange: string;
    /**
     * EIGRP delay metric, in 10 microsecond units
     */
    setMetricDelay: string;
    /**
     * EIGRP Effective bandwidth metric (Loading) where 255 is 100% loaded
     */
    setMetricLoading: number;
    /**
     * EIGRP MTU of the path
     */
    setMetricMtu: number;
    /**
     * EIGRP reliability metric where 255 is 100% reliable
     */
    setMetricReliability: number;
    /**
     * Type of metric for destination routing protocol
     */
    setMetricType: string;
    /**
     * Metric value or Bandwidth in Kbits per second
     */
    setMetricValue: number;
    /**
     * Tag value
     */
    setTag: number;
    /**
     * VPN Routing/Forwarding instance name
     */
    setVrf: string;
    /**
     * BGP weight for routing table
     */
    setWeight: number;
    /**
     * BGP weight for routing table (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
     */
    setWeightLegacy: number;
}

export interface GetRouteMapEntrySetAsPathReplaceA {
    /**
     * <1-65535>;;AS number
     */
    asNumber: string;
}

export interface GetServiceTemplateAccessGroup {
    /**
     * Specify the access list name
     */
    name: string;
}

export interface GetServiceTemplateInterfaceTemplate {
    /**
     * Enter name of interface template
     */
    name: string;
}

export interface GetServiceTemplateTag {
    /**
     * Specify the Tag name
     */
    name: string;
}

export interface GetSnmpServerContext {
    name: string;
}

export interface GetSnmpServerGroupV3Security {
    /**
     * Access-list name
     */
    accessAclName: string;
    /**
     * Specify IPv6 Named Access-List
     */
    accessIpv6Acl: string;
    /**
     * Standard IP Access-list allowing access with this community string
     */
    accessStandardAcl: number;
    /**
     * specify a context to associate these views for the group
     */
    contextNode: string;
    /**
     * context name match criteria
     */
    matchNode: string;
    /**
     * specify a notify view for the group
     */
    notifyNode: string;
    /**
     * specify a read view for the group
     */
    readNode: string;
    /**
     * security level type
     */
    securityLevel: string;
    /**
     * specify a write view for the group
     */
    writeNode: string;
}

export interface GetSnmpServerHost {
    /**
     * SNMPv1/v2c community string or SNMPv3 user name
     */
    communityOrUser: string;
    /**
     * Specifies an encryption type for community string
     */
    encryption: string;
    ipAddress: string;
    /**
     * SNMP version to use for notification messages
     */
    version: string;
}

export interface GetSnmpServerSnmpCommunity {
    /**
     * Access-list name
     */
    accessListName: string;
    /**
     * Specify IPv6 Named Access-List
     */
    ipv6: string;
    name: string;
    permission: string;
    /**
     * Restrict this community to a named MIB view
     */
    view: string;
}

export interface GetSnmpServerView {
    incExl: string;
    mib: string;
    name: string;
}

export interface GetStaticRouteNextHop {
    /**
     * Next hop address is global
     */
    global: boolean;
    metric: number;
    /**
     * Specify name of the next hop
     */
    name: string;
    nextHop: string;
    /**
     * permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
}

export interface GetStaticRouteVrfRoute {
    mask: string;
    nextHops: outputs.GetStaticRouteVrfRouteNextHop[];
    prefix: string;
}

export interface GetStaticRouteVrfRouteNextHop {
    /**
     * Next hop address is global
     */
    global: boolean;
    metric: number;
    /**
     * Specify name of the next hop
     */
    name: string;
    nextHop: string;
    /**
     * permanent route
     */
    permanent: boolean;
    /**
     * Set tag for this route
     */
    tag: number;
}

export interface GetSystemIpHttpAuthenticationAaaCommandAuthorization {
    /**
     * Enable level
     */
    level: number;
    /**
     * Use an authorization list with this name
     */
    name: string;
}

export interface GetSystemMulticastRoutingVrf {
    /**
     * Distributed multicast switching
     */
    distributed: boolean;
    vrf: string;
}

export interface GetTemplateDeviceTrackingAttachPolicy {
    policyName: string;
    /**
     * VLAN IDs of the VLANs for which this policy applies
     */
    vlanRange: string;
}

export interface GetTemplateIpAccessGroup {
    /**
     * Access control list name
     */
    accessList: string;
    /**
     * packet flow direction
     */
    direction: string;
}

export interface GetTemplateSwitchportPortSecurityMaximumRange {
    /**
     * Maximum addresses
     */
    range: number;
    /**
     * Max secure addresses per vlan
     */
    vlan: boolean;
    /**
     * access vlan
     */
    vlanAccess: boolean;
}

export interface GetVrfIpv4RouteTargetExport {
    /**
     * Value
     */
    value: string;
}

export interface GetVrfIpv4RouteTargetExportStitching {
    /**
     * VXLAN route target set
     */
    stitching: boolean;
    /**
     * Value
     */
    value: string;
}

export interface GetVrfIpv4RouteTargetImport {
    /**
     * Value
     */
    value: string;
}

export interface GetVrfIpv4RouteTargetImportStitching {
    /**
     * VXLAN route target set
     */
    stitching: boolean;
    /**
     * Value
     */
    value: string;
}

export interface GetVrfIpv6RouteTargetExport {
    /**
     * Value
     */
    value: string;
}

export interface GetVrfIpv6RouteTargetExportStitching {
    /**
     * VXLAN route target set
     */
    stitching: boolean;
    /**
     * Value
     */
    value: string;
}

export interface GetVrfIpv6RouteTargetImport {
    /**
     * Value
     */
    value: string;
}

export interface GetVrfIpv6RouteTargetImportStitching {
    /**
     * VXLAN route target set
     */
    stitching: boolean;
    /**
     * Value
     */
    value: string;
}

export interface GetVrfRouteTargetExport {
    /**
     * VXLAN route target set
     */
    stitching: boolean;
    /**
     * Value
     */
    value: string;
}

export interface GetVrfRouteTargetImport {
    /**
     * VXLAN route target set
     */
    stitching: boolean;
    /**
     * Value
     */
    value: string;
}

export interface InterfaceEthernetHelperAddress {
    address: string;
    /**
     * Helper-address is global
     */
    global?: boolean;
    /**
     * VRF name for helper-address (if different from interface VRF)
     */
    vrf?: string;
}

export interface InterfaceEthernetIpFlowMonitor {
    /**
     * - Choices: `input`, `output`
     */
    direction: string;
    /**
     * User defined
     */
    name: string;
}

export interface InterfaceEthernetIpv6Address {
    /**
     * Use eui-64 interface identifier
     */
    eui64?: boolean;
    prefix: string;
}

export interface InterfaceEthernetIpv6LinkLocalAddress {
    address: string;
    /**
     * Use link-local address
     */
    linkLocal?: boolean;
}

export interface InterfaceEthernetSourceTemplate {
    /**
     * merge option of binding
     */
    merge?: boolean;
    templateName: string;
}

export interface InterfaceLoopbackIpv6Address {
    /**
     * Use eui-64 interface identifier
     */
    eui64?: boolean;
    prefix: string;
}

export interface InterfaceLoopbackIpv6LinkLocalAddress {
    address: string;
    /**
     * Use link-local address
     */
    linkLocal?: boolean;
}

export interface InterfaceNveVni {
    /**
     * Ingress Replication control-plane (BGP) signaling
     */
    ingressReplication?: boolean;
    /**
     * Starting Multicast Group IPv4 Address
     */
    ipv4MulticastGroup?: string;
    /**
     * VNI range or instance between 4096-16777215, example: 6010-6030 or 7115
     */
    vniRange: string;
}

export interface InterfaceNveVniVrf {
    /**
     * VNI range or instance between 4096-16777215, example: 6010-6030 or 7115
     */
    vniRange: string;
    /**
     * Specify a particular VRF
     */
    vrf?: string;
}

export interface InterfaceOspfMessageDigestKey {
    /**
     * Key ID
     *   - Range: `1`-`255`
     */
    id: number;
    /**
     * The OSPF password (key) (only the first 16 characters are used)
     */
    md5AuthKey?: string;
    /**
     * Encryption type (0 for not yet encrypted, 7 for proprietary)
     *   - Range: `0`-`7`
     */
    md5AuthType?: number;
}

export interface InterfaceOspfProcessId {
    areas?: outputs.InterfaceOspfProcessIdArea[];
    /**
     * Process ID
     *   - Range: `1`-`65535`
     */
    id: number;
}

export interface InterfaceOspfProcessIdArea {
    /**
     * Set the OSPF area ID
     */
    areaId: string;
}

export interface InterfacePortChannelHelperAddress {
    address: string;
    /**
     * Helper-address is global
     */
    global?: boolean;
    /**
     * VRF name for helper-address (if different from interface VRF)
     */
    vrf?: string;
}

export interface InterfacePortChannelIpv6Address {
    /**
     * Use eui-64 interface identifier
     */
    eui64?: boolean;
    prefix: string;
}

export interface InterfacePortChannelIpv6LinkLocalAddress {
    address: string;
    /**
     * Use link-local address
     */
    linkLocal?: boolean;
}

export interface InterfacePortChannelSubinterfaceHelperAddress {
    address: string;
    /**
     * Helper-address is global
     */
    global?: boolean;
    /**
     * VRF name for helper-address (if different from interface VRF)
     */
    vrf?: string;
}

export interface InterfacePortChannelSubinterfaceIpv6Address {
    /**
     * Use eui-64 interface identifier
     */
    eui64?: boolean;
    prefix: string;
}

export interface InterfacePortChannelSubinterfaceIpv6LinkLocalAddress {
    address: string;
    /**
     * Use link-local address
     */
    linkLocal?: boolean;
}

export interface InterfaceTunnelHelperAddress {
    address: string;
    /**
     * Helper-address is global
     */
    global?: boolean;
    /**
     * VRF name for helper-address (if different from interface VRF)
     */
    vrf?: string;
}

export interface InterfaceTunnelIpv6Address {
    /**
     * Use eui-64 interface identifier
     */
    eui64?: boolean;
    prefix: string;
}

export interface InterfaceTunnelIpv6LinkLocalAddress {
    address: string;
    /**
     * Use link-local address
     */
    linkLocal?: boolean;
}

export interface InterfaceVlanHelperAddress {
    address: string;
    /**
     * Helper-address is global
     */
    global?: boolean;
    /**
     * VRF name for helper-address (if different from interface VRF)
     */
    vrf?: string;
}

export interface InterfaceVlanIpv6Address {
    /**
     * Use eui-64 interface identifier
     */
    eui64?: boolean;
    prefix: string;
}

export interface InterfaceVlanIpv6LinkLocalAddress {
    address: string;
    /**
     * Use link-local address
     */
    linkLocal?: boolean;
}

export interface LineConsole {
    /**
     * <0-35791>;;Timeout in minutes
     *   - Range: `0`-`35791`
     */
    execTimeoutMinutes?: number;
    /**
     * <0-2147483>;;Timeout in seconds
     *   - Range: `0`-`2147483`
     */
    execTimeoutSeconds?: number;
    /**
     * - Choices: `0`
     */
    first: string;
    loginAuthentication?: string;
    loginLocal?: boolean;
    password?: string;
    /**
     * Set exec level password
     *   - Range: `0`-`255`
     */
    passwordLevel?: number;
    /**
     * - Choices: `0`, `7`
     */
    passwordType?: string;
    /**
     * - Range: `0`-`15`
     */
    privilegeLevel?: number;
    /**
     * Set async line stop bits
     *   - Choices: `1`, `1.5`, `2`
     */
    stopbits?: string;
}

export interface LineVty {
    accessClasses?: outputs.LineVtyAccessClass[];
    /**
     * Use an authorization list with this name
     */
    authorizationExec?: string;
    /**
     * Use the default authorization list
     */
    authorizationExecDefault?: boolean;
    escapeCharacter?: string;
    /**
     * <0-35791>;;Timeout in minutes
     *   - Range: `0`-`35791`
     */
    execTimeoutMinutes?: number;
    /**
     * <0-2147483>;;Timeout in seconds
     *   - Range: `0`-`2147483`
     */
    execTimeoutSeconds?: number;
    /**
     * - Range: `0`-`1869`
     */
    first: number;
    /**
     * - Range: `1`-`1869`
     */
    last?: number;
    loginAuthentication?: string;
    password?: string;
    /**
     * Set exec level password
     *   - Range: `0`-`255`
     */
    passwordLevel?: number;
    /**
     * - Choices: `0`, `7`
     */
    passwordType?: string;
    /**
     * Define which protocols to use when connecting to the terminal server
     */
    transportInput?: string;
    /**
     * All protocols
     */
    transportInputAll?: boolean;
    /**
     * Define no transport protocols for line
     */
    transportInputNone?: boolean;
    /**
     * - Choices: `acercon`, `lat`, `mop`, `nasi`, `none`, `pad`, `rlogin`, `ssh`, `telnet`, `udptn`
     */
    transportPreferredProtocol?: string;
}

export interface LineVtyAccessClass {
    accessList: string;
    /**
     * - Choices: `in`, `out`
     */
    direction: string;
    /**
     * Same access list is applied for all VRFs
     */
    vrfAlso?: boolean;
}

export interface LoggingIpv4Host {
    ipv4Host: string;
}

export interface LoggingIpv4HostTransportTransportTcpPort {
    /**
     * Specify the TCP port number (default=601)
     *   - Range: `1`-`65535`
     */
    portNumber: number;
}

export interface LoggingIpv4HostTransportTransportTlsPort {
    /**
     * Specify the TLS port number (default=6514)
     *   - Range: `1025`-`65535`
     */
    portNumber: number;
    /**
     * Specify the TLS profile
     */
    profile?: string;
}

export interface LoggingIpv4HostTransportTransportUdpPort {
    /**
     * Specify the UDP port number (default=514)
     *   - Range: `1`-`65535`
     */
    portNumber: number;
}

export interface LoggingIpv4HostVrfTransportTransportTcpPort {
    /**
     * Specify the TCP port number (default=601)
     *   - Range: `1`-`65535`
     */
    portNumber: number;
}

export interface LoggingIpv4HostVrfTransportTransportTlsPort {
    /**
     * Specify the TLS port number (default=6514)
     *   - Range: `1025`-`65535`
     */
    portNumber: number;
    /**
     * Specify the TLS profile
     */
    profile?: string;
}

export interface LoggingIpv4HostVrfTransportTransportUdpPort {
    /**
     * Specify the UDP port number (default=514)
     *   - Range: `1`-`65535`
     */
    portNumber: number;
}

export interface LoggingIpv4VrfHost {
    ipv4Host: string;
    /**
     * Set VRF option
     */
    vrf: string;
}

export interface LoggingIpv6Host {
    ipv6Host: string;
}

export interface LoggingIpv6HostTransportTransportTcpPort {
    /**
     * Specify the TCP port number (default=601)
     *   - Range: `1`-`65535`
     */
    portNumber: number;
}

export interface LoggingIpv6HostTransportTransportTlsPort {
    /**
     * Specify the TLS port number (default=6514)
     *   - Range: `1025`-`65535`
     */
    portNumber: number;
    /**
     * Specify the TLS profile
     */
    profile?: string;
}

export interface LoggingIpv6HostTransportTransportUdpPort {
    /**
     * Specify the UDP port number (default=514)
     *   - Range: `1`-`65535`
     */
    portNumber: number;
}

export interface LoggingIpv6HostVrfTransportTransportTcpPort {
    /**
     * Specify the TCP port number (default=601)
     *   - Range: `1`-`65535`
     */
    portNumber: number;
}

export interface LoggingIpv6HostVrfTransportTransportTlsPort {
    /**
     * Specify the TLS port number (default=6514)
     *   - Range: `1025`-`65535`
     */
    portNumber: number;
    /**
     * Specify the TLS profile
     */
    profile?: string;
}

export interface LoggingIpv6HostVrfTransportTransportUdpPort {
    /**
     * Specify the UDP port number (default=514)
     *   - Range: `1`-`65535`
     */
    portNumber: number;
}

export interface LoggingIpv6VrfHost {
    ipv6Host: string;
    /**
     * Set VRF option
     */
    vrf: string;
}

export interface LoggingSourceInterfacesVrf {
    interfaceName: string;
    /**
     * Specify the vrf of source interface for logging transactions
     */
    vrf: string;
}

export interface MdtSubscriptionReceiver {
    /**
     * IP address of the receiver
     */
    address: string;
    /**
     * Network port of the receiver
     *   - Range: `0`-`65535`
     */
    port: number;
    /**
     * Receiver transport protocol.
     */
    protocol: string;
}

export interface MsdpPassword {
    addr: string;
    /**
     * - Range: `0`-`7`
     */
    encryption?: number;
    password: string;
}

export interface MsdpPeer {
    addr: string;
    /**
     * Loopback interface
     *   - Range: `0`-`2147483647`
     */
    connectSourceLoopback?: number;
    /**
     * Configured AS number
     *   - Range: `1`-`65535`
     */
    remoteAs?: number;
}

export interface MsdpVrfPassword {
    addr: string;
    /**
     * - Range: `0`-`7`
     */
    encryption?: number;
    password: string;
}

export interface MsdpVrfPeer {
    addr: string;
    /**
     * Loopback interface
     *   - Range: `0`-`2147483647`
     */
    connectSourceLoopback?: number;
    /**
     * Configured AS number
     *   - Range: `1`-`65535`
     */
    remoteAs?: number;
}

export interface NtpAuthenticationKey {
    /**
     * CMAC-AES-128 (digest length = 128 bits,  key length = [16 or 32] bytes)
     */
    cmacAes128?: string;
    /**
     * Authentication key encryption type
     *   - Range: `0`-`4294967295`
     */
    encryptionType?: number;
    /**
     * HMAC-SHA1 (digest length = 160 bits,  key length = [1-32] bytes)
     */
    hmacSha1?: string;
    /**
     * HMAC-SHA2-256 (digest length = 256 bits,  key length = [1-32] bytes)
     */
    hmacSha2256?: string;
    /**
     * MD5 authentication
     */
    md5?: string;
    /**
     * - Range: `1`-`4294967295`
     */
    number: number;
    /**
     * SHA1 (digest length = 160 bits,  key length = [1-32] bytes)
     */
    sha1?: string;
    /**
     * SHA-256 (digest length = 256 bits,  key length = [1-32] bytes)
     */
    sha2?: string;
}

export interface NtpPeer {
    ipAddress: string;
    /**
     * Configure peer authentication key
     *   - Range: `1`-`4294967295`
     */
    key?: number;
    /**
     * Prefer this peer when possible
     */
    prefer?: boolean;
    /**
     * Interface for source address
     */
    source?: string;
    /**
     * Configure NTP version
     *   - Range: `1`-`4`
     */
    version?: number;
}

export interface NtpPeerVrf {
    name: string;
    peers?: outputs.NtpPeerVrfPeer[];
}

export interface NtpPeerVrfPeer {
    ipAddress: string;
    /**
     * Configure peer authentication key
     *   - Range: `1`-`4294967295`
     */
    key?: number;
    /**
     * Prefer this peer when possible
     */
    prefer?: boolean;
    /**
     * Configure NTP version
     *   - Range: `1`-`4`
     */
    version?: number;
}

export interface NtpServer {
    ipAddress: string;
    /**
     * Configure peer authentication key
     *   - Range: `1`-`4294967295`
     */
    key?: number;
    /**
     * Prefer this peer when possible
     */
    prefer?: boolean;
    /**
     * Interface for source address
     */
    source?: string;
    /**
     * Configure NTP version
     *   - Range: `1`-`4`
     */
    version?: number;
}

export interface NtpServerVrf {
    name: string;
    servers?: outputs.NtpServerVrfServer[];
}

export interface NtpServerVrfServer {
    ipAddress: string;
    /**
     * Configure peer authentication key
     *   - Range: `1`-`4294967295`
     */
    key?: number;
    /**
     * Prefer this peer when possible
     */
    prefer?: boolean;
    /**
     * Configure NTP version
     *   - Range: `1`-`4`
     */
    version?: number;
}

export interface OspfArea {
    /**
     * OSPF area ID
     */
    areaId: string;
    /**
     * Use message-digest authentication
     */
    authenticationMessageDigest?: boolean;
    /**
     * Specify a NSSA area
     */
    nssa?: boolean;
    /**
     * Originate Type 7 default into NSSA area
     */
    nssaDefaultInformationOriginate?: boolean;
    /**
     * OSPF default metric
     *   - Range: `0`-`16777214`
     */
    nssaDefaultInformationOriginateMetric?: number;
    /**
     * OSPF metric type for default routes
     *   - Range: `1`-`2`
     */
    nssaDefaultInformationOriginateMetricType?: number;
    /**
     * No redistribution into this NSSA area
     */
    nssaNoRedistribution?: boolean;
    /**
     * Do not send summary LSA into NSSA
     */
    nssaNoSummary?: boolean;
}

export interface OspfNeighbor {
    /**
     * OSPF cost for point-to-multipoint neighbor
     *   - Range: `1`-`65535`
     */
    cost?: number;
    /**
     * Neighbor address
     */
    ip: string;
    /**
     * OSPF priority of non-broadcast neighbor
     *   - Range: `0`-`255`
     */
    priority?: number;
}

export interface OspfNetwork {
    /**
     * Set the OSPF area ID
     */
    area?: string;
    /**
     * Network number
     */
    ip: string;
    /**
     * OSPF wild card bits
     */
    wildcard?: string;
}

export interface OspfSummaryAddress {
    /**
     * IP summary address
     */
    ip: string;
    /**
     * Summary mask
     */
    mask?: string;
}

export interface OspfVrfArea {
    /**
     * OSPF area ID
     */
    areaId: string;
    /**
     * Use message-digest authentication
     */
    authenticationMessageDigest?: boolean;
    /**
     * Specify a NSSA area
     */
    nssa?: boolean;
    /**
     * Originate Type 7 default into NSSA area
     */
    nssaDefaultInformationOriginate?: boolean;
    /**
     * OSPF default metric
     *   - Range: `0`-`16777214`
     */
    nssaDefaultInformationOriginateMetric?: number;
    /**
     * OSPF metric type for default routes
     *   - Range: `1`-`2`
     */
    nssaDefaultInformationOriginateMetricType?: number;
    /**
     * No redistribution into this NSSA area
     */
    nssaNoRedistribution?: boolean;
    /**
     * Do not send summary LSA into NSSA
     */
    nssaNoSummary?: boolean;
}

export interface OspfVrfNeighbor {
    /**
     * OSPF cost for point-to-multipoint neighbor
     *   - Range: `1`-`65535`
     */
    cost?: number;
    /**
     * Neighbor address
     */
    ip: string;
    /**
     * OSPF priority of non-broadcast neighbor
     *   - Range: `0`-`255`
     */
    priority?: number;
}

export interface OspfVrfNetwork {
    /**
     * Set the OSPF area ID
     */
    area?: string;
    /**
     * Network number
     */
    ip: string;
    /**
     * OSPF wild card bits
     */
    wildcard?: string;
}

export interface OspfVrfSummaryAddress {
    /**
     * IP summary address
     */
    ip: string;
    /**
     * Summary mask
     */
    mask?: string;
}

export interface PimRpAddress {
    /**
     * IP Access-list
     */
    accessList: string;
    /**
     * Group range treated in bidirectional shared-tree mode
     */
    bidir?: boolean;
    /**
     * Overrides dynamically learnt RP mappings
     */
    override?: boolean;
    /**
     * IP address of Rendezvous-point for group
     */
    rpAddress?: string;
}

export interface PimRpCandidate {
    /**
     * Group range treated in bidirectional shared-tree mode
     */
    bidir?: boolean;
    /**
     * IP Access list
     */
    groupList?: string;
    /**
     * Autonomic-Networking virtual interface
     */
    interface: string;
    /**
     * RP candidate advertisement interval
     *   - Range: `1`-`16383`
     */
    interval?: number;
    /**
     * RP candidate priority
     *   - Range: `0`-`255`
     */
    priority?: number;
}

export interface PimVrfRpAddress {
    /**
     * IP Access-list
     */
    accessList: string;
    /**
     * Group range treated in bidirectional shared-tree mode
     */
    bidir?: boolean;
    /**
     * Overrides dynamically learnt RP mappings
     */
    override?: boolean;
    /**
     * IP address of Rendezvous-point for group
     */
    rpAddress?: string;
}

export interface PimVrfRpCandidate {
    /**
     * Group range treated in bidirectional shared-tree mode
     */
    bidir?: boolean;
    /**
     * IP Access list
     */
    groupList?: string;
    /**
     * Autonomic-Networking virtual interface
     */
    interface: string;
    /**
     * RP candidate advertisement interval
     *   - Range: `1`-`16383`
     */
    interval?: number;
    /**
     * RP candidate priority
     *   - Range: `0`-`255`
     */
    priority?: number;
}

export interface PolicyMapClass {
    actions?: outputs.PolicyMapClassAction[];
    name: string;
}

export interface PolicyMapClassAction {
    /**
     * - Range: `1`-`100000000`
     */
    bandwidthBits?: number;
    /**
     * % of total Bandwidth
     *   - Range: `1`-`100`
     */
    bandwidthPercent?: number;
    /**
     * - Choices: `percent`, `ratio`
     */
    bandwidthRemainingOption?: string;
    /**
     * % of the remaining bandwidth
     *   - Range: `1`-`100`
     */
    bandwidthRemainingPercent?: number;
    /**
     * ratio for sharing excess bandwidth
     *   - Range: `1`-`65536`
     */
    bandwidthRemainingRatio?: number;
    /**
     * - Range: `32`-`2000000`
     */
    priorityBurst?: number;
    /**
     * Multi-Level Priority Queue
     *   - Range: `1`-`2`
     */
    priorityLevel?: number;
    /**
     * - Range: `1`-`64000000`
     */
    queueLimit?: number;
    /**
     * - Choices: `bytes`, `ms`, `packets`, `us`
     */
    queueLimitType?: string;
    /**
     * Target Bit Rate (bits/sec)
     *   - Range: `8000`-`100000000000`
     */
    shapeAverageBitRate?: number;
    /**
     * bits per interval, excess.
     *   - Range: `0`-`154400000`
     */
    shapeAverageBitsPerIntervalExcess?: number;
    /**
     * bits per interval, sustained. Recommend not to configure, algo finds the best value
     *   - Range: `256`-`154400000`
     */
    shapeAverageBitsPerIntervalSustained?: number;
    /**
     * sustained burst in milliseconds. Recommend not to configure it, the algorithm will find out the best value
     *   - Range: `10`-`2000`
     */
    shapeAverageBurstSizeSustained?: number;
    /**
     * milliseconds
     */
    shapeAverageMs?: boolean;
    /**
     * % of interface bandwidth for Committed information rate
     *   - Range: `0`-`100`
     */
    shapeAveragePercent?: number;
    /**
     * - Choices: `bandwidth`, `compression`, `dbl`, `drop`, `estimate`, `fair-queue`, `forward`, `netflow-sampler`, `police`, `priority`, `queue-buffers`, `queue-limit`, `random-detect`, `service-policy`, `set`, `shape`, `trust`
     */
    type: string;
}

export interface PolicyMapEventClassNumber {
    /**
     * action number, 1 for 1st class, 2 for 2nd...
     */
    actionNumbers?: outputs.PolicyMapEventClassNumberActionNumber[];
    /**
     * The class type this control policy-map triggers upon
     */
    class?: string;
    /**
     * - Choices: `do-all`, `do-until-failure`, `do-until-success`
     */
    executionType?: string;
    /**
     * - Range: `1`-`254`
     */
    number: number;
}

export interface PolicyMapEventClassNumberActionNumber {
    /**
     * activate interface template
     */
    activateInterfaceTemplate?: string;
    /**
     * policy type control subscriber
     */
    activatePolicyTypeControlSubscriber?: string;
    /**
     * Named Method List
     */
    activateServiceTemplateConfigAaaList?: string;
    /**
     * Template precedence
     *   - Range: `1`-`254`
     */
    activateServiceTemplateConfigPrecedence?: number;
    /**
     * Replace all existing authorization data and services
     */
    activateServiceTemplateConfigReplaceAll?: boolean;
    /**
     * activate service template
     */
    activateServiceTemplateConfigServiceTemplate?: string;
    /**
     * Specify authentication method list
     */
    authenticateUsingAaaAuthcList?: string;
    /**
     * Specify authorization method list
     */
    authenticateUsingAaaAuthzList?: string;
    /**
     * Enabling Dot1x Authenticator & Supplicant
     */
    authenticateUsingBoth?: boolean;
    /**
     * - Choices: `dot1x`, `mab`, `webauth`
     */
    authenticateUsingMethod?: string;
    /**
     * Specify parameter map name
     */
    authenticateUsingParameterMap?: string;
    /**
     * Method priority
     *   - Range: `1`-`254`
     */
    authenticateUsingPriority?: number;
    /**
     * Number of times to retry failed authentications
     *   - Range: `1`-`5`
     */
    authenticateUsingRetries?: number;
    /**
     * Time interval between retries
     *   - Range: `0`-`65535`
     */
    authenticateUsingRetryTime?: number;
    /**
     * restarts the auth sequence after the specified number of sec
     *   - Range: `1`-`65535`
     */
    authenticationRestart?: number;
    /**
     * authorize session
     */
    authorize?: boolean;
    /**
     * clears authenticated data hosts on the port
     */
    clearAuthenticatedDataHostsOnPort?: boolean;
    /**
     * clears an active session
     */
    clearSession?: boolean;
    /**
     * activate interface template
     */
    deactivateInterfaceTemplate?: string;
    /**
     * policy type control subscriber
     */
    deactivatePolicyTypeControlSubscriber?: string;
    /**
     * activate service template
     */
    deactivateServiceTemplate?: string;
    /**
     * temporarily disable port
     */
    errDisable?: boolean;
    /**
     * map identity-update attribute to a auto-conf templates
     */
    mapAttributeToServiceTable?: string;
    /**
     * notifies the session attributes
     */
    notify?: boolean;
    /**
     * - Range: `1`-`254`
     */
    number: number;
    /**
     * pause reauthentication
     */
    pauseReauthentication?: boolean;
    /**
     * silently drop violating packets
     */
    protect?: boolean;
    /**
     * clear existing session and create session for violating host
     */
    replace?: boolean;
    /**
     * drop violating packets and generate a syslog
     */
    restrict?: boolean;
    /**
     * resume reauthentication
     */
    resumeReauthentication?: boolean;
    /**
     * set domain
     *   - Choices: `data`, `switch`, `voice`
     */
    setDomain?: string;
    /**
     * timer name
     */
    setTimerName?: string;
    /**
     * Enter a value between 1 and 65535
     *   - Range: `0`-`65535`
     */
    setTimerValue?: number;
    /**
     * terminate auth method
     *   - Choices: `dot1x`, `mab`, `webauth`
     */
    terminateConfig?: string;
    /**
     * unauthorize session
     */
    unauthorize?: boolean;
}

export interface PrefixListPrefix {
    /**
     * Specify deny or permit action
     *   - Choices: `deny`, `permit`
     */
    action?: string;
    /**
     * Minimum prefix length to be matched
     *   - Range: `1`-`32`
     */
    ge?: number;
    /**
     * IPv4 Prefix
     */
    ip?: string;
    /**
     * Maximum prefix length to be matched
     *   - Range: `1`-`32`
     */
    le?: number;
    /**
     * Name of the prefix-list
     */
    name: string;
    /**
     * Seq Number of the prefix-list
     *   - Range: `1`-`4294967294`
     */
    seq: number;
}

export interface PrefixListPrefixListDescription {
    /**
     * Prefix-list specific description
     */
    description?: string;
    name: string;
}

export interface RadiusServerAttribute {
    /**
     * Include attribute
     */
    accessRequestInclude?: boolean;
    attribute31Parameters?: outputs.RadiusServerAttributeAttribute31Parameter[];
    number: string;
    sendAttributes?: string[];
}

export interface RadiusServerAttributeAttribute31Parameter {
    /**
     * - Choices: `mac`, `send`
     */
    callingStationId: string;
    /**
     * Specify format (default format ex: 0000.4096.3e4a) ietf - format ex: 00-00-40-96-3E-4A
     *   - Choices: `ietf`
     */
    idMacFormat?: string;
    /**
     * - Choices: `lower-case`, `upper-case`
     */
    idMacLuCase?: string;
    idSendMacOnly?: boolean;
    idSendNasPortDetail?: boolean;
}

export interface RestconfList {
    /**
     * List of maps of key-value pairs which represents the YANG leafs and its values.
     */
    items?: {[key: string]: string}[];
    /**
     * YANG list key attribute. In case of multiple keys, those should be separated by a comma (`,`).
     */
    key: string;
    /**
     * YANG list name.
     */
    name: string;
    /**
     * YANG leaf-list values.
     */
    values?: string[];
}

export interface RouteMapEntry {
    /**
     * Continue on a different entry within the route-map
     */
    continue?: boolean;
    /**
     * Route-map entry sequence number
     *   - Range: `0`-`65535`
     */
    continueSequenceNumber?: number;
    /**
     * Route-map comment
     */
    description?: string;
    /**
     * AS path access-list
     */
    matchAsPaths?: number[];
    /**
     * AS path access-list (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
     */
    matchAsPathsLegacies?: number[];
    /**
     * Do exact matching of communities
     */
    matchCommunityListExactMatch?: boolean;
    /**
     * Named Access List
     */
    matchCommunityLists?: string[];
    /**
     * Named Access List (DEPRECATED- please use community-list in Cisco-IOS-XE-bgp.yang)
     */
    matchCommunityListsLegacies?: string[];
    /**
     * Named Access List
     */
    matchExtcommunityLists?: string[];
    /**
     * Named Access List (DEPRECATED- please use extcommunity-list in Cisco-IOS-XE-bgp.yang)
     */
    matchExtcommunityListsLegacies?: string[];
    matchInterfaces?: string[];
    matchIpAddressAccessLists?: string[];
    /**
     * Match entries of prefix-lists
     */
    matchIpAddressPrefixLists?: string[];
    matchIpNextHopAccessLists?: string[];
    /**
     * Match entries of prefix-lists
     */
    matchIpNextHopPrefixLists?: string[];
    matchIpv6AddressAccessLists?: string;
    /**
     * IPv6 prefix-list
     */
    matchIpv6AddressPrefixLists?: string;
    matchIpv6NextHopAccessLists?: string;
    /**
     * IPv6 prefix-list
     */
    matchIpv6NextHopPrefixLists?: string;
    matchLocalPreferences?: number[];
    matchLocalPreferencesLegacies?: number[];
    /**
     * external route (BGP, EIGRP and OSPF type 1/2)
     */
    matchRouteTypeExternal?: boolean;
    /**
     * OSPF external type 1 route
     */
    matchRouteTypeExternalType1?: boolean;
    /**
     * OSPF external type 2 route
     */
    matchRouteTypeExternalType2?: boolean;
    /**
     * internal route (including OSPF intra/inter area)
     */
    matchRouteTypeInternal?: boolean;
    /**
     * IS-IS level-1 route
     */
    matchRouteTypeLevel1?: boolean;
    /**
     * IS-IS level-2 route
     */
    matchRouteTypeLevel2?: boolean;
    /**
     * locally generated route (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
     */
    matchRouteTypeLocal?: boolean;
    /**
     * Border Gateway Protocol (BGP)
     */
    matchSourceProtocolBgps?: string[];
    /**
     * Connected
     */
    matchSourceProtocolConnected?: boolean;
    /**
     * Border Gateway Protocol (BGP)
     */
    matchSourceProtocolEigrps?: string[];
    /**
     * ISO IS-IS
     */
    matchSourceProtocolIsis?: boolean;
    /**
     * Locator ID Separation Protocol (LISP)
     */
    matchSourceProtocolLisp?: boolean;
    /**
     * Open Shortest Path First (OSPF)
     */
    matchSourceProtocolOspfs?: string[];
    /**
     * OSPFv3
     */
    matchSourceProtocolOspfv3s?: string[];
    /**
     * Routing Information Protocol (RIP)
     */
    matchSourceProtocolRip?: boolean;
    /**
     * Static routes
     */
    matchSourceProtocolStatic?: boolean;
    /**
     * Tag value
     */
    matchTags?: number[];
    /**
     * tracking object
     *   - Range: `1`-`1000`
     */
    matchTrack?: number;
    /**
     * - Choices: `deny`, `permit`
     */
    operation?: string;
    /**
     * - Range: `0`-`65535`
     */
    seq: number;
    /**
     * <1-65535>;;AS number
     */
    setAsPathPrependAs?: string;
    /**
     * <1-65535>;;AS number (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
     */
    setAsPathPrependAsLegacy?: string;
    /**
     * - Range: `1`-`10`
     */
    setAsPathPrependLastAs?: number;
    /**
     * - Range: `1`-`10`
     */
    setAsPathPrependLastAsLegacy?: number;
    /**
     * Replace each AS number in the AS-path with the local AS
     */
    setAsPathReplaceAny?: boolean;
    setAsPathReplaceAs?: outputs.RouteMapEntrySetAsPathReplaceA[];
    /**
     * Set the tag as an AS-path attribute
     */
    setAsPathTag?: boolean;
    /**
     * Set the tag as an AS-path attribute (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
     */
    setAsPathTagLegacy?: boolean;
    setCommunities?: string[];
    setCommunitiesAdditive?: boolean;
    setCommunitiesAdditiveLegacy?: boolean;
    setCommunitiesLegacies?: string[];
    /**
     * Delete matching communities
     */
    setCommunityListDelete?: boolean;
    /**
     * Delete matching communities (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
     */
    setCommunityListDeleteLegacy?: boolean;
    /**
     * - Range: `100`-`500`
     */
    setCommunityListExpanded?: number;
    /**
     * - Range: `100`-`500`
     */
    setCommunityListExpandedLegacy?: number;
    setCommunityListName?: string;
    setCommunityListNameLegacy?: string;
    /**
     * - Range: `1`-`99`
     */
    setCommunityListStandard?: number;
    /**
     * - Range: `1`-`99`
     */
    setCommunityListStandardLegacy?: number;
    /**
     * No community attribute
     */
    setCommunityNone?: boolean;
    /**
     * No community attribute (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
     */
    setCommunityNoneLegacy?: boolean;
    /**
     * SPAN source interface
     */
    setDefaultInterfaces?: string[];
    setExtcomunityRtLegacies?: string[];
    setExtcomunityRts?: string[];
    setExtcomunitySoo?: string;
    setExtcomunitySooLegacy?: string;
    /**
     * VPN Distinguisher Extended Community
     */
    setExtcomunityVpnDistinguisher?: string;
    setExtcomunityVpnDistinguisherAdditive?: boolean;
    setExtcomunityVpnDistinguisherLegacy?: string;
    setGlobal?: boolean;
    /**
     * Interface specific information
     */
    setInterfaces?: string[];
    /**
     * Specify prefix-list
     */
    setIpAddress?: string;
    setIpDefaultGlobalNextHopAddresses?: string[];
    setIpDefaultNextHopAddresses?: string[];
    setIpGlobalNextHopAddresses?: string[];
    setIpNextHopAddresses?: string[];
    /**
     * Use self address (for BGP only)
     */
    setIpNextHopSelf?: boolean;
    /**
     * - Range: `0`-`99`
     */
    setIpQosGroup?: number;
    /**
     * IPv6 prefix-list
     */
    setIpv6Addresses?: string[];
    /**
     * Next hop along path
     */
    setIpv6DefaultGlobalNextHop?: string;
    /**
     * Default next hop IPv6 address
     */
    setIpv6DefaultNextHops?: string[];
    /**
     * Next hop IPv6 address
     */
    setIpv6NextHops?: string[];
    /**
     * Import into a level-1 area
     */
    setLevel1?: boolean;
    /**
     * Import into level-1 and level-2
     */
    setLevel12?: boolean;
    /**
     * Import into level-2 sub-domain
     */
    setLevel2?: boolean;
    /**
     * Preference value
     *   - Range: `0`-`4294967295`
     */
    setLocalPreference?: number;
    /**
     * Preference value (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
     *   - Range: `0`-`4294967295`
     */
    setLocalPreferenceLegacy?: number;
    /**
     * +/-<metric>;;Add or subtract metric
     */
    setMetricChange?: string;
    /**
     * EIGRP delay metric, in 10 microsecond units
     */
    setMetricDelay?: string;
    /**
     * EIGRP Effective bandwidth metric (Loading) where 255 is 100% loaded
     *   - Range: `1`-`255`
     */
    setMetricLoading?: number;
    /**
     * EIGRP MTU of the path
     *   - Range: `1`-`4294967295`
     */
    setMetricMtu?: number;
    /**
     * EIGRP reliability metric where 255 is 100% reliable
     *   - Range: `0`-`255`
     */
    setMetricReliability?: number;
    /**
     * Type of metric for destination routing protocol
     *   - Choices: `external`, `internal`, `type-1`, `type-2`
     */
    setMetricType?: string;
    /**
     * Metric value or Bandwidth in Kbits per second
     *   - Range: `0`-`4294967295`
     */
    setMetricValue?: number;
    /**
     * Tag value
     *   - Range: `0`-`4294967295`
     */
    setTag?: number;
    /**
     * VPN Routing/Forwarding instance name
     */
    setVrf?: string;
    /**
     * BGP weight for routing table
     *   - Range: `0`-`65535`
     */
    setWeight?: number;
    /**
     * BGP weight for routing table (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
     *   - Range: `0`-`65535`
     */
    setWeightLegacy?: number;
}

export interface RouteMapEntrySetAsPathReplaceA {
    /**
     * <1-65535>;;AS number
     */
    asNumber: string;
}

export interface ServiceTemplateAccessGroup {
    /**
     * Specify the access list name
     */
    name: string;
}

export interface ServiceTemplateInterfaceTemplate {
    /**
     * Enter name of interface template
     */
    name: string;
}

export interface ServiceTemplateTag {
    /**
     * Specify the Tag name
     */
    name: string;
}

export interface SnmpServerContext {
    name: string;
}

export interface SnmpServerGroupV3Security {
    /**
     * Access-list name
     */
    accessAclName?: string;
    /**
     * Specify IPv6 Named Access-List
     */
    accessIpv6Acl?: string;
    /**
     * Standard IP Access-list allowing access with this community string
     *   - Range: `1`-`99`
     */
    accessStandardAcl?: number;
    /**
     * specify a context to associate these views for the group
     */
    contextNode?: string;
    /**
     * context name match criteria
     *   - Choices: `exact`, `prefix`
     */
    matchNode?: string;
    /**
     * specify a notify view for the group
     */
    notifyNode?: string;
    /**
     * specify a read view for the group
     */
    readNode?: string;
    /**
     * security level type
     *   - Choices: `auth`, `noauth`, `priv`
     */
    securityLevel: string;
    /**
     * specify a write view for the group
     */
    writeNode?: string;
}

export interface SnmpServerHost {
    /**
     * SNMPv1/v2c community string or SNMPv3 user name
     */
    communityOrUser?: string;
    /**
     * Specifies an encryption type for community string
     *   - Choices: `0`, `6`, `7`
     */
    encryption?: string;
    ipAddress: string;
    /**
     * SNMP version to use for notification messages
     *   - Choices: `1`, `2c`, `3`
     */
    version?: string;
}

export interface SnmpServerSnmpCommunity {
    /**
     * Access-list name
     */
    accessListName?: string;
    /**
     * Specify IPv6 Named Access-List
     */
    ipv6?: string;
    name: string;
    /**
     * - Choices: `ro`, `rw`
     */
    permission?: string;
    /**
     * Restrict this community to a named MIB view
     */
    view?: string;
}

export interface SnmpServerView {
    /**
     * - Choices: `excluded`, `included`
     */
    incExl?: string;
    mib: string;
    name: string;
}

export interface StaticRouteNextHop {
    /**
     * Next hop address is global
     */
    global?: boolean;
    /**
     * - Range: `1`-`255`
     */
    metric?: number;
    /**
     * Specify name of the next hop
     */
    name?: string;
    nextHop: string;
    /**
     * permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
}

export interface StaticRouteVrfRoute {
    mask: string;
    nextHops?: outputs.StaticRouteVrfRouteNextHop[];
    prefix: string;
}

export interface StaticRouteVrfRouteNextHop {
    /**
     * Next hop address is global
     */
    global?: boolean;
    /**
     * - Range: `1`-`255`
     */
    metric?: number;
    /**
     * Specify name of the next hop
     */
    name?: string;
    nextHop: string;
    /**
     * permanent route
     */
    permanent?: boolean;
    /**
     * Set tag for this route
     *   - Range: `1`-`4294967295`
     */
    tag?: number;
}

export interface SystemIpHttpAuthenticationAaaCommandAuthorization {
    /**
     * Enable level
     *   - Range: `0`-`15`
     */
    level: number;
    /**
     * Use an authorization list with this name
     */
    name?: string;
}

export interface SystemMulticastRoutingVrf {
    /**
     * Distributed multicast switching
     */
    distributed?: boolean;
    vrf: string;
}

export interface TemplateDeviceTrackingAttachPolicy {
    policyName: string;
    /**
     * VLAN IDs of the VLANs for which this policy applies
     */
    vlanRange?: string;
}

export interface TemplateIpAccessGroup {
    /**
     * Access control list name
     */
    accessList?: string;
    /**
     * packet flow direction
     *   - Choices: `in`, `out`
     */
    direction: string;
}

export interface TemplateSwitchportPortSecurityMaximumRange {
    /**
     * Maximum addresses
     *   - Range: `1`-`3072`
     */
    range: number;
    /**
     * Max secure addresses per vlan
     */
    vlan?: boolean;
    /**
     * access vlan
     */
    vlanAccess?: boolean;
}

export interface VrfIpv4RouteTargetExport {
    /**
     * Value
     */
    value: string;
}

export interface VrfIpv4RouteTargetExportStitching {
    /**
     * VXLAN route target set
     *   - Default value: `true`
     */
    stitching: boolean;
    /**
     * Value
     */
    value: string;
}

export interface VrfIpv4RouteTargetImport {
    /**
     * Value
     */
    value: string;
}

export interface VrfIpv4RouteTargetImportStitching {
    /**
     * VXLAN route target set
     *   - Default value: `true`
     */
    stitching: boolean;
    /**
     * Value
     */
    value: string;
}

export interface VrfIpv6RouteTargetExport {
    /**
     * Value
     */
    value: string;
}

export interface VrfIpv6RouteTargetExportStitching {
    /**
     * VXLAN route target set
     *   - Default value: `true`
     */
    stitching: boolean;
    /**
     * Value
     */
    value: string;
}

export interface VrfIpv6RouteTargetImport {
    /**
     * Value
     */
    value: string;
}

export interface VrfIpv6RouteTargetImportStitching {
    /**
     * VXLAN route target set
     *   - Default value: `true`
     */
    stitching: boolean;
    /**
     * Value
     */
    value: string;
}

export interface VrfRouteTargetExport {
    /**
     * VXLAN route target set
     */
    stitching?: boolean;
    /**
     * Value
     */
    value: string;
}

export interface VrfRouteTargetImport {
    /**
     * VXLAN route target set
     */
    stitching?: boolean;
    /**
     * Value
     */
    value: string;
}

export namespace config {
    export interface Devices {
        /**
         * Device name.
         */
        name: string;
        /**
         * URL of the Cisco IOS-XE device.
         */
        url: string;
    }

}
