// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getErrdisable(args?: GetErrdisableArgs, opts?: pulumi.InvokeOptions): Promise<GetErrdisableResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("iosxe:index/getErrdisable:getErrdisable", {
        "device": args.device,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getErrdisable.
 */
export interface GetErrdisableArgs {
    device?: string;
}

/**
 * A collection of values returned by getErrdisable.
 */
export interface GetErrdisableResult {
    readonly detectCauseAll: boolean;
    readonly detectCauseArpInspection: boolean;
    readonly detectCauseBpduguard: boolean;
    readonly detectCauseDhcpRateLimit: boolean;
    readonly detectCauseDtpFlap: boolean;
    readonly detectCauseGbicInvalid: boolean;
    readonly detectCauseInlinePower: boolean;
    readonly detectCauseL2ptguard: boolean;
    readonly detectCauseLinkFlap: boolean;
    readonly detectCauseLoopback: boolean;
    readonly detectCauseLoopdetect: boolean;
    readonly detectCauseMlacpMinlink: boolean;
    readonly detectCausePagpFlap: boolean;
    readonly detectCausePppoeIaRateLimit: boolean;
    readonly detectCauseSecurityViolationShutdownVlan: boolean;
    readonly detectCauseSfpConfigMismatch: boolean;
    readonly detectCauseSmallFrame: boolean;
    readonly device?: string;
    readonly flapSettingCauseDtpFlapMaxFlaps: number;
    readonly flapSettingCauseDtpFlapTime: number;
    readonly flapSettingCauseLinkFlapMaxFlaps: number;
    readonly flapSettingCauseLinkFlapTime: number;
    readonly flapSettingCausePagpFlapMaxFlaps: number;
    readonly flapSettingCausePagpFlapTime: number;
    readonly id: string;
    readonly recoveryCauseAll: boolean;
    readonly recoveryCauseArpInspection: boolean;
    readonly recoveryCauseBpduguard: boolean;
    readonly recoveryCauseChannelMisconfig: boolean;
    readonly recoveryCauseDhcpRateLimit: boolean;
    readonly recoveryCauseDtpFlap: boolean;
    readonly recoveryCauseGbicInvalid: boolean;
    readonly recoveryCauseInlinePower: boolean;
    readonly recoveryCauseL2ptguard: boolean;
    readonly recoveryCauseLinkFlap: boolean;
    readonly recoveryCauseLinkMonitorFailure: boolean;
    readonly recoveryCauseLoopback: boolean;
    readonly recoveryCauseLoopdetect: boolean;
    readonly recoveryCauseMacLimit: boolean;
    readonly recoveryCauseMlacpMinlink: boolean;
    readonly recoveryCausePagpFlap: boolean;
    readonly recoveryCausePortModeFailure: boolean;
    readonly recoveryCausePppoeIaRateLimit: boolean;
    readonly recoveryCausePsecureViolation: boolean;
    readonly recoveryCausePsp: boolean;
    readonly recoveryCauseSecurityViolation: boolean;
    readonly recoveryCauseSfpConfigMismatch: boolean;
    readonly recoveryCauseSmallFrame: boolean;
    readonly recoveryCauseStormControl: boolean;
    readonly recoveryCauseUdld: boolean;
    readonly recoveryCauseUnicastFlood: boolean;
    readonly recoveryCauseVmps: boolean;
    readonly recoveryInterval: number;
}
export function getErrdisableOutput(args?: GetErrdisableOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetErrdisableResult> {
    return pulumi.output(args).apply((a: any) => getErrdisable(a, opts))
}

/**
 * A collection of arguments for invoking getErrdisable.
 */
export interface GetErrdisableOutputArgs {
    device?: pulumi.Input<string>;
}
