// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Vtp extends pulumi.CustomResource {
    /**
     * Get an existing Vtp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VtpState, opts?: pulumi.CustomResourceOptions): Vtp {
        return new Vtp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'iosxe:index/vtp:Vtp';

    /**
     * Returns true if the given object is an instance of Vtp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vtp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vtp.__pulumiType;
    }

    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    public readonly deleteMode!: pulumi.Output<string | undefined>;
    /**
     * A device name from the provider configuration.
     */
    public readonly device!: pulumi.Output<string | undefined>;
    /**
     * Set the name of the VTP administrative domain.
     */
    public readonly domain!: pulumi.Output<string | undefined>;
    /**
     * Configure IFS filesystem file where VTP configuration is stored.
     */
    public readonly file!: pulumi.Output<string | undefined>;
    /**
     * The name of the interface providing the VTP updater ID for this device
     */
    public readonly interface!: pulumi.Output<string | undefined>;
    /**
     * Use only this interface's IP address as the VTP IP updater address
     */
    public readonly interfaceOnly!: pulumi.Output<boolean | undefined>;
    /**
     * Set the mode for MST VTP instance
     */
    public readonly modeClientMst!: pulumi.Output<boolean | undefined>;
    /**
     * Set the mode for unknown VTP instances
     */
    public readonly modeClientUnknown!: pulumi.Output<boolean | undefined>;
    /**
     * Set the mode for VLAN VTP instance
     */
    public readonly modeClientVlan!: pulumi.Output<boolean | undefined>;
    /**
     * Set the mode for MST VTP instance
     */
    public readonly modeOffMst!: pulumi.Output<boolean | undefined>;
    /**
     * Set the mode for unknown VTP instances
     */
    public readonly modeOffUnknown!: pulumi.Output<boolean | undefined>;
    /**
     * Set the mode for VLAN VTP instance
     */
    public readonly modeOffVlan!: pulumi.Output<boolean | undefined>;
    /**
     * Set the mode for MST VTP instance
     */
    public readonly modeServerMst!: pulumi.Output<boolean | undefined>;
    /**
     * Set the mode for unknown VTP instances
     */
    public readonly modeServerUnknown!: pulumi.Output<boolean | undefined>;
    /**
     * Set the mode for VLAN VTP instance
     */
    public readonly modeServerVlan!: pulumi.Output<boolean | undefined>;
    /**
     * Set the mode for MST VTP instance
     */
    public readonly modeTransparentMst!: pulumi.Output<boolean | undefined>;
    /**
     * Set the mode for unknown VTP instances
     */
    public readonly modeTransparentUnknown!: pulumi.Output<boolean | undefined>;
    /**
     * Set the mode for VLAN VTP instance
     */
    public readonly modeTransparentVlan!: pulumi.Output<boolean | undefined>;
    /**
     * The ascii password for the VTP administrative domain
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Set the VTP password hidden option
     */
    public readonly passwordHidden!: pulumi.Output<boolean | undefined>;
    /**
     * Specify the vtp password in encrypted form
     */
    public readonly passwordSecret!: pulumi.Output<boolean | undefined>;
    /**
     * Set the administrative domain to permit pruning
     */
    public readonly pruning!: pulumi.Output<boolean | undefined>;
    /**
     * Set the administrative domain to VTP version - Range: `1`-`3`
     */
    public readonly version!: pulumi.Output<number | undefined>;

    /**
     * Create a Vtp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VtpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VtpArgs | VtpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VtpState | undefined;
            resourceInputs["deleteMode"] = state ? state.deleteMode : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["file"] = state ? state.file : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["interfaceOnly"] = state ? state.interfaceOnly : undefined;
            resourceInputs["modeClientMst"] = state ? state.modeClientMst : undefined;
            resourceInputs["modeClientUnknown"] = state ? state.modeClientUnknown : undefined;
            resourceInputs["modeClientVlan"] = state ? state.modeClientVlan : undefined;
            resourceInputs["modeOffMst"] = state ? state.modeOffMst : undefined;
            resourceInputs["modeOffUnknown"] = state ? state.modeOffUnknown : undefined;
            resourceInputs["modeOffVlan"] = state ? state.modeOffVlan : undefined;
            resourceInputs["modeServerMst"] = state ? state.modeServerMst : undefined;
            resourceInputs["modeServerUnknown"] = state ? state.modeServerUnknown : undefined;
            resourceInputs["modeServerVlan"] = state ? state.modeServerVlan : undefined;
            resourceInputs["modeTransparentMst"] = state ? state.modeTransparentMst : undefined;
            resourceInputs["modeTransparentUnknown"] = state ? state.modeTransparentUnknown : undefined;
            resourceInputs["modeTransparentVlan"] = state ? state.modeTransparentVlan : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["passwordHidden"] = state ? state.passwordHidden : undefined;
            resourceInputs["passwordSecret"] = state ? state.passwordSecret : undefined;
            resourceInputs["pruning"] = state ? state.pruning : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as VtpArgs | undefined;
            resourceInputs["deleteMode"] = args ? args.deleteMode : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["file"] = args ? args.file : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["interfaceOnly"] = args ? args.interfaceOnly : undefined;
            resourceInputs["modeClientMst"] = args ? args.modeClientMst : undefined;
            resourceInputs["modeClientUnknown"] = args ? args.modeClientUnknown : undefined;
            resourceInputs["modeClientVlan"] = args ? args.modeClientVlan : undefined;
            resourceInputs["modeOffMst"] = args ? args.modeOffMst : undefined;
            resourceInputs["modeOffUnknown"] = args ? args.modeOffUnknown : undefined;
            resourceInputs["modeOffVlan"] = args ? args.modeOffVlan : undefined;
            resourceInputs["modeServerMst"] = args ? args.modeServerMst : undefined;
            resourceInputs["modeServerUnknown"] = args ? args.modeServerUnknown : undefined;
            resourceInputs["modeServerVlan"] = args ? args.modeServerVlan : undefined;
            resourceInputs["modeTransparentMst"] = args ? args.modeTransparentMst : undefined;
            resourceInputs["modeTransparentUnknown"] = args ? args.modeTransparentUnknown : undefined;
            resourceInputs["modeTransparentVlan"] = args ? args.modeTransparentVlan : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["passwordHidden"] = args ? args.passwordHidden : undefined;
            resourceInputs["passwordSecret"] = args ? args.passwordSecret : undefined;
            resourceInputs["pruning"] = args ? args.pruning : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vtp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Vtp resources.
 */
export interface VtpState {
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Set the name of the VTP administrative domain.
     */
    domain?: pulumi.Input<string>;
    /**
     * Configure IFS filesystem file where VTP configuration is stored.
     */
    file?: pulumi.Input<string>;
    /**
     * The name of the interface providing the VTP updater ID for this device
     */
    interface?: pulumi.Input<string>;
    /**
     * Use only this interface's IP address as the VTP IP updater address
     */
    interfaceOnly?: pulumi.Input<boolean>;
    /**
     * Set the mode for MST VTP instance
     */
    modeClientMst?: pulumi.Input<boolean>;
    /**
     * Set the mode for unknown VTP instances
     */
    modeClientUnknown?: pulumi.Input<boolean>;
    /**
     * Set the mode for VLAN VTP instance
     */
    modeClientVlan?: pulumi.Input<boolean>;
    /**
     * Set the mode for MST VTP instance
     */
    modeOffMst?: pulumi.Input<boolean>;
    /**
     * Set the mode for unknown VTP instances
     */
    modeOffUnknown?: pulumi.Input<boolean>;
    /**
     * Set the mode for VLAN VTP instance
     */
    modeOffVlan?: pulumi.Input<boolean>;
    /**
     * Set the mode for MST VTP instance
     */
    modeServerMst?: pulumi.Input<boolean>;
    /**
     * Set the mode for unknown VTP instances
     */
    modeServerUnknown?: pulumi.Input<boolean>;
    /**
     * Set the mode for VLAN VTP instance
     */
    modeServerVlan?: pulumi.Input<boolean>;
    /**
     * Set the mode for MST VTP instance
     */
    modeTransparentMst?: pulumi.Input<boolean>;
    /**
     * Set the mode for unknown VTP instances
     */
    modeTransparentUnknown?: pulumi.Input<boolean>;
    /**
     * Set the mode for VLAN VTP instance
     */
    modeTransparentVlan?: pulumi.Input<boolean>;
    /**
     * The ascii password for the VTP administrative domain
     */
    password?: pulumi.Input<string>;
    /**
     * Set the VTP password hidden option
     */
    passwordHidden?: pulumi.Input<boolean>;
    /**
     * Specify the vtp password in encrypted form
     */
    passwordSecret?: pulumi.Input<boolean>;
    /**
     * Set the administrative domain to permit pruning
     */
    pruning?: pulumi.Input<boolean>;
    /**
     * Set the administrative domain to VTP version - Range: `1`-`3`
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Vtp resource.
 */
export interface VtpArgs {
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     */
    deleteMode?: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Set the name of the VTP administrative domain.
     */
    domain?: pulumi.Input<string>;
    /**
     * Configure IFS filesystem file where VTP configuration is stored.
     */
    file?: pulumi.Input<string>;
    /**
     * The name of the interface providing the VTP updater ID for this device
     */
    interface?: pulumi.Input<string>;
    /**
     * Use only this interface's IP address as the VTP IP updater address
     */
    interfaceOnly?: pulumi.Input<boolean>;
    /**
     * Set the mode for MST VTP instance
     */
    modeClientMst?: pulumi.Input<boolean>;
    /**
     * Set the mode for unknown VTP instances
     */
    modeClientUnknown?: pulumi.Input<boolean>;
    /**
     * Set the mode for VLAN VTP instance
     */
    modeClientVlan?: pulumi.Input<boolean>;
    /**
     * Set the mode for MST VTP instance
     */
    modeOffMst?: pulumi.Input<boolean>;
    /**
     * Set the mode for unknown VTP instances
     */
    modeOffUnknown?: pulumi.Input<boolean>;
    /**
     * Set the mode for VLAN VTP instance
     */
    modeOffVlan?: pulumi.Input<boolean>;
    /**
     * Set the mode for MST VTP instance
     */
    modeServerMst?: pulumi.Input<boolean>;
    /**
     * Set the mode for unknown VTP instances
     */
    modeServerUnknown?: pulumi.Input<boolean>;
    /**
     * Set the mode for VLAN VTP instance
     */
    modeServerVlan?: pulumi.Input<boolean>;
    /**
     * Set the mode for MST VTP instance
     */
    modeTransparentMst?: pulumi.Input<boolean>;
    /**
     * Set the mode for unknown VTP instances
     */
    modeTransparentUnknown?: pulumi.Input<boolean>;
    /**
     * Set the mode for VLAN VTP instance
     */
    modeTransparentVlan?: pulumi.Input<boolean>;
    /**
     * The ascii password for the VTP administrative domain
     */
    password?: pulumi.Input<string>;
    /**
     * Set the VTP password hidden option
     */
    passwordHidden?: pulumi.Input<boolean>;
    /**
     * Specify the vtp password in encrypted form
     */
    passwordSecret?: pulumi.Input<boolean>;
    /**
     * Set the administrative domain to permit pruning
     */
    pruning?: pulumi.Input<boolean>;
    /**
     * Set the administrative domain to VTP version - Range: `1`-`3`
     */
    version?: pulumi.Input<number>;
}
