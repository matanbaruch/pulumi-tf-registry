// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ContentRules extends pulumi.CustomResource {
    /**
     * Get an existing ContentRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContentRulesState, opts?: pulumi.CustomResourceOptions): ContentRules {
        return new ContentRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'barracudawaf:index/contentRules:ContentRules';

    /**
     * Returns true if the given object is an instance of ContentRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContentRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContentRules.__pulumiType;
    }

    /**
     * Access Log
     */
    public readonly accessLog!: pulumi.Output<string | undefined>;
    /**
     * Rule App Id
     */
    public readonly appId!: pulumi.Output<string | undefined>;
    /**
     * Comments
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * Extended Match
     */
    public readonly extendedMatch!: pulumi.Output<string | undefined>;
    /**
     * Extended Match Sequence
     */
    public readonly extendedMatchSequence!: pulumi.Output<string | undefined>;
    /**
     * Host Match
     */
    public readonly hostMatch!: pulumi.Output<string>;
    /**
     * Mode
     */
    public readonly mode!: pulumi.Output<string | undefined>;
    /**
     * Rule Group Name
     */
    public readonly name!: pulumi.Output<string>;
    public readonly parents!: pulumi.Output<string[]>;
    /**
     * Status
     */
    public readonly status!: pulumi.Output<string | undefined>;
    /**
     * URL Match
     */
    public readonly urlMatch!: pulumi.Output<string>;
    /**
     * Web Firewall Policy
     */
    public readonly webFirewallPolicy!: pulumi.Output<string | undefined>;

    /**
     * Create a ContentRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContentRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContentRulesArgs | ContentRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContentRulesState | undefined;
            resourceInputs["accessLog"] = state ? state.accessLog : undefined;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["extendedMatch"] = state ? state.extendedMatch : undefined;
            resourceInputs["extendedMatchSequence"] = state ? state.extendedMatchSequence : undefined;
            resourceInputs["hostMatch"] = state ? state.hostMatch : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parents"] = state ? state.parents : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["urlMatch"] = state ? state.urlMatch : undefined;
            resourceInputs["webFirewallPolicy"] = state ? state.webFirewallPolicy : undefined;
        } else {
            const args = argsOrState as ContentRulesArgs | undefined;
            if ((!args || args.hostMatch === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostMatch'");
            }
            if ((!args || args.parents === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parents'");
            }
            if ((!args || args.urlMatch === undefined) && !opts.urn) {
                throw new Error("Missing required property 'urlMatch'");
            }
            resourceInputs["accessLog"] = args ? args.accessLog : undefined;
            resourceInputs["appId"] = args ? args.appId : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["extendedMatch"] = args ? args.extendedMatch : undefined;
            resourceInputs["extendedMatchSequence"] = args ? args.extendedMatchSequence : undefined;
            resourceInputs["hostMatch"] = args ? args.hostMatch : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parents"] = args ? args.parents : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["urlMatch"] = args ? args.urlMatch : undefined;
            resourceInputs["webFirewallPolicy"] = args ? args.webFirewallPolicy : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContentRules.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ContentRules resources.
 */
export interface ContentRulesState {
    /**
     * Access Log
     */
    accessLog?: pulumi.Input<string>;
    /**
     * Rule App Id
     */
    appId?: pulumi.Input<string>;
    /**
     * Comments
     */
    comments?: pulumi.Input<string>;
    /**
     * Extended Match
     */
    extendedMatch?: pulumi.Input<string>;
    /**
     * Extended Match Sequence
     */
    extendedMatchSequence?: pulumi.Input<string>;
    /**
     * Host Match
     */
    hostMatch?: pulumi.Input<string>;
    /**
     * Mode
     */
    mode?: pulumi.Input<string>;
    /**
     * Rule Group Name
     */
    name?: pulumi.Input<string>;
    parents?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Status
     */
    status?: pulumi.Input<string>;
    /**
     * URL Match
     */
    urlMatch?: pulumi.Input<string>;
    /**
     * Web Firewall Policy
     */
    webFirewallPolicy?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ContentRules resource.
 */
export interface ContentRulesArgs {
    /**
     * Access Log
     */
    accessLog?: pulumi.Input<string>;
    /**
     * Rule App Id
     */
    appId?: pulumi.Input<string>;
    /**
     * Comments
     */
    comments?: pulumi.Input<string>;
    /**
     * Extended Match
     */
    extendedMatch?: pulumi.Input<string>;
    /**
     * Extended Match Sequence
     */
    extendedMatchSequence?: pulumi.Input<string>;
    /**
     * Host Match
     */
    hostMatch: pulumi.Input<string>;
    /**
     * Mode
     */
    mode?: pulumi.Input<string>;
    /**
     * Rule Group Name
     */
    name?: pulumi.Input<string>;
    parents: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Status
     */
    status?: pulumi.Input<string>;
    /**
     * URL Match
     */
    urlMatch: pulumi.Input<string>;
    /**
     * Web Firewall Policy
     */
    webFirewallPolicy?: pulumi.Input<string>;
}
