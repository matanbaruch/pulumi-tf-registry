// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ContentRuleServers extends pulumi.CustomResource {
    /**
     * Get an existing ContentRuleServers resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContentRuleServersState, opts?: pulumi.CustomResourceOptions): ContentRuleServers {
        return new ContentRuleServers(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'barracudawaf:index/contentRuleServers:ContentRuleServers';

    /**
     * Returns true if the given object is an instance of ContentRuleServers.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContentRuleServers {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContentRuleServers.__pulumiType;
    }

    /**
     * Version
     */
    public readonly addressVersion!: pulumi.Output<string | undefined>;
    /**
     * Comments
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    public readonly connectionPoolings!: pulumi.Output<outputs.ContentRuleServersConnectionPooling[] | undefined>;
    /**
     * Hostname
     */
    public readonly hostname!: pulumi.Output<string | undefined>;
    /**
     * Identifier:
     */
    public readonly identifier!: pulumi.Output<string | undefined>;
    /**
     * IP Address
     */
    public readonly ipAddress!: pulumi.Output<string | undefined>;
    /**
     * Web Server Name
     */
    public readonly name!: pulumi.Output<string>;
    public readonly parents!: pulumi.Output<string[]>;
    /**
     * Port
     */
    public readonly port!: pulumi.Output<string | undefined>;
    public readonly sslPolicies!: pulumi.Output<outputs.ContentRuleServersSslPolicy[] | undefined>;
    /**
     * Status
     */
    public readonly status!: pulumi.Output<string | undefined>;

    /**
     * Create a ContentRuleServers resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContentRuleServersArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContentRuleServersArgs | ContentRuleServersState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContentRuleServersState | undefined;
            resourceInputs["addressVersion"] = state ? state.addressVersion : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["connectionPoolings"] = state ? state.connectionPoolings : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parents"] = state ? state.parents : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["sslPolicies"] = state ? state.sslPolicies : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as ContentRuleServersArgs | undefined;
            if ((!args || args.parents === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parents'");
            }
            resourceInputs["addressVersion"] = args ? args.addressVersion : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["connectionPoolings"] = args ? args.connectionPoolings : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parents"] = args ? args.parents : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["sslPolicies"] = args ? args.sslPolicies : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContentRuleServers.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ContentRuleServers resources.
 */
export interface ContentRuleServersState {
    /**
     * Version
     */
    addressVersion?: pulumi.Input<string>;
    /**
     * Comments
     */
    comments?: pulumi.Input<string>;
    connectionPoolings?: pulumi.Input<pulumi.Input<inputs.ContentRuleServersConnectionPooling>[]>;
    /**
     * Hostname
     */
    hostname?: pulumi.Input<string>;
    /**
     * Identifier:
     */
    identifier?: pulumi.Input<string>;
    /**
     * IP Address
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Web Server Name
     */
    name?: pulumi.Input<string>;
    parents?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Port
     */
    port?: pulumi.Input<string>;
    sslPolicies?: pulumi.Input<pulumi.Input<inputs.ContentRuleServersSslPolicy>[]>;
    /**
     * Status
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ContentRuleServers resource.
 */
export interface ContentRuleServersArgs {
    /**
     * Version
     */
    addressVersion?: pulumi.Input<string>;
    /**
     * Comments
     */
    comments?: pulumi.Input<string>;
    connectionPoolings?: pulumi.Input<pulumi.Input<inputs.ContentRuleServersConnectionPooling>[]>;
    /**
     * Hostname
     */
    hostname?: pulumi.Input<string>;
    /**
     * Identifier:
     */
    identifier?: pulumi.Input<string>;
    /**
     * IP Address
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Web Server Name
     */
    name?: pulumi.Input<string>;
    parents: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Port
     */
    port?: pulumi.Input<string>;
    sslPolicies?: pulumi.Input<pulumi.Input<inputs.ContentRuleServersSslPolicy>[]>;
    /**
     * Status
     */
    status?: pulumi.Input<string>;
}
