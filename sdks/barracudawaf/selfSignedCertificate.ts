// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SelfSignedCertificate extends pulumi.CustomResource {
    /**
     * Get an existing SelfSignedCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SelfSignedCertificateState, opts?: pulumi.CustomResourceOptions): SelfSignedCertificate {
        return new SelfSignedCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'barracudawaf:index/selfSignedCertificate:SelfSignedCertificate';

    /**
     * Returns true if the given object is an instance of SelfSignedCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SelfSignedCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SelfSignedCertificate.__pulumiType;
    }

    /**
     * If set to <b>Yes</b>, the Private Key gets downloaded along with the certificate.
     */
    public readonly allowPrivateKeyExport!: pulumi.Output<string | undefined>;
    /**
     * Locality Name
     */
    public readonly city!: pulumi.Output<string | undefined>;
    /**
     * Common Name
     */
    public readonly commonName!: pulumi.Output<string>;
    /**
     * Country
     */
    public readonly countryCode!: pulumi.Output<string>;
    /**
     * Elliptic Curve Name
     */
    public readonly ellipticCurveName!: pulumi.Output<string | undefined>;
    /**
     * Key Size
     */
    public readonly keySize!: pulumi.Output<string | undefined>;
    /**
     * Select Key Type:
     */
    public readonly keyType!: pulumi.Output<string | undefined>;
    /**
     * None
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Organization Name
     */
    public readonly organizationName!: pulumi.Output<string | undefined>;
    /**
     * Organizational Unit Name
     */
    public readonly organizationalUnit!: pulumi.Output<string | undefined>;
    /**
     * SAN Certificate
     */
    public readonly sanCertificates!: pulumi.Output<string[] | undefined>;
    /**
     * State or Province
     */
    public readonly state!: pulumi.Output<string | undefined>;

    /**
     * Create a SelfSignedCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SelfSignedCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SelfSignedCertificateArgs | SelfSignedCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SelfSignedCertificateState | undefined;
            resourceInputs["allowPrivateKeyExport"] = state ? state.allowPrivateKeyExport : undefined;
            resourceInputs["city"] = state ? state.city : undefined;
            resourceInputs["commonName"] = state ? state.commonName : undefined;
            resourceInputs["countryCode"] = state ? state.countryCode : undefined;
            resourceInputs["ellipticCurveName"] = state ? state.ellipticCurveName : undefined;
            resourceInputs["keySize"] = state ? state.keySize : undefined;
            resourceInputs["keyType"] = state ? state.keyType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organizationName"] = state ? state.organizationName : undefined;
            resourceInputs["organizationalUnit"] = state ? state.organizationalUnit : undefined;
            resourceInputs["sanCertificates"] = state ? state.sanCertificates : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as SelfSignedCertificateArgs | undefined;
            if ((!args || args.commonName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'commonName'");
            }
            if ((!args || args.countryCode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'countryCode'");
            }
            resourceInputs["allowPrivateKeyExport"] = args ? args.allowPrivateKeyExport : undefined;
            resourceInputs["city"] = args ? args.city : undefined;
            resourceInputs["commonName"] = args ? args.commonName : undefined;
            resourceInputs["countryCode"] = args ? args.countryCode : undefined;
            resourceInputs["ellipticCurveName"] = args ? args.ellipticCurveName : undefined;
            resourceInputs["keySize"] = args ? args.keySize : undefined;
            resourceInputs["keyType"] = args ? args.keyType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organizationName"] = args ? args.organizationName : undefined;
            resourceInputs["organizationalUnit"] = args ? args.organizationalUnit : undefined;
            resourceInputs["sanCertificates"] = args ? args.sanCertificates : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SelfSignedCertificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SelfSignedCertificate resources.
 */
export interface SelfSignedCertificateState {
    /**
     * If set to <b>Yes</b>, the Private Key gets downloaded along with the certificate.
     */
    allowPrivateKeyExport?: pulumi.Input<string>;
    /**
     * Locality Name
     */
    city?: pulumi.Input<string>;
    /**
     * Common Name
     */
    commonName?: pulumi.Input<string>;
    /**
     * Country
     */
    countryCode?: pulumi.Input<string>;
    /**
     * Elliptic Curve Name
     */
    ellipticCurveName?: pulumi.Input<string>;
    /**
     * Key Size
     */
    keySize?: pulumi.Input<string>;
    /**
     * Select Key Type:
     */
    keyType?: pulumi.Input<string>;
    /**
     * None
     */
    name?: pulumi.Input<string>;
    /**
     * Organization Name
     */
    organizationName?: pulumi.Input<string>;
    /**
     * Organizational Unit Name
     */
    organizationalUnit?: pulumi.Input<string>;
    /**
     * SAN Certificate
     */
    sanCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * State or Province
     */
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SelfSignedCertificate resource.
 */
export interface SelfSignedCertificateArgs {
    /**
     * If set to <b>Yes</b>, the Private Key gets downloaded along with the certificate.
     */
    allowPrivateKeyExport?: pulumi.Input<string>;
    /**
     * Locality Name
     */
    city?: pulumi.Input<string>;
    /**
     * Common Name
     */
    commonName: pulumi.Input<string>;
    /**
     * Country
     */
    countryCode: pulumi.Input<string>;
    /**
     * Elliptic Curve Name
     */
    ellipticCurveName?: pulumi.Input<string>;
    /**
     * Key Size
     */
    keySize?: pulumi.Input<string>;
    /**
     * Select Key Type:
     */
    keyType?: pulumi.Input<string>;
    /**
     * None
     */
    name?: pulumi.Input<string>;
    /**
     * Organization Name
     */
    organizationName?: pulumi.Input<string>;
    /**
     * Organizational Unit Name
     */
    organizationalUnit?: pulumi.Input<string>;
    /**
     * SAN Certificate
     */
    sanCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * State or Province
     */
    state?: pulumi.Input<string>;
}
