// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Services extends pulumi.CustomResource {
    /**
     * Get an existing Services resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServicesState, opts?: pulumi.CustomResourceOptions): Services {
        return new Services(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'barracudawaf:index/services:Services';

    /**
     * Returns true if the given object is an instance of Services.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Services {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Services.__pulumiType;
    }

    /**
     * Version
     */
    public readonly addressVersion!: pulumi.Output<string | undefined>;
    /**
     * Service App Id
     */
    public readonly appId!: pulumi.Output<string | undefined>;
    public readonly basicSecurities!: pulumi.Output<outputs.ServicesBasicSecurity[] | undefined>;
    public readonly certificate!: pulumi.Output<string | undefined>;
    public readonly cloudIpSelect!: pulumi.Output<string | undefined>;
    /**
     * Comments
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * Enable Access Logs
     */
    public readonly enableAccessLogs!: pulumi.Output<string | undefined>;
    /**
     * Service Group
     */
    public readonly group!: pulumi.Output<string | undefined>;
    public readonly instantSsls!: pulumi.Output<outputs.ServicesInstantSsl[] | undefined>;
    /**
     * VIP
     */
    public readonly ipAddress!: pulumi.Output<string | undefined>;
    /**
     * Mask
     */
    public readonly mask!: pulumi.Output<string | undefined>;
    /**
     * Web Application Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Port
     */
    public readonly port!: pulumi.Output<string | undefined>;
    /**
     * Secure Site Domain
     */
    public readonly secureSiteDomains!: pulumi.Output<string[] | undefined>;
    /**
     * Session Timeout
     */
    public readonly sessionTimeout!: pulumi.Output<string | undefined>;
    public readonly sslSecurities!: pulumi.Output<outputs.ServicesSslSecurity[] | undefined>;
    /**
     * Status
     */
    public readonly status!: pulumi.Output<string | undefined>;
    /**
     * Type
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * Vsite
     */
    public readonly vsite!: pulumi.Output<string | undefined>;

    /**
     * Create a Services resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ServicesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServicesArgs | ServicesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServicesState | undefined;
            resourceInputs["addressVersion"] = state ? state.addressVersion : undefined;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["basicSecurities"] = state ? state.basicSecurities : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["cloudIpSelect"] = state ? state.cloudIpSelect : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["enableAccessLogs"] = state ? state.enableAccessLogs : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["instantSsls"] = state ? state.instantSsls : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["mask"] = state ? state.mask : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["secureSiteDomains"] = state ? state.secureSiteDomains : undefined;
            resourceInputs["sessionTimeout"] = state ? state.sessionTimeout : undefined;
            resourceInputs["sslSecurities"] = state ? state.sslSecurities : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vsite"] = state ? state.vsite : undefined;
        } else {
            const args = argsOrState as ServicesArgs | undefined;
            resourceInputs["addressVersion"] = args ? args.addressVersion : undefined;
            resourceInputs["appId"] = args ? args.appId : undefined;
            resourceInputs["basicSecurities"] = args ? args.basicSecurities : undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["cloudIpSelect"] = args ? args.cloudIpSelect : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["enableAccessLogs"] = args ? args.enableAccessLogs : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["instantSsls"] = args ? args.instantSsls : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["mask"] = args ? args.mask : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["secureSiteDomains"] = args ? args.secureSiteDomains : undefined;
            resourceInputs["sessionTimeout"] = args ? args.sessionTimeout : undefined;
            resourceInputs["sslSecurities"] = args ? args.sslSecurities : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vsite"] = args ? args.vsite : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Services.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Services resources.
 */
export interface ServicesState {
    /**
     * Version
     */
    addressVersion?: pulumi.Input<string>;
    /**
     * Service App Id
     */
    appId?: pulumi.Input<string>;
    basicSecurities?: pulumi.Input<pulumi.Input<inputs.ServicesBasicSecurity>[]>;
    certificate?: pulumi.Input<string>;
    cloudIpSelect?: pulumi.Input<string>;
    /**
     * Comments
     */
    comments?: pulumi.Input<string>;
    /**
     * Enable Access Logs
     */
    enableAccessLogs?: pulumi.Input<string>;
    /**
     * Service Group
     */
    group?: pulumi.Input<string>;
    instantSsls?: pulumi.Input<pulumi.Input<inputs.ServicesInstantSsl>[]>;
    /**
     * VIP
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Mask
     */
    mask?: pulumi.Input<string>;
    /**
     * Web Application Name
     */
    name?: pulumi.Input<string>;
    /**
     * Port
     */
    port?: pulumi.Input<string>;
    /**
     * Secure Site Domain
     */
    secureSiteDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Session Timeout
     */
    sessionTimeout?: pulumi.Input<string>;
    sslSecurities?: pulumi.Input<pulumi.Input<inputs.ServicesSslSecurity>[]>;
    /**
     * Status
     */
    status?: pulumi.Input<string>;
    /**
     * Type
     */
    type?: pulumi.Input<string>;
    /**
     * Vsite
     */
    vsite?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Services resource.
 */
export interface ServicesArgs {
    /**
     * Version
     */
    addressVersion?: pulumi.Input<string>;
    /**
     * Service App Id
     */
    appId?: pulumi.Input<string>;
    basicSecurities?: pulumi.Input<pulumi.Input<inputs.ServicesBasicSecurity>[]>;
    certificate?: pulumi.Input<string>;
    cloudIpSelect?: pulumi.Input<string>;
    /**
     * Comments
     */
    comments?: pulumi.Input<string>;
    /**
     * Enable Access Logs
     */
    enableAccessLogs?: pulumi.Input<string>;
    /**
     * Service Group
     */
    group?: pulumi.Input<string>;
    instantSsls?: pulumi.Input<pulumi.Input<inputs.ServicesInstantSsl>[]>;
    /**
     * VIP
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Mask
     */
    mask?: pulumi.Input<string>;
    /**
     * Web Application Name
     */
    name?: pulumi.Input<string>;
    /**
     * Port
     */
    port?: pulumi.Input<string>;
    /**
     * Secure Site Domain
     */
    secureSiteDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Session Timeout
     */
    sessionTimeout?: pulumi.Input<string>;
    sslSecurities?: pulumi.Input<pulumi.Input<inputs.ServicesSslSecurity>[]>;
    /**
     * Status
     */
    status?: pulumi.Input<string>;
    /**
     * Type
     */
    type?: pulumi.Input<string>;
    /**
     * Vsite
     */
    vsite?: pulumi.Input<string>;
}
