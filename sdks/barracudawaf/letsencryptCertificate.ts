// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LetsencryptCertificate extends pulumi.CustomResource {
    /**
     * Get an existing LetsencryptCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LetsencryptCertificateState, opts?: pulumi.CustomResourceOptions): LetsencryptCertificate {
        return new LetsencryptCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'barracudawaf:index/letsencryptCertificate:LetsencryptCertificate';

    /**
     * Returns true if the given object is an instance of LetsencryptCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LetsencryptCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LetsencryptCertificate.__pulumiType;
    }

    /**
     * If set Yes, Private Key gets downloaded along with the certificate
     */
    public readonly allowPrivateKeyExport!: pulumi.Output<string | undefined>;
    /**
     * Auto Renew Certificate
     */
    public readonly autoRenewCert!: pulumi.Output<string | undefined>;
    /**
     * Common Name
     */
    public readonly commonName!: pulumi.Output<string>;
    /**
     * Service Name for LetsEncrypt certificate
     */
    public readonly multiCertTrustedService!: pulumi.Output<string>;
    /**
     * Policy Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Subject Alternative Names
     */
    public readonly sanCerts!: pulumi.Output<string[] | undefined>;
    /**
     * Renew Certificate days
     */
    public readonly scheduleRenewalDay!: pulumi.Output<string | undefined>;

    /**
     * Create a LetsencryptCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LetsencryptCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LetsencryptCertificateArgs | LetsencryptCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LetsencryptCertificateState | undefined;
            resourceInputs["allowPrivateKeyExport"] = state ? state.allowPrivateKeyExport : undefined;
            resourceInputs["autoRenewCert"] = state ? state.autoRenewCert : undefined;
            resourceInputs["commonName"] = state ? state.commonName : undefined;
            resourceInputs["multiCertTrustedService"] = state ? state.multiCertTrustedService : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sanCerts"] = state ? state.sanCerts : undefined;
            resourceInputs["scheduleRenewalDay"] = state ? state.scheduleRenewalDay : undefined;
        } else {
            const args = argsOrState as LetsencryptCertificateArgs | undefined;
            if ((!args || args.commonName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'commonName'");
            }
            if ((!args || args.multiCertTrustedService === undefined) && !opts.urn) {
                throw new Error("Missing required property 'multiCertTrustedService'");
            }
            resourceInputs["allowPrivateKeyExport"] = args ? args.allowPrivateKeyExport : undefined;
            resourceInputs["autoRenewCert"] = args ? args.autoRenewCert : undefined;
            resourceInputs["commonName"] = args ? args.commonName : undefined;
            resourceInputs["multiCertTrustedService"] = args ? args.multiCertTrustedService : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sanCerts"] = args ? args.sanCerts : undefined;
            resourceInputs["scheduleRenewalDay"] = args ? args.scheduleRenewalDay : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LetsencryptCertificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LetsencryptCertificate resources.
 */
export interface LetsencryptCertificateState {
    /**
     * If set Yes, Private Key gets downloaded along with the certificate
     */
    allowPrivateKeyExport?: pulumi.Input<string>;
    /**
     * Auto Renew Certificate
     */
    autoRenewCert?: pulumi.Input<string>;
    /**
     * Common Name
     */
    commonName?: pulumi.Input<string>;
    /**
     * Service Name for LetsEncrypt certificate
     */
    multiCertTrustedService?: pulumi.Input<string>;
    /**
     * Policy Name
     */
    name?: pulumi.Input<string>;
    /**
     * Subject Alternative Names
     */
    sanCerts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Renew Certificate days
     */
    scheduleRenewalDay?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LetsencryptCertificate resource.
 */
export interface LetsencryptCertificateArgs {
    /**
     * If set Yes, Private Key gets downloaded along with the certificate
     */
    allowPrivateKeyExport?: pulumi.Input<string>;
    /**
     * Auto Renew Certificate
     */
    autoRenewCert?: pulumi.Input<string>;
    /**
     * Common Name
     */
    commonName: pulumi.Input<string>;
    /**
     * Service Name for LetsEncrypt certificate
     */
    multiCertTrustedService: pulumi.Input<string>;
    /**
     * Policy Name
     */
    name?: pulumi.Input<string>;
    /**
     * Subject Alternative Names
     */
    sanCerts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Renew Certificate days
     */
    scheduleRenewalDay?: pulumi.Input<string>;
}
