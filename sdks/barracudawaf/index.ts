// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ContentRuleServersArgs, ContentRuleServersState } from "./contentRuleServers";
export type ContentRuleServers = import("./contentRuleServers").ContentRuleServers;
export const ContentRuleServers: typeof import("./contentRuleServers").ContentRuleServers = null as any;
utilities.lazyLoad(exports, ["ContentRuleServers"], () => require("./contentRuleServers"));

export { ContentRulesArgs, ContentRulesState } from "./contentRules";
export type ContentRules = import("./contentRules").ContentRules;
export const ContentRules: typeof import("./contentRules").ContentRules = null as any;
utilities.lazyLoad(exports, ["ContentRules"], () => require("./contentRules"));

export { LetsencryptCertificateArgs, LetsencryptCertificateState } from "./letsencryptCertificate";
export type LetsencryptCertificate = import("./letsencryptCertificate").LetsencryptCertificate;
export const LetsencryptCertificate: typeof import("./letsencryptCertificate").LetsencryptCertificate = null as any;
utilities.lazyLoad(exports, ["LetsencryptCertificate"], () => require("./letsencryptCertificate"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SecurityPoliciesArgs, SecurityPoliciesState } from "./securityPolicies";
export type SecurityPolicies = import("./securityPolicies").SecurityPolicies;
export const SecurityPolicies: typeof import("./securityPolicies").SecurityPolicies = null as any;
utilities.lazyLoad(exports, ["SecurityPolicies"], () => require("./securityPolicies"));

export { SelfSignedCertificateArgs, SelfSignedCertificateState } from "./selfSignedCertificate";
export type SelfSignedCertificate = import("./selfSignedCertificate").SelfSignedCertificate;
export const SelfSignedCertificate: typeof import("./selfSignedCertificate").SelfSignedCertificate = null as any;
utilities.lazyLoad(exports, ["SelfSignedCertificate"], () => require("./selfSignedCertificate"));

export { ServersArgs, ServersState } from "./servers";
export type Servers = import("./servers").Servers;
export const Servers: typeof import("./servers").Servers = null as any;
utilities.lazyLoad(exports, ["Servers"], () => require("./servers"));

export { ServicesArgs, ServicesState } from "./services";
export type Services = import("./services").Services;
export const Services: typeof import("./services").Services = null as any;
utilities.lazyLoad(exports, ["Services"], () => require("./services"));

export { SignedCertificateArgs, SignedCertificateState } from "./signedCertificate";
export type SignedCertificate = import("./signedCertificate").SignedCertificate;
export const SignedCertificate: typeof import("./signedCertificate").SignedCertificate = null as any;
utilities.lazyLoad(exports, ["SignedCertificate"], () => require("./signedCertificate"));

export { TrustedCaCertificateArgs, TrustedCaCertificateState } from "./trustedCaCertificate";
export type TrustedCaCertificate = import("./trustedCaCertificate").TrustedCaCertificate;
export const TrustedCaCertificate: typeof import("./trustedCaCertificate").TrustedCaCertificate = null as any;
utilities.lazyLoad(exports, ["TrustedCaCertificate"], () => require("./trustedCaCertificate"));

export { TrustedServerCertificateArgs, TrustedServerCertificateState } from "./trustedServerCertificate";
export type TrustedServerCertificate = import("./trustedServerCertificate").TrustedServerCertificate;
export const TrustedServerCertificate: typeof import("./trustedServerCertificate").TrustedServerCertificate = null as any;
utilities.lazyLoad(exports, ["TrustedServerCertificate"], () => require("./trustedServerCertificate"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "barracudawaf:index/contentRuleServers:ContentRuleServers":
                return new ContentRuleServers(name, <any>undefined, { urn })
            case "barracudawaf:index/contentRules:ContentRules":
                return new ContentRules(name, <any>undefined, { urn })
            case "barracudawaf:index/letsencryptCertificate:LetsencryptCertificate":
                return new LetsencryptCertificate(name, <any>undefined, { urn })
            case "barracudawaf:index/securityPolicies:SecurityPolicies":
                return new SecurityPolicies(name, <any>undefined, { urn })
            case "barracudawaf:index/selfSignedCertificate:SelfSignedCertificate":
                return new SelfSignedCertificate(name, <any>undefined, { urn })
            case "barracudawaf:index/servers:Servers":
                return new Servers(name, <any>undefined, { urn })
            case "barracudawaf:index/services:Services":
                return new Services(name, <any>undefined, { urn })
            case "barracudawaf:index/signedCertificate:SignedCertificate":
                return new SignedCertificate(name, <any>undefined, { urn })
            case "barracudawaf:index/trustedCaCertificate:TrustedCaCertificate":
                return new TrustedCaCertificate(name, <any>undefined, { urn })
            case "barracudawaf:index/trustedServerCertificate:TrustedServerCertificate":
                return new TrustedServerCertificate(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("barracudawaf", "index/contentRuleServers", _module)
pulumi.runtime.registerResourceModule("barracudawaf", "index/contentRules", _module)
pulumi.runtime.registerResourceModule("barracudawaf", "index/letsencryptCertificate", _module)
pulumi.runtime.registerResourceModule("barracudawaf", "index/securityPolicies", _module)
pulumi.runtime.registerResourceModule("barracudawaf", "index/selfSignedCertificate", _module)
pulumi.runtime.registerResourceModule("barracudawaf", "index/servers", _module)
pulumi.runtime.registerResourceModule("barracudawaf", "index/services", _module)
pulumi.runtime.registerResourceModule("barracudawaf", "index/signedCertificate", _module)
pulumi.runtime.registerResourceModule("barracudawaf", "index/trustedCaCertificate", _module)
pulumi.runtime.registerResourceModule("barracudawaf", "index/trustedServerCertificate", _module)
pulumi.runtime.registerResourcePackage("barracudawaf", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:barracudawaf") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
