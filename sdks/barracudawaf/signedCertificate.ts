// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SignedCertificate extends pulumi.CustomResource {
    /**
     * Get an existing SignedCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SignedCertificateState, opts?: pulumi.CustomResourceOptions): SignedCertificate {
        return new SignedCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'barracudawaf:index/signedCertificate:SignedCertificate';

    /**
     * Returns true if the given object is an instance of SignedCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SignedCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SignedCertificate.__pulumiType;
    }

    public readonly allowPrivateKeyExport!: pulumi.Output<string | undefined>;
    public readonly assignAssociatedKey!: pulumi.Output<string | undefined>;
    /**
     * None
     */
    public readonly autoRenewCert!: pulumi.Output<string | undefined>;
    public readonly certificateKey!: pulumi.Output<string | undefined>;
    public readonly certificatePassword!: pulumi.Output<string | undefined>;
    public readonly certificateType!: pulumi.Output<string | undefined>;
    /**
     * Common Name
     */
    public readonly commonName!: pulumi.Output<string | undefined>;
    /**
     * A Certificate Signing Request (CSR) and/or Certificate can be downloaded.
     */
    public readonly downloadType!: pulumi.Output<string | undefined>;
    /**
     * Encryption Password is used to extract the private key from PKCS #12 token.
     */
    public readonly encryptPassword!: pulumi.Output<string | undefined>;
    public readonly expiry!: pulumi.Output<string | undefined>;
    /**
     * Intermediary Certificates
     */
    public readonly intermediaryCertificates!: pulumi.Output<string[] | undefined>;
    /**
     * Select Key Type:
     */
    public readonly keyType!: pulumi.Output<string | undefined>;
    /**
     * Certificate Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * None
     */
    public readonly scheduleRenewalDay!: pulumi.Output<string | undefined>;
    public readonly serial!: pulumi.Output<string | undefined>;
    public readonly signedCertificate!: pulumi.Output<string | undefined>;

    /**
     * Create a SignedCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SignedCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SignedCertificateArgs | SignedCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SignedCertificateState | undefined;
            resourceInputs["allowPrivateKeyExport"] = state ? state.allowPrivateKeyExport : undefined;
            resourceInputs["assignAssociatedKey"] = state ? state.assignAssociatedKey : undefined;
            resourceInputs["autoRenewCert"] = state ? state.autoRenewCert : undefined;
            resourceInputs["certificateKey"] = state ? state.certificateKey : undefined;
            resourceInputs["certificatePassword"] = state ? state.certificatePassword : undefined;
            resourceInputs["certificateType"] = state ? state.certificateType : undefined;
            resourceInputs["commonName"] = state ? state.commonName : undefined;
            resourceInputs["downloadType"] = state ? state.downloadType : undefined;
            resourceInputs["encryptPassword"] = state ? state.encryptPassword : undefined;
            resourceInputs["expiry"] = state ? state.expiry : undefined;
            resourceInputs["intermediaryCertificates"] = state ? state.intermediaryCertificates : undefined;
            resourceInputs["keyType"] = state ? state.keyType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scheduleRenewalDay"] = state ? state.scheduleRenewalDay : undefined;
            resourceInputs["serial"] = state ? state.serial : undefined;
            resourceInputs["signedCertificate"] = state ? state.signedCertificate : undefined;
        } else {
            const args = argsOrState as SignedCertificateArgs | undefined;
            resourceInputs["allowPrivateKeyExport"] = args ? args.allowPrivateKeyExport : undefined;
            resourceInputs["assignAssociatedKey"] = args ? args.assignAssociatedKey : undefined;
            resourceInputs["autoRenewCert"] = args ? args.autoRenewCert : undefined;
            resourceInputs["certificateKey"] = args ? args.certificateKey : undefined;
            resourceInputs["certificatePassword"] = args ? args.certificatePassword : undefined;
            resourceInputs["certificateType"] = args ? args.certificateType : undefined;
            resourceInputs["commonName"] = args ? args.commonName : undefined;
            resourceInputs["downloadType"] = args ? args.downloadType : undefined;
            resourceInputs["encryptPassword"] = args ? args.encryptPassword : undefined;
            resourceInputs["expiry"] = args ? args.expiry : undefined;
            resourceInputs["intermediaryCertificates"] = args ? args.intermediaryCertificates : undefined;
            resourceInputs["keyType"] = args ? args.keyType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scheduleRenewalDay"] = args ? args.scheduleRenewalDay : undefined;
            resourceInputs["serial"] = args ? args.serial : undefined;
            resourceInputs["signedCertificate"] = args ? args.signedCertificate : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SignedCertificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SignedCertificate resources.
 */
export interface SignedCertificateState {
    allowPrivateKeyExport?: pulumi.Input<string>;
    assignAssociatedKey?: pulumi.Input<string>;
    /**
     * None
     */
    autoRenewCert?: pulumi.Input<string>;
    certificateKey?: pulumi.Input<string>;
    certificatePassword?: pulumi.Input<string>;
    certificateType?: pulumi.Input<string>;
    /**
     * Common Name
     */
    commonName?: pulumi.Input<string>;
    /**
     * A Certificate Signing Request (CSR) and/or Certificate can be downloaded.
     */
    downloadType?: pulumi.Input<string>;
    /**
     * Encryption Password is used to extract the private key from PKCS #12 token.
     */
    encryptPassword?: pulumi.Input<string>;
    expiry?: pulumi.Input<string>;
    /**
     * Intermediary Certificates
     */
    intermediaryCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Select Key Type:
     */
    keyType?: pulumi.Input<string>;
    /**
     * Certificate Name
     */
    name?: pulumi.Input<string>;
    /**
     * None
     */
    scheduleRenewalDay?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    signedCertificate?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SignedCertificate resource.
 */
export interface SignedCertificateArgs {
    allowPrivateKeyExport?: pulumi.Input<string>;
    assignAssociatedKey?: pulumi.Input<string>;
    /**
     * None
     */
    autoRenewCert?: pulumi.Input<string>;
    certificateKey?: pulumi.Input<string>;
    certificatePassword?: pulumi.Input<string>;
    certificateType?: pulumi.Input<string>;
    /**
     * Common Name
     */
    commonName?: pulumi.Input<string>;
    /**
     * A Certificate Signing Request (CSR) and/or Certificate can be downloaded.
     */
    downloadType?: pulumi.Input<string>;
    /**
     * Encryption Password is used to extract the private key from PKCS #12 token.
     */
    encryptPassword?: pulumi.Input<string>;
    expiry?: pulumi.Input<string>;
    /**
     * Intermediary Certificates
     */
    intermediaryCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Select Key Type:
     */
    keyType?: pulumi.Input<string>;
    /**
     * Certificate Name
     */
    name?: pulumi.Input<string>;
    /**
     * None
     */
    scheduleRenewalDay?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
    signedCertificate?: pulumi.Input<string>;
}
