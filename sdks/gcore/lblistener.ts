// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Lblistener extends pulumi.CustomResource {
    /**
     * Get an existing Lblistener resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LblistenerState, opts?: pulumi.CustomResourceOptions): Lblistener {
        return new Lblistener(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcore:index/lblistener:Lblistener';

    /**
     * Returns true if the given object is an instance of Lblistener.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Lblistener {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Lblistener.__pulumiType;
    }

    /**
     * List of networks from which listener is accessible
     */
    public readonly allowedCidrs!: pulumi.Output<string[] | undefined>;
    /**
     * Number of simultaneous connections for this listener, between 1 and 1,000,000.
     */
    public readonly connectionLimit!: pulumi.Output<number | undefined>;
    /**
     * Insert X-Forwarded headers for 'HTTP', 'HTTPS', 'TERMINATED_HTTPS' protocols.
     */
    public readonly insertXForwarded!: pulumi.Output<boolean | undefined>;
    /**
     * Datetime when load balancer was updated at the last time.
     */
    public /*out*/ readonly lastUpdated!: pulumi.Output<string>;
    /**
     * ID of the target load balancer to attach newly created listener.
     */
    public readonly loadbalancerId!: pulumi.Output<string>;
    /**
     * Listener name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Operating status of this listener.
     */
    public /*out*/ readonly operatingStatus!: pulumi.Output<string>;
    /**
     * Number of pools in this listener.
     */
    public /*out*/ readonly poolCount!: pulumi.Output<number>;
    /**
     * ID of the desired project to create load balancer listener in. Alternative for `project_name`. One of them should be
     * specified.
     */
    public readonly projectId!: pulumi.Output<number | undefined>;
    /**
     * Name of the desired project to create load balancer listener in. Alternative for `project_id`. One of them should be
     * specified.
     */
    public readonly projectName!: pulumi.Output<string | undefined>;
    /**
     * Available values are 'HTTP', 'HTTPS', 'TCP', 'UDP', 'TERMINATED_HTTPS', 'PROMETHEUS'
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * Port number to listen, between 1 and 65535.
     */
    public readonly protocolPort!: pulumi.Output<number>;
    /**
     * Provisioning status of this listener.
     */
    public /*out*/ readonly provisioningStatus!: pulumi.Output<string>;
    /**
     * ID of the desired region to create load balancer listener in. Alternative for `region_name`. One of them should be
     * specified.
     */
    public readonly regionId!: pulumi.Output<number | undefined>;
    /**
     * Name of the desired region to create load balancer listener in. Alternative for `region_id`. One of them should be
     * specified.
     */
    public readonly regionName!: pulumi.Output<string | undefined>;
    /**
     * Secret ID to use with 'TERMINATED_HTTPS' protocol.
     */
    public readonly secretId!: pulumi.Output<string | undefined>;
    /**
     * List of additional Secret IDs to use with 'TERMINATED_HTTPS' protocol.
     */
    public readonly sniSecretIds!: pulumi.Output<string[] | undefined>;
    /**
     * Frontend client inactivity timeout in milliseconds.
     */
    public readonly timeoutClientData!: pulumi.Output<number | undefined>;
    /**
     * Backend member connection timeout in milliseconds.
     */
    public readonly timeoutMemberConnect!: pulumi.Output<number | undefined>;
    /**
     * Backend member inactivity timeout in milliseconds.
     */
    public readonly timeoutMemberData!: pulumi.Output<number | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.LblistenerTimeouts | undefined>;
    /**
     * Load balancer listener list of username and encrypted password items.
     */
    public readonly userLists!: pulumi.Output<outputs.LblistenerUserList[] | undefined>;

    /**
     * Create a Lblistener resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LblistenerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LblistenerArgs | LblistenerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LblistenerState | undefined;
            resourceInputs["allowedCidrs"] = state ? state.allowedCidrs : undefined;
            resourceInputs["connectionLimit"] = state ? state.connectionLimit : undefined;
            resourceInputs["insertXForwarded"] = state ? state.insertXForwarded : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["loadbalancerId"] = state ? state.loadbalancerId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["operatingStatus"] = state ? state.operatingStatus : undefined;
            resourceInputs["poolCount"] = state ? state.poolCount : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["protocolPort"] = state ? state.protocolPort : undefined;
            resourceInputs["provisioningStatus"] = state ? state.provisioningStatus : undefined;
            resourceInputs["regionId"] = state ? state.regionId : undefined;
            resourceInputs["regionName"] = state ? state.regionName : undefined;
            resourceInputs["secretId"] = state ? state.secretId : undefined;
            resourceInputs["sniSecretIds"] = state ? state.sniSecretIds : undefined;
            resourceInputs["timeoutClientData"] = state ? state.timeoutClientData : undefined;
            resourceInputs["timeoutMemberConnect"] = state ? state.timeoutMemberConnect : undefined;
            resourceInputs["timeoutMemberData"] = state ? state.timeoutMemberData : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userLists"] = state ? state.userLists : undefined;
        } else {
            const args = argsOrState as LblistenerArgs | undefined;
            if ((!args || args.loadbalancerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadbalancerId'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.protocolPort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocolPort'");
            }
            resourceInputs["allowedCidrs"] = args ? args.allowedCidrs : undefined;
            resourceInputs["connectionLimit"] = args ? args.connectionLimit : undefined;
            resourceInputs["insertXForwarded"] = args ? args.insertXForwarded : undefined;
            resourceInputs["loadbalancerId"] = args ? args.loadbalancerId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["protocolPort"] = args ? args.protocolPort : undefined;
            resourceInputs["regionId"] = args ? args.regionId : undefined;
            resourceInputs["regionName"] = args ? args.regionName : undefined;
            resourceInputs["secretId"] = args ? args.secretId : undefined;
            resourceInputs["sniSecretIds"] = args ? args.sniSecretIds : undefined;
            resourceInputs["timeoutClientData"] = args ? args.timeoutClientData : undefined;
            resourceInputs["timeoutMemberConnect"] = args ? args.timeoutMemberConnect : undefined;
            resourceInputs["timeoutMemberData"] = args ? args.timeoutMemberData : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userLists"] = args ? args.userLists : undefined;
            resourceInputs["lastUpdated"] = undefined /*out*/;
            resourceInputs["operatingStatus"] = undefined /*out*/;
            resourceInputs["poolCount"] = undefined /*out*/;
            resourceInputs["provisioningStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Lblistener.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Lblistener resources.
 */
export interface LblistenerState {
    /**
     * List of networks from which listener is accessible
     */
    allowedCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Number of simultaneous connections for this listener, between 1 and 1,000,000.
     */
    connectionLimit?: pulumi.Input<number>;
    /**
     * Insert X-Forwarded headers for 'HTTP', 'HTTPS', 'TERMINATED_HTTPS' protocols.
     */
    insertXForwarded?: pulumi.Input<boolean>;
    /**
     * Datetime when load balancer was updated at the last time.
     */
    lastUpdated?: pulumi.Input<string>;
    /**
     * ID of the target load balancer to attach newly created listener.
     */
    loadbalancerId?: pulumi.Input<string>;
    /**
     * Listener name.
     */
    name?: pulumi.Input<string>;
    /**
     * Operating status of this listener.
     */
    operatingStatus?: pulumi.Input<string>;
    /**
     * Number of pools in this listener.
     */
    poolCount?: pulumi.Input<number>;
    /**
     * ID of the desired project to create load balancer listener in. Alternative for `project_name`. One of them should be
     * specified.
     */
    projectId?: pulumi.Input<number>;
    /**
     * Name of the desired project to create load balancer listener in. Alternative for `project_id`. One of them should be
     * specified.
     */
    projectName?: pulumi.Input<string>;
    /**
     * Available values are 'HTTP', 'HTTPS', 'TCP', 'UDP', 'TERMINATED_HTTPS', 'PROMETHEUS'
     */
    protocol?: pulumi.Input<string>;
    /**
     * Port number to listen, between 1 and 65535.
     */
    protocolPort?: pulumi.Input<number>;
    /**
     * Provisioning status of this listener.
     */
    provisioningStatus?: pulumi.Input<string>;
    /**
     * ID of the desired region to create load balancer listener in. Alternative for `region_name`. One of them should be
     * specified.
     */
    regionId?: pulumi.Input<number>;
    /**
     * Name of the desired region to create load balancer listener in. Alternative for `region_id`. One of them should be
     * specified.
     */
    regionName?: pulumi.Input<string>;
    /**
     * Secret ID to use with 'TERMINATED_HTTPS' protocol.
     */
    secretId?: pulumi.Input<string>;
    /**
     * List of additional Secret IDs to use with 'TERMINATED_HTTPS' protocol.
     */
    sniSecretIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Frontend client inactivity timeout in milliseconds.
     */
    timeoutClientData?: pulumi.Input<number>;
    /**
     * Backend member connection timeout in milliseconds.
     */
    timeoutMemberConnect?: pulumi.Input<number>;
    /**
     * Backend member inactivity timeout in milliseconds.
     */
    timeoutMemberData?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.LblistenerTimeouts>;
    /**
     * Load balancer listener list of username and encrypted password items.
     */
    userLists?: pulumi.Input<pulumi.Input<inputs.LblistenerUserList>[]>;
}

/**
 * The set of arguments for constructing a Lblistener resource.
 */
export interface LblistenerArgs {
    /**
     * List of networks from which listener is accessible
     */
    allowedCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Number of simultaneous connections for this listener, between 1 and 1,000,000.
     */
    connectionLimit?: pulumi.Input<number>;
    /**
     * Insert X-Forwarded headers for 'HTTP', 'HTTPS', 'TERMINATED_HTTPS' protocols.
     */
    insertXForwarded?: pulumi.Input<boolean>;
    /**
     * ID of the target load balancer to attach newly created listener.
     */
    loadbalancerId: pulumi.Input<string>;
    /**
     * Listener name.
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the desired project to create load balancer listener in. Alternative for `project_name`. One of them should be
     * specified.
     */
    projectId?: pulumi.Input<number>;
    /**
     * Name of the desired project to create load balancer listener in. Alternative for `project_id`. One of them should be
     * specified.
     */
    projectName?: pulumi.Input<string>;
    /**
     * Available values are 'HTTP', 'HTTPS', 'TCP', 'UDP', 'TERMINATED_HTTPS', 'PROMETHEUS'
     */
    protocol: pulumi.Input<string>;
    /**
     * Port number to listen, between 1 and 65535.
     */
    protocolPort: pulumi.Input<number>;
    /**
     * ID of the desired region to create load balancer listener in. Alternative for `region_name`. One of them should be
     * specified.
     */
    regionId?: pulumi.Input<number>;
    /**
     * Name of the desired region to create load balancer listener in. Alternative for `region_id`. One of them should be
     * specified.
     */
    regionName?: pulumi.Input<string>;
    /**
     * Secret ID to use with 'TERMINATED_HTTPS' protocol.
     */
    secretId?: pulumi.Input<string>;
    /**
     * List of additional Secret IDs to use with 'TERMINATED_HTTPS' protocol.
     */
    sniSecretIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Frontend client inactivity timeout in milliseconds.
     */
    timeoutClientData?: pulumi.Input<number>;
    /**
     * Backend member connection timeout in milliseconds.
     */
    timeoutMemberConnect?: pulumi.Input<number>;
    /**
     * Backend member inactivity timeout in milliseconds.
     */
    timeoutMemberData?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.LblistenerTimeouts>;
    /**
     * Load balancer listener list of username and encrypted password items.
     */
    userLists?: pulumi.Input<pulumi.Input<inputs.LblistenerUserList>[]>;
}
