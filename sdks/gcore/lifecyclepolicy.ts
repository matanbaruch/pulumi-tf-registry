// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Lifecyclepolicy extends pulumi.CustomResource {
    /**
     * Get an existing Lifecyclepolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LifecyclepolicyState, opts?: pulumi.CustomResourceOptions): Lifecyclepolicy {
        return new Lifecyclepolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcore:index/lifecyclepolicy:Lifecyclepolicy';

    /**
     * Returns true if the given object is an instance of Lifecyclepolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Lifecyclepolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Lifecyclepolicy.__pulumiType;
    }

    public readonly action!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<number | undefined>;
    public readonly projectName!: pulumi.Output<string | undefined>;
    public readonly regionId!: pulumi.Output<number | undefined>;
    public readonly regionName!: pulumi.Output<string | undefined>;
    public readonly schedules!: pulumi.Output<outputs.LifecyclepolicySchedule[] | undefined>;
    public readonly status!: pulumi.Output<string | undefined>;
    public /*out*/ readonly userId!: pulumi.Output<number>;
    /**
     * List of managed volumes
     */
    public readonly volumes!: pulumi.Output<outputs.LifecyclepolicyVolume[] | undefined>;

    /**
     * Create a Lifecyclepolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LifecyclepolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LifecyclepolicyArgs | LifecyclepolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LifecyclepolicyState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["regionId"] = state ? state.regionId : undefined;
            resourceInputs["regionName"] = state ? state.regionName : undefined;
            resourceInputs["schedules"] = state ? state.schedules : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
            resourceInputs["volumes"] = state ? state.volumes : undefined;
        } else {
            const args = argsOrState as LifecyclepolicyArgs | undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["regionId"] = args ? args.regionId : undefined;
            resourceInputs["regionName"] = args ? args.regionName : undefined;
            resourceInputs["schedules"] = args ? args.schedules : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["volumes"] = args ? args.volumes : undefined;
            resourceInputs["userId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Lifecyclepolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Lifecyclepolicy resources.
 */
export interface LifecyclepolicyState {
    action?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    projectId?: pulumi.Input<number>;
    projectName?: pulumi.Input<string>;
    regionId?: pulumi.Input<number>;
    regionName?: pulumi.Input<string>;
    schedules?: pulumi.Input<pulumi.Input<inputs.LifecyclepolicySchedule>[]>;
    status?: pulumi.Input<string>;
    userId?: pulumi.Input<number>;
    /**
     * List of managed volumes
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.LifecyclepolicyVolume>[]>;
}

/**
 * The set of arguments for constructing a Lifecyclepolicy resource.
 */
export interface LifecyclepolicyArgs {
    action?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    projectId?: pulumi.Input<number>;
    projectName?: pulumi.Input<string>;
    regionId?: pulumi.Input<number>;
    regionName?: pulumi.Input<string>;
    schedules?: pulumi.Input<pulumi.Input<inputs.LifecyclepolicySchedule>[]>;
    status?: pulumi.Input<string>;
    /**
     * List of managed volumes
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.LifecyclepolicyVolume>[]>;
}
