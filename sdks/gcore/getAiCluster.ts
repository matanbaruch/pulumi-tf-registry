// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getAiCluster(args: GetAiClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetAiClusterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcore:index/getAiCluster:getAiCluster", {
        "clusterId": args.clusterId,
        "id": args.id,
        "projectId": args.projectId,
        "projectName": args.projectName,
        "regionId": args.regionId,
        "regionName": args.regionName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAiCluster.
 */
export interface GetAiClusterArgs {
    clusterId: string;
    id?: string;
    projectId?: number;
    projectName?: string;
    regionId?: number;
    regionName?: string;
}

/**
 * A collection of values returned by getAiCluster.
 */
export interface GetAiClusterResult {
    readonly clusterId: string;
    readonly clusterMetadata: {[key: string]: string};
    readonly clusterName: string;
    readonly clusterStatus: string;
    readonly createdAt: string;
    readonly creatorTaskId: string;
    readonly flavor: string;
    readonly id: string;
    readonly imageId: string;
    readonly imageName: string;
    readonly interfaces: outputs.GetAiClusterInterface[];
    readonly keypairName: string;
    readonly password: string;
    readonly poplarServers: outputs.GetAiClusterPoplarServer[];
    readonly projectId?: number;
    readonly projectName?: string;
    readonly regionId?: number;
    readonly regionName?: string;
    readonly securityGroups: outputs.GetAiClusterSecurityGroup[];
    readonly taskId: string;
    readonly taskStatus: string;
    readonly userData: string;
    readonly username: string;
    readonly volumes: outputs.GetAiClusterVolume[];
}
export function getAiClusterOutput(args: GetAiClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAiClusterResult> {
    return pulumi.output(args).apply((a: any) => getAiCluster(a, opts))
}

/**
 * A collection of arguments for invoking getAiCluster.
 */
export interface GetAiClusterOutputArgs {
    clusterId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    projectId?: pulumi.Input<number>;
    projectName?: pulumi.Input<string>;
    regionId?: pulumi.Input<number>;
    regionName?: pulumi.Input<string>;
}
