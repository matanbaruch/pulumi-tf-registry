// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Reservedfixedip extends pulumi.CustomResource {
    /**
     * Get an existing Reservedfixedip resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReservedfixedipState, opts?: pulumi.CustomResourceOptions): Reservedfixedip {
        return new Reservedfixedip(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcore:index/reservedfixedip:Reservedfixedip';

    /**
     * Returns true if the given object is an instance of Reservedfixedip.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Reservedfixedip {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Reservedfixedip.__pulumiType;
    }

    /**
     * Group of IP addresses that share the current IP as VIP
     */
    public readonly allowedAddressPairs!: pulumi.Output<outputs.ReservedfixedipAllowedAddressPair[] | undefined>;
    /**
     * IP address of the port. Can be passed with type `ip_address` or retrieved after creation.
     */
    public readonly fixedIpAddress!: pulumi.Output<string>;
    /**
     * Flag to indicate whether the port is a virtual IP address.
     */
    public readonly isVip!: pulumi.Output<boolean>;
    /**
     * Datetime when reserved fixed ip was updated at the last time.
     */
    public /*out*/ readonly lastUpdated!: pulumi.Output<string>;
    /**
     * ID of the desired network. Should be used together with `subnet_id`.
     */
    public readonly networkId!: pulumi.Output<string>;
    /**
     * ID of the port underlying the reserved fixed IP. Can be passed with type `port` or retrieved after creation.
     */
    public readonly portId!: pulumi.Output<string>;
    /**
     * ID of the desired project to create reserved fixed ip in. Alternative for `project_name`. One of them should be
     * specified.
     */
    public readonly projectId!: pulumi.Output<number | undefined>;
    /**
     * Name of the desired project to create reserved fixed ip in. Alternative for `project_id`. One of them should be
     * specified.
     */
    public readonly projectName!: pulumi.Output<string | undefined>;
    /**
     * ID of the desired region to create reserved fixed ip in. Alternative for `region_name`. One of them should be specified.
     */
    public readonly regionId!: pulumi.Output<number | undefined>;
    /**
     * Name of the desired region to create reserved fixed ip in. Alternative for `region_id`. One of them should be specified.
     */
    public readonly regionName!: pulumi.Output<string | undefined>;
    /**
     * Underlying port status
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * ID of the desired subnet. Can be used together with `network_id`.
     */
    public readonly subnetId!: pulumi.Output<string>;
    /**
     * Type of the reserved fixed ip for create. Available values are 'external', 'subnet', 'any_subnet', 'ip_address', 'port'
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Reservedfixedip resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ReservedfixedipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReservedfixedipArgs | ReservedfixedipState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ReservedfixedipState | undefined;
            resourceInputs["allowedAddressPairs"] = state ? state.allowedAddressPairs : undefined;
            resourceInputs["fixedIpAddress"] = state ? state.fixedIpAddress : undefined;
            resourceInputs["isVip"] = state ? state.isVip : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["portId"] = state ? state.portId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["regionId"] = state ? state.regionId : undefined;
            resourceInputs["regionName"] = state ? state.regionName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ReservedfixedipArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["allowedAddressPairs"] = args ? args.allowedAddressPairs : undefined;
            resourceInputs["fixedIpAddress"] = args ? args.fixedIpAddress : undefined;
            resourceInputs["isVip"] = args ? args.isVip : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["portId"] = args ? args.portId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["regionId"] = args ? args.regionId : undefined;
            resourceInputs["regionName"] = args ? args.regionName : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["lastUpdated"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Reservedfixedip.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Reservedfixedip resources.
 */
export interface ReservedfixedipState {
    /**
     * Group of IP addresses that share the current IP as VIP
     */
    allowedAddressPairs?: pulumi.Input<pulumi.Input<inputs.ReservedfixedipAllowedAddressPair>[]>;
    /**
     * IP address of the port. Can be passed with type `ip_address` or retrieved after creation.
     */
    fixedIpAddress?: pulumi.Input<string>;
    /**
     * Flag to indicate whether the port is a virtual IP address.
     */
    isVip?: pulumi.Input<boolean>;
    /**
     * Datetime when reserved fixed ip was updated at the last time.
     */
    lastUpdated?: pulumi.Input<string>;
    /**
     * ID of the desired network. Should be used together with `subnet_id`.
     */
    networkId?: pulumi.Input<string>;
    /**
     * ID of the port underlying the reserved fixed IP. Can be passed with type `port` or retrieved after creation.
     */
    portId?: pulumi.Input<string>;
    /**
     * ID of the desired project to create reserved fixed ip in. Alternative for `project_name`. One of them should be
     * specified.
     */
    projectId?: pulumi.Input<number>;
    /**
     * Name of the desired project to create reserved fixed ip in. Alternative for `project_id`. One of them should be
     * specified.
     */
    projectName?: pulumi.Input<string>;
    /**
     * ID of the desired region to create reserved fixed ip in. Alternative for `region_name`. One of them should be specified.
     */
    regionId?: pulumi.Input<number>;
    /**
     * Name of the desired region to create reserved fixed ip in. Alternative for `region_id`. One of them should be specified.
     */
    regionName?: pulumi.Input<string>;
    /**
     * Underlying port status
     */
    status?: pulumi.Input<string>;
    /**
     * ID of the desired subnet. Can be used together with `network_id`.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Type of the reserved fixed ip for create. Available values are 'external', 'subnet', 'any_subnet', 'ip_address', 'port'
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Reservedfixedip resource.
 */
export interface ReservedfixedipArgs {
    /**
     * Group of IP addresses that share the current IP as VIP
     */
    allowedAddressPairs?: pulumi.Input<pulumi.Input<inputs.ReservedfixedipAllowedAddressPair>[]>;
    /**
     * IP address of the port. Can be passed with type `ip_address` or retrieved after creation.
     */
    fixedIpAddress?: pulumi.Input<string>;
    /**
     * Flag to indicate whether the port is a virtual IP address.
     */
    isVip?: pulumi.Input<boolean>;
    /**
     * ID of the desired network. Should be used together with `subnet_id`.
     */
    networkId?: pulumi.Input<string>;
    /**
     * ID of the port underlying the reserved fixed IP. Can be passed with type `port` or retrieved after creation.
     */
    portId?: pulumi.Input<string>;
    /**
     * ID of the desired project to create reserved fixed ip in. Alternative for `project_name`. One of them should be
     * specified.
     */
    projectId?: pulumi.Input<number>;
    /**
     * Name of the desired project to create reserved fixed ip in. Alternative for `project_id`. One of them should be
     * specified.
     */
    projectName?: pulumi.Input<string>;
    /**
     * ID of the desired region to create reserved fixed ip in. Alternative for `region_name`. One of them should be specified.
     */
    regionId?: pulumi.Input<number>;
    /**
     * Name of the desired region to create reserved fixed ip in. Alternative for `region_id`. One of them should be specified.
     */
    regionName?: pulumi.Input<string>;
    /**
     * ID of the desired subnet. Can be used together with `network_id`.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Type of the reserved fixed ip for create. Available values are 'external', 'subnet', 'any_subnet', 'ip_address', 'port'
     */
    type: pulumi.Input<string>;
}
