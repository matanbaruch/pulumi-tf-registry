// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CdnOrigingroup extends pulumi.CustomResource {
    /**
     * Get an existing CdnOrigingroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CdnOrigingroupState, opts?: pulumi.CustomResourceOptions): CdnOrigingroup {
        return new CdnOrigingroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcore:index/cdnOrigingroup:CdnOrigingroup';

    /**
     * Returns true if the given object is an instance of CdnOrigingroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CdnOrigingroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CdnOrigingroup.__pulumiType;
    }

    /**
     * Name of the origin group
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Contains information about all IP address or Domain names of your origin and the port if custom
     */
    public readonly origins!: pulumi.Output<outputs.CdnOrigingroupOrigin[]>;
    /**
     * Available values: error, timeout, invalid_header, http_403, http_404, http_429, http_500, http_502, http_503, http_504.
     */
    public readonly proxyNextUpstreams!: pulumi.Output<string[]>;
    /**
     * This options have two possible values: true — The option is active. In case the origin responds with 4XX or 5XX codes,
     * use the next origin from the list. false — The option is disabled.
     */
    public readonly useNext!: pulumi.Output<boolean>;

    /**
     * Create a CdnOrigingroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CdnOrigingroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CdnOrigingroupArgs | CdnOrigingroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CdnOrigingroupState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["origins"] = state ? state.origins : undefined;
            resourceInputs["proxyNextUpstreams"] = state ? state.proxyNextUpstreams : undefined;
            resourceInputs["useNext"] = state ? state.useNext : undefined;
        } else {
            const args = argsOrState as CdnOrigingroupArgs | undefined;
            if ((!args || args.origins === undefined) && !opts.urn) {
                throw new Error("Missing required property 'origins'");
            }
            if ((!args || args.useNext === undefined) && !opts.urn) {
                throw new Error("Missing required property 'useNext'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["origins"] = args ? args.origins : undefined;
            resourceInputs["proxyNextUpstreams"] = args ? args.proxyNextUpstreams : undefined;
            resourceInputs["useNext"] = args ? args.useNext : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CdnOrigingroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CdnOrigingroup resources.
 */
export interface CdnOrigingroupState {
    /**
     * Name of the origin group
     */
    name?: pulumi.Input<string>;
    /**
     * Contains information about all IP address or Domain names of your origin and the port if custom
     */
    origins?: pulumi.Input<pulumi.Input<inputs.CdnOrigingroupOrigin>[]>;
    /**
     * Available values: error, timeout, invalid_header, http_403, http_404, http_429, http_500, http_502, http_503, http_504.
     */
    proxyNextUpstreams?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This options have two possible values: true — The option is active. In case the origin responds with 4XX or 5XX codes,
     * use the next origin from the list. false — The option is disabled.
     */
    useNext?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a CdnOrigingroup resource.
 */
export interface CdnOrigingroupArgs {
    /**
     * Name of the origin group
     */
    name?: pulumi.Input<string>;
    /**
     * Contains information about all IP address or Domain names of your origin and the port if custom
     */
    origins: pulumi.Input<pulumi.Input<inputs.CdnOrigingroupOrigin>[]>;
    /**
     * Available values: error, timeout, invalid_header, http_403, http_404, http_429, http_500, http_502, http_503, http_504.
     */
    proxyNextUpstreams?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This options have two possible values: true — The option is active. In case the origin responds with 4XX or 5XX codes,
     * use the next origin from the list. false — The option is disabled.
     */
    useNext: pulumi.Input<boolean>;
}
