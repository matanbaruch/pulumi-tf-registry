// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Lbmember extends pulumi.CustomResource {
    /**
     * Get an existing Lbmember resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LbmemberState, opts?: pulumi.CustomResourceOptions): Lbmember {
        return new Lbmember(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcore:index/lbmember:Lbmember';

    /**
     * Returns true if the given object is an instance of Lbmember.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Lbmember {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Lbmember.__pulumiType;
    }

    /**
     * IP address to communicate with real server.
     */
    public readonly address!: pulumi.Output<string>;
    /**
     * ID of the gcore_instance.
     */
    public readonly instanceId!: pulumi.Output<string | undefined>;
    /**
     * Datetime when load balancer member was updated at the last time.
     */
    public /*out*/ readonly lastUpdated!: pulumi.Output<string>;
    /**
     * Operating status of this member.
     */
    public /*out*/ readonly operatingStatus!: pulumi.Output<string>;
    /**
     * ID of the target load balancer pool to attach newly created member.
     */
    public readonly poolId!: pulumi.Output<string>;
    /**
     * ID of the desired project to create load balancer member in. Alternative for `project_name`. One of them should be
     * specified.
     */
    public readonly projectId!: pulumi.Output<number | undefined>;
    /**
     * Name of the desired project to create load balancer member in. Alternative for `project_id`. One of them should be
     * specified.
     */
    public readonly projectName!: pulumi.Output<string | undefined>;
    /**
     * Port to communicate with real server.
     */
    public readonly protocolPort!: pulumi.Output<number>;
    /**
     * ID of the desired region to create load balancer member in. Alternative for `region_name`. One of them should be
     * specified.
     */
    public readonly regionId!: pulumi.Output<number | undefined>;
    /**
     * Name of the desired region to create load balancer member in. Alternative for `region_id`. One of them should be
     * specified.
     */
    public readonly regionName!: pulumi.Output<string | undefined>;
    /**
     * ID of the subnet in which real server placed.
     */
    public readonly subnetId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.LbmemberTimeouts | undefined>;
    /**
     * Value between 0 and 256, default 1.
     */
    public readonly weight!: pulumi.Output<number | undefined>;

    /**
     * Create a Lbmember resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LbmemberArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LbmemberArgs | LbmemberState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LbmemberState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["operatingStatus"] = state ? state.operatingStatus : undefined;
            resourceInputs["poolId"] = state ? state.poolId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["protocolPort"] = state ? state.protocolPort : undefined;
            resourceInputs["regionId"] = state ? state.regionId : undefined;
            resourceInputs["regionName"] = state ? state.regionName : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as LbmemberArgs | undefined;
            if ((!args || args.address === undefined) && !opts.urn) {
                throw new Error("Missing required property 'address'");
            }
            if ((!args || args.poolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'poolId'");
            }
            if ((!args || args.protocolPort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocolPort'");
            }
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["poolId"] = args ? args.poolId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["protocolPort"] = args ? args.protocolPort : undefined;
            resourceInputs["regionId"] = args ? args.regionId : undefined;
            resourceInputs["regionName"] = args ? args.regionName : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
            resourceInputs["lastUpdated"] = undefined /*out*/;
            resourceInputs["operatingStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Lbmember.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Lbmember resources.
 */
export interface LbmemberState {
    /**
     * IP address to communicate with real server.
     */
    address?: pulumi.Input<string>;
    /**
     * ID of the gcore_instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Datetime when load balancer member was updated at the last time.
     */
    lastUpdated?: pulumi.Input<string>;
    /**
     * Operating status of this member.
     */
    operatingStatus?: pulumi.Input<string>;
    /**
     * ID of the target load balancer pool to attach newly created member.
     */
    poolId?: pulumi.Input<string>;
    /**
     * ID of the desired project to create load balancer member in. Alternative for `project_name`. One of them should be
     * specified.
     */
    projectId?: pulumi.Input<number>;
    /**
     * Name of the desired project to create load balancer member in. Alternative for `project_id`. One of them should be
     * specified.
     */
    projectName?: pulumi.Input<string>;
    /**
     * Port to communicate with real server.
     */
    protocolPort?: pulumi.Input<number>;
    /**
     * ID of the desired region to create load balancer member in. Alternative for `region_name`. One of them should be
     * specified.
     */
    regionId?: pulumi.Input<number>;
    /**
     * Name of the desired region to create load balancer member in. Alternative for `region_id`. One of them should be
     * specified.
     */
    regionName?: pulumi.Input<string>;
    /**
     * ID of the subnet in which real server placed.
     */
    subnetId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LbmemberTimeouts>;
    /**
     * Value between 0 and 256, default 1.
     */
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Lbmember resource.
 */
export interface LbmemberArgs {
    /**
     * IP address to communicate with real server.
     */
    address: pulumi.Input<string>;
    /**
     * ID of the gcore_instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * ID of the target load balancer pool to attach newly created member.
     */
    poolId: pulumi.Input<string>;
    /**
     * ID of the desired project to create load balancer member in. Alternative for `project_name`. One of them should be
     * specified.
     */
    projectId?: pulumi.Input<number>;
    /**
     * Name of the desired project to create load balancer member in. Alternative for `project_id`. One of them should be
     * specified.
     */
    projectName?: pulumi.Input<string>;
    /**
     * Port to communicate with real server.
     */
    protocolPort: pulumi.Input<number>;
    /**
     * ID of the desired region to create load balancer member in. Alternative for `region_name`. One of them should be
     * specified.
     */
    regionId?: pulumi.Input<number>;
    /**
     * Name of the desired region to create load balancer member in. Alternative for `region_id`. One of them should be
     * specified.
     */
    regionName?: pulumi.Input<string>;
    /**
     * ID of the subnet in which real server placed.
     */
    subnetId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LbmemberTimeouts>;
    /**
     * Value between 0 and 256, default 1.
     */
    weight?: pulumi.Input<number>;
}
