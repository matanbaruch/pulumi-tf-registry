// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DnsZoneRecord extends pulumi.CustomResource {
    /**
     * Get an existing DnsZoneRecord resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsZoneRecordState, opts?: pulumi.CustomResourceOptions): DnsZoneRecord {
        return new DnsZoneRecord(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcore:index/dnsZoneRecord:DnsZoneRecord';

    /**
     * Returns true if the given object is an instance of DnsZoneRecord.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsZoneRecord {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsZoneRecord.__pulumiType;
    }

    /**
     * A domain of DNS Zone Record resource.
     */
    public readonly domain!: pulumi.Output<string>;
    public readonly filters!: pulumi.Output<outputs.DnsZoneRecordFilter[] | undefined>;
    public readonly metas!: pulumi.Output<outputs.DnsZoneRecordMeta[] | undefined>;
    /**
     * An array of contents with meta of DNS Zone Record resource.
     */
    public readonly resourceRecords!: pulumi.Output<outputs.DnsZoneRecordResourceRecord[]>;
    public readonly timeouts!: pulumi.Output<outputs.DnsZoneRecordTimeouts | undefined>;
    /**
     * A ttl of DNS Zone Record resource.
     */
    public readonly ttl!: pulumi.Output<number | undefined>;
    /**
     * A type of DNS Zone Record resource.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * A zone of DNS Zone Record resource.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a DnsZoneRecord resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsZoneRecordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsZoneRecordArgs | DnsZoneRecordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsZoneRecordState | undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["filters"] = state ? state.filters : undefined;
            resourceInputs["metas"] = state ? state.metas : undefined;
            resourceInputs["resourceRecords"] = state ? state.resourceRecords : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as DnsZoneRecordArgs | undefined;
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.resourceRecords === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceRecords'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["filters"] = args ? args.filters : undefined;
            resourceInputs["metas"] = args ? args.metas : undefined;
            resourceInputs["resourceRecords"] = args ? args.resourceRecords : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsZoneRecord.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DnsZoneRecord resources.
 */
export interface DnsZoneRecordState {
    /**
     * A domain of DNS Zone Record resource.
     */
    domain?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.DnsZoneRecordFilter>[]>;
    metas?: pulumi.Input<pulumi.Input<inputs.DnsZoneRecordMeta>[]>;
    /**
     * An array of contents with meta of DNS Zone Record resource.
     */
    resourceRecords?: pulumi.Input<pulumi.Input<inputs.DnsZoneRecordResourceRecord>[]>;
    timeouts?: pulumi.Input<inputs.DnsZoneRecordTimeouts>;
    /**
     * A ttl of DNS Zone Record resource.
     */
    ttl?: pulumi.Input<number>;
    /**
     * A type of DNS Zone Record resource.
     */
    type?: pulumi.Input<string>;
    /**
     * A zone of DNS Zone Record resource.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DnsZoneRecord resource.
 */
export interface DnsZoneRecordArgs {
    /**
     * A domain of DNS Zone Record resource.
     */
    domain: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.DnsZoneRecordFilter>[]>;
    metas?: pulumi.Input<pulumi.Input<inputs.DnsZoneRecordMeta>[]>;
    /**
     * An array of contents with meta of DNS Zone Record resource.
     */
    resourceRecords: pulumi.Input<pulumi.Input<inputs.DnsZoneRecordResourceRecord>[]>;
    timeouts?: pulumi.Input<inputs.DnsZoneRecordTimeouts>;
    /**
     * A ttl of DNS Zone Record resource.
     */
    ttl?: pulumi.Input<number>;
    /**
     * A type of DNS Zone Record resource.
     */
    type: pulumi.Input<string>;
    /**
     * A zone of DNS Zone Record resource.
     */
    zone: pulumi.Input<string>;
}
