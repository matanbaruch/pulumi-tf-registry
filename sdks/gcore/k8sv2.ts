// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class K8sv2 extends pulumi.CustomResource {
    /**
     * Get an existing K8sv2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: K8sv2State, opts?: pulumi.CustomResourceOptions): K8sv2 {
        return new K8sv2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcore:index/k8sv2:K8sv2';

    /**
     * Returns true if the given object is an instance of K8sv2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is K8sv2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === K8sv2.__pulumiType;
    }

    /**
     * Cluster authentication configuration.
     */
    public readonly authentication!: pulumi.Output<outputs.K8sv2Authentication | undefined>;
    /**
     * Cluster autoscaler configuration params. Keys and values are expected to follow the cluster-autoscaler option format.
     */
    public readonly autoscalerConfig!: pulumi.Output<{[key: string]: string}>;
    /**
     * Cluster CNI configuration.
     */
    public readonly cni!: pulumi.Output<outputs.K8sv2Cni | undefined>;
    /**
     * Cluster creation date.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public /*out*/ readonly creatorTaskId!: pulumi.Output<string>;
    /**
     * Fixed network used to allocate network addresses for cluster nodes.
     */
    public readonly fixedNetwork!: pulumi.Output<string | undefined>;
    /**
     * Fixed subnet used to allocate network addresses for cluster nodes. Subnet should have a router.
     */
    public readonly fixedSubnet!: pulumi.Output<string | undefined>;
    /**
     * Enable public IPv6 address.
     */
    public readonly isIpv6!: pulumi.Output<boolean | undefined>;
    /**
     * True if the cluster is public.
     */
    public /*out*/ readonly isPublic!: pulumi.Output<boolean>;
    /**
     * Name of the keypair used for SSH access to nodes.
     */
    public readonly keypair!: pulumi.Output<string>;
    /**
     * Cluster name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Pods IPv4 IP pool in CIDR notation.
     */
    public readonly podsIpPool!: pulumi.Output<string>;
    /**
     * Pods IPv6 IP pool in CIDR notation.
     */
    public readonly podsIpv6Pool!: pulumi.Output<string>;
    public readonly pools!: pulumi.Output<outputs.K8sv2Pool[]>;
    public readonly projectId!: pulumi.Output<number | undefined>;
    public readonly projectName!: pulumi.Output<string | undefined>;
    public readonly regionId!: pulumi.Output<number | undefined>;
    public readonly regionName!: pulumi.Output<string | undefined>;
    /**
     * Services IPv4 IP pool in CIDR notation.
     */
    public readonly servicesIpPool!: pulumi.Output<string>;
    /**
     * Services IPv6 IP pool in CIDR notation.
     */
    public readonly servicesIpv6Pool!: pulumi.Output<string>;
    /**
     * Cluster status.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    public /*out*/ readonly taskId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.K8sv2Timeouts | undefined>;
    /**
     * Kubernetes version.
     */
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a K8sv2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: K8sv2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: K8sv2Args | K8sv2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as K8sv2State | undefined;
            resourceInputs["authentication"] = state ? state.authentication : undefined;
            resourceInputs["autoscalerConfig"] = state ? state.autoscalerConfig : undefined;
            resourceInputs["cni"] = state ? state.cni : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["creatorTaskId"] = state ? state.creatorTaskId : undefined;
            resourceInputs["fixedNetwork"] = state ? state.fixedNetwork : undefined;
            resourceInputs["fixedSubnet"] = state ? state.fixedSubnet : undefined;
            resourceInputs["isIpv6"] = state ? state.isIpv6 : undefined;
            resourceInputs["isPublic"] = state ? state.isPublic : undefined;
            resourceInputs["keypair"] = state ? state.keypair : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["podsIpPool"] = state ? state.podsIpPool : undefined;
            resourceInputs["podsIpv6Pool"] = state ? state.podsIpv6Pool : undefined;
            resourceInputs["pools"] = state ? state.pools : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["regionId"] = state ? state.regionId : undefined;
            resourceInputs["regionName"] = state ? state.regionName : undefined;
            resourceInputs["servicesIpPool"] = state ? state.servicesIpPool : undefined;
            resourceInputs["servicesIpv6Pool"] = state ? state.servicesIpv6Pool : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["taskId"] = state ? state.taskId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as K8sv2Args | undefined;
            if ((!args || args.keypair === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keypair'");
            }
            if ((!args || args.pools === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pools'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["authentication"] = args ? args.authentication : undefined;
            resourceInputs["autoscalerConfig"] = args ? args.autoscalerConfig : undefined;
            resourceInputs["cni"] = args ? args.cni : undefined;
            resourceInputs["fixedNetwork"] = args ? args.fixedNetwork : undefined;
            resourceInputs["fixedSubnet"] = args ? args.fixedSubnet : undefined;
            resourceInputs["isIpv6"] = args ? args.isIpv6 : undefined;
            resourceInputs["keypair"] = args ? args.keypair : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["podsIpPool"] = args ? args.podsIpPool : undefined;
            resourceInputs["podsIpv6Pool"] = args ? args.podsIpv6Pool : undefined;
            resourceInputs["pools"] = args ? args.pools : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["regionId"] = args ? args.regionId : undefined;
            resourceInputs["regionName"] = args ? args.regionName : undefined;
            resourceInputs["servicesIpPool"] = args ? args.servicesIpPool : undefined;
            resourceInputs["servicesIpv6Pool"] = args ? args.servicesIpv6Pool : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["creatorTaskId"] = undefined /*out*/;
            resourceInputs["isPublic"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["taskId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(K8sv2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering K8sv2 resources.
 */
export interface K8sv2State {
    /**
     * Cluster authentication configuration.
     */
    authentication?: pulumi.Input<inputs.K8sv2Authentication>;
    /**
     * Cluster autoscaler configuration params. Keys and values are expected to follow the cluster-autoscaler option format.
     */
    autoscalerConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Cluster CNI configuration.
     */
    cni?: pulumi.Input<inputs.K8sv2Cni>;
    /**
     * Cluster creation date.
     */
    createdAt?: pulumi.Input<string>;
    creatorTaskId?: pulumi.Input<string>;
    /**
     * Fixed network used to allocate network addresses for cluster nodes.
     */
    fixedNetwork?: pulumi.Input<string>;
    /**
     * Fixed subnet used to allocate network addresses for cluster nodes. Subnet should have a router.
     */
    fixedSubnet?: pulumi.Input<string>;
    /**
     * Enable public IPv6 address.
     */
    isIpv6?: pulumi.Input<boolean>;
    /**
     * True if the cluster is public.
     */
    isPublic?: pulumi.Input<boolean>;
    /**
     * Name of the keypair used for SSH access to nodes.
     */
    keypair?: pulumi.Input<string>;
    /**
     * Cluster name.
     */
    name?: pulumi.Input<string>;
    /**
     * Pods IPv4 IP pool in CIDR notation.
     */
    podsIpPool?: pulumi.Input<string>;
    /**
     * Pods IPv6 IP pool in CIDR notation.
     */
    podsIpv6Pool?: pulumi.Input<string>;
    pools?: pulumi.Input<pulumi.Input<inputs.K8sv2Pool>[]>;
    projectId?: pulumi.Input<number>;
    projectName?: pulumi.Input<string>;
    regionId?: pulumi.Input<number>;
    regionName?: pulumi.Input<string>;
    /**
     * Services IPv4 IP pool in CIDR notation.
     */
    servicesIpPool?: pulumi.Input<string>;
    /**
     * Services IPv6 IP pool in CIDR notation.
     */
    servicesIpv6Pool?: pulumi.Input<string>;
    /**
     * Cluster status.
     */
    status?: pulumi.Input<string>;
    taskId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.K8sv2Timeouts>;
    /**
     * Kubernetes version.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a K8sv2 resource.
 */
export interface K8sv2Args {
    /**
     * Cluster authentication configuration.
     */
    authentication?: pulumi.Input<inputs.K8sv2Authentication>;
    /**
     * Cluster autoscaler configuration params. Keys and values are expected to follow the cluster-autoscaler option format.
     */
    autoscalerConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Cluster CNI configuration.
     */
    cni?: pulumi.Input<inputs.K8sv2Cni>;
    /**
     * Fixed network used to allocate network addresses for cluster nodes.
     */
    fixedNetwork?: pulumi.Input<string>;
    /**
     * Fixed subnet used to allocate network addresses for cluster nodes. Subnet should have a router.
     */
    fixedSubnet?: pulumi.Input<string>;
    /**
     * Enable public IPv6 address.
     */
    isIpv6?: pulumi.Input<boolean>;
    /**
     * Name of the keypair used for SSH access to nodes.
     */
    keypair: pulumi.Input<string>;
    /**
     * Cluster name.
     */
    name?: pulumi.Input<string>;
    /**
     * Pods IPv4 IP pool in CIDR notation.
     */
    podsIpPool?: pulumi.Input<string>;
    /**
     * Pods IPv6 IP pool in CIDR notation.
     */
    podsIpv6Pool?: pulumi.Input<string>;
    pools: pulumi.Input<pulumi.Input<inputs.K8sv2Pool>[]>;
    projectId?: pulumi.Input<number>;
    projectName?: pulumi.Input<string>;
    regionId?: pulumi.Input<number>;
    regionName?: pulumi.Input<string>;
    /**
     * Services IPv4 IP pool in CIDR notation.
     */
    servicesIpPool?: pulumi.Input<string>;
    /**
     * Services IPv6 IP pool in CIDR notation.
     */
    servicesIpv6Pool?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.K8sv2Timeouts>;
    /**
     * Kubernetes version.
     */
    version: pulumi.Input<string>;
}
