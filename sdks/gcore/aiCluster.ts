// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AiCluster extends pulumi.CustomResource {
    /**
     * Get an existing AiCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AiClusterState, opts?: pulumi.CustomResourceOptions): AiCluster {
        return new AiCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcore:index/aiCluster:AiCluster';

    /**
     * Returns true if the given object is an instance of AiCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AiCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AiCluster.__pulumiType;
    }

    /**
     * Cluster metadata (simple key-value pairs)
     */
    public readonly clusterMetadata!: pulumi.Output<{[key: string]: string}>;
    /**
     * AI Cluster Name
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * AI Cluster status
     */
    public readonly clusterStatus!: pulumi.Output<string>;
    /**
     * Datetime when the cluster was created
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Task that created this entity
     */
    public /*out*/ readonly creatorTaskId!: pulumi.Output<string>;
    /**
     * Flavor ID (name)
     */
    public readonly flavor!: pulumi.Output<string>;
    /**
     * Image ID
     */
    public readonly imageId!: pulumi.Output<string>;
    /**
     * Image name
     */
    public /*out*/ readonly imageName!: pulumi.Output<string>;
    /**
     * Networks managed by user and associated with the cluster
     */
    public readonly interfaces!: pulumi.Output<outputs.AiClusterInterface[]>;
    /**
     * Ssh keypair name
     */
    public readonly keypairName!: pulumi.Output<string | undefined>;
    /**
     * A password for baremetal instance. This parameter is used to set a password for the Admin user on a Windows instance, a
     * default user or a new user on a Linux instance
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Poplar servers
     */
    public /*out*/ readonly poplarServers!: pulumi.Output<outputs.AiClusterPoplarServer[]>;
    public readonly projectId!: pulumi.Output<number | undefined>;
    public readonly projectName!: pulumi.Output<string | undefined>;
    public readonly regionId!: pulumi.Output<number | undefined>;
    public readonly regionName!: pulumi.Output<string>;
    /**
     * Security groups attached to the cluster
     */
    public readonly securityGroups!: pulumi.Output<outputs.AiClusterSecurityGroup[] | undefined>;
    /**
     * Task ID associated with the cluster
     */
    public /*out*/ readonly taskId!: pulumi.Output<string>;
    /**
     * Task status
     */
    public /*out*/ readonly taskStatus!: pulumi.Output<string>;
    /**
     * String in base64 format. Must not be passed together with 'username' or 'password'. Examples of the user_data:
     * https://cloudinit.readthedocs.io/en/latest/topics/examples.html
     */
    public readonly userData!: pulumi.Output<string>;
    /**
     * A name of a new user in the Linux instance. It may be passed with a 'password' parameter
     */
    public readonly username!: pulumi.Output<string>;
    /**
     * List of volumes attached to the cluster
     */
    public readonly volumes!: pulumi.Output<outputs.AiClusterVolume[] | undefined>;

    /**
     * Create a AiCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AiClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AiClusterArgs | AiClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AiClusterState | undefined;
            resourceInputs["clusterMetadata"] = state ? state.clusterMetadata : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["clusterStatus"] = state ? state.clusterStatus : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["creatorTaskId"] = state ? state.creatorTaskId : undefined;
            resourceInputs["flavor"] = state ? state.flavor : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["imageName"] = state ? state.imageName : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["keypairName"] = state ? state.keypairName : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["poplarServers"] = state ? state.poplarServers : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["regionId"] = state ? state.regionId : undefined;
            resourceInputs["regionName"] = state ? state.regionName : undefined;
            resourceInputs["securityGroups"] = state ? state.securityGroups : undefined;
            resourceInputs["taskId"] = state ? state.taskId : undefined;
            resourceInputs["taskStatus"] = state ? state.taskStatus : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["volumes"] = state ? state.volumes : undefined;
        } else {
            const args = argsOrState as AiClusterArgs | undefined;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.flavor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flavor'");
            }
            if ((!args || args.imageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageId'");
            }
            if ((!args || args.interfaces === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interfaces'");
            }
            resourceInputs["clusterMetadata"] = args ? args.clusterMetadata : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["clusterStatus"] = args ? args.clusterStatus : undefined;
            resourceInputs["flavor"] = args ? args.flavor : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["keypairName"] = args ? args.keypairName : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["regionId"] = args ? args.regionId : undefined;
            resourceInputs["regionName"] = args ? args.regionName : undefined;
            resourceInputs["securityGroups"] = args ? args.securityGroups : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["volumes"] = args ? args.volumes : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["creatorTaskId"] = undefined /*out*/;
            resourceInputs["imageName"] = undefined /*out*/;
            resourceInputs["poplarServers"] = undefined /*out*/;
            resourceInputs["taskId"] = undefined /*out*/;
            resourceInputs["taskStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AiCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AiCluster resources.
 */
export interface AiClusterState {
    /**
     * Cluster metadata (simple key-value pairs)
     */
    clusterMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * AI Cluster Name
     */
    clusterName?: pulumi.Input<string>;
    /**
     * AI Cluster status
     */
    clusterStatus?: pulumi.Input<string>;
    /**
     * Datetime when the cluster was created
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Task that created this entity
     */
    creatorTaskId?: pulumi.Input<string>;
    /**
     * Flavor ID (name)
     */
    flavor?: pulumi.Input<string>;
    /**
     * Image ID
     */
    imageId?: pulumi.Input<string>;
    /**
     * Image name
     */
    imageName?: pulumi.Input<string>;
    /**
     * Networks managed by user and associated with the cluster
     */
    interfaces?: pulumi.Input<pulumi.Input<inputs.AiClusterInterface>[]>;
    /**
     * Ssh keypair name
     */
    keypairName?: pulumi.Input<string>;
    /**
     * A password for baremetal instance. This parameter is used to set a password for the Admin user on a Windows instance, a
     * default user or a new user on a Linux instance
     */
    password?: pulumi.Input<string>;
    /**
     * Poplar servers
     */
    poplarServers?: pulumi.Input<pulumi.Input<inputs.AiClusterPoplarServer>[]>;
    projectId?: pulumi.Input<number>;
    projectName?: pulumi.Input<string>;
    regionId?: pulumi.Input<number>;
    regionName?: pulumi.Input<string>;
    /**
     * Security groups attached to the cluster
     */
    securityGroups?: pulumi.Input<pulumi.Input<inputs.AiClusterSecurityGroup>[]>;
    /**
     * Task ID associated with the cluster
     */
    taskId?: pulumi.Input<string>;
    /**
     * Task status
     */
    taskStatus?: pulumi.Input<string>;
    /**
     * String in base64 format. Must not be passed together with 'username' or 'password'. Examples of the user_data:
     * https://cloudinit.readthedocs.io/en/latest/topics/examples.html
     */
    userData?: pulumi.Input<string>;
    /**
     * A name of a new user in the Linux instance. It may be passed with a 'password' parameter
     */
    username?: pulumi.Input<string>;
    /**
     * List of volumes attached to the cluster
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.AiClusterVolume>[]>;
}

/**
 * The set of arguments for constructing a AiCluster resource.
 */
export interface AiClusterArgs {
    /**
     * Cluster metadata (simple key-value pairs)
     */
    clusterMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * AI Cluster Name
     */
    clusterName: pulumi.Input<string>;
    /**
     * AI Cluster status
     */
    clusterStatus?: pulumi.Input<string>;
    /**
     * Flavor ID (name)
     */
    flavor: pulumi.Input<string>;
    /**
     * Image ID
     */
    imageId: pulumi.Input<string>;
    /**
     * Networks managed by user and associated with the cluster
     */
    interfaces: pulumi.Input<pulumi.Input<inputs.AiClusterInterface>[]>;
    /**
     * Ssh keypair name
     */
    keypairName?: pulumi.Input<string>;
    /**
     * A password for baremetal instance. This parameter is used to set a password for the Admin user on a Windows instance, a
     * default user or a new user on a Linux instance
     */
    password?: pulumi.Input<string>;
    projectId?: pulumi.Input<number>;
    projectName?: pulumi.Input<string>;
    regionId?: pulumi.Input<number>;
    regionName?: pulumi.Input<string>;
    /**
     * Security groups attached to the cluster
     */
    securityGroups?: pulumi.Input<pulumi.Input<inputs.AiClusterSecurityGroup>[]>;
    /**
     * String in base64 format. Must not be passed together with 'username' or 'password'. Examples of the user_data:
     * https://cloudinit.readthedocs.io/en/latest/topics/examples.html
     */
    userData?: pulumi.Input<string>;
    /**
     * A name of a new user in the Linux instance. It may be passed with a 'password' parameter
     */
    username?: pulumi.Input<string>;
    /**
     * List of volumes attached to the cluster
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.AiClusterVolume>[]>;
}
