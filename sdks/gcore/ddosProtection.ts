// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdosProtection extends pulumi.CustomResource {
    /**
     * Get an existing DdosProtection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosProtectionState, opts?: pulumi.CustomResourceOptions): DdosProtection {
        return new DdosProtection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcore:index/ddosProtection:DdosProtection';

    /**
     * Returns true if the given object is an instance of DdosProtection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosProtection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosProtection.__pulumiType;
    }

    /**
     * Activate profile
     */
    public readonly active!: pulumi.Output<boolean | undefined>;
    /**
     * Activate BGP protocol
     */
    public readonly bgp!: pulumi.Output<boolean | undefined>;
    public readonly bmInstanceId!: pulumi.Output<string>;
    public readonly fields!: pulumi.Output<outputs.DdosProtectionField[] | undefined>;
    /**
     * IP address
     */
    public readonly ipAddress!: pulumi.Output<string>;
    public readonly lastUpdated!: pulumi.Output<string>;
    /**
     * Profile template ID
     */
    public readonly profileTemplate!: pulumi.Output<number>;
    public readonly projectId!: pulumi.Output<number | undefined>;
    public readonly projectName!: pulumi.Output<string | undefined>;
    /**
     * List of protocols
     */
    public /*out*/ readonly protocols!: pulumi.Output<outputs.DdosProtectionProtocol[]>;
    public readonly regionId!: pulumi.Output<number | undefined>;
    public readonly regionName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly site!: pulumi.Output<string>;

    /**
     * Create a DdosProtection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdosProtectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosProtectionArgs | DdosProtectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosProtectionState | undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["bgp"] = state ? state.bgp : undefined;
            resourceInputs["bmInstanceId"] = state ? state.bmInstanceId : undefined;
            resourceInputs["fields"] = state ? state.fields : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["profileTemplate"] = state ? state.profileTemplate : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["protocols"] = state ? state.protocols : undefined;
            resourceInputs["regionId"] = state ? state.regionId : undefined;
            resourceInputs["regionName"] = state ? state.regionName : undefined;
            resourceInputs["site"] = state ? state.site : undefined;
        } else {
            const args = argsOrState as DdosProtectionArgs | undefined;
            if ((!args || args.bmInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bmInstanceId'");
            }
            if ((!args || args.ipAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipAddress'");
            }
            if ((!args || args.profileTemplate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'profileTemplate'");
            }
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["bgp"] = args ? args.bgp : undefined;
            resourceInputs["bmInstanceId"] = args ? args.bmInstanceId : undefined;
            resourceInputs["fields"] = args ? args.fields : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["lastUpdated"] = args ? args.lastUpdated : undefined;
            resourceInputs["profileTemplate"] = args ? args.profileTemplate : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["regionId"] = args ? args.regionId : undefined;
            resourceInputs["regionName"] = args ? args.regionName : undefined;
            resourceInputs["protocols"] = undefined /*out*/;
            resourceInputs["site"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosProtection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosProtection resources.
 */
export interface DdosProtectionState {
    /**
     * Activate profile
     */
    active?: pulumi.Input<boolean>;
    /**
     * Activate BGP protocol
     */
    bgp?: pulumi.Input<boolean>;
    bmInstanceId?: pulumi.Input<string>;
    fields?: pulumi.Input<pulumi.Input<inputs.DdosProtectionField>[]>;
    /**
     * IP address
     */
    ipAddress?: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * Profile template ID
     */
    profileTemplate?: pulumi.Input<number>;
    projectId?: pulumi.Input<number>;
    projectName?: pulumi.Input<string>;
    /**
     * List of protocols
     */
    protocols?: pulumi.Input<pulumi.Input<inputs.DdosProtectionProtocol>[]>;
    regionId?: pulumi.Input<number>;
    regionName?: pulumi.Input<string>;
    site?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DdosProtection resource.
 */
export interface DdosProtectionArgs {
    /**
     * Activate profile
     */
    active?: pulumi.Input<boolean>;
    /**
     * Activate BGP protocol
     */
    bgp?: pulumi.Input<boolean>;
    bmInstanceId: pulumi.Input<string>;
    fields?: pulumi.Input<pulumi.Input<inputs.DdosProtectionField>[]>;
    /**
     * IP address
     */
    ipAddress: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * Profile template ID
     */
    profileTemplate: pulumi.Input<number>;
    projectId?: pulumi.Input<number>;
    projectName?: pulumi.Input<string>;
    regionId?: pulumi.Input<number>;
    regionName?: pulumi.Input<string>;
}
