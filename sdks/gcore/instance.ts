// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceState, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcore:index/instance:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    public readonly addresses!: pulumi.Output<outputs.InstanceAddress[] | undefined>;
    public readonly allowAppPorts!: pulumi.Output<boolean | undefined>;
    public readonly configurations!: pulumi.Output<outputs.InstanceConfiguration[] | undefined>;
    public readonly flavor!: pulumi.Output<{[key: string]: string}>;
    public readonly flavorId!: pulumi.Output<string>;
    public readonly interfaces!: pulumi.Output<outputs.InstanceInterface[]>;
    public readonly keypairName!: pulumi.Output<string | undefined>;
    public readonly lastUpdated!: pulumi.Output<string>;
    public readonly metadataMap!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly metadatas!: pulumi.Output<outputs.InstanceMetadata[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nameTemplate!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly nameTemplates!: pulumi.Output<string[] | undefined>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly projectId!: pulumi.Output<number | undefined>;
    public readonly projectName!: pulumi.Output<string | undefined>;
    public readonly regionId!: pulumi.Output<number | undefined>;
    public readonly regionName!: pulumi.Output<string | undefined>;
    /**
     * Firewalls list
     */
    public /*out*/ readonly securityGroups!: pulumi.Output<outputs.InstanceSecurityGroup[]>;
    public readonly serverGroup!: pulumi.Output<string | undefined>;
    public readonly status!: pulumi.Output<string>;
    public readonly userData!: pulumi.Output<string | undefined>;
    /**
     * **Deprecated**
     *
     * @deprecated Deprecated
     */
    public readonly userdata!: pulumi.Output<string | undefined>;
    public readonly username!: pulumi.Output<string | undefined>;
    /**
     * Current vm state, use stopped to stop vm and active to start
     */
    public readonly vmState!: pulumi.Output<string>;
    public readonly volumes!: pulumi.Output<outputs.InstanceVolume[] | undefined>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArgs | InstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceState | undefined;
            resourceInputs["addresses"] = state ? state.addresses : undefined;
            resourceInputs["allowAppPorts"] = state ? state.allowAppPorts : undefined;
            resourceInputs["configurations"] = state ? state.configurations : undefined;
            resourceInputs["flavor"] = state ? state.flavor : undefined;
            resourceInputs["flavorId"] = state ? state.flavorId : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["keypairName"] = state ? state.keypairName : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["metadataMap"] = state ? state.metadataMap : undefined;
            resourceInputs["metadatas"] = state ? state.metadatas : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameTemplate"] = state ? state.nameTemplate : undefined;
            resourceInputs["nameTemplates"] = state ? state.nameTemplates : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["regionId"] = state ? state.regionId : undefined;
            resourceInputs["regionName"] = state ? state.regionName : undefined;
            resourceInputs["securityGroups"] = state ? state.securityGroups : undefined;
            resourceInputs["serverGroup"] = state ? state.serverGroup : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
            resourceInputs["userdata"] = state ? state.userdata : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["vmState"] = state ? state.vmState : undefined;
            resourceInputs["volumes"] = state ? state.volumes : undefined;
        } else {
            const args = argsOrState as InstanceArgs | undefined;
            if ((!args || args.flavorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flavorId'");
            }
            if ((!args || args.interfaces === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interfaces'");
            }
            resourceInputs["addresses"] = args ? args.addresses : undefined;
            resourceInputs["allowAppPorts"] = args ? args.allowAppPorts : undefined;
            resourceInputs["configurations"] = args ? args.configurations : undefined;
            resourceInputs["flavor"] = args ? args.flavor : undefined;
            resourceInputs["flavorId"] = args ? args.flavorId : undefined;
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["keypairName"] = args ? args.keypairName : undefined;
            resourceInputs["lastUpdated"] = args ? args.lastUpdated : undefined;
            resourceInputs["metadataMap"] = args ? args.metadataMap : undefined;
            resourceInputs["metadatas"] = args ? args.metadatas : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameTemplate"] = args ? args.nameTemplate : undefined;
            resourceInputs["nameTemplates"] = args ? args.nameTemplates : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["regionId"] = args ? args.regionId : undefined;
            resourceInputs["regionName"] = args ? args.regionName : undefined;
            resourceInputs["serverGroup"] = args ? args.serverGroup : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["userdata"] = args ? args.userdata : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["vmState"] = args ? args.vmState : undefined;
            resourceInputs["volumes"] = args ? args.volumes : undefined;
            resourceInputs["securityGroups"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Instance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Instance resources.
 */
export interface InstanceState {
    addresses?: pulumi.Input<pulumi.Input<inputs.InstanceAddress>[]>;
    allowAppPorts?: pulumi.Input<boolean>;
    configurations?: pulumi.Input<pulumi.Input<inputs.InstanceConfiguration>[]>;
    flavor?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    flavorId?: pulumi.Input<string>;
    interfaces?: pulumi.Input<pulumi.Input<inputs.InstanceInterface>[]>;
    keypairName?: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    metadataMap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * @deprecated Deprecated
     */
    metadatas?: pulumi.Input<pulumi.Input<inputs.InstanceMetadata>[]>;
    name?: pulumi.Input<string>;
    nameTemplate?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    nameTemplates?: pulumi.Input<pulumi.Input<string>[]>;
    password?: pulumi.Input<string>;
    projectId?: pulumi.Input<number>;
    projectName?: pulumi.Input<string>;
    regionId?: pulumi.Input<number>;
    regionName?: pulumi.Input<string>;
    /**
     * Firewalls list
     */
    securityGroups?: pulumi.Input<pulumi.Input<inputs.InstanceSecurityGroup>[]>;
    serverGroup?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    userData?: pulumi.Input<string>;
    /**
     * **Deprecated**
     *
     * @deprecated Deprecated
     */
    userdata?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    /**
     * Current vm state, use stopped to stop vm and active to start
     */
    vmState?: pulumi.Input<string>;
    volumes?: pulumi.Input<pulumi.Input<inputs.InstanceVolume>[]>;
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    addresses?: pulumi.Input<pulumi.Input<inputs.InstanceAddress>[]>;
    allowAppPorts?: pulumi.Input<boolean>;
    configurations?: pulumi.Input<pulumi.Input<inputs.InstanceConfiguration>[]>;
    flavor?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    flavorId: pulumi.Input<string>;
    interfaces: pulumi.Input<pulumi.Input<inputs.InstanceInterface>[]>;
    keypairName?: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    metadataMap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * @deprecated Deprecated
     */
    metadatas?: pulumi.Input<pulumi.Input<inputs.InstanceMetadata>[]>;
    name?: pulumi.Input<string>;
    nameTemplate?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    nameTemplates?: pulumi.Input<pulumi.Input<string>[]>;
    password?: pulumi.Input<string>;
    projectId?: pulumi.Input<number>;
    projectName?: pulumi.Input<string>;
    regionId?: pulumi.Input<number>;
    regionName?: pulumi.Input<string>;
    serverGroup?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    userData?: pulumi.Input<string>;
    /**
     * **Deprecated**
     *
     * @deprecated Deprecated
     */
    userdata?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    /**
     * Current vm state, use stopped to stop vm and active to start
     */
    vmState?: pulumi.Input<string>;
    volumes?: pulumi.Input<pulumi.Input<inputs.InstanceVolume>[]>;
}
