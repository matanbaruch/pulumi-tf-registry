// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getK8sv2(args: GetK8sv2Args, opts?: pulumi.InvokeOptions): Promise<GetK8sv2Result> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcore:index/getK8sv2:getK8sv2", {
        "id": args.id,
        "name": args.name,
        "projectId": args.projectId,
        "projectName": args.projectName,
        "regionId": args.regionId,
        "regionName": args.regionName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getK8sv2.
 */
export interface GetK8sv2Args {
    id?: string;
    name: string;
    projectId?: number;
    projectName?: string;
    regionId?: number;
    regionName?: string;
}

/**
 * A collection of values returned by getK8sv2.
 */
export interface GetK8sv2Result {
    readonly authentications: outputs.GetK8sv2Authentication[];
    readonly autoscalerConfig: {[key: string]: string};
    readonly cnis: outputs.GetK8sv2Cni[];
    readonly createdAt: string;
    readonly creatorTaskId: string;
    readonly fixedNetwork: string;
    readonly fixedSubnet: string;
    readonly flavorId: string;
    readonly id: string;
    readonly isIpv6: boolean;
    readonly isPublic: boolean;
    readonly keypair: string;
    readonly name: string;
    readonly nodeCount: number;
    readonly podsIpPool: string;
    readonly podsIpv6Pool: string;
    readonly pools: outputs.GetK8sv2Pool[];
    readonly projectId?: number;
    readonly projectName?: string;
    readonly regionId?: number;
    readonly regionName?: string;
    readonly servicesIpPool: string;
    readonly servicesIpv6Pool: string;
    readonly status: string;
    readonly taskId: string;
    readonly version: string;
}
export function getK8sv2Output(args: GetK8sv2OutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetK8sv2Result> {
    return pulumi.output(args).apply((a: any) => getK8sv2(a, opts))
}

/**
 * A collection of arguments for invoking getK8sv2.
 */
export interface GetK8sv2OutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    projectId?: pulumi.Input<number>;
    projectName?: pulumi.Input<string>;
    regionId?: pulumi.Input<number>;
    regionName?: pulumi.Input<string>;
}
