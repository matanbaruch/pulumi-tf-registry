// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getFloatingip(args?: GetFloatingipArgs, opts?: pulumi.InvokeOptions): Promise<GetFloatingipResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcore:index/getFloatingip:getFloatingip", {
        "fixedIpAddress": args.fixedIpAddress,
        "floatingIpAddress": args.floatingIpAddress,
        "id": args.id,
        "metadataK": args.metadataK,
        "metadataKv": args.metadataKv,
        "portId": args.portId,
        "projectId": args.projectId,
        "projectName": args.projectName,
        "regionId": args.regionId,
        "regionName": args.regionName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFloatingip.
 */
export interface GetFloatingipArgs {
    fixedIpAddress?: string;
    floatingIpAddress?: string;
    id?: string;
    metadataK?: string;
    metadataKv?: {[key: string]: string};
    portId?: string;
    projectId?: number;
    projectName?: string;
    regionId?: number;
    regionName?: string;
}

/**
 * A collection of values returned by getFloatingip.
 */
export interface GetFloatingipResult {
    readonly fixedIpAddress: string;
    readonly floatingIpAddress: string;
    readonly id: string;
    readonly metadataK?: string;
    readonly metadataKv?: {[key: string]: string};
    readonly metadataReadOnlies: outputs.GetFloatingipMetadataReadOnly[];
    readonly portId?: string;
    readonly projectId?: number;
    readonly projectName?: string;
    readonly regionId?: number;
    readonly regionName?: string;
    readonly routerId: string;
    readonly status: string;
}
export function getFloatingipOutput(args?: GetFloatingipOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFloatingipResult> {
    return pulumi.output(args).apply((a: any) => getFloatingip(a, opts))
}

/**
 * A collection of arguments for invoking getFloatingip.
 */
export interface GetFloatingipOutputArgs {
    fixedIpAddress?: pulumi.Input<string>;
    floatingIpAddress?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    metadataK?: pulumi.Input<string>;
    metadataKv?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    portId?: pulumi.Input<string>;
    projectId?: pulumi.Input<number>;
    projectName?: pulumi.Input<string>;
    regionId?: pulumi.Input<number>;
    regionName?: pulumi.Input<string>;
}
