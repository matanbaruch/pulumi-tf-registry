// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getFaasFunction(args: GetFaasFunctionArgs, opts?: pulumi.InvokeOptions): Promise<GetFaasFunctionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("gcore:index/getFaasFunction:getFaasFunction", {
        "id": args.id,
        "name": args.name,
        "namespace": args.namespace,
        "projectId": args.projectId,
        "projectName": args.projectName,
        "regionId": args.regionId,
        "regionName": args.regionName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFaasFunction.
 */
export interface GetFaasFunctionArgs {
    id?: string;
    name: string;
    namespace: string;
    projectId?: number;
    projectName?: string;
    regionId?: number;
    regionName?: string;
}

/**
 * A collection of values returned by getFaasFunction.
 */
export interface GetFaasFunctionResult {
    readonly buildMessage: string;
    readonly buildStatus: string;
    readonly codeText: string;
    readonly createdAt: string;
    readonly dependencies: string;
    readonly deployStatus: {[key: string]: number};
    readonly description: string;
    readonly disabled: boolean;
    readonly enableApiKey: boolean;
    readonly endpoint: string;
    readonly envs: {[key: string]: string};
    readonly flavor: string;
    readonly id: string;
    readonly keys: string[];
    readonly mainMethod: string;
    readonly maxInstances: number;
    readonly minInstances: number;
    readonly name: string;
    readonly namespace: string;
    readonly projectId?: number;
    readonly projectName?: string;
    readonly regionId?: number;
    readonly regionName?: string;
    readonly runtime: string;
    readonly status: string;
    readonly timeout: number;
}
export function getFaasFunctionOutput(args: GetFaasFunctionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFaasFunctionResult> {
    return pulumi.output(args).apply((a: any) => getFaasFunction(a, opts))
}

/**
 * A collection of arguments for invoking getFaasFunction.
 */
export interface GetFaasFunctionOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    projectId?: pulumi.Input<number>;
    projectName?: pulumi.Input<string>;
    regionId?: pulumi.Input<number>;
    regionName?: pulumi.Input<string>;
}
