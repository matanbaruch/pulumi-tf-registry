// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Floatingip extends pulumi.CustomResource {
    /**
     * Get an existing Floatingip resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FloatingipState, opts?: pulumi.CustomResourceOptions): Floatingip {
        return new Floatingip(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gcore:index/floatingip:Floatingip';

    /**
     * Returns true if the given object is an instance of Floatingip.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Floatingip {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Floatingip.__pulumiType;
    }

    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly fixedIpAddress!: pulumi.Output<string>;
    public /*out*/ readonly floatingIpAddress!: pulumi.Output<string>;
    public /*out*/ readonly lastUpdated!: pulumi.Output<string>;
    public readonly metadataMap!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly metadataReadOnlies!: pulumi.Output<outputs.FloatingipMetadataReadOnly[]>;
    public readonly portId!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<number | undefined>;
    public readonly projectName!: pulumi.Output<string | undefined>;
    public readonly regionId!: pulumi.Output<number | undefined>;
    public readonly regionName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly routerId!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a Floatingip resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FloatingipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FloatingipArgs | FloatingipState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FloatingipState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["fixedIpAddress"] = state ? state.fixedIpAddress : undefined;
            resourceInputs["floatingIpAddress"] = state ? state.floatingIpAddress : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["metadataMap"] = state ? state.metadataMap : undefined;
            resourceInputs["metadataReadOnlies"] = state ? state.metadataReadOnlies : undefined;
            resourceInputs["portId"] = state ? state.portId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["regionId"] = state ? state.regionId : undefined;
            resourceInputs["regionName"] = state ? state.regionName : undefined;
            resourceInputs["routerId"] = state ? state.routerId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as FloatingipArgs | undefined;
            resourceInputs["fixedIpAddress"] = args ? args.fixedIpAddress : undefined;
            resourceInputs["metadataMap"] = args ? args.metadataMap : undefined;
            resourceInputs["portId"] = args ? args.portId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["regionId"] = args ? args.regionId : undefined;
            resourceInputs["regionName"] = args ? args.regionName : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["floatingIpAddress"] = undefined /*out*/;
            resourceInputs["lastUpdated"] = undefined /*out*/;
            resourceInputs["metadataReadOnlies"] = undefined /*out*/;
            resourceInputs["routerId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Floatingip.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Floatingip resources.
 */
export interface FloatingipState {
    createdAt?: pulumi.Input<string>;
    fixedIpAddress?: pulumi.Input<string>;
    floatingIpAddress?: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    metadataMap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    metadataReadOnlies?: pulumi.Input<pulumi.Input<inputs.FloatingipMetadataReadOnly>[]>;
    portId?: pulumi.Input<string>;
    projectId?: pulumi.Input<number>;
    projectName?: pulumi.Input<string>;
    regionId?: pulumi.Input<number>;
    regionName?: pulumi.Input<string>;
    routerId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Floatingip resource.
 */
export interface FloatingipArgs {
    fixedIpAddress?: pulumi.Input<string>;
    metadataMap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    portId?: pulumi.Input<string>;
    projectId?: pulumi.Input<number>;
    projectName?: pulumi.Input<string>;
    regionId?: pulumi.Input<number>;
    regionName?: pulumi.Input<string>;
}
