// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Dashboard extends pulumi.CustomResource {
    /**
     * Get an existing Dashboard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DashboardState, opts?: pulumi.CustomResourceOptions): Dashboard {
        return new Dashboard(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'coralogix:index/dashboard:Dashboard';

    /**
     * Returns true if the given object is an instance of Dashboard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Dashboard {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dashboard.__pulumiType;
    }

    public readonly annotations!: pulumi.Output<outputs.DashboardAnnotation[] | undefined>;
    public readonly autoRefresh!: pulumi.Output<outputs.DashboardAutoRefresh>;
    /**
     * an option to set the dashboard content from a json file.
     */
    public readonly contentJson!: pulumi.Output<string | undefined>;
    /**
     * Brief description or summary of the dashboard's purpose or content.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * List of filters that can be applied to the dashboard's data.
     */
    public readonly filters!: pulumi.Output<outputs.DashboardFilter[] | undefined>;
    public readonly folder!: pulumi.Output<outputs.DashboardFolder | undefined>;
    /**
     * Layout configuration for the dashboard's visual elements.
     */
    public readonly layout!: pulumi.Output<outputs.DashboardLayout | undefined>;
    /**
     * Display name of the dashboard.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the time frame for the dashboard's data. Can be either absolute or relative.
     */
    public readonly timeFrame!: pulumi.Output<outputs.DashboardTimeFrame | undefined>;
    /**
     * List of variables that can be used within the dashboard for dynamic content.
     */
    public readonly variables!: pulumi.Output<outputs.DashboardVariable[] | undefined>;

    /**
     * Create a Dashboard resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DashboardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DashboardArgs | DashboardState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DashboardState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["autoRefresh"] = state ? state.autoRefresh : undefined;
            resourceInputs["contentJson"] = state ? state.contentJson : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["filters"] = state ? state.filters : undefined;
            resourceInputs["folder"] = state ? state.folder : undefined;
            resourceInputs["layout"] = state ? state.layout : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["timeFrame"] = state ? state.timeFrame : undefined;
            resourceInputs["variables"] = state ? state.variables : undefined;
        } else {
            const args = argsOrState as DashboardArgs | undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["autoRefresh"] = args ? args.autoRefresh : undefined;
            resourceInputs["contentJson"] = args ? args.contentJson : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["filters"] = args ? args.filters : undefined;
            resourceInputs["folder"] = args ? args.folder : undefined;
            resourceInputs["layout"] = args ? args.layout : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["timeFrame"] = args ? args.timeFrame : undefined;
            resourceInputs["variables"] = args ? args.variables : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Dashboard.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Dashboard resources.
 */
export interface DashboardState {
    annotations?: pulumi.Input<pulumi.Input<inputs.DashboardAnnotation>[]>;
    autoRefresh?: pulumi.Input<inputs.DashboardAutoRefresh>;
    /**
     * an option to set the dashboard content from a json file.
     */
    contentJson?: pulumi.Input<string>;
    /**
     * Brief description or summary of the dashboard's purpose or content.
     */
    description?: pulumi.Input<string>;
    /**
     * List of filters that can be applied to the dashboard's data.
     */
    filters?: pulumi.Input<pulumi.Input<inputs.DashboardFilter>[]>;
    folder?: pulumi.Input<inputs.DashboardFolder>;
    /**
     * Layout configuration for the dashboard's visual elements.
     */
    layout?: pulumi.Input<inputs.DashboardLayout>;
    /**
     * Display name of the dashboard.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the time frame for the dashboard's data. Can be either absolute or relative.
     */
    timeFrame?: pulumi.Input<inputs.DashboardTimeFrame>;
    /**
     * List of variables that can be used within the dashboard for dynamic content.
     */
    variables?: pulumi.Input<pulumi.Input<inputs.DashboardVariable>[]>;
}

/**
 * The set of arguments for constructing a Dashboard resource.
 */
export interface DashboardArgs {
    annotations?: pulumi.Input<pulumi.Input<inputs.DashboardAnnotation>[]>;
    autoRefresh?: pulumi.Input<inputs.DashboardAutoRefresh>;
    /**
     * an option to set the dashboard content from a json file.
     */
    contentJson?: pulumi.Input<string>;
    /**
     * Brief description or summary of the dashboard's purpose or content.
     */
    description?: pulumi.Input<string>;
    /**
     * List of filters that can be applied to the dashboard's data.
     */
    filters?: pulumi.Input<pulumi.Input<inputs.DashboardFilter>[]>;
    folder?: pulumi.Input<inputs.DashboardFolder>;
    /**
     * Layout configuration for the dashboard's visual elements.
     */
    layout?: pulumi.Input<inputs.DashboardLayout>;
    /**
     * Display name of the dashboard.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the time frame for the dashboard's data. Can be either absolute or relative.
     */
    timeFrame?: pulumi.Input<inputs.DashboardTimeFrame>;
    /**
     * List of variables that can be used within the dashboard for dynamic content.
     */
    variables?: pulumi.Input<pulumi.Input<inputs.DashboardVariable>[]>;
}
