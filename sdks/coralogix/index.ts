// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ActionArgs, ActionState } from "./action";
export type Action = import("./action").Action;
export const Action: typeof import("./action").Action = null as any;
utilities.lazyLoad(exports, ["Action"], () => require("./action"));

export { AlertArgs, AlertState } from "./alert";
export type Alert = import("./alert").Alert;
export const Alert: typeof import("./alert").Alert = null as any;
utilities.lazyLoad(exports, ["Alert"], () => require("./alert"));

export { AlertsSchedulerArgs, AlertsSchedulerState } from "./alertsScheduler";
export type AlertsScheduler = import("./alertsScheduler").AlertsScheduler;
export const AlertsScheduler: typeof import("./alertsScheduler").AlertsScheduler = null as any;
utilities.lazyLoad(exports, ["AlertsScheduler"], () => require("./alertsScheduler"));

export { ApiKeyArgs, ApiKeyState } from "./apiKey";
export type ApiKey = import("./apiKey").ApiKey;
export const ApiKey: typeof import("./apiKey").ApiKey = null as any;
utilities.lazyLoad(exports, ["ApiKey"], () => require("./apiKey"));

export { ArchiveLogsArgs, ArchiveLogsState } from "./archiveLogs";
export type ArchiveLogs = import("./archiveLogs").ArchiveLogs;
export const ArchiveLogs: typeof import("./archiveLogs").ArchiveLogs = null as any;
utilities.lazyLoad(exports, ["ArchiveLogs"], () => require("./archiveLogs"));

export { ArchiveMetricsArgs, ArchiveMetricsState } from "./archiveMetrics";
export type ArchiveMetrics = import("./archiveMetrics").ArchiveMetrics;
export const ArchiveMetrics: typeof import("./archiveMetrics").ArchiveMetrics = null as any;
utilities.lazyLoad(exports, ["ArchiveMetrics"], () => require("./archiveMetrics"));

export { ArchiveRetentionsArgs, ArchiveRetentionsState } from "./archiveRetentions";
export type ArchiveRetentions = import("./archiveRetentions").ArchiveRetentions;
export const ArchiveRetentions: typeof import("./archiveRetentions").ArchiveRetentions = null as any;
utilities.lazyLoad(exports, ["ArchiveRetentions"], () => require("./archiveRetentions"));

export { CustomRoleArgs, CustomRoleState } from "./customRole";
export type CustomRole = import("./customRole").CustomRole;
export const CustomRole: typeof import("./customRole").CustomRole = null as any;
utilities.lazyLoad(exports, ["CustomRole"], () => require("./customRole"));

export { DashboardArgs, DashboardState } from "./dashboard";
export type Dashboard = import("./dashboard").Dashboard;
export const Dashboard: typeof import("./dashboard").Dashboard = null as any;
utilities.lazyLoad(exports, ["Dashboard"], () => require("./dashboard"));

export { DashboardsFolderArgs, DashboardsFolderState } from "./dashboardsFolder";
export type DashboardsFolder = import("./dashboardsFolder").DashboardsFolder;
export const DashboardsFolder: typeof import("./dashboardsFolder").DashboardsFolder = null as any;
utilities.lazyLoad(exports, ["DashboardsFolder"], () => require("./dashboardsFolder"));

export { DataSetArgs, DataSetState } from "./dataSet";
export type DataSet = import("./dataSet").DataSet;
export const DataSet: typeof import("./dataSet").DataSet = null as any;
utilities.lazyLoad(exports, ["DataSet"], () => require("./dataSet"));

export { EnrichmentArgs, EnrichmentState } from "./enrichment";
export type Enrichment = import("./enrichment").Enrichment;
export const Enrichment: typeof import("./enrichment").Enrichment = null as any;
utilities.lazyLoad(exports, ["Enrichment"], () => require("./enrichment"));

export { Events2metricArgs, Events2metricState } from "./events2metric";
export type Events2metric = import("./events2metric").Events2metric;
export const Events2metric: typeof import("./events2metric").Events2metric = null as any;
utilities.lazyLoad(exports, ["Events2metric"], () => require("./events2metric"));

export { GetActionArgs, GetActionResult, GetActionOutputArgs } from "./getAction";
export const getAction: typeof import("./getAction").getAction = null as any;
export const getActionOutput: typeof import("./getAction").getActionOutput = null as any;
utilities.lazyLoad(exports, ["getAction","getActionOutput"], () => require("./getAction"));

export { GetAlertArgs, GetAlertResult, GetAlertOutputArgs } from "./getAlert";
export const getAlert: typeof import("./getAlert").getAlert = null as any;
export const getAlertOutput: typeof import("./getAlert").getAlertOutput = null as any;
utilities.lazyLoad(exports, ["getAlert","getAlertOutput"], () => require("./getAlert"));

export { GetAlertsSchedulerArgs, GetAlertsSchedulerResult, GetAlertsSchedulerOutputArgs } from "./getAlertsScheduler";
export const getAlertsScheduler: typeof import("./getAlertsScheduler").getAlertsScheduler = null as any;
export const getAlertsSchedulerOutput: typeof import("./getAlertsScheduler").getAlertsSchedulerOutput = null as any;
utilities.lazyLoad(exports, ["getAlertsScheduler","getAlertsSchedulerOutput"], () => require("./getAlertsScheduler"));

export { GetApiKeyArgs, GetApiKeyResult, GetApiKeyOutputArgs } from "./getApiKey";
export const getApiKey: typeof import("./getApiKey").getApiKey = null as any;
export const getApiKeyOutput: typeof import("./getApiKey").getApiKeyOutput = null as any;
utilities.lazyLoad(exports, ["getApiKey","getApiKeyOutput"], () => require("./getApiKey"));

export { GetArchiveLogsResult } from "./getArchiveLogs";
export const getArchiveLogs: typeof import("./getArchiveLogs").getArchiveLogs = null as any;
export const getArchiveLogsOutput: typeof import("./getArchiveLogs").getArchiveLogsOutput = null as any;
utilities.lazyLoad(exports, ["getArchiveLogs","getArchiveLogsOutput"], () => require("./getArchiveLogs"));

export { GetArchiveMetricsResult } from "./getArchiveMetrics";
export const getArchiveMetrics: typeof import("./getArchiveMetrics").getArchiveMetrics = null as any;
export const getArchiveMetricsOutput: typeof import("./getArchiveMetrics").getArchiveMetricsOutput = null as any;
utilities.lazyLoad(exports, ["getArchiveMetrics","getArchiveMetricsOutput"], () => require("./getArchiveMetrics"));

export { GetArchiveRetentionsResult } from "./getArchiveRetentions";
export const getArchiveRetentions: typeof import("./getArchiveRetentions").getArchiveRetentions = null as any;
export const getArchiveRetentionsOutput: typeof import("./getArchiveRetentions").getArchiveRetentionsOutput = null as any;
utilities.lazyLoad(exports, ["getArchiveRetentions","getArchiveRetentionsOutput"], () => require("./getArchiveRetentions"));

export { GetCustomRoleArgs, GetCustomRoleResult, GetCustomRoleOutputArgs } from "./getCustomRole";
export const getCustomRole: typeof import("./getCustomRole").getCustomRole = null as any;
export const getCustomRoleOutput: typeof import("./getCustomRole").getCustomRoleOutput = null as any;
utilities.lazyLoad(exports, ["getCustomRole","getCustomRoleOutput"], () => require("./getCustomRole"));

export { GetDashboardArgs, GetDashboardResult, GetDashboardOutputArgs } from "./getDashboard";
export const getDashboard: typeof import("./getDashboard").getDashboard = null as any;
export const getDashboardOutput: typeof import("./getDashboard").getDashboardOutput = null as any;
utilities.lazyLoad(exports, ["getDashboard","getDashboardOutput"], () => require("./getDashboard"));

export { GetDashboardsFolderArgs, GetDashboardsFolderResult, GetDashboardsFolderOutputArgs } from "./getDashboardsFolder";
export const getDashboardsFolder: typeof import("./getDashboardsFolder").getDashboardsFolder = null as any;
export const getDashboardsFolderOutput: typeof import("./getDashboardsFolder").getDashboardsFolderOutput = null as any;
utilities.lazyLoad(exports, ["getDashboardsFolder","getDashboardsFolderOutput"], () => require("./getDashboardsFolder"));

export { GetDataSetArgs, GetDataSetResult, GetDataSetOutputArgs } from "./getDataSet";
export const getDataSet: typeof import("./getDataSet").getDataSet = null as any;
export const getDataSetOutput: typeof import("./getDataSet").getDataSetOutput = null as any;
utilities.lazyLoad(exports, ["getDataSet","getDataSetOutput"], () => require("./getDataSet"));

export { GetEnrichmentArgs, GetEnrichmentResult, GetEnrichmentOutputArgs } from "./getEnrichment";
export const getEnrichment: typeof import("./getEnrichment").getEnrichment = null as any;
export const getEnrichmentOutput: typeof import("./getEnrichment").getEnrichmentOutput = null as any;
utilities.lazyLoad(exports, ["getEnrichment","getEnrichmentOutput"], () => require("./getEnrichment"));

export { GetEvents2metricArgs, GetEvents2metricResult, GetEvents2metricOutputArgs } from "./getEvents2metric";
export const getEvents2metric: typeof import("./getEvents2metric").getEvents2metric = null as any;
export const getEvents2metricOutput: typeof import("./getEvents2metric").getEvents2metricOutput = null as any;
utilities.lazyLoad(exports, ["getEvents2metric","getEvents2metricOutput"], () => require("./getEvents2metric"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetHostedDashboardArgs, GetHostedDashboardResult, GetHostedDashboardOutputArgs } from "./getHostedDashboard";
export const getHostedDashboard: typeof import("./getHostedDashboard").getHostedDashboard = null as any;
export const getHostedDashboardOutput: typeof import("./getHostedDashboard").getHostedDashboardOutput = null as any;
utilities.lazyLoad(exports, ["getHostedDashboard","getHostedDashboardOutput"], () => require("./getHostedDashboard"));

export { GetIntegrationArgs, GetIntegrationResult, GetIntegrationOutputArgs } from "./getIntegration";
export const getIntegration: typeof import("./getIntegration").getIntegration = null as any;
export const getIntegrationOutput: typeof import("./getIntegration").getIntegrationOutput = null as any;
utilities.lazyLoad(exports, ["getIntegration","getIntegrationOutput"], () => require("./getIntegration"));

export { GetRecordingRulesGroupsSetArgs, GetRecordingRulesGroupsSetResult, GetRecordingRulesGroupsSetOutputArgs } from "./getRecordingRulesGroupsSet";
export const getRecordingRulesGroupsSet: typeof import("./getRecordingRulesGroupsSet").getRecordingRulesGroupsSet = null as any;
export const getRecordingRulesGroupsSetOutput: typeof import("./getRecordingRulesGroupsSet").getRecordingRulesGroupsSetOutput = null as any;
utilities.lazyLoad(exports, ["getRecordingRulesGroupsSet","getRecordingRulesGroupsSetOutput"], () => require("./getRecordingRulesGroupsSet"));

export { GetRulesGroupArgs, GetRulesGroupResult, GetRulesGroupOutputArgs } from "./getRulesGroup";
export const getRulesGroup: typeof import("./getRulesGroup").getRulesGroup = null as any;
export const getRulesGroupOutput: typeof import("./getRulesGroup").getRulesGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRulesGroup","getRulesGroupOutput"], () => require("./getRulesGroup"));

export { GetScopeArgs, GetScopeResult, GetScopeOutputArgs } from "./getScope";
export const getScope: typeof import("./getScope").getScope = null as any;
export const getScopeOutput: typeof import("./getScope").getScopeOutput = null as any;
utilities.lazyLoad(exports, ["getScope","getScopeOutput"], () => require("./getScope"));

export { GetSloArgs, GetSloResult, GetSloOutputArgs } from "./getSlo";
export const getSlo: typeof import("./getSlo").getSlo = null as any;
export const getSloOutput: typeof import("./getSlo").getSloOutput = null as any;
utilities.lazyLoad(exports, ["getSlo","getSloOutput"], () => require("./getSlo"));

export { GetTcoPoliciesLogsResult } from "./getTcoPoliciesLogs";
export const getTcoPoliciesLogs: typeof import("./getTcoPoliciesLogs").getTcoPoliciesLogs = null as any;
export const getTcoPoliciesLogsOutput: typeof import("./getTcoPoliciesLogs").getTcoPoliciesLogsOutput = null as any;
utilities.lazyLoad(exports, ["getTcoPoliciesLogs","getTcoPoliciesLogsOutput"], () => require("./getTcoPoliciesLogs"));

export { GetTcoPoliciesTracesResult } from "./getTcoPoliciesTraces";
export const getTcoPoliciesTraces: typeof import("./getTcoPoliciesTraces").getTcoPoliciesTraces = null as any;
export const getTcoPoliciesTracesOutput: typeof import("./getTcoPoliciesTraces").getTcoPoliciesTracesOutput = null as any;
utilities.lazyLoad(exports, ["getTcoPoliciesTraces","getTcoPoliciesTracesOutput"], () => require("./getTcoPoliciesTraces"));

export { GetTeamArgs, GetTeamResult, GetTeamOutputArgs } from "./getTeam";
export const getTeam: typeof import("./getTeam").getTeam = null as any;
export const getTeamOutput: typeof import("./getTeam").getTeamOutput = null as any;
utilities.lazyLoad(exports, ["getTeam","getTeamOutput"], () => require("./getTeam"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetWebhookArgs, GetWebhookResult, GetWebhookOutputArgs } from "./getWebhook";
export const getWebhook: typeof import("./getWebhook").getWebhook = null as any;
export const getWebhookOutput: typeof import("./getWebhook").getWebhookOutput = null as any;
utilities.lazyLoad(exports, ["getWebhook","getWebhookOutput"], () => require("./getWebhook"));

export { GrafanaFolderArgs, GrafanaFolderState } from "./grafanaFolder";
export type GrafanaFolder = import("./grafanaFolder").GrafanaFolder;
export const GrafanaFolder: typeof import("./grafanaFolder").GrafanaFolder = null as any;
utilities.lazyLoad(exports, ["GrafanaFolder"], () => require("./grafanaFolder"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { HostedDashboardArgs, HostedDashboardState } from "./hostedDashboard";
export type HostedDashboard = import("./hostedDashboard").HostedDashboard;
export const HostedDashboard: typeof import("./hostedDashboard").HostedDashboard = null as any;
utilities.lazyLoad(exports, ["HostedDashboard"], () => require("./hostedDashboard"));

export { IntegrationArgs, IntegrationState } from "./integration";
export type Integration = import("./integration").Integration;
export const Integration: typeof import("./integration").Integration = null as any;
utilities.lazyLoad(exports, ["Integration"], () => require("./integration"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RecordingRulesGroupsSetArgs, RecordingRulesGroupsSetState } from "./recordingRulesGroupsSet";
export type RecordingRulesGroupsSet = import("./recordingRulesGroupsSet").RecordingRulesGroupsSet;
export const RecordingRulesGroupsSet: typeof import("./recordingRulesGroupsSet").RecordingRulesGroupsSet = null as any;
utilities.lazyLoad(exports, ["RecordingRulesGroupsSet"], () => require("./recordingRulesGroupsSet"));

export { RulesGroupArgs, RulesGroupState } from "./rulesGroup";
export type RulesGroup = import("./rulesGroup").RulesGroup;
export const RulesGroup: typeof import("./rulesGroup").RulesGroup = null as any;
utilities.lazyLoad(exports, ["RulesGroup"], () => require("./rulesGroup"));

export { ScopeArgs, ScopeState } from "./scope";
export type Scope = import("./scope").Scope;
export const Scope: typeof import("./scope").Scope = null as any;
utilities.lazyLoad(exports, ["Scope"], () => require("./scope"));

export { SloArgs, SloState } from "./slo";
export type Slo = import("./slo").Slo;
export const Slo: typeof import("./slo").Slo = null as any;
utilities.lazyLoad(exports, ["Slo"], () => require("./slo"));

export { TcoPoliciesLogsArgs, TcoPoliciesLogsState } from "./tcoPoliciesLogs";
export type TcoPoliciesLogs = import("./tcoPoliciesLogs").TcoPoliciesLogs;
export const TcoPoliciesLogs: typeof import("./tcoPoliciesLogs").TcoPoliciesLogs = null as any;
utilities.lazyLoad(exports, ["TcoPoliciesLogs"], () => require("./tcoPoliciesLogs"));

export { TcoPoliciesTracesArgs, TcoPoliciesTracesState } from "./tcoPoliciesTraces";
export type TcoPoliciesTraces = import("./tcoPoliciesTraces").TcoPoliciesTraces;
export const TcoPoliciesTraces: typeof import("./tcoPoliciesTraces").TcoPoliciesTraces = null as any;
utilities.lazyLoad(exports, ["TcoPoliciesTraces"], () => require("./tcoPoliciesTraces"));

export { TeamArgs, TeamState } from "./team";
export type Team = import("./team").Team;
export const Team: typeof import("./team").Team = null as any;
utilities.lazyLoad(exports, ["Team"], () => require("./team"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { WebhookArgs, WebhookState } from "./webhook";
export type Webhook = import("./webhook").Webhook;
export const Webhook: typeof import("./webhook").Webhook = null as any;
utilities.lazyLoad(exports, ["Webhook"], () => require("./webhook"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "coralogix:index/action:Action":
                return new Action(name, <any>undefined, { urn })
            case "coralogix:index/alert:Alert":
                return new Alert(name, <any>undefined, { urn })
            case "coralogix:index/alertsScheduler:AlertsScheduler":
                return new AlertsScheduler(name, <any>undefined, { urn })
            case "coralogix:index/apiKey:ApiKey":
                return new ApiKey(name, <any>undefined, { urn })
            case "coralogix:index/archiveLogs:ArchiveLogs":
                return new ArchiveLogs(name, <any>undefined, { urn })
            case "coralogix:index/archiveMetrics:ArchiveMetrics":
                return new ArchiveMetrics(name, <any>undefined, { urn })
            case "coralogix:index/archiveRetentions:ArchiveRetentions":
                return new ArchiveRetentions(name, <any>undefined, { urn })
            case "coralogix:index/customRole:CustomRole":
                return new CustomRole(name, <any>undefined, { urn })
            case "coralogix:index/dashboard:Dashboard":
                return new Dashboard(name, <any>undefined, { urn })
            case "coralogix:index/dashboardsFolder:DashboardsFolder":
                return new DashboardsFolder(name, <any>undefined, { urn })
            case "coralogix:index/dataSet:DataSet":
                return new DataSet(name, <any>undefined, { urn })
            case "coralogix:index/enrichment:Enrichment":
                return new Enrichment(name, <any>undefined, { urn })
            case "coralogix:index/events2metric:Events2metric":
                return new Events2metric(name, <any>undefined, { urn })
            case "coralogix:index/grafanaFolder:GrafanaFolder":
                return new GrafanaFolder(name, <any>undefined, { urn })
            case "coralogix:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "coralogix:index/hostedDashboard:HostedDashboard":
                return new HostedDashboard(name, <any>undefined, { urn })
            case "coralogix:index/integration:Integration":
                return new Integration(name, <any>undefined, { urn })
            case "coralogix:index/recordingRulesGroupsSet:RecordingRulesGroupsSet":
                return new RecordingRulesGroupsSet(name, <any>undefined, { urn })
            case "coralogix:index/rulesGroup:RulesGroup":
                return new RulesGroup(name, <any>undefined, { urn })
            case "coralogix:index/scope:Scope":
                return new Scope(name, <any>undefined, { urn })
            case "coralogix:index/slo:Slo":
                return new Slo(name, <any>undefined, { urn })
            case "coralogix:index/tcoPoliciesLogs:TcoPoliciesLogs":
                return new TcoPoliciesLogs(name, <any>undefined, { urn })
            case "coralogix:index/tcoPoliciesTraces:TcoPoliciesTraces":
                return new TcoPoliciesTraces(name, <any>undefined, { urn })
            case "coralogix:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "coralogix:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "coralogix:index/webhook:Webhook":
                return new Webhook(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("coralogix", "index/action", _module)
pulumi.runtime.registerResourceModule("coralogix", "index/alert", _module)
pulumi.runtime.registerResourceModule("coralogix", "index/alertsScheduler", _module)
pulumi.runtime.registerResourceModule("coralogix", "index/apiKey", _module)
pulumi.runtime.registerResourceModule("coralogix", "index/archiveLogs", _module)
pulumi.runtime.registerResourceModule("coralogix", "index/archiveMetrics", _module)
pulumi.runtime.registerResourceModule("coralogix", "index/archiveRetentions", _module)
pulumi.runtime.registerResourceModule("coralogix", "index/customRole", _module)
pulumi.runtime.registerResourceModule("coralogix", "index/dashboard", _module)
pulumi.runtime.registerResourceModule("coralogix", "index/dashboardsFolder", _module)
pulumi.runtime.registerResourceModule("coralogix", "index/dataSet", _module)
pulumi.runtime.registerResourceModule("coralogix", "index/enrichment", _module)
pulumi.runtime.registerResourceModule("coralogix", "index/events2metric", _module)
pulumi.runtime.registerResourceModule("coralogix", "index/grafanaFolder", _module)
pulumi.runtime.registerResourceModule("coralogix", "index/group", _module)
pulumi.runtime.registerResourceModule("coralogix", "index/hostedDashboard", _module)
pulumi.runtime.registerResourceModule("coralogix", "index/integration", _module)
pulumi.runtime.registerResourceModule("coralogix", "index/recordingRulesGroupsSet", _module)
pulumi.runtime.registerResourceModule("coralogix", "index/rulesGroup", _module)
pulumi.runtime.registerResourceModule("coralogix", "index/scope", _module)
pulumi.runtime.registerResourceModule("coralogix", "index/slo", _module)
pulumi.runtime.registerResourceModule("coralogix", "index/tcoPoliciesLogs", _module)
pulumi.runtime.registerResourceModule("coralogix", "index/tcoPoliciesTraces", _module)
pulumi.runtime.registerResourceModule("coralogix", "index/team", _module)
pulumi.runtime.registerResourceModule("coralogix", "index/user", _module)
pulumi.runtime.registerResourceModule("coralogix", "index/webhook", _module)
pulumi.runtime.registerResourcePackage("coralogix", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:coralogix") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
