// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Enrichment extends pulumi.CustomResource {
    /**
     * Get an existing Enrichment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EnrichmentState, opts?: pulumi.CustomResourceOptions): Enrichment {
        return new Enrichment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'coralogix:index/enrichment:Enrichment';

    /**
     * Returns true if the given object is an instance of Enrichment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Enrichment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Enrichment.__pulumiType;
    }

    /**
     * Coralogix allows you to enrich your logs with the data from a chosen AWS resource. The feature enriches every log that
     * contains a particular resourceId, associated with the metadata of a chosen AWS resource.
     */
    public readonly aws!: pulumi.Output<outputs.EnrichmentAws | undefined>;
    /**
     * Custom Log Enrichment with Coralogix enables you to easily enrich your log data.
     */
    public readonly custom!: pulumi.Output<outputs.EnrichmentCustom | undefined>;
    /**
     * Coralogix allows you to enrich your logs with location data by automatically converting IPs to Geo-points which can be
     * used to aggregate logs by location and create Map visualizations in Kibana.
     */
    public readonly geoIp!: pulumi.Output<outputs.EnrichmentGeoIp | undefined>;
    /**
     * Coralogix allows you to automatically discover threats on your web servers by enriching your logs with the most updated
     * IP blacklists.
     */
    public readonly suspiciousIp!: pulumi.Output<outputs.EnrichmentSuspiciousIp | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.EnrichmentTimeouts | undefined>;

    /**
     * Create a Enrichment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: EnrichmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EnrichmentArgs | EnrichmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EnrichmentState | undefined;
            resourceInputs["aws"] = state ? state.aws : undefined;
            resourceInputs["custom"] = state ? state.custom : undefined;
            resourceInputs["geoIp"] = state ? state.geoIp : undefined;
            resourceInputs["suspiciousIp"] = state ? state.suspiciousIp : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as EnrichmentArgs | undefined;
            resourceInputs["aws"] = args ? args.aws : undefined;
            resourceInputs["custom"] = args ? args.custom : undefined;
            resourceInputs["geoIp"] = args ? args.geoIp : undefined;
            resourceInputs["suspiciousIp"] = args ? args.suspiciousIp : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Enrichment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Enrichment resources.
 */
export interface EnrichmentState {
    /**
     * Coralogix allows you to enrich your logs with the data from a chosen AWS resource. The feature enriches every log that
     * contains a particular resourceId, associated with the metadata of a chosen AWS resource.
     */
    aws?: pulumi.Input<inputs.EnrichmentAws>;
    /**
     * Custom Log Enrichment with Coralogix enables you to easily enrich your log data.
     */
    custom?: pulumi.Input<inputs.EnrichmentCustom>;
    /**
     * Coralogix allows you to enrich your logs with location data by automatically converting IPs to Geo-points which can be
     * used to aggregate logs by location and create Map visualizations in Kibana.
     */
    geoIp?: pulumi.Input<inputs.EnrichmentGeoIp>;
    /**
     * Coralogix allows you to automatically discover threats on your web servers by enriching your logs with the most updated
     * IP blacklists.
     */
    suspiciousIp?: pulumi.Input<inputs.EnrichmentSuspiciousIp>;
    timeouts?: pulumi.Input<inputs.EnrichmentTimeouts>;
}

/**
 * The set of arguments for constructing a Enrichment resource.
 */
export interface EnrichmentArgs {
    /**
     * Coralogix allows you to enrich your logs with the data from a chosen AWS resource. The feature enriches every log that
     * contains a particular resourceId, associated with the metadata of a chosen AWS resource.
     */
    aws?: pulumi.Input<inputs.EnrichmentAws>;
    /**
     * Custom Log Enrichment with Coralogix enables you to easily enrich your log data.
     */
    custom?: pulumi.Input<inputs.EnrichmentCustom>;
    /**
     * Coralogix allows you to enrich your logs with location data by automatically converting IPs to Geo-points which can be
     * used to aggregate logs by location and create Map visualizations in Kibana.
     */
    geoIp?: pulumi.Input<inputs.EnrichmentGeoIp>;
    /**
     * Coralogix allows you to automatically discover threats on your web servers by enriching your logs with the most updated
     * IP blacklists.
     */
    suspiciousIp?: pulumi.Input<inputs.EnrichmentSuspiciousIp>;
    timeouts?: pulumi.Input<inputs.EnrichmentTimeouts>;
}
