// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Alert extends pulumi.CustomResource {
    /**
     * Get an existing Alert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertState, opts?: pulumi.CustomResourceOptions): Alert {
        return new Alert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'coralogix:index/alert:Alert';

    /**
     * Returns true if the given object is an instance of Alert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Alert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Alert.__pulumiType;
    }

    /**
     * Alert description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Determines whether the alert will be active. True by default.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The expiration date of the alert (if declared).
     */
    public readonly expirationDate!: pulumi.Output<outputs.AlertExpirationDate | undefined>;
    /**
     * Alert based on a combination of alerts in a specific timeframe.
     */
    public readonly flow!: pulumi.Output<outputs.AlertFlow | undefined>;
    public readonly incidentSettings!: pulumi.Output<outputs.AlertIncidentSettings | undefined>;
    /**
     * Labels allow you to easily filter by alert type and create views. Insert a new label or use an existing one. You can
     * nest a label using key:value.
     */
    public readonly metaLabels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Alert based on arithmetic operators for metrics.
     */
    public readonly metric!: pulumi.Output<outputs.AlertMetric | undefined>;
    /**
     * Alert name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Alert on never before seen log value.
     */
    public readonly newValue!: pulumi.Output<outputs.AlertNewValue | undefined>;
    /**
     * Defines notifications settings over list of group-by keys (or on empty list).
     */
    public readonly notificationsGroups!: pulumi.Output<outputs.AlertNotificationsGroup[] | undefined>;
    /**
     * A list of log fields out of the log example which will be included with the alert notification.
     */
    public readonly payloadFilters!: pulumi.Output<string[] | undefined>;
    /**
     * Alert based on the ratio between queries.
     */
    public readonly ratio!: pulumi.Output<outputs.AlertRatio | undefined>;
    /**
     * Limit the triggering of this alert to specific time frames. Active always by default.
     */
    public readonly scheduling!: pulumi.Output<outputs.AlertScheduling | undefined>;
    /**
     * Determines the alert's severity. Can be one of ["Info" "Warning" "Critical" "Error"]
     */
    public readonly severity!: pulumi.Output<string>;
    /**
     * Alert based on number of log occurrences.
     */
    public readonly standard!: pulumi.Output<outputs.AlertStandard | undefined>;
    /**
     * Alert based on ratio between timeframes.
     */
    public readonly timeRelative!: pulumi.Output<outputs.AlertTimeRelative | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.AlertTimeouts | undefined>;
    /**
     * Alert based on tracing latency.
     */
    public readonly tracing!: pulumi.Output<outputs.AlertTracing | undefined>;
    /**
     * Alert based on unique value count per key.
     */
    public readonly uniqueCount!: pulumi.Output<outputs.AlertUniqueCount | undefined>;

    /**
     * Create a Alert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertArgs | AlertState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlertState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["expirationDate"] = state ? state.expirationDate : undefined;
            resourceInputs["flow"] = state ? state.flow : undefined;
            resourceInputs["incidentSettings"] = state ? state.incidentSettings : undefined;
            resourceInputs["metaLabels"] = state ? state.metaLabels : undefined;
            resourceInputs["metric"] = state ? state.metric : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["newValue"] = state ? state.newValue : undefined;
            resourceInputs["notificationsGroups"] = state ? state.notificationsGroups : undefined;
            resourceInputs["payloadFilters"] = state ? state.payloadFilters : undefined;
            resourceInputs["ratio"] = state ? state.ratio : undefined;
            resourceInputs["scheduling"] = state ? state.scheduling : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["standard"] = state ? state.standard : undefined;
            resourceInputs["timeRelative"] = state ? state.timeRelative : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["tracing"] = state ? state.tracing : undefined;
            resourceInputs["uniqueCount"] = state ? state.uniqueCount : undefined;
        } else {
            const args = argsOrState as AlertArgs | undefined;
            if ((!args || args.severity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'severity'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["expirationDate"] = args ? args.expirationDate : undefined;
            resourceInputs["flow"] = args ? args.flow : undefined;
            resourceInputs["incidentSettings"] = args ? args.incidentSettings : undefined;
            resourceInputs["metaLabels"] = args ? args.metaLabels : undefined;
            resourceInputs["metric"] = args ? args.metric : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["newValue"] = args ? args.newValue : undefined;
            resourceInputs["notificationsGroups"] = args ? args.notificationsGroups : undefined;
            resourceInputs["payloadFilters"] = args ? args.payloadFilters : undefined;
            resourceInputs["ratio"] = args ? args.ratio : undefined;
            resourceInputs["scheduling"] = args ? args.scheduling : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["standard"] = args ? args.standard : undefined;
            resourceInputs["timeRelative"] = args ? args.timeRelative : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["tracing"] = args ? args.tracing : undefined;
            resourceInputs["uniqueCount"] = args ? args.uniqueCount : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Alert.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Alert resources.
 */
export interface AlertState {
    /**
     * Alert description.
     */
    description?: pulumi.Input<string>;
    /**
     * Determines whether the alert will be active. True by default.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The expiration date of the alert (if declared).
     */
    expirationDate?: pulumi.Input<inputs.AlertExpirationDate>;
    /**
     * Alert based on a combination of alerts in a specific timeframe.
     */
    flow?: pulumi.Input<inputs.AlertFlow>;
    incidentSettings?: pulumi.Input<inputs.AlertIncidentSettings>;
    /**
     * Labels allow you to easily filter by alert type and create views. Insert a new label or use an existing one. You can
     * nest a label using key:value.
     */
    metaLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Alert based on arithmetic operators for metrics.
     */
    metric?: pulumi.Input<inputs.AlertMetric>;
    /**
     * Alert name.
     */
    name?: pulumi.Input<string>;
    /**
     * Alert on never before seen log value.
     */
    newValue?: pulumi.Input<inputs.AlertNewValue>;
    /**
     * Defines notifications settings over list of group-by keys (or on empty list).
     */
    notificationsGroups?: pulumi.Input<pulumi.Input<inputs.AlertNotificationsGroup>[]>;
    /**
     * A list of log fields out of the log example which will be included with the alert notification.
     */
    payloadFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Alert based on the ratio between queries.
     */
    ratio?: pulumi.Input<inputs.AlertRatio>;
    /**
     * Limit the triggering of this alert to specific time frames. Active always by default.
     */
    scheduling?: pulumi.Input<inputs.AlertScheduling>;
    /**
     * Determines the alert's severity. Can be one of ["Info" "Warning" "Critical" "Error"]
     */
    severity?: pulumi.Input<string>;
    /**
     * Alert based on number of log occurrences.
     */
    standard?: pulumi.Input<inputs.AlertStandard>;
    /**
     * Alert based on ratio between timeframes.
     */
    timeRelative?: pulumi.Input<inputs.AlertTimeRelative>;
    timeouts?: pulumi.Input<inputs.AlertTimeouts>;
    /**
     * Alert based on tracing latency.
     */
    tracing?: pulumi.Input<inputs.AlertTracing>;
    /**
     * Alert based on unique value count per key.
     */
    uniqueCount?: pulumi.Input<inputs.AlertUniqueCount>;
}

/**
 * The set of arguments for constructing a Alert resource.
 */
export interface AlertArgs {
    /**
     * Alert description.
     */
    description?: pulumi.Input<string>;
    /**
     * Determines whether the alert will be active. True by default.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The expiration date of the alert (if declared).
     */
    expirationDate?: pulumi.Input<inputs.AlertExpirationDate>;
    /**
     * Alert based on a combination of alerts in a specific timeframe.
     */
    flow?: pulumi.Input<inputs.AlertFlow>;
    incidentSettings?: pulumi.Input<inputs.AlertIncidentSettings>;
    /**
     * Labels allow you to easily filter by alert type and create views. Insert a new label or use an existing one. You can
     * nest a label using key:value.
     */
    metaLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Alert based on arithmetic operators for metrics.
     */
    metric?: pulumi.Input<inputs.AlertMetric>;
    /**
     * Alert name.
     */
    name?: pulumi.Input<string>;
    /**
     * Alert on never before seen log value.
     */
    newValue?: pulumi.Input<inputs.AlertNewValue>;
    /**
     * Defines notifications settings over list of group-by keys (or on empty list).
     */
    notificationsGroups?: pulumi.Input<pulumi.Input<inputs.AlertNotificationsGroup>[]>;
    /**
     * A list of log fields out of the log example which will be included with the alert notification.
     */
    payloadFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Alert based on the ratio between queries.
     */
    ratio?: pulumi.Input<inputs.AlertRatio>;
    /**
     * Limit the triggering of this alert to specific time frames. Active always by default.
     */
    scheduling?: pulumi.Input<inputs.AlertScheduling>;
    /**
     * Determines the alert's severity. Can be one of ["Info" "Warning" "Critical" "Error"]
     */
    severity: pulumi.Input<string>;
    /**
     * Alert based on number of log occurrences.
     */
    standard?: pulumi.Input<inputs.AlertStandard>;
    /**
     * Alert based on ratio between timeframes.
     */
    timeRelative?: pulumi.Input<inputs.AlertTimeRelative>;
    timeouts?: pulumi.Input<inputs.AlertTimeouts>;
    /**
     * Alert based on tracing latency.
     */
    tracing?: pulumi.Input<inputs.AlertTracing>;
    /**
     * Alert based on unique value count per key.
     */
    uniqueCount?: pulumi.Input<inputs.AlertUniqueCount>;
}
