// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEvents2metric(args: GetEvents2metricArgs, opts?: pulumi.InvokeOptions): Promise<GetEvents2metricResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("coralogix:index/getEvents2metric:getEvents2metric", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEvents2metric.
 */
export interface GetEvents2metricArgs {
    id: string;
}

/**
 * A collection of values returned by getEvents2metric.
 */
export interface GetEvents2metricResult {
    readonly description: string;
    readonly id: string;
    readonly logsQuery: outputs.GetEvents2metricLogsQuery;
    readonly metricFields: {[key: string]: outputs.GetEvents2metricMetricFields};
    readonly metricLabels: {[key: string]: string};
    readonly name: string;
    readonly permutations: outputs.GetEvents2metricPermutations;
    readonly spansQuery: outputs.GetEvents2metricSpansQuery;
}
export function getEvents2metricOutput(args: GetEvents2metricOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEvents2metricResult> {
    return pulumi.output(args).apply((a: any) => getEvents2metric(a, opts))
}

/**
 * A collection of arguments for invoking getEvents2metric.
 */
export interface GetEvents2metricOutputArgs {
    id: pulumi.Input<string>;
}
