// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Scope extends pulumi.CustomResource {
    /**
     * Get an existing Scope resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScopeState, opts?: pulumi.CustomResourceOptions): Scope {
        return new Scope(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'coralogix:index/scope:Scope';

    /**
     * Returns true if the given object is an instance of Scope.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Scope {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Scope.__pulumiType;
    }

    /**
     * Default expression to use when no filter matches the query. Until further notice, this can is limited to `true`
     * (everything is included) or `false` (nothing is included). Use a version tag (e.g `<v1>true` or `<v1>false`)
     */
    public readonly defaultExpression!: pulumi.Output<string>;
    /**
     * Description of the scope. Optional.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Scope display name.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Filters applied to include data in the scope.
     */
    public readonly filters!: pulumi.Output<outputs.ScopeFilter[]>;
    /**
     * Associated team.
     */
    public /*out*/ readonly teamId!: pulumi.Output<string>;

    /**
     * Create a Scope resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScopeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScopeArgs | ScopeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScopeState | undefined;
            resourceInputs["defaultExpression"] = state ? state.defaultExpression : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["filters"] = state ? state.filters : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
        } else {
            const args = argsOrState as ScopeArgs | undefined;
            if ((!args || args.defaultExpression === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultExpression'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.filters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filters'");
            }
            resourceInputs["defaultExpression"] = args ? args.defaultExpression : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["filters"] = args ? args.filters : undefined;
            resourceInputs["teamId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Scope.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Scope resources.
 */
export interface ScopeState {
    /**
     * Default expression to use when no filter matches the query. Until further notice, this can is limited to `true`
     * (everything is included) or `false` (nothing is included). Use a version tag (e.g `<v1>true` or `<v1>false`)
     */
    defaultExpression?: pulumi.Input<string>;
    /**
     * Description of the scope. Optional.
     */
    description?: pulumi.Input<string>;
    /**
     * Scope display name.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Filters applied to include data in the scope.
     */
    filters?: pulumi.Input<pulumi.Input<inputs.ScopeFilter>[]>;
    /**
     * Associated team.
     */
    teamId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Scope resource.
 */
export interface ScopeArgs {
    /**
     * Default expression to use when no filter matches the query. Until further notice, this can is limited to `true`
     * (everything is included) or `false` (nothing is included). Use a version tag (e.g `<v1>true` or `<v1>false`)
     */
    defaultExpression: pulumi.Input<string>;
    /**
     * Description of the scope. Optional.
     */
    description?: pulumi.Input<string>;
    /**
     * Scope display name.
     */
    displayName: pulumi.Input<string>;
    /**
     * Filters applied to include data in the scope.
     */
    filters: pulumi.Input<pulumi.Input<inputs.ScopeFilter>[]>;
}
