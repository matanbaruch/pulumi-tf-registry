// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Events2metric extends pulumi.CustomResource {
    /**
     * Get an existing Events2metric resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Events2metricState, opts?: pulumi.CustomResourceOptions): Events2metric {
        return new Events2metric(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'coralogix:index/events2metric:Events2metric';

    /**
     * Returns true if the given object is an instance of Events2metric.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Events2metric {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Events2metric.__pulumiType;
    }

    /**
     * Events2Metric description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * logs-events2metric type. Exactly one of "spans_query" or "logs_query" must be defined.
     */
    public readonly logsQuery!: pulumi.Output<outputs.Events2metricLogsQuery | undefined>;
    public readonly metricFields!: pulumi.Output<{[key: string]: outputs.Events2metricMetricFields} | undefined>;
    public readonly metricLabels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Events2Metric name. Events2Metric names have to be unique per account.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Defines the permutations' info of the events2metric.
     */
    public readonly permutations!: pulumi.Output<outputs.Events2metricPermutations>;
    /**
     * spans-events2metric type. Exactly one of "spans_query" or "logs_query" should be defined.
     */
    public readonly spansQuery!: pulumi.Output<outputs.Events2metricSpansQuery | undefined>;

    /**
     * Create a Events2metric resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: Events2metricArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Events2metricArgs | Events2metricState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Events2metricState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["logsQuery"] = state ? state.logsQuery : undefined;
            resourceInputs["metricFields"] = state ? state.metricFields : undefined;
            resourceInputs["metricLabels"] = state ? state.metricLabels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["permutations"] = state ? state.permutations : undefined;
            resourceInputs["spansQuery"] = state ? state.spansQuery : undefined;
        } else {
            const args = argsOrState as Events2metricArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["logsQuery"] = args ? args.logsQuery : undefined;
            resourceInputs["metricFields"] = args ? args.metricFields : undefined;
            resourceInputs["metricLabels"] = args ? args.metricLabels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["permutations"] = args ? args.permutations : undefined;
            resourceInputs["spansQuery"] = args ? args.spansQuery : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Events2metric.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Events2metric resources.
 */
export interface Events2metricState {
    /**
     * Events2Metric description.
     */
    description?: pulumi.Input<string>;
    /**
     * logs-events2metric type. Exactly one of "spans_query" or "logs_query" must be defined.
     */
    logsQuery?: pulumi.Input<inputs.Events2metricLogsQuery>;
    metricFields?: pulumi.Input<{[key: string]: pulumi.Input<inputs.Events2metricMetricFields>}>;
    metricLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Events2Metric name. Events2Metric names have to be unique per account.
     */
    name?: pulumi.Input<string>;
    /**
     * Defines the permutations' info of the events2metric.
     */
    permutations?: pulumi.Input<inputs.Events2metricPermutations>;
    /**
     * spans-events2metric type. Exactly one of "spans_query" or "logs_query" should be defined.
     */
    spansQuery?: pulumi.Input<inputs.Events2metricSpansQuery>;
}

/**
 * The set of arguments for constructing a Events2metric resource.
 */
export interface Events2metricArgs {
    /**
     * Events2Metric description.
     */
    description?: pulumi.Input<string>;
    /**
     * logs-events2metric type. Exactly one of "spans_query" or "logs_query" must be defined.
     */
    logsQuery?: pulumi.Input<inputs.Events2metricLogsQuery>;
    metricFields?: pulumi.Input<{[key: string]: pulumi.Input<inputs.Events2metricMetricFields>}>;
    metricLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Events2Metric name. Events2Metric names have to be unique per account.
     */
    name?: pulumi.Input<string>;
    /**
     * Defines the permutations' info of the events2metric.
     */
    permutations?: pulumi.Input<inputs.Events2metricPermutations>;
    /**
     * spans-events2metric type. Exactly one of "spans_query" or "logs_query" should be defined.
     */
    spansQuery?: pulumi.Input<inputs.Events2metricSpansQuery>;
}
