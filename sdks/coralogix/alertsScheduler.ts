// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AlertsScheduler extends pulumi.CustomResource {
    /**
     * Get an existing AlertsScheduler resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertsSchedulerState, opts?: pulumi.CustomResourceOptions): AlertsScheduler {
        return new AlertsScheduler(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'coralogix:index/alertsScheduler:AlertsScheduler';

    /**
     * Returns true if the given object is an instance of AlertsScheduler.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlertsScheduler {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlertsScheduler.__pulumiType;
    }

    /**
     * Alert Scheduler description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Alert Scheduler enabled. If set to `false`, the alert scheduler will be disabled. True by default.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Alert Scheduler filter. Only one of `meta_labels` or `alerts_unique_ids` can be set. If none of them set, all alerts
     * will be affected.
     */
    public readonly filter!: pulumi.Output<outputs.AlertsSchedulerFilter | undefined>;
    /**
     * Alert Scheduler meta labels.
     */
    public readonly metaLabels!: pulumi.Output<outputs.AlertsSchedulerMetaLabel[] | undefined>;
    /**
     * Alert Scheduler name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Exactly one of `one_time` or `recurring` must be set.
     */
    public readonly schedule!: pulumi.Output<outputs.AlertsSchedulerSchedule | undefined>;

    /**
     * Create a AlertsScheduler resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AlertsSchedulerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertsSchedulerArgs | AlertsSchedulerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlertsSchedulerState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["filter"] = state ? state.filter : undefined;
            resourceInputs["metaLabels"] = state ? state.metaLabels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
        } else {
            const args = argsOrState as AlertsSchedulerArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["filter"] = args ? args.filter : undefined;
            resourceInputs["metaLabels"] = args ? args.metaLabels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlertsScheduler.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AlertsScheduler resources.
 */
export interface AlertsSchedulerState {
    /**
     * Alert Scheduler description.
     */
    description?: pulumi.Input<string>;
    /**
     * Alert Scheduler enabled. If set to `false`, the alert scheduler will be disabled. True by default.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Alert Scheduler filter. Only one of `meta_labels` or `alerts_unique_ids` can be set. If none of them set, all alerts
     * will be affected.
     */
    filter?: pulumi.Input<inputs.AlertsSchedulerFilter>;
    /**
     * Alert Scheduler meta labels.
     */
    metaLabels?: pulumi.Input<pulumi.Input<inputs.AlertsSchedulerMetaLabel>[]>;
    /**
     * Alert Scheduler name.
     */
    name?: pulumi.Input<string>;
    /**
     * Exactly one of `one_time` or `recurring` must be set.
     */
    schedule?: pulumi.Input<inputs.AlertsSchedulerSchedule>;
}

/**
 * The set of arguments for constructing a AlertsScheduler resource.
 */
export interface AlertsSchedulerArgs {
    /**
     * Alert Scheduler description.
     */
    description?: pulumi.Input<string>;
    /**
     * Alert Scheduler enabled. If set to `false`, the alert scheduler will be disabled. True by default.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Alert Scheduler filter. Only one of `meta_labels` or `alerts_unique_ids` can be set. If none of them set, all alerts
     * will be affected.
     */
    filter?: pulumi.Input<inputs.AlertsSchedulerFilter>;
    /**
     * Alert Scheduler meta labels.
     */
    metaLabels?: pulumi.Input<pulumi.Input<inputs.AlertsSchedulerMetaLabel>[]>;
    /**
     * Alert Scheduler name.
     */
    name?: pulumi.Input<string>;
    /**
     * Exactly one of `one_time` or `recurring` must be set.
     */
    schedule?: pulumi.Input<inputs.AlertsSchedulerSchedule>;
}
