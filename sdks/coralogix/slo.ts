// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Slo extends pulumi.CustomResource {
    /**
     * Get an existing Slo resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SloState, opts?: pulumi.CustomResourceOptions): Slo {
        return new Slo(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'coralogix:index/slo:Slo';

    /**
     * Returns true if the given object is an instance of Slo.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Slo {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Slo.__pulumiType;
    }

    /**
     * Optional SLO description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly filters!: pulumi.Output<outputs.SloFilter[] | undefined>;
    /**
     * SLO name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Period. This is the period of the SLO. Valid values are: ["unspecified" "7_days" "14_days" "30_days"]
     */
    public readonly period!: pulumi.Output<string>;
    public /*out*/ readonly remainingErrorBudgetPercentage!: pulumi.Output<number>;
    /**
     * Service name. This is the name of the service that the SLO is associated with.
     */
    public readonly serviceName!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Target percentage. This is the target percentage of the SLO.
     */
    public readonly targetPercentage!: pulumi.Output<number>;
    /**
     * Threshold in microseconds. Required when `type` is `latency`.
     */
    public readonly thresholdMicroseconds!: pulumi.Output<number | undefined>;
    /**
     * Threshold symbol type. Required when `type` is `latency`. Valid values are: ["less_or_equal" "equal" "greater"
     * "greater_or_equal" "less"]
     */
    public readonly thresholdSymbolType!: pulumi.Output<string | undefined>;
    /**
     * Type. This is the type of the SLO. Valid values are: "error", "latency".
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Slo resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SloArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SloArgs | SloState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SloState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["filters"] = state ? state.filters : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["remainingErrorBudgetPercentage"] = state ? state.remainingErrorBudgetPercentage : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["targetPercentage"] = state ? state.targetPercentage : undefined;
            resourceInputs["thresholdMicroseconds"] = state ? state.thresholdMicroseconds : undefined;
            resourceInputs["thresholdSymbolType"] = state ? state.thresholdSymbolType : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as SloArgs | undefined;
            if ((!args || args.period === undefined) && !opts.urn) {
                throw new Error("Missing required property 'period'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.targetPercentage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetPercentage'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["filters"] = args ? args.filters : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["targetPercentage"] = args ? args.targetPercentage : undefined;
            resourceInputs["thresholdMicroseconds"] = args ? args.thresholdMicroseconds : undefined;
            resourceInputs["thresholdSymbolType"] = args ? args.thresholdSymbolType : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["remainingErrorBudgetPercentage"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Slo.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Slo resources.
 */
export interface SloState {
    /**
     * Optional SLO description.
     */
    description?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.SloFilter>[]>;
    /**
     * SLO name.
     */
    name?: pulumi.Input<string>;
    /**
     * Period. This is the period of the SLO. Valid values are: ["unspecified" "7_days" "14_days" "30_days"]
     */
    period?: pulumi.Input<string>;
    remainingErrorBudgetPercentage?: pulumi.Input<number>;
    /**
     * Service name. This is the name of the service that the SLO is associated with.
     */
    serviceName?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    /**
     * Target percentage. This is the target percentage of the SLO.
     */
    targetPercentage?: pulumi.Input<number>;
    /**
     * Threshold in microseconds. Required when `type` is `latency`.
     */
    thresholdMicroseconds?: pulumi.Input<number>;
    /**
     * Threshold symbol type. Required when `type` is `latency`. Valid values are: ["less_or_equal" "equal" "greater"
     * "greater_or_equal" "less"]
     */
    thresholdSymbolType?: pulumi.Input<string>;
    /**
     * Type. This is the type of the SLO. Valid values are: "error", "latency".
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Slo resource.
 */
export interface SloArgs {
    /**
     * Optional SLO description.
     */
    description?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.SloFilter>[]>;
    /**
     * SLO name.
     */
    name?: pulumi.Input<string>;
    /**
     * Period. This is the period of the SLO. Valid values are: ["unspecified" "7_days" "14_days" "30_days"]
     */
    period: pulumi.Input<string>;
    /**
     * Service name. This is the name of the service that the SLO is associated with.
     */
    serviceName: pulumi.Input<string>;
    /**
     * Target percentage. This is the target percentage of the SLO.
     */
    targetPercentage: pulumi.Input<number>;
    /**
     * Threshold in microseconds. Required when `type` is `latency`.
     */
    thresholdMicroseconds?: pulumi.Input<number>;
    /**
     * Threshold symbol type. Required when `type` is `latency`. Valid values are: ["less_or_equal" "equal" "greater"
     * "greater_or_equal" "less"]
     */
    thresholdSymbolType?: pulumi.Input<string>;
    /**
     * Type. This is the type of the SLO. Valid values are: "error", "latency".
     */
    type: pulumi.Input<string>;
}
