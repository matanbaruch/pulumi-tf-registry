// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RulesGroup extends pulumi.CustomResource {
    /**
     * Get an existing RulesGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RulesGroupState, opts?: pulumi.CustomResourceOptions): RulesGroup {
        return new RulesGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'coralogix:index/rulesGroup:RulesGroup';

    /**
     * Returns true if the given object is an instance of RulesGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RulesGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RulesGroup.__pulumiType;
    }

    /**
     * Determines whether the rule-group will be active.
     */
    public readonly active!: pulumi.Output<boolean | undefined>;
    /**
     * Rules will execute on logs that match the following applications.
     */
    public readonly applications!: pulumi.Output<string[] | undefined>;
    /**
     * Rule-group creator.
     */
    public readonly creator!: pulumi.Output<string | undefined>;
    /**
     * Rule-group description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly hidden!: pulumi.Output<boolean | undefined>;
    /**
     * Rule-group name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Determines the index of the rule-group between the other rule-groups. By default, will be added last. (1 based
     * indexing).
     */
    public readonly order!: pulumi.Output<number>;
    /**
     * List of rule-subgroups. Every rule-subgroup is list of rules with 'or' (||) operation between.
     */
    public readonly ruleSubgroups!: pulumi.Output<outputs.RulesGroupRuleSubgroup[] | undefined>;
    /**
     * Rules will execute on logs that match the following severities. Can be one of ["Debug" "Verbose" "Info" "Warning"
     * "Error" "Critical"]
     */
    public readonly severities!: pulumi.Output<string[] | undefined>;
    /**
     * Rules will execute on logs that match the following subsystems.
     */
    public readonly subsystems!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.RulesGroupTimeouts | undefined>;

    /**
     * Create a RulesGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RulesGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RulesGroupArgs | RulesGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RulesGroupState | undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["applications"] = state ? state.applications : undefined;
            resourceInputs["creator"] = state ? state.creator : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["hidden"] = state ? state.hidden : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["order"] = state ? state.order : undefined;
            resourceInputs["ruleSubgroups"] = state ? state.ruleSubgroups : undefined;
            resourceInputs["severities"] = state ? state.severities : undefined;
            resourceInputs["subsystems"] = state ? state.subsystems : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as RulesGroupArgs | undefined;
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["applications"] = args ? args.applications : undefined;
            resourceInputs["creator"] = args ? args.creator : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["hidden"] = args ? args.hidden : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["order"] = args ? args.order : undefined;
            resourceInputs["ruleSubgroups"] = args ? args.ruleSubgroups : undefined;
            resourceInputs["severities"] = args ? args.severities : undefined;
            resourceInputs["subsystems"] = args ? args.subsystems : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RulesGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RulesGroup resources.
 */
export interface RulesGroupState {
    /**
     * Determines whether the rule-group will be active.
     */
    active?: pulumi.Input<boolean>;
    /**
     * Rules will execute on logs that match the following applications.
     */
    applications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Rule-group creator.
     */
    creator?: pulumi.Input<string>;
    /**
     * Rule-group description
     */
    description?: pulumi.Input<string>;
    hidden?: pulumi.Input<boolean>;
    /**
     * Rule-group name
     */
    name?: pulumi.Input<string>;
    /**
     * Determines the index of the rule-group between the other rule-groups. By default, will be added last. (1 based
     * indexing).
     */
    order?: pulumi.Input<number>;
    /**
     * List of rule-subgroups. Every rule-subgroup is list of rules with 'or' (||) operation between.
     */
    ruleSubgroups?: pulumi.Input<pulumi.Input<inputs.RulesGroupRuleSubgroup>[]>;
    /**
     * Rules will execute on logs that match the following severities. Can be one of ["Debug" "Verbose" "Info" "Warning"
     * "Error" "Critical"]
     */
    severities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Rules will execute on logs that match the following subsystems.
     */
    subsystems?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.RulesGroupTimeouts>;
}

/**
 * The set of arguments for constructing a RulesGroup resource.
 */
export interface RulesGroupArgs {
    /**
     * Determines whether the rule-group will be active.
     */
    active?: pulumi.Input<boolean>;
    /**
     * Rules will execute on logs that match the following applications.
     */
    applications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Rule-group creator.
     */
    creator?: pulumi.Input<string>;
    /**
     * Rule-group description
     */
    description?: pulumi.Input<string>;
    hidden?: pulumi.Input<boolean>;
    /**
     * Rule-group name
     */
    name?: pulumi.Input<string>;
    /**
     * Determines the index of the rule-group between the other rule-groups. By default, will be added last. (1 based
     * indexing).
     */
    order?: pulumi.Input<number>;
    /**
     * List of rule-subgroups. Every rule-subgroup is list of rules with 'or' (||) operation between.
     */
    ruleSubgroups?: pulumi.Input<pulumi.Input<inputs.RulesGroupRuleSubgroup>[]>;
    /**
     * Rules will execute on logs that match the following severities. Can be one of ["Debug" "Verbose" "Info" "Warning"
     * "Error" "Critical"]
     */
    severities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Rules will execute on logs that match the following subsystems.
     */
    subsystems?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.RulesGroupTimeouts>;
}
