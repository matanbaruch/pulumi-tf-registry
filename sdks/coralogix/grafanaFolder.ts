// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class GrafanaFolder extends pulumi.CustomResource {
    /**
     * Get an existing GrafanaFolder resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GrafanaFolderState, opts?: pulumi.CustomResourceOptions): GrafanaFolder {
        return new GrafanaFolder(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'coralogix:index/grafanaFolder:GrafanaFolder';

    /**
     * Returns true if the given object is an instance of GrafanaFolder.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GrafanaFolder {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GrafanaFolder.__pulumiType;
    }

    /**
     * Prevent deletion of the folder if it is not empty (contains dashboards or alert rules).
     */
    public readonly preventDestroyIfNotEmpty!: pulumi.Output<boolean | undefined>;
    /**
     * The title of the folder.
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * Unique identifier.
     */
    public readonly uid!: pulumi.Output<string>;
    /**
     * The full URL of the folder.
     */
    public /*out*/ readonly url!: pulumi.Output<string>;

    /**
     * Create a GrafanaFolder resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GrafanaFolderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GrafanaFolderArgs | GrafanaFolderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GrafanaFolderState | undefined;
            resourceInputs["preventDestroyIfNotEmpty"] = state ? state.preventDestroyIfNotEmpty : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as GrafanaFolderArgs | undefined;
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            resourceInputs["preventDestroyIfNotEmpty"] = args ? args.preventDestroyIfNotEmpty : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["uid"] = args ? args.uid : undefined;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GrafanaFolder.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GrafanaFolder resources.
 */
export interface GrafanaFolderState {
    /**
     * Prevent deletion of the folder if it is not empty (contains dashboards or alert rules).
     */
    preventDestroyIfNotEmpty?: pulumi.Input<boolean>;
    /**
     * The title of the folder.
     */
    title?: pulumi.Input<string>;
    /**
     * Unique identifier.
     */
    uid?: pulumi.Input<string>;
    /**
     * The full URL of the folder.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GrafanaFolder resource.
 */
export interface GrafanaFolderArgs {
    /**
     * Prevent deletion of the folder if it is not empty (contains dashboards or alert rules).
     */
    preventDestroyIfNotEmpty?: pulumi.Input<boolean>;
    /**
     * The title of the folder.
     */
    title: pulumi.Input<string>;
    /**
     * Unique identifier.
     */
    uid?: pulumi.Input<string>;
}
