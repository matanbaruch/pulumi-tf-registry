// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ServerVersion extends pulumi.CustomResource {
    /**
     * Get an existing ServerVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerVersionState, opts?: pulumi.CustomResourceOptions): ServerVersion {
        return new ServerVersion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kubectl:index/serverVersion:ServerVersion';

    /**
     * Returns true if the given object is an instance of ServerVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServerVersion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerVersion.__pulumiType;
    }

    public /*out*/ readonly buildDate!: pulumi.Output<string>;
    public /*out*/ readonly gitCommit!: pulumi.Output<string>;
    public /*out*/ readonly gitVersion!: pulumi.Output<string>;
    public /*out*/ readonly major!: pulumi.Output<string>;
    public /*out*/ readonly minor!: pulumi.Output<string>;
    public /*out*/ readonly patch!: pulumi.Output<string>;
    public /*out*/ readonly platform!: pulumi.Output<string>;
    public readonly triggers!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly version!: pulumi.Output<string>;

    /**
     * Create a ServerVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ServerVersionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerVersionArgs | ServerVersionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerVersionState | undefined;
            resourceInputs["buildDate"] = state ? state.buildDate : undefined;
            resourceInputs["gitCommit"] = state ? state.gitCommit : undefined;
            resourceInputs["gitVersion"] = state ? state.gitVersion : undefined;
            resourceInputs["major"] = state ? state.major : undefined;
            resourceInputs["minor"] = state ? state.minor : undefined;
            resourceInputs["patch"] = state ? state.patch : undefined;
            resourceInputs["platform"] = state ? state.platform : undefined;
            resourceInputs["triggers"] = state ? state.triggers : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as ServerVersionArgs | undefined;
            resourceInputs["triggers"] = args ? args.triggers : undefined;
            resourceInputs["buildDate"] = undefined /*out*/;
            resourceInputs["gitCommit"] = undefined /*out*/;
            resourceInputs["gitVersion"] = undefined /*out*/;
            resourceInputs["major"] = undefined /*out*/;
            resourceInputs["minor"] = undefined /*out*/;
            resourceInputs["patch"] = undefined /*out*/;
            resourceInputs["platform"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServerVersion.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServerVersion resources.
 */
export interface ServerVersionState {
    buildDate?: pulumi.Input<string>;
    gitCommit?: pulumi.Input<string>;
    gitVersion?: pulumi.Input<string>;
    major?: pulumi.Input<string>;
    minor?: pulumi.Input<string>;
    patch?: pulumi.Input<string>;
    platform?: pulumi.Input<string>;
    triggers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServerVersion resource.
 */
export interface ServerVersionArgs {
    triggers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
