// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetFileDocumentsArgs, GetFileDocumentsResult, GetFileDocumentsOutputArgs } from "./getFileDocuments";
export const getFileDocuments: typeof import("./getFileDocuments").getFileDocuments = null as any;
export const getFileDocumentsOutput: typeof import("./getFileDocuments").getFileDocumentsOutput = null as any;
utilities.lazyLoad(exports, ["getFileDocuments","getFileDocumentsOutput"], () => require("./getFileDocuments"));

export { GetFilenameListArgs, GetFilenameListResult, GetFilenameListOutputArgs } from "./getFilenameList";
export const getFilenameList: typeof import("./getFilenameList").getFilenameList = null as any;
export const getFilenameListOutput: typeof import("./getFilenameList").getFilenameListOutput = null as any;
utilities.lazyLoad(exports, ["getFilenameList","getFilenameListOutput"], () => require("./getFilenameList"));

export { GetPathDocumentsArgs, GetPathDocumentsResult, GetPathDocumentsOutputArgs } from "./getPathDocuments";
export const getPathDocuments: typeof import("./getPathDocuments").getPathDocuments = null as any;
export const getPathDocumentsOutput: typeof import("./getPathDocuments").getPathDocumentsOutput = null as any;
utilities.lazyLoad(exports, ["getPathDocuments","getPathDocumentsOutput"], () => require("./getPathDocuments"));

export { GetServerVersionArgs, GetServerVersionResult, GetServerVersionOutputArgs } from "./getServerVersion";
export const getServerVersion: typeof import("./getServerVersion").getServerVersion = null as any;
export const getServerVersionOutput: typeof import("./getServerVersion").getServerVersionOutput = null as any;
utilities.lazyLoad(exports, ["getServerVersion","getServerVersionOutput"], () => require("./getServerVersion"));

export { ManifestArgs, ManifestState } from "./manifest";
export type Manifest = import("./manifest").Manifest;
export const Manifest: typeof import("./manifest").Manifest = null as any;
utilities.lazyLoad(exports, ["Manifest"], () => require("./manifest"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ServerVersionArgs, ServerVersionState } from "./serverVersion";
export type ServerVersion = import("./serverVersion").ServerVersion;
export const ServerVersion: typeof import("./serverVersion").ServerVersion = null as any;
utilities.lazyLoad(exports, ["ServerVersion"], () => require("./serverVersion"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kubectl:index/manifest:Manifest":
                return new Manifest(name, <any>undefined, { urn })
            case "kubectl:index/serverVersion:ServerVersion":
                return new ServerVersion(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("kubectl", "index/manifest", _module)
pulumi.runtime.registerResourceModule("kubectl", "index/serverVersion", _module)
pulumi.runtime.registerResourcePackage("kubectl", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:kubectl") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
