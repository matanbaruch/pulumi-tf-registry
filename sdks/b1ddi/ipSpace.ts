// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IpSpace extends pulumi.CustomResource {
    /**
     * Get an existing IpSpace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpSpaceState, opts?: pulumi.CustomResourceOptions): IpSpace {
        return new IpSpace(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'b1ddi:index/ipSpace:IpSpace';

    /**
     * Returns true if the given object is an instance of IpSpace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IpSpace {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpSpace.__pulumiType;
    }

    /**
     * The Automated Scope Management configuration for the IP space.
     */
    public readonly asmConfig!: pulumi.Output<outputs.IpSpaceAsmConfig | undefined>;
    /**
     * The number of times the automated scope management usage limits have been exceeded for any of the subnets in this IP
     * space.
     */
    public /*out*/ readonly asmScopeFlag!: pulumi.Output<number>;
    /**
     * The description for the IP space. May contain 0 to 1024 characters. Can include UTF-8.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * Time when the object has been created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Controls who does the DDNS updates. Valid values are: * _client_: DHCP server updates DNS if requested by client. *
     * _server_: DHCP server always updates DNS, overriding an update request from the client, unless the client requests no
     * updates. * _ignore_: DHCP server always updates DNS, even if the client says not to. * _over_client_update_: Same as
     * _server_. DHCP server always updates DNS, overriding an update request from the client, unless the client requests no
     * updates. * _over_no_update_: DHCP server updates DNS even if the client requests that no updates be done. If the client
     * requests to do the update, DHCP server allows it. Defaults to _client_.
     */
    public readonly ddnsClientUpdate!: pulumi.Output<string>;
    /**
     * The domain suffix for DDNS updates. FQDN, may be empty. Defaults to empty.
     */
    public readonly ddnsDomain!: pulumi.Output<string>;
    /**
     * Indicates if DDNS needs to generate a hostname when not supplied by the client. Defaults to _false_.
     */
    public readonly ddnsGenerateName!: pulumi.Output<boolean>;
    /**
     * The prefix used in the generation of an FQDN. When generating a name, DHCP server will construct the name in the format:
     * [ddns-generated-prefix]-[address-text].[ddns-qualifying-suffix]. where address-text is simply the lease IP address
     * converted to a hyphenated string. Defaults to "myhost".
     */
    public readonly ddnsGeneratedPrefix!: pulumi.Output<string>;
    /**
     * Determines if DDNS updates are enabled at the IP space level. Defaults to _true_.
     */
    public readonly ddnsSendUpdates!: pulumi.Output<boolean | undefined>;
    /**
     * Instructs the DHCP server to always update the DNS information when a lease is renewed even if its DNS information has
     * not changed. Defaults to _false_.
     */
    public readonly ddnsUpdateOnRenew!: pulumi.Output<boolean>;
    /**
     * When true, DHCP server will apply conflict resolution, as described in RFC 4703, when attempting to fulfill the update
     * request. When false, DHCP server will simply attempt to update the DNS entries per the request, regardless of whether or
     * not they conflict with existing entries owned by other DHCP4 clients. Defaults to _true_.
     */
    public readonly ddnsUseConflictResolution!: pulumi.Output<boolean | undefined>;
    /**
     * The shared DHCP configuration for the IP space that controls how leases are issued.
     */
    public readonly dhcpConfig!: pulumi.Output<outputs.IpSpaceDhcpConfig | undefined>;
    /**
     * The list of DHCP options for the IP space. May be either a specific option or a group of options.
     */
    public readonly dhcpOptions!: pulumi.Output<outputs.IpSpaceDhcpOption[] | undefined>;
    /**
     * The configuration for header option filename field.
     */
    public readonly headerOptionFilename!: pulumi.Output<string | undefined>;
    /**
     * The configuration for header option server address field.
     */
    public readonly headerOptionServerAddress!: pulumi.Output<string | undefined>;
    /**
     * The configuration for header option server name field.
     */
    public readonly headerOptionServerName!: pulumi.Output<string | undefined>;
    /**
     * The character to replace non-matching characters with, when hostname rewrite is enabled. Any single ASCII character.
     * Defaults to "_".
     */
    public readonly hostnameRewriteChar!: pulumi.Output<string | undefined>;
    /**
     * Indicates if client supplied hostnames will be rewritten prior to DDNS update by replacing every character that does not
     * match _hostname_rewrite_regex_ by _hostname_rewrite_char_. Defaults to _false_.
     */
    public readonly hostnameRewriteEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The regex bracket expression to match valid characters. Must begin with "[" and end with "]" and be a compilable POSIX
     * regex. Defaults to "[^a-zA-Z0-9_.]".
     */
    public readonly hostnameRewriteRegex!: pulumi.Output<string | undefined>;
    /**
     * The inheritance configuration.
     */
    public readonly inheritanceSources!: pulumi.Output<outputs.IpSpaceInheritanceSources | undefined>;
    /**
     * The name of the IP space. Must contain 1 to 256 characters. Can include UTF-8.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The tags for the IP space in JSON format.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The utilization threshold settings for the IP space.
     */
    public /*out*/ readonly thresholds!: pulumi.Output<outputs.IpSpaceThreshold[]>;
    /**
     * Time when the object has been updated. Equals to _created_at_ if not updated after creation.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The utilization of IP addresses in the IP space.
     */
    public /*out*/ readonly utilizations!: pulumi.Output<outputs.IpSpaceUtilization[]>;
    /**
     * The resource identifier.
     */
    public readonly vendorSpecificOptionOptionSpace!: pulumi.Output<string | undefined>;

    /**
     * Create a IpSpace resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: IpSpaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpSpaceArgs | IpSpaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpSpaceState | undefined;
            resourceInputs["asmConfig"] = state ? state.asmConfig : undefined;
            resourceInputs["asmScopeFlag"] = state ? state.asmScopeFlag : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["ddnsClientUpdate"] = state ? state.ddnsClientUpdate : undefined;
            resourceInputs["ddnsDomain"] = state ? state.ddnsDomain : undefined;
            resourceInputs["ddnsGenerateName"] = state ? state.ddnsGenerateName : undefined;
            resourceInputs["ddnsGeneratedPrefix"] = state ? state.ddnsGeneratedPrefix : undefined;
            resourceInputs["ddnsSendUpdates"] = state ? state.ddnsSendUpdates : undefined;
            resourceInputs["ddnsUpdateOnRenew"] = state ? state.ddnsUpdateOnRenew : undefined;
            resourceInputs["ddnsUseConflictResolution"] = state ? state.ddnsUseConflictResolution : undefined;
            resourceInputs["dhcpConfig"] = state ? state.dhcpConfig : undefined;
            resourceInputs["dhcpOptions"] = state ? state.dhcpOptions : undefined;
            resourceInputs["headerOptionFilename"] = state ? state.headerOptionFilename : undefined;
            resourceInputs["headerOptionServerAddress"] = state ? state.headerOptionServerAddress : undefined;
            resourceInputs["headerOptionServerName"] = state ? state.headerOptionServerName : undefined;
            resourceInputs["hostnameRewriteChar"] = state ? state.hostnameRewriteChar : undefined;
            resourceInputs["hostnameRewriteEnabled"] = state ? state.hostnameRewriteEnabled : undefined;
            resourceInputs["hostnameRewriteRegex"] = state ? state.hostnameRewriteRegex : undefined;
            resourceInputs["inheritanceSources"] = state ? state.inheritanceSources : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["thresholds"] = state ? state.thresholds : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["utilizations"] = state ? state.utilizations : undefined;
            resourceInputs["vendorSpecificOptionOptionSpace"] = state ? state.vendorSpecificOptionOptionSpace : undefined;
        } else {
            const args = argsOrState as IpSpaceArgs | undefined;
            resourceInputs["asmConfig"] = args ? args.asmConfig : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["ddnsClientUpdate"] = args ? args.ddnsClientUpdate : undefined;
            resourceInputs["ddnsDomain"] = args ? args.ddnsDomain : undefined;
            resourceInputs["ddnsGenerateName"] = args ? args.ddnsGenerateName : undefined;
            resourceInputs["ddnsGeneratedPrefix"] = args ? args.ddnsGeneratedPrefix : undefined;
            resourceInputs["ddnsSendUpdates"] = args ? args.ddnsSendUpdates : undefined;
            resourceInputs["ddnsUpdateOnRenew"] = args ? args.ddnsUpdateOnRenew : undefined;
            resourceInputs["ddnsUseConflictResolution"] = args ? args.ddnsUseConflictResolution : undefined;
            resourceInputs["dhcpConfig"] = args ? args.dhcpConfig : undefined;
            resourceInputs["dhcpOptions"] = args ? args.dhcpOptions : undefined;
            resourceInputs["headerOptionFilename"] = args ? args.headerOptionFilename : undefined;
            resourceInputs["headerOptionServerAddress"] = args ? args.headerOptionServerAddress : undefined;
            resourceInputs["headerOptionServerName"] = args ? args.headerOptionServerName : undefined;
            resourceInputs["hostnameRewriteChar"] = args ? args.hostnameRewriteChar : undefined;
            resourceInputs["hostnameRewriteEnabled"] = args ? args.hostnameRewriteEnabled : undefined;
            resourceInputs["hostnameRewriteRegex"] = args ? args.hostnameRewriteRegex : undefined;
            resourceInputs["inheritanceSources"] = args ? args.inheritanceSources : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vendorSpecificOptionOptionSpace"] = args ? args.vendorSpecificOptionOptionSpace : undefined;
            resourceInputs["asmScopeFlag"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["thresholds"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["utilizations"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpSpace.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IpSpace resources.
 */
export interface IpSpaceState {
    /**
     * The Automated Scope Management configuration for the IP space.
     */
    asmConfig?: pulumi.Input<inputs.IpSpaceAsmConfig>;
    /**
     * The number of times the automated scope management usage limits have been exceeded for any of the subnets in this IP
     * space.
     */
    asmScopeFlag?: pulumi.Input<number>;
    /**
     * The description for the IP space. May contain 0 to 1024 characters. Can include UTF-8.
     */
    comment?: pulumi.Input<string>;
    /**
     * Time when the object has been created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Controls who does the DDNS updates. Valid values are: * _client_: DHCP server updates DNS if requested by client. *
     * _server_: DHCP server always updates DNS, overriding an update request from the client, unless the client requests no
     * updates. * _ignore_: DHCP server always updates DNS, even if the client says not to. * _over_client_update_: Same as
     * _server_. DHCP server always updates DNS, overriding an update request from the client, unless the client requests no
     * updates. * _over_no_update_: DHCP server updates DNS even if the client requests that no updates be done. If the client
     * requests to do the update, DHCP server allows it. Defaults to _client_.
     */
    ddnsClientUpdate?: pulumi.Input<string>;
    /**
     * The domain suffix for DDNS updates. FQDN, may be empty. Defaults to empty.
     */
    ddnsDomain?: pulumi.Input<string>;
    /**
     * Indicates if DDNS needs to generate a hostname when not supplied by the client. Defaults to _false_.
     */
    ddnsGenerateName?: pulumi.Input<boolean>;
    /**
     * The prefix used in the generation of an FQDN. When generating a name, DHCP server will construct the name in the format:
     * [ddns-generated-prefix]-[address-text].[ddns-qualifying-suffix]. where address-text is simply the lease IP address
     * converted to a hyphenated string. Defaults to "myhost".
     */
    ddnsGeneratedPrefix?: pulumi.Input<string>;
    /**
     * Determines if DDNS updates are enabled at the IP space level. Defaults to _true_.
     */
    ddnsSendUpdates?: pulumi.Input<boolean>;
    /**
     * Instructs the DHCP server to always update the DNS information when a lease is renewed even if its DNS information has
     * not changed. Defaults to _false_.
     */
    ddnsUpdateOnRenew?: pulumi.Input<boolean>;
    /**
     * When true, DHCP server will apply conflict resolution, as described in RFC 4703, when attempting to fulfill the update
     * request. When false, DHCP server will simply attempt to update the DNS entries per the request, regardless of whether or
     * not they conflict with existing entries owned by other DHCP4 clients. Defaults to _true_.
     */
    ddnsUseConflictResolution?: pulumi.Input<boolean>;
    /**
     * The shared DHCP configuration for the IP space that controls how leases are issued.
     */
    dhcpConfig?: pulumi.Input<inputs.IpSpaceDhcpConfig>;
    /**
     * The list of DHCP options for the IP space. May be either a specific option or a group of options.
     */
    dhcpOptions?: pulumi.Input<pulumi.Input<inputs.IpSpaceDhcpOption>[]>;
    /**
     * The configuration for header option filename field.
     */
    headerOptionFilename?: pulumi.Input<string>;
    /**
     * The configuration for header option server address field.
     */
    headerOptionServerAddress?: pulumi.Input<string>;
    /**
     * The configuration for header option server name field.
     */
    headerOptionServerName?: pulumi.Input<string>;
    /**
     * The character to replace non-matching characters with, when hostname rewrite is enabled. Any single ASCII character.
     * Defaults to "_".
     */
    hostnameRewriteChar?: pulumi.Input<string>;
    /**
     * Indicates if client supplied hostnames will be rewritten prior to DDNS update by replacing every character that does not
     * match _hostname_rewrite_regex_ by _hostname_rewrite_char_. Defaults to _false_.
     */
    hostnameRewriteEnabled?: pulumi.Input<boolean>;
    /**
     * The regex bracket expression to match valid characters. Must begin with "[" and end with "]" and be a compilable POSIX
     * regex. Defaults to "[^a-zA-Z0-9_.]".
     */
    hostnameRewriteRegex?: pulumi.Input<string>;
    /**
     * The inheritance configuration.
     */
    inheritanceSources?: pulumi.Input<inputs.IpSpaceInheritanceSources>;
    /**
     * The name of the IP space. Must contain 1 to 256 characters. Can include UTF-8.
     */
    name?: pulumi.Input<string>;
    /**
     * The tags for the IP space in JSON format.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The utilization threshold settings for the IP space.
     */
    thresholds?: pulumi.Input<pulumi.Input<inputs.IpSpaceThreshold>[]>;
    /**
     * Time when the object has been updated. Equals to _created_at_ if not updated after creation.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The utilization of IP addresses in the IP space.
     */
    utilizations?: pulumi.Input<pulumi.Input<inputs.IpSpaceUtilization>[]>;
    /**
     * The resource identifier.
     */
    vendorSpecificOptionOptionSpace?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IpSpace resource.
 */
export interface IpSpaceArgs {
    /**
     * The Automated Scope Management configuration for the IP space.
     */
    asmConfig?: pulumi.Input<inputs.IpSpaceAsmConfig>;
    /**
     * The description for the IP space. May contain 0 to 1024 characters. Can include UTF-8.
     */
    comment?: pulumi.Input<string>;
    /**
     * Controls who does the DDNS updates. Valid values are: * _client_: DHCP server updates DNS if requested by client. *
     * _server_: DHCP server always updates DNS, overriding an update request from the client, unless the client requests no
     * updates. * _ignore_: DHCP server always updates DNS, even if the client says not to. * _over_client_update_: Same as
     * _server_. DHCP server always updates DNS, overriding an update request from the client, unless the client requests no
     * updates. * _over_no_update_: DHCP server updates DNS even if the client requests that no updates be done. If the client
     * requests to do the update, DHCP server allows it. Defaults to _client_.
     */
    ddnsClientUpdate?: pulumi.Input<string>;
    /**
     * The domain suffix for DDNS updates. FQDN, may be empty. Defaults to empty.
     */
    ddnsDomain?: pulumi.Input<string>;
    /**
     * Indicates if DDNS needs to generate a hostname when not supplied by the client. Defaults to _false_.
     */
    ddnsGenerateName?: pulumi.Input<boolean>;
    /**
     * The prefix used in the generation of an FQDN. When generating a name, DHCP server will construct the name in the format:
     * [ddns-generated-prefix]-[address-text].[ddns-qualifying-suffix]. where address-text is simply the lease IP address
     * converted to a hyphenated string. Defaults to "myhost".
     */
    ddnsGeneratedPrefix?: pulumi.Input<string>;
    /**
     * Determines if DDNS updates are enabled at the IP space level. Defaults to _true_.
     */
    ddnsSendUpdates?: pulumi.Input<boolean>;
    /**
     * Instructs the DHCP server to always update the DNS information when a lease is renewed even if its DNS information has
     * not changed. Defaults to _false_.
     */
    ddnsUpdateOnRenew?: pulumi.Input<boolean>;
    /**
     * When true, DHCP server will apply conflict resolution, as described in RFC 4703, when attempting to fulfill the update
     * request. When false, DHCP server will simply attempt to update the DNS entries per the request, regardless of whether or
     * not they conflict with existing entries owned by other DHCP4 clients. Defaults to _true_.
     */
    ddnsUseConflictResolution?: pulumi.Input<boolean>;
    /**
     * The shared DHCP configuration for the IP space that controls how leases are issued.
     */
    dhcpConfig?: pulumi.Input<inputs.IpSpaceDhcpConfig>;
    /**
     * The list of DHCP options for the IP space. May be either a specific option or a group of options.
     */
    dhcpOptions?: pulumi.Input<pulumi.Input<inputs.IpSpaceDhcpOption>[]>;
    /**
     * The configuration for header option filename field.
     */
    headerOptionFilename?: pulumi.Input<string>;
    /**
     * The configuration for header option server address field.
     */
    headerOptionServerAddress?: pulumi.Input<string>;
    /**
     * The configuration for header option server name field.
     */
    headerOptionServerName?: pulumi.Input<string>;
    /**
     * The character to replace non-matching characters with, when hostname rewrite is enabled. Any single ASCII character.
     * Defaults to "_".
     */
    hostnameRewriteChar?: pulumi.Input<string>;
    /**
     * Indicates if client supplied hostnames will be rewritten prior to DDNS update by replacing every character that does not
     * match _hostname_rewrite_regex_ by _hostname_rewrite_char_. Defaults to _false_.
     */
    hostnameRewriteEnabled?: pulumi.Input<boolean>;
    /**
     * The regex bracket expression to match valid characters. Must begin with "[" and end with "]" and be a compilable POSIX
     * regex. Defaults to "[^a-zA-Z0-9_.]".
     */
    hostnameRewriteRegex?: pulumi.Input<string>;
    /**
     * The inheritance configuration.
     */
    inheritanceSources?: pulumi.Input<inputs.IpSpaceInheritanceSources>;
    /**
     * The name of the IP space. Must contain 1 to 256 characters. Can include UTF-8.
     */
    name?: pulumi.Input<string>;
    /**
     * The tags for the IP space in JSON format.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The resource identifier.
     */
    vendorSpecificOptionOptionSpace?: pulumi.Input<string>;
}
