// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DnsView extends pulumi.CustomResource {
    /**
     * Get an existing DnsView resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsViewState, opts?: pulumi.CustomResourceOptions): DnsView {
        return new DnsView(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'b1ddi:index/dnsView:DnsView';

    /**
     * Returns true if the given object is an instance of DnsView.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsView {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsView.__pulumiType;
    }

    /**
     * Optional. Comment for view.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * The timestamp when the object has been created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Optional. List of custom root nameservers. The order does not matter. Error if empty while _custom_root_ns_enabled_ is
     * _true_. Error if there are duplicate items in the list. Defaults to empty.
     */
    public readonly customRootNs!: pulumi.Output<outputs.DnsViewCustomRootN[] | undefined>;
    /**
     * Optional. _true_ to use custom root nameservers instead of the default ones. The _custom_root_ns_ is validated when
     * enabled. Defaults to _false_.
     */
    public readonly customRootNsEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Optional. _true_ to disable object. A disabled object is effectively non-existent when generating configuration.
     */
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * Optional. _true_ to perform DNSSEC validation. Ignored if _dnssec_enabled_ is _false_. Defaults to _true_.
     */
    public readonly dnssecEnableValidation!: pulumi.Output<boolean | undefined>;
    /**
     * Optional. Master toggle for all DNSSEC processing. Other _dnssec_*_ configuration is unused if this is disabled.
     * Defaults to _true_.
     */
    public readonly dnssecEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * DNSSEC root keys. The root keys are not configurable. A default list is provided by cloud management and included here
     * for config generation.
     */
    public /*out*/ readonly dnssecRootKeys!: pulumi.Output<outputs.DnsViewDnssecRootKey[]>;
    /**
     * Optional. DNSSEC trust anchors. Error if there are list items with duplicate (_zone_, _sep_, _algorithm_) combinations.
     * Defaults to empty.
     */
    public readonly dnssecTrustAnchors!: pulumi.Output<outputs.DnsViewDnssecTrustAnchor[] | undefined>;
    /**
     * Optional. _true_ to reject expired DNSSEC keys. Ignored if either _dnssec_enabled_ or _dnssec_enable_validation_ is
     * _false_. Defaults to _true_.
     */
    public readonly dnssecValidateExpiry!: pulumi.Output<boolean | undefined>;
    /**
     * Optional. _true_ to enable EDNS client subnet for recursive queries. Other _ecs_*_ fields are ignored if this field is
     * not enabled. Defaults to _false-.
     */
    public readonly ecsEnabled!: pulumi.Output<boolean>;
    /**
     * Optional. _true_ to enable ECS options in outbound queries. This functionality has additional overhead so it is disabled
     * by default. Defaults to _false_.
     */
    public readonly ecsForwarding!: pulumi.Output<boolean>;
    /**
     * Optional. Maximum scope length for v4 ECS. Unsigned integer, min 1 max 24 Defaults to 24.
     */
    public readonly ecsPrefixV4!: pulumi.Output<number>;
    /**
     * Optional. Maximum scope length for v6 ECS. Unsigned integer, min 1 max 56 Defaults to 56.
     */
    public readonly ecsPrefixV6!: pulumi.Output<number>;
    /**
     * Optional. List of zones where ECS queries may be sent. Error if empty while _ecs_enabled_ is _true_. Error if there are
     * duplicate FQDNs in the list. Defaults to empty.
     */
    public readonly ecsZones!: pulumi.Output<outputs.DnsViewEcsZone[] | undefined>;
    /**
     * Optional. _edns_udp_size_ represents the edns UDP size. The size a querying DNS server advertises to the DNS server
     * itâ€™s sending a query to. Defaults to 1232 bytes.
     */
    public readonly ednsUdpSize!: pulumi.Output<number>;
    /**
     * Optional. List of forwarders. Error if empty while _forwarders_only_ is _true_. Error if there are items in the list
     * with duplicate addresses. Defaults to empty.
     */
    public readonly forwarders!: pulumi.Output<outputs.DnsViewForwarder[] | undefined>;
    /**
     * Optional. _true_ to only forward. Defaults to _false_.
     */
    public readonly forwardersOnly!: pulumi.Output<boolean | undefined>;
    /**
     * _gss_tsig_enabled_ enables/disables GSS-TSIG signed dynamic updates. Defaults to _false_.
     */
    public readonly gssTsigEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Optional. Inheritance configuration.
     */
    public readonly inheritanceSources!: pulumi.Output<outputs.DnsViewInheritanceSources | undefined>;
    /**
     * The resource identifier.
     */
    public readonly ipSpaces!: pulumi.Output<string[] | undefined>;
    /**
     * Optional. Unused in the current on-prem DNS server implementation. Unsigned integer, min 0 max 3600 (1h). Defaults to
     * 600.
     */
    public readonly lameTtl!: pulumi.Output<number>;
    /**
     * Optional. Specifies which clients have access to the view. Defaults to empty.
     */
    public readonly matchClientsAcls!: pulumi.Output<outputs.DnsViewMatchClientsAcl[] | undefined>;
    /**
     * Optional. Specifies which destination addresses have access to the view. Defaults to empty.
     */
    public readonly matchDestinationsAcls!: pulumi.Output<outputs.DnsViewMatchDestinationsAcl[] | undefined>;
    /**
     * Optional. If _true_ only recursive queries from matching clients access the view. Defaults to _false_.
     */
    public readonly matchRecursiveOnly!: pulumi.Output<boolean | undefined>;
    /**
     * Optional. Seconds to cache positive responses. Unsigned integer, min 1 max 604800 (7d). Defaults to 604800 (7d).
     */
    public readonly maxCacheTtl!: pulumi.Output<number | undefined>;
    /**
     * Optional. Seconds to cache negative responses. Unsigned integer, min 1 max 604800 (7d). Defaults to 10800 (3h).
     */
    public readonly maxNegativeTtl!: pulumi.Output<number | undefined>;
    /**
     * Optional. _max_udp_size_ represents maximum UDP payload size. The maximum number of bytes a responding DNS server will
     * send to a UDP datagram. Defaults to 1232 bytes.
     */
    public readonly maxUdpSize!: pulumi.Output<number | undefined>;
    /**
     * Optional. When enabled, the DNS server will only add records to the authority and additional data sections when they are
     * required. Defaults to _false_.
     */
    public readonly minimalResponses!: pulumi.Output<boolean | undefined>;
    /**
     * Name of view.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * _notify_ all external secondary DNS servers. Defaults to _false_.
     */
    public readonly notify!: pulumi.Output<boolean | undefined>;
    /**
     * Optional. Clients must match this ACL to make authoritative queries. Also used for recursive queries if that ACL is
     * unset. Defaults to empty.
     */
    public readonly queryAcls!: pulumi.Output<outputs.DnsViewQueryAcl[] | undefined>;
    /**
     * Optional. Clients must match this ACL to make recursive queries. If this ACL is empty, then the _query_acl_ will be used
     * instead. Defaults to empty.
     */
    public readonly recursionAcls!: pulumi.Output<outputs.DnsViewRecursionAcl[] | undefined>;
    /**
     * Optional. _true_ to allow recursive DNS queries. Defaults to _true_.
     */
    public readonly recursionEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Tagging specifics.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Optional. Clients must match this ACL to receive zone transfers. Defaults to empty.
     */
    public readonly transferAcls!: pulumi.Output<outputs.DnsViewTransferAcl[] | undefined>;
    /**
     * Optional. Specifies which hosts are allowed to issue Dynamic DNS updates for authoritative zones of _primary_type_
     * _cloud_. Defaults to empty.
     */
    public readonly updateAcls!: pulumi.Output<outputs.DnsViewUpdateAcl[] | undefined>;
    /**
     * The timestamp when the object has been updated. Equals to _created_at_ if not updated after creation.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * Optional. Use default forwarders to resolve queries for subzones. Defaults to _true_.
     */
    public readonly useForwardersForSubzones!: pulumi.Output<boolean | undefined>;
    /**
     * Optional. ZoneAuthority.
     */
    public readonly zoneAuthority!: pulumi.Output<outputs.DnsViewZoneAuthority | undefined>;

    /**
     * Create a DnsView resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DnsViewArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsViewArgs | DnsViewState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsViewState | undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["customRootNs"] = state ? state.customRootNs : undefined;
            resourceInputs["customRootNsEnabled"] = state ? state.customRootNsEnabled : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["dnssecEnableValidation"] = state ? state.dnssecEnableValidation : undefined;
            resourceInputs["dnssecEnabled"] = state ? state.dnssecEnabled : undefined;
            resourceInputs["dnssecRootKeys"] = state ? state.dnssecRootKeys : undefined;
            resourceInputs["dnssecTrustAnchors"] = state ? state.dnssecTrustAnchors : undefined;
            resourceInputs["dnssecValidateExpiry"] = state ? state.dnssecValidateExpiry : undefined;
            resourceInputs["ecsEnabled"] = state ? state.ecsEnabled : undefined;
            resourceInputs["ecsForwarding"] = state ? state.ecsForwarding : undefined;
            resourceInputs["ecsPrefixV4"] = state ? state.ecsPrefixV4 : undefined;
            resourceInputs["ecsPrefixV6"] = state ? state.ecsPrefixV6 : undefined;
            resourceInputs["ecsZones"] = state ? state.ecsZones : undefined;
            resourceInputs["ednsUdpSize"] = state ? state.ednsUdpSize : undefined;
            resourceInputs["forwarders"] = state ? state.forwarders : undefined;
            resourceInputs["forwardersOnly"] = state ? state.forwardersOnly : undefined;
            resourceInputs["gssTsigEnabled"] = state ? state.gssTsigEnabled : undefined;
            resourceInputs["inheritanceSources"] = state ? state.inheritanceSources : undefined;
            resourceInputs["ipSpaces"] = state ? state.ipSpaces : undefined;
            resourceInputs["lameTtl"] = state ? state.lameTtl : undefined;
            resourceInputs["matchClientsAcls"] = state ? state.matchClientsAcls : undefined;
            resourceInputs["matchDestinationsAcls"] = state ? state.matchDestinationsAcls : undefined;
            resourceInputs["matchRecursiveOnly"] = state ? state.matchRecursiveOnly : undefined;
            resourceInputs["maxCacheTtl"] = state ? state.maxCacheTtl : undefined;
            resourceInputs["maxNegativeTtl"] = state ? state.maxNegativeTtl : undefined;
            resourceInputs["maxUdpSize"] = state ? state.maxUdpSize : undefined;
            resourceInputs["minimalResponses"] = state ? state.minimalResponses : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notify"] = state ? state.notify : undefined;
            resourceInputs["queryAcls"] = state ? state.queryAcls : undefined;
            resourceInputs["recursionAcls"] = state ? state.recursionAcls : undefined;
            resourceInputs["recursionEnabled"] = state ? state.recursionEnabled : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["transferAcls"] = state ? state.transferAcls : undefined;
            resourceInputs["updateAcls"] = state ? state.updateAcls : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["useForwardersForSubzones"] = state ? state.useForwardersForSubzones : undefined;
            resourceInputs["zoneAuthority"] = state ? state.zoneAuthority : undefined;
        } else {
            const args = argsOrState as DnsViewArgs | undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["customRootNs"] = args ? args.customRootNs : undefined;
            resourceInputs["customRootNsEnabled"] = args ? args.customRootNsEnabled : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["dnssecEnableValidation"] = args ? args.dnssecEnableValidation : undefined;
            resourceInputs["dnssecEnabled"] = args ? args.dnssecEnabled : undefined;
            resourceInputs["dnssecTrustAnchors"] = args ? args.dnssecTrustAnchors : undefined;
            resourceInputs["dnssecValidateExpiry"] = args ? args.dnssecValidateExpiry : undefined;
            resourceInputs["ecsEnabled"] = args ? args.ecsEnabled : undefined;
            resourceInputs["ecsForwarding"] = args ? args.ecsForwarding : undefined;
            resourceInputs["ecsPrefixV4"] = args ? args.ecsPrefixV4 : undefined;
            resourceInputs["ecsPrefixV6"] = args ? args.ecsPrefixV6 : undefined;
            resourceInputs["ecsZones"] = args ? args.ecsZones : undefined;
            resourceInputs["ednsUdpSize"] = args ? args.ednsUdpSize : undefined;
            resourceInputs["forwarders"] = args ? args.forwarders : undefined;
            resourceInputs["forwardersOnly"] = args ? args.forwardersOnly : undefined;
            resourceInputs["gssTsigEnabled"] = args ? args.gssTsigEnabled : undefined;
            resourceInputs["inheritanceSources"] = args ? args.inheritanceSources : undefined;
            resourceInputs["ipSpaces"] = args ? args.ipSpaces : undefined;
            resourceInputs["lameTtl"] = args ? args.lameTtl : undefined;
            resourceInputs["matchClientsAcls"] = args ? args.matchClientsAcls : undefined;
            resourceInputs["matchDestinationsAcls"] = args ? args.matchDestinationsAcls : undefined;
            resourceInputs["matchRecursiveOnly"] = args ? args.matchRecursiveOnly : undefined;
            resourceInputs["maxCacheTtl"] = args ? args.maxCacheTtl : undefined;
            resourceInputs["maxNegativeTtl"] = args ? args.maxNegativeTtl : undefined;
            resourceInputs["maxUdpSize"] = args ? args.maxUdpSize : undefined;
            resourceInputs["minimalResponses"] = args ? args.minimalResponses : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notify"] = args ? args.notify : undefined;
            resourceInputs["queryAcls"] = args ? args.queryAcls : undefined;
            resourceInputs["recursionAcls"] = args ? args.recursionAcls : undefined;
            resourceInputs["recursionEnabled"] = args ? args.recursionEnabled : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["transferAcls"] = args ? args.transferAcls : undefined;
            resourceInputs["updateAcls"] = args ? args.updateAcls : undefined;
            resourceInputs["useForwardersForSubzones"] = args ? args.useForwardersForSubzones : undefined;
            resourceInputs["zoneAuthority"] = args ? args.zoneAuthority : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["dnssecRootKeys"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsView.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DnsView resources.
 */
export interface DnsViewState {
    /**
     * Optional. Comment for view.
     */
    comment?: pulumi.Input<string>;
    /**
     * The timestamp when the object has been created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Optional. List of custom root nameservers. The order does not matter. Error if empty while _custom_root_ns_enabled_ is
     * _true_. Error if there are duplicate items in the list. Defaults to empty.
     */
    customRootNs?: pulumi.Input<pulumi.Input<inputs.DnsViewCustomRootN>[]>;
    /**
     * Optional. _true_ to use custom root nameservers instead of the default ones. The _custom_root_ns_ is validated when
     * enabled. Defaults to _false_.
     */
    customRootNsEnabled?: pulumi.Input<boolean>;
    /**
     * Optional. _true_ to disable object. A disabled object is effectively non-existent when generating configuration.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Optional. _true_ to perform DNSSEC validation. Ignored if _dnssec_enabled_ is _false_. Defaults to _true_.
     */
    dnssecEnableValidation?: pulumi.Input<boolean>;
    /**
     * Optional. Master toggle for all DNSSEC processing. Other _dnssec_*_ configuration is unused if this is disabled.
     * Defaults to _true_.
     */
    dnssecEnabled?: pulumi.Input<boolean>;
    /**
     * DNSSEC root keys. The root keys are not configurable. A default list is provided by cloud management and included here
     * for config generation.
     */
    dnssecRootKeys?: pulumi.Input<pulumi.Input<inputs.DnsViewDnssecRootKey>[]>;
    /**
     * Optional. DNSSEC trust anchors. Error if there are list items with duplicate (_zone_, _sep_, _algorithm_) combinations.
     * Defaults to empty.
     */
    dnssecTrustAnchors?: pulumi.Input<pulumi.Input<inputs.DnsViewDnssecTrustAnchor>[]>;
    /**
     * Optional. _true_ to reject expired DNSSEC keys. Ignored if either _dnssec_enabled_ or _dnssec_enable_validation_ is
     * _false_. Defaults to _true_.
     */
    dnssecValidateExpiry?: pulumi.Input<boolean>;
    /**
     * Optional. _true_ to enable EDNS client subnet for recursive queries. Other _ecs_*_ fields are ignored if this field is
     * not enabled. Defaults to _false-.
     */
    ecsEnabled?: pulumi.Input<boolean>;
    /**
     * Optional. _true_ to enable ECS options in outbound queries. This functionality has additional overhead so it is disabled
     * by default. Defaults to _false_.
     */
    ecsForwarding?: pulumi.Input<boolean>;
    /**
     * Optional. Maximum scope length for v4 ECS. Unsigned integer, min 1 max 24 Defaults to 24.
     */
    ecsPrefixV4?: pulumi.Input<number>;
    /**
     * Optional. Maximum scope length for v6 ECS. Unsigned integer, min 1 max 56 Defaults to 56.
     */
    ecsPrefixV6?: pulumi.Input<number>;
    /**
     * Optional. List of zones where ECS queries may be sent. Error if empty while _ecs_enabled_ is _true_. Error if there are
     * duplicate FQDNs in the list. Defaults to empty.
     */
    ecsZones?: pulumi.Input<pulumi.Input<inputs.DnsViewEcsZone>[]>;
    /**
     * Optional. _edns_udp_size_ represents the edns UDP size. The size a querying DNS server advertises to the DNS server
     * itâ€™s sending a query to. Defaults to 1232 bytes.
     */
    ednsUdpSize?: pulumi.Input<number>;
    /**
     * Optional. List of forwarders. Error if empty while _forwarders_only_ is _true_. Error if there are items in the list
     * with duplicate addresses. Defaults to empty.
     */
    forwarders?: pulumi.Input<pulumi.Input<inputs.DnsViewForwarder>[]>;
    /**
     * Optional. _true_ to only forward. Defaults to _false_.
     */
    forwardersOnly?: pulumi.Input<boolean>;
    /**
     * _gss_tsig_enabled_ enables/disables GSS-TSIG signed dynamic updates. Defaults to _false_.
     */
    gssTsigEnabled?: pulumi.Input<boolean>;
    /**
     * Optional. Inheritance configuration.
     */
    inheritanceSources?: pulumi.Input<inputs.DnsViewInheritanceSources>;
    /**
     * The resource identifier.
     */
    ipSpaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Optional. Unused in the current on-prem DNS server implementation. Unsigned integer, min 0 max 3600 (1h). Defaults to
     * 600.
     */
    lameTtl?: pulumi.Input<number>;
    /**
     * Optional. Specifies which clients have access to the view. Defaults to empty.
     */
    matchClientsAcls?: pulumi.Input<pulumi.Input<inputs.DnsViewMatchClientsAcl>[]>;
    /**
     * Optional. Specifies which destination addresses have access to the view. Defaults to empty.
     */
    matchDestinationsAcls?: pulumi.Input<pulumi.Input<inputs.DnsViewMatchDestinationsAcl>[]>;
    /**
     * Optional. If _true_ only recursive queries from matching clients access the view. Defaults to _false_.
     */
    matchRecursiveOnly?: pulumi.Input<boolean>;
    /**
     * Optional. Seconds to cache positive responses. Unsigned integer, min 1 max 604800 (7d). Defaults to 604800 (7d).
     */
    maxCacheTtl?: pulumi.Input<number>;
    /**
     * Optional. Seconds to cache negative responses. Unsigned integer, min 1 max 604800 (7d). Defaults to 10800 (3h).
     */
    maxNegativeTtl?: pulumi.Input<number>;
    /**
     * Optional. _max_udp_size_ represents maximum UDP payload size. The maximum number of bytes a responding DNS server will
     * send to a UDP datagram. Defaults to 1232 bytes.
     */
    maxUdpSize?: pulumi.Input<number>;
    /**
     * Optional. When enabled, the DNS server will only add records to the authority and additional data sections when they are
     * required. Defaults to _false_.
     */
    minimalResponses?: pulumi.Input<boolean>;
    /**
     * Name of view.
     */
    name?: pulumi.Input<string>;
    /**
     * _notify_ all external secondary DNS servers. Defaults to _false_.
     */
    notify?: pulumi.Input<boolean>;
    /**
     * Optional. Clients must match this ACL to make authoritative queries. Also used for recursive queries if that ACL is
     * unset. Defaults to empty.
     */
    queryAcls?: pulumi.Input<pulumi.Input<inputs.DnsViewQueryAcl>[]>;
    /**
     * Optional. Clients must match this ACL to make recursive queries. If this ACL is empty, then the _query_acl_ will be used
     * instead. Defaults to empty.
     */
    recursionAcls?: pulumi.Input<pulumi.Input<inputs.DnsViewRecursionAcl>[]>;
    /**
     * Optional. _true_ to allow recursive DNS queries. Defaults to _true_.
     */
    recursionEnabled?: pulumi.Input<boolean>;
    /**
     * Tagging specifics.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Optional. Clients must match this ACL to receive zone transfers. Defaults to empty.
     */
    transferAcls?: pulumi.Input<pulumi.Input<inputs.DnsViewTransferAcl>[]>;
    /**
     * Optional. Specifies which hosts are allowed to issue Dynamic DNS updates for authoritative zones of _primary_type_
     * _cloud_. Defaults to empty.
     */
    updateAcls?: pulumi.Input<pulumi.Input<inputs.DnsViewUpdateAcl>[]>;
    /**
     * The timestamp when the object has been updated. Equals to _created_at_ if not updated after creation.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * Optional. Use default forwarders to resolve queries for subzones. Defaults to _true_.
     */
    useForwardersForSubzones?: pulumi.Input<boolean>;
    /**
     * Optional. ZoneAuthority.
     */
    zoneAuthority?: pulumi.Input<inputs.DnsViewZoneAuthority>;
}

/**
 * The set of arguments for constructing a DnsView resource.
 */
export interface DnsViewArgs {
    /**
     * Optional. Comment for view.
     */
    comment?: pulumi.Input<string>;
    /**
     * Optional. List of custom root nameservers. The order does not matter. Error if empty while _custom_root_ns_enabled_ is
     * _true_. Error if there are duplicate items in the list. Defaults to empty.
     */
    customRootNs?: pulumi.Input<pulumi.Input<inputs.DnsViewCustomRootN>[]>;
    /**
     * Optional. _true_ to use custom root nameservers instead of the default ones. The _custom_root_ns_ is validated when
     * enabled. Defaults to _false_.
     */
    customRootNsEnabled?: pulumi.Input<boolean>;
    /**
     * Optional. _true_ to disable object. A disabled object is effectively non-existent when generating configuration.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Optional. _true_ to perform DNSSEC validation. Ignored if _dnssec_enabled_ is _false_. Defaults to _true_.
     */
    dnssecEnableValidation?: pulumi.Input<boolean>;
    /**
     * Optional. Master toggle for all DNSSEC processing. Other _dnssec_*_ configuration is unused if this is disabled.
     * Defaults to _true_.
     */
    dnssecEnabled?: pulumi.Input<boolean>;
    /**
     * Optional. DNSSEC trust anchors. Error if there are list items with duplicate (_zone_, _sep_, _algorithm_) combinations.
     * Defaults to empty.
     */
    dnssecTrustAnchors?: pulumi.Input<pulumi.Input<inputs.DnsViewDnssecTrustAnchor>[]>;
    /**
     * Optional. _true_ to reject expired DNSSEC keys. Ignored if either _dnssec_enabled_ or _dnssec_enable_validation_ is
     * _false_. Defaults to _true_.
     */
    dnssecValidateExpiry?: pulumi.Input<boolean>;
    /**
     * Optional. _true_ to enable EDNS client subnet for recursive queries. Other _ecs_*_ fields are ignored if this field is
     * not enabled. Defaults to _false-.
     */
    ecsEnabled?: pulumi.Input<boolean>;
    /**
     * Optional. _true_ to enable ECS options in outbound queries. This functionality has additional overhead so it is disabled
     * by default. Defaults to _false_.
     */
    ecsForwarding?: pulumi.Input<boolean>;
    /**
     * Optional. Maximum scope length for v4 ECS. Unsigned integer, min 1 max 24 Defaults to 24.
     */
    ecsPrefixV4?: pulumi.Input<number>;
    /**
     * Optional. Maximum scope length for v6 ECS. Unsigned integer, min 1 max 56 Defaults to 56.
     */
    ecsPrefixV6?: pulumi.Input<number>;
    /**
     * Optional. List of zones where ECS queries may be sent. Error if empty while _ecs_enabled_ is _true_. Error if there are
     * duplicate FQDNs in the list. Defaults to empty.
     */
    ecsZones?: pulumi.Input<pulumi.Input<inputs.DnsViewEcsZone>[]>;
    /**
     * Optional. _edns_udp_size_ represents the edns UDP size. The size a querying DNS server advertises to the DNS server
     * itâ€™s sending a query to. Defaults to 1232 bytes.
     */
    ednsUdpSize?: pulumi.Input<number>;
    /**
     * Optional. List of forwarders. Error if empty while _forwarders_only_ is _true_. Error if there are items in the list
     * with duplicate addresses. Defaults to empty.
     */
    forwarders?: pulumi.Input<pulumi.Input<inputs.DnsViewForwarder>[]>;
    /**
     * Optional. _true_ to only forward. Defaults to _false_.
     */
    forwardersOnly?: pulumi.Input<boolean>;
    /**
     * _gss_tsig_enabled_ enables/disables GSS-TSIG signed dynamic updates. Defaults to _false_.
     */
    gssTsigEnabled?: pulumi.Input<boolean>;
    /**
     * Optional. Inheritance configuration.
     */
    inheritanceSources?: pulumi.Input<inputs.DnsViewInheritanceSources>;
    /**
     * The resource identifier.
     */
    ipSpaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Optional. Unused in the current on-prem DNS server implementation. Unsigned integer, min 0 max 3600 (1h). Defaults to
     * 600.
     */
    lameTtl?: pulumi.Input<number>;
    /**
     * Optional. Specifies which clients have access to the view. Defaults to empty.
     */
    matchClientsAcls?: pulumi.Input<pulumi.Input<inputs.DnsViewMatchClientsAcl>[]>;
    /**
     * Optional. Specifies which destination addresses have access to the view. Defaults to empty.
     */
    matchDestinationsAcls?: pulumi.Input<pulumi.Input<inputs.DnsViewMatchDestinationsAcl>[]>;
    /**
     * Optional. If _true_ only recursive queries from matching clients access the view. Defaults to _false_.
     */
    matchRecursiveOnly?: pulumi.Input<boolean>;
    /**
     * Optional. Seconds to cache positive responses. Unsigned integer, min 1 max 604800 (7d). Defaults to 604800 (7d).
     */
    maxCacheTtl?: pulumi.Input<number>;
    /**
     * Optional. Seconds to cache negative responses. Unsigned integer, min 1 max 604800 (7d). Defaults to 10800 (3h).
     */
    maxNegativeTtl?: pulumi.Input<number>;
    /**
     * Optional. _max_udp_size_ represents maximum UDP payload size. The maximum number of bytes a responding DNS server will
     * send to a UDP datagram. Defaults to 1232 bytes.
     */
    maxUdpSize?: pulumi.Input<number>;
    /**
     * Optional. When enabled, the DNS server will only add records to the authority and additional data sections when they are
     * required. Defaults to _false_.
     */
    minimalResponses?: pulumi.Input<boolean>;
    /**
     * Name of view.
     */
    name?: pulumi.Input<string>;
    /**
     * _notify_ all external secondary DNS servers. Defaults to _false_.
     */
    notify?: pulumi.Input<boolean>;
    /**
     * Optional. Clients must match this ACL to make authoritative queries. Also used for recursive queries if that ACL is
     * unset. Defaults to empty.
     */
    queryAcls?: pulumi.Input<pulumi.Input<inputs.DnsViewQueryAcl>[]>;
    /**
     * Optional. Clients must match this ACL to make recursive queries. If this ACL is empty, then the _query_acl_ will be used
     * instead. Defaults to empty.
     */
    recursionAcls?: pulumi.Input<pulumi.Input<inputs.DnsViewRecursionAcl>[]>;
    /**
     * Optional. _true_ to allow recursive DNS queries. Defaults to _true_.
     */
    recursionEnabled?: pulumi.Input<boolean>;
    /**
     * Tagging specifics.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Optional. Clients must match this ACL to receive zone transfers. Defaults to empty.
     */
    transferAcls?: pulumi.Input<pulumi.Input<inputs.DnsViewTransferAcl>[]>;
    /**
     * Optional. Specifies which hosts are allowed to issue Dynamic DNS updates for authoritative zones of _primary_type_
     * _cloud_. Defaults to empty.
     */
    updateAcls?: pulumi.Input<pulumi.Input<inputs.DnsViewUpdateAcl>[]>;
    /**
     * Optional. Use default forwarders to resolve queries for subzones. Defaults to _true_.
     */
    useForwardersForSubzones?: pulumi.Input<boolean>;
    /**
     * Optional. ZoneAuthority.
     */
    zoneAuthority?: pulumi.Input<inputs.DnsViewZoneAuthority>;
}
