// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AddressArgs, AddressState } from "./address";
export type Address = import("./address").Address;
export const Address: typeof import("./address").Address = null as any;
utilities.lazyLoad(exports, ["Address"], () => require("./address"));

export { AddressBlockArgs, AddressBlockState } from "./addressBlock";
export type AddressBlock = import("./addressBlock").AddressBlock;
export const AddressBlock: typeof import("./addressBlock").AddressBlock = null as any;
utilities.lazyLoad(exports, ["AddressBlock"], () => require("./addressBlock"));

export { DnsAuthNsgArgs, DnsAuthNsgState } from "./dnsAuthNsg";
export type DnsAuthNsg = import("./dnsAuthNsg").DnsAuthNsg;
export const DnsAuthNsg: typeof import("./dnsAuthNsg").DnsAuthNsg = null as any;
utilities.lazyLoad(exports, ["DnsAuthNsg"], () => require("./dnsAuthNsg"));

export { DnsAuthZoneArgs, DnsAuthZoneState } from "./dnsAuthZone";
export type DnsAuthZone = import("./dnsAuthZone").DnsAuthZone;
export const DnsAuthZone: typeof import("./dnsAuthZone").DnsAuthZone = null as any;
utilities.lazyLoad(exports, ["DnsAuthZone"], () => require("./dnsAuthZone"));

export { DnsForwardNsgArgs, DnsForwardNsgState } from "./dnsForwardNsg";
export type DnsForwardNsg = import("./dnsForwardNsg").DnsForwardNsg;
export const DnsForwardNsg: typeof import("./dnsForwardNsg").DnsForwardNsg = null as any;
utilities.lazyLoad(exports, ["DnsForwardNsg"], () => require("./dnsForwardNsg"));

export { DnsForwardZoneArgs, DnsForwardZoneState } from "./dnsForwardZone";
export type DnsForwardZone = import("./dnsForwardZone").DnsForwardZone;
export const DnsForwardZone: typeof import("./dnsForwardZone").DnsForwardZone = null as any;
utilities.lazyLoad(exports, ["DnsForwardZone"], () => require("./dnsForwardZone"));

export { DnsRecordArgs, DnsRecordState } from "./dnsRecord";
export type DnsRecord = import("./dnsRecord").DnsRecord;
export const DnsRecord: typeof import("./dnsRecord").DnsRecord = null as any;
utilities.lazyLoad(exports, ["DnsRecord"], () => require("./dnsRecord"));

export { DnsViewArgs, DnsViewState } from "./dnsView";
export type DnsView = import("./dnsView").DnsView;
export const DnsView: typeof import("./dnsView").DnsView = null as any;
utilities.lazyLoad(exports, ["DnsView"], () => require("./dnsView"));

export { FixedAddressArgs, FixedAddressState } from "./fixedAddress";
export type FixedAddress = import("./fixedAddress").FixedAddress;
export const FixedAddress: typeof import("./fixedAddress").FixedAddress = null as any;
utilities.lazyLoad(exports, ["FixedAddress"], () => require("./fixedAddress"));

export { GetAddressBlocksArgs, GetAddressBlocksResult, GetAddressBlocksOutputArgs } from "./getAddressBlocks";
export const getAddressBlocks: typeof import("./getAddressBlocks").getAddressBlocks = null as any;
export const getAddressBlocksOutput: typeof import("./getAddressBlocks").getAddressBlocksOutput = null as any;
utilities.lazyLoad(exports, ["getAddressBlocks","getAddressBlocksOutput"], () => require("./getAddressBlocks"));

export { GetAddressesArgs, GetAddressesResult, GetAddressesOutputArgs } from "./getAddresses";
export const getAddresses: typeof import("./getAddresses").getAddresses = null as any;
export const getAddressesOutput: typeof import("./getAddresses").getAddressesOutput = null as any;
utilities.lazyLoad(exports, ["getAddresses","getAddressesOutput"], () => require("./getAddresses"));

export { GetDhcpHostsArgs, GetDhcpHostsResult, GetDhcpHostsOutputArgs } from "./getDhcpHosts";
export const getDhcpHosts: typeof import("./getDhcpHosts").getDhcpHosts = null as any;
export const getDhcpHostsOutput: typeof import("./getDhcpHosts").getDhcpHostsOutput = null as any;
utilities.lazyLoad(exports, ["getDhcpHosts","getDhcpHostsOutput"], () => require("./getDhcpHosts"));

export { GetDnsAuthNsgsArgs, GetDnsAuthNsgsResult, GetDnsAuthNsgsOutputArgs } from "./getDnsAuthNsgs";
export const getDnsAuthNsgs: typeof import("./getDnsAuthNsgs").getDnsAuthNsgs = null as any;
export const getDnsAuthNsgsOutput: typeof import("./getDnsAuthNsgs").getDnsAuthNsgsOutput = null as any;
utilities.lazyLoad(exports, ["getDnsAuthNsgs","getDnsAuthNsgsOutput"], () => require("./getDnsAuthNsgs"));

export { GetDnsAuthZonesArgs, GetDnsAuthZonesResult, GetDnsAuthZonesOutputArgs } from "./getDnsAuthZones";
export const getDnsAuthZones: typeof import("./getDnsAuthZones").getDnsAuthZones = null as any;
export const getDnsAuthZonesOutput: typeof import("./getDnsAuthZones").getDnsAuthZonesOutput = null as any;
utilities.lazyLoad(exports, ["getDnsAuthZones","getDnsAuthZonesOutput"], () => require("./getDnsAuthZones"));

export { GetDnsForwardNsgsArgs, GetDnsForwardNsgsResult, GetDnsForwardNsgsOutputArgs } from "./getDnsForwardNsgs";
export const getDnsForwardNsgs: typeof import("./getDnsForwardNsgs").getDnsForwardNsgs = null as any;
export const getDnsForwardNsgsOutput: typeof import("./getDnsForwardNsgs").getDnsForwardNsgsOutput = null as any;
utilities.lazyLoad(exports, ["getDnsForwardNsgs","getDnsForwardNsgsOutput"], () => require("./getDnsForwardNsgs"));

export { GetDnsForwardZonesArgs, GetDnsForwardZonesResult, GetDnsForwardZonesOutputArgs } from "./getDnsForwardZones";
export const getDnsForwardZones: typeof import("./getDnsForwardZones").getDnsForwardZones = null as any;
export const getDnsForwardZonesOutput: typeof import("./getDnsForwardZones").getDnsForwardZonesOutput = null as any;
utilities.lazyLoad(exports, ["getDnsForwardZones","getDnsForwardZonesOutput"], () => require("./getDnsForwardZones"));

export { GetDnsHostsArgs, GetDnsHostsResult, GetDnsHostsOutputArgs } from "./getDnsHosts";
export const getDnsHosts: typeof import("./getDnsHosts").getDnsHosts = null as any;
export const getDnsHostsOutput: typeof import("./getDnsHosts").getDnsHostsOutput = null as any;
utilities.lazyLoad(exports, ["getDnsHosts","getDnsHostsOutput"], () => require("./getDnsHosts"));

export { GetDnsRecordsArgs, GetDnsRecordsResult, GetDnsRecordsOutputArgs } from "./getDnsRecords";
export const getDnsRecords: typeof import("./getDnsRecords").getDnsRecords = null as any;
export const getDnsRecordsOutput: typeof import("./getDnsRecords").getDnsRecordsOutput = null as any;
utilities.lazyLoad(exports, ["getDnsRecords","getDnsRecordsOutput"], () => require("./getDnsRecords"));

export { GetDnsViewsArgs, GetDnsViewsResult, GetDnsViewsOutputArgs } from "./getDnsViews";
export const getDnsViews: typeof import("./getDnsViews").getDnsViews = null as any;
export const getDnsViewsOutput: typeof import("./getDnsViews").getDnsViewsOutput = null as any;
utilities.lazyLoad(exports, ["getDnsViews","getDnsViewsOutput"], () => require("./getDnsViews"));

export { GetFixedAddressesArgs, GetFixedAddressesResult, GetFixedAddressesOutputArgs } from "./getFixedAddresses";
export const getFixedAddresses: typeof import("./getFixedAddresses").getFixedAddresses = null as any;
export const getFixedAddressesOutput: typeof import("./getFixedAddresses").getFixedAddressesOutput = null as any;
utilities.lazyLoad(exports, ["getFixedAddresses","getFixedAddressesOutput"], () => require("./getFixedAddresses"));

export { GetIpSpacesArgs, GetIpSpacesResult, GetIpSpacesOutputArgs } from "./getIpSpaces";
export const getIpSpaces: typeof import("./getIpSpaces").getIpSpaces = null as any;
export const getIpSpacesOutput: typeof import("./getIpSpaces").getIpSpacesOutput = null as any;
utilities.lazyLoad(exports, ["getIpSpaces","getIpSpacesOutput"], () => require("./getIpSpaces"));

export { GetIpamNextAvailableSubnetsArgs, GetIpamNextAvailableSubnetsResult, GetIpamNextAvailableSubnetsOutputArgs } from "./getIpamNextAvailableSubnets";
export const getIpamNextAvailableSubnets: typeof import("./getIpamNextAvailableSubnets").getIpamNextAvailableSubnets = null as any;
export const getIpamNextAvailableSubnetsOutput: typeof import("./getIpamNextAvailableSubnets").getIpamNextAvailableSubnetsOutput = null as any;
utilities.lazyLoad(exports, ["getIpamNextAvailableSubnets","getIpamNextAvailableSubnetsOutput"], () => require("./getIpamNextAvailableSubnets"));

export { GetNextAvailableIpArgs, GetNextAvailableIpResult, GetNextAvailableIpOutputArgs } from "./getNextAvailableIp";
export const getNextAvailableIp: typeof import("./getNextAvailableIp").getNextAvailableIp = null as any;
export const getNextAvailableIpOutput: typeof import("./getNextAvailableIp").getNextAvailableIpOutput = null as any;
utilities.lazyLoad(exports, ["getNextAvailableIp","getNextAvailableIpOutput"], () => require("./getNextAvailableIp"));

export { GetOptionCodesArgs, GetOptionCodesResult, GetOptionCodesOutputArgs } from "./getOptionCodes";
export const getOptionCodes: typeof import("./getOptionCodes").getOptionCodes = null as any;
export const getOptionCodesOutput: typeof import("./getOptionCodes").getOptionCodesOutput = null as any;
utilities.lazyLoad(exports, ["getOptionCodes","getOptionCodesOutput"], () => require("./getOptionCodes"));

export { GetRangesArgs, GetRangesResult, GetRangesOutputArgs } from "./getRanges";
export const getRanges: typeof import("./getRanges").getRanges = null as any;
export const getRangesOutput: typeof import("./getRanges").getRangesOutput = null as any;
utilities.lazyLoad(exports, ["getRanges","getRangesOutput"], () => require("./getRanges"));

export { GetSubnetsArgs, GetSubnetsResult, GetSubnetsOutputArgs } from "./getSubnets";
export const getSubnets: typeof import("./getSubnets").getSubnets = null as any;
export const getSubnetsOutput: typeof import("./getSubnets").getSubnetsOutput = null as any;
utilities.lazyLoad(exports, ["getSubnets","getSubnetsOutput"], () => require("./getSubnets"));

export { IpSpaceArgs, IpSpaceState } from "./ipSpace";
export type IpSpace = import("./ipSpace").IpSpace;
export const IpSpace: typeof import("./ipSpace").IpSpace = null as any;
utilities.lazyLoad(exports, ["IpSpace"], () => require("./ipSpace"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RangeArgs, RangeState } from "./range";
export type Range = import("./range").Range;
export const Range: typeof import("./range").Range = null as any;
utilities.lazyLoad(exports, ["Range"], () => require("./range"));

export { SubnetArgs, SubnetState } from "./subnet";
export type Subnet = import("./subnet").Subnet;
export const Subnet: typeof import("./subnet").Subnet = null as any;
utilities.lazyLoad(exports, ["Subnet"], () => require("./subnet"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "b1ddi:index/address:Address":
                return new Address(name, <any>undefined, { urn })
            case "b1ddi:index/addressBlock:AddressBlock":
                return new AddressBlock(name, <any>undefined, { urn })
            case "b1ddi:index/dnsAuthNsg:DnsAuthNsg":
                return new DnsAuthNsg(name, <any>undefined, { urn })
            case "b1ddi:index/dnsAuthZone:DnsAuthZone":
                return new DnsAuthZone(name, <any>undefined, { urn })
            case "b1ddi:index/dnsForwardNsg:DnsForwardNsg":
                return new DnsForwardNsg(name, <any>undefined, { urn })
            case "b1ddi:index/dnsForwardZone:DnsForwardZone":
                return new DnsForwardZone(name, <any>undefined, { urn })
            case "b1ddi:index/dnsRecord:DnsRecord":
                return new DnsRecord(name, <any>undefined, { urn })
            case "b1ddi:index/dnsView:DnsView":
                return new DnsView(name, <any>undefined, { urn })
            case "b1ddi:index/fixedAddress:FixedAddress":
                return new FixedAddress(name, <any>undefined, { urn })
            case "b1ddi:index/ipSpace:IpSpace":
                return new IpSpace(name, <any>undefined, { urn })
            case "b1ddi:index/range:Range":
                return new Range(name, <any>undefined, { urn })
            case "b1ddi:index/subnet:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("b1ddi", "index/address", _module)
pulumi.runtime.registerResourceModule("b1ddi", "index/addressBlock", _module)
pulumi.runtime.registerResourceModule("b1ddi", "index/dnsAuthNsg", _module)
pulumi.runtime.registerResourceModule("b1ddi", "index/dnsAuthZone", _module)
pulumi.runtime.registerResourceModule("b1ddi", "index/dnsForwardNsg", _module)
pulumi.runtime.registerResourceModule("b1ddi", "index/dnsForwardZone", _module)
pulumi.runtime.registerResourceModule("b1ddi", "index/dnsRecord", _module)
pulumi.runtime.registerResourceModule("b1ddi", "index/dnsView", _module)
pulumi.runtime.registerResourceModule("b1ddi", "index/fixedAddress", _module)
pulumi.runtime.registerResourceModule("b1ddi", "index/ipSpace", _module)
pulumi.runtime.registerResourceModule("b1ddi", "index/range", _module)
pulumi.runtime.registerResourceModule("b1ddi", "index/subnet", _module)
pulumi.runtime.registerResourcePackage("b1ddi", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:b1ddi") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
