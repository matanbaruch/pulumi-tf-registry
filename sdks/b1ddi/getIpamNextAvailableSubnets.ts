// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIpamNextAvailableSubnets(args: GetIpamNextAvailableSubnetsArgs, opts?: pulumi.InvokeOptions): Promise<GetIpamNextAvailableSubnetsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("b1ddi:index/getIpamNextAvailableSubnets:getIpamNextAvailableSubnets", {
        "cidr": args.cidr,
        "comment": args.comment,
        "dhcpHost": args.dhcpHost,
        "id": args.id,
        "name": args.name,
        "subnetCount": args.subnetCount,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIpamNextAvailableSubnets.
 */
export interface GetIpamNextAvailableSubnetsArgs {
    cidr: number;
    comment?: string;
    dhcpHost?: string;
    id: string;
    name?: string;
    subnetCount?: number;
}

/**
 * A collection of values returned by getIpamNextAvailableSubnets.
 */
export interface GetIpamNextAvailableSubnetsResult {
    readonly cidr: number;
    readonly comment?: string;
    readonly dhcpHost?: string;
    readonly id: string;
    readonly name?: string;
    readonly results: outputs.GetIpamNextAvailableSubnetsResult[];
    readonly subnetCount?: number;
}
export function getIpamNextAvailableSubnetsOutput(args: GetIpamNextAvailableSubnetsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIpamNextAvailableSubnetsResult> {
    return pulumi.output(args).apply((a: any) => getIpamNextAvailableSubnets(a, opts))
}

/**
 * A collection of arguments for invoking getIpamNextAvailableSubnets.
 */
export interface GetIpamNextAvailableSubnetsOutputArgs {
    cidr: pulumi.Input<number>;
    comment?: pulumi.Input<string>;
    dhcpHost?: pulumi.Input<string>;
    id: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    subnetCount?: pulumi.Input<number>;
}
