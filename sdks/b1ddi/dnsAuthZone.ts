// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DnsAuthZone extends pulumi.CustomResource {
    /**
     * Get an existing DnsAuthZone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsAuthZoneState, opts?: pulumi.CustomResourceOptions): DnsAuthZone {
        return new DnsAuthZone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'b1ddi:index/dnsAuthZone:DnsAuthZone';

    /**
     * Returns true if the given object is an instance of DnsAuthZone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsAuthZone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsAuthZone.__pulumiType;
    }

    /**
     * Optional. Comment for zone configuration.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * Time when the object has been created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Optional. _true_ to disable object. A disabled object is effectively non-existent when generating configuration.
     */
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * Optional. DNS primaries external to BloxOne DDI. Order is not significant.
     */
    public readonly externalPrimaries!: pulumi.Output<outputs.DnsAuthZoneExternalPrimary[] | undefined>;
    /**
     * DNS secondaries external to BloxOne DDI. Order is not significant.
     */
    public readonly externalSecondaries!: pulumi.Output<outputs.DnsAuthZoneExternalSecondary[] | undefined>;
    /**
     * Zone FQDN. The FQDN supplied at creation will be converted to canonical form. Read-only after creation.
     */
    public readonly fqdn!: pulumi.Output<string>;
    /**
     * _gss_tsig_enabled_ enables/disables GSS-TSIG signed dynamic updates. Defaults to _false_.
     */
    public readonly gssTsigEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The list of the inheritance assigned hosts of the object.
     */
    public /*out*/ readonly inheritanceAssignedHosts!: pulumi.Output<outputs.DnsAuthZoneInheritanceAssignedHost[]>;
    /**
     * Optional. Inheritance configuration.
     */
    public readonly inheritanceSources!: pulumi.Output<outputs.DnsAuthZoneInheritanceSources | undefined>;
    /**
     * On-create-only. SOA serial is allowed to be set when the authoritative zone is created.
     */
    public readonly initialSoaSerial!: pulumi.Output<number>;
    /**
     * Optional. BloxOne DDI hosts acting as internal secondaries. Order is not significant.
     */
    public readonly internalSecondaries!: pulumi.Output<outputs.DnsAuthZoneInternalSecondary[] | undefined>;
    /**
     * Reverse zone network address in the following format: "ip-address/cidr". Defaults to empty.
     */
    public /*out*/ readonly mappedSubnet!: pulumi.Output<string>;
    /**
     * Zone mapping type. Allowed values: * _forward_, * _ipv4_reverse_. * _ipv6_reverse_. Defaults to forward.
     */
    public /*out*/ readonly mapping!: pulumi.Output<string>;
    /**
     * Also notify all external secondary DNS servers if enabled. Defaults to _false_.
     */
    public readonly notify!: pulumi.Output<boolean | undefined>;
    /**
     * The resource identifier.
     */
    public readonly nsgs!: pulumi.Output<string[] | undefined>;
    /**
     * The resource identifier.
     */
    public readonly parent!: pulumi.Output<string | undefined>;
    /**
     * Primary type for an authoritative zone. Read only after creation. Allowed values: * _external_: zone data owned by an
     * external nameserver, * _cloud_: zone data is owned by a BloxOne DDI host.
     */
    public readonly primaryType!: pulumi.Output<string>;
    /**
     * Zone FQDN in punycode.
     */
    public /*out*/ readonly protocolFqdn!: pulumi.Output<string>;
    /**
     * Optional. Clients must match this ACL to make authoritative queries. Also used for recursive queries if that ACL is
     * unset. Defaults to empty.
     */
    public readonly queryAcls!: pulumi.Output<outputs.DnsAuthZoneQueryAcl[] | undefined>;
    /**
     * Tagging specifics.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Optional. Clients must match this ACL to receive zone transfers.
     */
    public readonly transferAcls!: pulumi.Output<outputs.DnsAuthZoneTransferAcl[] | undefined>;
    /**
     * Optional. Specifies which hosts are allowed to submit Dynamic DNS updates for authoritative zones of _primary_type_
     * _cloud_. Defaults to empty.
     */
    public readonly updateAcls!: pulumi.Output<outputs.DnsAuthZoneUpdateAcl[] | undefined>;
    /**
     * Time when the object has been updated. Equals to _created_at_ if not updated after creation.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * Optional. Use default forwarders to resolve queries for subzones. Defaults to _true_.
     */
    public readonly useForwardersForSubzones!: pulumi.Output<boolean | undefined>;
    /**
     * The resource identifier.
     */
    public readonly view!: pulumi.Output<string | undefined>;
    /**
     * Optional. ZoneAuthority.
     */
    public readonly zoneAuthority!: pulumi.Output<outputs.DnsAuthZoneZoneAuthority | undefined>;

    /**
     * Create a DnsAuthZone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsAuthZoneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsAuthZoneArgs | DnsAuthZoneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsAuthZoneState | undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["externalPrimaries"] = state ? state.externalPrimaries : undefined;
            resourceInputs["externalSecondaries"] = state ? state.externalSecondaries : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["gssTsigEnabled"] = state ? state.gssTsigEnabled : undefined;
            resourceInputs["inheritanceAssignedHosts"] = state ? state.inheritanceAssignedHosts : undefined;
            resourceInputs["inheritanceSources"] = state ? state.inheritanceSources : undefined;
            resourceInputs["initialSoaSerial"] = state ? state.initialSoaSerial : undefined;
            resourceInputs["internalSecondaries"] = state ? state.internalSecondaries : undefined;
            resourceInputs["mappedSubnet"] = state ? state.mappedSubnet : undefined;
            resourceInputs["mapping"] = state ? state.mapping : undefined;
            resourceInputs["notify"] = state ? state.notify : undefined;
            resourceInputs["nsgs"] = state ? state.nsgs : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["primaryType"] = state ? state.primaryType : undefined;
            resourceInputs["protocolFqdn"] = state ? state.protocolFqdn : undefined;
            resourceInputs["queryAcls"] = state ? state.queryAcls : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["transferAcls"] = state ? state.transferAcls : undefined;
            resourceInputs["updateAcls"] = state ? state.updateAcls : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["useForwardersForSubzones"] = state ? state.useForwardersForSubzones : undefined;
            resourceInputs["view"] = state ? state.view : undefined;
            resourceInputs["zoneAuthority"] = state ? state.zoneAuthority : undefined;
        } else {
            const args = argsOrState as DnsAuthZoneArgs | undefined;
            if ((!args || args.fqdn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fqdn'");
            }
            if ((!args || args.primaryType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'primaryType'");
            }
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["externalPrimaries"] = args ? args.externalPrimaries : undefined;
            resourceInputs["externalSecondaries"] = args ? args.externalSecondaries : undefined;
            resourceInputs["fqdn"] = args ? args.fqdn : undefined;
            resourceInputs["gssTsigEnabled"] = args ? args.gssTsigEnabled : undefined;
            resourceInputs["inheritanceSources"] = args ? args.inheritanceSources : undefined;
            resourceInputs["initialSoaSerial"] = args ? args.initialSoaSerial : undefined;
            resourceInputs["internalSecondaries"] = args ? args.internalSecondaries : undefined;
            resourceInputs["notify"] = args ? args.notify : undefined;
            resourceInputs["nsgs"] = args ? args.nsgs : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["primaryType"] = args ? args.primaryType : undefined;
            resourceInputs["queryAcls"] = args ? args.queryAcls : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["transferAcls"] = args ? args.transferAcls : undefined;
            resourceInputs["updateAcls"] = args ? args.updateAcls : undefined;
            resourceInputs["useForwardersForSubzones"] = args ? args.useForwardersForSubzones : undefined;
            resourceInputs["view"] = args ? args.view : undefined;
            resourceInputs["zoneAuthority"] = args ? args.zoneAuthority : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["inheritanceAssignedHosts"] = undefined /*out*/;
            resourceInputs["mappedSubnet"] = undefined /*out*/;
            resourceInputs["mapping"] = undefined /*out*/;
            resourceInputs["protocolFqdn"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsAuthZone.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DnsAuthZone resources.
 */
export interface DnsAuthZoneState {
    /**
     * Optional. Comment for zone configuration.
     */
    comment?: pulumi.Input<string>;
    /**
     * Time when the object has been created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Optional. _true_ to disable object. A disabled object is effectively non-existent when generating configuration.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Optional. DNS primaries external to BloxOne DDI. Order is not significant.
     */
    externalPrimaries?: pulumi.Input<pulumi.Input<inputs.DnsAuthZoneExternalPrimary>[]>;
    /**
     * DNS secondaries external to BloxOne DDI. Order is not significant.
     */
    externalSecondaries?: pulumi.Input<pulumi.Input<inputs.DnsAuthZoneExternalSecondary>[]>;
    /**
     * Zone FQDN. The FQDN supplied at creation will be converted to canonical form. Read-only after creation.
     */
    fqdn?: pulumi.Input<string>;
    /**
     * _gss_tsig_enabled_ enables/disables GSS-TSIG signed dynamic updates. Defaults to _false_.
     */
    gssTsigEnabled?: pulumi.Input<boolean>;
    /**
     * The list of the inheritance assigned hosts of the object.
     */
    inheritanceAssignedHosts?: pulumi.Input<pulumi.Input<inputs.DnsAuthZoneInheritanceAssignedHost>[]>;
    /**
     * Optional. Inheritance configuration.
     */
    inheritanceSources?: pulumi.Input<inputs.DnsAuthZoneInheritanceSources>;
    /**
     * On-create-only. SOA serial is allowed to be set when the authoritative zone is created.
     */
    initialSoaSerial?: pulumi.Input<number>;
    /**
     * Optional. BloxOne DDI hosts acting as internal secondaries. Order is not significant.
     */
    internalSecondaries?: pulumi.Input<pulumi.Input<inputs.DnsAuthZoneInternalSecondary>[]>;
    /**
     * Reverse zone network address in the following format: "ip-address/cidr". Defaults to empty.
     */
    mappedSubnet?: pulumi.Input<string>;
    /**
     * Zone mapping type. Allowed values: * _forward_, * _ipv4_reverse_. * _ipv6_reverse_. Defaults to forward.
     */
    mapping?: pulumi.Input<string>;
    /**
     * Also notify all external secondary DNS servers if enabled. Defaults to _false_.
     */
    notify?: pulumi.Input<boolean>;
    /**
     * The resource identifier.
     */
    nsgs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The resource identifier.
     */
    parent?: pulumi.Input<string>;
    /**
     * Primary type for an authoritative zone. Read only after creation. Allowed values: * _external_: zone data owned by an
     * external nameserver, * _cloud_: zone data is owned by a BloxOne DDI host.
     */
    primaryType?: pulumi.Input<string>;
    /**
     * Zone FQDN in punycode.
     */
    protocolFqdn?: pulumi.Input<string>;
    /**
     * Optional. Clients must match this ACL to make authoritative queries. Also used for recursive queries if that ACL is
     * unset. Defaults to empty.
     */
    queryAcls?: pulumi.Input<pulumi.Input<inputs.DnsAuthZoneQueryAcl>[]>;
    /**
     * Tagging specifics.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Optional. Clients must match this ACL to receive zone transfers.
     */
    transferAcls?: pulumi.Input<pulumi.Input<inputs.DnsAuthZoneTransferAcl>[]>;
    /**
     * Optional. Specifies which hosts are allowed to submit Dynamic DNS updates for authoritative zones of _primary_type_
     * _cloud_. Defaults to empty.
     */
    updateAcls?: pulumi.Input<pulumi.Input<inputs.DnsAuthZoneUpdateAcl>[]>;
    /**
     * Time when the object has been updated. Equals to _created_at_ if not updated after creation.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * Optional. Use default forwarders to resolve queries for subzones. Defaults to _true_.
     */
    useForwardersForSubzones?: pulumi.Input<boolean>;
    /**
     * The resource identifier.
     */
    view?: pulumi.Input<string>;
    /**
     * Optional. ZoneAuthority.
     */
    zoneAuthority?: pulumi.Input<inputs.DnsAuthZoneZoneAuthority>;
}

/**
 * The set of arguments for constructing a DnsAuthZone resource.
 */
export interface DnsAuthZoneArgs {
    /**
     * Optional. Comment for zone configuration.
     */
    comment?: pulumi.Input<string>;
    /**
     * Optional. _true_ to disable object. A disabled object is effectively non-existent when generating configuration.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * Optional. DNS primaries external to BloxOne DDI. Order is not significant.
     */
    externalPrimaries?: pulumi.Input<pulumi.Input<inputs.DnsAuthZoneExternalPrimary>[]>;
    /**
     * DNS secondaries external to BloxOne DDI. Order is not significant.
     */
    externalSecondaries?: pulumi.Input<pulumi.Input<inputs.DnsAuthZoneExternalSecondary>[]>;
    /**
     * Zone FQDN. The FQDN supplied at creation will be converted to canonical form. Read-only after creation.
     */
    fqdn: pulumi.Input<string>;
    /**
     * _gss_tsig_enabled_ enables/disables GSS-TSIG signed dynamic updates. Defaults to _false_.
     */
    gssTsigEnabled?: pulumi.Input<boolean>;
    /**
     * Optional. Inheritance configuration.
     */
    inheritanceSources?: pulumi.Input<inputs.DnsAuthZoneInheritanceSources>;
    /**
     * On-create-only. SOA serial is allowed to be set when the authoritative zone is created.
     */
    initialSoaSerial?: pulumi.Input<number>;
    /**
     * Optional. BloxOne DDI hosts acting as internal secondaries. Order is not significant.
     */
    internalSecondaries?: pulumi.Input<pulumi.Input<inputs.DnsAuthZoneInternalSecondary>[]>;
    /**
     * Also notify all external secondary DNS servers if enabled. Defaults to _false_.
     */
    notify?: pulumi.Input<boolean>;
    /**
     * The resource identifier.
     */
    nsgs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The resource identifier.
     */
    parent?: pulumi.Input<string>;
    /**
     * Primary type for an authoritative zone. Read only after creation. Allowed values: * _external_: zone data owned by an
     * external nameserver, * _cloud_: zone data is owned by a BloxOne DDI host.
     */
    primaryType: pulumi.Input<string>;
    /**
     * Optional. Clients must match this ACL to make authoritative queries. Also used for recursive queries if that ACL is
     * unset. Defaults to empty.
     */
    queryAcls?: pulumi.Input<pulumi.Input<inputs.DnsAuthZoneQueryAcl>[]>;
    /**
     * Tagging specifics.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Optional. Clients must match this ACL to receive zone transfers.
     */
    transferAcls?: pulumi.Input<pulumi.Input<inputs.DnsAuthZoneTransferAcl>[]>;
    /**
     * Optional. Specifies which hosts are allowed to submit Dynamic DNS updates for authoritative zones of _primary_type_
     * _cloud_. Defaults to empty.
     */
    updateAcls?: pulumi.Input<pulumi.Input<inputs.DnsAuthZoneUpdateAcl>[]>;
    /**
     * Optional. Use default forwarders to resolve queries for subzones. Defaults to _true_.
     */
    useForwardersForSubzones?: pulumi.Input<boolean>;
    /**
     * The resource identifier.
     */
    view?: pulumi.Input<string>;
    /**
     * Optional. ZoneAuthority.
     */
    zoneAuthority?: pulumi.Input<inputs.DnsAuthZoneZoneAuthority>;
}
