// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VaultAccessPolicy extends pulumi.CustomResource {
    /**
     * Get an existing VaultAccessPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VaultAccessPolicyState, opts?: pulumi.CustomResourceOptions): VaultAccessPolicy {
        return new VaultAccessPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'multy:index/vaultAccessPolicy:VaultAccessPolicy';

    /**
     * Returns true if the given object is an instance of VaultAccessPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VaultAccessPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VaultAccessPolicy.__pulumiType;
    }

    /**
     * Access control, available values are [read write owner]
     */
    public readonly access!: pulumi.Output<string>;
    /**
     * AWS-specific ids of the underlying generated resources
     */
    public /*out*/ readonly aws!: pulumi.Output<outputs.VaultAccessPolicyAws>;
    /**
     * Azure-specific ids of the underlying generated resources
     */
    public /*out*/ readonly azure!: pulumi.Output<outputs.VaultAccessPolicyAzure>;
    /**
     * GCP-specific ids of the underlying generated resources
     */
    public /*out*/ readonly gcp!: pulumi.Output<outputs.VaultAccessPolicyGcp>;
    /**
     * Identity of the resource that is being granted access to the `vault`
     */
    public readonly identity!: pulumi.Output<string>;
    /**
     * Statuses of underlying created resources
     */
    public /*out*/ readonly resourceStatus!: pulumi.Output<{[key: string]: string}>;
    /**
     * Id of the associated vault
     */
    public readonly vaultId!: pulumi.Output<string>;

    /**
     * Create a VaultAccessPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VaultAccessPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VaultAccessPolicyArgs | VaultAccessPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VaultAccessPolicyState | undefined;
            resourceInputs["access"] = state ? state.access : undefined;
            resourceInputs["aws"] = state ? state.aws : undefined;
            resourceInputs["azure"] = state ? state.azure : undefined;
            resourceInputs["gcp"] = state ? state.gcp : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["resourceStatus"] = state ? state.resourceStatus : undefined;
            resourceInputs["vaultId"] = state ? state.vaultId : undefined;
        } else {
            const args = argsOrState as VaultAccessPolicyArgs | undefined;
            if ((!args || args.access === undefined) && !opts.urn) {
                throw new Error("Missing required property 'access'");
            }
            if ((!args || args.identity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identity'");
            }
            if ((!args || args.vaultId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vaultId'");
            }
            resourceInputs["access"] = args ? args.access : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["vaultId"] = args ? args.vaultId : undefined;
            resourceInputs["aws"] = undefined /*out*/;
            resourceInputs["azure"] = undefined /*out*/;
            resourceInputs["gcp"] = undefined /*out*/;
            resourceInputs["resourceStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VaultAccessPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VaultAccessPolicy resources.
 */
export interface VaultAccessPolicyState {
    /**
     * Access control, available values are [read write owner]
     */
    access?: pulumi.Input<string>;
    /**
     * AWS-specific ids of the underlying generated resources
     */
    aws?: pulumi.Input<inputs.VaultAccessPolicyAws>;
    /**
     * Azure-specific ids of the underlying generated resources
     */
    azure?: pulumi.Input<inputs.VaultAccessPolicyAzure>;
    /**
     * GCP-specific ids of the underlying generated resources
     */
    gcp?: pulumi.Input<inputs.VaultAccessPolicyGcp>;
    /**
     * Identity of the resource that is being granted access to the `vault`
     */
    identity?: pulumi.Input<string>;
    /**
     * Statuses of underlying created resources
     */
    resourceStatus?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Id of the associated vault
     */
    vaultId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VaultAccessPolicy resource.
 */
export interface VaultAccessPolicyArgs {
    /**
     * Access control, available values are [read write owner]
     */
    access: pulumi.Input<string>;
    /**
     * Identity of the resource that is being granted access to the `vault`
     */
    identity: pulumi.Input<string>;
    /**
     * Id of the associated vault
     */
    vaultId: pulumi.Input<string>;
}
