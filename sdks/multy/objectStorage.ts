// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ObjectStorage extends pulumi.CustomResource {
    /**
     * Get an existing ObjectStorage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectStorageState, opts?: pulumi.CustomResourceOptions): ObjectStorage {
        return new ObjectStorage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'multy:index/objectStorage:ObjectStorage';

    /**
     * Returns true if the given object is an instance of ObjectStorage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectStorage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectStorage.__pulumiType;
    }

    /**
     * AWS-specific ids of the underlying generated resources
     */
    public /*out*/ readonly aws!: pulumi.Output<outputs.ObjectStorageAws>;
    /**
     * Azure-specific ids of the underlying generated resources
     */
    public /*out*/ readonly azure!: pulumi.Output<outputs.ObjectStorageAzure>;
    /**
     * Cloud provider to deploy resource into. Accepted values are `aws`, `azure` or `gcp`
     */
    public readonly cloud!: pulumi.Output<string>;
    /**
     * GCP-specific ids of the underlying generated resources
     */
    public /*out*/ readonly gcp!: pulumi.Output<outputs.ObjectStorageGcp>;
    /**
     * GCP-specific attributes that will be set if this resource is deployed in GCP
     */
    public readonly gcpOverrides!: pulumi.Output<outputs.ObjectStorageGcpOverrides>;
    /**
     * Location to deploy resource into. Read more about regions in [documentation](https://docs.multy.dev/regions)
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Name of Object Storage
     */
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly resourceGroupId!: pulumi.Output<string>;
    /**
     * Statuses of underlying created resources
     */
    public /*out*/ readonly resourceStatus!: pulumi.Output<{[key: string]: string}>;
    /**
     * If true, versioning will be enabled to `object_storage_object`
     */
    public readonly versioning!: pulumi.Output<boolean>;

    /**
     * Create a ObjectStorage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObjectStorageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectStorageArgs | ObjectStorageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectStorageState | undefined;
            resourceInputs["aws"] = state ? state.aws : undefined;
            resourceInputs["azure"] = state ? state.azure : undefined;
            resourceInputs["cloud"] = state ? state.cloud : undefined;
            resourceInputs["gcp"] = state ? state.gcp : undefined;
            resourceInputs["gcpOverrides"] = state ? state.gcpOverrides : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["resourceStatus"] = state ? state.resourceStatus : undefined;
            resourceInputs["versioning"] = state ? state.versioning : undefined;
        } else {
            const args = argsOrState as ObjectStorageArgs | undefined;
            if ((!args || args.cloud === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloud'");
            }
            if ((!args || args.location === undefined) && !opts.urn) {
                throw new Error("Missing required property 'location'");
            }
            resourceInputs["cloud"] = args ? args.cloud : undefined;
            resourceInputs["gcpOverrides"] = args ? args.gcpOverrides : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["versioning"] = args ? args.versioning : undefined;
            resourceInputs["aws"] = undefined /*out*/;
            resourceInputs["azure"] = undefined /*out*/;
            resourceInputs["gcp"] = undefined /*out*/;
            resourceInputs["resourceGroupId"] = undefined /*out*/;
            resourceInputs["resourceStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectStorage.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectStorage resources.
 */
export interface ObjectStorageState {
    /**
     * AWS-specific ids of the underlying generated resources
     */
    aws?: pulumi.Input<inputs.ObjectStorageAws>;
    /**
     * Azure-specific ids of the underlying generated resources
     */
    azure?: pulumi.Input<inputs.ObjectStorageAzure>;
    /**
     * Cloud provider to deploy resource into. Accepted values are `aws`, `azure` or `gcp`
     */
    cloud?: pulumi.Input<string>;
    /**
     * GCP-specific ids of the underlying generated resources
     */
    gcp?: pulumi.Input<inputs.ObjectStorageGcp>;
    /**
     * GCP-specific attributes that will be set if this resource is deployed in GCP
     */
    gcpOverrides?: pulumi.Input<inputs.ObjectStorageGcpOverrides>;
    /**
     * Location to deploy resource into. Read more about regions in [documentation](https://docs.multy.dev/regions)
     */
    location?: pulumi.Input<string>;
    /**
     * Name of Object Storage
     */
    name?: pulumi.Input<string>;
    resourceGroupId?: pulumi.Input<string>;
    /**
     * Statuses of underlying created resources
     */
    resourceStatus?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If true, versioning will be enabled to `object_storage_object`
     */
    versioning?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ObjectStorage resource.
 */
export interface ObjectStorageArgs {
    /**
     * Cloud provider to deploy resource into. Accepted values are `aws`, `azure` or `gcp`
     */
    cloud: pulumi.Input<string>;
    /**
     * GCP-specific attributes that will be set if this resource is deployed in GCP
     */
    gcpOverrides?: pulumi.Input<inputs.ObjectStorageGcpOverrides>;
    /**
     * Location to deploy resource into. Read more about regions in [documentation](https://docs.multy.dev/regions)
     */
    location: pulumi.Input<string>;
    /**
     * Name of Object Storage
     */
    name?: pulumi.Input<string>;
    /**
     * If true, versioning will be enabled to `object_storage_object`
     */
    versioning?: pulumi.Input<boolean>;
}
