// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KubernetesNodePool extends pulumi.CustomResource {
    /**
     * Get an existing KubernetesNodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubernetesNodePoolState, opts?: pulumi.CustomResourceOptions): KubernetesNodePool {
        return new KubernetesNodePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'multy:index/kubernetesNodePool:KubernetesNodePool';

    /**
     * Returns true if the given object is an instance of KubernetesNodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubernetesNodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubernetesNodePool.__pulumiType;
    }

    /**
     * Zones to place nodes in. If not set, they will be spread across multiple zones selected by the cloud provider.
     */
    public readonly availabilityZones!: pulumi.Output<number[] | undefined>;
    /**
     * AWS-specific ids of the underlying generated resources
     */
    public /*out*/ readonly aws!: pulumi.Output<outputs.KubernetesNodePoolAws>;
    /**
     * AWS-specific attributes that will be set if this resource is deployed in AWS
     */
    public readonly awsOverrides!: pulumi.Output<outputs.KubernetesNodePoolAwsOverrides | undefined>;
    /**
     * Azure-specific ids of the underlying generated resources
     */
    public /*out*/ readonly azure!: pulumi.Output<outputs.KubernetesNodePoolAzure>;
    /**
     * Azure-specific attributes that will be set if this resource is deployed in Azure
     */
    public readonly azureOverrides!: pulumi.Output<outputs.KubernetesNodePoolAzureOverrides | undefined>;
    /**
     * Id of the multy kubernetes cluster
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * Disk size used for each node.
     */
    public readonly diskSizeGb!: pulumi.Output<number>;
    /**
     * GCP-specific ids of the underlying generated resources
     */
    public /*out*/ readonly gcp!: pulumi.Output<outputs.KubernetesNodePoolGcp>;
    /**
     * Labels to be applied to each node.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * Maximum number of nodes.
     */
    public readonly maxNodeCount!: pulumi.Output<number>;
    /**
     * Minimum number of nodes.
     */
    public readonly minNodeCount!: pulumi.Output<number>;
    /**
     * Name of kubernetes node pool
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Statuses of underlying created resources
     */
    public /*out*/ readonly resourceStatus!: pulumi.Output<{[key: string]: string}>;
    /**
     * Number of initial nodes. Defaults to the minimum number of nodes.
     */
    public readonly startingNodeCount!: pulumi.Output<number>;
    /**
     * Subnet to place the node and pods in. Must have access to the Internet to connect with the control plane.
     */
    public readonly subnetId!: pulumi.Output<string>;
    /**
     * Size of Virtual Machine used for the nodes. Accepted values are `general_micro`, `general_medium`, `general_large`,
     * `general_nano`, `general_small`, `general_xlarge`, `general_2xlarge`, `compute_large`, `compute_xlarge`,
     * `compute_2xlarge`, `compute_4xlarge`, `compute_8xlarge`, `memory_large`, `memory_xlarge`, `memory_2xlarge`,
     * `memory_4xlarge`, `memory_8xlarge`, `memory_12xlarge` or `memory_16xlarge`
     */
    public readonly vmSize!: pulumi.Output<string>;

    /**
     * Create a KubernetesNodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubernetesNodePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KubernetesNodePoolArgs | KubernetesNodePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KubernetesNodePoolState | undefined;
            resourceInputs["availabilityZones"] = state ? state.availabilityZones : undefined;
            resourceInputs["aws"] = state ? state.aws : undefined;
            resourceInputs["awsOverrides"] = state ? state.awsOverrides : undefined;
            resourceInputs["azure"] = state ? state.azure : undefined;
            resourceInputs["azureOverrides"] = state ? state.azureOverrides : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["diskSizeGb"] = state ? state.diskSizeGb : undefined;
            resourceInputs["gcp"] = state ? state.gcp : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["maxNodeCount"] = state ? state.maxNodeCount : undefined;
            resourceInputs["minNodeCount"] = state ? state.minNodeCount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceStatus"] = state ? state.resourceStatus : undefined;
            resourceInputs["startingNodeCount"] = state ? state.startingNodeCount : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["vmSize"] = state ? state.vmSize : undefined;
        } else {
            const args = argsOrState as KubernetesNodePoolArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.diskSizeGb === undefined) && !opts.urn) {
                throw new Error("Missing required property 'diskSizeGb'");
            }
            if ((!args || args.maxNodeCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxNodeCount'");
            }
            if ((!args || args.minNodeCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'minNodeCount'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.vmSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmSize'");
            }
            resourceInputs["availabilityZones"] = args ? args.availabilityZones : undefined;
            resourceInputs["awsOverrides"] = args ? args.awsOverrides : undefined;
            resourceInputs["azureOverrides"] = args ? args.azureOverrides : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["diskSizeGb"] = args ? args.diskSizeGb : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["maxNodeCount"] = args ? args.maxNodeCount : undefined;
            resourceInputs["minNodeCount"] = args ? args.minNodeCount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["startingNodeCount"] = args ? args.startingNodeCount : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["vmSize"] = args ? args.vmSize : undefined;
            resourceInputs["aws"] = undefined /*out*/;
            resourceInputs["azure"] = undefined /*out*/;
            resourceInputs["gcp"] = undefined /*out*/;
            resourceInputs["resourceStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KubernetesNodePool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KubernetesNodePool resources.
 */
export interface KubernetesNodePoolState {
    /**
     * Zones to place nodes in. If not set, they will be spread across multiple zones selected by the cloud provider.
     */
    availabilityZones?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * AWS-specific ids of the underlying generated resources
     */
    aws?: pulumi.Input<inputs.KubernetesNodePoolAws>;
    /**
     * AWS-specific attributes that will be set if this resource is deployed in AWS
     */
    awsOverrides?: pulumi.Input<inputs.KubernetesNodePoolAwsOverrides>;
    /**
     * Azure-specific ids of the underlying generated resources
     */
    azure?: pulumi.Input<inputs.KubernetesNodePoolAzure>;
    /**
     * Azure-specific attributes that will be set if this resource is deployed in Azure
     */
    azureOverrides?: pulumi.Input<inputs.KubernetesNodePoolAzureOverrides>;
    /**
     * Id of the multy kubernetes cluster
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Disk size used for each node.
     */
    diskSizeGb?: pulumi.Input<number>;
    /**
     * GCP-specific ids of the underlying generated resources
     */
    gcp?: pulumi.Input<inputs.KubernetesNodePoolGcp>;
    /**
     * Labels to be applied to each node.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Maximum number of nodes.
     */
    maxNodeCount?: pulumi.Input<number>;
    /**
     * Minimum number of nodes.
     */
    minNodeCount?: pulumi.Input<number>;
    /**
     * Name of kubernetes node pool
     */
    name?: pulumi.Input<string>;
    /**
     * Statuses of underlying created resources
     */
    resourceStatus?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Number of initial nodes. Defaults to the minimum number of nodes.
     */
    startingNodeCount?: pulumi.Input<number>;
    /**
     * Subnet to place the node and pods in. Must have access to the Internet to connect with the control plane.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Size of Virtual Machine used for the nodes. Accepted values are `general_micro`, `general_medium`, `general_large`,
     * `general_nano`, `general_small`, `general_xlarge`, `general_2xlarge`, `compute_large`, `compute_xlarge`,
     * `compute_2xlarge`, `compute_4xlarge`, `compute_8xlarge`, `memory_large`, `memory_xlarge`, `memory_2xlarge`,
     * `memory_4xlarge`, `memory_8xlarge`, `memory_12xlarge` or `memory_16xlarge`
     */
    vmSize?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KubernetesNodePool resource.
 */
export interface KubernetesNodePoolArgs {
    /**
     * Zones to place nodes in. If not set, they will be spread across multiple zones selected by the cloud provider.
     */
    availabilityZones?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * AWS-specific attributes that will be set if this resource is deployed in AWS
     */
    awsOverrides?: pulumi.Input<inputs.KubernetesNodePoolAwsOverrides>;
    /**
     * Azure-specific attributes that will be set if this resource is deployed in Azure
     */
    azureOverrides?: pulumi.Input<inputs.KubernetesNodePoolAzureOverrides>;
    /**
     * Id of the multy kubernetes cluster
     */
    clusterId: pulumi.Input<string>;
    /**
     * Disk size used for each node.
     */
    diskSizeGb: pulumi.Input<number>;
    /**
     * Labels to be applied to each node.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Maximum number of nodes.
     */
    maxNodeCount: pulumi.Input<number>;
    /**
     * Minimum number of nodes.
     */
    minNodeCount: pulumi.Input<number>;
    /**
     * Name of kubernetes node pool
     */
    name?: pulumi.Input<string>;
    /**
     * Number of initial nodes. Defaults to the minimum number of nodes.
     */
    startingNodeCount?: pulumi.Input<number>;
    /**
     * Subnet to place the node and pods in. Must have access to the Internet to connect with the control plane.
     */
    subnetId: pulumi.Input<string>;
    /**
     * Size of Virtual Machine used for the nodes. Accepted values are `general_micro`, `general_medium`, `general_large`,
     * `general_nano`, `general_small`, `general_xlarge`, `general_2xlarge`, `compute_large`, `compute_xlarge`,
     * `compute_2xlarge`, `compute_4xlarge`, `compute_8xlarge`, `memory_large`, `memory_xlarge`, `memory_2xlarge`,
     * `memory_4xlarge`, `memory_8xlarge`, `memory_12xlarge` or `memory_16xlarge`
     */
    vmSize: pulumi.Input<string>;
}
