// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DomainRecord extends pulumi.CustomResource {
    /**
     * Get an existing DomainRecord resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomainRecordState, opts?: pulumi.CustomResourceOptions): DomainRecord {
        return new DomainRecord(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'serverspace:index/domainRecord:DomainRecord';

    /**
     * Returns true if the given object is an instance of DomainRecord.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DomainRecord {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DomainRecord.__pulumiType;
    }

    public readonly canonicalName!: pulumi.Output<string | undefined>;
    public readonly domain!: pulumi.Output<string>;
    public readonly ip!: pulumi.Output<string | undefined>;
    public readonly mailHost!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nameServerHost!: pulumi.Output<string | undefined>;
    public readonly port!: pulumi.Output<number | undefined>;
    public readonly priority!: pulumi.Output<number | undefined>;
    public readonly protocol!: pulumi.Output<string | undefined>;
    public readonly service!: pulumi.Output<string | undefined>;
    public readonly target!: pulumi.Output<string | undefined>;
    public readonly text!: pulumi.Output<string | undefined>;
    public readonly ttl!: pulumi.Output<string | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly weight!: pulumi.Output<number | undefined>;

    /**
     * Create a DomainRecord resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainRecordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DomainRecordArgs | DomainRecordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DomainRecordState | undefined;
            resourceInputs["canonicalName"] = state ? state.canonicalName : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["mailHost"] = state ? state.mailHost : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameServerHost"] = state ? state.nameServerHost : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["service"] = state ? state.service : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
            resourceInputs["text"] = state ? state.text : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as DomainRecordArgs | undefined;
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["canonicalName"] = args ? args.canonicalName : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["mailHost"] = args ? args.mailHost : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameServerHost"] = args ? args.nameServerHost : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["service"] = args ? args.service : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["text"] = args ? args.text : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DomainRecord.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DomainRecord resources.
 */
export interface DomainRecordState {
    canonicalName?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    mailHost?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameServerHost?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    service?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
    text?: pulumi.Input<string>;
    ttl?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DomainRecord resource.
 */
export interface DomainRecordArgs {
    canonicalName?: pulumi.Input<string>;
    domain: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    mailHost?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameServerHost?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    service?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
    text?: pulumi.Input<string>;
    ttl?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}
