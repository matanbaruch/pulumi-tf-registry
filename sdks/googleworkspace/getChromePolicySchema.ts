// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getChromePolicySchema(args: GetChromePolicySchemaArgs, opts?: pulumi.InvokeOptions): Promise<GetChromePolicySchemaResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("googleworkspace:index/getChromePolicySchema:getChromePolicySchema", {
        "id": args.id,
        "schemaName": args.schemaName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getChromePolicySchema.
 */
export interface GetChromePolicySchemaArgs {
    id?: string;
    schemaName: string;
}

/**
 * A collection of values returned by getChromePolicySchema.
 */
export interface GetChromePolicySchemaResult {
    readonly accessRestrictions: string[];
    readonly additionalTargetKeyNames: outputs.GetChromePolicySchemaAdditionalTargetKeyName[];
    readonly definitions: outputs.GetChromePolicySchemaDefinition[];
    readonly fieldDescriptions: string;
    readonly id: string;
    readonly notices: outputs.GetChromePolicySchemaNotice[];
    readonly policyDescription: string;
    readonly schemaName: string;
    readonly supportUri: string;
}
export function getChromePolicySchemaOutput(args: GetChromePolicySchemaOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetChromePolicySchemaResult> {
    return pulumi.output(args).apply((a: any) => getChromePolicySchema(a, opts))
}

/**
 * A collection of arguments for invoking getChromePolicySchema.
 */
export interface GetChromePolicySchemaOutputArgs {
    id?: pulumi.Input<string>;
    schemaName: pulumi.Input<string>;
}
