// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ChromePolicyArgs, ChromePolicyState } from "./chromePolicy";
export type ChromePolicy = import("./chromePolicy").ChromePolicy;
export const ChromePolicy: typeof import("./chromePolicy").ChromePolicy = null as any;
utilities.lazyLoad(exports, ["ChromePolicy"], () => require("./chromePolicy"));

export { DomainArgs, DomainState } from "./domain";
export type Domain = import("./domain").Domain;
export const Domain: typeof import("./domain").Domain = null as any;
utilities.lazyLoad(exports, ["Domain"], () => require("./domain"));

export { DomainAliasArgs, DomainAliasState } from "./domainAlias";
export type DomainAlias = import("./domainAlias").DomainAlias;
export const DomainAlias: typeof import("./domainAlias").DomainAlias = null as any;
utilities.lazyLoad(exports, ["DomainAlias"], () => require("./domainAlias"));

export { GetChromePolicySchemaArgs, GetChromePolicySchemaResult, GetChromePolicySchemaOutputArgs } from "./getChromePolicySchema";
export const getChromePolicySchema: typeof import("./getChromePolicySchema").getChromePolicySchema = null as any;
export const getChromePolicySchemaOutput: typeof import("./getChromePolicySchema").getChromePolicySchemaOutput = null as any;
utilities.lazyLoad(exports, ["getChromePolicySchema","getChromePolicySchemaOutput"], () => require("./getChromePolicySchema"));

export { GetDomainArgs, GetDomainResult, GetDomainOutputArgs } from "./getDomain";
export const getDomain: typeof import("./getDomain").getDomain = null as any;
export const getDomainOutput: typeof import("./getDomain").getDomainOutput = null as any;
utilities.lazyLoad(exports, ["getDomain","getDomainOutput"], () => require("./getDomain"));

export { GetDomainAliasArgs, GetDomainAliasResult, GetDomainAliasOutputArgs } from "./getDomainAlias";
export const getDomainAlias: typeof import("./getDomainAlias").getDomainAlias = null as any;
export const getDomainAliasOutput: typeof import("./getDomainAlias").getDomainAliasOutput = null as any;
utilities.lazyLoad(exports, ["getDomainAlias","getDomainAliasOutput"], () => require("./getDomainAlias"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetGroupMemberArgs, GetGroupMemberResult, GetGroupMemberOutputArgs } from "./getGroupMember";
export const getGroupMember: typeof import("./getGroupMember").getGroupMember = null as any;
export const getGroupMemberOutput: typeof import("./getGroupMember").getGroupMemberOutput = null as any;
utilities.lazyLoad(exports, ["getGroupMember","getGroupMemberOutput"], () => require("./getGroupMember"));

export { GetGroupMembersArgs, GetGroupMembersResult, GetGroupMembersOutputArgs } from "./getGroupMembers";
export const getGroupMembers: typeof import("./getGroupMembers").getGroupMembers = null as any;
export const getGroupMembersOutput: typeof import("./getGroupMembers").getGroupMembersOutput = null as any;
utilities.lazyLoad(exports, ["getGroupMembers","getGroupMembersOutput"], () => require("./getGroupMembers"));

export { GetGroupSettingsArgs, GetGroupSettingsResult, GetGroupSettingsOutputArgs } from "./getGroupSettings";
export const getGroupSettings: typeof import("./getGroupSettings").getGroupSettings = null as any;
export const getGroupSettingsOutput: typeof import("./getGroupSettings").getGroupSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getGroupSettings","getGroupSettingsOutput"], () => require("./getGroupSettings"));

export { GetGroupsArgs, GetGroupsResult, GetGroupsOutputArgs } from "./getGroups";
export const getGroups: typeof import("./getGroups").getGroups = null as any;
export const getGroupsOutput: typeof import("./getGroups").getGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGroups","getGroupsOutput"], () => require("./getGroups"));

export { GetOrgUnitArgs, GetOrgUnitResult, GetOrgUnitOutputArgs } from "./getOrgUnit";
export const getOrgUnit: typeof import("./getOrgUnit").getOrgUnit = null as any;
export const getOrgUnitOutput: typeof import("./getOrgUnit").getOrgUnitOutput = null as any;
utilities.lazyLoad(exports, ["getOrgUnit","getOrgUnitOutput"], () => require("./getOrgUnit"));

export { GetPrivilegesArgs, GetPrivilegesResult, GetPrivilegesOutputArgs } from "./getPrivileges";
export const getPrivileges: typeof import("./getPrivileges").getPrivileges = null as any;
export const getPrivilegesOutput: typeof import("./getPrivileges").getPrivilegesOutput = null as any;
utilities.lazyLoad(exports, ["getPrivileges","getPrivilegesOutput"], () => require("./getPrivileges"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { GetSchemaArgs, GetSchemaResult, GetSchemaOutputArgs } from "./getSchema";
export const getSchema: typeof import("./getSchema").getSchema = null as any;
export const getSchemaOutput: typeof import("./getSchema").getSchemaOutput = null as any;
utilities.lazyLoad(exports, ["getSchema","getSchemaOutput"], () => require("./getSchema"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUsersArgs, GetUsersResult, GetUsersOutputArgs } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { GmailSendAsAliasArgs, GmailSendAsAliasState } from "./gmailSendAsAlias";
export type GmailSendAsAlias = import("./gmailSendAsAlias").GmailSendAsAlias;
export const GmailSendAsAlias: typeof import("./gmailSendAsAlias").GmailSendAsAlias = null as any;
utilities.lazyLoad(exports, ["GmailSendAsAlias"], () => require("./gmailSendAsAlias"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { GroupMemberArgs, GroupMemberState } from "./groupMember";
export type GroupMember = import("./groupMember").GroupMember;
export const GroupMember: typeof import("./groupMember").GroupMember = null as any;
utilities.lazyLoad(exports, ["GroupMember"], () => require("./groupMember"));

export { GroupMembersArgs, GroupMembersState } from "./groupMembers";
export type GroupMembers = import("./groupMembers").GroupMembers;
export const GroupMembers: typeof import("./groupMembers").GroupMembers = null as any;
utilities.lazyLoad(exports, ["GroupMembers"], () => require("./groupMembers"));

export { GroupSettingsArgs, GroupSettingsState } from "./groupSettings";
export type GroupSettings = import("./groupSettings").GroupSettings;
export const GroupSettings: typeof import("./groupSettings").GroupSettings = null as any;
utilities.lazyLoad(exports, ["GroupSettings"], () => require("./groupSettings"));

export { OrgUnitArgs, OrgUnitState } from "./orgUnit";
export type OrgUnit = import("./orgUnit").OrgUnit;
export const OrgUnit: typeof import("./orgUnit").OrgUnit = null as any;
utilities.lazyLoad(exports, ["OrgUnit"], () => require("./orgUnit"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { RoleAssignmentArgs, RoleAssignmentState } from "./roleAssignment";
export type RoleAssignment = import("./roleAssignment").RoleAssignment;
export const RoleAssignment: typeof import("./roleAssignment").RoleAssignment = null as any;
utilities.lazyLoad(exports, ["RoleAssignment"], () => require("./roleAssignment"));

export { SchemaArgs, SchemaState } from "./schema";
export type Schema = import("./schema").Schema;
export const Schema: typeof import("./schema").Schema = null as any;
utilities.lazyLoad(exports, ["Schema"], () => require("./schema"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "googleworkspace:index/chromePolicy:ChromePolicy":
                return new ChromePolicy(name, <any>undefined, { urn })
            case "googleworkspace:index/domain:Domain":
                return new Domain(name, <any>undefined, { urn })
            case "googleworkspace:index/domainAlias:DomainAlias":
                return new DomainAlias(name, <any>undefined, { urn })
            case "googleworkspace:index/gmailSendAsAlias:GmailSendAsAlias":
                return new GmailSendAsAlias(name, <any>undefined, { urn })
            case "googleworkspace:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "googleworkspace:index/groupMember:GroupMember":
                return new GroupMember(name, <any>undefined, { urn })
            case "googleworkspace:index/groupMembers:GroupMembers":
                return new GroupMembers(name, <any>undefined, { urn })
            case "googleworkspace:index/groupSettings:GroupSettings":
                return new GroupSettings(name, <any>undefined, { urn })
            case "googleworkspace:index/orgUnit:OrgUnit":
                return new OrgUnit(name, <any>undefined, { urn })
            case "googleworkspace:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "googleworkspace:index/roleAssignment:RoleAssignment":
                return new RoleAssignment(name, <any>undefined, { urn })
            case "googleworkspace:index/schema:Schema":
                return new Schema(name, <any>undefined, { urn })
            case "googleworkspace:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("googleworkspace", "index/chromePolicy", _module)
pulumi.runtime.registerResourceModule("googleworkspace", "index/domain", _module)
pulumi.runtime.registerResourceModule("googleworkspace", "index/domainAlias", _module)
pulumi.runtime.registerResourceModule("googleworkspace", "index/gmailSendAsAlias", _module)
pulumi.runtime.registerResourceModule("googleworkspace", "index/group", _module)
pulumi.runtime.registerResourceModule("googleworkspace", "index/groupMember", _module)
pulumi.runtime.registerResourceModule("googleworkspace", "index/groupMembers", _module)
pulumi.runtime.registerResourceModule("googleworkspace", "index/groupSettings", _module)
pulumi.runtime.registerResourceModule("googleworkspace", "index/orgUnit", _module)
pulumi.runtime.registerResourceModule("googleworkspace", "index/role", _module)
pulumi.runtime.registerResourceModule("googleworkspace", "index/roleAssignment", _module)
pulumi.runtime.registerResourceModule("googleworkspace", "index/schema", _module)
pulumi.runtime.registerResourceModule("googleworkspace", "index/user", _module)
pulumi.runtime.registerResourcePackage("googleworkspace", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:googleworkspace") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
