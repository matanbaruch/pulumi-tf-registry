// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Connection extends pulumi.CustomResource {
    /**
     * Get an existing Connection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectionState, opts?: pulumi.CustomResourceOptions): Connection {
        return new Connection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'auth0:index/connection:Connection';

    /**
     * Returns true if the given object is an instance of Connection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Connection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Connection.__pulumiType;
    }

    /**
     * Name used in login screen.
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * Indicates whether the connection is domain level.
     */
    public readonly isDomainConnection!: pulumi.Output<boolean>;
    /**
     * Metadata associated with the connection, in the form of a map of string values (max 255 chars).
     */
    public readonly metadata!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Name of the connection.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Configuration settings for connection options.
     */
    public readonly options!: pulumi.Output<outputs.ConnectionOptions | undefined>;
    /**
     * Defines the realms for which the connection will be used (e.g., email domains). If not specified, the connection name is
     * added as the realm.
     */
    public readonly realms!: pulumi.Output<string[]>;
    /**
     * Display connection as a button. Only available on enterprise connections.
     */
    public readonly showAsButton!: pulumi.Output<boolean | undefined>;
    /**
     * Type of the connection, which indicates the identity provider.
     */
    public readonly strategy!: pulumi.Output<string>;

    /**
     * Create a Connection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectionArgs | ConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectionState | undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["isDomainConnection"] = state ? state.isDomainConnection : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["realms"] = state ? state.realms : undefined;
            resourceInputs["showAsButton"] = state ? state.showAsButton : undefined;
            resourceInputs["strategy"] = state ? state.strategy : undefined;
        } else {
            const args = argsOrState as ConnectionArgs | undefined;
            if ((!args || args.strategy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'strategy'");
            }
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["isDomainConnection"] = args ? args.isDomainConnection : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["realms"] = args ? args.realms : undefined;
            resourceInputs["showAsButton"] = args ? args.showAsButton : undefined;
            resourceInputs["strategy"] = args ? args.strategy : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Connection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Connection resources.
 */
export interface ConnectionState {
    /**
     * Name used in login screen.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Indicates whether the connection is domain level.
     */
    isDomainConnection?: pulumi.Input<boolean>;
    /**
     * Metadata associated with the connection, in the form of a map of string values (max 255 chars).
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the connection.
     */
    name?: pulumi.Input<string>;
    /**
     * Configuration settings for connection options.
     */
    options?: pulumi.Input<inputs.ConnectionOptions>;
    /**
     * Defines the realms for which the connection will be used (e.g., email domains). If not specified, the connection name is
     * added as the realm.
     */
    realms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Display connection as a button. Only available on enterprise connections.
     */
    showAsButton?: pulumi.Input<boolean>;
    /**
     * Type of the connection, which indicates the identity provider.
     */
    strategy?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Connection resource.
 */
export interface ConnectionArgs {
    /**
     * Name used in login screen.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Indicates whether the connection is domain level.
     */
    isDomainConnection?: pulumi.Input<boolean>;
    /**
     * Metadata associated with the connection, in the form of a map of string values (max 255 chars).
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the connection.
     */
    name?: pulumi.Input<string>;
    /**
     * Configuration settings for connection options.
     */
    options?: pulumi.Input<inputs.ConnectionOptions>;
    /**
     * Defines the realms for which the connection will be used (e.g., email domains). If not specified, the connection name is
     * added as the realm.
     */
    realms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Display connection as a button. Only available on enterprise connections.
     */
    showAsButton?: pulumi.Input<boolean>;
    /**
     * Type of the connection, which indicates the identity provider.
     */
    strategy: pulumi.Input<string>;
}
