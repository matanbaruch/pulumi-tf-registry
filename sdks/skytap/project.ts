// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectState, opts?: pulumi.CustomResourceOptions): Project {
        return new Project(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'skytap:index/project:Project';

    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Project {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Project.__pulumiType;
    }

    /**
     * If this field is set to `viewer`, `participant`, `editor`, or `manager`, new users added to your Skytap account are
     * automatically added to this project with the specified project role. Existing users aren’t affected by this setting.
     * For additional details, see [Automatically adding new users to a
     * project](https://help.skytap.com/csh-project-automatic-role.html)
     */
    public readonly autoAddRoleName!: pulumi.Output<string | undefined>;
    /**
     * A list of environments to add to the project
     */
    public readonly environmentIds!: pulumi.Output<string[] | undefined>;
    /**
     * User-defined project name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Whether project members can view a list of other project members
     */
    public readonly showProjectMembers!: pulumi.Output<boolean | undefined>;
    /**
     * User-defined description of the project
     */
    public readonly summary!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ProjectTimeouts | undefined>;

    /**
     * Create a Project resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectArgs | ProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectState | undefined;
            resourceInputs["autoAddRoleName"] = state ? state.autoAddRoleName : undefined;
            resourceInputs["environmentIds"] = state ? state.environmentIds : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["showProjectMembers"] = state ? state.showProjectMembers : undefined;
            resourceInputs["summary"] = state ? state.summary : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ProjectArgs | undefined;
            resourceInputs["autoAddRoleName"] = args ? args.autoAddRoleName : undefined;
            resourceInputs["environmentIds"] = args ? args.environmentIds : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["showProjectMembers"] = args ? args.showProjectMembers : undefined;
            resourceInputs["summary"] = args ? args.summary : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Project.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Project resources.
 */
export interface ProjectState {
    /**
     * If this field is set to `viewer`, `participant`, `editor`, or `manager`, new users added to your Skytap account are
     * automatically added to this project with the specified project role. Existing users aren’t affected by this setting.
     * For additional details, see [Automatically adding new users to a
     * project](https://help.skytap.com/csh-project-automatic-role.html)
     */
    autoAddRoleName?: pulumi.Input<string>;
    /**
     * A list of environments to add to the project
     */
    environmentIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User-defined project name
     */
    name?: pulumi.Input<string>;
    /**
     * Whether project members can view a list of other project members
     */
    showProjectMembers?: pulumi.Input<boolean>;
    /**
     * User-defined description of the project
     */
    summary?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ProjectTimeouts>;
}

/**
 * The set of arguments for constructing a Project resource.
 */
export interface ProjectArgs {
    /**
     * If this field is set to `viewer`, `participant`, `editor`, or `manager`, new users added to your Skytap account are
     * automatically added to this project with the specified project role. Existing users aren’t affected by this setting.
     * For additional details, see [Automatically adding new users to a
     * project](https://help.skytap.com/csh-project-automatic-role.html)
     */
    autoAddRoleName?: pulumi.Input<string>;
    /**
     * A list of environments to add to the project
     */
    environmentIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * User-defined project name
     */
    name?: pulumi.Input<string>;
    /**
     * Whether project members can view a list of other project members
     */
    showProjectMembers?: pulumi.Input<boolean>;
    /**
     * User-defined description of the project
     */
    summary?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ProjectTimeouts>;
}
