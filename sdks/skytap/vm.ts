// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Vm extends pulumi.CustomResource {
    /**
     * Get an existing Vm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VmState, opts?: pulumi.CustomResourceOptions): Vm {
        return new Vm(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'skytap:index/vm:Vm';

    /**
     * Returns true if the given object is an instance of Vm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vm.__pulumiType;
    }

    /**
     * Number of CPUs allocated to this virtual machine
     */
    public readonly cpus!: pulumi.Output<number>;
    /**
     * Set of virtual disks within the VM
     */
    public readonly disks!: pulumi.Output<outputs.VmDisk[] | undefined>;
    /**
     * ID of the environment you want to add the VM to
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * Set of labels for the instance
     */
    public readonly labels!: pulumi.Output<outputs.VmLabel[] | undefined>;
    /**
     * Maximum settable CPUs for the VM
     */
    public /*out*/ readonly maxCpus!: pulumi.Output<number>;
    /**
     * Maximum amount of RAM that can be allocated to the VM
     */
    public /*out*/ readonly maxRam!: pulumi.Output<number>;
    /**
     * User-defined name of the VM
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Set of virtualized network interface cards (also known as a network adapters)
     */
    public readonly networkInterfaces!: pulumi.Output<outputs.VmNetworkInterface[] | undefined>;
    /**
     * The size of the OS disk. The disk size is in MiB; it will be converted to GiB in the Skytap UI. The maximum disk size is
     * 2,096,128 MiB (1.999 TiB)
     */
    public readonly osDiskSize!: pulumi.Output<number>;
    /**
     * Amount of RAM allocated to the VM
     */
    public readonly ram!: pulumi.Output<number>;
    /**
     * Map of external IP addresses. The key is the name of a published service - as defined in the `published_service` block
     */
    public /*out*/ readonly serviceIps!: pulumi.Output<{[key: string]: string}>;
    /**
     * Map of external IP addresses. The key is the name of a published service - as defined in the `published_service` block
     */
    public /*out*/ readonly servicePorts!: pulumi.Output<{[key: string]: number}>;
    /**
     * ID of the template you want to create the VM from
     */
    public readonly templateId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.VmTimeouts | undefined>;
    /**
     * VM user data, available from the metadata server and the Skytap API
     */
    public readonly userData!: pulumi.Output<string | undefined>;
    /**
     * ID of the VM within the template that you want to create the VM from
     */
    public readonly vmId!: pulumi.Output<string>;

    /**
     * Create a Vm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VmArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VmArgs | VmState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VmState | undefined;
            resourceInputs["cpus"] = state ? state.cpus : undefined;
            resourceInputs["disks"] = state ? state.disks : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["maxCpus"] = state ? state.maxCpus : undefined;
            resourceInputs["maxRam"] = state ? state.maxRam : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkInterfaces"] = state ? state.networkInterfaces : undefined;
            resourceInputs["osDiskSize"] = state ? state.osDiskSize : undefined;
            resourceInputs["ram"] = state ? state.ram : undefined;
            resourceInputs["serviceIps"] = state ? state.serviceIps : undefined;
            resourceInputs["servicePorts"] = state ? state.servicePorts : undefined;
            resourceInputs["templateId"] = state ? state.templateId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
            resourceInputs["vmId"] = state ? state.vmId : undefined;
        } else {
            const args = argsOrState as VmArgs | undefined;
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.templateId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateId'");
            }
            if ((!args || args.vmId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmId'");
            }
            resourceInputs["cpus"] = args ? args.cpus : undefined;
            resourceInputs["disks"] = args ? args.disks : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkInterfaces"] = args ? args.networkInterfaces : undefined;
            resourceInputs["osDiskSize"] = args ? args.osDiskSize : undefined;
            resourceInputs["ram"] = args ? args.ram : undefined;
            resourceInputs["templateId"] = args ? args.templateId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["vmId"] = args ? args.vmId : undefined;
            resourceInputs["maxCpus"] = undefined /*out*/;
            resourceInputs["maxRam"] = undefined /*out*/;
            resourceInputs["serviceIps"] = undefined /*out*/;
            resourceInputs["servicePorts"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vm.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Vm resources.
 */
export interface VmState {
    /**
     * Number of CPUs allocated to this virtual machine
     */
    cpus?: pulumi.Input<number>;
    /**
     * Set of virtual disks within the VM
     */
    disks?: pulumi.Input<pulumi.Input<inputs.VmDisk>[]>;
    /**
     * ID of the environment you want to add the VM to
     */
    environmentId?: pulumi.Input<string>;
    /**
     * Set of labels for the instance
     */
    labels?: pulumi.Input<pulumi.Input<inputs.VmLabel>[]>;
    /**
     * Maximum settable CPUs for the VM
     */
    maxCpus?: pulumi.Input<number>;
    /**
     * Maximum amount of RAM that can be allocated to the VM
     */
    maxRam?: pulumi.Input<number>;
    /**
     * User-defined name of the VM
     */
    name?: pulumi.Input<string>;
    /**
     * Set of virtualized network interface cards (also known as a network adapters)
     */
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.VmNetworkInterface>[]>;
    /**
     * The size of the OS disk. The disk size is in MiB; it will be converted to GiB in the Skytap UI. The maximum disk size is
     * 2,096,128 MiB (1.999 TiB)
     */
    osDiskSize?: pulumi.Input<number>;
    /**
     * Amount of RAM allocated to the VM
     */
    ram?: pulumi.Input<number>;
    /**
     * Map of external IP addresses. The key is the name of a published service - as defined in the `published_service` block
     */
    serviceIps?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Map of external IP addresses. The key is the name of a published service - as defined in the `published_service` block
     */
    servicePorts?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    /**
     * ID of the template you want to create the VM from
     */
    templateId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VmTimeouts>;
    /**
     * VM user data, available from the metadata server and the Skytap API
     */
    userData?: pulumi.Input<string>;
    /**
     * ID of the VM within the template that you want to create the VM from
     */
    vmId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vm resource.
 */
export interface VmArgs {
    /**
     * Number of CPUs allocated to this virtual machine
     */
    cpus?: pulumi.Input<number>;
    /**
     * Set of virtual disks within the VM
     */
    disks?: pulumi.Input<pulumi.Input<inputs.VmDisk>[]>;
    /**
     * ID of the environment you want to add the VM to
     */
    environmentId: pulumi.Input<string>;
    /**
     * Set of labels for the instance
     */
    labels?: pulumi.Input<pulumi.Input<inputs.VmLabel>[]>;
    /**
     * User-defined name of the VM
     */
    name?: pulumi.Input<string>;
    /**
     * Set of virtualized network interface cards (also known as a network adapters)
     */
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.VmNetworkInterface>[]>;
    /**
     * The size of the OS disk. The disk size is in MiB; it will be converted to GiB in the Skytap UI. The maximum disk size is
     * 2,096,128 MiB (1.999 TiB)
     */
    osDiskSize?: pulumi.Input<number>;
    /**
     * Amount of RAM allocated to the VM
     */
    ram?: pulumi.Input<number>;
    /**
     * ID of the template you want to create the VM from
     */
    templateId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VmTimeouts>;
    /**
     * VM user data, available from the metadata server and the Skytap API
     */
    userData?: pulumi.Input<string>;
    /**
     * ID of the VM within the template that you want to create the VM from
     */
    vmId: pulumi.Input<string>;
}
