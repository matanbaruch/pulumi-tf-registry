// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { EnvironmentArgs, EnvironmentState } from "./environment";
export type Environment = import("./environment").Environment;
export const Environment: typeof import("./environment").Environment = null as any;
utilities.lazyLoad(exports, ["Environment"], () => require("./environment"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetTemplateArgs, GetTemplateResult, GetTemplateOutputArgs } from "./getTemplate";
export const getTemplate: typeof import("./getTemplate").getTemplate = null as any;
export const getTemplateOutput: typeof import("./getTemplate").getTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getTemplate","getTemplateOutput"], () => require("./getTemplate"));

export { IcnrTunnelArgs, IcnrTunnelState } from "./icnrTunnel";
export type IcnrTunnel = import("./icnrTunnel").IcnrTunnel;
export const IcnrTunnel: typeof import("./icnrTunnel").IcnrTunnel = null as any;
utilities.lazyLoad(exports, ["IcnrTunnel"], () => require("./icnrTunnel"));

export { LabelCategoryArgs, LabelCategoryState } from "./labelCategory";
export type LabelCategory = import("./labelCategory").LabelCategory;
export const LabelCategory: typeof import("./labelCategory").LabelCategory = null as any;
utilities.lazyLoad(exports, ["LabelCategory"], () => require("./labelCategory"));

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { VmArgs, VmState } from "./vm";
export type Vm = import("./vm").Vm;
export const Vm: typeof import("./vm").Vm = null as any;
utilities.lazyLoad(exports, ["Vm"], () => require("./vm"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "skytap:index/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "skytap:index/icnrTunnel:IcnrTunnel":
                return new IcnrTunnel(name, <any>undefined, { urn })
            case "skytap:index/labelCategory:LabelCategory":
                return new LabelCategory(name, <any>undefined, { urn })
            case "skytap:index/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "skytap:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "skytap:index/vm:Vm":
                return new Vm(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("skytap", "index/environment", _module)
pulumi.runtime.registerResourceModule("skytap", "index/icnrTunnel", _module)
pulumi.runtime.registerResourceModule("skytap", "index/labelCategory", _module)
pulumi.runtime.registerResourceModule("skytap", "index/network", _module)
pulumi.runtime.registerResourceModule("skytap", "index/project", _module)
pulumi.runtime.registerResourceModule("skytap", "index/vm", _module)
pulumi.runtime.registerResourcePackage("skytap", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:skytap") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
