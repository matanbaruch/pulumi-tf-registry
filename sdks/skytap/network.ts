// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Network extends pulumi.CustomResource {
    /**
     * Get an existing Network resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkState, opts?: pulumi.CustomResourceOptions): Network {
        return new Network(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'skytap:index/network:Network';

    /**
     * Returns true if the given object is an instance of Network.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Network {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Network.__pulumiType;
    }

    /**
     * Domain name for the Skytap network. This field can be changed only when all virtual machines in the environment are
     * stopped (not suspended or running)
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * ID of the environment you want to attach the network to
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * Gateway IP address
     */
    public readonly gateway!: pulumi.Output<string>;
    /**
     * User-defined name of the network
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Defines the subnet address and subnet mask size in CIDR format (for example, 10.0.0.0/24). IP addresses for the VMs are
     * assigned from this subnet and standard network services (DNS resolution, CIFS share, routes to Internet) are defined
     * appropriately for it
     */
    public readonly subnet!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.NetworkTimeouts | undefined>;
    /**
     * Whether or not this network can be connected to other networks
     */
    public readonly tunnelable!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Network resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkArgs | NetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkState | undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["subnet"] = state ? state.subnet : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["tunnelable"] = state ? state.tunnelable : undefined;
        } else {
            const args = argsOrState as NetworkArgs | undefined;
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.subnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnet'");
            }
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["gateway"] = args ? args.gateway : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["subnet"] = args ? args.subnet : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["tunnelable"] = args ? args.tunnelable : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Network.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Network resources.
 */
export interface NetworkState {
    /**
     * Domain name for the Skytap network. This field can be changed only when all virtual machines in the environment are
     * stopped (not suspended or running)
     */
    domain?: pulumi.Input<string>;
    /**
     * ID of the environment you want to attach the network to
     */
    environmentId?: pulumi.Input<string>;
    /**
     * Gateway IP address
     */
    gateway?: pulumi.Input<string>;
    /**
     * User-defined name of the network
     */
    name?: pulumi.Input<string>;
    /**
     * Defines the subnet address and subnet mask size in CIDR format (for example, 10.0.0.0/24). IP addresses for the VMs are
     * assigned from this subnet and standard network services (DNS resolution, CIFS share, routes to Internet) are defined
     * appropriately for it
     */
    subnet?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetworkTimeouts>;
    /**
     * Whether or not this network can be connected to other networks
     */
    tunnelable?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Network resource.
 */
export interface NetworkArgs {
    /**
     * Domain name for the Skytap network. This field can be changed only when all virtual machines in the environment are
     * stopped (not suspended or running)
     */
    domain: pulumi.Input<string>;
    /**
     * ID of the environment you want to attach the network to
     */
    environmentId: pulumi.Input<string>;
    /**
     * Gateway IP address
     */
    gateway?: pulumi.Input<string>;
    /**
     * User-defined name of the network
     */
    name?: pulumi.Input<string>;
    /**
     * Defines the subnet address and subnet mask size in CIDR format (for example, 10.0.0.0/24). IP addresses for the VMs are
     * assigned from this subnet and standard network services (DNS resolution, CIFS share, routes to Internet) are defined
     * appropriately for it
     */
    subnet: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetworkTimeouts>;
    /**
     * Whether or not this network can be connected to other networks
     */
    tunnelable?: pulumi.Input<boolean>;
}
