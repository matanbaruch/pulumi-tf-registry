// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ObjectUserDomaincontrollerExtraserver extends pulumi.CustomResource {
    /**
     * Get an existing ObjectUserDomaincontrollerExtraserver resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectUserDomaincontrollerExtraserverState, opts?: pulumi.CustomResourceOptions): ObjectUserDomaincontrollerExtraserver {
        return new ObjectUserDomaincontrollerExtraserver(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/objectUserDomaincontrollerExtraserver:ObjectUserDomaincontrollerExtraserver';

    /**
     * Returns true if the given object is an instance of ObjectUserDomaincontrollerExtraserver.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectUserDomaincontrollerExtraserver {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectUserDomaincontrollerExtraserver.__pulumiType;
    }

    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly domainController!: pulumi.Output<string>;
    public readonly fosid!: pulumi.Output<number>;
    public readonly ipAddress!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<number>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly sourceIpAddress!: pulumi.Output<string>;
    public readonly sourcePort!: pulumi.Output<number>;

    /**
     * Create a ObjectUserDomaincontrollerExtraserver resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObjectUserDomaincontrollerExtraserverArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectUserDomaincontrollerExtraserverArgs | ObjectUserDomaincontrollerExtraserverState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectUserDomaincontrollerExtraserverState | undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["domainController"] = state ? state.domainController : undefined;
            resourceInputs["fosid"] = state ? state.fosid : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["sourceIpAddress"] = state ? state.sourceIpAddress : undefined;
            resourceInputs["sourcePort"] = state ? state.sourcePort : undefined;
        } else {
            const args = argsOrState as ObjectUserDomaincontrollerExtraserverArgs | undefined;
            if ((!args || args.domainController === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainController'");
            }
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["domainController"] = args ? args.domainController : undefined;
            resourceInputs["fosid"] = args ? args.fosid : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["sourceIpAddress"] = args ? args.sourceIpAddress : undefined;
            resourceInputs["sourcePort"] = args ? args.sourcePort : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectUserDomaincontrollerExtraserver.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectUserDomaincontrollerExtraserver resources.
 */
export interface ObjectUserDomaincontrollerExtraserverState {
    adom?: pulumi.Input<string>;
    domainController?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    ipAddress?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    scopetype?: pulumi.Input<string>;
    sourceIpAddress?: pulumi.Input<string>;
    sourcePort?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ObjectUserDomaincontrollerExtraserver resource.
 */
export interface ObjectUserDomaincontrollerExtraserverArgs {
    adom?: pulumi.Input<string>;
    domainController: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    ipAddress?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    scopetype?: pulumi.Input<string>;
    sourceIpAddress?: pulumi.Input<string>;
    sourcePort?: pulumi.Input<number>;
}
