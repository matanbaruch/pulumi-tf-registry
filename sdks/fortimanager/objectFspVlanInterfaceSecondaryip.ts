// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ObjectFspVlanInterfaceSecondaryip extends pulumi.CustomResource {
    /**
     * Get an existing ObjectFspVlanInterfaceSecondaryip resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectFspVlanInterfaceSecondaryipState, opts?: pulumi.CustomResourceOptions): ObjectFspVlanInterfaceSecondaryip {
        return new ObjectFspVlanInterfaceSecondaryip(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/objectFspVlanInterfaceSecondaryip:ObjectFspVlanInterfaceSecondaryip';

    /**
     * Returns true if the given object is an instance of ObjectFspVlanInterfaceSecondaryip.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectFspVlanInterfaceSecondaryip {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectFspVlanInterfaceSecondaryip.__pulumiType;
    }

    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly allowaccesses!: pulumi.Output<string[]>;
    public readonly detectprotocols!: pulumi.Output<string[]>;
    public readonly detectserver!: pulumi.Output<string | undefined>;
    public readonly fosid!: pulumi.Output<number | undefined>;
    public readonly gwdetect!: pulumi.Output<string | undefined>;
    public readonly haPriority!: pulumi.Output<number | undefined>;
    public readonly ip!: pulumi.Output<string | undefined>;
    public readonly pingServStatus!: pulumi.Output<number | undefined>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly secipRelayIp!: pulumi.Output<string | undefined>;
    public readonly seq!: pulumi.Output<number | undefined>;
    public readonly vlan!: pulumi.Output<string>;

    /**
     * Create a ObjectFspVlanInterfaceSecondaryip resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObjectFspVlanInterfaceSecondaryipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectFspVlanInterfaceSecondaryipArgs | ObjectFspVlanInterfaceSecondaryipState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectFspVlanInterfaceSecondaryipState | undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["allowaccesses"] = state ? state.allowaccesses : undefined;
            resourceInputs["detectprotocols"] = state ? state.detectprotocols : undefined;
            resourceInputs["detectserver"] = state ? state.detectserver : undefined;
            resourceInputs["fosid"] = state ? state.fosid : undefined;
            resourceInputs["gwdetect"] = state ? state.gwdetect : undefined;
            resourceInputs["haPriority"] = state ? state.haPriority : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["pingServStatus"] = state ? state.pingServStatus : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["secipRelayIp"] = state ? state.secipRelayIp : undefined;
            resourceInputs["seq"] = state ? state.seq : undefined;
            resourceInputs["vlan"] = state ? state.vlan : undefined;
        } else {
            const args = argsOrState as ObjectFspVlanInterfaceSecondaryipArgs | undefined;
            if ((!args || args.vlan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vlan'");
            }
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["allowaccesses"] = args ? args.allowaccesses : undefined;
            resourceInputs["detectprotocols"] = args ? args.detectprotocols : undefined;
            resourceInputs["detectserver"] = args ? args.detectserver : undefined;
            resourceInputs["fosid"] = args ? args.fosid : undefined;
            resourceInputs["gwdetect"] = args ? args.gwdetect : undefined;
            resourceInputs["haPriority"] = args ? args.haPriority : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["pingServStatus"] = args ? args.pingServStatus : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["secipRelayIp"] = args ? args.secipRelayIp : undefined;
            resourceInputs["seq"] = args ? args.seq : undefined;
            resourceInputs["vlan"] = args ? args.vlan : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectFspVlanInterfaceSecondaryip.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectFspVlanInterfaceSecondaryip resources.
 */
export interface ObjectFspVlanInterfaceSecondaryipState {
    adom?: pulumi.Input<string>;
    allowaccesses?: pulumi.Input<pulumi.Input<string>[]>;
    detectprotocols?: pulumi.Input<pulumi.Input<string>[]>;
    detectserver?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    gwdetect?: pulumi.Input<string>;
    haPriority?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    pingServStatus?: pulumi.Input<number>;
    scopetype?: pulumi.Input<string>;
    secipRelayIp?: pulumi.Input<string>;
    seq?: pulumi.Input<number>;
    vlan?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectFspVlanInterfaceSecondaryip resource.
 */
export interface ObjectFspVlanInterfaceSecondaryipArgs {
    adom?: pulumi.Input<string>;
    allowaccesses?: pulumi.Input<pulumi.Input<string>[]>;
    detectprotocols?: pulumi.Input<pulumi.Input<string>[]>;
    detectserver?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    gwdetect?: pulumi.Input<string>;
    haPriority?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    pingServStatus?: pulumi.Input<number>;
    scopetype?: pulumi.Input<string>;
    secipRelayIp?: pulumi.Input<string>;
    seq?: pulumi.Input<number>;
    vlan: pulumi.Input<string>;
}
