// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PackagesUserNacpolicy extends pulumi.CustomResource {
    /**
     * Get an existing PackagesUserNacpolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PackagesUserNacpolicyState, opts?: pulumi.CustomResourceOptions): PackagesUserNacpolicy {
        return new PackagesUserNacpolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/packagesUserNacpolicy:PackagesUserNacpolicy';

    /**
     * Returns true if the given object is an instance of PackagesUserNacpolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PackagesUserNacpolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PackagesUserNacpolicy.__pulumiType;
    }

    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly category!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly emsTag!: pulumi.Output<string | undefined>;
    public readonly family!: pulumi.Output<string | undefined>;
    public readonly firewallAddresses!: pulumi.Output<string[]>;
    public readonly fortivoiceTags!: pulumi.Output<string[]>;
    public readonly host!: pulumi.Output<string | undefined>;
    public readonly hwVendor!: pulumi.Output<string | undefined>;
    public readonly hwVersion!: pulumi.Output<string | undefined>;
    public readonly mac!: pulumi.Output<string | undefined>;
    public readonly matchPeriod!: pulumi.Output<number | undefined>;
    public readonly matchType!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly os!: pulumi.Output<string | undefined>;
    public readonly pkg!: pulumi.Output<string>;
    public readonly pkgFolderPath!: pulumi.Output<string | undefined>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly severities!: pulumi.Output<number[]>;
    public readonly src!: pulumi.Output<string | undefined>;
    public readonly ssidPolicy!: pulumi.Output<string | undefined>;
    public readonly status!: pulumi.Output<string>;
    public readonly swVersion!: pulumi.Output<string | undefined>;
    public readonly switchFortilinks!: pulumi.Output<string[]>;
    public readonly switchGroups!: pulumi.Output<string[]>;
    public readonly switchMacPolicies!: pulumi.Output<string[]>;
    public readonly switchScopes!: pulumi.Output<string[]>;
    public readonly type!: pulumi.Output<string | undefined>;
    public readonly user!: pulumi.Output<string | undefined>;
    public readonly userGroup!: pulumi.Output<string | undefined>;

    /**
     * Create a PackagesUserNacpolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PackagesUserNacpolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PackagesUserNacpolicyArgs | PackagesUserNacpolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PackagesUserNacpolicyState | undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["emsTag"] = state ? state.emsTag : undefined;
            resourceInputs["family"] = state ? state.family : undefined;
            resourceInputs["firewallAddresses"] = state ? state.firewallAddresses : undefined;
            resourceInputs["fortivoiceTags"] = state ? state.fortivoiceTags : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["hwVendor"] = state ? state.hwVendor : undefined;
            resourceInputs["hwVersion"] = state ? state.hwVersion : undefined;
            resourceInputs["mac"] = state ? state.mac : undefined;
            resourceInputs["matchPeriod"] = state ? state.matchPeriod : undefined;
            resourceInputs["matchType"] = state ? state.matchType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["os"] = state ? state.os : undefined;
            resourceInputs["pkg"] = state ? state.pkg : undefined;
            resourceInputs["pkgFolderPath"] = state ? state.pkgFolderPath : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["severities"] = state ? state.severities : undefined;
            resourceInputs["src"] = state ? state.src : undefined;
            resourceInputs["ssidPolicy"] = state ? state.ssidPolicy : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["swVersion"] = state ? state.swVersion : undefined;
            resourceInputs["switchFortilinks"] = state ? state.switchFortilinks : undefined;
            resourceInputs["switchGroups"] = state ? state.switchGroups : undefined;
            resourceInputs["switchMacPolicies"] = state ? state.switchMacPolicies : undefined;
            resourceInputs["switchScopes"] = state ? state.switchScopes : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
            resourceInputs["userGroup"] = state ? state.userGroup : undefined;
        } else {
            const args = argsOrState as PackagesUserNacpolicyArgs | undefined;
            if ((!args || args.pkg === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pkg'");
            }
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["emsTag"] = args ? args.emsTag : undefined;
            resourceInputs["family"] = args ? args.family : undefined;
            resourceInputs["firewallAddresses"] = args ? args.firewallAddresses : undefined;
            resourceInputs["fortivoiceTags"] = args ? args.fortivoiceTags : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["hwVendor"] = args ? args.hwVendor : undefined;
            resourceInputs["hwVersion"] = args ? args.hwVersion : undefined;
            resourceInputs["mac"] = args ? args.mac : undefined;
            resourceInputs["matchPeriod"] = args ? args.matchPeriod : undefined;
            resourceInputs["matchType"] = args ? args.matchType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["os"] = args ? args.os : undefined;
            resourceInputs["pkg"] = args ? args.pkg : undefined;
            resourceInputs["pkgFolderPath"] = args ? args.pkgFolderPath : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["severities"] = args ? args.severities : undefined;
            resourceInputs["src"] = args ? args.src : undefined;
            resourceInputs["ssidPolicy"] = args ? args.ssidPolicy : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["swVersion"] = args ? args.swVersion : undefined;
            resourceInputs["switchFortilinks"] = args ? args.switchFortilinks : undefined;
            resourceInputs["switchGroups"] = args ? args.switchGroups : undefined;
            resourceInputs["switchMacPolicies"] = args ? args.switchMacPolicies : undefined;
            resourceInputs["switchScopes"] = args ? args.switchScopes : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
            resourceInputs["userGroup"] = args ? args.userGroup : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PackagesUserNacpolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PackagesUserNacpolicy resources.
 */
export interface PackagesUserNacpolicyState {
    adom?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    emsTag?: pulumi.Input<string>;
    family?: pulumi.Input<string>;
    firewallAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    fortivoiceTags?: pulumi.Input<pulumi.Input<string>[]>;
    host?: pulumi.Input<string>;
    hwVendor?: pulumi.Input<string>;
    hwVersion?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    matchPeriod?: pulumi.Input<number>;
    matchType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    os?: pulumi.Input<string>;
    pkg?: pulumi.Input<string>;
    pkgFolderPath?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    severities?: pulumi.Input<pulumi.Input<number>[]>;
    src?: pulumi.Input<string>;
    ssidPolicy?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    swVersion?: pulumi.Input<string>;
    switchFortilinks?: pulumi.Input<pulumi.Input<string>[]>;
    switchGroups?: pulumi.Input<pulumi.Input<string>[]>;
    switchMacPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    switchScopes?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
    userGroup?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PackagesUserNacpolicy resource.
 */
export interface PackagesUserNacpolicyArgs {
    adom?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    emsTag?: pulumi.Input<string>;
    family?: pulumi.Input<string>;
    firewallAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    fortivoiceTags?: pulumi.Input<pulumi.Input<string>[]>;
    host?: pulumi.Input<string>;
    hwVendor?: pulumi.Input<string>;
    hwVersion?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    matchPeriod?: pulumi.Input<number>;
    matchType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    os?: pulumi.Input<string>;
    pkg: pulumi.Input<string>;
    pkgFolderPath?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    severities?: pulumi.Input<pulumi.Input<number>[]>;
    src?: pulumi.Input<string>;
    ssidPolicy?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    swVersion?: pulumi.Input<string>;
    switchFortilinks?: pulumi.Input<pulumi.Input<string>[]>;
    switchGroups?: pulumi.Input<pulumi.Input<string>[]>;
    switchMacPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    switchScopes?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
    userGroup?: pulumi.Input<string>;
}
