// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PackagesFirewallCentralsnatmap extends pulumi.CustomResource {
    /**
     * Get an existing PackagesFirewallCentralsnatmap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PackagesFirewallCentralsnatmapState, opts?: pulumi.CustomResourceOptions): PackagesFirewallCentralsnatmap {
        return new PackagesFirewallCentralsnatmap(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/packagesFirewallCentralsnatmap:PackagesFirewallCentralsnatmap';

    /**
     * Returns true if the given object is an instance of PackagesFirewallCentralsnatmap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PackagesFirewallCentralsnatmap {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PackagesFirewallCentralsnatmap.__pulumiType;
    }

    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly comments!: pulumi.Output<string | undefined>;
    public readonly dstAddr6!: pulumi.Output<string | undefined>;
    public readonly dstAddrs!: pulumi.Output<string[]>;
    public readonly dstPort!: pulumi.Output<string>;
    public readonly dstintfs!: pulumi.Output<string[]>;
    public readonly nat!: pulumi.Output<string | undefined>;
    public readonly nat46!: pulumi.Output<string>;
    public readonly nat64!: pulumi.Output<string>;
    public readonly natIppool6s!: pulumi.Output<string[]>;
    public readonly natIppools!: pulumi.Output<string[]>;
    public readonly natPort!: pulumi.Output<string | undefined>;
    public readonly origAddr6!: pulumi.Output<string | undefined>;
    public readonly origAddrs!: pulumi.Output<string[]>;
    public readonly origPort!: pulumi.Output<string | undefined>;
    public readonly pkg!: pulumi.Output<string>;
    public readonly pkgFolderPath!: pulumi.Output<string | undefined>;
    public readonly policyid!: pulumi.Output<number | undefined>;
    public readonly portPreserve!: pulumi.Output<string>;
    public readonly protocol!: pulumi.Output<number | undefined>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly srcintfs!: pulumi.Output<string[]>;
    public readonly status!: pulumi.Output<string | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a PackagesFirewallCentralsnatmap resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PackagesFirewallCentralsnatmapArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PackagesFirewallCentralsnatmapArgs | PackagesFirewallCentralsnatmapState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PackagesFirewallCentralsnatmapState | undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["dstAddr6"] = state ? state.dstAddr6 : undefined;
            resourceInputs["dstAddrs"] = state ? state.dstAddrs : undefined;
            resourceInputs["dstPort"] = state ? state.dstPort : undefined;
            resourceInputs["dstintfs"] = state ? state.dstintfs : undefined;
            resourceInputs["nat"] = state ? state.nat : undefined;
            resourceInputs["nat46"] = state ? state.nat46 : undefined;
            resourceInputs["nat64"] = state ? state.nat64 : undefined;
            resourceInputs["natIppool6s"] = state ? state.natIppool6s : undefined;
            resourceInputs["natIppools"] = state ? state.natIppools : undefined;
            resourceInputs["natPort"] = state ? state.natPort : undefined;
            resourceInputs["origAddr6"] = state ? state.origAddr6 : undefined;
            resourceInputs["origAddrs"] = state ? state.origAddrs : undefined;
            resourceInputs["origPort"] = state ? state.origPort : undefined;
            resourceInputs["pkg"] = state ? state.pkg : undefined;
            resourceInputs["pkgFolderPath"] = state ? state.pkgFolderPath : undefined;
            resourceInputs["policyid"] = state ? state.policyid : undefined;
            resourceInputs["portPreserve"] = state ? state.portPreserve : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["srcintfs"] = state ? state.srcintfs : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as PackagesFirewallCentralsnatmapArgs | undefined;
            if ((!args || args.pkg === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pkg'");
            }
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["dstAddr6"] = args ? args.dstAddr6 : undefined;
            resourceInputs["dstAddrs"] = args ? args.dstAddrs : undefined;
            resourceInputs["dstPort"] = args ? args.dstPort : undefined;
            resourceInputs["dstintfs"] = args ? args.dstintfs : undefined;
            resourceInputs["nat"] = args ? args.nat : undefined;
            resourceInputs["nat46"] = args ? args.nat46 : undefined;
            resourceInputs["nat64"] = args ? args.nat64 : undefined;
            resourceInputs["natIppool6s"] = args ? args.natIppool6s : undefined;
            resourceInputs["natIppools"] = args ? args.natIppools : undefined;
            resourceInputs["natPort"] = args ? args.natPort : undefined;
            resourceInputs["origAddr6"] = args ? args.origAddr6 : undefined;
            resourceInputs["origAddrs"] = args ? args.origAddrs : undefined;
            resourceInputs["origPort"] = args ? args.origPort : undefined;
            resourceInputs["pkg"] = args ? args.pkg : undefined;
            resourceInputs["pkgFolderPath"] = args ? args.pkgFolderPath : undefined;
            resourceInputs["policyid"] = args ? args.policyid : undefined;
            resourceInputs["portPreserve"] = args ? args.portPreserve : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["srcintfs"] = args ? args.srcintfs : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PackagesFirewallCentralsnatmap.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PackagesFirewallCentralsnatmap resources.
 */
export interface PackagesFirewallCentralsnatmapState {
    adom?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    dstAddr6?: pulumi.Input<string>;
    dstAddrs?: pulumi.Input<pulumi.Input<string>[]>;
    dstPort?: pulumi.Input<string>;
    dstintfs?: pulumi.Input<pulumi.Input<string>[]>;
    nat?: pulumi.Input<string>;
    nat46?: pulumi.Input<string>;
    nat64?: pulumi.Input<string>;
    natIppool6s?: pulumi.Input<pulumi.Input<string>[]>;
    natIppools?: pulumi.Input<pulumi.Input<string>[]>;
    natPort?: pulumi.Input<string>;
    origAddr6?: pulumi.Input<string>;
    origAddrs?: pulumi.Input<pulumi.Input<string>[]>;
    origPort?: pulumi.Input<string>;
    pkg?: pulumi.Input<string>;
    pkgFolderPath?: pulumi.Input<string>;
    policyid?: pulumi.Input<number>;
    portPreserve?: pulumi.Input<string>;
    protocol?: pulumi.Input<number>;
    scopetype?: pulumi.Input<string>;
    srcintfs?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PackagesFirewallCentralsnatmap resource.
 */
export interface PackagesFirewallCentralsnatmapArgs {
    adom?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    dstAddr6?: pulumi.Input<string>;
    dstAddrs?: pulumi.Input<pulumi.Input<string>[]>;
    dstPort?: pulumi.Input<string>;
    dstintfs?: pulumi.Input<pulumi.Input<string>[]>;
    nat?: pulumi.Input<string>;
    nat46?: pulumi.Input<string>;
    nat64?: pulumi.Input<string>;
    natIppool6s?: pulumi.Input<pulumi.Input<string>[]>;
    natIppools?: pulumi.Input<pulumi.Input<string>[]>;
    natPort?: pulumi.Input<string>;
    origAddr6?: pulumi.Input<string>;
    origAddrs?: pulumi.Input<pulumi.Input<string>[]>;
    origPort?: pulumi.Input<string>;
    pkg: pulumi.Input<string>;
    pkgFolderPath?: pulumi.Input<string>;
    policyid?: pulumi.Input<number>;
    portPreserve?: pulumi.Input<string>;
    protocol?: pulumi.Input<number>;
    scopetype?: pulumi.Input<string>;
    srcintfs?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}
