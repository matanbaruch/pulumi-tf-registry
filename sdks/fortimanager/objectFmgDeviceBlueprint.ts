// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ObjectFmgDeviceBlueprint extends pulumi.CustomResource {
    /**
     * Get an existing ObjectFmgDeviceBlueprint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectFmgDeviceBlueprintState, opts?: pulumi.CustomResourceOptions): ObjectFmgDeviceBlueprint {
        return new ObjectFmgDeviceBlueprint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/objectFmgDeviceBlueprint:ObjectFmgDeviceBlueprint';

    /**
     * Returns true if the given object is an instance of ObjectFmgDeviceBlueprint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectFmgDeviceBlueprint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectFmgDeviceBlueprint.__pulumiType;
    }

    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly authTemplates!: pulumi.Output<string[]>;
    public readonly cliprofs!: pulumi.Output<string[]>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly devGroups!: pulumi.Output<string[]>;
    public readonly enforceDeviceConfig!: pulumi.Output<string>;
    public readonly folder!: pulumi.Output<string | undefined>;
    public readonly haConfig!: pulumi.Output<string>;
    public readonly haHbdev!: pulumi.Output<string | undefined>;
    public readonly haMonitors!: pulumi.Output<string[]>;
    public readonly haPasswords!: pulumi.Output<string[]>;
    public readonly linkedToModel!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly pkg!: pulumi.Output<string | undefined>;
    public readonly platform!: pulumi.Output<string | undefined>;
    public readonly preferImgVer!: pulumi.Output<string | undefined>;
    public readonly prerunCliprofs!: pulumi.Output<string[]>;
    public readonly provType!: pulumi.Output<string | undefined>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly templateGroup!: pulumi.Output<string | undefined>;
    public readonly templates!: pulumi.Output<string[]>;

    /**
     * Create a ObjectFmgDeviceBlueprint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ObjectFmgDeviceBlueprintArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectFmgDeviceBlueprintArgs | ObjectFmgDeviceBlueprintState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectFmgDeviceBlueprintState | undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["authTemplates"] = state ? state.authTemplates : undefined;
            resourceInputs["cliprofs"] = state ? state.cliprofs : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["devGroups"] = state ? state.devGroups : undefined;
            resourceInputs["enforceDeviceConfig"] = state ? state.enforceDeviceConfig : undefined;
            resourceInputs["folder"] = state ? state.folder : undefined;
            resourceInputs["haConfig"] = state ? state.haConfig : undefined;
            resourceInputs["haHbdev"] = state ? state.haHbdev : undefined;
            resourceInputs["haMonitors"] = state ? state.haMonitors : undefined;
            resourceInputs["haPasswords"] = state ? state.haPasswords : undefined;
            resourceInputs["linkedToModel"] = state ? state.linkedToModel : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pkg"] = state ? state.pkg : undefined;
            resourceInputs["platform"] = state ? state.platform : undefined;
            resourceInputs["preferImgVer"] = state ? state.preferImgVer : undefined;
            resourceInputs["prerunCliprofs"] = state ? state.prerunCliprofs : undefined;
            resourceInputs["provType"] = state ? state.provType : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["templateGroup"] = state ? state.templateGroup : undefined;
            resourceInputs["templates"] = state ? state.templates : undefined;
        } else {
            const args = argsOrState as ObjectFmgDeviceBlueprintArgs | undefined;
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["authTemplates"] = args ? args.authTemplates : undefined;
            resourceInputs["cliprofs"] = args ? args.cliprofs : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["devGroups"] = args ? args.devGroups : undefined;
            resourceInputs["enforceDeviceConfig"] = args ? args.enforceDeviceConfig : undefined;
            resourceInputs["folder"] = args ? args.folder : undefined;
            resourceInputs["haConfig"] = args ? args.haConfig : undefined;
            resourceInputs["haHbdev"] = args ? args.haHbdev : undefined;
            resourceInputs["haMonitors"] = args ? args.haMonitors : undefined;
            resourceInputs["haPasswords"] = args?.haPasswords ? pulumi.secret(args.haPasswords) : undefined;
            resourceInputs["linkedToModel"] = args ? args.linkedToModel : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pkg"] = args ? args.pkg : undefined;
            resourceInputs["platform"] = args ? args.platform : undefined;
            resourceInputs["preferImgVer"] = args ? args.preferImgVer : undefined;
            resourceInputs["prerunCliprofs"] = args ? args.prerunCliprofs : undefined;
            resourceInputs["provType"] = args ? args.provType : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["templateGroup"] = args ? args.templateGroup : undefined;
            resourceInputs["templates"] = args ? args.templates : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["haPasswords"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ObjectFmgDeviceBlueprint.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectFmgDeviceBlueprint resources.
 */
export interface ObjectFmgDeviceBlueprintState {
    adom?: pulumi.Input<string>;
    authTemplates?: pulumi.Input<pulumi.Input<string>[]>;
    cliprofs?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    devGroups?: pulumi.Input<pulumi.Input<string>[]>;
    enforceDeviceConfig?: pulumi.Input<string>;
    folder?: pulumi.Input<string>;
    haConfig?: pulumi.Input<string>;
    haHbdev?: pulumi.Input<string>;
    haMonitors?: pulumi.Input<pulumi.Input<string>[]>;
    haPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    linkedToModel?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pkg?: pulumi.Input<string>;
    platform?: pulumi.Input<string>;
    preferImgVer?: pulumi.Input<string>;
    prerunCliprofs?: pulumi.Input<pulumi.Input<string>[]>;
    provType?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    templateGroup?: pulumi.Input<string>;
    templates?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ObjectFmgDeviceBlueprint resource.
 */
export interface ObjectFmgDeviceBlueprintArgs {
    adom?: pulumi.Input<string>;
    authTemplates?: pulumi.Input<pulumi.Input<string>[]>;
    cliprofs?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    devGroups?: pulumi.Input<pulumi.Input<string>[]>;
    enforceDeviceConfig?: pulumi.Input<string>;
    folder?: pulumi.Input<string>;
    haConfig?: pulumi.Input<string>;
    haHbdev?: pulumi.Input<string>;
    haMonitors?: pulumi.Input<pulumi.Input<string>[]>;
    haPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    linkedToModel?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pkg?: pulumi.Input<string>;
    platform?: pulumi.Input<string>;
    preferImgVer?: pulumi.Input<string>;
    prerunCliprofs?: pulumi.Input<pulumi.Input<string>[]>;
    provType?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    templateGroup?: pulumi.Input<string>;
    templates?: pulumi.Input<pulumi.Input<string>[]>;
}
