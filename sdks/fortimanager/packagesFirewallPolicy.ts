// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PackagesFirewallPolicy extends pulumi.CustomResource {
    /**
     * Get an existing PackagesFirewallPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PackagesFirewallPolicyState, opts?: pulumi.CustomResourceOptions): PackagesFirewallPolicy {
        return new PackagesFirewallPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/packagesFirewallPolicy:PackagesFirewallPolicy';

    /**
     * Returns true if the given object is an instance of PackagesFirewallPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PackagesFirewallPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PackagesFirewallPolicy.__pulumiType;
    }

    public readonly _policyBlock!: pulumi.Output<number | undefined>;
    public readonly action!: pulumi.Output<string>;
    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly antiReplay!: pulumi.Output<string>;
    public readonly appCategory!: pulumi.Output<string | undefined>;
    public readonly appGroup!: pulumi.Output<string | undefined>;
    public readonly applicationList!: pulumi.Output<string | undefined>;
    public readonly applications!: pulumi.Output<number[]>;
    public readonly authCert!: pulumi.Output<string | undefined>;
    public readonly authPath!: pulumi.Output<string | undefined>;
    public readonly authRedirectAddr!: pulumi.Output<string | undefined>;
    public readonly autoAsicOffload!: pulumi.Output<string | undefined>;
    public readonly avProfile!: pulumi.Output<string | undefined>;
    public readonly bestRoute!: pulumi.Output<string | undefined>;
    public readonly blockNotification!: pulumi.Output<string>;
    public readonly captivePortalExempt!: pulumi.Output<string>;
    public readonly capturePacket!: pulumi.Output<string>;
    public readonly casbProfile!: pulumi.Output<string | undefined>;
    public readonly cgnEif!: pulumi.Output<string>;
    public readonly cgnEim!: pulumi.Output<string>;
    public readonly cgnLogServerGrp!: pulumi.Output<string | undefined>;
    public readonly cgnResourceQuota!: pulumi.Output<number>;
    public readonly cgnSessionQuota!: pulumi.Output<number>;
    public readonly cifsProfile!: pulumi.Output<string | undefined>;
    public readonly comments!: pulumi.Output<string | undefined>;
    public readonly customLogFields!: pulumi.Output<string | undefined>;
    public readonly decryptedTrafficMirror!: pulumi.Output<string | undefined>;
    public readonly delayTcpNpuSession!: pulumi.Output<string>;
    public readonly devices!: pulumi.Output<string | undefined>;
    public readonly diameterFilterProfile!: pulumi.Output<string | undefined>;
    public readonly diffservCopy!: pulumi.Output<string>;
    public readonly diffservForward!: pulumi.Output<string>;
    public readonly diffservReverse!: pulumi.Output<string>;
    public readonly diffservcodeForward!: pulumi.Output<string | undefined>;
    public readonly diffservcodeRev!: pulumi.Output<string | undefined>;
    public readonly disclaimer!: pulumi.Output<string>;
    public readonly dlpProfile!: pulumi.Output<string | undefined>;
    public readonly dlpSensor!: pulumi.Output<string | undefined>;
    public readonly dnsfilterProfile!: pulumi.Output<string | undefined>;
    public readonly dscpMatch!: pulumi.Output<string | undefined>;
    public readonly dscpNegate!: pulumi.Output<string | undefined>;
    public readonly dscpValue!: pulumi.Output<string | undefined>;
    public readonly dsri!: pulumi.Output<string>;
    public readonly dstaddr6Negate!: pulumi.Output<string>;
    public readonly dstaddr6s!: pulumi.Output<string[]>;
    public readonly dstaddrNegate!: pulumi.Output<string>;
    public readonly dstaddrs!: pulumi.Output<string[]>;
    public readonly dstintfs!: pulumi.Output<string[]>;
    public readonly dynamicShaping!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly emailCollect!: pulumi.Output<string>;
    public readonly emailfilterProfile!: pulumi.Output<string | undefined>;
    public readonly fec!: pulumi.Output<string>;
    public readonly fileFilterProfile!: pulumi.Output<string | undefined>;
    public readonly firewallSessionDirty!: pulumi.Output<string | undefined>;
    public readonly fixedport!: pulumi.Output<string | undefined>;
    public readonly fsso!: pulumi.Output<string | undefined>;
    public readonly fssoAgentForNtlm!: pulumi.Output<string | undefined>;
    public readonly fssoGroups!: pulumi.Output<string[]>;
    public readonly geoipAnycast!: pulumi.Output<string>;
    public readonly geoipMatch!: pulumi.Output<string>;
    public readonly globalLabel!: pulumi.Output<string | undefined>;
    public readonly groups!: pulumi.Output<string[]>;
    public readonly gtpProfile!: pulumi.Output<string | undefined>;
    public readonly httpPolicyRedirect!: pulumi.Output<string | undefined>;
    public readonly icapProfile!: pulumi.Output<string | undefined>;
    public readonly identityBasedRoute!: pulumi.Output<string | undefined>;
    public readonly inbound!: pulumi.Output<string | undefined>;
    public readonly inspectionMode!: pulumi.Output<string>;
    public readonly internetService!: pulumi.Output<string>;
    public readonly internetService6!: pulumi.Output<string>;
    public readonly internetService6CustomGroups!: pulumi.Output<string[]>;
    public readonly internetService6Customs!: pulumi.Output<string[]>;
    public readonly internetService6Groups!: pulumi.Output<string[]>;
    public readonly internetService6Names!: pulumi.Output<string[]>;
    public readonly internetService6Negate!: pulumi.Output<string>;
    public readonly internetService6Src!: pulumi.Output<string>;
    public readonly internetService6SrcCustomGroups!: pulumi.Output<string[]>;
    public readonly internetService6SrcCustoms!: pulumi.Output<string[]>;
    public readonly internetService6SrcGroups!: pulumi.Output<string[]>;
    public readonly internetService6SrcNames!: pulumi.Output<string[]>;
    public readonly internetService6SrcNegate!: pulumi.Output<string>;
    public readonly internetServiceCustom!: pulumi.Output<string | undefined>;
    public readonly internetServiceCustomGroup!: pulumi.Output<string | undefined>;
    public readonly internetServiceGroup!: pulumi.Output<string | undefined>;
    public readonly internetServiceIds!: pulumi.Output<string[]>;
    public readonly internetServiceName!: pulumi.Output<string | undefined>;
    public readonly internetServiceNegate!: pulumi.Output<string | undefined>;
    public readonly internetServiceSrc!: pulumi.Output<string>;
    public readonly internetServiceSrcCustom!: pulumi.Output<string | undefined>;
    public readonly internetServiceSrcCustomGroup!: pulumi.Output<string | undefined>;
    public readonly internetServiceSrcGroup!: pulumi.Output<string | undefined>;
    public readonly internetServiceSrcId!: pulumi.Output<string | undefined>;
    public readonly internetServiceSrcName!: pulumi.Output<string | undefined>;
    public readonly internetServiceSrcNegate!: pulumi.Output<string | undefined>;
    public readonly ipVersionType!: pulumi.Output<string>;
    public readonly ippool!: pulumi.Output<string | undefined>;
    public readonly ipsSensor!: pulumi.Output<string | undefined>;
    public readonly ipsVoipFilter!: pulumi.Output<string | undefined>;
    public readonly label!: pulumi.Output<string | undefined>;
    public readonly learningMode!: pulumi.Output<string | undefined>;
    public readonly logtraffic!: pulumi.Output<string>;
    public readonly logtrafficStart!: pulumi.Output<string>;
    public readonly matchVip!: pulumi.Output<string>;
    public readonly matchVipOnly!: pulumi.Output<string>;
    public readonly mmsProfile!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nat!: pulumi.Output<string>;
    public readonly nat46!: pulumi.Output<string>;
    public readonly nat64!: pulumi.Output<string>;
    public readonly natinbound!: pulumi.Output<string | undefined>;
    public readonly natips!: pulumi.Output<string[]>;
    public readonly natoutbound!: pulumi.Output<string | undefined>;
    public readonly networkServiceDynamics!: pulumi.Output<string[]>;
    public readonly networkServiceSrcDynamics!: pulumi.Output<string[]>;
    public readonly npAcceleration!: pulumi.Output<string>;
    public readonly ntlm!: pulumi.Output<string | undefined>;
    public readonly ntlmEnabledBrowsers!: pulumi.Output<string[]>;
    public readonly ntlmGuest!: pulumi.Output<string | undefined>;
    public readonly outbound!: pulumi.Output<string | undefined>;
    public readonly passiveWanHealthMeasurement!: pulumi.Output<string>;
    public readonly pcpInbound!: pulumi.Output<string>;
    public readonly pcpOutbound!: pulumi.Output<string>;
    public readonly pcpPoolnames!: pulumi.Output<string[]>;
    public readonly perIpShaper!: pulumi.Output<string | undefined>;
    public readonly permitAnyHost!: pulumi.Output<string>;
    public readonly permitStunHost!: pulumi.Output<string | undefined>;
    public readonly pfcpProfile!: pulumi.Output<string | undefined>;
    public readonly pkg!: pulumi.Output<string>;
    public readonly pkgFolderPath!: pulumi.Output<string | undefined>;
    public readonly policyBehaviourType!: pulumi.Output<string>;
    public readonly policyExpiry!: pulumi.Output<string>;
    public readonly policyExpiryDate!: pulumi.Output<string>;
    public readonly policyExpiryDateUtc!: pulumi.Output<string | undefined>;
    public readonly policyOffload!: pulumi.Output<string>;
    public readonly policyid!: pulumi.Output<number>;
    public readonly poolname!: pulumi.Output<string | undefined>;
    public readonly poolname6!: pulumi.Output<string | undefined>;
    public readonly portPreserve!: pulumi.Output<string>;
    public readonly profileGroup!: pulumi.Output<string | undefined>;
    public readonly profileProtocolOptions!: pulumi.Output<string>;
    public readonly profileType!: pulumi.Output<string>;
    public readonly radiusMacAuthBypass!: pulumi.Output<string>;
    public readonly redirectUrl!: pulumi.Output<string | undefined>;
    public readonly replacemsgOverrideGroup!: pulumi.Output<string | undefined>;
    public readonly reputationDirection!: pulumi.Output<string | undefined>;
    public readonly reputationDirection6!: pulumi.Output<string>;
    public readonly reputationMinimum!: pulumi.Output<number | undefined>;
    public readonly reputationMinimum6!: pulumi.Output<number | undefined>;
    public readonly rsso!: pulumi.Output<string | undefined>;
    public readonly rtpAddr!: pulumi.Output<string | undefined>;
    public readonly rtpNat!: pulumi.Output<string>;
    public readonly scanBotnetConnections!: pulumi.Output<string | undefined>;
    public readonly schedule!: pulumi.Output<string | undefined>;
    public readonly scheduleTimeout!: pulumi.Output<string>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly sctpFilterProfile!: pulumi.Output<string | undefined>;
    public readonly sendDenyPacket!: pulumi.Output<string>;
    public readonly serviceNegate!: pulumi.Output<string>;
    public readonly services!: pulumi.Output<string[]>;
    public readonly sessionTtl!: pulumi.Output<string>;
    public readonly sgtCheck!: pulumi.Output<string>;
    public readonly sgts!: pulumi.Output<number[]>;
    public readonly spamfilterProfile!: pulumi.Output<string | undefined>;
    public readonly srcVendorMacs!: pulumi.Output<string[]>;
    public readonly srcaddr6Negate!: pulumi.Output<string>;
    public readonly srcaddr6s!: pulumi.Output<string[]>;
    public readonly srcaddrNegate!: pulumi.Output<string>;
    public readonly srcaddrs!: pulumi.Output<string[]>;
    public readonly srcintfs!: pulumi.Output<string[]>;
    public readonly sshFilterProfile!: pulumi.Output<string | undefined>;
    public readonly sshPolicyRedirect!: pulumi.Output<string | undefined>;
    public readonly sslMirror!: pulumi.Output<string | undefined>;
    public readonly sslMirrorIntf!: pulumi.Output<string | undefined>;
    public readonly sslSshProfile!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly tcpMssReceiver!: pulumi.Output<number | undefined>;
    public readonly tcpMssSender!: pulumi.Output<number | undefined>;
    public readonly tcpSessionWithoutSyn!: pulumi.Output<string>;
    public readonly tcpTimeoutPid!: pulumi.Output<string | undefined>;
    public readonly timeoutSendRst!: pulumi.Output<string>;
    public readonly tos!: pulumi.Output<string>;
    public readonly tosMask!: pulumi.Output<string>;
    public readonly tosNegate!: pulumi.Output<string>;
    public readonly trafficShaper!: pulumi.Output<string | undefined>;
    public readonly trafficShaperReverse!: pulumi.Output<string | undefined>;
    public readonly udpTimeoutPid!: pulumi.Output<string | undefined>;
    public readonly urlCategory!: pulumi.Output<string | undefined>;
    public readonly users!: pulumi.Output<string[]>;
    public readonly utmStatus!: pulumi.Output<string>;
    public readonly uuid!: pulumi.Output<string>;
    public readonly videofilterProfile!: pulumi.Output<string | undefined>;
    public readonly virtualPatchProfile!: pulumi.Output<string | undefined>;
    public readonly vlanCosFwd!: pulumi.Output<number>;
    public readonly vlanCosRev!: pulumi.Output<number>;
    public readonly vlanFilter!: pulumi.Output<string | undefined>;
    public readonly voipProfile!: pulumi.Output<string | undefined>;
    public readonly vpnDstNodes!: pulumi.Output<outputs.PackagesFirewallPolicyVpnDstNode[] | undefined>;
    public readonly vpnSrcNodes!: pulumi.Output<outputs.PackagesFirewallPolicyVpnSrcNode[] | undefined>;
    public readonly vpntunnel!: pulumi.Output<string | undefined>;
    public readonly wafProfile!: pulumi.Output<string | undefined>;
    public readonly wanopt!: pulumi.Output<string | undefined>;
    public readonly wanoptDetection!: pulumi.Output<string | undefined>;
    public readonly wanoptPassiveOpt!: pulumi.Output<string | undefined>;
    public readonly wanoptPeer!: pulumi.Output<string | undefined>;
    public readonly wanoptProfile!: pulumi.Output<string | undefined>;
    public readonly wccp!: pulumi.Output<string>;
    public readonly webcache!: pulumi.Output<string | undefined>;
    public readonly webcacheHttps!: pulumi.Output<string>;
    public readonly webfilterProfile!: pulumi.Output<string | undefined>;
    public readonly webproxyForwardServer!: pulumi.Output<string | undefined>;
    public readonly webproxyProfile!: pulumi.Output<string | undefined>;
    public readonly wsso!: pulumi.Output<string | undefined>;
    public readonly ztnaDeviceOwnership!: pulumi.Output<string>;
    public readonly ztnaEmsTag!: pulumi.Output<string | undefined>;
    public readonly ztnaEmsTagSecondaries!: pulumi.Output<string[]>;
    public readonly ztnaGeoTag!: pulumi.Output<string | undefined>;
    public readonly ztnaPolicyRedirect!: pulumi.Output<string>;
    public readonly ztnaStatus!: pulumi.Output<string>;
    public readonly ztnaTagsMatchLogic!: pulumi.Output<string>;

    /**
     * Create a PackagesFirewallPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PackagesFirewallPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PackagesFirewallPolicyArgs | PackagesFirewallPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PackagesFirewallPolicyState | undefined;
            resourceInputs["_policyBlock"] = state ? state._policyBlock : undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["antiReplay"] = state ? state.antiReplay : undefined;
            resourceInputs["appCategory"] = state ? state.appCategory : undefined;
            resourceInputs["appGroup"] = state ? state.appGroup : undefined;
            resourceInputs["applicationList"] = state ? state.applicationList : undefined;
            resourceInputs["applications"] = state ? state.applications : undefined;
            resourceInputs["authCert"] = state ? state.authCert : undefined;
            resourceInputs["authPath"] = state ? state.authPath : undefined;
            resourceInputs["authRedirectAddr"] = state ? state.authRedirectAddr : undefined;
            resourceInputs["autoAsicOffload"] = state ? state.autoAsicOffload : undefined;
            resourceInputs["avProfile"] = state ? state.avProfile : undefined;
            resourceInputs["bestRoute"] = state ? state.bestRoute : undefined;
            resourceInputs["blockNotification"] = state ? state.blockNotification : undefined;
            resourceInputs["captivePortalExempt"] = state ? state.captivePortalExempt : undefined;
            resourceInputs["capturePacket"] = state ? state.capturePacket : undefined;
            resourceInputs["casbProfile"] = state ? state.casbProfile : undefined;
            resourceInputs["cgnEif"] = state ? state.cgnEif : undefined;
            resourceInputs["cgnEim"] = state ? state.cgnEim : undefined;
            resourceInputs["cgnLogServerGrp"] = state ? state.cgnLogServerGrp : undefined;
            resourceInputs["cgnResourceQuota"] = state ? state.cgnResourceQuota : undefined;
            resourceInputs["cgnSessionQuota"] = state ? state.cgnSessionQuota : undefined;
            resourceInputs["cifsProfile"] = state ? state.cifsProfile : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["customLogFields"] = state ? state.customLogFields : undefined;
            resourceInputs["decryptedTrafficMirror"] = state ? state.decryptedTrafficMirror : undefined;
            resourceInputs["delayTcpNpuSession"] = state ? state.delayTcpNpuSession : undefined;
            resourceInputs["devices"] = state ? state.devices : undefined;
            resourceInputs["diameterFilterProfile"] = state ? state.diameterFilterProfile : undefined;
            resourceInputs["diffservCopy"] = state ? state.diffservCopy : undefined;
            resourceInputs["diffservForward"] = state ? state.diffservForward : undefined;
            resourceInputs["diffservReverse"] = state ? state.diffservReverse : undefined;
            resourceInputs["diffservcodeForward"] = state ? state.diffservcodeForward : undefined;
            resourceInputs["diffservcodeRev"] = state ? state.diffservcodeRev : undefined;
            resourceInputs["disclaimer"] = state ? state.disclaimer : undefined;
            resourceInputs["dlpProfile"] = state ? state.dlpProfile : undefined;
            resourceInputs["dlpSensor"] = state ? state.dlpSensor : undefined;
            resourceInputs["dnsfilterProfile"] = state ? state.dnsfilterProfile : undefined;
            resourceInputs["dscpMatch"] = state ? state.dscpMatch : undefined;
            resourceInputs["dscpNegate"] = state ? state.dscpNegate : undefined;
            resourceInputs["dscpValue"] = state ? state.dscpValue : undefined;
            resourceInputs["dsri"] = state ? state.dsri : undefined;
            resourceInputs["dstaddr6Negate"] = state ? state.dstaddr6Negate : undefined;
            resourceInputs["dstaddr6s"] = state ? state.dstaddr6s : undefined;
            resourceInputs["dstaddrNegate"] = state ? state.dstaddrNegate : undefined;
            resourceInputs["dstaddrs"] = state ? state.dstaddrs : undefined;
            resourceInputs["dstintfs"] = state ? state.dstintfs : undefined;
            resourceInputs["dynamicShaping"] = state ? state.dynamicShaping : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["emailCollect"] = state ? state.emailCollect : undefined;
            resourceInputs["emailfilterProfile"] = state ? state.emailfilterProfile : undefined;
            resourceInputs["fec"] = state ? state.fec : undefined;
            resourceInputs["fileFilterProfile"] = state ? state.fileFilterProfile : undefined;
            resourceInputs["firewallSessionDirty"] = state ? state.firewallSessionDirty : undefined;
            resourceInputs["fixedport"] = state ? state.fixedport : undefined;
            resourceInputs["fsso"] = state ? state.fsso : undefined;
            resourceInputs["fssoAgentForNtlm"] = state ? state.fssoAgentForNtlm : undefined;
            resourceInputs["fssoGroups"] = state ? state.fssoGroups : undefined;
            resourceInputs["geoipAnycast"] = state ? state.geoipAnycast : undefined;
            resourceInputs["geoipMatch"] = state ? state.geoipMatch : undefined;
            resourceInputs["globalLabel"] = state ? state.globalLabel : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["gtpProfile"] = state ? state.gtpProfile : undefined;
            resourceInputs["httpPolicyRedirect"] = state ? state.httpPolicyRedirect : undefined;
            resourceInputs["icapProfile"] = state ? state.icapProfile : undefined;
            resourceInputs["identityBasedRoute"] = state ? state.identityBasedRoute : undefined;
            resourceInputs["inbound"] = state ? state.inbound : undefined;
            resourceInputs["inspectionMode"] = state ? state.inspectionMode : undefined;
            resourceInputs["internetService"] = state ? state.internetService : undefined;
            resourceInputs["internetService6"] = state ? state.internetService6 : undefined;
            resourceInputs["internetService6CustomGroups"] = state ? state.internetService6CustomGroups : undefined;
            resourceInputs["internetService6Customs"] = state ? state.internetService6Customs : undefined;
            resourceInputs["internetService6Groups"] = state ? state.internetService6Groups : undefined;
            resourceInputs["internetService6Names"] = state ? state.internetService6Names : undefined;
            resourceInputs["internetService6Negate"] = state ? state.internetService6Negate : undefined;
            resourceInputs["internetService6Src"] = state ? state.internetService6Src : undefined;
            resourceInputs["internetService6SrcCustomGroups"] = state ? state.internetService6SrcCustomGroups : undefined;
            resourceInputs["internetService6SrcCustoms"] = state ? state.internetService6SrcCustoms : undefined;
            resourceInputs["internetService6SrcGroups"] = state ? state.internetService6SrcGroups : undefined;
            resourceInputs["internetService6SrcNames"] = state ? state.internetService6SrcNames : undefined;
            resourceInputs["internetService6SrcNegate"] = state ? state.internetService6SrcNegate : undefined;
            resourceInputs["internetServiceCustom"] = state ? state.internetServiceCustom : undefined;
            resourceInputs["internetServiceCustomGroup"] = state ? state.internetServiceCustomGroup : undefined;
            resourceInputs["internetServiceGroup"] = state ? state.internetServiceGroup : undefined;
            resourceInputs["internetServiceIds"] = state ? state.internetServiceIds : undefined;
            resourceInputs["internetServiceName"] = state ? state.internetServiceName : undefined;
            resourceInputs["internetServiceNegate"] = state ? state.internetServiceNegate : undefined;
            resourceInputs["internetServiceSrc"] = state ? state.internetServiceSrc : undefined;
            resourceInputs["internetServiceSrcCustom"] = state ? state.internetServiceSrcCustom : undefined;
            resourceInputs["internetServiceSrcCustomGroup"] = state ? state.internetServiceSrcCustomGroup : undefined;
            resourceInputs["internetServiceSrcGroup"] = state ? state.internetServiceSrcGroup : undefined;
            resourceInputs["internetServiceSrcId"] = state ? state.internetServiceSrcId : undefined;
            resourceInputs["internetServiceSrcName"] = state ? state.internetServiceSrcName : undefined;
            resourceInputs["internetServiceSrcNegate"] = state ? state.internetServiceSrcNegate : undefined;
            resourceInputs["ipVersionType"] = state ? state.ipVersionType : undefined;
            resourceInputs["ippool"] = state ? state.ippool : undefined;
            resourceInputs["ipsSensor"] = state ? state.ipsSensor : undefined;
            resourceInputs["ipsVoipFilter"] = state ? state.ipsVoipFilter : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["learningMode"] = state ? state.learningMode : undefined;
            resourceInputs["logtraffic"] = state ? state.logtraffic : undefined;
            resourceInputs["logtrafficStart"] = state ? state.logtrafficStart : undefined;
            resourceInputs["matchVip"] = state ? state.matchVip : undefined;
            resourceInputs["matchVipOnly"] = state ? state.matchVipOnly : undefined;
            resourceInputs["mmsProfile"] = state ? state.mmsProfile : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nat"] = state ? state.nat : undefined;
            resourceInputs["nat46"] = state ? state.nat46 : undefined;
            resourceInputs["nat64"] = state ? state.nat64 : undefined;
            resourceInputs["natinbound"] = state ? state.natinbound : undefined;
            resourceInputs["natips"] = state ? state.natips : undefined;
            resourceInputs["natoutbound"] = state ? state.natoutbound : undefined;
            resourceInputs["networkServiceDynamics"] = state ? state.networkServiceDynamics : undefined;
            resourceInputs["networkServiceSrcDynamics"] = state ? state.networkServiceSrcDynamics : undefined;
            resourceInputs["npAcceleration"] = state ? state.npAcceleration : undefined;
            resourceInputs["ntlm"] = state ? state.ntlm : undefined;
            resourceInputs["ntlmEnabledBrowsers"] = state ? state.ntlmEnabledBrowsers : undefined;
            resourceInputs["ntlmGuest"] = state ? state.ntlmGuest : undefined;
            resourceInputs["outbound"] = state ? state.outbound : undefined;
            resourceInputs["passiveWanHealthMeasurement"] = state ? state.passiveWanHealthMeasurement : undefined;
            resourceInputs["pcpInbound"] = state ? state.pcpInbound : undefined;
            resourceInputs["pcpOutbound"] = state ? state.pcpOutbound : undefined;
            resourceInputs["pcpPoolnames"] = state ? state.pcpPoolnames : undefined;
            resourceInputs["perIpShaper"] = state ? state.perIpShaper : undefined;
            resourceInputs["permitAnyHost"] = state ? state.permitAnyHost : undefined;
            resourceInputs["permitStunHost"] = state ? state.permitStunHost : undefined;
            resourceInputs["pfcpProfile"] = state ? state.pfcpProfile : undefined;
            resourceInputs["pkg"] = state ? state.pkg : undefined;
            resourceInputs["pkgFolderPath"] = state ? state.pkgFolderPath : undefined;
            resourceInputs["policyBehaviourType"] = state ? state.policyBehaviourType : undefined;
            resourceInputs["policyExpiry"] = state ? state.policyExpiry : undefined;
            resourceInputs["policyExpiryDate"] = state ? state.policyExpiryDate : undefined;
            resourceInputs["policyExpiryDateUtc"] = state ? state.policyExpiryDateUtc : undefined;
            resourceInputs["policyOffload"] = state ? state.policyOffload : undefined;
            resourceInputs["policyid"] = state ? state.policyid : undefined;
            resourceInputs["poolname"] = state ? state.poolname : undefined;
            resourceInputs["poolname6"] = state ? state.poolname6 : undefined;
            resourceInputs["portPreserve"] = state ? state.portPreserve : undefined;
            resourceInputs["profileGroup"] = state ? state.profileGroup : undefined;
            resourceInputs["profileProtocolOptions"] = state ? state.profileProtocolOptions : undefined;
            resourceInputs["profileType"] = state ? state.profileType : undefined;
            resourceInputs["radiusMacAuthBypass"] = state ? state.radiusMacAuthBypass : undefined;
            resourceInputs["redirectUrl"] = state ? state.redirectUrl : undefined;
            resourceInputs["replacemsgOverrideGroup"] = state ? state.replacemsgOverrideGroup : undefined;
            resourceInputs["reputationDirection"] = state ? state.reputationDirection : undefined;
            resourceInputs["reputationDirection6"] = state ? state.reputationDirection6 : undefined;
            resourceInputs["reputationMinimum"] = state ? state.reputationMinimum : undefined;
            resourceInputs["reputationMinimum6"] = state ? state.reputationMinimum6 : undefined;
            resourceInputs["rsso"] = state ? state.rsso : undefined;
            resourceInputs["rtpAddr"] = state ? state.rtpAddr : undefined;
            resourceInputs["rtpNat"] = state ? state.rtpNat : undefined;
            resourceInputs["scanBotnetConnections"] = state ? state.scanBotnetConnections : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["scheduleTimeout"] = state ? state.scheduleTimeout : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["sctpFilterProfile"] = state ? state.sctpFilterProfile : undefined;
            resourceInputs["sendDenyPacket"] = state ? state.sendDenyPacket : undefined;
            resourceInputs["serviceNegate"] = state ? state.serviceNegate : undefined;
            resourceInputs["services"] = state ? state.services : undefined;
            resourceInputs["sessionTtl"] = state ? state.sessionTtl : undefined;
            resourceInputs["sgtCheck"] = state ? state.sgtCheck : undefined;
            resourceInputs["sgts"] = state ? state.sgts : undefined;
            resourceInputs["spamfilterProfile"] = state ? state.spamfilterProfile : undefined;
            resourceInputs["srcVendorMacs"] = state ? state.srcVendorMacs : undefined;
            resourceInputs["srcaddr6Negate"] = state ? state.srcaddr6Negate : undefined;
            resourceInputs["srcaddr6s"] = state ? state.srcaddr6s : undefined;
            resourceInputs["srcaddrNegate"] = state ? state.srcaddrNegate : undefined;
            resourceInputs["srcaddrs"] = state ? state.srcaddrs : undefined;
            resourceInputs["srcintfs"] = state ? state.srcintfs : undefined;
            resourceInputs["sshFilterProfile"] = state ? state.sshFilterProfile : undefined;
            resourceInputs["sshPolicyRedirect"] = state ? state.sshPolicyRedirect : undefined;
            resourceInputs["sslMirror"] = state ? state.sslMirror : undefined;
            resourceInputs["sslMirrorIntf"] = state ? state.sslMirrorIntf : undefined;
            resourceInputs["sslSshProfile"] = state ? state.sslSshProfile : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tcpMssReceiver"] = state ? state.tcpMssReceiver : undefined;
            resourceInputs["tcpMssSender"] = state ? state.tcpMssSender : undefined;
            resourceInputs["tcpSessionWithoutSyn"] = state ? state.tcpSessionWithoutSyn : undefined;
            resourceInputs["tcpTimeoutPid"] = state ? state.tcpTimeoutPid : undefined;
            resourceInputs["timeoutSendRst"] = state ? state.timeoutSendRst : undefined;
            resourceInputs["tos"] = state ? state.tos : undefined;
            resourceInputs["tosMask"] = state ? state.tosMask : undefined;
            resourceInputs["tosNegate"] = state ? state.tosNegate : undefined;
            resourceInputs["trafficShaper"] = state ? state.trafficShaper : undefined;
            resourceInputs["trafficShaperReverse"] = state ? state.trafficShaperReverse : undefined;
            resourceInputs["udpTimeoutPid"] = state ? state.udpTimeoutPid : undefined;
            resourceInputs["urlCategory"] = state ? state.urlCategory : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
            resourceInputs["utmStatus"] = state ? state.utmStatus : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["videofilterProfile"] = state ? state.videofilterProfile : undefined;
            resourceInputs["virtualPatchProfile"] = state ? state.virtualPatchProfile : undefined;
            resourceInputs["vlanCosFwd"] = state ? state.vlanCosFwd : undefined;
            resourceInputs["vlanCosRev"] = state ? state.vlanCosRev : undefined;
            resourceInputs["vlanFilter"] = state ? state.vlanFilter : undefined;
            resourceInputs["voipProfile"] = state ? state.voipProfile : undefined;
            resourceInputs["vpnDstNodes"] = state ? state.vpnDstNodes : undefined;
            resourceInputs["vpnSrcNodes"] = state ? state.vpnSrcNodes : undefined;
            resourceInputs["vpntunnel"] = state ? state.vpntunnel : undefined;
            resourceInputs["wafProfile"] = state ? state.wafProfile : undefined;
            resourceInputs["wanopt"] = state ? state.wanopt : undefined;
            resourceInputs["wanoptDetection"] = state ? state.wanoptDetection : undefined;
            resourceInputs["wanoptPassiveOpt"] = state ? state.wanoptPassiveOpt : undefined;
            resourceInputs["wanoptPeer"] = state ? state.wanoptPeer : undefined;
            resourceInputs["wanoptProfile"] = state ? state.wanoptProfile : undefined;
            resourceInputs["wccp"] = state ? state.wccp : undefined;
            resourceInputs["webcache"] = state ? state.webcache : undefined;
            resourceInputs["webcacheHttps"] = state ? state.webcacheHttps : undefined;
            resourceInputs["webfilterProfile"] = state ? state.webfilterProfile : undefined;
            resourceInputs["webproxyForwardServer"] = state ? state.webproxyForwardServer : undefined;
            resourceInputs["webproxyProfile"] = state ? state.webproxyProfile : undefined;
            resourceInputs["wsso"] = state ? state.wsso : undefined;
            resourceInputs["ztnaDeviceOwnership"] = state ? state.ztnaDeviceOwnership : undefined;
            resourceInputs["ztnaEmsTag"] = state ? state.ztnaEmsTag : undefined;
            resourceInputs["ztnaEmsTagSecondaries"] = state ? state.ztnaEmsTagSecondaries : undefined;
            resourceInputs["ztnaGeoTag"] = state ? state.ztnaGeoTag : undefined;
            resourceInputs["ztnaPolicyRedirect"] = state ? state.ztnaPolicyRedirect : undefined;
            resourceInputs["ztnaStatus"] = state ? state.ztnaStatus : undefined;
            resourceInputs["ztnaTagsMatchLogic"] = state ? state.ztnaTagsMatchLogic : undefined;
        } else {
            const args = argsOrState as PackagesFirewallPolicyArgs | undefined;
            if ((!args || args.pkg === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pkg'");
            }
            resourceInputs["_policyBlock"] = args ? args._policyBlock : undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["antiReplay"] = args ? args.antiReplay : undefined;
            resourceInputs["appCategory"] = args ? args.appCategory : undefined;
            resourceInputs["appGroup"] = args ? args.appGroup : undefined;
            resourceInputs["applicationList"] = args ? args.applicationList : undefined;
            resourceInputs["applications"] = args ? args.applications : undefined;
            resourceInputs["authCert"] = args ? args.authCert : undefined;
            resourceInputs["authPath"] = args ? args.authPath : undefined;
            resourceInputs["authRedirectAddr"] = args ? args.authRedirectAddr : undefined;
            resourceInputs["autoAsicOffload"] = args ? args.autoAsicOffload : undefined;
            resourceInputs["avProfile"] = args ? args.avProfile : undefined;
            resourceInputs["bestRoute"] = args ? args.bestRoute : undefined;
            resourceInputs["blockNotification"] = args ? args.blockNotification : undefined;
            resourceInputs["captivePortalExempt"] = args ? args.captivePortalExempt : undefined;
            resourceInputs["capturePacket"] = args ? args.capturePacket : undefined;
            resourceInputs["casbProfile"] = args ? args.casbProfile : undefined;
            resourceInputs["cgnEif"] = args ? args.cgnEif : undefined;
            resourceInputs["cgnEim"] = args ? args.cgnEim : undefined;
            resourceInputs["cgnLogServerGrp"] = args ? args.cgnLogServerGrp : undefined;
            resourceInputs["cgnResourceQuota"] = args ? args.cgnResourceQuota : undefined;
            resourceInputs["cgnSessionQuota"] = args ? args.cgnSessionQuota : undefined;
            resourceInputs["cifsProfile"] = args ? args.cifsProfile : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["customLogFields"] = args ? args.customLogFields : undefined;
            resourceInputs["decryptedTrafficMirror"] = args ? args.decryptedTrafficMirror : undefined;
            resourceInputs["delayTcpNpuSession"] = args ? args.delayTcpNpuSession : undefined;
            resourceInputs["devices"] = args ? args.devices : undefined;
            resourceInputs["diameterFilterProfile"] = args ? args.diameterFilterProfile : undefined;
            resourceInputs["diffservCopy"] = args ? args.diffservCopy : undefined;
            resourceInputs["diffservForward"] = args ? args.diffservForward : undefined;
            resourceInputs["diffservReverse"] = args ? args.diffservReverse : undefined;
            resourceInputs["diffservcodeForward"] = args ? args.diffservcodeForward : undefined;
            resourceInputs["diffservcodeRev"] = args ? args.diffservcodeRev : undefined;
            resourceInputs["disclaimer"] = args ? args.disclaimer : undefined;
            resourceInputs["dlpProfile"] = args ? args.dlpProfile : undefined;
            resourceInputs["dlpSensor"] = args ? args.dlpSensor : undefined;
            resourceInputs["dnsfilterProfile"] = args ? args.dnsfilterProfile : undefined;
            resourceInputs["dscpMatch"] = args ? args.dscpMatch : undefined;
            resourceInputs["dscpNegate"] = args ? args.dscpNegate : undefined;
            resourceInputs["dscpValue"] = args ? args.dscpValue : undefined;
            resourceInputs["dsri"] = args ? args.dsri : undefined;
            resourceInputs["dstaddr6Negate"] = args ? args.dstaddr6Negate : undefined;
            resourceInputs["dstaddr6s"] = args ? args.dstaddr6s : undefined;
            resourceInputs["dstaddrNegate"] = args ? args.dstaddrNegate : undefined;
            resourceInputs["dstaddrs"] = args ? args.dstaddrs : undefined;
            resourceInputs["dstintfs"] = args ? args.dstintfs : undefined;
            resourceInputs["dynamicShaping"] = args ? args.dynamicShaping : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["emailCollect"] = args ? args.emailCollect : undefined;
            resourceInputs["emailfilterProfile"] = args ? args.emailfilterProfile : undefined;
            resourceInputs["fec"] = args ? args.fec : undefined;
            resourceInputs["fileFilterProfile"] = args ? args.fileFilterProfile : undefined;
            resourceInputs["firewallSessionDirty"] = args ? args.firewallSessionDirty : undefined;
            resourceInputs["fixedport"] = args ? args.fixedport : undefined;
            resourceInputs["fsso"] = args ? args.fsso : undefined;
            resourceInputs["fssoAgentForNtlm"] = args ? args.fssoAgentForNtlm : undefined;
            resourceInputs["fssoGroups"] = args ? args.fssoGroups : undefined;
            resourceInputs["geoipAnycast"] = args ? args.geoipAnycast : undefined;
            resourceInputs["geoipMatch"] = args ? args.geoipMatch : undefined;
            resourceInputs["globalLabel"] = args ? args.globalLabel : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["gtpProfile"] = args ? args.gtpProfile : undefined;
            resourceInputs["httpPolicyRedirect"] = args ? args.httpPolicyRedirect : undefined;
            resourceInputs["icapProfile"] = args ? args.icapProfile : undefined;
            resourceInputs["identityBasedRoute"] = args ? args.identityBasedRoute : undefined;
            resourceInputs["inbound"] = args ? args.inbound : undefined;
            resourceInputs["inspectionMode"] = args ? args.inspectionMode : undefined;
            resourceInputs["internetService"] = args ? args.internetService : undefined;
            resourceInputs["internetService6"] = args ? args.internetService6 : undefined;
            resourceInputs["internetService6CustomGroups"] = args ? args.internetService6CustomGroups : undefined;
            resourceInputs["internetService6Customs"] = args ? args.internetService6Customs : undefined;
            resourceInputs["internetService6Groups"] = args ? args.internetService6Groups : undefined;
            resourceInputs["internetService6Names"] = args ? args.internetService6Names : undefined;
            resourceInputs["internetService6Negate"] = args ? args.internetService6Negate : undefined;
            resourceInputs["internetService6Src"] = args ? args.internetService6Src : undefined;
            resourceInputs["internetService6SrcCustomGroups"] = args ? args.internetService6SrcCustomGroups : undefined;
            resourceInputs["internetService6SrcCustoms"] = args ? args.internetService6SrcCustoms : undefined;
            resourceInputs["internetService6SrcGroups"] = args ? args.internetService6SrcGroups : undefined;
            resourceInputs["internetService6SrcNames"] = args ? args.internetService6SrcNames : undefined;
            resourceInputs["internetService6SrcNegate"] = args ? args.internetService6SrcNegate : undefined;
            resourceInputs["internetServiceCustom"] = args ? args.internetServiceCustom : undefined;
            resourceInputs["internetServiceCustomGroup"] = args ? args.internetServiceCustomGroup : undefined;
            resourceInputs["internetServiceGroup"] = args ? args.internetServiceGroup : undefined;
            resourceInputs["internetServiceIds"] = args ? args.internetServiceIds : undefined;
            resourceInputs["internetServiceName"] = args ? args.internetServiceName : undefined;
            resourceInputs["internetServiceNegate"] = args ? args.internetServiceNegate : undefined;
            resourceInputs["internetServiceSrc"] = args ? args.internetServiceSrc : undefined;
            resourceInputs["internetServiceSrcCustom"] = args ? args.internetServiceSrcCustom : undefined;
            resourceInputs["internetServiceSrcCustomGroup"] = args ? args.internetServiceSrcCustomGroup : undefined;
            resourceInputs["internetServiceSrcGroup"] = args ? args.internetServiceSrcGroup : undefined;
            resourceInputs["internetServiceSrcId"] = args ? args.internetServiceSrcId : undefined;
            resourceInputs["internetServiceSrcName"] = args ? args.internetServiceSrcName : undefined;
            resourceInputs["internetServiceSrcNegate"] = args ? args.internetServiceSrcNegate : undefined;
            resourceInputs["ipVersionType"] = args ? args.ipVersionType : undefined;
            resourceInputs["ippool"] = args ? args.ippool : undefined;
            resourceInputs["ipsSensor"] = args ? args.ipsSensor : undefined;
            resourceInputs["ipsVoipFilter"] = args ? args.ipsVoipFilter : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["learningMode"] = args ? args.learningMode : undefined;
            resourceInputs["logtraffic"] = args ? args.logtraffic : undefined;
            resourceInputs["logtrafficStart"] = args ? args.logtrafficStart : undefined;
            resourceInputs["matchVip"] = args ? args.matchVip : undefined;
            resourceInputs["matchVipOnly"] = args ? args.matchVipOnly : undefined;
            resourceInputs["mmsProfile"] = args ? args.mmsProfile : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nat"] = args ? args.nat : undefined;
            resourceInputs["nat46"] = args ? args.nat46 : undefined;
            resourceInputs["nat64"] = args ? args.nat64 : undefined;
            resourceInputs["natinbound"] = args ? args.natinbound : undefined;
            resourceInputs["natips"] = args ? args.natips : undefined;
            resourceInputs["natoutbound"] = args ? args.natoutbound : undefined;
            resourceInputs["networkServiceDynamics"] = args ? args.networkServiceDynamics : undefined;
            resourceInputs["networkServiceSrcDynamics"] = args ? args.networkServiceSrcDynamics : undefined;
            resourceInputs["npAcceleration"] = args ? args.npAcceleration : undefined;
            resourceInputs["ntlm"] = args ? args.ntlm : undefined;
            resourceInputs["ntlmEnabledBrowsers"] = args ? args.ntlmEnabledBrowsers : undefined;
            resourceInputs["ntlmGuest"] = args ? args.ntlmGuest : undefined;
            resourceInputs["outbound"] = args ? args.outbound : undefined;
            resourceInputs["passiveWanHealthMeasurement"] = args ? args.passiveWanHealthMeasurement : undefined;
            resourceInputs["pcpInbound"] = args ? args.pcpInbound : undefined;
            resourceInputs["pcpOutbound"] = args ? args.pcpOutbound : undefined;
            resourceInputs["pcpPoolnames"] = args ? args.pcpPoolnames : undefined;
            resourceInputs["perIpShaper"] = args ? args.perIpShaper : undefined;
            resourceInputs["permitAnyHost"] = args ? args.permitAnyHost : undefined;
            resourceInputs["permitStunHost"] = args ? args.permitStunHost : undefined;
            resourceInputs["pfcpProfile"] = args ? args.pfcpProfile : undefined;
            resourceInputs["pkg"] = args ? args.pkg : undefined;
            resourceInputs["pkgFolderPath"] = args ? args.pkgFolderPath : undefined;
            resourceInputs["policyBehaviourType"] = args ? args.policyBehaviourType : undefined;
            resourceInputs["policyExpiry"] = args ? args.policyExpiry : undefined;
            resourceInputs["policyExpiryDate"] = args ? args.policyExpiryDate : undefined;
            resourceInputs["policyExpiryDateUtc"] = args ? args.policyExpiryDateUtc : undefined;
            resourceInputs["policyOffload"] = args ? args.policyOffload : undefined;
            resourceInputs["policyid"] = args ? args.policyid : undefined;
            resourceInputs["poolname"] = args ? args.poolname : undefined;
            resourceInputs["poolname6"] = args ? args.poolname6 : undefined;
            resourceInputs["portPreserve"] = args ? args.portPreserve : undefined;
            resourceInputs["profileGroup"] = args ? args.profileGroup : undefined;
            resourceInputs["profileProtocolOptions"] = args ? args.profileProtocolOptions : undefined;
            resourceInputs["profileType"] = args ? args.profileType : undefined;
            resourceInputs["radiusMacAuthBypass"] = args ? args.radiusMacAuthBypass : undefined;
            resourceInputs["redirectUrl"] = args ? args.redirectUrl : undefined;
            resourceInputs["replacemsgOverrideGroup"] = args ? args.replacemsgOverrideGroup : undefined;
            resourceInputs["reputationDirection"] = args ? args.reputationDirection : undefined;
            resourceInputs["reputationDirection6"] = args ? args.reputationDirection6 : undefined;
            resourceInputs["reputationMinimum"] = args ? args.reputationMinimum : undefined;
            resourceInputs["reputationMinimum6"] = args ? args.reputationMinimum6 : undefined;
            resourceInputs["rsso"] = args ? args.rsso : undefined;
            resourceInputs["rtpAddr"] = args ? args.rtpAddr : undefined;
            resourceInputs["rtpNat"] = args ? args.rtpNat : undefined;
            resourceInputs["scanBotnetConnections"] = args ? args.scanBotnetConnections : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["scheduleTimeout"] = args ? args.scheduleTimeout : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["sctpFilterProfile"] = args ? args.sctpFilterProfile : undefined;
            resourceInputs["sendDenyPacket"] = args ? args.sendDenyPacket : undefined;
            resourceInputs["serviceNegate"] = args ? args.serviceNegate : undefined;
            resourceInputs["services"] = args ? args.services : undefined;
            resourceInputs["sessionTtl"] = args ? args.sessionTtl : undefined;
            resourceInputs["sgtCheck"] = args ? args.sgtCheck : undefined;
            resourceInputs["sgts"] = args ? args.sgts : undefined;
            resourceInputs["spamfilterProfile"] = args ? args.spamfilterProfile : undefined;
            resourceInputs["srcVendorMacs"] = args ? args.srcVendorMacs : undefined;
            resourceInputs["srcaddr6Negate"] = args ? args.srcaddr6Negate : undefined;
            resourceInputs["srcaddr6s"] = args ? args.srcaddr6s : undefined;
            resourceInputs["srcaddrNegate"] = args ? args.srcaddrNegate : undefined;
            resourceInputs["srcaddrs"] = args ? args.srcaddrs : undefined;
            resourceInputs["srcintfs"] = args ? args.srcintfs : undefined;
            resourceInputs["sshFilterProfile"] = args ? args.sshFilterProfile : undefined;
            resourceInputs["sshPolicyRedirect"] = args ? args.sshPolicyRedirect : undefined;
            resourceInputs["sslMirror"] = args ? args.sslMirror : undefined;
            resourceInputs["sslMirrorIntf"] = args ? args.sslMirrorIntf : undefined;
            resourceInputs["sslSshProfile"] = args ? args.sslSshProfile : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tcpMssReceiver"] = args ? args.tcpMssReceiver : undefined;
            resourceInputs["tcpMssSender"] = args ? args.tcpMssSender : undefined;
            resourceInputs["tcpSessionWithoutSyn"] = args ? args.tcpSessionWithoutSyn : undefined;
            resourceInputs["tcpTimeoutPid"] = args ? args.tcpTimeoutPid : undefined;
            resourceInputs["timeoutSendRst"] = args ? args.timeoutSendRst : undefined;
            resourceInputs["tos"] = args ? args.tos : undefined;
            resourceInputs["tosMask"] = args ? args.tosMask : undefined;
            resourceInputs["tosNegate"] = args ? args.tosNegate : undefined;
            resourceInputs["trafficShaper"] = args ? args.trafficShaper : undefined;
            resourceInputs["trafficShaperReverse"] = args ? args.trafficShaperReverse : undefined;
            resourceInputs["udpTimeoutPid"] = args ? args.udpTimeoutPid : undefined;
            resourceInputs["urlCategory"] = args ? args.urlCategory : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
            resourceInputs["utmStatus"] = args ? args.utmStatus : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["videofilterProfile"] = args ? args.videofilterProfile : undefined;
            resourceInputs["virtualPatchProfile"] = args ? args.virtualPatchProfile : undefined;
            resourceInputs["vlanCosFwd"] = args ? args.vlanCosFwd : undefined;
            resourceInputs["vlanCosRev"] = args ? args.vlanCosRev : undefined;
            resourceInputs["vlanFilter"] = args ? args.vlanFilter : undefined;
            resourceInputs["voipProfile"] = args ? args.voipProfile : undefined;
            resourceInputs["vpnDstNodes"] = args ? args.vpnDstNodes : undefined;
            resourceInputs["vpnSrcNodes"] = args ? args.vpnSrcNodes : undefined;
            resourceInputs["vpntunnel"] = args ? args.vpntunnel : undefined;
            resourceInputs["wafProfile"] = args ? args.wafProfile : undefined;
            resourceInputs["wanopt"] = args ? args.wanopt : undefined;
            resourceInputs["wanoptDetection"] = args ? args.wanoptDetection : undefined;
            resourceInputs["wanoptPassiveOpt"] = args ? args.wanoptPassiveOpt : undefined;
            resourceInputs["wanoptPeer"] = args ? args.wanoptPeer : undefined;
            resourceInputs["wanoptProfile"] = args ? args.wanoptProfile : undefined;
            resourceInputs["wccp"] = args ? args.wccp : undefined;
            resourceInputs["webcache"] = args ? args.webcache : undefined;
            resourceInputs["webcacheHttps"] = args ? args.webcacheHttps : undefined;
            resourceInputs["webfilterProfile"] = args ? args.webfilterProfile : undefined;
            resourceInputs["webproxyForwardServer"] = args ? args.webproxyForwardServer : undefined;
            resourceInputs["webproxyProfile"] = args ? args.webproxyProfile : undefined;
            resourceInputs["wsso"] = args ? args.wsso : undefined;
            resourceInputs["ztnaDeviceOwnership"] = args ? args.ztnaDeviceOwnership : undefined;
            resourceInputs["ztnaEmsTag"] = args ? args.ztnaEmsTag : undefined;
            resourceInputs["ztnaEmsTagSecondaries"] = args ? args.ztnaEmsTagSecondaries : undefined;
            resourceInputs["ztnaGeoTag"] = args ? args.ztnaGeoTag : undefined;
            resourceInputs["ztnaPolicyRedirect"] = args ? args.ztnaPolicyRedirect : undefined;
            resourceInputs["ztnaStatus"] = args ? args.ztnaStatus : undefined;
            resourceInputs["ztnaTagsMatchLogic"] = args ? args.ztnaTagsMatchLogic : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PackagesFirewallPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PackagesFirewallPolicy resources.
 */
export interface PackagesFirewallPolicyState {
    _policyBlock?: pulumi.Input<number>;
    action?: pulumi.Input<string>;
    adom?: pulumi.Input<string>;
    antiReplay?: pulumi.Input<string>;
    appCategory?: pulumi.Input<string>;
    appGroup?: pulumi.Input<string>;
    applicationList?: pulumi.Input<string>;
    applications?: pulumi.Input<pulumi.Input<number>[]>;
    authCert?: pulumi.Input<string>;
    authPath?: pulumi.Input<string>;
    authRedirectAddr?: pulumi.Input<string>;
    autoAsicOffload?: pulumi.Input<string>;
    avProfile?: pulumi.Input<string>;
    bestRoute?: pulumi.Input<string>;
    blockNotification?: pulumi.Input<string>;
    captivePortalExempt?: pulumi.Input<string>;
    capturePacket?: pulumi.Input<string>;
    casbProfile?: pulumi.Input<string>;
    cgnEif?: pulumi.Input<string>;
    cgnEim?: pulumi.Input<string>;
    cgnLogServerGrp?: pulumi.Input<string>;
    cgnResourceQuota?: pulumi.Input<number>;
    cgnSessionQuota?: pulumi.Input<number>;
    cifsProfile?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    customLogFields?: pulumi.Input<string>;
    decryptedTrafficMirror?: pulumi.Input<string>;
    delayTcpNpuSession?: pulumi.Input<string>;
    devices?: pulumi.Input<string>;
    diameterFilterProfile?: pulumi.Input<string>;
    diffservCopy?: pulumi.Input<string>;
    diffservForward?: pulumi.Input<string>;
    diffservReverse?: pulumi.Input<string>;
    diffservcodeForward?: pulumi.Input<string>;
    diffservcodeRev?: pulumi.Input<string>;
    disclaimer?: pulumi.Input<string>;
    dlpProfile?: pulumi.Input<string>;
    dlpSensor?: pulumi.Input<string>;
    dnsfilterProfile?: pulumi.Input<string>;
    dscpMatch?: pulumi.Input<string>;
    dscpNegate?: pulumi.Input<string>;
    dscpValue?: pulumi.Input<string>;
    dsri?: pulumi.Input<string>;
    dstaddr6Negate?: pulumi.Input<string>;
    dstaddr6s?: pulumi.Input<pulumi.Input<string>[]>;
    dstaddrNegate?: pulumi.Input<string>;
    dstaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    dstintfs?: pulumi.Input<pulumi.Input<string>[]>;
    dynamicShaping?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    emailCollect?: pulumi.Input<string>;
    emailfilterProfile?: pulumi.Input<string>;
    fec?: pulumi.Input<string>;
    fileFilterProfile?: pulumi.Input<string>;
    firewallSessionDirty?: pulumi.Input<string>;
    fixedport?: pulumi.Input<string>;
    fsso?: pulumi.Input<string>;
    fssoAgentForNtlm?: pulumi.Input<string>;
    fssoGroups?: pulumi.Input<pulumi.Input<string>[]>;
    geoipAnycast?: pulumi.Input<string>;
    geoipMatch?: pulumi.Input<string>;
    globalLabel?: pulumi.Input<string>;
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    gtpProfile?: pulumi.Input<string>;
    httpPolicyRedirect?: pulumi.Input<string>;
    icapProfile?: pulumi.Input<string>;
    identityBasedRoute?: pulumi.Input<string>;
    inbound?: pulumi.Input<string>;
    inspectionMode?: pulumi.Input<string>;
    internetService?: pulumi.Input<string>;
    internetService6?: pulumi.Input<string>;
    internetService6CustomGroups?: pulumi.Input<pulumi.Input<string>[]>;
    internetService6Customs?: pulumi.Input<pulumi.Input<string>[]>;
    internetService6Groups?: pulumi.Input<pulumi.Input<string>[]>;
    internetService6Names?: pulumi.Input<pulumi.Input<string>[]>;
    internetService6Negate?: pulumi.Input<string>;
    internetService6Src?: pulumi.Input<string>;
    internetService6SrcCustomGroups?: pulumi.Input<pulumi.Input<string>[]>;
    internetService6SrcCustoms?: pulumi.Input<pulumi.Input<string>[]>;
    internetService6SrcGroups?: pulumi.Input<pulumi.Input<string>[]>;
    internetService6SrcNames?: pulumi.Input<pulumi.Input<string>[]>;
    internetService6SrcNegate?: pulumi.Input<string>;
    internetServiceCustom?: pulumi.Input<string>;
    internetServiceCustomGroup?: pulumi.Input<string>;
    internetServiceGroup?: pulumi.Input<string>;
    internetServiceIds?: pulumi.Input<pulumi.Input<string>[]>;
    internetServiceName?: pulumi.Input<string>;
    internetServiceNegate?: pulumi.Input<string>;
    internetServiceSrc?: pulumi.Input<string>;
    internetServiceSrcCustom?: pulumi.Input<string>;
    internetServiceSrcCustomGroup?: pulumi.Input<string>;
    internetServiceSrcGroup?: pulumi.Input<string>;
    internetServiceSrcId?: pulumi.Input<string>;
    internetServiceSrcName?: pulumi.Input<string>;
    internetServiceSrcNegate?: pulumi.Input<string>;
    ipVersionType?: pulumi.Input<string>;
    ippool?: pulumi.Input<string>;
    ipsSensor?: pulumi.Input<string>;
    ipsVoipFilter?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    learningMode?: pulumi.Input<string>;
    logtraffic?: pulumi.Input<string>;
    logtrafficStart?: pulumi.Input<string>;
    matchVip?: pulumi.Input<string>;
    matchVipOnly?: pulumi.Input<string>;
    mmsProfile?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nat?: pulumi.Input<string>;
    nat46?: pulumi.Input<string>;
    nat64?: pulumi.Input<string>;
    natinbound?: pulumi.Input<string>;
    natips?: pulumi.Input<pulumi.Input<string>[]>;
    natoutbound?: pulumi.Input<string>;
    networkServiceDynamics?: pulumi.Input<pulumi.Input<string>[]>;
    networkServiceSrcDynamics?: pulumi.Input<pulumi.Input<string>[]>;
    npAcceleration?: pulumi.Input<string>;
    ntlm?: pulumi.Input<string>;
    ntlmEnabledBrowsers?: pulumi.Input<pulumi.Input<string>[]>;
    ntlmGuest?: pulumi.Input<string>;
    outbound?: pulumi.Input<string>;
    passiveWanHealthMeasurement?: pulumi.Input<string>;
    pcpInbound?: pulumi.Input<string>;
    pcpOutbound?: pulumi.Input<string>;
    pcpPoolnames?: pulumi.Input<pulumi.Input<string>[]>;
    perIpShaper?: pulumi.Input<string>;
    permitAnyHost?: pulumi.Input<string>;
    permitStunHost?: pulumi.Input<string>;
    pfcpProfile?: pulumi.Input<string>;
    pkg?: pulumi.Input<string>;
    pkgFolderPath?: pulumi.Input<string>;
    policyBehaviourType?: pulumi.Input<string>;
    policyExpiry?: pulumi.Input<string>;
    policyExpiryDate?: pulumi.Input<string>;
    policyExpiryDateUtc?: pulumi.Input<string>;
    policyOffload?: pulumi.Input<string>;
    policyid?: pulumi.Input<number>;
    poolname?: pulumi.Input<string>;
    poolname6?: pulumi.Input<string>;
    portPreserve?: pulumi.Input<string>;
    profileGroup?: pulumi.Input<string>;
    profileProtocolOptions?: pulumi.Input<string>;
    profileType?: pulumi.Input<string>;
    radiusMacAuthBypass?: pulumi.Input<string>;
    redirectUrl?: pulumi.Input<string>;
    replacemsgOverrideGroup?: pulumi.Input<string>;
    reputationDirection?: pulumi.Input<string>;
    reputationDirection6?: pulumi.Input<string>;
    reputationMinimum?: pulumi.Input<number>;
    reputationMinimum6?: pulumi.Input<number>;
    rsso?: pulumi.Input<string>;
    rtpAddr?: pulumi.Input<string>;
    rtpNat?: pulumi.Input<string>;
    scanBotnetConnections?: pulumi.Input<string>;
    schedule?: pulumi.Input<string>;
    scheduleTimeout?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    sctpFilterProfile?: pulumi.Input<string>;
    sendDenyPacket?: pulumi.Input<string>;
    serviceNegate?: pulumi.Input<string>;
    services?: pulumi.Input<pulumi.Input<string>[]>;
    sessionTtl?: pulumi.Input<string>;
    sgtCheck?: pulumi.Input<string>;
    sgts?: pulumi.Input<pulumi.Input<number>[]>;
    spamfilterProfile?: pulumi.Input<string>;
    srcVendorMacs?: pulumi.Input<pulumi.Input<string>[]>;
    srcaddr6Negate?: pulumi.Input<string>;
    srcaddr6s?: pulumi.Input<pulumi.Input<string>[]>;
    srcaddrNegate?: pulumi.Input<string>;
    srcaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    srcintfs?: pulumi.Input<pulumi.Input<string>[]>;
    sshFilterProfile?: pulumi.Input<string>;
    sshPolicyRedirect?: pulumi.Input<string>;
    sslMirror?: pulumi.Input<string>;
    sslMirrorIntf?: pulumi.Input<string>;
    sslSshProfile?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tcpMssReceiver?: pulumi.Input<number>;
    tcpMssSender?: pulumi.Input<number>;
    tcpSessionWithoutSyn?: pulumi.Input<string>;
    tcpTimeoutPid?: pulumi.Input<string>;
    timeoutSendRst?: pulumi.Input<string>;
    tos?: pulumi.Input<string>;
    tosMask?: pulumi.Input<string>;
    tosNegate?: pulumi.Input<string>;
    trafficShaper?: pulumi.Input<string>;
    trafficShaperReverse?: pulumi.Input<string>;
    udpTimeoutPid?: pulumi.Input<string>;
    urlCategory?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<string>[]>;
    utmStatus?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    videofilterProfile?: pulumi.Input<string>;
    virtualPatchProfile?: pulumi.Input<string>;
    vlanCosFwd?: pulumi.Input<number>;
    vlanCosRev?: pulumi.Input<number>;
    vlanFilter?: pulumi.Input<string>;
    voipProfile?: pulumi.Input<string>;
    vpnDstNodes?: pulumi.Input<pulumi.Input<inputs.PackagesFirewallPolicyVpnDstNode>[]>;
    vpnSrcNodes?: pulumi.Input<pulumi.Input<inputs.PackagesFirewallPolicyVpnSrcNode>[]>;
    vpntunnel?: pulumi.Input<string>;
    wafProfile?: pulumi.Input<string>;
    wanopt?: pulumi.Input<string>;
    wanoptDetection?: pulumi.Input<string>;
    wanoptPassiveOpt?: pulumi.Input<string>;
    wanoptPeer?: pulumi.Input<string>;
    wanoptProfile?: pulumi.Input<string>;
    wccp?: pulumi.Input<string>;
    webcache?: pulumi.Input<string>;
    webcacheHttps?: pulumi.Input<string>;
    webfilterProfile?: pulumi.Input<string>;
    webproxyForwardServer?: pulumi.Input<string>;
    webproxyProfile?: pulumi.Input<string>;
    wsso?: pulumi.Input<string>;
    ztnaDeviceOwnership?: pulumi.Input<string>;
    ztnaEmsTag?: pulumi.Input<string>;
    ztnaEmsTagSecondaries?: pulumi.Input<pulumi.Input<string>[]>;
    ztnaGeoTag?: pulumi.Input<string>;
    ztnaPolicyRedirect?: pulumi.Input<string>;
    ztnaStatus?: pulumi.Input<string>;
    ztnaTagsMatchLogic?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PackagesFirewallPolicy resource.
 */
export interface PackagesFirewallPolicyArgs {
    _policyBlock?: pulumi.Input<number>;
    action?: pulumi.Input<string>;
    adom?: pulumi.Input<string>;
    antiReplay?: pulumi.Input<string>;
    appCategory?: pulumi.Input<string>;
    appGroup?: pulumi.Input<string>;
    applicationList?: pulumi.Input<string>;
    applications?: pulumi.Input<pulumi.Input<number>[]>;
    authCert?: pulumi.Input<string>;
    authPath?: pulumi.Input<string>;
    authRedirectAddr?: pulumi.Input<string>;
    autoAsicOffload?: pulumi.Input<string>;
    avProfile?: pulumi.Input<string>;
    bestRoute?: pulumi.Input<string>;
    blockNotification?: pulumi.Input<string>;
    captivePortalExempt?: pulumi.Input<string>;
    capturePacket?: pulumi.Input<string>;
    casbProfile?: pulumi.Input<string>;
    cgnEif?: pulumi.Input<string>;
    cgnEim?: pulumi.Input<string>;
    cgnLogServerGrp?: pulumi.Input<string>;
    cgnResourceQuota?: pulumi.Input<number>;
    cgnSessionQuota?: pulumi.Input<number>;
    cifsProfile?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    customLogFields?: pulumi.Input<string>;
    decryptedTrafficMirror?: pulumi.Input<string>;
    delayTcpNpuSession?: pulumi.Input<string>;
    devices?: pulumi.Input<string>;
    diameterFilterProfile?: pulumi.Input<string>;
    diffservCopy?: pulumi.Input<string>;
    diffservForward?: pulumi.Input<string>;
    diffservReverse?: pulumi.Input<string>;
    diffservcodeForward?: pulumi.Input<string>;
    diffservcodeRev?: pulumi.Input<string>;
    disclaimer?: pulumi.Input<string>;
    dlpProfile?: pulumi.Input<string>;
    dlpSensor?: pulumi.Input<string>;
    dnsfilterProfile?: pulumi.Input<string>;
    dscpMatch?: pulumi.Input<string>;
    dscpNegate?: pulumi.Input<string>;
    dscpValue?: pulumi.Input<string>;
    dsri?: pulumi.Input<string>;
    dstaddr6Negate?: pulumi.Input<string>;
    dstaddr6s?: pulumi.Input<pulumi.Input<string>[]>;
    dstaddrNegate?: pulumi.Input<string>;
    dstaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    dstintfs?: pulumi.Input<pulumi.Input<string>[]>;
    dynamicShaping?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    emailCollect?: pulumi.Input<string>;
    emailfilterProfile?: pulumi.Input<string>;
    fec?: pulumi.Input<string>;
    fileFilterProfile?: pulumi.Input<string>;
    firewallSessionDirty?: pulumi.Input<string>;
    fixedport?: pulumi.Input<string>;
    fsso?: pulumi.Input<string>;
    fssoAgentForNtlm?: pulumi.Input<string>;
    fssoGroups?: pulumi.Input<pulumi.Input<string>[]>;
    geoipAnycast?: pulumi.Input<string>;
    geoipMatch?: pulumi.Input<string>;
    globalLabel?: pulumi.Input<string>;
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    gtpProfile?: pulumi.Input<string>;
    httpPolicyRedirect?: pulumi.Input<string>;
    icapProfile?: pulumi.Input<string>;
    identityBasedRoute?: pulumi.Input<string>;
    inbound?: pulumi.Input<string>;
    inspectionMode?: pulumi.Input<string>;
    internetService?: pulumi.Input<string>;
    internetService6?: pulumi.Input<string>;
    internetService6CustomGroups?: pulumi.Input<pulumi.Input<string>[]>;
    internetService6Customs?: pulumi.Input<pulumi.Input<string>[]>;
    internetService6Groups?: pulumi.Input<pulumi.Input<string>[]>;
    internetService6Names?: pulumi.Input<pulumi.Input<string>[]>;
    internetService6Negate?: pulumi.Input<string>;
    internetService6Src?: pulumi.Input<string>;
    internetService6SrcCustomGroups?: pulumi.Input<pulumi.Input<string>[]>;
    internetService6SrcCustoms?: pulumi.Input<pulumi.Input<string>[]>;
    internetService6SrcGroups?: pulumi.Input<pulumi.Input<string>[]>;
    internetService6SrcNames?: pulumi.Input<pulumi.Input<string>[]>;
    internetService6SrcNegate?: pulumi.Input<string>;
    internetServiceCustom?: pulumi.Input<string>;
    internetServiceCustomGroup?: pulumi.Input<string>;
    internetServiceGroup?: pulumi.Input<string>;
    internetServiceIds?: pulumi.Input<pulumi.Input<string>[]>;
    internetServiceName?: pulumi.Input<string>;
    internetServiceNegate?: pulumi.Input<string>;
    internetServiceSrc?: pulumi.Input<string>;
    internetServiceSrcCustom?: pulumi.Input<string>;
    internetServiceSrcCustomGroup?: pulumi.Input<string>;
    internetServiceSrcGroup?: pulumi.Input<string>;
    internetServiceSrcId?: pulumi.Input<string>;
    internetServiceSrcName?: pulumi.Input<string>;
    internetServiceSrcNegate?: pulumi.Input<string>;
    ipVersionType?: pulumi.Input<string>;
    ippool?: pulumi.Input<string>;
    ipsSensor?: pulumi.Input<string>;
    ipsVoipFilter?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    learningMode?: pulumi.Input<string>;
    logtraffic?: pulumi.Input<string>;
    logtrafficStart?: pulumi.Input<string>;
    matchVip?: pulumi.Input<string>;
    matchVipOnly?: pulumi.Input<string>;
    mmsProfile?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nat?: pulumi.Input<string>;
    nat46?: pulumi.Input<string>;
    nat64?: pulumi.Input<string>;
    natinbound?: pulumi.Input<string>;
    natips?: pulumi.Input<pulumi.Input<string>[]>;
    natoutbound?: pulumi.Input<string>;
    networkServiceDynamics?: pulumi.Input<pulumi.Input<string>[]>;
    networkServiceSrcDynamics?: pulumi.Input<pulumi.Input<string>[]>;
    npAcceleration?: pulumi.Input<string>;
    ntlm?: pulumi.Input<string>;
    ntlmEnabledBrowsers?: pulumi.Input<pulumi.Input<string>[]>;
    ntlmGuest?: pulumi.Input<string>;
    outbound?: pulumi.Input<string>;
    passiveWanHealthMeasurement?: pulumi.Input<string>;
    pcpInbound?: pulumi.Input<string>;
    pcpOutbound?: pulumi.Input<string>;
    pcpPoolnames?: pulumi.Input<pulumi.Input<string>[]>;
    perIpShaper?: pulumi.Input<string>;
    permitAnyHost?: pulumi.Input<string>;
    permitStunHost?: pulumi.Input<string>;
    pfcpProfile?: pulumi.Input<string>;
    pkg: pulumi.Input<string>;
    pkgFolderPath?: pulumi.Input<string>;
    policyBehaviourType?: pulumi.Input<string>;
    policyExpiry?: pulumi.Input<string>;
    policyExpiryDate?: pulumi.Input<string>;
    policyExpiryDateUtc?: pulumi.Input<string>;
    policyOffload?: pulumi.Input<string>;
    policyid?: pulumi.Input<number>;
    poolname?: pulumi.Input<string>;
    poolname6?: pulumi.Input<string>;
    portPreserve?: pulumi.Input<string>;
    profileGroup?: pulumi.Input<string>;
    profileProtocolOptions?: pulumi.Input<string>;
    profileType?: pulumi.Input<string>;
    radiusMacAuthBypass?: pulumi.Input<string>;
    redirectUrl?: pulumi.Input<string>;
    replacemsgOverrideGroup?: pulumi.Input<string>;
    reputationDirection?: pulumi.Input<string>;
    reputationDirection6?: pulumi.Input<string>;
    reputationMinimum?: pulumi.Input<number>;
    reputationMinimum6?: pulumi.Input<number>;
    rsso?: pulumi.Input<string>;
    rtpAddr?: pulumi.Input<string>;
    rtpNat?: pulumi.Input<string>;
    scanBotnetConnections?: pulumi.Input<string>;
    schedule?: pulumi.Input<string>;
    scheduleTimeout?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    sctpFilterProfile?: pulumi.Input<string>;
    sendDenyPacket?: pulumi.Input<string>;
    serviceNegate?: pulumi.Input<string>;
    services?: pulumi.Input<pulumi.Input<string>[]>;
    sessionTtl?: pulumi.Input<string>;
    sgtCheck?: pulumi.Input<string>;
    sgts?: pulumi.Input<pulumi.Input<number>[]>;
    spamfilterProfile?: pulumi.Input<string>;
    srcVendorMacs?: pulumi.Input<pulumi.Input<string>[]>;
    srcaddr6Negate?: pulumi.Input<string>;
    srcaddr6s?: pulumi.Input<pulumi.Input<string>[]>;
    srcaddrNegate?: pulumi.Input<string>;
    srcaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    srcintfs?: pulumi.Input<pulumi.Input<string>[]>;
    sshFilterProfile?: pulumi.Input<string>;
    sshPolicyRedirect?: pulumi.Input<string>;
    sslMirror?: pulumi.Input<string>;
    sslMirrorIntf?: pulumi.Input<string>;
    sslSshProfile?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tcpMssReceiver?: pulumi.Input<number>;
    tcpMssSender?: pulumi.Input<number>;
    tcpSessionWithoutSyn?: pulumi.Input<string>;
    tcpTimeoutPid?: pulumi.Input<string>;
    timeoutSendRst?: pulumi.Input<string>;
    tos?: pulumi.Input<string>;
    tosMask?: pulumi.Input<string>;
    tosNegate?: pulumi.Input<string>;
    trafficShaper?: pulumi.Input<string>;
    trafficShaperReverse?: pulumi.Input<string>;
    udpTimeoutPid?: pulumi.Input<string>;
    urlCategory?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<string>[]>;
    utmStatus?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    videofilterProfile?: pulumi.Input<string>;
    virtualPatchProfile?: pulumi.Input<string>;
    vlanCosFwd?: pulumi.Input<number>;
    vlanCosRev?: pulumi.Input<number>;
    vlanFilter?: pulumi.Input<string>;
    voipProfile?: pulumi.Input<string>;
    vpnDstNodes?: pulumi.Input<pulumi.Input<inputs.PackagesFirewallPolicyVpnDstNode>[]>;
    vpnSrcNodes?: pulumi.Input<pulumi.Input<inputs.PackagesFirewallPolicyVpnSrcNode>[]>;
    vpntunnel?: pulumi.Input<string>;
    wafProfile?: pulumi.Input<string>;
    wanopt?: pulumi.Input<string>;
    wanoptDetection?: pulumi.Input<string>;
    wanoptPassiveOpt?: pulumi.Input<string>;
    wanoptPeer?: pulumi.Input<string>;
    wanoptProfile?: pulumi.Input<string>;
    wccp?: pulumi.Input<string>;
    webcache?: pulumi.Input<string>;
    webcacheHttps?: pulumi.Input<string>;
    webfilterProfile?: pulumi.Input<string>;
    webproxyForwardServer?: pulumi.Input<string>;
    webproxyProfile?: pulumi.Input<string>;
    wsso?: pulumi.Input<string>;
    ztnaDeviceOwnership?: pulumi.Input<string>;
    ztnaEmsTag?: pulumi.Input<string>;
    ztnaEmsTagSecondaries?: pulumi.Input<pulumi.Input<string>[]>;
    ztnaGeoTag?: pulumi.Input<string>;
    ztnaPolicyRedirect?: pulumi.Input<string>;
    ztnaStatus?: pulumi.Input<string>;
    ztnaTagsMatchLogic?: pulumi.Input<string>;
}
