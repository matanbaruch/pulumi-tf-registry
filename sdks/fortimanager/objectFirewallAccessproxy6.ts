// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ObjectFirewallAccessproxy6 extends pulumi.CustomResource {
    /**
     * Get an existing ObjectFirewallAccessproxy6 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectFirewallAccessproxy6State, opts?: pulumi.CustomResourceOptions): ObjectFirewallAccessproxy6 {
        return new ObjectFirewallAccessproxy6(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/objectFirewallAccessproxy6:ObjectFirewallAccessproxy6';

    /**
     * Returns true if the given object is an instance of ObjectFirewallAccessproxy6.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectFirewallAccessproxy6 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectFirewallAccessproxy6.__pulumiType;
    }

    public readonly addVhostDomainToDnsdb!: pulumi.Output<string>;
    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly apiGateway6s!: pulumi.Output<outputs.ObjectFirewallAccessproxy6ApiGateway6[] | undefined>;
    public readonly apiGateways!: pulumi.Output<outputs.ObjectFirewallAccessproxy6ApiGateway[] | undefined>;
    public readonly authPortal!: pulumi.Output<string>;
    public readonly authVirtualHost!: pulumi.Output<string | undefined>;
    public readonly clientCert!: pulumi.Output<string>;
    public readonly decryptedTrafficMirror!: pulumi.Output<string | undefined>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly emptyCertAction!: pulumi.Output<string>;
    public readonly httpSupportedMaxVersion!: pulumi.Output<string>;
    public readonly logBlockedTraffic!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly svrPoolMultiplex!: pulumi.Output<string>;
    public readonly svrPoolServerMaxConcurrentRequest!: pulumi.Output<number | undefined>;
    public readonly svrPoolServerMaxRequest!: pulumi.Output<number | undefined>;
    public readonly svrPoolTtl!: pulumi.Output<number>;
    public readonly userAgentDetect!: pulumi.Output<string>;
    public readonly vip!: pulumi.Output<string | undefined>;

    /**
     * Create a ObjectFirewallAccessproxy6 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ObjectFirewallAccessproxy6Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectFirewallAccessproxy6Args | ObjectFirewallAccessproxy6State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectFirewallAccessproxy6State | undefined;
            resourceInputs["addVhostDomainToDnsdb"] = state ? state.addVhostDomainToDnsdb : undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["apiGateway6s"] = state ? state.apiGateway6s : undefined;
            resourceInputs["apiGateways"] = state ? state.apiGateways : undefined;
            resourceInputs["authPortal"] = state ? state.authPortal : undefined;
            resourceInputs["authVirtualHost"] = state ? state.authVirtualHost : undefined;
            resourceInputs["clientCert"] = state ? state.clientCert : undefined;
            resourceInputs["decryptedTrafficMirror"] = state ? state.decryptedTrafficMirror : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["emptyCertAction"] = state ? state.emptyCertAction : undefined;
            resourceInputs["httpSupportedMaxVersion"] = state ? state.httpSupportedMaxVersion : undefined;
            resourceInputs["logBlockedTraffic"] = state ? state.logBlockedTraffic : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["svrPoolMultiplex"] = state ? state.svrPoolMultiplex : undefined;
            resourceInputs["svrPoolServerMaxConcurrentRequest"] = state ? state.svrPoolServerMaxConcurrentRequest : undefined;
            resourceInputs["svrPoolServerMaxRequest"] = state ? state.svrPoolServerMaxRequest : undefined;
            resourceInputs["svrPoolTtl"] = state ? state.svrPoolTtl : undefined;
            resourceInputs["userAgentDetect"] = state ? state.userAgentDetect : undefined;
            resourceInputs["vip"] = state ? state.vip : undefined;
        } else {
            const args = argsOrState as ObjectFirewallAccessproxy6Args | undefined;
            resourceInputs["addVhostDomainToDnsdb"] = args ? args.addVhostDomainToDnsdb : undefined;
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["apiGateway6s"] = args ? args.apiGateway6s : undefined;
            resourceInputs["apiGateways"] = args ? args.apiGateways : undefined;
            resourceInputs["authPortal"] = args ? args.authPortal : undefined;
            resourceInputs["authVirtualHost"] = args ? args.authVirtualHost : undefined;
            resourceInputs["clientCert"] = args ? args.clientCert : undefined;
            resourceInputs["decryptedTrafficMirror"] = args ? args.decryptedTrafficMirror : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["emptyCertAction"] = args ? args.emptyCertAction : undefined;
            resourceInputs["httpSupportedMaxVersion"] = args ? args.httpSupportedMaxVersion : undefined;
            resourceInputs["logBlockedTraffic"] = args ? args.logBlockedTraffic : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["svrPoolMultiplex"] = args ? args.svrPoolMultiplex : undefined;
            resourceInputs["svrPoolServerMaxConcurrentRequest"] = args ? args.svrPoolServerMaxConcurrentRequest : undefined;
            resourceInputs["svrPoolServerMaxRequest"] = args ? args.svrPoolServerMaxRequest : undefined;
            resourceInputs["svrPoolTtl"] = args ? args.svrPoolTtl : undefined;
            resourceInputs["userAgentDetect"] = args ? args.userAgentDetect : undefined;
            resourceInputs["vip"] = args ? args.vip : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectFirewallAccessproxy6.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectFirewallAccessproxy6 resources.
 */
export interface ObjectFirewallAccessproxy6State {
    addVhostDomainToDnsdb?: pulumi.Input<string>;
    adom?: pulumi.Input<string>;
    apiGateway6s?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallAccessproxy6ApiGateway6>[]>;
    apiGateways?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallAccessproxy6ApiGateway>[]>;
    authPortal?: pulumi.Input<string>;
    authVirtualHost?: pulumi.Input<string>;
    clientCert?: pulumi.Input<string>;
    decryptedTrafficMirror?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    emptyCertAction?: pulumi.Input<string>;
    httpSupportedMaxVersion?: pulumi.Input<string>;
    logBlockedTraffic?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    svrPoolMultiplex?: pulumi.Input<string>;
    svrPoolServerMaxConcurrentRequest?: pulumi.Input<number>;
    svrPoolServerMaxRequest?: pulumi.Input<number>;
    svrPoolTtl?: pulumi.Input<number>;
    userAgentDetect?: pulumi.Input<string>;
    vip?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectFirewallAccessproxy6 resource.
 */
export interface ObjectFirewallAccessproxy6Args {
    addVhostDomainToDnsdb?: pulumi.Input<string>;
    adom?: pulumi.Input<string>;
    apiGateway6s?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallAccessproxy6ApiGateway6>[]>;
    apiGateways?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallAccessproxy6ApiGateway>[]>;
    authPortal?: pulumi.Input<string>;
    authVirtualHost?: pulumi.Input<string>;
    clientCert?: pulumi.Input<string>;
    decryptedTrafficMirror?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    emptyCertAction?: pulumi.Input<string>;
    httpSupportedMaxVersion?: pulumi.Input<string>;
    logBlockedTraffic?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    svrPoolMultiplex?: pulumi.Input<string>;
    svrPoolServerMaxConcurrentRequest?: pulumi.Input<number>;
    svrPoolServerMaxRequest?: pulumi.Input<number>;
    svrPoolTtl?: pulumi.Input<number>;
    userAgentDetect?: pulumi.Input<string>;
    vip?: pulumi.Input<string>;
}
