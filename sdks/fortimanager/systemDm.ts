// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SystemDm extends pulumi.CustomResource {
    /**
     * Get an existing SystemDm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemDmState, opts?: pulumi.CustomResourceOptions): SystemDm {
        return new SystemDm(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/systemDm:SystemDm';

    /**
     * Returns true if the given object is an instance of SystemDm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemDm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemDm.__pulumiType;
    }

    public readonly concurrentInstallImageLimit!: pulumi.Output<number>;
    public readonly concurrentInstallLimit!: pulumi.Output<number>;
    public readonly concurrentInstallScriptLimit!: pulumi.Output<number>;
    public readonly confMergeAfterScript!: pulumi.Output<string>;
    public readonly discoverTimeout!: pulumi.Output<number>;
    public readonly dpmLogsize!: pulumi.Output<number>;
    public readonly fgfmAutoRetrieveTimeout!: pulumi.Output<number>;
    public readonly fgfmInstallRefreshCount!: pulumi.Output<number>;
    public readonly fgfmKeepaliveItvl!: pulumi.Output<number>;
    public readonly fgfmSockTimeout!: pulumi.Output<number>;
    public readonly forceRemoteDiff!: pulumi.Output<string>;
    public readonly fortiapRefreshCnt!: pulumi.Output<number>;
    public readonly fortiapRefreshItvl!: pulumi.Output<number>;
    public readonly fortiextRefreshCnt!: pulumi.Output<number>;
    public readonly installFdsTimeout!: pulumi.Output<number>;
    public readonly installImageTimeout!: pulumi.Output<number>;
    public readonly installTunnelRetryItvl!: pulumi.Output<number>;
    public readonly logAutoupdate!: pulumi.Output<string>;
    public readonly maxRevs!: pulumi.Output<number>;
    public readonly nrRetry!: pulumi.Output<number>;
    public readonly retry!: pulumi.Output<string>;
    public readonly retryIntvl!: pulumi.Output<number>;
    public readonly rollbackAllowReboot!: pulumi.Output<string>;
    public readonly scriptLogsize!: pulumi.Output<number>;
    public readonly skipScepCheck!: pulumi.Output<string>;
    public readonly skipTunnelFcpReq!: pulumi.Output<string>;
    public readonly verifyInstall!: pulumi.Output<string>;

    /**
     * Create a SystemDm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemDmArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemDmArgs | SystemDmState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemDmState | undefined;
            resourceInputs["concurrentInstallImageLimit"] = state ? state.concurrentInstallImageLimit : undefined;
            resourceInputs["concurrentInstallLimit"] = state ? state.concurrentInstallLimit : undefined;
            resourceInputs["concurrentInstallScriptLimit"] = state ? state.concurrentInstallScriptLimit : undefined;
            resourceInputs["confMergeAfterScript"] = state ? state.confMergeAfterScript : undefined;
            resourceInputs["discoverTimeout"] = state ? state.discoverTimeout : undefined;
            resourceInputs["dpmLogsize"] = state ? state.dpmLogsize : undefined;
            resourceInputs["fgfmAutoRetrieveTimeout"] = state ? state.fgfmAutoRetrieveTimeout : undefined;
            resourceInputs["fgfmInstallRefreshCount"] = state ? state.fgfmInstallRefreshCount : undefined;
            resourceInputs["fgfmKeepaliveItvl"] = state ? state.fgfmKeepaliveItvl : undefined;
            resourceInputs["fgfmSockTimeout"] = state ? state.fgfmSockTimeout : undefined;
            resourceInputs["forceRemoteDiff"] = state ? state.forceRemoteDiff : undefined;
            resourceInputs["fortiapRefreshCnt"] = state ? state.fortiapRefreshCnt : undefined;
            resourceInputs["fortiapRefreshItvl"] = state ? state.fortiapRefreshItvl : undefined;
            resourceInputs["fortiextRefreshCnt"] = state ? state.fortiextRefreshCnt : undefined;
            resourceInputs["installFdsTimeout"] = state ? state.installFdsTimeout : undefined;
            resourceInputs["installImageTimeout"] = state ? state.installImageTimeout : undefined;
            resourceInputs["installTunnelRetryItvl"] = state ? state.installTunnelRetryItvl : undefined;
            resourceInputs["logAutoupdate"] = state ? state.logAutoupdate : undefined;
            resourceInputs["maxRevs"] = state ? state.maxRevs : undefined;
            resourceInputs["nrRetry"] = state ? state.nrRetry : undefined;
            resourceInputs["retry"] = state ? state.retry : undefined;
            resourceInputs["retryIntvl"] = state ? state.retryIntvl : undefined;
            resourceInputs["rollbackAllowReboot"] = state ? state.rollbackAllowReboot : undefined;
            resourceInputs["scriptLogsize"] = state ? state.scriptLogsize : undefined;
            resourceInputs["skipScepCheck"] = state ? state.skipScepCheck : undefined;
            resourceInputs["skipTunnelFcpReq"] = state ? state.skipTunnelFcpReq : undefined;
            resourceInputs["verifyInstall"] = state ? state.verifyInstall : undefined;
        } else {
            const args = argsOrState as SystemDmArgs | undefined;
            resourceInputs["concurrentInstallImageLimit"] = args ? args.concurrentInstallImageLimit : undefined;
            resourceInputs["concurrentInstallLimit"] = args ? args.concurrentInstallLimit : undefined;
            resourceInputs["concurrentInstallScriptLimit"] = args ? args.concurrentInstallScriptLimit : undefined;
            resourceInputs["confMergeAfterScript"] = args ? args.confMergeAfterScript : undefined;
            resourceInputs["discoverTimeout"] = args ? args.discoverTimeout : undefined;
            resourceInputs["dpmLogsize"] = args ? args.dpmLogsize : undefined;
            resourceInputs["fgfmAutoRetrieveTimeout"] = args ? args.fgfmAutoRetrieveTimeout : undefined;
            resourceInputs["fgfmInstallRefreshCount"] = args ? args.fgfmInstallRefreshCount : undefined;
            resourceInputs["fgfmKeepaliveItvl"] = args ? args.fgfmKeepaliveItvl : undefined;
            resourceInputs["fgfmSockTimeout"] = args ? args.fgfmSockTimeout : undefined;
            resourceInputs["forceRemoteDiff"] = args ? args.forceRemoteDiff : undefined;
            resourceInputs["fortiapRefreshCnt"] = args ? args.fortiapRefreshCnt : undefined;
            resourceInputs["fortiapRefreshItvl"] = args ? args.fortiapRefreshItvl : undefined;
            resourceInputs["fortiextRefreshCnt"] = args ? args.fortiextRefreshCnt : undefined;
            resourceInputs["installFdsTimeout"] = args ? args.installFdsTimeout : undefined;
            resourceInputs["installImageTimeout"] = args ? args.installImageTimeout : undefined;
            resourceInputs["installTunnelRetryItvl"] = args ? args.installTunnelRetryItvl : undefined;
            resourceInputs["logAutoupdate"] = args ? args.logAutoupdate : undefined;
            resourceInputs["maxRevs"] = args ? args.maxRevs : undefined;
            resourceInputs["nrRetry"] = args ? args.nrRetry : undefined;
            resourceInputs["retry"] = args ? args.retry : undefined;
            resourceInputs["retryIntvl"] = args ? args.retryIntvl : undefined;
            resourceInputs["rollbackAllowReboot"] = args ? args.rollbackAllowReboot : undefined;
            resourceInputs["scriptLogsize"] = args ? args.scriptLogsize : undefined;
            resourceInputs["skipScepCheck"] = args ? args.skipScepCheck : undefined;
            resourceInputs["skipTunnelFcpReq"] = args ? args.skipTunnelFcpReq : undefined;
            resourceInputs["verifyInstall"] = args ? args.verifyInstall : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemDm.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemDm resources.
 */
export interface SystemDmState {
    concurrentInstallImageLimit?: pulumi.Input<number>;
    concurrentInstallLimit?: pulumi.Input<number>;
    concurrentInstallScriptLimit?: pulumi.Input<number>;
    confMergeAfterScript?: pulumi.Input<string>;
    discoverTimeout?: pulumi.Input<number>;
    dpmLogsize?: pulumi.Input<number>;
    fgfmAutoRetrieveTimeout?: pulumi.Input<number>;
    fgfmInstallRefreshCount?: pulumi.Input<number>;
    fgfmKeepaliveItvl?: pulumi.Input<number>;
    fgfmSockTimeout?: pulumi.Input<number>;
    forceRemoteDiff?: pulumi.Input<string>;
    fortiapRefreshCnt?: pulumi.Input<number>;
    fortiapRefreshItvl?: pulumi.Input<number>;
    fortiextRefreshCnt?: pulumi.Input<number>;
    installFdsTimeout?: pulumi.Input<number>;
    installImageTimeout?: pulumi.Input<number>;
    installTunnelRetryItvl?: pulumi.Input<number>;
    logAutoupdate?: pulumi.Input<string>;
    maxRevs?: pulumi.Input<number>;
    nrRetry?: pulumi.Input<number>;
    retry?: pulumi.Input<string>;
    retryIntvl?: pulumi.Input<number>;
    rollbackAllowReboot?: pulumi.Input<string>;
    scriptLogsize?: pulumi.Input<number>;
    skipScepCheck?: pulumi.Input<string>;
    skipTunnelFcpReq?: pulumi.Input<string>;
    verifyInstall?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemDm resource.
 */
export interface SystemDmArgs {
    concurrentInstallImageLimit?: pulumi.Input<number>;
    concurrentInstallLimit?: pulumi.Input<number>;
    concurrentInstallScriptLimit?: pulumi.Input<number>;
    confMergeAfterScript?: pulumi.Input<string>;
    discoverTimeout?: pulumi.Input<number>;
    dpmLogsize?: pulumi.Input<number>;
    fgfmAutoRetrieveTimeout?: pulumi.Input<number>;
    fgfmInstallRefreshCount?: pulumi.Input<number>;
    fgfmKeepaliveItvl?: pulumi.Input<number>;
    fgfmSockTimeout?: pulumi.Input<number>;
    forceRemoteDiff?: pulumi.Input<string>;
    fortiapRefreshCnt?: pulumi.Input<number>;
    fortiapRefreshItvl?: pulumi.Input<number>;
    fortiextRefreshCnt?: pulumi.Input<number>;
    installFdsTimeout?: pulumi.Input<number>;
    installImageTimeout?: pulumi.Input<number>;
    installTunnelRetryItvl?: pulumi.Input<number>;
    logAutoupdate?: pulumi.Input<string>;
    maxRevs?: pulumi.Input<number>;
    nrRetry?: pulumi.Input<number>;
    retry?: pulumi.Input<string>;
    retryIntvl?: pulumi.Input<number>;
    rollbackAllowReboot?: pulumi.Input<string>;
    scriptLogsize?: pulumi.Input<number>;
    skipScepCheck?: pulumi.Input<string>;
    skipTunnelFcpReq?: pulumi.Input<string>;
    verifyInstall?: pulumi.Input<string>;
}
