// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ObjectCasbUseractivityControloptionsOperations extends pulumi.CustomResource {
    /**
     * Get an existing ObjectCasbUseractivityControloptionsOperations resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectCasbUseractivityControloptionsOperationsState, opts?: pulumi.CustomResourceOptions): ObjectCasbUseractivityControloptionsOperations {
        return new ObjectCasbUseractivityControloptionsOperations(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/objectCasbUseractivityControloptionsOperations:ObjectCasbUseractivityControloptionsOperations';

    /**
     * Returns true if the given object is an instance of ObjectCasbUseractivityControloptionsOperations.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectCasbUseractivityControloptionsOperations {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectCasbUseractivityControloptionsOperations.__pulumiType;
    }

    public readonly action!: pulumi.Output<string>;
    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly caseSensitive!: pulumi.Output<string>;
    public readonly controlOptions!: pulumi.Output<string>;
    public readonly direction!: pulumi.Output<string>;
    public readonly headerName!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly searchKey!: pulumi.Output<string | undefined>;
    public readonly searchPattern!: pulumi.Output<string>;
    public readonly target!: pulumi.Output<string>;
    public readonly userActivity!: pulumi.Output<string>;
    public readonly valueFromInput!: pulumi.Output<string>;
    public readonly values!: pulumi.Output<string[]>;

    /**
     * Create a ObjectCasbUseractivityControloptionsOperations resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObjectCasbUseractivityControloptionsOperationsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectCasbUseractivityControloptionsOperationsArgs | ObjectCasbUseractivityControloptionsOperationsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectCasbUseractivityControloptionsOperationsState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["caseSensitive"] = state ? state.caseSensitive : undefined;
            resourceInputs["controlOptions"] = state ? state.controlOptions : undefined;
            resourceInputs["direction"] = state ? state.direction : undefined;
            resourceInputs["headerName"] = state ? state.headerName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["searchKey"] = state ? state.searchKey : undefined;
            resourceInputs["searchPattern"] = state ? state.searchPattern : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
            resourceInputs["userActivity"] = state ? state.userActivity : undefined;
            resourceInputs["valueFromInput"] = state ? state.valueFromInput : undefined;
            resourceInputs["values"] = state ? state.values : undefined;
        } else {
            const args = argsOrState as ObjectCasbUseractivityControloptionsOperationsArgs | undefined;
            if ((!args || args.controlOptions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'controlOptions'");
            }
            if ((!args || args.userActivity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userActivity'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["caseSensitive"] = args ? args.caseSensitive : undefined;
            resourceInputs["controlOptions"] = args ? args.controlOptions : undefined;
            resourceInputs["direction"] = args ? args.direction : undefined;
            resourceInputs["headerName"] = args ? args.headerName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["searchKey"] = args ? args.searchKey : undefined;
            resourceInputs["searchPattern"] = args ? args.searchPattern : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["userActivity"] = args ? args.userActivity : undefined;
            resourceInputs["valueFromInput"] = args ? args.valueFromInput : undefined;
            resourceInputs["values"] = args ? args.values : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectCasbUseractivityControloptionsOperations.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectCasbUseractivityControloptionsOperations resources.
 */
export interface ObjectCasbUseractivityControloptionsOperationsState {
    action?: pulumi.Input<string>;
    adom?: pulumi.Input<string>;
    caseSensitive?: pulumi.Input<string>;
    controlOptions?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    headerName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    searchKey?: pulumi.Input<string>;
    searchPattern?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
    userActivity?: pulumi.Input<string>;
    valueFromInput?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ObjectCasbUseractivityControloptionsOperations resource.
 */
export interface ObjectCasbUseractivityControloptionsOperationsArgs {
    action?: pulumi.Input<string>;
    adom?: pulumi.Input<string>;
    caseSensitive?: pulumi.Input<string>;
    controlOptions: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    headerName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    searchKey?: pulumi.Input<string>;
    searchPattern?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
    userActivity: pulumi.Input<string>;
    valueFromInput?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}
