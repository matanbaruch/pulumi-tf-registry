// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ObjectWanoptProfile extends pulumi.CustomResource {
    /**
     * Get an existing ObjectWanoptProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectWanoptProfileState, opts?: pulumi.CustomResourceOptions): ObjectWanoptProfile {
        return new ObjectWanoptProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/objectWanoptProfile:ObjectWanoptProfile';

    /**
     * Returns true if the given object is an instance of ObjectWanoptProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectWanoptProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectWanoptProfile.__pulumiType;
    }

    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly authGroup!: pulumi.Output<string | undefined>;
    public readonly cifs!: pulumi.Output<outputs.ObjectWanoptProfileCifs | undefined>;
    public readonly comments!: pulumi.Output<string | undefined>;
    public readonly ftp!: pulumi.Output<outputs.ObjectWanoptProfileFtp | undefined>;
    public readonly http!: pulumi.Output<outputs.ObjectWanoptProfileHttp | undefined>;
    public readonly mapi!: pulumi.Output<outputs.ObjectWanoptProfileMapi | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly tcp!: pulumi.Output<outputs.ObjectWanoptProfileTcp | undefined>;
    public readonly transparent!: pulumi.Output<string>;

    /**
     * Create a ObjectWanoptProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ObjectWanoptProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectWanoptProfileArgs | ObjectWanoptProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectWanoptProfileState | undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["authGroup"] = state ? state.authGroup : undefined;
            resourceInputs["cifs"] = state ? state.cifs : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["ftp"] = state ? state.ftp : undefined;
            resourceInputs["http"] = state ? state.http : undefined;
            resourceInputs["mapi"] = state ? state.mapi : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["tcp"] = state ? state.tcp : undefined;
            resourceInputs["transparent"] = state ? state.transparent : undefined;
        } else {
            const args = argsOrState as ObjectWanoptProfileArgs | undefined;
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["authGroup"] = args ? args.authGroup : undefined;
            resourceInputs["cifs"] = args ? args.cifs : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["ftp"] = args ? args.ftp : undefined;
            resourceInputs["http"] = args ? args.http : undefined;
            resourceInputs["mapi"] = args ? args.mapi : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["tcp"] = args ? args.tcp : undefined;
            resourceInputs["transparent"] = args ? args.transparent : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectWanoptProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectWanoptProfile resources.
 */
export interface ObjectWanoptProfileState {
    adom?: pulumi.Input<string>;
    authGroup?: pulumi.Input<string>;
    cifs?: pulumi.Input<inputs.ObjectWanoptProfileCifs>;
    comments?: pulumi.Input<string>;
    ftp?: pulumi.Input<inputs.ObjectWanoptProfileFtp>;
    http?: pulumi.Input<inputs.ObjectWanoptProfileHttp>;
    mapi?: pulumi.Input<inputs.ObjectWanoptProfileMapi>;
    name?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    tcp?: pulumi.Input<inputs.ObjectWanoptProfileTcp>;
    transparent?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectWanoptProfile resource.
 */
export interface ObjectWanoptProfileArgs {
    adom?: pulumi.Input<string>;
    authGroup?: pulumi.Input<string>;
    cifs?: pulumi.Input<inputs.ObjectWanoptProfileCifs>;
    comments?: pulumi.Input<string>;
    ftp?: pulumi.Input<inputs.ObjectWanoptProfileFtp>;
    http?: pulumi.Input<inputs.ObjectWanoptProfileHttp>;
    mapi?: pulumi.Input<inputs.ObjectWanoptProfileMapi>;
    name?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    tcp?: pulumi.Input<inputs.ObjectWanoptProfileTcp>;
    transparent?: pulumi.Input<string>;
}
