// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ObjectSwitchcontrollerDslPolicy extends pulumi.CustomResource {
    /**
     * Get an existing ObjectSwitchcontrollerDslPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectSwitchcontrollerDslPolicyState, opts?: pulumi.CustomResourceOptions): ObjectSwitchcontrollerDslPolicy {
        return new ObjectSwitchcontrollerDslPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/objectSwitchcontrollerDslPolicy:ObjectSwitchcontrollerDslPolicy';

    /**
     * Returns true if the given object is an instance of ObjectSwitchcontrollerDslPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectSwitchcontrollerDslPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectSwitchcontrollerDslPolicy.__pulumiType;
    }

    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly appendPadding!: pulumi.Output<string>;
    public readonly cpeAele!: pulumi.Output<string>;
    public readonly cpeAeleMode!: pulumi.Output<string>;
    public readonly cs!: pulumi.Output<string[]>;
    public readonly dsBitswap!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly pauseFrame!: pulumi.Output<string>;
    public readonly profile!: pulumi.Output<string>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly usBitswap!: pulumi.Output<string>;

    /**
     * Create a ObjectSwitchcontrollerDslPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ObjectSwitchcontrollerDslPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectSwitchcontrollerDslPolicyArgs | ObjectSwitchcontrollerDslPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectSwitchcontrollerDslPolicyState | undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["appendPadding"] = state ? state.appendPadding : undefined;
            resourceInputs["cpeAele"] = state ? state.cpeAele : undefined;
            resourceInputs["cpeAeleMode"] = state ? state.cpeAeleMode : undefined;
            resourceInputs["cs"] = state ? state.cs : undefined;
            resourceInputs["dsBitswap"] = state ? state.dsBitswap : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pauseFrame"] = state ? state.pauseFrame : undefined;
            resourceInputs["profile"] = state ? state.profile : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["usBitswap"] = state ? state.usBitswap : undefined;
        } else {
            const args = argsOrState as ObjectSwitchcontrollerDslPolicyArgs | undefined;
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["appendPadding"] = args ? args.appendPadding : undefined;
            resourceInputs["cpeAele"] = args ? args.cpeAele : undefined;
            resourceInputs["cpeAeleMode"] = args ? args.cpeAeleMode : undefined;
            resourceInputs["cs"] = args ? args.cs : undefined;
            resourceInputs["dsBitswap"] = args ? args.dsBitswap : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pauseFrame"] = args ? args.pauseFrame : undefined;
            resourceInputs["profile"] = args ? args.profile : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["usBitswap"] = args ? args.usBitswap : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectSwitchcontrollerDslPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectSwitchcontrollerDslPolicy resources.
 */
export interface ObjectSwitchcontrollerDslPolicyState {
    adom?: pulumi.Input<string>;
    appendPadding?: pulumi.Input<string>;
    cpeAele?: pulumi.Input<string>;
    cpeAeleMode?: pulumi.Input<string>;
    cs?: pulumi.Input<pulumi.Input<string>[]>;
    dsBitswap?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pauseFrame?: pulumi.Input<string>;
    profile?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    usBitswap?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectSwitchcontrollerDslPolicy resource.
 */
export interface ObjectSwitchcontrollerDslPolicyArgs {
    adom?: pulumi.Input<string>;
    appendPadding?: pulumi.Input<string>;
    cpeAele?: pulumi.Input<string>;
    cpeAeleMode?: pulumi.Input<string>;
    cs?: pulumi.Input<pulumi.Input<string>[]>;
    dsBitswap?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pauseFrame?: pulumi.Input<string>;
    profile?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    usBitswap?: pulumi.Input<string>;
}
