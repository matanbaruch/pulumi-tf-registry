// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ObjectFirewallVip64Realservers extends pulumi.CustomResource {
    /**
     * Get an existing ObjectFirewallVip64Realservers resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectFirewallVip64RealserversState, opts?: pulumi.CustomResourceOptions): ObjectFirewallVip64Realservers {
        return new ObjectFirewallVip64Realservers(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/objectFirewallVip64Realservers:ObjectFirewallVip64Realservers';

    /**
     * Returns true if the given object is an instance of ObjectFirewallVip64Realservers.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectFirewallVip64Realservers {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectFirewallVip64Realservers.__pulumiType;
    }

    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly clientIp!: pulumi.Output<string | undefined>;
    public readonly fosid!: pulumi.Output<number | undefined>;
    public readonly healthcheck!: pulumi.Output<string>;
    public readonly holddownInterval!: pulumi.Output<number>;
    public readonly ip!: pulumi.Output<string>;
    public readonly maxConnections!: pulumi.Output<number | undefined>;
    public readonly monitor!: pulumi.Output<string | undefined>;
    public readonly port!: pulumi.Output<number | undefined>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly status!: pulumi.Output<string>;
    public readonly vip64!: pulumi.Output<string>;
    public readonly weight!: pulumi.Output<number>;

    /**
     * Create a ObjectFirewallVip64Realservers resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObjectFirewallVip64RealserversArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectFirewallVip64RealserversArgs | ObjectFirewallVip64RealserversState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectFirewallVip64RealserversState | undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["clientIp"] = state ? state.clientIp : undefined;
            resourceInputs["fosid"] = state ? state.fosid : undefined;
            resourceInputs["healthcheck"] = state ? state.healthcheck : undefined;
            resourceInputs["holddownInterval"] = state ? state.holddownInterval : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["maxConnections"] = state ? state.maxConnections : undefined;
            resourceInputs["monitor"] = state ? state.monitor : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["vip64"] = state ? state.vip64 : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as ObjectFirewallVip64RealserversArgs | undefined;
            if ((!args || args.vip64 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vip64'");
            }
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["clientIp"] = args ? args.clientIp : undefined;
            resourceInputs["fosid"] = args ? args.fosid : undefined;
            resourceInputs["healthcheck"] = args ? args.healthcheck : undefined;
            resourceInputs["holddownInterval"] = args ? args.holddownInterval : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["maxConnections"] = args ? args.maxConnections : undefined;
            resourceInputs["monitor"] = args ? args.monitor : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["vip64"] = args ? args.vip64 : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectFirewallVip64Realservers.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectFirewallVip64Realservers resources.
 */
export interface ObjectFirewallVip64RealserversState {
    adom?: pulumi.Input<string>;
    clientIp?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    healthcheck?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    maxConnections?: pulumi.Input<number>;
    monitor?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    scopetype?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    vip64?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ObjectFirewallVip64Realservers resource.
 */
export interface ObjectFirewallVip64RealserversArgs {
    adom?: pulumi.Input<string>;
    clientIp?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    healthcheck?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    maxConnections?: pulumi.Input<number>;
    monitor?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    scopetype?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    vip64: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}
