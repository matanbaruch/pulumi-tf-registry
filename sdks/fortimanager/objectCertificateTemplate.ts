// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ObjectCertificateTemplate extends pulumi.CustomResource {
    /**
     * Get an existing ObjectCertificateTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectCertificateTemplateState, opts?: pulumi.CustomResourceOptions): ObjectCertificateTemplate {
        return new ObjectCertificateTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/objectCertificateTemplate:ObjectCertificateTemplate';

    /**
     * Returns true if the given object is an instance of ObjectCertificateTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectCertificateTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectCertificateTemplate.__pulumiType;
    }

    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly city!: pulumi.Output<string | undefined>;
    public readonly country!: pulumi.Output<string | undefined>;
    public readonly curveName!: pulumi.Output<string>;
    public readonly digestType!: pulumi.Output<string>;
    public readonly email!: pulumi.Output<string | undefined>;
    public readonly idType!: pulumi.Output<string>;
    public readonly keySize!: pulumi.Output<string>;
    public readonly keyType!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly organization!: pulumi.Output<string | undefined>;
    public readonly organizationUnits!: pulumi.Output<string[]>;
    public readonly scepCaIdentifier!: pulumi.Output<string | undefined>;
    public readonly scepPasswords!: pulumi.Output<string[]>;
    public readonly scepServer!: pulumi.Output<string | undefined>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly state!: pulumi.Output<string | undefined>;
    public readonly subjectName!: pulumi.Output<string | undefined>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a ObjectCertificateTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ObjectCertificateTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectCertificateTemplateArgs | ObjectCertificateTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectCertificateTemplateState | undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["city"] = state ? state.city : undefined;
            resourceInputs["country"] = state ? state.country : undefined;
            resourceInputs["curveName"] = state ? state.curveName : undefined;
            resourceInputs["digestType"] = state ? state.digestType : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["idType"] = state ? state.idType : undefined;
            resourceInputs["keySize"] = state ? state.keySize : undefined;
            resourceInputs["keyType"] = state ? state.keyType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["organizationUnits"] = state ? state.organizationUnits : undefined;
            resourceInputs["scepCaIdentifier"] = state ? state.scepCaIdentifier : undefined;
            resourceInputs["scepPasswords"] = state ? state.scepPasswords : undefined;
            resourceInputs["scepServer"] = state ? state.scepServer : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subjectName"] = state ? state.subjectName : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ObjectCertificateTemplateArgs | undefined;
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["city"] = args ? args.city : undefined;
            resourceInputs["country"] = args ? args.country : undefined;
            resourceInputs["curveName"] = args ? args.curveName : undefined;
            resourceInputs["digestType"] = args ? args.digestType : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["idType"] = args ? args.idType : undefined;
            resourceInputs["keySize"] = args ? args.keySize : undefined;
            resourceInputs["keyType"] = args ? args.keyType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["organizationUnits"] = args ? args.organizationUnits : undefined;
            resourceInputs["scepCaIdentifier"] = args ? args.scepCaIdentifier : undefined;
            resourceInputs["scepPasswords"] = args?.scepPasswords ? pulumi.secret(args.scepPasswords) : undefined;
            resourceInputs["scepServer"] = args ? args.scepServer : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["subjectName"] = args ? args.subjectName : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["scepPasswords"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ObjectCertificateTemplate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectCertificateTemplate resources.
 */
export interface ObjectCertificateTemplateState {
    adom?: pulumi.Input<string>;
    city?: pulumi.Input<string>;
    country?: pulumi.Input<string>;
    curveName?: pulumi.Input<string>;
    digestType?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    idType?: pulumi.Input<string>;
    keySize?: pulumi.Input<string>;
    keyType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    organization?: pulumi.Input<string>;
    organizationUnits?: pulumi.Input<pulumi.Input<string>[]>;
    scepCaIdentifier?: pulumi.Input<string>;
    scepPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    scepServer?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    subjectName?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectCertificateTemplate resource.
 */
export interface ObjectCertificateTemplateArgs {
    adom?: pulumi.Input<string>;
    city?: pulumi.Input<string>;
    country?: pulumi.Input<string>;
    curveName?: pulumi.Input<string>;
    digestType?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    idType?: pulumi.Input<string>;
    keySize?: pulumi.Input<string>;
    keyType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    organization?: pulumi.Input<string>;
    organizationUnits?: pulumi.Input<pulumi.Input<string>[]>;
    scepCaIdentifier?: pulumi.Input<string>;
    scepPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    scepServer?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    subjectName?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}
