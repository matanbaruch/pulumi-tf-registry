// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ObjectEmailfilterBwordEntries extends pulumi.CustomResource {
    /**
     * Get an existing ObjectEmailfilterBwordEntries resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectEmailfilterBwordEntriesState, opts?: pulumi.CustomResourceOptions): ObjectEmailfilterBwordEntries {
        return new ObjectEmailfilterBwordEntries(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/objectEmailfilterBwordEntries:ObjectEmailfilterBwordEntries';

    /**
     * Returns true if the given object is an instance of ObjectEmailfilterBwordEntries.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectEmailfilterBwordEntries {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectEmailfilterBwordEntries.__pulumiType;
    }

    public readonly action!: pulumi.Output<string>;
    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly bword!: pulumi.Output<string>;
    public readonly fosid!: pulumi.Output<number | undefined>;
    public readonly language!: pulumi.Output<string>;
    public readonly pattern!: pulumi.Output<string | undefined>;
    public readonly patternType!: pulumi.Output<string>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly score!: pulumi.Output<number>;
    public readonly status!: pulumi.Output<string>;
    public readonly where!: pulumi.Output<string>;

    /**
     * Create a ObjectEmailfilterBwordEntries resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObjectEmailfilterBwordEntriesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectEmailfilterBwordEntriesArgs | ObjectEmailfilterBwordEntriesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectEmailfilterBwordEntriesState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["bword"] = state ? state.bword : undefined;
            resourceInputs["fosid"] = state ? state.fosid : undefined;
            resourceInputs["language"] = state ? state.language : undefined;
            resourceInputs["pattern"] = state ? state.pattern : undefined;
            resourceInputs["patternType"] = state ? state.patternType : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["score"] = state ? state.score : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["where"] = state ? state.where : undefined;
        } else {
            const args = argsOrState as ObjectEmailfilterBwordEntriesArgs | undefined;
            if ((!args || args.bword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bword'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["bword"] = args ? args.bword : undefined;
            resourceInputs["fosid"] = args ? args.fosid : undefined;
            resourceInputs["language"] = args ? args.language : undefined;
            resourceInputs["pattern"] = args ? args.pattern : undefined;
            resourceInputs["patternType"] = args ? args.patternType : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["score"] = args ? args.score : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["where"] = args ? args.where : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectEmailfilterBwordEntries.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectEmailfilterBwordEntries resources.
 */
export interface ObjectEmailfilterBwordEntriesState {
    action?: pulumi.Input<string>;
    adom?: pulumi.Input<string>;
    bword?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    language?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    patternType?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    score?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    where?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectEmailfilterBwordEntries resource.
 */
export interface ObjectEmailfilterBwordEntriesArgs {
    action?: pulumi.Input<string>;
    adom?: pulumi.Input<string>;
    bword: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    language?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    patternType?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    score?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    where?: pulumi.Input<string>;
}
