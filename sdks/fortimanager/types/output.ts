// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface DvmCmdAddDeviceDevice {
    admPass: string;
    admUsr?: string;
    authorizationtemplate?: string;
    desc?: string;
    deviceaction?: string;
    deviceblueprint?: string;
    fazquota?: number;
    ip?: string;
    metafields?: string;
    metafieldsMap?: {[key: string]: string};
    mgmtMode?: string;
    mr?: number;
    name?: string;
    osType?: string;
    osVer?: string;
    patch?: number;
    platformStr?: string;
    sn?: string;
}

export interface DvmCmdAddDeviceGroup {
    name?: string;
    vdom?: string;
}

export interface DvmCmdAddDevlistAddDevList {
    admPasses: string[];
    admUsr?: string;
    authorizationtemplate?: string;
    desc?: string;
    deviceaction?: string;
    deviceblueprint?: string;
    fazquota?: number;
    ip?: string;
    metafields?: string;
    mgmtMode?: string;
    mr?: number;
    name?: string;
    osType?: string;
    osVer?: string;
    patch?: number;
    platformStr?: string;
    sn?: string;
}

export interface DvmCmdDelDevlistDelDevMemberList {
    name?: string;
    vdom?: string;
}

export interface DvmCmdUpdateDevlistUpdateDevMemberList {
    name?: string;
    vdom?: string;
}

export interface DvmdbScriptExecuteScope {
    name?: string;
    vdom?: string;
}

export interface DvmdbScriptScriptSchedule {
    datetime?: string;
    dayOfWeek: string;
    device?: number;
    name?: string;
    runOnDb: string;
    type?: string;
}

export interface FmupdateFdssettingPushOverride {
    ip: string;
    port: number;
    status: string;
}

export interface FmupdateFdssettingPushOverrideToClient {
    announceIps?: outputs.FmupdateFdssettingPushOverrideToClientAnnounceIp[];
    status: string;
}

export interface FmupdateFdssettingPushOverrideToClientAnnounceIp {
    id?: number;
    ip: string;
    port: number;
}

export interface FmupdateFdssettingPushoverridetoclientAnnounceIp {
    id?: number;
    ip: string;
    port: number;
}

export interface FmupdateFdssettingServerOverride {
    servlists?: outputs.FmupdateFdssettingServerOverrideServlist[];
    status: string;
}

export interface FmupdateFdssettingServerOverrideServlist {
    id?: number;
    ip: string;
    ip6: string;
    port: number;
    serviceType: string;
}

export interface FmupdateFdssettingServeroverrideServlist {
    id?: number;
    ip: string;
    ip6: string;
    port: number;
    serviceType: string;
}

export interface FmupdateFdssettingUpdateSchedule {
    day: string;
    frequency: string;
    status: string;
    times: string[];
}

export interface FmupdateFwmsettingUpgradeTimeout {
    checkStatusTimeout: number;
    ctrlCheckStatusTimeout: number;
    ctrlPutImageByFdsTimeout: number;
    haSyncTimeout: number;
    healthCheckTimeout: number;
    licenseCheckTimeout: number;
    prepareImageTimeout: number;
    putImageByFdsTimeout: number;
    putImageTimeout: number;
    rebootOfFsckTimeout: number;
    rebootOfUpgradeTimeout: number;
    retrieveTimeout: number;
    rpcTimeout: number;
    totalTimeout: number;
}

export interface FmupdateServeraccessprioritiesPrivateServer {
    id?: number;
    ip: string;
    ip6: string;
    timeZone: number;
}

export interface FmupdateWebspamFgdsettingServerOverride {
    servlists?: outputs.FmupdateWebspamFgdsettingServerOverrideServlist[];
    status: string;
}

export interface FmupdateWebspamFgdsettingServerOverrideServlist {
    id?: number;
    ip: string;
    ip6: string;
    port: number;
    serviceType: string;
}

export interface ObjectAntivirusMmschecksumEntry {
    checksum?: string;
    name?: string;
    status?: string;
}

export interface ObjectAntivirusNotificationEntry {
    name?: string;
    prefix?: string;
    status?: string;
}

export interface ObjectAntivirusProfileCifs {
    archiveBlocks: string[];
    archiveLogs: string[];
    avScan: string;
    emulator: string;
    externalBlocklist: string;
    fortiai: string;
    fortindr: string;
    fortisandbox: string;
    options: string[];
    outbreakPrevention: string;
    quarantine: string;
}

export interface ObjectAntivirusProfileContentDisarm {
    coverPage: string;
    detectOnly: string;
    errorAction: string;
    officeAction: string;
    officeDde: string;
    officeEmbed: string;
    officeHylink: string;
    officeLinked: string;
    officeMacro: string;
    originalFileDestination: string;
    pdfActForm: string;
    pdfActGotor: string;
    pdfActJava: string;
    pdfActLaunch: string;
    pdfActMovie: string;
    pdfActSound: string;
    pdfEmbedfile: string;
    pdfHyperlink: string;
    pdfJavacode: string;
}

export interface ObjectAntivirusProfileFtp {
    archiveBlocks: string[];
    archiveLogs: string[];
    avScan: string;
    emulator: string;
    externalBlocklist: string;
    fortiai: string;
    fortindr: string;
    fortisandbox: string;
    options: string[];
    outbreakPrevention: string;
    quarantine: string;
}

export interface ObjectAntivirusProfileHttp {
    archiveBlocks: string[];
    archiveLogs: string[];
    avOptimize?: string;
    avScan: string;
    contentDisarm: string;
    emulator: string;
    externalBlocklist: string;
    fortiai: string;
    fortindr: string;
    fortisandbox: string;
    options: string[];
    outbreakPrevention: string;
    quarantine: string;
    unknownContentEncoding: string;
}

export interface ObjectAntivirusProfileImap {
    archiveBlocks: string[];
    archiveLogs: string[];
    avScan: string;
    contentDisarm: string;
    emulator: string;
    executables: string;
    externalBlocklist: string;
    fortiai: string;
    fortindr: string;
    fortisandbox: string;
    options: string[];
    outbreakPrevention: string;
    quarantine: string;
}

export interface ObjectAntivirusProfileMapi {
    archiveBlocks: string[];
    archiveLogs: string[];
    avScan?: string;
    emulator?: string;
    executables?: string;
    externalBlocklist?: string;
    fortiai?: string;
    fortindr?: string;
    fortisandbox?: string;
    options: string[];
    outbreakPrevention?: string;
    quarantine?: string;
}

export interface ObjectAntivirusProfileNacQuar {
    expiry: string;
    infected: string;
    log: string;
}

export interface ObjectAntivirusProfileNntp {
    archiveBlocks: string[];
    archiveLogs: string[];
    avScan: string;
    emulator: string;
    externalBlocklist: string;
    fortiai: string;
    fortindr: string;
    fortisandbox: string;
    options: string[];
    outbreakPrevention: string;
    quarantine: string;
}

export interface ObjectAntivirusProfileOutbreakPrevention {
    externalBlocklist: string;
    ftgdService: string;
}

export interface ObjectAntivirusProfilePop3 {
    archiveBlocks: string[];
    archiveLogs: string[];
    avScan: string;
    contentDisarm: string;
    emulator: string;
    executables: string;
    externalBlocklist: string;
    fortiai: string;
    fortindr: string;
    fortisandbox: string;
    options: string[];
    outbreakPrevention: string;
    quarantine: string;
}

export interface ObjectAntivirusProfileSmb {
    archiveBlocks: string[];
    archiveLogs: string[];
    emulator?: string;
    options: string[];
    outbreakPrevention?: string;
}

export interface ObjectAntivirusProfileSmtp {
    archiveBlocks: string[];
    archiveLogs: string[];
    avScan: string;
    contentDisarm: string;
    emulator: string;
    executables: string;
    externalBlocklist: string;
    fortiai: string;
    fortindr: string;
    fortisandbox: string;
    options: string[];
    outbreakPrevention: string;
    quarantine: string;
}

export interface ObjectAntivirusProfileSsh {
    archiveBlocks: string[];
    archiveLogs: string[];
    avScan?: string;
    emulator?: string;
    externalBlocklist?: string;
    fortiai?: string;
    fortindr?: string;
    fortisandbox?: string;
    options: string[];
    outbreakPrevention?: string;
    quarantine?: string;
}

export interface ObjectApplicationListDefaultNetworkService {
    id?: number;
    port?: number;
    services: string[];
    violationAction: string;
}

export interface ObjectApplicationListEntriesParameter {
    id?: number;
    members?: outputs.ObjectApplicationListEntriesParameterMember[];
    value?: string;
}

export interface ObjectApplicationListEntriesParameterMember {
    id?: number;
    name?: string;
    value?: string;
}

export interface ObjectApplicationListEntriesParametersMember {
    id?: number;
    name?: string;
    value?: string;
}

export interface ObjectApplicationListEntry {
    action: string;
    applications: number[];
    behaviors: string[];
    category?: string;
    exclusions: number[];
    id?: number;
    log: string;
    logPacket: string;
    parameters?: outputs.ObjectApplicationListEntryParameter[];
    perIpShaper?: string;
    popularities: string[];
    protocols: string[];
    quarantine: string;
    quarantineExpiry: string;
    quarantineLog: string;
    rateCount?: number;
    rateDuration: number;
    rateMode: string;
    rateTrack: string;
    risks: number[];
    sessionTtl?: number;
    shaper?: string;
    shaperReverse?: string;
    subCategories: number[];
    technologies: string[];
    vendors: string[];
}

export interface ObjectApplicationListEntryParameter {
    id?: number;
    members?: outputs.ObjectApplicationListEntryParameterMember[];
    value?: string;
}

export interface ObjectApplicationListEntryParameterMember {
    id?: number;
    name?: string;
    value?: string;
}

export interface ObjectCasbProfileSaasApplication {
    accessRules?: outputs.ObjectCasbProfileSaasApplicationAccessRule[];
    customControls?: outputs.ObjectCasbProfileSaasApplicationCustomControl[];
    domainControl: string;
    domainControlDomains: string[];
    log: string;
    name?: string;
    safeSearch: string;
    safeSearchControls: string[];
    status: string;
    tenantControl: string;
    tenantControlTenants: string[];
}

export interface ObjectCasbProfileSaasApplicationAccessRule {
    action: string;
    bypasses: string[];
    name?: string;
}

export interface ObjectCasbProfileSaasApplicationCustomControl {
    name?: string;
    options?: outputs.ObjectCasbProfileSaasApplicationCustomControlOption[];
}

export interface ObjectCasbProfileSaasApplicationCustomControlOption {
    name?: string;
    userInputs: string[];
}

export interface ObjectCasbProfileSaasapplicationAccessRule {
    action: string;
    bypasses: string[];
    name?: string;
}

export interface ObjectCasbProfileSaasapplicationCustomControl {
    name?: string;
    options?: outputs.ObjectCasbProfileSaasapplicationCustomControlOption[];
}

export interface ObjectCasbProfileSaasapplicationCustomControlOption {
    name?: string;
    userInputs: string[];
}

export interface ObjectCasbProfileSaasapplicationCustomcontrolOption {
    name?: string;
    userInputs: string[];
}

export interface ObjectCasbUseractivityControlOption {
    name?: string;
    operations?: outputs.ObjectCasbUseractivityControlOptionOperation[];
    status?: string;
}

export interface ObjectCasbUseractivityControlOptionOperation {
    action: string;
    caseSensitive: string;
    direction: string;
    headerName?: string;
    name?: string;
    searchKey?: string;
    searchPattern: string;
    target: string;
    valueFromInput: string;
    values: string[];
}

export interface ObjectCasbUseractivityControloptionsOperation {
    action: string;
    caseSensitive: string;
    direction: string;
    headerName?: string;
    name?: string;
    searchKey?: string;
    searchPattern: string;
    target: string;
    valueFromInput: string;
    values: string[];
}

export interface ObjectCasbUseractivityMatch {
    id?: number;
    rules?: outputs.ObjectCasbUseractivityMatchRule[];
    strategy: string;
}

export interface ObjectCasbUseractivityMatchRule {
    caseSensitive: string;
    domains: string[];
    headerName?: string;
    id?: number;
    matchPattern: string;
    matchValue?: string;
    methods: string[];
    negate: string;
    type: string;
}

export interface ObjectCifsProfileFileFilter {
    entries?: outputs.ObjectCifsProfileFileFilterEntry[];
    log: string;
    status: string;
}

export interface ObjectCifsProfileFileFilterEntry {
    action?: string;
    comment?: string;
    direction?: string;
    fileType?: string;
    filter?: string;
    protocols: string[];
}

export interface ObjectCifsProfileServerKeytab {
    keytab?: string;
    passwords: string[];
    principal?: string;
}

export interface ObjectDlpDictionaryEntry {
    comment?: string;
    id?: number;
    ignoreCase: string;
    pattern?: string;
    repeat: string;
    status: string;
    type?: string;
}

export interface ObjectDlpFilepatternEntry {
    fileType?: string;
    filterType?: string;
    pattern?: string;
}

export interface ObjectDlpProfileRule {
    action: string;
    archive: string;
    expiry: string;
    fileSize?: number;
    fileType?: string;
    filterBy: string;
    id?: number;
    label?: string;
    matchPercentage?: number;
    name?: string;
    protos: string[];
    sensitivities: string[];
    sensors: string[];
    severity: string;
    type: string;
}

export interface ObjectDlpSensorEntry {
    count: number;
    dictionary?: string;
    id?: number;
    status: string;
}

export interface ObjectDlpSensorFilter {
    action: string;
    archive: string;
    companyIdentifier?: string;
    expiry?: string;
    fileSize?: number;
    fileType?: string;
    filterBy: string;
    fpSensitivity?: string;
    id?: number;
    matchPercentage?: number;
    name?: string;
    protos: string[];
    regexp?: string;
    sensitivity?: string;
    severity: string;
    type: string;
}

export interface ObjectDnsfilterDomainfilterEntry {
    action: string;
    domain?: string;
    id?: number;
    status: string;
    type: string;
}

export interface ObjectDnsfilterProfileDnsTranslation {
    addrType: string;
    dst: string;
    dst6: string;
    id?: number;
    netmask: string;
    prefix: number;
    src: string;
    src6: string;
    status: string;
}

export interface ObjectDnsfilterProfileDomainFilter {
    domainFilterTable?: number;
}

export interface ObjectDnsfilterProfileFtgdDns {
    filters?: outputs.ObjectDnsfilterProfileFtgdDnsFilter[];
    options: string[];
}

export interface ObjectDnsfilterProfileFtgdDnsFilter {
    action: string;
    category: string;
    id?: number;
    log: string;
}

export interface ObjectDnsfilterProfileFtgddnsFilter {
    action: string;
    category: string;
    id?: number;
    log: string;
}

export interface ObjectDynamicAddressDynamicAddrMapping {
    addr?: string;
    id?: number;
}

export interface ObjectDynamicCertificateLocalDynamicMapping {
    _scopes?: outputs.ObjectDynamicCertificateLocalDynamicMapping_Scope[];
    localCert?: string;
}

export interface ObjectDynamicCertificateLocalDynamicMapping_Scope {
    name?: string;
    vdom?: string;
}

export interface ObjectDynamicInterfaceDynamicMapping {
    _scopes?: outputs.ObjectDynamicInterfaceDynamicMapping_Scope[];
    egressShapingProfile?: string;
    ingressShapingProfile?: string;
    intrazoneDeny?: string;
    localIntfs: string[];
}

export interface ObjectDynamicInterfaceDynamicMapping_Scope {
    name?: string;
    vdom?: string;
}

export interface ObjectDynamicInterfacePlatformMapping {
    egressShapingProfile?: string;
    ingressShapingProfile?: string;
    intfZone?: string;
    intrazoneDeny?: string;
    name?: string;
}

export interface ObjectDynamicMulticastInterfaceDynamicMapping {
    _scopes?: outputs.ObjectDynamicMulticastInterfaceDynamicMapping_Scope[];
    localIntf?: string;
}

export interface ObjectDynamicMulticastInterfaceDynamicMapping_Scope {
    name?: string;
    vdom?: string;
}

export interface ObjectDynamicVpntunnelDynamicMapping {
    _scopes?: outputs.ObjectDynamicVpntunnelDynamicMapping_Scope[];
    localIpsec?: string;
}

export interface ObjectDynamicVpntunnelDynamicMapping_Scope {
    name?: string;
    vdom?: string;
}

export interface ObjectEmailfilterBlockallowlistEntry {
    action: string;
    addrType: string;
    emailPattern?: string;
    id?: number;
    ip4Subnet: string;
    ip6Subnet?: string;
    pattern?: string;
    patternType?: string;
    status: string;
    type: string;
}

export interface ObjectEmailfilterBwlEntry {
    action: string;
    addrType: string;
    emailPattern?: string;
    id?: number;
    ip4Subnet: string;
    ip6Subnet?: string;
    patternType?: string;
    status: string;
    type: string;
}

export interface ObjectEmailfilterBwordEntry {
    action: string;
    id?: number;
    language: string;
    pattern?: string;
    patternType: string;
    score: number;
    status: string;
    where: string;
}

export interface ObjectEmailfilterDnsblEntry {
    action?: string;
    id?: number;
    server?: string;
    status: string;
}

export interface ObjectEmailfilterIptrustEntry {
    addrType?: string;
    id?: number;
    ip4Subnet: string;
    ip6Subnet?: string;
    status: string;
}

export interface ObjectEmailfilterMheaderEntry {
    action?: string;
    fieldbody?: string;
    fieldname?: string;
    id?: number;
    patternType: string;
    status: string;
}

export interface ObjectEmailfilterProfileFileFilter {
    entries?: outputs.ObjectEmailfilterProfileFileFilterEntry[];
    log?: string;
    scanArchiveContents?: string;
    status?: string;
}

export interface ObjectEmailfilterProfileFileFilterEntry {
    action?: string;
    comment?: string;
    encryption?: string;
    fileTypes: string[];
    filter?: string;
    passwordProtected?: string;
    protocols: string[];
}

export interface ObjectEmailfilterProfileGmail {
    log: string;
    logAll: string;
}

export interface ObjectEmailfilterProfileImap {
    action?: string;
    log: string;
    logAll: string;
    tagMsg?: string;
    tagTypes: string[];
}

export interface ObjectEmailfilterProfileMapi {
    action?: string;
    log?: string;
    logAll?: string;
}

export interface ObjectEmailfilterProfileMsnHotmail {
    log: string;
    logAll: string;
}

export interface ObjectEmailfilterProfileOtherWebmails {
    logAll?: string;
}

export interface ObjectEmailfilterProfilePop3 {
    action?: string;
    log: string;
    logAll: string;
    tagMsg?: string;
    tagTypes: string[];
}

export interface ObjectEmailfilterProfileSmtp {
    action?: string;
    hdrip?: string;
    localOverride?: string;
    log: string;
    logAll: string;
    tagMsg?: string;
    tagTypes: string[];
}

export interface ObjectExtendercontrollerExtenderprofileCellular {
    controllerReport?: outputs.ObjectExtendercontrollerExtenderprofileCellularControllerReport;
    dataplan?: string;
    modem1?: outputs.ObjectExtendercontrollerExtenderprofileCellularModem1;
    modem2?: outputs.ObjectExtendercontrollerExtenderprofileCellularModem2;
    smsNotification?: outputs.ObjectExtendercontrollerExtenderprofileCellularSmsNotification;
}

export interface ObjectExtendercontrollerExtenderprofileCellularControllerReport {
    interval: number;
    signalThreshold: number;
    status: string;
}

export interface ObjectExtendercontrollerExtenderprofileCellularModem1 {
    autoSwitch?: outputs.ObjectExtendercontrollerExtenderprofileCellularModem1AutoSwitch;
    connStatus?: number;
    defaultSim: string;
    gps: string;
    modemId?: number;
    preferredCarrier?: string;
    redundantIntf?: string;
    redundantMode: string;
    sim1Pin: string;
    sim1PinCodes: string[];
    sim2Pin: string;
    sim2PinCodes: string[];
}

export interface ObjectExtendercontrollerExtenderprofileCellularModem1AutoSwitch {
    dataplan: string;
    disconnect: string;
    disconnectPeriod: number;
    disconnectThreshold: number;
    signal: string;
    switchBackTime: string;
    switchBackTimer: number;
    switchBacks: string[];
}

export interface ObjectExtendercontrollerExtenderprofileCellularModem2 {
    autoSwitch?: outputs.ObjectExtendercontrollerExtenderprofileCellularModem2AutoSwitch;
    connStatus?: number;
    defaultSim: string;
    gps: string;
    modemId: number;
    preferredCarrier?: string;
    redundantIntf?: string;
    redundantMode: string;
    sim1Pin: string;
    sim1PinCodes: string[];
    sim2Pin: string;
    sim2PinCodes: string[];
}

export interface ObjectExtendercontrollerExtenderprofileCellularModem2AutoSwitch {
    dataplan: string;
    disconnect: string;
    disconnectPeriod: number;
    disconnectThreshold: number;
    signal: string;
    switchBackTime: string;
    switchBackTimer: number;
    switchBacks: string[];
}

export interface ObjectExtendercontrollerExtenderprofileCellularSmsNotification {
    alert?: outputs.ObjectExtendercontrollerExtenderprofileCellularSmsNotificationAlert;
    receivers?: outputs.ObjectExtendercontrollerExtenderprofileCellularSmsNotificationReceiver[];
    status: string;
}

export interface ObjectExtendercontrollerExtenderprofileCellularSmsNotificationAlert {
    dataExhausted: string;
    fgtBackupModeSwitch: string;
    lowSignalStrength: string;
    modeSwitch: string;
    osImageFallback: string;
    sessionDisconnect: string;
    systemReboot: string;
}

export interface ObjectExtendercontrollerExtenderprofileCellularSmsNotificationReceiver {
    alerts: string[];
    name?: string;
    phoneNumber?: string;
    status: string;
}

export interface ObjectExtendercontrollerExtenderprofileCellularSmsnotificationAlert {
    dataExhausted: string;
    fgtBackupModeSwitch: string;
    lowSignalStrength: string;
    modeSwitch: string;
    osImageFallback: string;
    sessionDisconnect: string;
    systemReboot: string;
}

export interface ObjectExtendercontrollerExtenderprofileCellularSmsnotificationReceiver {
    alerts: string[];
    name?: string;
    phoneNumber?: string;
    status: string;
}

export interface ObjectExtendercontrollerExtenderprofileLanExtension {
    backhaulInterface?: string;
    backhaulIp?: string;
    backhauls?: outputs.ObjectExtendercontrollerExtenderprofileLanExtensionBackhaul[];
    ipsecTunnel?: string;
    linkLoadbalance: string;
}

export interface ObjectExtendercontrollerExtenderprofileLanExtensionBackhaul {
    name?: string;
    port: string;
    role: string;
    weight: number;
}

export interface ObjectExtendercontrollerExtenderprofileLanextensionBackhaul {
    name?: string;
    port: string;
    role: string;
    weight: number;
}

export interface ObjectExtendercontrollerSimProfileAutoSwitchProfile {
    dataplan: string;
    disconnect: string;
    disconnectPeriod: number;
    disconnectThreshold: number;
    signal: string;
    status: string;
    switchBackTime: string;
    switchBackTimer: number;
    switchBacks: string[];
}

export interface ObjectExtensioncontrollerExtenderprofileCellular {
    controllerReport?: outputs.ObjectExtensioncontrollerExtenderprofileCellularControllerReport;
    dataplans: string[];
    modem1?: outputs.ObjectExtensioncontrollerExtenderprofileCellularModem1;
    modem2?: outputs.ObjectExtensioncontrollerExtenderprofileCellularModem2;
    smsNotification?: outputs.ObjectExtensioncontrollerExtenderprofileCellularSmsNotification;
}

export interface ObjectExtensioncontrollerExtenderprofileCellularControllerReport {
    interval: number;
    signalThreshold: number;
    status: string;
}

export interface ObjectExtensioncontrollerExtenderprofileCellularModem1 {
    autoSwitch?: outputs.ObjectExtensioncontrollerExtenderprofileCellularModem1AutoSwitch;
    connStatus?: number;
    defaultSim: string;
    gps: string;
    modemId?: number;
    preferredCarrier?: string;
    redundantIntf?: string;
    redundantMode: string;
    sim1Pin: string;
    sim1PinCodes: string[];
    sim2Pin: string;
    sim2PinCodes: string[];
}

export interface ObjectExtensioncontrollerExtenderprofileCellularModem1AutoSwitch {
    dataplan: string;
    disconnect: string;
    disconnectPeriod: number;
    disconnectThreshold: number;
    signal: string;
    switchBackTime: string;
    switchBackTimer: number;
    switchBacks: string[];
}

export interface ObjectExtensioncontrollerExtenderprofileCellularModem2 {
    autoSwitch?: outputs.ObjectExtensioncontrollerExtenderprofileCellularModem2AutoSwitch;
    connStatus?: number;
    defaultSim: string;
    gps: string;
    modemId: number;
    preferredCarrier?: string;
    redundantIntf?: string;
    redundantMode: string;
    sim1Pin: string;
    sim1PinCodes: string[];
    sim2Pin: string;
    sim2PinCodes: string[];
}

export interface ObjectExtensioncontrollerExtenderprofileCellularModem2AutoSwitch {
    dataplan: string;
    disconnect: string;
    disconnectPeriod: number;
    disconnectThreshold: number;
    signal: string;
    switchBackTime: string;
    switchBackTimer: number;
    switchBacks: string[];
}

export interface ObjectExtensioncontrollerExtenderprofileCellularSmsNotification {
    alert?: outputs.ObjectExtensioncontrollerExtenderprofileCellularSmsNotificationAlert;
    receivers?: outputs.ObjectExtensioncontrollerExtenderprofileCellularSmsNotificationReceiver[];
    status: string;
}

export interface ObjectExtensioncontrollerExtenderprofileCellularSmsNotificationAlert {
    dataExhausted: string;
    fgtBackupModeSwitch: string;
    lowSignalStrength: string;
    modeSwitch: string;
    osImageFallback: string;
    sessionDisconnect: string;
    systemReboot: string;
}

export interface ObjectExtensioncontrollerExtenderprofileCellularSmsNotificationReceiver {
    alerts: string[];
    name?: string;
    phoneNumber?: string;
    status: string;
}

export interface ObjectExtensioncontrollerExtenderprofileCellularSmsnotificationAlert {
    dataExhausted: string;
    fgtBackupModeSwitch: string;
    lowSignalStrength: string;
    modeSwitch: string;
    osImageFallback: string;
    sessionDisconnect: string;
    systemReboot: string;
}

export interface ObjectExtensioncontrollerExtenderprofileCellularSmsnotificationReceiver {
    alerts: string[];
    name?: string;
    phoneNumber?: string;
    status: string;
}

export interface ObjectExtensioncontrollerExtenderprofileLanExtension {
    backhaulInterface?: string;
    backhaulIp?: string;
    backhauls?: outputs.ObjectExtensioncontrollerExtenderprofileLanExtensionBackhaul[];
    ipsecTunnel?: string;
    linkLoadbalance: string;
}

export interface ObjectExtensioncontrollerExtenderprofileLanExtensionBackhaul {
    name?: string;
    port: string;
    role: string;
    weight: number;
}

export interface ObjectExtensioncontrollerExtenderprofileLanextensionBackhaul {
    name?: string;
    port: string;
    role: string;
    weight: number;
}

export interface ObjectExtensioncontrollerExtenderprofileWifi {
    country: string;
    dfs?: string;
    radio1?: outputs.ObjectExtensioncontrollerExtenderprofileWifiRadio1;
    radio2?: outputs.ObjectExtensioncontrollerExtenderprofileWifiRadio2;
}

export interface ObjectExtensioncontrollerExtenderprofileWifiRadio1 {
    band: string;
    bandwidth: string;
    beaconInterval: number;
    bssColor?: number;
    bssColorMode: string;
    channels: string[];
    extensionChannel: string;
    guardInterval: string;
    lanExtVaps: string[];
    localVaps: string[];
    maxClients?: number;
    mode: string;
    n80211d: string;
    operatingStandard: string;
    powerLevel: number;
    radioId?: number;
    status: string;
}

export interface ObjectExtensioncontrollerExtenderprofileWifiRadio2 {
    band: string;
    bandwidth: string;
    beaconInterval: number;
    bssColor?: number;
    bssColorMode: string;
    channels: string[];
    extensionChannel: string;
    guardInterval: string;
    lanExtVaps: string[];
    localVaps: string[];
    maxClients?: number;
    mode: string;
    n80211d: string;
    operatingStandard: string;
    powerLevel: number;
    radioId: number;
    status: string;
}

export interface ObjectFilefilterProfileRule {
    action: string;
    comment?: string;
    direction: string;
    fileTypes: string[];
    name: string;
    passwordProtected: string;
    protocols: string[];
}

export interface ObjectFirewallAccessproxy6ApiGateway {
    applications: string[];
    h2Support: string;
    h3Support: string;
    httpCookieAge: number;
    httpCookieDomain?: string;
    httpCookieDomainFromHost: string;
    httpCookieGeneration: number;
    httpCookiePath?: string;
    httpCookieShare: string;
    httpsCookieSecure: string;
    id: number;
    ldbMethod: string;
    persistence: string;
    quic?: outputs.ObjectFirewallAccessproxy6ApiGatewayQuic;
    realservers?: outputs.ObjectFirewallAccessproxy6ApiGatewayRealserver[];
    samlRedirect: string;
    samlServer?: string;
    service: string;
    sslAlgorithm: string;
    sslCipherSuites?: outputs.ObjectFirewallAccessproxy6ApiGatewaySslCipherSuite[];
    sslDhBits: string;
    sslMaxVersion?: string;
    sslMinVersion?: string;
    sslRenegotiation: string;
    sslVpnWebPortal?: string;
    urlMap: string;
    urlMapType: string;
    virtualHost?: string;
}

export interface ObjectFirewallAccessproxy6ApiGateway6 {
    applications: string[];
    h2Support: string;
    h3Support: string;
    httpCookieAge: number;
    httpCookieDomain?: string;
    httpCookieDomainFromHost: string;
    httpCookieGeneration: number;
    httpCookiePath?: string;
    httpCookieShare: string;
    httpsCookieSecure: string;
    id: number;
    ldbMethod: string;
    persistence: string;
    quic?: outputs.ObjectFirewallAccessproxy6ApiGateway6Quic;
    realservers?: outputs.ObjectFirewallAccessproxy6ApiGateway6Realserver[];
    samlRedirect: string;
    samlServer?: string;
    service: string;
    sslAlgorithm: string;
    sslCipherSuites?: outputs.ObjectFirewallAccessproxy6ApiGateway6SslCipherSuite[];
    sslDhBits: string;
    sslMaxVersion?: string;
    sslMinVersion?: string;
    sslRenegotiation: string;
    sslVpnWebPortal?: string;
    urlMap: string;
    urlMapType: string;
    virtualHost?: string;
}

export interface ObjectFirewallAccessproxy6ApiGateway6Quic {
    ackDelayExponent: number;
    activeConnectionIdLimit: number;
    activeMigration: string;
    greaseQuicBit: string;
    maxAckDelay: number;
    maxDatagramFrameSize: number;
    maxIdleTimeout: number;
    maxUdpPayloadSize: number;
}

export interface ObjectFirewallAccessproxy6ApiGateway6Realserver {
    addrType: string;
    address?: string;
    domain?: string;
    externalAuth: string;
    healthCheck: string;
    healthCheckProto: string;
    holddownInterval: string;
    httpHost?: string;
    id?: number;
    ip: string;
    mappedport?: string;
    port: number;
    sshClientCert?: string;
    sshHostKeyValidation: string;
    sshHostKeys: string[];
    status: string;
    translateHost: string;
    tunnelEncryption: string;
    type: string;
    weight: number;
}

export interface ObjectFirewallAccessproxy6ApiGateway6SslCipherSuite {
    cipher?: string;
    priority?: number;
    versions: string[];
}

export interface ObjectFirewallAccessproxy6ApiGatewayQuic {
    ackDelayExponent: number;
    activeConnectionIdLimit: number;
    activeMigration: string;
    greaseQuicBit: string;
    maxAckDelay: number;
    maxDatagramFrameSize: number;
    maxIdleTimeout: number;
    maxUdpPayloadSize: number;
}

export interface ObjectFirewallAccessproxy6ApiGatewayRealserver {
    addrType: string;
    address?: string;
    domain?: string;
    externalAuth: string;
    healthCheck: string;
    healthCheckProto: string;
    holddownInterval: string;
    httpHost?: string;
    id?: number;
    ip: string;
    mappedport?: string;
    port: number;
    sshClientCert?: string;
    sshHostKeyValidation: string;
    sshHostKeys: string[];
    status: string;
    translateHost: string;
    tunnelEncryption: string;
    type: string;
    weight: number;
}

export interface ObjectFirewallAccessproxy6ApiGatewaySslCipherSuite {
    cipher?: string;
    priority?: number;
    versions: string[];
}

export interface ObjectFirewallAccessproxy6Apigateway6Quic {
    ackDelayExponent: number;
    activeConnectionIdLimit: number;
    activeMigration: string;
    greaseQuicBit: string;
    maxAckDelay: number;
    maxDatagramFrameSize: number;
    maxIdleTimeout: number;
    maxUdpPayloadSize: number;
}

export interface ObjectFirewallAccessproxy6Apigateway6Realserver {
    addrType: string;
    address?: string;
    domain?: string;
    externalAuth: string;
    healthCheck: string;
    healthCheckProto: string;
    holddownInterval: string;
    httpHost?: string;
    id?: number;
    ip: string;
    mappedport?: string;
    port: number;
    sshClientCert?: string;
    sshHostKeyValidation: string;
    sshHostKeys: string[];
    status: string;
    translateHost: string;
    tunnelEncryption: string;
    type: string;
    weight: number;
}

export interface ObjectFirewallAccessproxy6Apigateway6SslCipherSuite {
    cipher?: string;
    priority?: number;
    versions: string[];
}

export interface ObjectFirewallAccessproxy6ApigatewayQuic {
    ackDelayExponent: number;
    activeConnectionIdLimit: number;
    activeMigration: string;
    greaseQuicBit: string;
    maxAckDelay: number;
    maxDatagramFrameSize: number;
    maxIdleTimeout: number;
    maxUdpPayloadSize: number;
}

export interface ObjectFirewallAccessproxy6ApigatewayRealserver {
    addrType: string;
    address?: string;
    domain?: string;
    externalAuth: string;
    healthCheck: string;
    healthCheckProto: string;
    holddownInterval: string;
    httpHost?: string;
    id?: number;
    ip: string;
    mappedport?: string;
    port: number;
    sshClientCert?: string;
    sshHostKeyValidation: string;
    sshHostKeys: string[];
    status: string;
    translateHost: string;
    tunnelEncryption: string;
    type: string;
    weight: number;
}

export interface ObjectFirewallAccessproxy6ApigatewaySslCipherSuite {
    cipher?: string;
    priority?: number;
    versions: string[];
}

export interface ObjectFirewallAccessproxyApiGateway {
    applications: string[];
    h2Support: string;
    h3Support: string;
    httpCookieAge: number;
    httpCookieDomain?: string;
    httpCookieDomainFromHost: string;
    httpCookieGeneration: number;
    httpCookiePath?: string;
    httpCookieShare: string;
    httpsCookieSecure: string;
    id: number;
    ldbMethod: string;
    persistence: string;
    quic?: outputs.ObjectFirewallAccessproxyApiGatewayQuic;
    realservers?: outputs.ObjectFirewallAccessproxyApiGatewayRealserver[];
    samlRedirect: string;
    samlServer?: string;
    service: string;
    sslAlgorithm: string;
    sslCipherSuites?: outputs.ObjectFirewallAccessproxyApiGatewaySslCipherSuite[];
    sslDhBits: string;
    sslMaxVersion: string;
    sslMinVersion: string;
    sslRenegotiation: string;
    sslVpnWebPortal?: string;
    urlMap: string;
    urlMapType: string;
    virtualHost?: string;
}

export interface ObjectFirewallAccessproxyApiGateway6 {
    applications: string[];
    h2Support: string;
    h3Support: string;
    httpCookieAge: number;
    httpCookieDomain?: string;
    httpCookieDomainFromHost: string;
    httpCookieGeneration: number;
    httpCookiePath?: string;
    httpCookieShare: string;
    httpsCookieSecure: string;
    id: number;
    ldbMethod: string;
    persistence: string;
    quic?: outputs.ObjectFirewallAccessproxyApiGateway6Quic;
    realservers?: outputs.ObjectFirewallAccessproxyApiGateway6Realserver[];
    samlRedirect: string;
    samlServer?: string;
    service: string;
    sslAlgorithm: string;
    sslCipherSuites?: outputs.ObjectFirewallAccessproxyApiGateway6SslCipherSuite[];
    sslDhBits: string;
    sslMaxVersion: string;
    sslMinVersion: string;
    sslRenegotiation: string;
    sslVpnWebPortal?: string;
    urlMap: string;
    urlMapType: string;
    virtualHost?: string;
}

export interface ObjectFirewallAccessproxyApiGateway6Quic {
    ackDelayExponent: number;
    activeConnectionIdLimit: number;
    activeMigration: string;
    greaseQuicBit: string;
    maxAckDelay: number;
    maxDatagramFrameSize: number;
    maxIdleTimeout: number;
    maxUdpPayloadSize: number;
}

export interface ObjectFirewallAccessproxyApiGateway6Realserver {
    addrType: string;
    address?: string;
    domain?: string;
    externalAuth: string;
    healthCheck: string;
    healthCheckProto: string;
    holddownInterval: string;
    httpHost?: string;
    id?: number;
    ip: string;
    mappedport?: string;
    port: number;
    sshClientCert?: string;
    sshHostKey?: string;
    sshHostKeyValidation: string;
    status: string;
    translateHost: string;
    tunnelEncryption: string;
    type: string;
    weight: number;
}

export interface ObjectFirewallAccessproxyApiGateway6SslCipherSuite {
    cipher?: string;
    priority: number;
    versions: string[];
}

export interface ObjectFirewallAccessproxyApiGatewayQuic {
    ackDelayExponent: number;
    activeConnectionIdLimit: number;
    activeMigration: string;
    greaseQuicBit: string;
    maxAckDelay: number;
    maxDatagramFrameSize: number;
    maxIdleTimeout: number;
    maxUdpPayloadSize: number;
}

export interface ObjectFirewallAccessproxyApiGatewayRealserver {
    addrType: string;
    address?: string;
    domain?: string;
    externalAuth: string;
    healthCheck: string;
    healthCheckProto: string;
    holddownInterval: string;
    httpHost?: string;
    id?: number;
    ip: string;
    mappedport?: string;
    port: number;
    sshClientCert?: string;
    sshHostKey?: string;
    sshHostKeyValidation: string;
    status: string;
    translateHost: string;
    tunnelEncryption: string;
    type: string;
    weight: number;
}

export interface ObjectFirewallAccessproxyApiGatewaySslCipherSuite {
    cipher?: string;
    priority: number;
    versions: string[];
}

export interface ObjectFirewallAccessproxyApigateway6Quic {
    ackDelayExponent: number;
    activeConnectionIdLimit: number;
    activeMigration: string;
    greaseQuicBit: string;
    maxAckDelay: number;
    maxDatagramFrameSize: number;
    maxIdleTimeout: number;
    maxUdpPayloadSize: number;
}

export interface ObjectFirewallAccessproxyApigateway6Realserver {
    addrType: string;
    address?: string;
    domain?: string;
    externalAuth: string;
    healthCheck: string;
    healthCheckProto: string;
    holddownInterval: string;
    httpHost?: string;
    id?: number;
    ip: string;
    mappedport?: string;
    port: number;
    sshClientCert?: string;
    sshHostKey?: string;
    sshHostKeyValidation: string;
    status: string;
    translateHost: string;
    tunnelEncryption: string;
    type: string;
    weight: number;
}

export interface ObjectFirewallAccessproxyApigateway6SslCipherSuite {
    cipher?: string;
    priority: number;
    versions: string[];
}

export interface ObjectFirewallAccessproxyApigatewayQuic {
    ackDelayExponent: number;
    activeConnectionIdLimit: number;
    activeMigration: string;
    greaseQuicBit: string;
    maxAckDelay: number;
    maxDatagramFrameSize: number;
    maxIdleTimeout: number;
    maxUdpPayloadSize: number;
}

export interface ObjectFirewallAccessproxyApigatewayRealserver {
    addrType: string;
    address?: string;
    domain?: string;
    externalAuth: string;
    healthCheck: string;
    healthCheckProto: string;
    holddownInterval: string;
    httpHost?: string;
    id?: number;
    ip: string;
    mappedport?: string;
    port: number;
    sshClientCert?: string;
    sshHostKey?: string;
    sshHostKeyValidation: string;
    status: string;
    translateHost: string;
    tunnelEncryption: string;
    type: string;
    weight: number;
}

export interface ObjectFirewallAccessproxyApigatewaySslCipherSuite {
    cipher?: string;
    priority: number;
    versions: string[];
}

export interface ObjectFirewallAccessproxyRealserver {
    id?: number;
    ip: string;
    port?: number;
    status: string;
    weight: number;
}

export interface ObjectFirewallAccessproxyServerPubkeyAuthSettings {
    authCa?: string;
    certExtensions?: outputs.ObjectFirewallAccessproxyServerPubkeyAuthSettingsCertExtension[];
    permitAgentForwarding: string;
    permitPortForwarding: string;
    permitPty: string;
    permitUserRc: string;
    permitX11Forwarding: string;
    sourceAddress: string;
}

export interface ObjectFirewallAccessproxyServerPubkeyAuthSettingsCertExtension {
    critical: string;
    data?: string;
    name?: string;
    type: string;
}

export interface ObjectFirewallAccessproxyServerpubkeyauthsettingsCertExtension {
    critical: string;
    data?: string;
    name?: string;
    type: string;
}

export interface ObjectFirewallAccessproxysshclientcertCertExtension {
    critical: string;
    data?: string;
    name?: string;
    type: string;
}

export interface ObjectFirewallAddress6DynamicMapping {
    _imageBase64?: string;
    _scopes?: outputs.ObjectFirewallAddress6DynamicMapping_Scope[];
    cacheTtl?: number;
    color?: number;
    comment?: string;
    country?: string;
    endIp?: string;
    endMac: string;
    epgName?: string;
    fabricObject: string;
    fqdn?: string;
    globalObject?: number;
    host: string;
    hostType: string;
    ip6: string;
    macaddrs: string[];
    objId?: string;
    routeTag?: number;
    sdn?: string;
    sdnTag?: string;
    startIp?: string;
    startMac: string;
    subnetSegments?: outputs.ObjectFirewallAddress6DynamicMappingSubnetSegment[];
    tags?: string;
    template?: string;
    tenant?: string;
    type: string;
    uuid: string;
    visibility?: string;
}

export interface ObjectFirewallAddress6DynamicMappingSubnetSegment {
    name?: string;
    type: string;
    value?: string;
}

export interface ObjectFirewallAddress6DynamicMapping_Scope {
    name?: string;
    vdom?: string;
}

export interface ObjectFirewallAddress6List {
    ip?: string;
    netId?: string;
    objId?: string;
}

export interface ObjectFirewallAddress6SubnetSegment {
    name?: string;
    type: string;
    value?: string;
}

export interface ObjectFirewallAddress6Tagging {
    category?: string;
    name?: string;
    tags: string[];
}

export interface ObjectFirewallAddress6templateSubnetSegment {
    bits?: number;
    exclusive: string;
    id: number;
    name?: string;
    values?: outputs.ObjectFirewallAddress6templateSubnetSegmentValue[];
}

export interface ObjectFirewallAddress6templateSubnetSegmentValue {
    name?: string;
    value?: string;
}

export interface ObjectFirewallAddress6templateSubnetsegmentValue {
    name?: string;
    value?: string;
}

export interface ObjectFirewallAddressDynamicMapping {
    _imageBase64?: string;
    _scopes?: outputs.ObjectFirewallAddressDynamicMapping_Scope[];
    allowRouting: string;
    associatedInterface?: string;
    cacheTtl?: number;
    clearpassSpt: string;
    color?: number;
    comment?: string;
    country?: string;
    dirty: string;
    endIp?: string;
    endMac: string;
    epgName?: string;
    fabricObject: string;
    filter?: string;
    fqdn?: string;
    fssoGroup?: string;
    globalObject?: number;
    hwModel?: string;
    hwVendor?: string;
    interface?: string;
    macaddrs: string[];
    nodeIpOnly: string;
    objId?: string;
    objTag?: string;
    objType: string;
    organization?: string;
    os?: string;
    patternEnd?: number;
    patternStart?: number;
    policyGroup?: string;
    routeTag?: number;
    sdn?: string;
    sdnAddrType: string;
    sdnTag?: string;
    startIp?: string;
    startMac: string;
    subType?: string;
    subnet: string;
    subnetName?: string;
    swVersion?: string;
    tagDetectionLevel?: string;
    tagType?: string;
    tags?: string;
    tenant?: string;
    type: string;
    url?: string;
    uuid: string;
    visibility?: string;
    wildcard?: string;
    wildcardFqdn?: string;
}

export interface ObjectFirewallAddressDynamicMapping_Scope {
    name?: string;
    vdom?: string;
}

export interface ObjectFirewallAddressList {
    ip?: string;
    netId?: string;
    objId?: string;
}

export interface ObjectFirewallAddressTagging {
    category?: string;
    name?: string;
    tags: string[];
}

export interface ObjectFirewallAddrgrp6DynamicMapping {
    _imageBase64?: string;
    _scopes?: outputs.ObjectFirewallAddrgrp6DynamicMapping_Scope[];
    color?: number;
    comment?: string;
    exclude: string;
    excludeMembers: string[];
    fabricObject: string;
    globalObject?: number;
    member?: string;
    tags?: string;
    uuid: string;
    visibility?: string;
}

export interface ObjectFirewallAddrgrp6DynamicMapping_Scope {
    name?: string;
    vdom?: string;
}

export interface ObjectFirewallAddrgrp6Tagging {
    category?: string;
    name?: string;
    tags: string[];
}

export interface ObjectFirewallAddrgrpDynamicMapping {
    _imageBase64?: string;
    _scopes?: outputs.ObjectFirewallAddrgrpDynamicMapping_Scope[];
    allowRouting: string;
    category: string;
    color?: number;
    comment?: string;
    exclude: string;
    excludeMember?: string;
    fabricObject: string;
    globalObject?: number;
    members: string[];
    tags?: string;
    type: string;
    uuid: string;
    visibility?: string;
}

export interface ObjectFirewallAddrgrpDynamicMapping_Scope {
    name?: string;
    vdom?: string;
}

export interface ObjectFirewallAddrgrpTagging {
    category?: string;
    name?: string;
    tags: string[];
}

export interface ObjectFirewallCarrierendpointbwlEntry {
    actions: string[];
    carrierEndpoint?: string;
    logActions: string[];
    patternType?: string;
    status?: string;
}

export interface ObjectFirewallCasbprofileSaasApplication {
    accessRules?: outputs.ObjectFirewallCasbprofileSaasApplicationAccessRule[];
    customControls?: outputs.ObjectFirewallCasbprofileSaasApplicationCustomControl[];
    domainControl: string;
    domainControlDomains: string[];
    log: string;
    name?: string;
    safeSearch: string;
    safeSearchControls: string[];
    tenantControl: string;
    tenantControlTenants: string[];
}

export interface ObjectFirewallCasbprofileSaasApplicationAccessRule {
    action: string;
    bypasses: string[];
    name?: string;
}

export interface ObjectFirewallCasbprofileSaasApplicationCustomControl {
    name?: string;
    options?: outputs.ObjectFirewallCasbprofileSaasApplicationCustomControlOption[];
}

export interface ObjectFirewallCasbprofileSaasApplicationCustomControlOption {
    name?: string;
    userInputs: string[];
}

export interface ObjectFirewallCasbprofileSaasapplicationAccessRule {
    action: string;
    bypasses: string[];
    name?: string;
}

export interface ObjectFirewallCasbprofileSaasapplicationCustomControl {
    name?: string;
    options?: outputs.ObjectFirewallCasbprofileSaasapplicationCustomControlOption[];
}

export interface ObjectFirewallCasbprofileSaasapplicationCustomControlOption {
    name?: string;
    userInputs: string[];
}

export interface ObjectFirewallCasbprofileSaasapplicationCustomcontrolOption {
    name?: string;
    userInputs: string[];
}

export interface ObjectFirewallGtpApn {
    action?: string;
    apnmember?: string;
    id?: number;
    selectionModes: string[];
}

export interface ObjectFirewallGtpIeRemovePolicy {
    id?: number;
    removeIes: string[];
    sgsnAddr?: string;
    sgsnAddr6?: string;
}

export interface ObjectFirewallGtpIeValidation {
    apnRestriction?: string;
    chargingGatewayAddr?: string;
    chargingId?: string;
    endUserAddr?: string;
    gsnAddr?: string;
    imei?: string;
    imsi?: string;
    mmContext?: string;
    msTzone?: string;
    msValidated?: string;
    msisdn?: string;
    nsapi?: string;
    pdpContext?: string;
    qosProfile?: string;
    rai?: string;
    ratType?: string;
    reorderingRequired?: string;
    selectionMode?: string;
    uli?: string;
}

export interface ObjectFirewallGtpImsi {
    action?: string;
    apnmember?: string;
    id?: number;
    mccMnc?: string;
    msisdnPrefix?: string;
    selectionModes: string[];
}

export interface ObjectFirewallGtpIpPolicy {
    action?: string;
    dstaddr?: string;
    dstaddr6?: string;
    id?: number;
    srcaddr?: string;
    srcaddr6?: string;
}

export interface ObjectFirewallGtpMessageRateLimit {
    createAaPdpRequest?: number;
    createAaPdpResponse?: number;
    createMbmsRequest?: number;
    createMbmsResponse?: number;
    createPdpRequest?: number;
    createPdpResponse?: number;
    deleteAaPdpRequest?: number;
    deleteAaPdpResponse?: number;
    deleteMbmsRequest?: number;
    deleteMbmsResponse?: number;
    deletePdpRequest?: number;
    deletePdpResponse?: number;
    echoReponse?: number;
    echoRequest?: number;
    echoResponse?: number;
    errorIndication?: number;
    failureReportRequest?: number;
    failureReportResponse?: number;
    fwdRelocCompleteAck?: number;
    fwdRelocationComplete?: number;
    fwdRelocationRequest?: number;
    fwdRelocationResponse?: number;
    fwdSrnsContext?: number;
    fwdSrnsContextAck?: number;
    gPdu?: number;
    identificationRequest?: number;
    identificationResponse?: number;
    mbmsDeRegRequest?: number;
    mbmsDeRegResponse?: number;
    mbmsNotifyRejRequest?: number;
    mbmsNotifyRejResponse?: number;
    mbmsNotifyRequest?: number;
    mbmsNotifyResponse?: number;
    mbmsRegRequest?: number;
    mbmsRegResponse?: number;
    mbmsSesStartRequest?: number;
    mbmsSesStartResponse?: number;
    mbmsSesStopRequest?: number;
    mbmsSesStopResponse?: number;
    noteMsRequest?: number;
    noteMsResponse?: number;
    pduNotifyRejRequest?: number;
    pduNotifyRejResponse?: number;
    pduNotifyRequest?: number;
    pduNotifyResponse?: number;
    ranInfo?: number;
    relocationCancelRequest?: number;
    relocationCancelResponse?: number;
    sendRouteRequest?: number;
    sendRouteResponse?: number;
    sgsnContextAck?: number;
    sgsnContextRequest?: number;
    sgsnContextResponse?: number;
    supportExtHdrNotify?: number;
    updateMbmsRequest?: number;
    updateMbmsResponse?: number;
    updatePdpRequest?: number;
    updatePdpResponse?: number;
    versionNotSupport?: number;
}

export interface ObjectFirewallGtpMessageRateLimitV0 {
    createPdpRequest?: number;
    deletePdpRequest?: number;
    echoRequest?: number;
}

export interface ObjectFirewallGtpMessageRateLimitV1 {
    createPdpRequest?: number;
    deletePdpRequest?: number;
    echoRequest?: number;
}

export interface ObjectFirewallGtpMessageRateLimitV2 {
    createSessionRequest?: number;
    deleteSessionRequest?: number;
    echoRequest?: number;
}

export interface ObjectFirewallGtpNoipPolicy {
    action?: string;
    end?: number;
    id?: number;
    start?: number;
    type?: string;
}

export interface ObjectFirewallGtpPerApnShaper {
    apn?: string;
    id?: number;
    rateLimit?: number;
    version?: number;
}

export interface ObjectFirewallGtpPolicy {
    action?: string;
    apnSelModes: string[];
    apnmember?: string;
    id?: number;
    imei?: string;
    imsi?: string;
    imsiPrefix?: string;
    maxApnRestriction?: string;
    messages: string[];
    msisdn?: string;
    msisdnPrefix?: string;
    rai?: string;
    ratTypes: string[];
    uli?: string;
}

export interface ObjectFirewallGtpPolicyV2 {
    action?: string;
    apnSelModes: string[];
    apnmember?: string;
    id?: number;
    imsiPrefix?: string;
    maxApnRestriction?: string;
    mei?: string;
    messages: string[];
    msisdnPrefix?: string;
    ratTypes: string[];
    ulis: string[];
}

export interface ObjectFirewallIdentitybasedrouteRule {
    device?: string;
    gateway: string;
    groups?: string;
    id?: number;
}

export interface ObjectFirewallInternetserviceEntry {
    id?: number;
    ipNumber?: number;
    ipRangeNumber?: number;
    ports: number[];
    protocol?: number;
}

export interface ObjectFirewallInternetserviceadditionEntry {
    addrMode: string;
    id?: number;
    portRanges?: outputs.ObjectFirewallInternetserviceadditionEntryPortRange[];
    protocol?: number;
}

export interface ObjectFirewallInternetserviceadditionEntryPortRange {
    endPort: number;
    id?: number;
    startPort: number;
}

export interface ObjectFirewallInternetservicecustomDisableEntry {
    id?: number;
    ipRanges?: outputs.ObjectFirewallInternetservicecustomDisableEntryIpRange[];
    ports: number[];
    protocol?: number;
}

export interface ObjectFirewallInternetservicecustomDisableEntryIpRange {
    endIp?: string;
    id?: number;
    startIp?: string;
}

export interface ObjectFirewallInternetservicecustomEntry {
    addrMode: string;
    dst?: string;
    dst6s: string[];
    id?: number;
    portRanges?: outputs.ObjectFirewallInternetservicecustomEntryPortRange[];
    protocol?: number;
}

export interface ObjectFirewallInternetservicecustomEntryPortRange {
    endPort: number;
    id: number;
    startPort: number;
}

export interface ObjectFirewallIppool6DynamicMapping {
    _scopes?: outputs.ObjectFirewallIppool6DynamicMapping_Scope[];
    addNat46Route: string;
    comments?: string;
    endip?: string;
    nat46: string;
    startip?: string;
}

export interface ObjectFirewallIppool6DynamicMapping_Scope {
    name?: string;
    vdom?: string;
}

export interface ObjectFirewallIppoolDynamicMapping {
    _scopes?: outputs.ObjectFirewallIppoolDynamicMapping_Scope[];
    addNat64Route: string;
    arpIntf?: string;
    arpReply: string;
    associatedInterface?: string;
    blockSize?: number;
    cgnBlockSize: number;
    cgnClientEndip?: string;
    cgnClientIpv6shift?: number;
    cgnClientStartip?: string;
    cgnFixedalloc: string;
    cgnOverload: string;
    cgnPortEnd: number;
    cgnPortStart: number;
    cgnSpa: string;
    comments?: string;
    endip?: string;
    endport: number;
    excludeIps: string[];
    nat64: string;
    numBlocksPerUser?: number;
    pbaInterimLog?: number;
    pbaTimeout?: number;
    permitAnyHost?: string;
    portPerUser?: number;
    sourceEndip?: string;
    sourceStartip?: string;
    startip?: string;
    startport: number;
    subnetBroadcastInIppool: string;
    type: string;
    utilizationAlarmClear: number;
    utilizationAlarmRaise: number;
}

export interface ObjectFirewallIppoolDynamicMapping_Scope {
    name?: string;
    vdom?: string;
}

export interface ObjectFirewallMmsprofileDupe {
    action1s: string[];
    action2s: string[];
    action3s: string[];
    blockTime1?: number;
    blockTime2?: number;
    blockTime3?: number;
    limit1?: number;
    limit2?: number;
    limit3?: number;
    protocol?: string;
    status1?: string;
    status2?: string;
    status3?: string;
    window1?: number;
    window2?: number;
    window3?: number;
}

export interface ObjectFirewallMmsprofileFlood {
    action1s: string[];
    action2s: string[];
    action3s: string[];
    blockTime1?: number;
    blockTime2?: number;
    blockTime3?: number;
    limit1?: number;
    limit2?: number;
    limit3?: number;
    protocol?: string;
    status1?: string;
    status2?: string;
    status3?: string;
    window1?: number;
    window2?: number;
    window3?: number;
}

export interface ObjectFirewallMmsprofileNotifMsisdn {
    msisdn?: string;
    thresholds: string[];
}

export interface ObjectFirewallMmsprofileNotification {
    alertInt?: number;
    alertIntMode?: string;
    alertSrcMsisdn?: string;
    alertStatus?: string;
    bwordInt?: number;
    bwordIntMode?: string;
    bwordStatus?: string;
    carrierEndpointBwlInt?: number;
    carrierEndpointBwlIntMode?: string;
    carrierEndpointBwlStatus?: string;
    daysAlloweds: string[];
    detectServer?: string;
    dupeInt?: number;
    dupeIntMode?: string;
    dupeStatus?: string;
    fileBlockInt?: number;
    fileBlockIntMode?: string;
    fileBlockStatus?: string;
    floodInt?: number;
    floodIntMode?: string;
    floodStatus?: string;
    fromInHeader?: string;
    mmsChecksumInt?: number;
    mmsChecksumIntMode?: string;
    mmsChecksumStatus?: string;
    mmscHostname?: string;
    mmscPasswords: string[];
    mmscPort?: number;
    mmscUrl?: string;
    mmscUsername?: string;
    msgProtocol?: string;
    msgType?: string;
    protocol?: string;
    rateLimit?: number;
    todWindowDuration?: string;
    todWindowEnd?: string;
    todWindowStart?: string;
    userDomain?: string;
    vasId?: string;
    vaspId?: string;
    virusInt?: number;
    virusIntMode?: string;
    virusStatus?: string;
}

export interface ObjectFirewallMmsprofileOutbreakPrevention {
    externalBlocklist?: string;
    ftgdService?: string;
}

export interface ObjectFirewallMulticastaddress6Tagging {
    category?: string;
    name?: string;
    tags?: string;
}

export interface ObjectFirewallMulticastaddressTagging {
    category?: string;
    name: string;
    tags: string[];
}

export interface ObjectFirewallProfileprotocoloptionsCifs {
    domainController?: string;
    fileFilter?: outputs.ObjectFirewallProfileprotocoloptionsCifsFileFilter;
    options: string[];
    oversizeLimit: number;
    ports: number[];
    scanBzip2: string;
    serverCredentialType: string;
    serverKeytabs?: outputs.ObjectFirewallProfileprotocoloptionsCifsServerKeytab[];
    status: string;
    tcpWindowMaximum: number;
    tcpWindowMinimum: number;
    tcpWindowSize: number;
    tcpWindowType: string;
    uncompressedNestLimit: number;
    uncompressedOversizeLimit: number;
}

export interface ObjectFirewallProfileprotocoloptionsCifsFileFilter {
    entries?: outputs.ObjectFirewallProfileprotocoloptionsCifsFileFilterEntry[];
    log?: string;
    status?: string;
}

export interface ObjectFirewallProfileprotocoloptionsCifsFileFilterEntry {
    action: string;
    comment?: string;
    direction: string;
    fileTypes: string[];
    filter?: string;
    protocols: string[];
}

export interface ObjectFirewallProfileprotocoloptionsCifsServerKeytab {
    keytab?: string;
    passwords: string[];
    principal?: string;
}

export interface ObjectFirewallProfileprotocoloptionsDns {
    ports: number[];
    status: string;
}

export interface ObjectFirewallProfileprotocoloptionsFtp {
    comfortAmount: number;
    comfortInterval: number;
    explicitFtpTls: string;
    inspectAll: string;
    options: string[];
    oversizeLimit: number;
    ports: number[];
    scanBzip2: string;
    sslOffloaded: string;
    status: string;
    streamBasedUncompressedLimit?: number;
    tcpWindowMaximum: number;
    tcpWindowMinimum: number;
    tcpWindowSize: number;
    tcpWindowType: string;
    uncompressedNestLimit: number;
    uncompressedOversizeLimit: number;
}

export interface ObjectFirewallProfileprotocoloptionsHttp {
    addressIpRating: string;
    blockPageStatusCode: number;
    comfortAmount: number;
    comfortInterval: number;
    fortinetBar: string;
    fortinetBarPort: number;
    h2c: string;
    httpPolicy?: string;
    inspectAll: string;
    options: string[];
    oversizeLimit: number;
    ports: number[];
    postLangs: string[];
    proxyAfterTcpHandshake: string;
    rangeBlock: string;
    retryCount?: number;
    scanBzip2: string;
    sslOffloaded: string;
    status: string;
    streamBasedUncompressedLimit?: number;
    streamingContentBypass: string;
    stripXForwardedFor: string;
    switchingProtocols: string;
    tcpWindowMaximum: number;
    tcpWindowMinimum: number;
    tcpWindowSize: number;
    tcpWindowType: string;
    tunnelNonHttp: string;
    uncompressedNestLimit: number;
    uncompressedOversizeLimit: number;
    unknownContentEncoding: string;
    unknownHttpVersion: string;
    verifyDnsForPolicyMatching: string;
}

export interface ObjectFirewallProfileprotocoloptionsImap {
    inspectAll: string;
    options: string[];
    oversizeLimit: number;
    ports: number[];
    proxyAfterTcpHandshake: string;
    scanBzip2: string;
    sslOffloaded: string;
    status: string;
    uncompressedNestLimit: number;
    uncompressedOversizeLimit: number;
}

export interface ObjectFirewallProfileprotocoloptionsMailSignature {
    signature?: string;
    status: string;
}

export interface ObjectFirewallProfileprotocoloptionsMapi {
    options: string[];
    oversizeLimit: number;
    ports: number[];
    scanBzip2: string;
    status: string;
    uncompressedNestLimit: number;
    uncompressedOversizeLimit: number;
}

export interface ObjectFirewallProfileprotocoloptionsNntp {
    inspectAll: string;
    options: string[];
    oversizeLimit: number;
    ports: number[];
    proxyAfterTcpHandshake: string;
    scanBzip2: string;
    status: string;
    uncompressedNestLimit: number;
    uncompressedOversizeLimit: number;
}

export interface ObjectFirewallProfileprotocoloptionsPop3 {
    inspectAll: string;
    options: string[];
    oversizeLimit: number;
    ports: number[];
    proxyAfterTcpHandshake: string;
    scanBzip2: string;
    sslOffloaded: string;
    status: string;
    uncompressedNestLimit: number;
    uncompressedOversizeLimit: number;
}

export interface ObjectFirewallProfileprotocoloptionsSmtp {
    inspectAll: string;
    options: string[];
    oversizeLimit: number;
    ports: number[];
    proxyAfterTcpHandshake: string;
    scanBzip2: string;
    serverBusy: string;
    sslOffloaded: string;
    status: string;
    uncompressedNestLimit: number;
    uncompressedOversizeLimit: number;
}

export interface ObjectFirewallProfileprotocoloptionsSsh {
    comfortAmount: number;
    comfortInterval: number;
    options: string[];
    oversizeLimit: number;
    scanBzip2: string;
    sslOffloaded: string;
    streamBasedUncompressedLimit?: number;
    tcpWindowMaximum: number;
    tcpWindowMinimum: number;
    tcpWindowSize: number;
    tcpWindowType: string;
    uncompressedNestLimit: number;
    uncompressedOversizeLimit: number;
}

export interface ObjectFirewallProxyaddressHeaderGroup {
    caseSensitivity?: string;
    header?: string;
    headerName?: string;
    id?: number;
}

export interface ObjectFirewallProxyaddressTagging {
    category?: string;
    name?: string;
    tags: string[];
}

export interface ObjectFirewallProxyaddrgrpTagging {
    category?: string;
    name?: string;
    tags: string[];
}

export interface ObjectFirewallShapingprofileShapingEntry {
    burstInMsec?: number;
    cburstInMsec?: number;
    classId: string;
    guaranteedBandwidthPercentage?: number;
    id?: number;
    limit: number;
    max: number;
    maximumBandwidthPercentage: number;
    min: number;
    priority: string;
    redProbability?: number;
}

export interface ObjectFirewallSslsshprofileDot {
    certValidationFailure: string;
    certValidationTimeout: string;
    clientCertificate: string;
    expiredServerCert: string;
    minAllowedSslVersion: string;
    proxyAfterTcpHandshake: string;
    quic: string;
    revokedServerCert: string;
    sniServerCertCheck: string;
    status: string;
    unsupportedSslCipher: string;
    unsupportedSslNegotiation: string;
    unsupportedSslVersion: string;
    untrustedServerCert: string;
}

export interface ObjectFirewallSslsshprofileEchOuterSni {
    name?: string;
    sni?: string;
}

export interface ObjectFirewallSslsshprofileFtps {
    allowInvalidServerCert?: string;
    certValidationFailure: string;
    certValidationTimeout: string;
    clientCertRequest?: string;
    clientCertificate: string;
    expiredServerCert: string;
    invalidServerCert?: string;
    minAllowedSslVersion: string;
    ports: number[];
    revokedServerCert: string;
    sniServerCertCheck: string;
    status: string;
    unsupportedSsl?: string;
    unsupportedSslCipher: string;
    unsupportedSslNegotiation: string;
    unsupportedSslVersion: string;
    untrustedCert?: string;
    untrustedServerCert: string;
}

export interface ObjectFirewallSslsshprofileHttps {
    allowInvalidServerCert?: string;
    certProbeFailure: string;
    certValidationFailure: string;
    certValidationTimeout: string;
    clientCertRequest?: string;
    clientCertificate: string;
    encryptedClientHello: string;
    expiredServerCert: string;
    invalidServerCert?: string;
    minAllowedSslVersion: string;
    ports: number[];
    proxyAfterTcpHandshake: string;
    quic: string;
    revokedServerCert: string;
    sniServerCertCheck: string;
    status: string;
    unsupportedSsl?: string;
    unsupportedSslCipher: string;
    unsupportedSslNegotiation: string;
    unsupportedSslVersion: string;
    untrustedCert?: string;
    untrustedServerCert: string;
}

export interface ObjectFirewallSslsshprofileImaps {
    allowInvalidServerCert?: string;
    certValidationFailure: string;
    certValidationTimeout: string;
    clientCertRequest?: string;
    clientCertificate: string;
    expiredServerCert: string;
    invalidServerCert?: string;
    minAllowedSslVersion: string;
    ports: number[];
    proxyAfterTcpHandshake: string;
    revokedServerCert: string;
    sniServerCertCheck: string;
    status: string;
    unsupportedSsl?: string;
    unsupportedSslCipher: string;
    unsupportedSslNegotiation: string;
    unsupportedSslVersion: string;
    untrustedCert?: string;
    untrustedServerCert: string;
}

export interface ObjectFirewallSslsshprofilePop3s {
    allowInvalidServerCert?: string;
    certValidationFailure: string;
    certValidationTimeout: string;
    clientCertRequest?: string;
    clientCertificate: string;
    expiredServerCert: string;
    invalidServerCert?: string;
    minAllowedSslVersion: string;
    ports: number[];
    proxyAfterTcpHandshake: string;
    revokedServerCert: string;
    sniServerCertCheck: string;
    status: string;
    unsupportedSsl?: string;
    unsupportedSslCipher: string;
    unsupportedSslNegotiation: string;
    unsupportedSslVersion: string;
    untrustedCert?: string;
    untrustedServerCert: string;
}

export interface ObjectFirewallSslsshprofileSmtps {
    allowInvalidServerCert?: string;
    certValidationFailure: string;
    certValidationTimeout: string;
    clientCertRequest?: string;
    clientCertificate: string;
    expiredServerCert: string;
    invalidServerCert?: string;
    minAllowedSslVersion: string;
    ports: number[];
    proxyAfterTcpHandshake: string;
    revokedServerCert: string;
    sniServerCertCheck: string;
    status: string;
    unsupportedSsl?: string;
    unsupportedSslCipher: string;
    unsupportedSslNegotiation: string;
    unsupportedSslVersion: string;
    untrustedCert?: string;
    untrustedServerCert: string;
}

export interface ObjectFirewallSslsshprofileSsh {
    inspectAll: string;
    ports: number[];
    proxyAfterTcpHandshake: string;
    sshAlgorithm: string;
    sshPolicyCheck?: string;
    sshTunPolicyCheck: string;
    status: string;
    unsupportedVersion: string;
}

export interface ObjectFirewallSslsshprofileSsl {
    allowInvalidServerCert?: string;
    certProbeFailure: string;
    certValidationFailure?: string;
    certValidationTimeout?: string;
    clientCertRequest?: string;
    clientCertificate: string;
    encryptedClientHello: string;
    expiredServerCert?: string;
    inspectAll: string;
    invalidServerCert?: string;
    minAllowedSslVersion: string;
    revokedServerCert?: string;
    sniServerCertCheck: string;
    unsupportedSsl?: string;
    unsupportedSslCipher: string;
    unsupportedSslNegotiation: string;
    unsupportedSslVersion: string;
    untrustedCert?: string;
    untrustedServerCert?: string;
}

export interface ObjectFirewallSslsshprofileSslExempt {
    address?: string;
    address6?: string;
    fortiguardCategories: string[];
    id: number;
    regex?: string;
    type: string;
    wildcardFqdns: string[];
}

export interface ObjectFirewallSslsshprofileSslServer {
    ftpsClientCertRequest?: string;
    ftpsClientCertificate: string;
    httpsClientCertRequest?: string;
    httpsClientCertificate: string;
    id?: number;
    imapsClientCertRequest?: string;
    imapsClientCertificate: string;
    ip: string;
    pop3sClientCertRequest?: string;
    pop3sClientCertificate: string;
    smtpsClientCertRequest?: string;
    smtpsClientCertificate: string;
    sslOtherClientCertRequest?: string;
    sslOtherClientCertificate: string;
}

export interface ObjectFirewallVip46DynamicMapping {
    _scopes?: outputs.ObjectFirewallVip46DynamicMapping_Scope[];
    arpReply: string;
    color?: number;
    comment?: string;
    extip?: string;
    extport?: string;
    id?: number;
    ldbMethod: string;
    mappedip?: string;
    mappedport?: string;
    monitor?: string;
    portforward: string;
    protocol: string;
    serverType?: string;
    srcFilters: string[];
    srcintfFilter?: string;
    type: string;
    uuid: string;
}

export interface ObjectFirewallVip46DynamicMapping_Scope {
    name?: string;
    vdom?: string;
}

export interface ObjectFirewallVip46Realserver {
    clientIp?: string;
    healthcheck: string;
    holddownInterval: number;
    id?: number;
    ip: string;
    maxConnections?: number;
    monitor?: string;
    port?: number;
    status: string;
    weight: number;
}

export interface ObjectFirewallVip64DynamicMapping {
    _scopes?: outputs.ObjectFirewallVip64DynamicMapping_Scope[];
    arpReply: string;
    color?: number;
    comment?: string;
    extip?: string;
    extport?: string;
    id?: number;
    ldbMethod: string;
    mappedip?: string;
    mappedport?: string;
    monitor?: string;
    portforward: string;
    protocol: string;
    serverType?: string;
    srcFilters: string[];
    type: string;
    uuid: string;
}

export interface ObjectFirewallVip64DynamicMapping_Scope {
    name?: string;
    vdom?: string;
}

export interface ObjectFirewallVip64Realserver {
    clientIp?: string;
    healthcheck: string;
    holddownInterval: number;
    id?: number;
    ip: string;
    maxConnections?: number;
    monitor?: string;
    port?: number;
    status: string;
    weight: number;
}

export interface ObjectFirewallVip6DynamicMapping {
    _scopes?: outputs.ObjectFirewallVip6DynamicMapping_Scope[];
    addNat64Route: string;
    arpReply: string;
    color?: number;
    comment?: string;
    embeddedIpv4Address: string;
    extip?: string;
    extport: string;
    h2Support: string;
    h3Support: string;
    httpCookieAge: number;
    httpCookieDomain?: string;
    httpCookieDomainFromHost: string;
    httpCookieGeneration?: number;
    httpCookiePath?: string;
    httpCookieShare: string;
    httpIpHeader: string;
    httpIpHeaderName?: string;
    httpMultiplex: string;
    httpRedirect: string;
    httpsCookieSecure: string;
    id?: number;
    ipv4Mappedip?: string;
    ipv4Mappedport: string;
    ldbMethod: string;
    mappedip?: string;
    mappedport: string;
    maxEmbryonicConnections: number;
    monitor?: string;
    nat64: string;
    nat66: string;
    natSourceVip: string;
    ndpReply: string;
    outlookWebAccess: string;
    persistence: string;
    portforward: string;
    protocol: string;
    realservers?: outputs.ObjectFirewallVip6DynamicMappingRealserver[];
    serverType?: string;
    srcFilters: string[];
    srcVipFilter: string;
    sslAcceptFfdheGroups: string;
    sslAlgorithm?: string;
    sslCertificate?: string;
    sslCipherSuites?: outputs.ObjectFirewallVip6DynamicMappingSslCipherSuite[];
    sslClientFallback: string;
    sslClientRekeyCount?: number;
    sslClientRenegotiation?: string;
    sslClientSessionStateMax?: number;
    sslClientSessionStateTimeout?: number;
    sslClientSessionStateType?: string;
    sslDhBits?: string;
    sslHpkp?: string;
    sslHpkpAge?: number;
    sslHpkpBackup?: string;
    sslHpkpIncludeSubdomains?: string;
    sslHpkpPrimary?: string;
    sslHpkpReportUri?: string;
    sslHsts: string;
    sslHstsAge: number;
    sslHstsIncludeSubdomains: string;
    sslHttpLocationConversion: string;
    sslHttpMatchHost?: string;
    sslMaxVersion?: string;
    sslMinVersion?: string;
    sslMode?: string;
    sslPfs?: string;
    sslSendEmptyFrags?: string;
    sslServerAlgorithm: string;
    sslServerMaxVersion: string;
    sslServerMinVersion: string;
    sslServerRenegotiation: string;
    sslServerSessionStateMax?: number;
    sslServerSessionStateTimeout?: number;
    sslServerSessionStateType: string;
    type: string;
    uuid: string;
    weblogicServer: string;
    websphereServer: string;
}

export interface ObjectFirewallVip6DynamicMappingRealserver {
    clientIp?: string;
    healthcheck: string;
    holddownInterval: number;
    httpHost?: string;
    id?: number;
    ip: string;
    maxConnections?: number;
    monitor?: string;
    port?: number;
    status: string;
    translateHost?: string;
    weight: number;
}

export interface ObjectFirewallVip6DynamicMappingSslCipherSuite {
    cipher?: string;
    priority?: number;
    versions: string[];
}

export interface ObjectFirewallVip6DynamicMapping_Scope {
    name?: string;
    vdom?: string;
}

export interface ObjectFirewallVip6Quic {
    ackDelayExponent: number;
    activeConnectionIdLimit: number;
    activeMigration: string;
    greaseQuicBit: string;
    maxAckDelay: number;
    maxDatagramFrameSize: number;
    maxIdleTimeout: number;
    maxUdpPayloadSize: number;
}

export interface ObjectFirewallVip6Realserver {
    clientIp?: string;
    healthcheck: string;
    holddownInterval: number;
    httpHost?: string;
    id?: number;
    ip: string;
    maxConnections?: number;
    monitor?: string;
    port?: number;
    status: string;
    translateHost: string;
    weight: number;
}

export interface ObjectFirewallVip6SslCipherSuite {
    cipher?: string;
    priority?: number;
    versions: string[];
}

export interface ObjectFirewallVip6SslServerCipherSuite {
    cipher?: string;
    priority?: number;
    versions: string[];
}

export interface ObjectFirewallVipDynamicMapping {
    _scopes?: outputs.ObjectFirewallVipDynamicMapping_Scope[];
    addNat46Route?: string;
    arpReply: string;
    color?: number;
    comment?: string;
    dnsMappingTtl?: number;
    extaddr?: string;
    extintf?: string;
    extip: string;
    extport?: string;
    gratuitousArpInterval?: number;
    gslbDomainName?: string;
    gslbHostname?: string;
    h2Support: string;
    h3Support: string;
    httpCookieAge?: number;
    httpCookieDomain?: string;
    httpCookieDomainFromHost?: string;
    httpCookieGeneration?: number;
    httpCookiePath?: string;
    httpCookieShare?: string;
    httpIpHeader?: string;
    httpIpHeaderName?: string;
    httpMultiplex?: string;
    httpMultiplexMaxConcurrentRequest?: number;
    httpMultiplexMaxRequest?: number;
    httpMultiplexTtl: number;
    httpRedirect: string;
    httpSupportedMaxVersion?: string;
    httpsCookieSecure?: string;
    id?: number;
    ipv6Mappedip: string;
    ipv6Mappedport?: string;
    ldbMethod?: string;
    mappedAddr?: string;
    mappedips: string[];
    mappedport?: string;
    maxEmbryonicConnections?: number;
    monitor?: string;
    nat44: string;
    nat46: string;
    natSourceVip: string;
    oneClickGslbServer: string;
    outlookWebAccess?: string;
    persistence?: string;
    portforward: string;
    portmappingType?: string;
    protocol?: string;
    realservers?: outputs.ObjectFirewallVipDynamicMappingRealserver[];
    serverType?: string;
    service?: string;
    srcFilters: string[];
    srcVipFilter?: string;
    srcintfFilters: string[];
    sslAcceptFfdheGroups: string;
    sslAlgorithm?: string;
    sslCertificate?: string;
    sslCipherSuites?: outputs.ObjectFirewallVipDynamicMappingSslCipherSuite[];
    sslClientFallback: string;
    sslClientRekeyCount?: number;
    sslClientRenegotiation?: string;
    sslClientSessionStateMax?: number;
    sslClientSessionStateTimeout?: number;
    sslClientSessionStateType?: string;
    sslDhBits?: string;
    sslHpkp?: string;
    sslHpkpAge?: number;
    sslHpkpBackup?: string;
    sslHpkpIncludeSubdomains?: string;
    sslHpkpPrimary?: string;
    sslHpkpReportUri?: string;
    sslHsts?: string;
    sslHstsAge?: number;
    sslHstsIncludeSubdomains?: string;
    sslHttpLocationConversion?: string;
    sslHttpMatchHost?: string;
    sslMaxVersion?: string;
    sslMinVersion?: string;
    sslMode?: string;
    sslPfs?: string;
    sslSendEmptyFrags?: string;
    sslServerAlgorithm: string;
    sslServerMaxVersion: string;
    sslServerMinVersion: string;
    sslServerRenegotiation: string;
    sslServerSessionStateMax?: number;
    sslServerSessionStateTimeout?: number;
    sslServerSessionStateType?: string;
    status: string;
    type: string;
    uuid: string;
    weblogicServer?: string;
    websphereServer?: string;
}

export interface ObjectFirewallVipDynamicMappingRealserver {
    address?: string;
    clientIps: string[];
    healthCheckProto?: string;
    healthcheck?: string;
    holddownInterval?: number;
    httpHost?: string;
    id?: number;
    ip?: string;
    maxConnections?: number;
    monitor?: string;
    port?: number;
    seq?: number;
    status?: string;
    translateHost?: string;
    type?: string;
    weight?: number;
}

export interface ObjectFirewallVipDynamicMappingSslCipherSuite {
    cipher?: string;
    id?: number;
    priority?: number;
    versions: string[];
}

export interface ObjectFirewallVipDynamicMapping_Scope {
    name?: string;
    vdom?: string;
}

export interface ObjectFirewallVipGslbPublicIp {
    index: number;
    ip: string;
}

export interface ObjectFirewallVipQuic {
    ackDelayExponent: number;
    activeConnectionIdLimit: number;
    activeMigration: string;
    greaseQuicBit: string;
    maxAckDelay: number;
    maxDatagramFrameSize: number;
    maxIdleTimeout: number;
    maxUdpPayloadSize: number;
}

export interface ObjectFirewallVipRealserver {
    address?: string;
    clientIps: string[];
    healthcheck?: string;
    holddownInterval?: number;
    httpHost?: string;
    id?: number;
    ip?: string;
    maxConnections?: number;
    monitor?: string;
    port?: number;
    seq?: number;
    status?: string;
    translateHost?: string;
    type?: string;
    weight?: number;
}

export interface ObjectFirewallVipSslCipherSuite {
    cipher?: string;
    id?: number;
    priority?: number;
    versions: string[];
}

export interface ObjectFirewallVipSslServerCipherSuite {
    cipher?: string;
    priority?: number;
    versions: string[];
}

export interface ObjectFirewallVipgrpDynamicMapping {
    _scopes?: outputs.ObjectFirewallVipgrpDynamicMapping_Scope[];
    color?: number;
    comments?: string;
    interface?: string;
    member?: string;
    uuid: string;
}

export interface ObjectFirewallVipgrpDynamicMapping_Scope {
    name?: string;
    vdom?: string;
}

export interface ObjectFmgFabricAuthorizationTemplatePlatform {
    count?: number;
    extensionType: string;
    fortilink?: string;
    prefix?: string;
    type?: string;
}

export interface ObjectFmgVariableDynamicMapping {
    _scopes?: outputs.ObjectFmgVariableDynamicMapping_Scope[];
    value?: string;
}

export interface ObjectFmgVariableDynamicMapping_Scope {
    name?: string;
    vdom?: string;
}

export interface ObjectFspVlanDhcpServer {
    autoConfiguration: string;
    autoManagedStatus: string;
    conflictedIpTimeout: number;
    ddnsAuth: string;
    ddnsKey?: string;
    ddnsKeyname?: string;
    ddnsServerIp: string;
    ddnsTtl: number;
    ddnsUpdate: string;
    ddnsUpdateOverride: string;
    ddnsZone?: string;
    defaultGateway: string;
    dhcpSettingsFromFortiipam: string;
    dnsServer1: string;
    dnsServer2: string;
    dnsServer3: string;
    dnsServer4: string;
    dnsService: string;
    domain?: string;
    enable?: string;
    excludeRanges?: outputs.ObjectFspVlanDhcpServerExcludeRange[];
    filename?: string;
    forticlientOnNetStatus: string;
    id?: number;
    ipMode?: string;
    ipRanges?: outputs.ObjectFspVlanDhcpServerIpRange[];
    ipsecLeaseHold?: number;
    leaseTime: number;
    macAclDefaultAction: string;
    netmask: string;
    nextServer: string;
    ntpServer1: string;
    ntpServer2: string;
    ntpServer3: string;
    ntpService: string;
    option1s: string[];
    option2s: string[];
    option3s: string[];
    option4?: string;
    option5?: string;
    option6?: string;
    options?: outputs.ObjectFspVlanDhcpServerOption[];
    relayAgent: string;
    reservedAddresses?: outputs.ObjectFspVlanDhcpServerReservedAddress[];
    serverType: string;
    sharedSubnet: string;
    status: string;
    tftpServers: string[];
    timezone: string;
    timezoneOption: string;
    vciMatch: string;
    vciStrings: string[];
    wifiAc1: string;
    wifiAc2: string;
    wifiAc3: string;
    wifiAcService: string;
    winsServer1: string;
    winsServer2: string;
}

export interface ObjectFspVlanDhcpServerExcludeRange {
    endIp: string;
    id?: number;
    leaseTime?: number;
    startIp: string;
    uciMatch: string;
    uciStrings: string[];
    vciMatch: string;
    vciStrings: string[];
}

export interface ObjectFspVlanDhcpServerIpRange {
    endIp: string;
    id?: number;
    leaseTime?: number;
    startIp: string;
    uciMatch: string;
    uciStrings: string[];
    vciMatch: string;
    vciStrings: string[];
}

export interface ObjectFspVlanDhcpServerOption {
    code?: number;
    id?: number;
    ips: string[];
    type: string;
    uciMatch: string;
    uciStrings: string[];
    value?: string;
    vciMatch: string;
    vciStrings: string[];
}

export interface ObjectFspVlanDhcpServerReservedAddress {
    action: string;
    circuitId?: string;
    circuitIdType?: string;
    description?: string;
    id?: number;
    ip: string;
    mac: string;
    remoteId?: string;
    remoteIdType?: string;
    type: string;
}

export interface ObjectFspVlanDynamicMapping {
    _dhcpStatus?: string;
    _scopes?: outputs.ObjectFspVlanDynamicMapping_Scope[];
    dhcpServer?: outputs.ObjectFspVlanDynamicMappingDhcpServer;
    interface?: outputs.ObjectFspVlanDynamicMappingInterface;
}

export interface ObjectFspVlanDynamicMappingDhcpServer {
    autoConfiguration: string;
    autoManagedStatus: string;
    conflictedIpTimeout: number;
    ddnsAuth: string;
    ddnsKey?: string;
    ddnsKeyname?: string;
    ddnsServerIp: string;
    ddnsTtl: number;
    ddnsUpdate: string;
    ddnsUpdateOverride: string;
    ddnsZone?: string;
    defaultGateway: string;
    dhcpSettingsFromFortiipam: string;
    dnsServer1: string;
    dnsServer2: string;
    dnsServer3: string;
    dnsServer4: string;
    dnsService: string;
    domain?: string;
    enable?: string;
    excludeRanges?: outputs.ObjectFspVlanDynamicMappingDhcpServerExcludeRange[];
    filename?: string;
    forticlientOnNetStatus: string;
    id?: number;
    ipMode?: string;
    ipRanges?: outputs.ObjectFspVlanDynamicMappingDhcpServerIpRange[];
    ipsecLeaseHold?: number;
    leaseTime: number;
    macAclDefaultAction: string;
    netmask: string;
    nextServer: string;
    ntpServer1: string;
    ntpServer2: string;
    ntpServer3: string;
    ntpService: string;
    option1s: string[];
    option2s: string[];
    option3s: string[];
    option4?: string;
    option5?: string;
    option6?: string;
    options?: outputs.ObjectFspVlanDynamicMappingDhcpServerOption[];
    relayAgent: string;
    reservedAddresses?: outputs.ObjectFspVlanDynamicMappingDhcpServerReservedAddress[];
    serverType: string;
    sharedSubnet: string;
    status: string;
    tftpServers: string[];
    timezone?: string;
    timezoneOption: string;
    vciMatch: string;
    vciStrings: string[];
    wifiAc1: string;
    wifiAc2: string;
    wifiAc3: string;
    wifiAcService: string;
    winsServer1: string;
    winsServer2: string;
}

export interface ObjectFspVlanDynamicMappingDhcpServerExcludeRange {
    endIp: string;
    id?: number;
    leaseTime?: number;
    startIp: string;
    uciMatch: string;
    uciStrings: string[];
    vciMatch: string;
    vciStrings: string[];
}

export interface ObjectFspVlanDynamicMappingDhcpServerIpRange {
    endIp: string;
    id?: number;
    leaseTime?: number;
    startIp: string;
    uciMatch: string;
    uciStrings: string[];
    vciMatch: string;
    vciStrings: string[];
}

export interface ObjectFspVlanDynamicMappingDhcpServerOption {
    code?: number;
    id?: number;
    ips: string[];
    type: string;
    uciMatch: string;
    uciStrings: string[];
    value?: string;
    vciMatch: string;
    vciStrings: string[];
}

export interface ObjectFspVlanDynamicMappingDhcpServerReservedAddress {
    action: string;
    circuitId?: string;
    circuitIdType?: string;
    description?: string;
    id?: number;
    ip: string;
    mac: string;
    remoteId?: string;
    remoteIdType?: string;
    type: string;
}

export interface ObjectFspVlanDynamicMappingInterface {
    dhcpRelayAgentOption?: string;
    dhcpRelayInterfaceSelectMethod?: string;
    dhcpRelayIps: string[];
    dhcpRelayService?: string;
    dhcpRelayType?: string;
    ip?: string;
    ipv6?: outputs.ObjectFspVlanDynamicMappingInterfaceIpv6;
    secondaryIp?: string;
    secondaryips?: outputs.ObjectFspVlanDynamicMappingInterfaceSecondaryip[];
    vlanid?: number;
    vrrps?: outputs.ObjectFspVlanDynamicMappingInterfaceVrrp[];
}

export interface ObjectFspVlanDynamicMappingInterfaceIpv6 {
    autoconf?: string;
    cliConn6Status?: number;
    dhcp6ClientOptions: string[];
    dhcp6InformationRequest?: string;
    dhcp6PrefixDelegation?: string;
    dhcp6PrefixHint?: string;
    dhcp6PrefixHintPlt?: number;
    dhcp6PrefixHintVlt?: number;
    dhcp6RelayInterfaceId?: string;
    dhcp6RelayIp?: string;
    dhcp6RelayService?: string;
    dhcp6RelaySourceInterface?: string;
    dhcp6RelaySourceIp?: string;
    dhcp6RelayType?: string;
    icmp6SendRedirect?: string;
    interfaceIdentifier?: string;
    ip6Address?: string;
    ip6Allowaccesses: string[];
    ip6DefaultLife?: number;
    ip6DelegatedPrefixIaid?: number;
    ip6DelegatedPrefixLists?: outputs.ObjectFspVlanDynamicMappingInterfaceIpv6Ip6DelegatedPrefixList[];
    ip6DnsServerOverride?: string;
    ip6ExtraAddrs?: outputs.ObjectFspVlanDynamicMappingInterfaceIpv6Ip6ExtraAddr[];
    ip6HopLimit?: number;
    ip6LinkMtu?: number;
    ip6ManageFlag?: string;
    ip6MaxInterval?: number;
    ip6MinInterval?: number;
    ip6Mode?: string;
    ip6OtherFlag?: string;
    ip6PrefixLists?: outputs.ObjectFspVlanDynamicMappingInterfaceIpv6Ip6PrefixList[];
    ip6PrefixMode?: string;
    ip6ReachableTime?: number;
    ip6RetransTime?: number;
    ip6SendAdv?: string;
    ip6Subnet?: string;
    ip6UpstreamInterface?: string;
    ndCert?: string;
    ndCgaModifier?: string;
    ndMode?: string;
    ndSecurityLevel?: number;
    ndTimestampDelta?: number;
    ndTimestampFuzz?: number;
    raSendMtu?: string;
    uniqueAutoconfAddr?: string;
    vrip6LinkLocal?: string;
    vrrp6s?: outputs.ObjectFspVlanDynamicMappingInterfaceIpv6Vrrp6[];
    vrrpVirtualMac6?: string;
}

export interface ObjectFspVlanDynamicMappingInterfaceIpv6Ip6DelegatedPrefixList {
    autonomousFlag?: string;
    delegatedPrefixIaid?: number;
    onlinkFlag?: string;
    prefixId?: number;
    rdnssService?: string;
    rdnsses: string[];
    subnet?: string;
    upstreamInterface?: string;
}

export interface ObjectFspVlanDynamicMappingInterfaceIpv6Ip6ExtraAddr {
    prefix?: string;
}

export interface ObjectFspVlanDynamicMappingInterfaceIpv6Ip6PrefixList {
    autonomousFlag?: string;
    dnssls: string[];
    onlinkFlag?: string;
    preferredLifeTime?: number;
    prefix?: string;
    rdnsses: string[];
    validLifeTime?: number;
}

export interface ObjectFspVlanDynamicMappingInterfaceIpv6Vrrp6 {
    acceptMode?: string;
    advInterval?: number;
    ignoreDefaultRoute?: string;
    preempt?: string;
    priority?: number;
    startTime?: number;
    status?: string;
    vrdst6?: string;
    vrgrp?: number;
    vrid?: number;
    vrip6?: string;
}

export interface ObjectFspVlanDynamicMappingInterfaceSecondaryip {
    allowaccesses: string[];
    detectprotocols: string[];
    detectserver?: string;
    gwdetect?: string;
    haPriority?: number;
    id?: number;
    ip?: string;
    pingServStatus?: number;
    secipRelayIp?: string;
    seq?: number;
}

export interface ObjectFspVlanDynamicMappingInterfaceVrrp {
    acceptMode?: string;
    advInterval?: number;
    ignoreDefaultRoute?: string;
    preempt?: string;
    priority?: number;
    proxyArps?: outputs.ObjectFspVlanDynamicMappingInterfaceVrrpProxyArp[];
    startTime?: number;
    status?: string;
    version?: string;
    vrdstPriority?: number;
    vrdsts: string[];
    vrgrp?: number;
    vrid?: number;
    vrip?: string;
}

export interface ObjectFspVlanDynamicMappingInterfaceVrrpProxyArp {
    id?: number;
    ip?: string;
}

export interface ObjectFspVlanDynamicMapping_Scope {
    name?: string;
    vdom?: string;
}

export interface ObjectFspVlanInterface {
    acName?: string;
    aggregate?: string;
    aggregateType: string;
    algorithm?: string;
    alias?: string;
    allowaccesses: string[];
    annex: string;
    apDiscover: string;
    arpforward: string;
    atmProtocol?: string;
    authCert?: string;
    authPortalAddr?: string;
    authType?: string;
    autoAuthExtensionDevice: string;
    bandwidthMeasureTime?: number;
    bfd: string;
    bfdDesiredMinTx?: number;
    bfdDetectMult?: number;
    bfdRequiredMinRx?: number;
    broadcastForticlientDiscovery?: string;
    broadcastForward: string;
    captivePortal?: number;
    cliConnStatus?: number;
    color?: number;
    ddns?: string;
    ddnsAuth?: string;
    ddnsDomain?: string;
    ddnsKey?: string;
    ddnsKeyname?: string;
    ddnsPasswords: string[];
    ddnsServer?: string;
    ddnsServerIp?: string;
    ddnsSn?: string;
    ddnsTtl?: number;
    ddnsUsername?: string;
    ddnsZone?: string;
    dedicatedTo: string;
    defaultPurdueLevel: string;
    defaultgw?: string;
    description?: string;
    detectedPeerMtu?: number;
    detectprotocols: string[];
    detectserver?: string;
    deviceAccessList?: string;
    deviceIdentification: string;
    deviceIdentificationActiveScan?: string;
    deviceNetscan?: string;
    deviceUserIdentification?: string;
    devindex?: number;
    dhcpBroadcastFlag: string;
    dhcpClasslessRouteAddition: string;
    dhcpClientIdentifier?: string;
    dhcpRelayAgentOption?: string;
    dhcpRelayCircuitId?: string;
    dhcpRelayInterface?: string;
    dhcpRelayInterfaceSelectMethod: string;
    dhcpRelayIps: string[];
    dhcpRelayLinkSelection: string;
    dhcpRelayRequestAllServer: string;
    dhcpRelayService: string;
    dhcpRelaySourceIp: string;
    dhcpRelayType?: string;
    dhcpRenewTime?: number;
    dhcpSmartRelay: string;
    discRetryTimeout?: number;
    disconnectThreshold?: number;
    distance?: number;
    dnsQuery?: string;
    dnsServerOverride?: string;
    dnsServerProtocols: string[];
    dropFragment: string;
    dropOverlappedFragment: string;
    eapCaCerts: string[];
    eapIdentity?: string;
    eapMethod?: string;
    eapPasswords: string[];
    eapSupplicant: string;
    eapUserCerts: string[];
    egressCos: string;
    egressShapingProfile?: string;
    eip: string;
    endpointCompliance?: string;
    estimatedDownstreamBandwidth?: number;
    estimatedUpstreamBandwidth?: number;
    explicitFtpProxy: string;
    explicitWebProxy: string;
    external: string;
    failActionOnExtender: string;
    failAlertInterfaces?: string;
    failAlertMethod?: string;
    failDetect: string;
    failDetectOptions: string[];
    fdp?: string;
    fortiheartbeat?: string;
    fortilink: string;
    fortilinkBackupLink?: number;
    fortilinkNeighborDetect: string;
    fortilinkSplitInterface?: string;
    fortilinkStacking: string;
    forwardDomain?: number;
    forwardErrorCorrection: string;
    fpAnomalies: string[];
    fpDisables: string[];
    gatewayAddress?: string;
    genericReceiveOffload?: string;
    giGk: string;
    gwaddr?: string;
    gwdetect?: string;
    haPriority?: number;
    icmpAcceptRedirect: string;
    icmpRedirect?: string;
    icmpSendRedirect: string;
    identAccept: string;
    idleTimeout?: number;
    ifMdix?: string;
    ifMedia?: string;
    ikeSamlServers: string[];
    inForceVlanCos?: number;
    inbandwidth?: number;
    ingressCos: string;
    ingressShapingProfile?: string;
    ingressSpilloverThreshold?: number;
    interconnectProfile: string;
    internal?: number;
    ip: string;
    ipManagedByFortiipam: string;
    ipmac: string;
    ipsSnifferMode: string;
    ipunnumbered?: string;
    ipv6?: outputs.ObjectFspVlanInterfaceIpv6;
    l2forward: string;
    l2tpClient: string;
    lacpHaSecondary: string;
    lacpHaSlave?: string;
    lacpMode?: string;
    lacpSpeed?: string;
    largeReceiveOffload?: string;
    lcpEchoInterval?: number;
    lcpMaxEchoFails?: number;
    linkUpDelay?: number;
    listenForticlientConnection?: string;
    lldpNetworkPolicy?: string;
    lldpReception?: string;
    lldpTransmission?: string;
    log?: string;
    macaddr: string;
    managedSubnetworkSize: string;
    managementIp: string;
    maxEgressBurstRate?: number;
    maxEgressRate?: number;
    measuredDownstreamBandwidth?: number;
    measuredUpstreamBandwidth?: number;
    mediatype?: string;
    member?: string;
    minLinks: number;
    minLinksDown: string;
    mirroringDirection?: string;
    mirroringPort?: string;
    mode: string;
    monitorBandwidth: string;
    mtu?: number;
    mtuOverride: string;
    muxType?: string;
    name?: string;
    ndiscforward: string;
    netbiosForward: string;
    netflowSampler: string;
    npQosProfile?: number;
    npuFastpath?: string;
    nst?: string;
    outForceVlanCos?: number;
    outbandwidth?: number;
    padtRetryTimeout?: number;
    passwords: string[];
    peerInterface?: string;
    phyMode?: string;
    pingServStatus?: number;
    poe: string;
    pollingInterval: number;
    portMirroring: string;
    pppoeUnnumberedNegotiate: string;
    pptpAuthType: string;
    pptpClient: string;
    pptpPasswords: string[];
    pptpServerIp: string;
    pptpTimeout?: number;
    pptpUser?: string;
    preserveSessionRoute: string;
    priority?: number;
    priorityOverride: string;
    proxyCaptivePortal: string;
    pvcAtmQos?: string;
    pvcChan?: number;
    pvcCrc?: number;
    pvcPcr?: number;
    pvcScr?: number;
    pvcVlanId?: number;
    pvcVlanRxId?: number;
    pvcVlanRxOp?: string;
    pvcVlanTxId?: number;
    pvcVlanTxOp?: string;
    reachableTime: number;
    redundantInterface?: string;
    remoteIp?: string;
    replacemsgOverrideGroup?: string;
    retransmission: string;
    ringRx?: number;
    ringTx?: number;
    role: string;
    sampleDirection: string;
    sampleRate: number;
    scanBotnetConnections?: string;
    secondaryIp: string;
    secondaryips?: outputs.ObjectFspVlanInterfaceSecondaryip[];
    security8021xDynamicVlanId?: number;
    security8021xMaster?: string;
    security8021xMemberMode: string;
    security8021xMode?: string;
    securityExemptList?: string;
    securityExternalLogout?: string;
    securityExternalWeb?: string;
    securityGroups?: string;
    securityMacAuthBypass: string;
    securityMode: string;
    securityRedirectUrl?: string;
    selectProfile30a35b: string;
    serviceName?: string;
    sflowSampler: string;
    sfpDsl: string;
    sfpDslAdslFallback: string;
    sfpDslAutodetect: string;
    sfpDslMac: string;
    speed: string;
    spilloverThreshold?: number;
    srcCheck: string;
    status: string;
    stp: string;
    stpEdge: string;
    stpHaSecondary: string;
    stpHaSlave: string;
    stpforward: string;
    stpforwardMode: string;
    stripPriorityVlanTag?: string;
    subst: string;
    substituteDstMac: string;
    swAlgorithm: string;
    swcFirstCreate?: number;
    swcVlan?: number;
    switch?: string;
    switchControllerAccessVlan: string;
    switchControllerArpInspection: string;
    switchControllerAuth?: string;
    switchControllerDhcpSnooping: string;
    switchControllerDhcpSnoopingOption82: string;
    switchControllerDhcpSnoopingVerifyMac: string;
    switchControllerDynamic?: string;
    switchControllerFeature: string;
    switchControllerIgmpSnooping: string;
    switchControllerIgmpSnoopingFastLeave: string;
    switchControllerIgmpSnoopingProxy: string;
    switchControllerIotScanning: string;
    switchControllerLearningLimit?: number;
    switchControllerMgmtVlan: number;
    switchControllerNac?: string;
    switchControllerNetflowCollect: string;
    switchControllerOffload: string;
    switchControllerOffloadGw: string;
    switchControllerOffloadIp: string;
    switchControllerOffloading?: string;
    switchControllerOffloadingGw?: string;
    switchControllerOffloadingIp?: string;
    switchControllerRadiusServer?: string;
    switchControllerRspanMode: string;
    switchControllerSourceIp: string;
    switchControllerTrafficPolicy?: string;
    systemId: string;
    systemIdType: string;
    tcMode?: string;
    tcpMss?: number;
    trunk: string;
    trustIp1?: string;
    trustIp2?: string;
    trustIp3?: string;
    trustIp61: string;
    trustIp62: string;
    trustIp63: string;
    type: string;
    username?: string;
    vci?: number;
    vectoring: string;
    vindex?: number;
    vlanOpMode: string;
    vlanProtocol: string;
    vlanforward: string;
    vlanid?: number;
    vpi?: number;
    vrf?: number;
    vrrpVirtualMac: string;
    vrrps?: outputs.ObjectFspVlanInterfaceVrrp[];
    wccp: string;
    weight?: number;
    wifi5gThreshold: string;
    wifiAcl?: string;
    wifiApBand: string;
    wifiAuth: string;
    wifiAutoConnect: string;
    wifiAutoSave: string;
    wifiBroadcastSsid?: string;
    wifiDnsServer1: string;
    wifiDnsServer2: string;
    wifiEncrypt: string;
    wifiFragmentThreshold?: number;
    wifiGateway: string;
    wifiKeyindex?: number;
    wifiKeys: string[];
    wifiMacFilter?: string;
    wifiPassphrases: string[];
    wifiRadiusServer?: string;
    wifiRtsThreshold?: number;
    wifiSecurity?: string;
    wifiSsid?: string;
    wifiUsergroup?: string;
    winsIp: string;
}

export interface ObjectFspVlanInterfaceIpv6 {
    autoconf: string;
    cliConn6Status?: number;
    dhcp6ClientOptions: string[];
    dhcp6InformationRequest: string;
    dhcp6PrefixDelegation: string;
    dhcp6PrefixHint: string;
    dhcp6PrefixHintPlt: number;
    dhcp6PrefixHintVlt: number;
    dhcp6RelayInterfaceId?: string;
    dhcp6RelayIp?: string;
    dhcp6RelayService: string;
    dhcp6RelaySourceInterface: string;
    dhcp6RelaySourceIp: string;
    dhcp6RelayType: string;
    icmp6SendRedirect: string;
    interfaceIdentifier: string;
    ip6Address: string;
    ip6Allowaccesses: string[];
    ip6DefaultLife: number;
    ip6DelegatedPrefixIaid?: number;
    ip6DelegatedPrefixLists?: outputs.ObjectFspVlanInterfaceIpv6Ip6DelegatedPrefixList[];
    ip6DnsServerOverride: string;
    ip6ExtraAddrs?: outputs.ObjectFspVlanInterfaceIpv6Ip6ExtraAddr[];
    ip6HopLimit?: number;
    ip6LinkMtu?: number;
    ip6ManageFlag: string;
    ip6MaxInterval: number;
    ip6MinInterval: number;
    ip6Mode: string;
    ip6OtherFlag: string;
    ip6PrefixLists?: outputs.ObjectFspVlanInterfaceIpv6Ip6PrefixList[];
    ip6PrefixMode: string;
    ip6ReachableTime?: number;
    ip6RetransTime?: number;
    ip6SendAdv: string;
    ip6Subnet: string;
    ip6UpstreamInterface?: string;
    ndCert?: string;
    ndCgaModifier?: string;
    ndMode: string;
    ndSecurityLevel?: number;
    ndTimestampDelta?: number;
    ndTimestampFuzz?: number;
    raSendMtu: string;
    uniqueAutoconfAddr: string;
    vrip6LinkLocal: string;
    vrrp6s?: outputs.ObjectFspVlanInterfaceIpv6Vrrp6[];
    vrrpVirtualMac6: string;
}

export interface ObjectFspVlanInterfaceIpv6Ip6DelegatedPrefixList {
    autonomousFlag?: string;
    delegatedPrefixIaid?: number;
    onlinkFlag?: string;
    prefixId?: number;
    rdnssService?: string;
    rdnsses: string[];
    subnet?: string;
    upstreamInterface?: string;
}

export interface ObjectFspVlanInterfaceIpv6Ip6ExtraAddr {
    prefix?: string;
}

export interface ObjectFspVlanInterfaceIpv6Ip6PrefixList {
    autonomousFlag?: string;
    dnssls: string[];
    onlinkFlag?: string;
    preferredLifeTime?: number;
    prefix?: string;
    rdnsses: string[];
    validLifeTime?: number;
}

export interface ObjectFspVlanInterfaceIpv6Vrrp6 {
    acceptMode: string;
    advInterval: number;
    ignoreDefaultRoute: string;
    preempt: string;
    priority: number;
    startTime: number;
    status: string;
    vrdst6?: string;
    vrgrp?: number;
    vrid?: number;
    vrip6: string;
}

export interface ObjectFspVlanInterfaceSecondaryip {
    allowaccesses: string[];
    detectprotocols: string[];
    detectserver?: string;
    gwdetect?: string;
    haPriority?: number;
    id?: number;
    ip?: string;
    pingServStatus?: number;
    secipRelayIp?: string;
    seq?: number;
}

export interface ObjectFspVlanInterfaceVrrp {
    acceptMode: string;
    advInterval: number;
    ignoreDefaultRoute: string;
    preempt: string;
    priority: number;
    proxyArps?: outputs.ObjectFspVlanInterfaceVrrpProxyArp[];
    startTime: number;
    status: string;
    version: string;
    vrdstPriority?: number;
    vrdsts: string[];
    vrgrp?: number;
    vrid?: number;
    vrip: string;
}

export interface ObjectFspVlanInterfaceVrrpProxyArp {
    id?: number;
    ip: string;
}

export interface ObjectGlobalIpsSensorEntriesExemptIp {
    dstIp?: string;
    id?: number;
    srcIp?: string;
}

export interface ObjectGlobalIpsSensorEntry {
    action: string;
    applications: string[];
    cves: string[];
    defaultAction: string;
    defaultStatus: string;
    exemptIps?: outputs.ObjectGlobalIpsSensorEntryExemptIp[];
    id?: number;
    lastModified?: string;
    locations: string[];
    log: string;
    logAttackContext: string;
    logPacket: string;
    os: string[];
    position?: string;
    protocols: string[];
    quarantine: string;
    quarantineExpiry?: string;
    quarantineLog?: string;
    rateCount?: number;
    rateDuration?: number;
    rateMode?: string;
    rateTrack?: string;
    rules: string[];
    severities: string[];
    status: string;
    tags: string[];
    vulnTypes: number[];
}

export interface ObjectGlobalIpsSensorEntryExemptIp {
    dstIp?: string;
    id?: number;
    srcIp?: string;
}

export interface ObjectGlobalIpsSensorFilter {
    action?: string;
    applicationreal?: string;
    applications: string[];
    locationreal?: string;
    locations: string[];
    log?: string;
    logPacket?: string;
    name?: string;
    os: string[];
    osreal?: string;
    protocolreal?: string;
    protocols: string[];
    quarantine?: string;
    quarantineExpiry?: number;
    quarantineLog?: string;
    severities: string[];
    severityreal?: string;
    status?: string;
}

export interface ObjectGlobalIpsSensorOverride {
    action?: string;
    exemptIps?: outputs.ObjectGlobalIpsSensorOverrideExemptIp[];
    log?: string;
    logPacket?: string;
    quarantine?: string;
    quarantineExpiry?: number;
    quarantineLog?: string;
    ruleId?: number;
    status?: string;
}

export interface ObjectGlobalIpsSensorOverrideExemptIp {
    dstIp?: string;
    id?: number;
    srcIp?: string;
}

export interface ObjectIcapProfileIcapHeader {
    base64Encoding: string;
    content?: string;
    id: number;
    name?: string;
}

export interface ObjectIcapProfileRespmodForwardRule {
    action: string;
    headerGroups?: outputs.ObjectIcapProfileRespmodForwardRuleHeaderGroup[];
    host?: string;
    httpRespStatusCodes: number[];
    name?: string;
}

export interface ObjectIcapProfileRespmodForwardRuleHeaderGroup {
    caseSensitivity: string;
    header?: string;
    headerName?: string;
    id: number;
}

export interface ObjectIcapProfileRespmodforwardrulesHeaderGroup {
    caseSensitivity: string;
    header?: string;
    headerName?: string;
    id: number;
}

export interface ObjectIpsSensorEntriesExemptIp {
    dstIp?: string;
    id?: number;
    srcIp?: string;
}

export interface ObjectIpsSensorEntry {
    action: string;
    applications: string[];
    cves: string[];
    defaultAction: string;
    defaultStatus: string;
    exemptIps?: outputs.ObjectIpsSensorEntryExemptIp[];
    id?: number;
    lastModified: string;
    locations: string[];
    log: string;
    logAttackContext: string;
    logPacket: string;
    os: string[];
    protocols: string[];
    quarantine: string;
    quarantineExpiry?: string;
    quarantineLog?: string;
    rateCount?: number;
    rateDuration?: number;
    rateMode?: string;
    rateTrack?: string;
    rule?: string;
    severities: string[];
    status: string;
    vulnTypes: number[];
}

export interface ObjectIpsSensorEntryExemptIp {
    dstIp?: string;
    id?: number;
    srcIp?: string;
}

export interface ObjectLogNpuserverServerGroup {
    groupName?: string;
    logFormat: string;
    logGenEvent: string;
    logMode: string;
    logTxMode: string;
    logUserInfo: string;
    serverNumber?: number;
    serverStartId?: number;
    swLogFlags: string;
}

export interface ObjectLogNpuserverServerInfo {
    destPort?: number;
    id?: number;
    ipFamily: string;
    ipv4Server: string;
    ipv6Server: string;
    logTransport: string;
    sourcePort?: number;
    templateTxTimeout: number;
    vdom?: string;
}

export interface ObjectRouterAccesslist6Rule {
    action: string;
    exactMatch: string;
    flags?: number;
    id?: number;
    prefix6?: string;
}

export interface ObjectRouterAccesslistRule {
    action: string;
    exactMatch: string;
    flags?: number;
    id?: number;
    prefix?: string;
    wildcard?: string;
}

export interface ObjectRouterAspathlistRule {
    action?: string;
    id?: number;
    regexp?: string;
}

export interface ObjectRouterCommunitylistRule {
    action?: string;
    id?: number;
    match?: string;
    regexp?: string;
}

export interface ObjectRouterPrefixlist6Rule {
    action: string;
    flags?: number;
    ge?: number;
    id?: number;
    le?: number;
    prefix6?: string;
}

export interface ObjectRouterPrefixlistRule {
    action: string;
    flags?: number;
    ge?: number;
    id?: number;
    le?: number;
    prefixes: string[];
}

export interface ObjectRouterRoutemapRule {
    action: string;
    id?: number;
    matchAsPath?: string;
    matchCommunity?: string;
    matchCommunityExact?: string;
    matchExtcommunity?: string;
    matchExtcommunityExact: string;
    matchFlags?: number;
    matchInterface?: string;
    matchIp6Address?: string;
    matchIp6Nexthop?: string;
    matchIpAddress?: string;
    matchIpNexthop?: string;
    matchMetric?: string;
    matchOrigin: string;
    matchRouteType: string;
    matchTag?: string;
    matchVrf?: number;
    setAggregatorAs?: number;
    setAggregatorIp: string;
    setAspathAction: string;
    setAspaths: string[];
    setAtomicAggregate: string;
    setCommunities: string[];
    setCommunityAdditive?: string;
    setCommunityDelete?: string;
    setDampeningMaxSuppress?: number;
    setDampeningReachabilityHalfLife?: number;
    setDampeningReuse?: number;
    setDampeningSuppress?: number;
    setDampeningUnreachabilityHalfLife?: number;
    setExtcommunityRts: string[];
    setExtcommunitySoos: string[];
    setFlags?: number;
    setIp6Nexthop: string;
    setIp6NexthopLocal: string;
    setIpNexthop: string;
    setIpPrefsrc?: string;
    setLocalPreference?: string;
    setMetric?: string;
    setMetricType: string;
    setOrigin: string;
    setOriginatorId: string;
    setPriority?: number;
    setRouteTag?: string;
    setTag?: string;
    setVpnv4Nexthop?: string;
    setVpnv6Nexthop?: string;
    setVpnv6NexthopLocal?: string;
    setWeight?: string;
}

export interface ObjectSctpfilterProfilePpidFilter {
    action: string;
    comment?: string;
    id: number;
    ppid?: number;
}

export interface ObjectSpamfilterBwlEntry {
    action?: string;
    addrType?: string;
    emailPattern?: string;
    id?: number;
    ip4Subnet?: string;
    ip6Subnet?: string;
    patternType?: string;
    status?: string;
    type?: string;
}

export interface ObjectSpamfilterBwordEntry {
    action?: string;
    id?: number;
    language?: string;
    pattern?: string;
    patternType?: string;
    score?: number;
    status?: string;
    where?: string;
}

export interface ObjectSpamfilterDnsblEntry {
    action?: string;
    id?: number;
    server?: string;
    status?: string;
}

export interface ObjectSpamfilterIptrustEntry {
    addrType?: string;
    id?: number;
    ip4Subnet?: string;
    ip6Subnet?: string;
    status?: string;
}

export interface ObjectSpamfilterMheaderEntry {
    action?: string;
    fieldbody?: string;
    fieldname?: string;
    id?: number;
    patternType?: string;
    status?: string;
}

export interface ObjectSpamfilterProfileGmail {
    log?: string;
}

export interface ObjectSpamfilterProfileImap {
    action?: string;
    log?: string;
    tagMsg?: string;
    tagTypes: string[];
}

export interface ObjectSpamfilterProfileMapi {
    action?: string;
    log?: string;
}

export interface ObjectSpamfilterProfileMsnHotmail {
    log?: string;
}

export interface ObjectSpamfilterProfilePop3 {
    action?: string;
    log?: string;
    tagMsg?: string;
    tagTypes: string[];
}

export interface ObjectSpamfilterProfileSmtp {
    action?: string;
    hdrip?: string;
    localOverride?: string;
    log?: string;
    tagMsg?: string;
    tagTypes: string[];
}

export interface ObjectSshfilterProfileFileFilter {
    entries?: outputs.ObjectSshfilterProfileFileFilterEntry[];
    log?: string;
    scanArchiveContents?: string;
    status?: string;
}

export interface ObjectSshfilterProfileFileFilterEntry {
    action?: string;
    comment?: string;
    direction?: string;
    fileTypes: string[];
    filter?: string;
    passwordProtected?: string;
    protocols: string[];
}

export interface ObjectSshfilterProfileShellCommand {
    action: string;
    alert: string;
    id?: number;
    log: string;
    pattern?: string;
    severity: string;
    type: string;
}

export interface ObjectSwitchcontrollerAclIngressAction {
    count: string;
    drop: string;
}

export interface ObjectSwitchcontrollerAclIngressClassifier {
    dstIpPrefix: string;
    dstMac: string;
    srcIpPrefix: string;
    srcMac: string;
    vlan?: number;
}

export interface ObjectSwitchcontrollerDynamicportpolicyPolicy {
    bouncePortLink: string;
    category: string;
    description?: string;
    family?: string;
    host?: string;
    hwVendor?: string;
    interfaceTags: string[];
    lldpProfile?: string;
    mac?: string;
    n8021x?: string;
    name?: string;
    qosPolicy?: string;
    status: string;
    type?: string;
    vlanPolicy?: string;
}

export interface ObjectSwitchcontrollerFortilinksettingsNacPorts {
    bounceNacPort: string;
    lanSegment: string;
    memberChange?: number;
    nacLanInterface?: string;
    nacSegmentVlans: string[];
    onboardingVlan?: string;
    parentKey?: string;
}

export interface ObjectSwitchcontrollerLldpprofileCustomTlv {
    informationString?: string;
    name?: string;
    oui: string;
    subtype?: number;
}

export interface ObjectSwitchcontrollerLldpprofileMedLocationService {
    name?: string;
    status?: string;
    sysLocationId?: string;
}

export interface ObjectSwitchcontrollerLldpprofileMedNetworkPolicy {
    assignVlan?: string;
    dscp?: number;
    name?: string;
    priority?: number;
    status?: string;
    vlan?: number;
    vlanIntf?: string;
}

export interface ObjectSwitchcontrollerManagedswitchCustomCommand {
    commandEntry?: string;
    commandName?: string;
}

export interface ObjectSwitchcontrollerManagedswitchDhcpSnoopingStaticClient {
    ip: string;
    mac: string;
    name?: string;
    port?: string;
    vlan?: string;
}

export interface ObjectSwitchcontrollerManagedswitchPort {
    accessMode: string;
    aclGroups: string[];
    aggregatorMode?: string;
    allowedVlans?: string;
    allowedVlansAll: string;
    arpInspectionTrust: string;
    authenticatedPort?: number;
    bundle?: string;
    description?: string;
    dhcpSnoopOption82Overrides?: outputs.ObjectSwitchcontrollerManagedswitchPortDhcpSnoopOption82Override[];
    dhcpSnoopOption82Trust: string;
    dhcpSnooping: string;
    discardMode: string;
    dslProfile: string;
    edgePort: string;
    encryptedPort?: number;
    fecCapable?: number;
    fecState: string;
    flapDuration: number;
    flapRate: number;
    flapTimeout?: number;
    flapguard: string;
    flowControl: string;
    fortiswitchAcls: number[];
    igmpSnooping?: string;
    igmpSnoopingFloodReports: string;
    igmpsFloodReports: string;
    igmpsFloodTraffic: string;
    interfaceTags?: string;
    ipSourceGuard: string;
    islPeerDeviceSn?: string;
    lacpSpeed: string;
    learningLimit?: number;
    linkStatus: string;
    lldpProfile: string;
    lldpStatus: string;
    loopGuard: string;
    loopGuardTimeout: number;
    matchedDppIntfTags?: string;
    matchedDppPolicy?: string;
    maxBundle?: number;
    mcastSnoopingFloodTraffic: string;
    mclag?: string;
    mclagIclPort?: number;
    mediaType?: string;
    memberWithdrawalBehavior: string;
    members: string[];
    minBundle?: number;
    mode?: string;
    p2pPort?: number;
    packetSampleRate?: number;
    packetSampler: string;
    pauseMeter?: number;
    pauseMeterResume?: string;
    poeMaxPower?: string;
    poeModeBtCabable?: number;
    poePortMode: string;
    poePortPower: string;
    poePortPriority: string;
    poePreStandardDetection?: string;
    poeStandard?: string;
    poeStatus?: string;
    portName?: string;
    portOwner?: string;
    portPolicy?: string;
    portSecurityPolicy?: string;
    portSelectionCriteria?: string;
    ptpStatus: string;
    qosPolicy: string;
    restrictedAuthPort?: number;
    rpvstPort: string;
    sampleDirection?: string;
    sflowCounterInterval?: number;
    sflowSampleRate?: number;
    sflowSampler?: string;
    status: string;
    stickyMac: string;
    stpBpduGuard: string;
    stpBpduGuardTimeout?: number;
    stpRootGuard: string;
    stpState: string;
    trunkMember?: number;
    type: string;
    untaggedVlans?: string;
    vlan?: string;
}

export interface ObjectSwitchcontrollerManagedswitchPortDhcpSnoopOption82Override {
    circuitId?: string;
    remoteId?: string;
    vlanName?: string;
}

export interface ObjectSwitchcontrollerManagedswitchPortsDhcpSnoopOption82Override {
    circuitId?: string;
    remoteId?: string;
    vlanName?: string;
}

export interface ObjectSwitchcontrollerManagedswitchRouteOffloadRouter {
    routerIp?: string;
    vlanName?: string;
}

export interface ObjectSwitchcontrollerManagedswitchVlan {
    assignmentPriority?: number;
    vlanName?: string;
}

export interface ObjectSwitchcontrollerQosIpdscpmapMap {
    cosQueue?: number;
    diffservs: string[];
    ipPrecedences: string[];
    name?: string;
    value?: string;
}

export interface ObjectSwitchcontrollerQosQueuepolicyCosQueue {
    description?: string;
    dropPolicy: string;
    ecn: string;
    maxRate?: number;
    maxRatePercent?: number;
    minRate?: number;
    minRatePercent?: number;
    name?: string;
    weight: number;
}

export interface ObjectSystemDhcpServerExcludeRange {
    endIp: string;
    id?: number;
    leaseTime?: number;
    startIp: string;
    uciMatch: string;
    uciStrings: string[];
    vciMatch: string;
    vciStrings: string[];
}

export interface ObjectSystemDhcpServerIpRange {
    endIp: string;
    id?: number;
    leaseTime?: number;
    startIp: string;
    uciMatch: string;
    uciStrings: string[];
    vciMatch: string;
    vciStrings: string[];
}

export interface ObjectSystemDhcpServerOption {
    code?: number;
    id?: number;
    ips: string[];
    type: string;
    uciMatch: string;
    uciStrings: string[];
    value?: string;
    vciMatch: string;
    vciStrings: string[];
}

export interface ObjectSystemDhcpServerReservedAddress {
    action: string;
    circuitId?: string;
    circuitIdType?: string;
    description?: string;
    id?: number;
    ip: string;
    mac: string;
    remoteId?: string;
    remoteIdType?: string;
    type: string;
}

export interface ObjectSystemGeoipoverrideIp6Range {
    endIp: string;
    id?: number;
    startIp: string;
}

export interface ObjectSystemGeoipoverrideIpRange {
    endIp: string;
    id?: number;
    startIp: string;
}

export interface ObjectSystemMetaSysMetaField {
    fieldlength?: number;
    importance?: string;
    name?: string;
}

export interface ObjectSystemNpuBackgroundSseScan {
    scan?: string;
    scanStale?: number;
    scanVt?: number;
    statsQualAccess?: number;
    statsQualDuration?: number;
    statsUpdateInterval?: number;
    udpKeepaliveInterval?: number;
    udpQualAccess?: number;
    udpQualDuration?: number;
}

export interface ObjectSystemNpuDosOptions {
    npuDosMeterMode: string;
    npuDosSynproxyMode: string;
    npuDosTpeMode: string;
}

export interface ObjectSystemNpuDswDtsProfile {
    action: string;
    minLimit?: number;
    profileId?: number;
    step?: number;
}

export interface ObjectSystemNpuDswQueueDtsProfile {
    iport: string;
    name?: string;
    oport: string;
    profileId?: number;
    queueSelect?: number;
}

export interface ObjectSystemNpuFpAnomaly {
    capwapMinlenErr?: string;
    espMinlenErr: string;
    greCsumErr?: string;
    gtpuPlenErr?: string;
    icmpCsumErr: string;
    icmpFrag: string;
    icmpLand: string;
    icmpMinlenErr: string;
    ipv4CsumErr: string;
    ipv4IhlErr: string;
    ipv4Land: string;
    ipv4LenErr: string;
    ipv4OptErr: string;
    ipv4Optlsrr: string;
    ipv4Optrr: string;
    ipv4Optsecurity: string;
    ipv4Optssrr: string;
    ipv4Optstream: string;
    ipv4Opttimestamp: string;
    ipv4ProtoErr: string;
    ipv4TtlzeroErr: string;
    ipv4Unknopt: string;
    ipv4VerErr: string;
    ipv6DaddrErr: string;
    ipv6ExthdrLenErr: string;
    ipv6ExthdrOrderErr: string;
    ipv6IhlErr: string;
    ipv6Land: string;
    ipv6Optendpid: string;
    ipv6Opthomeaddr: string;
    ipv6Optinvld: string;
    ipv6Optjumbo: string;
    ipv6Optnsap: string;
    ipv6Optralert: string;
    ipv6Opttunnel: string;
    ipv6PlenZero: string;
    ipv6ProtoErr: string;
    ipv6SaddrErr: string;
    ipv6Unknopt: string;
    ipv6VerErr: string;
    nvgreMinlenErr?: string;
    sctpClenErr?: string;
    sctpCrcErr?: string;
    sctpCsumErr: string;
    sctpL4lenErr?: string;
    tcpCsumErr: string;
    tcpFinNoack: string;
    tcpFinOnly: string;
    tcpHlenErr: string;
    tcpHlenvsl4lenErr?: string;
    tcpLand: string;
    tcpNoFlag: string;
    tcpPlenErr: string;
    tcpSynData: string;
    tcpSynFin: string;
    tcpWinnuke: string;
    udpCsumErr: string;
    udpHlenErr: string;
    udpLand: string;
    udpLenErr: string;
    udpPlenErr: string;
    udpliteCoverErr: string;
    udpliteCsumErr: string;
    uespMinlenErr?: string;
    unknprotoMinlenErr: string;
    vxlanMinlenErr?: string;
}

export interface ObjectSystemNpuHpe {
    allProtocol: number;
    arpMax: number;
    enableQueueShaper: string;
    enableShaper: string;
    espMax: number;
    exceptionCode: number;
    fragmentWithSess: number;
    fragmentWithoutSession: number;
    highPriority: number;
    icmpMax: number;
    ipFragMax: number;
    ipOthersMax: number;
    l2OthersMax: number;
    priTypeMax: number;
    queueShaperMax: number;
    sctpMax: number;
    tcpMax: number;
    tcpfinRstMax: number;
    tcpsynAckMax: number;
    tcpsynMax: number;
    udpMax: number;
}

export interface ObjectSystemNpuIcmpRateCtrl {
    icmpV4BucketSize?: number;
    icmpV4Rate: number;
    icmpV6BucketSize: number;
    icmpV6Rate: number;
}

export interface ObjectSystemNpuIpReassembly {
    maxTimeout: number;
    minTimeout: number;
    status: string;
}

export interface ObjectSystemNpuIsfNpQueues {
    cos0?: string;
    cos1?: string;
    cos2?: string;
    cos3?: string;
    cos4?: string;
    cos5?: string;
    cos6?: string;
    cos7?: string;
}

export interface ObjectSystemNpuNpQueues {
    ethernetTypes?: outputs.ObjectSystemNpuNpQueuesEthernetType[];
    ipProtocols?: outputs.ObjectSystemNpuNpQueuesIpProtocol[];
    ipServices?: outputs.ObjectSystemNpuNpQueuesIpService[];
    profiles?: outputs.ObjectSystemNpuNpQueuesProfile[];
    schedulers?: outputs.ObjectSystemNpuNpQueuesScheduler[];
}

export interface ObjectSystemNpuNpQueuesEthernetType {
    name?: string;
    queue: number;
    type: number;
    weight: number;
}

export interface ObjectSystemNpuNpQueuesIpProtocol {
    name?: string;
    protocol?: number;
    queue?: number;
    weight: number;
}

export interface ObjectSystemNpuNpQueuesIpService {
    dport?: number;
    name?: string;
    protocol?: number;
    queue?: number;
    sport?: number;
    weight: number;
}

export interface ObjectSystemNpuNpQueuesProfile {
    cos0: string;
    cos1: string;
    cos2: string;
    cos3: string;
    cos4: string;
    cos5: string;
    cos6: string;
    cos7: string;
    dscp0: string;
    dscp1: string;
    dscp10: string;
    dscp11: string;
    dscp12: string;
    dscp13: string;
    dscp14: string;
    dscp15: string;
    dscp16: string;
    dscp17: string;
    dscp18: string;
    dscp19: string;
    dscp2: string;
    dscp20: string;
    dscp21: string;
    dscp22: string;
    dscp23: string;
    dscp24: string;
    dscp25: string;
    dscp26: string;
    dscp27: string;
    dscp28: string;
    dscp29: string;
    dscp3: string;
    dscp30: string;
    dscp31: string;
    dscp32: string;
    dscp33: string;
    dscp34: string;
    dscp35: string;
    dscp36: string;
    dscp37: string;
    dscp38: string;
    dscp39: string;
    dscp4: string;
    dscp40: string;
    dscp41: string;
    dscp42: string;
    dscp43: string;
    dscp44: string;
    dscp45: string;
    dscp46: string;
    dscp47: string;
    dscp48: string;
    dscp49: string;
    dscp5: string;
    dscp50: string;
    dscp51: string;
    dscp52: string;
    dscp53: string;
    dscp54: string;
    dscp55: string;
    dscp56: string;
    dscp57: string;
    dscp58: string;
    dscp59: string;
    dscp6: string;
    dscp60: string;
    dscp61: string;
    dscp62: string;
    dscp63: string;
    dscp7: string;
    dscp8: string;
    dscp9: string;
    id?: number;
    type: string;
    weight: number;
}

export interface ObjectSystemNpuNpQueuesScheduler {
    mode: string;
    name: string;
}

export interface ObjectSystemNpuNpqueuesEthernetType {
    name?: string;
    queue: number;
    type: number;
    weight: number;
}

export interface ObjectSystemNpuNpqueuesIpProtocol {
    name?: string;
    protocol?: number;
    queue?: number;
    weight: number;
}

export interface ObjectSystemNpuNpqueuesIpService {
    dport?: number;
    name?: string;
    protocol?: number;
    queue?: number;
    sport?: number;
    weight: number;
}

export interface ObjectSystemNpuNpqueuesProfile {
    cos0: string;
    cos1: string;
    cos2: string;
    cos3: string;
    cos4: string;
    cos5: string;
    cos6: string;
    cos7: string;
    dscp0: string;
    dscp1: string;
    dscp10: string;
    dscp11: string;
    dscp12: string;
    dscp13: string;
    dscp14: string;
    dscp15: string;
    dscp16: string;
    dscp17: string;
    dscp18: string;
    dscp19: string;
    dscp2: string;
    dscp20: string;
    dscp21: string;
    dscp22: string;
    dscp23: string;
    dscp24: string;
    dscp25: string;
    dscp26: string;
    dscp27: string;
    dscp28: string;
    dscp29: string;
    dscp3: string;
    dscp30: string;
    dscp31: string;
    dscp32: string;
    dscp33: string;
    dscp34: string;
    dscp35: string;
    dscp36: string;
    dscp37: string;
    dscp38: string;
    dscp39: string;
    dscp4: string;
    dscp40: string;
    dscp41: string;
    dscp42: string;
    dscp43: string;
    dscp44: string;
    dscp45: string;
    dscp46: string;
    dscp47: string;
    dscp48: string;
    dscp49: string;
    dscp5: string;
    dscp50: string;
    dscp51: string;
    dscp52: string;
    dscp53: string;
    dscp54: string;
    dscp55: string;
    dscp56: string;
    dscp57: string;
    dscp58: string;
    dscp59: string;
    dscp6: string;
    dscp60: string;
    dscp61: string;
    dscp62: string;
    dscp63: string;
    dscp7: string;
    dscp8: string;
    dscp9: string;
    id?: number;
    type: string;
    weight: number;
}

export interface ObjectSystemNpuNpqueuesScheduler {
    mode: string;
    name: string;
}

export interface ObjectSystemNpuNpuTcam {
    data?: outputs.ObjectSystemNpuNpuTcamData;
    dbgDump?: number;
    mask?: outputs.ObjectSystemNpuNpuTcamMask;
    mirAct?: outputs.ObjectSystemNpuNpuTcamMirAct;
    name?: string;
    oid: number;
    priAct?: outputs.ObjectSystemNpuNpuTcamPriAct;
    sact?: outputs.ObjectSystemNpuNpuTcamSact;
    tact?: outputs.ObjectSystemNpuNpuTcamTact;
    type: string;
    vid?: number;
}

export interface ObjectSystemNpuNpuTcamData {
    df: string;
    dstip: string;
    dstipv6: string;
    dstmac: string;
    dstport?: number;
    ethertype: string;
    extTag: string;
    fragOff?: number;
    genBufCnt?: number;
    genIv: string;
    genL3Flags?: number;
    genL4Flags?: number;
    genPktCtrl?: number;
    genPri?: number;
    genPriV: string;
    genTv: string;
    ihl?: number;
    ip4Id?: number;
    ip6Fl?: number;
    ipver?: number;
    l4Wd10?: number;
    l4Wd11?: number;
    l4Wd8?: number;
    l4Wd9?: number;
    mf: string;
    protocol?: number;
    slink?: number;
    smacChange: string;
    sp?: number;
    srcCfi: string;
    srcPrio?: number;
    srcUpdt: string;
    srcip: string;
    srcipv6: string;
    srcmac: string;
    srcport?: number;
    svid?: number;
    tcpAck: string;
    tcpCwr: string;
    tcpEce: string;
    tcpFin: string;
    tcpPush: string;
    tcpRst: string;
    tcpSyn: string;
    tcpUrg: string;
    tgtCfi: string;
    tgtPrio?: number;
    tgtUpdt: string;
    tgtV: string;
    tos?: number;
    tp?: number;
    ttl?: number;
    tvid?: number;
    vdid?: number;
}

export interface ObjectSystemNpuNpuTcamMask {
    df: string;
    dstip: string;
    dstipv6: string;
    dstmac: string;
    dstport?: number;
    ethertype: string;
    extTag: string;
    fragOff?: number;
    genBufCnt?: number;
    genIv: string;
    genL3Flags?: number;
    genL4Flags?: number;
    genPktCtrl?: number;
    genPri?: number;
    genPriV: string;
    genTv: string;
    ihl?: number;
    ip4Id?: number;
    ip6Fl?: number;
    ipver?: number;
    l4Wd10?: number;
    l4Wd11?: number;
    l4Wd8?: number;
    l4Wd9?: number;
    mf: string;
    protocol?: number;
    slink?: number;
    smacChange: string;
    sp?: number;
    srcCfi: string;
    srcPrio?: number;
    srcUpdt: string;
    srcip: string;
    srcipv6: string;
    srcmac: string;
    srcport?: number;
    svid?: number;
    tcpAck: string;
    tcpCwr: string;
    tcpEce: string;
    tcpFin: string;
    tcpPush: string;
    tcpRst: string;
    tcpSyn: string;
    tcpUrg: string;
    tgtCfi: string;
    tgtPrio?: number;
    tgtUpdt: string;
    tgtV: string;
    tos?: number;
    tp?: number;
    ttl?: number;
    tvid?: number;
    vdid?: number;
}

export interface ObjectSystemNpuNpuTcamMirAct {
    vlif?: number;
}

export interface ObjectSystemNpuNpuTcamPriAct {
    priority?: number;
    weight?: number;
}

export interface ObjectSystemNpuNpuTcamSact {
    act?: number;
    actV: string;
    bmproc?: number;
    bmprocV: string;
    dfLif?: number;
    dfLifV: string;
    dfr?: number;
    dfrV: string;
    dmacSkip?: number;
    dmacSkipV: string;
    dosen?: number;
    dosenV: string;
    espffProc?: number;
    espffProcV: string;
    etypePid?: number;
    etypePidV: string;
    fragProc?: number;
    fragProcV: string;
    fwd?: number;
    fwdLif?: number;
    fwdLifV: string;
    fwdTvid?: number;
    fwdTvidV: string;
    fwdV: string;
    icpen?: number;
    icpenV: string;
    igmpMldSnp?: number;
    igmpMldSnpV: string;
    learn?: number;
    learnV: string;
    mSrhCtrl?: number;
    mSrhCtrlV: string;
    macId?: number;
    macIdV: string;
    mss?: number;
    mssV: string;
    pleen?: number;
    pleenV: string;
    prioPid?: number;
    prioPidV: string;
    promis?: number;
    promisV: string;
    rfsh?: number;
    rfshV: string;
    smacSkip?: number;
    smacSkipV: string;
    tpSmchk?: number;
    tpSmchkV: string;
    tpeId?: number;
    tpeIdV: string;
    vdm?: number;
    vdmV: string;
    vdomId?: number;
    vdomIdV: string;
    xMode?: number;
    xModeV: string;
}

export interface ObjectSystemNpuNpuTcamTact {
    act?: number;
    actV: string;
    fmtuv4S?: number;
    fmtuv4SV: string;
    fmtuv6S?: number;
    fmtuv6SV: string;
    lnkid?: number;
    lnkidV: string;
    macId?: number;
    macIdV: string;
    mssT?: number;
    mssTV: string;
    mtuv4?: number;
    mtuv4V: string;
    mtuv6?: number;
    mtuv6V: string;
    slifAct?: number;
    slifActV: string;
    sublnkid?: number;
    sublnkidV: string;
    tgtvAct?: number;
    tgtvActV: string;
    tlifAct?: number;
    tlifActV: string;
    tpeid?: number;
    tpeidV: string;
    v6fe?: number;
    v6feV: string;
    vepEn?: number;
    vepEnV: string;
    vepSlid?: number;
    vepSlidV: string;
    xltLif?: number;
    xltLifV: string;
    xltVid?: number;
    xltVidV: string;
}

export interface ObjectSystemNpuNputcamData {
    df: string;
    dstip: string;
    dstipv6: string;
    dstmac: string;
    dstport?: number;
    ethertype: string;
    extTag: string;
    fragOff?: number;
    genBufCnt?: number;
    genIv: string;
    genL3Flags?: number;
    genL4Flags?: number;
    genPktCtrl?: number;
    genPri?: number;
    genPriV: string;
    genTv: string;
    ihl?: number;
    ip4Id?: number;
    ip6Fl?: number;
    ipver?: number;
    l4Wd10?: number;
    l4Wd11?: number;
    l4Wd8?: number;
    l4Wd9?: number;
    mf: string;
    protocol?: number;
    slink?: number;
    smacChange: string;
    sp?: number;
    srcCfi: string;
    srcPrio?: number;
    srcUpdt: string;
    srcip: string;
    srcipv6: string;
    srcmac: string;
    srcport?: number;
    svid?: number;
    tcpAck: string;
    tcpCwr: string;
    tcpEce: string;
    tcpFin: string;
    tcpPush: string;
    tcpRst: string;
    tcpSyn: string;
    tcpUrg: string;
    tgtCfi: string;
    tgtPrio?: number;
    tgtUpdt: string;
    tgtV: string;
    tos?: number;
    tp?: number;
    ttl?: number;
    tvid?: number;
    vdid?: number;
}

export interface ObjectSystemNpuNputcamMask {
    df: string;
    dstip: string;
    dstipv6: string;
    dstmac: string;
    dstport?: number;
    ethertype: string;
    extTag: string;
    fragOff?: number;
    genBufCnt?: number;
    genIv: string;
    genL3Flags?: number;
    genL4Flags?: number;
    genPktCtrl?: number;
    genPri?: number;
    genPriV: string;
    genTv: string;
    ihl?: number;
    ip4Id?: number;
    ip6Fl?: number;
    ipver?: number;
    l4Wd10?: number;
    l4Wd11?: number;
    l4Wd8?: number;
    l4Wd9?: number;
    mf: string;
    protocol?: number;
    slink?: number;
    smacChange: string;
    sp?: number;
    srcCfi: string;
    srcPrio?: number;
    srcUpdt: string;
    srcip: string;
    srcipv6: string;
    srcmac: string;
    srcport?: number;
    svid?: number;
    tcpAck: string;
    tcpCwr: string;
    tcpEce: string;
    tcpFin: string;
    tcpPush: string;
    tcpRst: string;
    tcpSyn: string;
    tcpUrg: string;
    tgtCfi: string;
    tgtPrio?: number;
    tgtUpdt: string;
    tgtV: string;
    tos?: number;
    tp?: number;
    ttl?: number;
    tvid?: number;
    vdid?: number;
}

export interface ObjectSystemNpuNputcamMirAct {
    vlif?: number;
}

export interface ObjectSystemNpuNputcamPriAct {
    priority?: number;
    weight?: number;
}

export interface ObjectSystemNpuNputcamSact {
    act?: number;
    actV: string;
    bmproc?: number;
    bmprocV: string;
    dfLif?: number;
    dfLifV: string;
    dfr?: number;
    dfrV: string;
    dmacSkip?: number;
    dmacSkipV: string;
    dosen?: number;
    dosenV: string;
    espffProc?: number;
    espffProcV: string;
    etypePid?: number;
    etypePidV: string;
    fragProc?: number;
    fragProcV: string;
    fwd?: number;
    fwdLif?: number;
    fwdLifV: string;
    fwdTvid?: number;
    fwdTvidV: string;
    fwdV: string;
    icpen?: number;
    icpenV: string;
    igmpMldSnp?: number;
    igmpMldSnpV: string;
    learn?: number;
    learnV: string;
    mSrhCtrl?: number;
    mSrhCtrlV: string;
    macId?: number;
    macIdV: string;
    mss?: number;
    mssV: string;
    pleen?: number;
    pleenV: string;
    prioPid?: number;
    prioPidV: string;
    promis?: number;
    promisV: string;
    rfsh?: number;
    rfshV: string;
    smacSkip?: number;
    smacSkipV: string;
    tpSmchk?: number;
    tpSmchkV: string;
    tpeId?: number;
    tpeIdV: string;
    vdm?: number;
    vdmV: string;
    vdomId?: number;
    vdomIdV: string;
    xMode?: number;
    xModeV: string;
}

export interface ObjectSystemNpuNputcamTact {
    act?: number;
    actV: string;
    fmtuv4S?: number;
    fmtuv4SV: string;
    fmtuv6S?: number;
    fmtuv6SV: string;
    lnkid?: number;
    lnkidV: string;
    macId?: number;
    macIdV: string;
    mssT?: number;
    mssTV: string;
    mtuv4?: number;
    mtuv4V: string;
    mtuv6?: number;
    mtuv6V: string;
    slifAct?: number;
    slifActV: string;
    sublnkid?: number;
    sublnkidV: string;
    tgtvAct?: number;
    tgtvActV: string;
    tlifAct?: number;
    tlifActV: string;
    tpeid?: number;
    tpeidV: string;
    v6fe?: number;
    v6feV: string;
    vepEn?: number;
    vepEnV: string;
    vepSlid?: number;
    vepSlidV: string;
    xltLif?: number;
    xltLifV: string;
    xltVid?: number;
    xltVidV: string;
}

export interface ObjectSystemNpuPortCpuMap {
    cpuCore: string;
    interface: string;
}

export interface ObjectSystemNpuPortNpuMap {
    interface: string;
    npuGroupIndex?: number;
}

export interface ObjectSystemNpuPortPathOption {
    portsUsingNpus: string[];
}

export interface ObjectSystemNpuPriorityProtocol {
    bfd: string;
    bgp: string;
    slbc: string;
}

export interface ObjectSystemNpuSseHaScan {
    gap?: number;
    maxSessionCnt: number;
    minDuration: number;
}

export interface ObjectSystemNpuSwEhHash {
    computation: string;
    destinationIpLower16: string;
    destinationIpUpper16: string;
    destinationPort: string;
    ipProtocol: string;
    netmaskLength: number;
    sourceIpLower16: string;
    sourceIpUpper16: string;
    sourcePort: string;
}

export interface ObjectSystemNpuSwTrHash {
    draco15: string;
    tcpUdpPort: string;
}

export interface ObjectSystemNpuTcpTimeoutProfile {
    closeWait?: number;
    finWait?: number;
    id?: number;
    synSent?: number;
    synWait?: number;
    tcpIdle?: number;
    timeWait?: number;
}

export interface ObjectSystemNpuUdpTimeoutProfile {
    id?: number;
    udpIdle?: number;
}

export interface ObjectSystemReplacemsggroupAdmin {
    buffer?: string;
    format: string;
    header: string;
    msgType?: string;
}

export interface ObjectSystemReplacemsggroupAlertmail {
    buffer?: string;
    format: string;
    header: string;
    id?: number;
    msgType?: string;
}

export interface ObjectSystemReplacemsggroupAuth {
    buffer?: string;
    format: string;
    header: string;
    msgType?: string;
}

export interface ObjectSystemReplacemsggroupAutomation {
    buffer?: string;
    format: string;
    header: string;
    msgType?: string;
}

export interface ObjectSystemReplacemsggroupCustomMessage {
    buffer?: string;
    format: string;
    header: string;
    msgType?: string;
}

export interface ObjectSystemReplacemsggroupDeviceDetectionPortal {
    buffer?: string;
    format: string;
    header: string;
    msgType?: string;
}

export interface ObjectSystemReplacemsggroupEc {
    buffer?: string;
    format: string;
    header: string;
    msgType?: string;
}

export interface ObjectSystemReplacemsggroupFortiguardWf {
    buffer?: string;
    format: string;
    header: string;
    msgType?: string;
}

export interface ObjectSystemReplacemsggroupFtp {
    buffer?: string;
    format: string;
    header: string;
    msgType?: string;
}

export interface ObjectSystemReplacemsggroupHttp {
    buffer?: string;
    format: string;
    header: string;
    msgType?: string;
}

export interface ObjectSystemReplacemsggroupIcap {
    buffer?: string;
    format: string;
    header: string;
    msgType?: string;
}

export interface ObjectSystemReplacemsggroupMail {
    buffer?: string;
    format: string;
    header: string;
    msgType?: string;
}

export interface ObjectSystemReplacemsggroupMm {
    buffer?: string;
    charset?: string;
    format?: string;
    header?: string;
    image?: string;
    msgType?: string;
}

export interface ObjectSystemReplacemsggroupMm1 {
    addSmil?: string;
    charset?: string;
    class?: string;
    format?: string;
    from?: string;
    fromSender?: string;
    header?: string;
    image?: string;
    message?: string;
    msgType?: string;
    priority?: string;
    rspStatus?: string;
    rspText?: string;
    senderVisibility?: string;
    smilPart?: string;
    subject?: string;
}

export interface ObjectSystemReplacemsggroupMm3 {
    addHtml?: string;
    charset?: string;
    format?: string;
    from?: string;
    fromSender?: string;
    header?: string;
    htmlPart?: string;
    image?: string;
    message?: string;
    msgType?: string;
    priority?: string;
    subject?: string;
}

export interface ObjectSystemReplacemsggroupMm4 {
    addSmil?: string;
    charset?: string;
    class?: string;
    domain?: string;
    format?: string;
    from?: string;
    fromSender?: string;
    header?: string;
    image?: string;
    message?: string;
    msgType?: string;
    priority?: string;
    rspStatus?: string;
    smilPart?: string;
    subject?: string;
}

export interface ObjectSystemReplacemsggroupMm7 {
    addSmil?: string;
    addrType?: string;
    allowContentAdaptation?: string;
    charset?: string;
    class?: string;
    format?: string;
    from?: string;
    fromSender?: string;
    header?: string;
    image?: string;
    message?: string;
    msgType?: string;
    priority?: string;
    rspStatus?: string;
    smilPart?: string;
    subject?: string;
}

export interface ObjectSystemReplacemsggroupNacQuar {
    buffer?: string;
    format: string;
    header: string;
    id?: number;
    msgType?: string;
}

export interface ObjectSystemReplacemsggroupNntp {
    buffer?: string;
    format: string;
    header: string;
    msgType?: string;
}

export interface ObjectSystemReplacemsggroupSpam {
    buffer?: string;
    format: string;
    header: string;
    msgType?: string;
}

export interface ObjectSystemReplacemsggroupSslvpn {
    buffer?: string;
    format: string;
    header: string;
    msgType?: string;
}

export interface ObjectSystemReplacemsggroupTrafficQuota {
    buffer?: string;
    format: string;
    header: string;
    msgType?: string;
}

export interface ObjectSystemReplacemsggroupUtm {
    buffer?: string;
    format: string;
    header: string;
    msgType?: string;
}

export interface ObjectSystemReplacemsggroupWebproxy {
    buffer?: string;
    format: string;
    header: string;
    msgType?: string;
}

export interface ObjectSystemSdnconnectorCompartmentList {
    compartmentId?: string;
}

export interface ObjectSystemSdnconnectorExternalAccountList {
    externalId?: string;
    regionLists: string[];
    roleArn?: string;
}

export interface ObjectSystemSdnconnectorExternalIp {
    name?: string;
}

export interface ObjectSystemSdnconnectorForwardingRule {
    ruleName?: string;
    target?: string;
}

export interface ObjectSystemSdnconnectorGcpProjectList {
    gcpZoneLists: string[];
    id?: string;
}

export interface ObjectSystemSdnconnectorNic {
    ips?: outputs.ObjectSystemSdnconnectorNicIp[];
    name?: string;
}

export interface ObjectSystemSdnconnectorNicIp {
    name?: string;
    publicIp?: string;
    resourceGroup?: string;
}

export interface ObjectSystemSdnconnectorOciRegionList {
    region?: string;
}

export interface ObjectSystemSdnconnectorRoute {
    name?: string;
}

export interface ObjectSystemSdnconnectorRouteTable {
    name?: string;
    resourceGroup?: string;
    routes?: outputs.ObjectSystemSdnconnectorRouteTableRoute[];
    subscriptionId?: string;
}

export interface ObjectSystemSdnconnectorRouteTableRoute {
    name?: string;
    nextHop?: string;
}

export interface ObjectSystemSdnconnectorRoutetableRoute {
    name?: string;
    nextHop?: string;
}

export interface ObjectUserDeviceDynamicMapping {
    _scopes?: outputs.ObjectUserDeviceDynamicMapping_Scope[];
    avatar?: string;
    category?: string;
    comment?: string;
    family?: string;
    hardwareVendor?: string;
    hardwareVersion?: string;
    mac?: string;
    masterDevice?: string;
    os?: string;
    softwareVersion?: string;
    tags?: string;
    type?: string;
    user?: string;
}

export interface ObjectUserDeviceDynamicMapping_Scope {
    name?: string;
    vdom?: string;
}

export interface ObjectUserDeviceTagging {
    category?: string;
    name?: string;
    tags: string[];
}

export interface ObjectUserDeviceaccesslistDeviceList {
    action?: string;
    device?: string;
    id?: number;
}

export interface ObjectUserDevicegroupDynamicMapping {
    _ifUnmanaged?: number;
    _scopes?: outputs.ObjectUserDevicegroupDynamicMapping_Scope[];
    comment?: string;
    member?: string;
}

export interface ObjectUserDevicegroupDynamicMapping_Scope {
    name?: string;
    vdom?: string;
}

export interface ObjectUserDevicegroupTagging {
    category?: string;
    name?: string;
    tags: string[];
}

export interface ObjectUserDomaincontrollerExtraServer {
    id: number;
    ipAddress: string;
    port: number;
    sourceIpAddress: string;
    sourcePort: number;
}

export interface ObjectUserFssoDynamicMapping {
    _guiMeta?: string;
    _scopes?: outputs.ObjectUserFssoDynamicMapping_Scope[];
    groupPollInterval?: number;
    interface?: string;
    interfaceSelectMethod: string;
    ldapPoll?: string;
    ldapPollFilter?: string;
    ldapPollInterval?: number;
    ldapServer?: string;
    logonTimeout: number;
    password2s: string[];
    password3s: string[];
    password4s: string[];
    password5s: string[];
    passwords: string[];
    port: number;
    port2: number;
    port3: number;
    port4: number;
    port5: number;
    server?: string;
    server2?: string;
    server3?: string;
    server4?: string;
    server5?: string;
    sni?: string;
    sourceIp: string;
    sourceIp6: string;
    ssl: string;
    sslServerHostIpCheck: string;
    sslTrustedCert?: string;
    type: string;
    userInfoServer?: string;
}

export interface ObjectUserFssoDynamicMapping_Scope {
    name?: string;
    vdom?: string;
}

export interface ObjectUserFssopollingAdgrp {
    name?: string;
}

export interface ObjectUserGroupDynamicMapping {
    _scopes?: outputs.ObjectUserGroupDynamicMapping_Scope[];
    authConcurrentOverride: string;
    authConcurrentValue?: number;
    authtimeout?: number;
    company?: string;
    email?: string;
    expire?: number;
    expireType?: string;
    groupType: string;
    guests?: outputs.ObjectUserGroupDynamicMappingGuest[];
    httpDigestRealm?: string;
    id?: number;
    ldapMemberof?: string;
    logicType?: string;
    matches?: outputs.ObjectUserGroupDynamicMappingMatch[];
    maxAccounts?: number;
    member?: string;
    mobilePhone?: string;
    multipleGuestAdd?: string;
    password?: string;
    redirUrl?: string;
    smsCustomServer?: string;
    smsServer: string;
    sponsor?: string;
    sslvpnBookmarksGroup?: string;
    sslvpnCacheCleaner?: string;
    sslvpnClientChecks: string[];
    sslvpnFtp?: string;
    sslvpnHttp?: string;
    sslvpnOsCheck?: string;
    sslvpnOsCheckList?: outputs.ObjectUserGroupDynamicMappingSslvpnOsCheckList;
    sslvpnPortal?: string;
    sslvpnPortalHeading?: string;
    sslvpnRdp?: string;
    sslvpnSamba?: string;
    sslvpnSplitTunneling?: string;
    sslvpnSsh?: string;
    sslvpnTelnet?: string;
    sslvpnTunnel?: string;
    sslvpnTunnelEndip?: string;
    sslvpnTunnelIpMode?: string;
    sslvpnTunnelStartip?: string;
    sslvpnVirtualDesktop?: string;
    sslvpnVnc?: string;
    sslvpnWebapp?: string;
    ssoAttributeValue?: string;
    userId?: string;
    userName?: string;
}

export interface ObjectUserGroupDynamicMappingGuest {
    comment?: string;
    company?: string;
    email?: string;
    expiration?: string;
    group?: string;
    id?: number;
    mobilePhone?: string;
    name?: string;
    passwords: string[];
    sponsor?: string;
    userId?: string;
}

export interface ObjectUserGroupDynamicMappingMatch {
    _guiMeta?: string;
    groupName?: string;
    id?: number;
    serverName?: string;
}

export interface ObjectUserGroupDynamicMappingSslvpnOsCheckList {
    action?: string;
    latestPatchLevel?: string;
    name?: string;
    tolerance?: number;
}

export interface ObjectUserGroupDynamicMapping_Scope {
    name?: string;
    vdom?: string;
}

export interface ObjectUserGroupGuest {
    comment?: string;
    company?: string;
    email?: string;
    expiration?: string;
    id?: number;
    mobilePhone?: string;
    name?: string;
    passwords: string[];
    sponsor?: string;
    userId?: string;
}

export interface ObjectUserGroupMatch {
    _guiMeta?: string;
    groupName?: string;
    id?: number;
    serverName?: string;
}

export interface ObjectUserLdapDynamicMapping {
    _scopes?: outputs.ObjectUserLdapDynamicMapping_Scope[];
    accountKeyCertField: string;
    accountKeyFilter: string;
    accountKeyName?: string;
    accountKeyProcessing: string;
    accountKeyUpnSan?: string;
    antiphish: string;
    caCert?: string;
    clientCertAuth: string;
    clientCerts: string[];
    cnid: string;
    dn?: string;
    filter?: string;
    group?: string;
    groupFilter?: string;
    groupMemberCheck: string;
    groupObjectFilter?: string;
    groupObjectSearchBase?: string;
    groupSearchBase?: string;
    interface?: string;
    interfaceSelectMethod: string;
    maxConnections?: number;
    memberAttr: string;
    obtainUserInfo: string;
    passwordAttr?: string;
    passwordExpiryWarning: string;
    passwordRenewal: string;
    passwords: string[];
    port: number;
    retrieveProtectionProfile?: string;
    searchTypes: string[];
    secondaryServer?: string;
    secure: string;
    server?: string;
    serverIdentityCheck?: string;
    sourceIp?: string;
    sourcePort?: number;
    sslMinProtoVersion: string;
    statusTtl?: number;
    tertiaryServer?: string;
    twoFactor: string;
    twoFactorAuthentication?: string;
    twoFactorFilter?: string;
    twoFactorNotification?: string;
    type: string;
    userInfoExchangeServer?: string;
    username?: string;
}

export interface ObjectUserLdapDynamicMapping_Scope {
    name?: string;
    vdom?: string;
}

export interface ObjectUserNsxService {
    id?: string;
    integration?: string;
    name?: string;
    refId?: string;
}

export interface ObjectUserRadiusAccountingServer {
    id?: number;
    interface?: string;
    interfaceSelectMethod: string;
    port?: number;
    secrets: string[];
    server?: string;
    sourceIp?: string;
    status: string;
}

export interface ObjectUserRadiusDynamicMapping {
    _scopes?: outputs.ObjectUserRadiusDynamicMapping_Scope[];
    accountKeyCertField: string;
    accountKeyProcessing: string;
    accountingServers?: outputs.ObjectUserRadiusDynamicMappingAccountingServer[];
    acctAllServers: string;
    acctInterimInterval?: number;
    allUsergroup: string;
    authType: string;
    caCert?: string;
    callStationIdType: string;
    classes: string[];
    clientCert?: string;
    delimiter?: string;
    dpCarrierEndpointAttribute?: string;
    dpCarrierEndpointBlockAttribute?: string;
    dpContextTimeout?: number;
    dpFlushIpSession?: string;
    dpHoldTime?: number;
    dpHttpHeader?: string;
    dpHttpHeaderFallback?: string;
    dpHttpHeaderStatus?: string;
    dpHttpHeaderSuppress?: string;
    dpLogDynFlags: string[];
    dpLogPeriod?: number;
    dpMemPercent?: number;
    dpProfileAttribute?: string;
    dpProfileAttributeKey?: string;
    dpRadiusResponse?: string;
    dpRadiusServerPort?: number;
    dpSecrets: string[];
    dpValidateRequestSecret?: string;
    dynamicProfile?: string;
    endpointTranslation?: string;
    epCarrierEndpointConvertHex?: string;
    epCarrierEndpointHeader?: string;
    epCarrierEndpointHeaderSuppress?: string;
    epCarrierEndpointPrefix?: string;
    epCarrierEndpointPrefixRangeMax?: number;
    epCarrierEndpointPrefixRangeMin?: number;
    epCarrierEndpointPrefixString?: string;
    epCarrierEndpointSource?: string;
    epIpHeader?: string;
    epIpHeaderSuppress?: string;
    epMissingHeaderFallback?: string;
    epProfileQueryType?: string;
    groupOverrideAttrType?: string;
    h3cCompatibility: string;
    interface?: string;
    interfaceSelectMethod: string;
    macCase: string;
    macPasswordDelimiter: string;
    macUsernameDelimiter: string;
    nasId?: string;
    nasIdType: string;
    nasIp: string;
    passwordEncoding: string;
    passwordRenewal: string;
    radiusCoa: string;
    radiusPort?: number;
    rsso: string;
    rssoContextTimeout?: number;
    rssoEndpointAttribute?: string;
    rssoEndpointBlockAttribute?: string;
    rssoEpOneIpOnly: string;
    rssoFlushIpSession?: string;
    rssoLogFlags: string[];
    rssoLogPeriod?: number;
    rssoRadiusResponse?: string;
    rssoRadiusServerPort?: number;
    rssoSecrets: string[];
    rssoValidateRequestSecret?: string;
    secondarySecrets: string[];
    secondaryServer?: string;
    secrets: string[];
    server?: string;
    serverIdentityCheck: string;
    sourceIp?: string;
    ssoAttribute?: string;
    ssoAttributeKey?: string;
    ssoAttributeValueOverride: string;
    statusTtl: number;
    switchControllerAcctFastFramedipDetect: number;
    switchControllerNasIpDynamic?: string;
    switchControllerServiceTypes: string[];
    tertiarySecrets: string[];
    tertiaryServer?: string;
    timeout: number;
    tlsMinProtoVersion: string;
    transportProtocol: string;
    useGroupForProfile?: string;
    useManagementVdom: string;
    usernameCaseSensitive: string;
}

export interface ObjectUserRadiusDynamicMappingAccountingServer {
    id?: number;
    interface?: string;
    interfaceSelectMethod: string;
    port?: number;
    secrets: string[];
    server?: string;
    sourceIp?: string;
    status: string;
}

export interface ObjectUserRadiusDynamicMapping_Scope {
    name?: string;
    vdom?: string;
}

export interface ObjectUserSamlDynamicMapping {
    _scopes?: outputs.ObjectUserSamlDynamicMapping_Scope[];
    adfsClaim: string;
    authUrl?: string;
    cert?: string;
    clockTolerance: number;
    digestMethod: string;
    entityId?: string;
    groupClaimType?: string;
    groupName?: string;
    idpCert?: string;
    idpEntityId?: string;
    idpSingleLogoutUrl?: string;
    idpSingleSignOnUrl?: string;
    limitRelaystate: string;
    reauth: string;
    singleLogoutUrl?: string;
    singleSignOnUrl?: string;
    userClaimType?: string;
    userName?: string;
}

export interface ObjectUserSamlDynamicMapping_Scope {
    name?: string;
    vdom?: string;
}

export interface ObjectUserSecurityexemptlistRule {
    devices?: string;
    dstaddr?: string;
    id?: number;
    service?: string;
    srcaddr?: string;
}

export interface ObjectUserTacacsDynamicMapping {
    _scopes?: outputs.ObjectUserTacacsDynamicMapping_Scope[];
    authenType: string;
    authorization: string;
    interface?: string;
    interfaceSelectMethod: string;
    keys: string[];
    port: number;
    secondaryKeys: string[];
    secondaryServer?: string;
    server?: string;
    sourceIp?: string;
    statusTtl: number;
    tertiaryKeys: string[];
    tertiaryServer?: string;
}

export interface ObjectUserTacacsDynamicMapping_Scope {
    name?: string;
    vdom?: string;
}

export interface ObjectUserVcenterRule {
    name?: string;
    rule?: string;
}

export interface ObjectVideofilterKeywordWord {
    comment?: string;
    name?: string;
    patternType: string;
    status: string;
}

export interface ObjectVideofilterProfileFilter {
    action: string;
    category?: string;
    channel?: string;
    comment?: string;
    id?: number;
    keyword?: string;
    log: string;
    type: string;
}

export interface ObjectVideofilterProfileFortiguardCategory {
    filters?: outputs.ObjectVideofilterProfileFortiguardCategoryFilter[];
}

export interface ObjectVideofilterProfileFortiguardCategoryFilter {
    action: string;
    categoryId?: number;
    id?: number;
    log: string;
}

export interface ObjectVideofilterProfileFortiguardcategoryFilter {
    action: string;
    categoryId?: number;
    id?: number;
    log: string;
}

export interface ObjectVideofilterYoutubechannelfilterEntry {
    action?: string;
    channelId?: string;
    comment?: string;
    id?: number;
}

export interface ObjectVirtualpatchProfileExemption {
    devices: string[];
    id?: number;
    rules: number[];
    status: string;
}

export interface ObjectVoipProfileMsrp {
    logViolations: string;
    maxMsgSize?: number;
    maxMsgSizeAction: string;
    status: string;
}

export interface ObjectVoipProfileSccp {
    blockMcast: string;
    logCallSummary: string;
    logViolations: string;
    maxCalls?: number;
    status: string;
    verifyHeader: string;
}

export interface ObjectVoipProfileSip {
    ackRate?: number;
    ackRateTrack: string;
    blockAck: string;
    blockBye: string;
    blockCancel: string;
    blockGeoRedOptions: string;
    blockInfo: string;
    blockInvite: string;
    blockLongLines: string;
    blockMessage: string;
    blockNotify: string;
    blockOptions: string;
    blockPrack: string;
    blockPublish: string;
    blockRefer: string;
    blockRegister: string;
    blockSubscribe: string;
    blockUnknown: string;
    blockUpdate: string;
    byeRate?: number;
    byeRateTrack: string;
    callIdRegex?: string;
    callKeepalive?: number;
    cancelRate?: number;
    cancelRateTrack: string;
    contactFixup: string;
    contentTypeRegex?: string;
    hntRestrictSourceIp: string;
    hostedNatTraversal: string;
    infoRate?: number;
    infoRateTrack: string;
    inviteRate?: number;
    inviteRateTrack: string;
    ipsRtp: string;
    logCallSummary: string;
    logViolations: string;
    malformedHeaderAllow: string;
    malformedHeaderCallId: string;
    malformedHeaderContact: string;
    malformedHeaderContentLength: string;
    malformedHeaderContentType: string;
    malformedHeaderCseq: string;
    malformedHeaderExpires: string;
    malformedHeaderFrom: string;
    malformedHeaderMaxForwards: string;
    malformedHeaderNoProxyRequire: string;
    malformedHeaderNoRequire: string;
    malformedHeaderPAssertedIdentity: string;
    malformedHeaderRack: string;
    malformedHeaderRecordRoute: string;
    malformedHeaderRoute: string;
    malformedHeaderRseq: string;
    malformedHeaderSdpA: string;
    malformedHeaderSdpB: string;
    malformedHeaderSdpC: string;
    malformedHeaderSdpI: string;
    malformedHeaderSdpK: string;
    malformedHeaderSdpM: string;
    malformedHeaderSdpO: string;
    malformedHeaderSdpR: string;
    malformedHeaderSdpS: string;
    malformedHeaderSdpT: string;
    malformedHeaderSdpV: string;
    malformedHeaderSdpZ: string;
    malformedHeaderTo: string;
    malformedHeaderVia: string;
    malformedRequestLine: string;
    maxBodyLength?: number;
    maxDialogs?: number;
    maxIdleDialogs?: number;
    maxLineLength: number;
    messageRate?: number;
    messageRateTrack: string;
    natPortRange: string;
    natTrace: string;
    noSdpFixup: string;
    notifyRate?: number;
    notifyRateTrack: string;
    openContactPinhole: string;
    openRecordRoutePinhole: string;
    openRegisterPinhole: string;
    openViaPinhole: string;
    optionsRate?: number;
    optionsRateTrack: string;
    prackRate?: number;
    prackRateTrack: string;
    preserveOverride: string;
    provisionalInviteExpiryTime: number;
    publishRate?: number;
    publishRateTrack: string;
    referRate?: number;
    referRateTrack: string;
    registerContactTrace: string;
    registerRate?: number;
    registerRateTrack: string;
    rfc2543Branch: string;
    rtp: string;
    sslAlgorithm?: string;
    sslAuthClient?: string;
    sslAuthServer?: string;
    sslClientCertificate?: string;
    sslClientRenegotiation?: string;
    sslMaxVersion?: string;
    sslMinVersion?: string;
    sslMode: string;
    sslPfs: string;
    sslSendEmptyFrags?: string;
    sslServerCertificate?: string;
    status: string;
    strictRegister: string;
    subscribeRate?: number;
    subscribeRateTrack: string;
    unknownHeader: string;
    updateRate?: number;
    updateRateTrack: string;
}

export interface ObjectVpnIpsecFecMapping {
    bandwidthBiThreshold?: number;
    bandwidthDownThreshold?: number;
    bandwidthUpThreshold?: number;
    base?: number;
    latencyThreshold?: number;
    packetLossThreshold?: number;
    redundant?: number;
    seqno: number;
}

export interface ObjectVpnSslWebHostchecksoftwareCheckItemList {
    action: string;
    id?: number;
    md5s: string[];
    target?: string;
    type: string;
    version?: string;
}

export interface ObjectVpnSslWebPortalBookmarkGroup {
    bookmarks?: outputs.ObjectVpnSslWebPortalBookmarkGroupBookmark[];
    name?: string;
}

export interface ObjectVpnSslWebPortalBookmarkGroupBookmark {
    additionalParams?: string;
    apptype?: string;
    colorDepth?: string;
    description?: string;
    domain?: string;
    folder?: string;
    formDatas?: outputs.ObjectVpnSslWebPortalBookmarkGroupBookmarkFormData[];
    height?: number;
    host?: string;
    keyboardLayout?: string;
    listeningPort?: number;
    loadBalancingInfo?: string;
    logonPasswords: string[];
    logonUser?: string;
    name?: string;
    port?: number;
    preconnectionBlob?: string;
    preconnectionId?: number;
    remotePort?: number;
    restrictedAdmin?: string;
    security?: string;
    sendPreconnectionId?: string;
    serverLayout?: string;
    showStatusWindow?: string;
    sso?: string;
    ssoCredential?: string;
    ssoCredentialSentOnce?: string;
    ssoPasswords: string[];
    ssoUsername?: string;
    url?: string;
    vncKeyboardLayout?: string;
    width?: number;
}

export interface ObjectVpnSslWebPortalBookmarkGroupBookmarkFormData {
    name?: string;
    value?: string;
}

export interface ObjectVpnSslWebPortalBookmarkgroupBookmark {
    additionalParams?: string;
    apptype?: string;
    colorDepth?: string;
    description?: string;
    domain?: string;
    folder?: string;
    formDatas?: outputs.ObjectVpnSslWebPortalBookmarkgroupBookmarkFormData[];
    height?: number;
    host?: string;
    keyboardLayout?: string;
    listeningPort?: number;
    loadBalancingInfo?: string;
    logonPasswords: string[];
    logonUser?: string;
    name?: string;
    port?: number;
    preconnectionBlob?: string;
    preconnectionId?: number;
    remotePort?: number;
    restrictedAdmin?: string;
    security?: string;
    sendPreconnectionId?: string;
    serverLayout?: string;
    showStatusWindow?: string;
    sso?: string;
    ssoCredential?: string;
    ssoCredentialSentOnce?: string;
    ssoPasswords: string[];
    ssoUsername?: string;
    url?: string;
    vncKeyboardLayout?: string;
    width?: number;
}

export interface ObjectVpnSslWebPortalBookmarkgroupBookmarkFormData {
    name?: string;
    value?: string;
}

export interface ObjectVpnSslWebPortalBookmarkgroupBookmarksFormData {
    name?: string;
    value?: string;
}

export interface ObjectVpnSslWebPortalLandingPage {
    formDatas?: outputs.ObjectVpnSslWebPortalLandingPageFormData[];
    logoutUrl?: string;
    sso: string;
    ssoCredential: string;
    ssoPasswords: string[];
    ssoUsername?: string;
    url?: string;
}

export interface ObjectVpnSslWebPortalLandingPageFormData {
    name?: string;
    value?: string;
}

export interface ObjectVpnSslWebPortalLandingpageFormData {
    name?: string;
    value?: string;
}

export interface ObjectVpnSslWebPortalMacAddrCheckRule {
    macAddrLists: string[];
    macAddrMask?: number;
    name?: string;
}

export interface ObjectVpnSslWebPortalOsCheckList {
    action?: string;
    latestPatchLevel?: string;
    name?: string;
    tolerance?: number;
}

export interface ObjectVpnSslWebPortalSplitDn {
    dnsServer1?: string;
    dnsServer2?: string;
    domains?: string;
    id?: number;
    ipv6DnsServer1?: string;
    ipv6DnsServer2?: string;
}

export interface ObjectVpnmgrNodeIpRange {
    endIp?: string;
    id?: number;
    startIp?: string;
}

export interface ObjectVpnmgrNodeIpv4ExcludeRange {
    endIp?: string;
    id?: number;
    startIp?: string;
}

export interface ObjectVpnmgrNodeProtectedSubnet {
    addr?: string;
    seq?: number;
}

export interface ObjectVpnmgrNodeScopemember {
    name?: string;
    vdom?: string;
}

export interface ObjectVpnmgrNodeSummaryAddr {
    addr?: string;
    priority?: number;
    seq?: number;
}

export interface ObjectWafProfileAddressList {
    blockedAddress?: string;
    blockedLog: string;
    severity: string;
    status: string;
    trustedAddress?: string;
}

export interface ObjectWafProfileConstraint {
    contentLength?: outputs.ObjectWafProfileConstraintContentLength;
    exceptions?: outputs.ObjectWafProfileConstraintException[];
    headerLength?: outputs.ObjectWafProfileConstraintHeaderLength;
    hostname?: outputs.ObjectWafProfileConstraintHostname;
    lineLength?: outputs.ObjectWafProfileConstraintLineLength;
    malformed?: outputs.ObjectWafProfileConstraintMalformed;
    maxCookie?: outputs.ObjectWafProfileConstraintMaxCookie;
    maxHeaderLine?: outputs.ObjectWafProfileConstraintMaxHeaderLine;
    maxRangeSegment?: outputs.ObjectWafProfileConstraintMaxRangeSegment;
    maxUrlParam?: outputs.ObjectWafProfileConstraintMaxUrlParam;
    method?: outputs.ObjectWafProfileConstraintMethod;
    paramLength?: outputs.ObjectWafProfileConstraintParamLength;
    urlParamLength?: outputs.ObjectWafProfileConstraintUrlParamLength;
    version?: outputs.ObjectWafProfileConstraintVersion;
}

export interface ObjectWafProfileConstraintContentLength {
    action: string;
    length: number;
    log: string;
    severity: string;
    status: string;
}

export interface ObjectWafProfileConstraintException {
    address?: string;
    contentLength: string;
    headerLength: string;
    hostname: string;
    id?: number;
    lineLength: string;
    malformed: string;
    maxCookie: string;
    maxHeaderLine: string;
    maxRangeSegment: string;
    maxUrlParam: string;
    method: string;
    paramLength: string;
    pattern?: string;
    regex: string;
    urlParamLength: string;
    version: string;
}

export interface ObjectWafProfileConstraintHeaderLength {
    action: string;
    length: number;
    log: string;
    severity: string;
    status: string;
}

export interface ObjectWafProfileConstraintHostname {
    action: string;
    log: string;
    severity: string;
    status: string;
}

export interface ObjectWafProfileConstraintLineLength {
    action: string;
    length: number;
    log: string;
    severity: string;
    status: string;
}

export interface ObjectWafProfileConstraintMalformed {
    action: string;
    log: string;
    severity: string;
    status: string;
}

export interface ObjectWafProfileConstraintMaxCookie {
    action: string;
    log: string;
    maxCookie: number;
    severity: string;
    status: string;
}

export interface ObjectWafProfileConstraintMaxHeaderLine {
    action: string;
    log: string;
    maxHeaderLine: number;
    severity: string;
    status: string;
}

export interface ObjectWafProfileConstraintMaxRangeSegment {
    action: string;
    log: string;
    maxRangeSegment: number;
    severity: string;
    status: string;
}

export interface ObjectWafProfileConstraintMaxUrlParam {
    action: string;
    log: string;
    maxUrlParam: number;
    severity: string;
    status: string;
}

export interface ObjectWafProfileConstraintMethod {
    action: string;
    log: string;
    severity: string;
    status: string;
}

export interface ObjectWafProfileConstraintParamLength {
    action: string;
    length: number;
    log: string;
    severity: string;
    status: string;
}

export interface ObjectWafProfileConstraintUrlParamLength {
    action: string;
    length: number;
    log: string;
    severity: string;
    status: string;
}

export interface ObjectWafProfileConstraintVersion {
    action: string;
    log: string;
    severity: string;
    status: string;
}

export interface ObjectWafProfileMethod {
    defaultAllowedMethods: string[];
    log: string;
    methodPolicies?: outputs.ObjectWafProfileMethodMethodPolicy[];
    severity: string;
    status: string;
}

export interface ObjectWafProfileMethodMethodPolicy {
    address?: string;
    allowedMethods: string[];
    id?: number;
    pattern?: string;
    regex: string;
}

export interface ObjectWafProfileSignature {
    creditCardDetectionThreshold: number;
    customSignatures?: outputs.ObjectWafProfileSignatureCustomSignature[];
    disabledSignature?: string;
    disabledSubClass?: string;
    mainClass?: outputs.ObjectWafProfileSignatureMainClass;
}

export interface ObjectWafProfileSignatureCustomSignature {
    action: string;
    caseSensitivity: string;
    direction: string;
    log: string;
    name?: string;
    pattern?: string;
    severity: string;
    status: string;
    targets: string[];
}

export interface ObjectWafProfileSignatureMainClass {
    action?: string;
    id?: number;
    log?: string;
    severity?: string;
    status?: string;
}

export interface ObjectWafProfileUrlAccess {
    accessPatterns?: outputs.ObjectWafProfileUrlAccessAccessPattern[];
    action: string;
    address?: string;
    id?: number;
    log: string;
    severity: string;
}

export interface ObjectWafProfileUrlAccessAccessPattern {
    id?: number;
    negate: string;
    pattern?: string;
    regex: string;
    srcaddr?: string;
}

export interface ObjectWafProfileUrlaccessAccessPattern {
    id?: number;
    negate: string;
    pattern?: string;
    regex: string;
    srcaddr?: string;
}

export interface ObjectWanoptProfileCifs {
    byteCaching: string;
    logTraffic: string;
    ports: number[];
    preferChunking: string;
    protocolOpt: string;
    secureTunnel: string;
    status: string;
    tunnelSharing: string;
}

export interface ObjectWanoptProfileFtp {
    byteCaching: string;
    logTraffic: string;
    ports: number[];
    preferChunking: string;
    protocolOpt: string;
    secureTunnel: string;
    ssl: string;
    status: string;
    tunnelSharing: string;
}

export interface ObjectWanoptProfileHttp {
    byteCaching: string;
    logTraffic: string;
    ports: number[];
    preferChunking: string;
    protocolOpt: string;
    secureTunnel: string;
    ssl: string;
    sslPorts: number[];
    status: string;
    tunnelNonHttp?: string;
    tunnelSharing: string;
    unknownHttpVersion?: string;
}

export interface ObjectWanoptProfileMapi {
    byteCaching: string;
    logTraffic: string;
    ports: number[];
    secureTunnel: string;
    status: string;
    tunnelSharing: string;
}

export interface ObjectWanoptProfileTcp {
    byteCaching: string;
    byteCachingOpt: string;
    logTraffic: string;
    port: string;
    secureTunnel: string;
    ssl: string;
    sslPorts: number[];
    status: string;
    tunnelSharing: string;
}

export interface ObjectWebfilterContentEntry {
    action: string;
    lang: string;
    name?: string;
    patternType: string;
    score: number;
    status: string;
}

export interface ObjectWebfilterContentheaderEntry {
    action: string;
    category?: string;
    pattern?: string;
}

export interface ObjectWebfilterProfileAntiphish {
    authentication: string;
    checkBasicAuth: string;
    checkUri: string;
    checkUsernameOnly: string;
    customPatterns?: outputs.ObjectWebfilterProfileAntiphishCustomPattern[];
    defaultAction: string;
    domainController?: string;
    inspectionEntries?: outputs.ObjectWebfilterProfileAntiphishInspectionEntry[];
    ldap?: string;
    maxBodyLen: number;
    status: string;
}

export interface ObjectWebfilterProfileAntiphishCustomPattern {
    category?: string;
    pattern?: string;
    type: string;
}

export interface ObjectWebfilterProfileAntiphishInspectionEntry {
    action: string;
    fortiguardCategories: string[];
    name?: string;
}

export interface ObjectWebfilterProfileFileFilter {
    entries?: outputs.ObjectWebfilterProfileFileFilterEntry[];
    log?: string;
    scanArchiveContents?: string;
    status?: string;
}

export interface ObjectWebfilterProfileFileFilterEntry {
    action?: string;
    comment?: string;
    direction?: string;
    encryption?: string;
    fileTypes: string[];
    filter?: string;
    passwordProtected?: string;
    protocols: string[];
}

export interface ObjectWebfilterProfileFtgdWf {
    exemptQuotas: string[];
    filters?: outputs.ObjectWebfilterProfileFtgdWfFilter[];
    maxQuotaTimeout: number;
    options: string[];
    ovrds: string[];
    quotas?: outputs.ObjectWebfilterProfileFtgdWfQuota[];
    rateCrlUrls: string;
    rateCssUrls: string;
    rateImageUrls: string;
    rateJavascriptUrls: string;
}

export interface ObjectWebfilterProfileFtgdWfFilter {
    action: string;
    authUsrGrp?: string;
    category: string;
    id?: number;
    log: string;
    overrideReplacemsg?: string;
    warnDuration?: string;
    warningDurationType?: string;
    warningPrompt?: string;
}

export interface ObjectWebfilterProfileFtgdWfQuota {
    category?: string;
    duration?: string;
    id?: number;
    overrideReplacemsg?: string;
    type?: string;
    unit?: string;
    value?: number;
}

export interface ObjectWebfilterProfileFtgdwfFilter {
    action: string;
    authUsrGrp?: string;
    category: string;
    id?: number;
    log: string;
    overrideReplacemsg?: string;
    warnDuration?: string;
    warningDurationType?: string;
    warningPrompt?: string;
}

export interface ObjectWebfilterProfileFtgdwfQuota {
    category?: string;
    duration?: string;
    id?: number;
    overrideReplacemsg?: string;
    type?: string;
    unit?: string;
    value?: number;
}

export interface ObjectWebfilterProfileOverride {
    ovrdCookie: string;
    ovrdDur: string;
    ovrdDurMode: string;
    ovrdScope: string;
    ovrdUserGroups: string[];
    profileAttribute: string;
    profileType: string;
    profiles: string[];
}

export interface ObjectWebfilterProfileUrlExtraction {
    redirectHeader?: string;
    redirectNoContent?: string;
    redirectUrl?: string;
    serverFqdn?: string;
    status?: string;
}

export interface ObjectWebfilterProfileWeb {
    allowlists: string[];
    blacklist: string;
    blocklist: string;
    bwordTable?: string;
    bwordThreshold: number;
    contentHeaderList?: string;
    keywordMatches: string[];
    logSearch: string;
    safeSearches: string[];
    urlfilterTable?: string;
    vimeoRestrict?: string;
    whitelists: string[];
    youtubeRestrict: string;
}

export interface ObjectWebfilterProfileYoutubeChannelFilter {
    channelId?: string;
    comment?: string;
    id?: number;
}

export interface ObjectWebfilterUrlfilterEntry {
    action: string;
    antiphishAction: string;
    dnsAddressFamily: string;
    exempts: string[];
    id?: number;
    referrerHost?: string;
    status: string;
    type: string;
    url?: string;
    webProxyProfile?: string;
}

export interface ObjectWebproxyForwardservergroupServerList {
    name?: string;
    weight: number;
}

export interface ObjectWebproxyProfileHeader {
    action: string;
    addOption: string;
    base64Encoding: string;
    content?: string;
    dstaddr?: string;
    dstaddr6?: string;
    id: number;
    name?: string;
    protocols: string[];
}

export interface ObjectWirelesscontrollerAccesscontrollistLayer3Ipv4Rule {
    action?: string;
    comment?: string;
    dstaddr: string;
    dstport?: number;
    protocol: number;
    ruleId?: number;
    srcaddr: string;
    srcport?: number;
}

export interface ObjectWirelesscontrollerAccesscontrollistLayer3Ipv6Rule {
    action?: string;
    comment?: string;
    dstaddr: string;
    dstport?: number;
    protocol: number;
    ruleId?: number;
    srcaddr: string;
    srcport?: number;
}

export interface ObjectWirelesscontrollerApcfgprofileCommandList {
    id?: number;
    name?: string;
    passwdValues: string[];
    type: string;
    value?: string;
}

export interface ObjectWirelesscontrollerBonjourprofilePolicyList {
    description?: string;
    fromVlan: string;
    policyId?: number;
    services: string[];
    toVlan: string;
}

export interface ObjectWirelesscontrollerHotspot20Anqp3gppcellularMccMncList {
    id?: number;
    mcc?: string;
    mnc?: string;
}

export interface ObjectWirelesscontrollerHotspot20AnqpnairealmNaiList {
    eapMethods?: outputs.ObjectWirelesscontrollerHotspot20AnqpnairealmNaiListEapMethod[];
    encoding: string;
    naiRealm?: string;
    name?: string;
}

export interface ObjectWirelesscontrollerHotspot20AnqpnairealmNaiListEapMethod {
    authParams?: outputs.ObjectWirelesscontrollerHotspot20AnqpnairealmNaiListEapMethodAuthParam[];
    index?: number;
    method: string;
}

export interface ObjectWirelesscontrollerHotspot20AnqpnairealmNaiListEapMethodAuthParam {
    id: string;
    index?: number;
    val: string;
}

export interface ObjectWirelesscontrollerHotspot20AnqpnairealmNailistEapMethod {
    authParams?: outputs.ObjectWirelesscontrollerHotspot20AnqpnairealmNailistEapMethodAuthParam[];
    index?: number;
    method: string;
}

export interface ObjectWirelesscontrollerHotspot20AnqpnairealmNailistEapMethodAuthParam {
    id: string;
    index?: number;
    val: string;
}

export interface ObjectWirelesscontrollerHotspot20AnqpnairealmNailistEapmethodAuthParam {
    id: string;
    index?: number;
    val: string;
}

export interface ObjectWirelesscontrollerHotspot20AnqproamingconsortiumOiList {
    comment?: string;
    index?: number;
    oi?: string;
}

export interface ObjectWirelesscontrollerHotspot20AnqpvenuenameValueList {
    index: number;
    lang: string;
    value?: string;
}

export interface ObjectWirelesscontrollerHotspot20AnqpvenueurlValueList {
    index?: number;
    number?: number;
    value?: string;
}

export interface ObjectWirelesscontrollerHotspot20H2qpadviceofchargeAocList {
    naiRealm?: string;
    naiRealmEncoding?: string;
    name?: string;
    planInfos?: outputs.ObjectWirelesscontrollerHotspot20H2qpadviceofchargeAocListPlanInfo[];
    type: string;
}

export interface ObjectWirelesscontrollerHotspot20H2qpadviceofchargeAocListPlanInfo {
    currency?: string;
    infoFile?: string;
    lang?: string;
    name?: string;
}

export interface ObjectWirelesscontrollerHotspot20H2qpadviceofchargeAoclistPlanInfo {
    currency?: string;
    infoFile?: string;
    lang?: string;
    name?: string;
}

export interface ObjectWirelesscontrollerHotspot20H2qpoperatornameValueList {
    index?: number;
    lang: string;
    value?: string;
}

export interface ObjectWirelesscontrollerHotspot20H2qposuproviderFriendlyName {
    friendlyName?: string;
    index?: number;
    lang: string;
}

export interface ObjectWirelesscontrollerHotspot20H2qposuproviderServiceDescription {
    lang: string;
    serviceDescription?: string;
    serviceId?: number;
}

export interface ObjectWirelesscontrollerHotspot20H2qposuprovidernaiNaiList {
    name: string;
    osuNai?: string;
}

export interface ObjectWirelesscontrollerHotspot20IconIconList {
    file?: string;
    height?: number;
    lang: string;
    name?: string;
    type: string;
    width?: number;
}

export interface ObjectWirelesscontrollerHotspot20QosmapDscpExcept {
    dscp?: number;
    index?: number;
    up?: number;
}

export interface ObjectWirelesscontrollerHotspot20QosmapDscpRange {
    high: number;
    index?: number;
    low: number;
    up?: number;
}

export interface ObjectWirelesscontrollerMpskprofileMpskGroup {
    mpskKeys?: outputs.ObjectWirelesscontrollerMpskprofileMpskGroupMpskKey[];
    name?: string;
    vlanId?: number;
    vlanType: string;
}

export interface ObjectWirelesscontrollerMpskprofileMpskGroupMpskKey {
    comment?: string;
    concurrentClientLimitType: string;
    concurrentClients: number;
    mac: string;
    mpskSchedules?: string;
    name?: string;
    passphrases: string[];
    pmks: string[];
}

export interface ObjectWirelesscontrollerMpskprofileMpskgroupMpskKey {
    comment?: string;
    concurrentClientLimitType: string;
    concurrentClients: number;
    mac: string;
    mpskSchedules?: string;
    name?: string;
    passphrases: string[];
    pmks: string[];
}

export interface ObjectWirelesscontrollerVapDynamicMapping {
    _centmgmt: string;
    _dhcpSvrId?: string;
    _intfAllowaccesses: string[];
    _intfDeviceAccessList?: string;
    _intfDeviceIdentification: string;
    _intfDeviceNetscan: string;
    _intfDhcp6RelayIp?: string;
    _intfDhcp6RelayService: string;
    _intfDhcp6RelayType: string;
    _intfDhcpRelayIps: string[];
    _intfDhcpRelayService: string;
    _intfDhcpRelayType: string;
    _intfIp?: string;
    _intfIp6Address?: string;
    _intfIp6Allowaccesses: string[];
    _intfListenForticlientConnection: string;
    _isFactorySetting: string;
    _scopes?: outputs.ObjectWirelesscontrollerVapDynamicMapping_Scope[];
    accessControlList?: string;
    acctInterimInterval?: number;
    additionalAkms: string[];
    addressGroup?: string;
    addressGroupPolicy: string;
    alias?: string;
    antivirusProfile?: string;
    applicationDetectionEngine: string;
    applicationDscpMarking: string;
    applicationList?: string;
    applicationReportIntv: number;
    atfWeight: number;
    auth?: string;
    authCert?: string;
    authPortalAddr?: string;
    beaconAdvertisings: string[];
    broadcastSsid: string;
    broadcastSuppressions: string[];
    bssColorPartial: string;
    bstmDisassociationImminent: string;
    bstmLoadBalancingDisassocTimer: number;
    bstmRssiDisassocTimer: number;
    captivePortalAcName?: string;
    captivePortalAuthTimeout?: number;
    captivePortalFwAccounting: string;
    captivePortalMacauthRadiusSecrets: string[];
    captivePortalMacauthRadiusServer?: string;
    captivePortalRadiusSecrets: string[];
    captivePortalRadiusServer?: string;
    captivePortalSessionTimeoutInterval?: number;
    clientCount?: number;
    dhcpAddressEnforcement: string;
    dhcpLeaseTime?: number;
    dhcpOption43Insertion: string;
    dhcpOption82CircuitIdInsertion: string;
    dhcpOption82Insertion: string;
    dhcpOption82RemoteIdInsertion: string;
    dynamicVlan?: string;
    eapReauth: string;
    eapReauthIntv: number;
    eapolKeyRetries: string;
    encrypt: string;
    externalFastRoaming: string;
    externalLogout?: string;
    externalWeb?: string;
    externalWebFormat?: string;
    fastBssTransition: string;
    fastRoaming: string;
    ftMobilityDomain?: number;
    ftOverDs?: string;
    ftR0KeyLifetime?: number;
    gasComebackDelay: number;
    gasFragmentationLimit: number;
    gtkRekey: string;
    gtkRekeyIntv: number;
    highEfficiency: string;
    hotspot20Profile?: string;
    igmpSnooping: string;
    intraVapPrivacy: string;
    ip?: string;
    ipsSensor?: string;
    ipv6Rules: string[];
    keyindex?: number;
    keys: string[];
    l3Roaming: string;
    l3RoamingMode: string;
    ldpc: string;
    localAuthentication?: string;
    localBridging: string;
    localLan: string;
    localStandalone: string;
    localStandaloneDns: string;
    localStandaloneDnsIps: string[];
    localStandaloneNat?: string;
    localSwitching?: string;
    macAuthBypass: string;
    macCalledStationDelimiter: string;
    macCallingStationDelimiter: string;
    macCase: string;
    macFilter: string;
    macFilterPolicyOther: string;
    macPasswordDelimiter: string;
    macUsernameDelimiter: string;
    maxClients?: number;
    maxClientsAp?: number;
    mbo: string;
    mboCellDataConnPref: string;
    meDisableThresh: number;
    meshBackhaul: string;
    mpsk?: string;
    mpskConcurrentClients?: number;
    mpskProfile?: string;
    muMimo: string;
    multicastEnhance: string;
    multicastRate?: string;
    n80211k?: string;
    n80211v?: string;
    nac: string;
    nacProfile?: string;
    neighborReportDualBand: string;
    okc: string;
    osen: string;
    oweGroups: string[];
    oweTransition: string;
    oweTransitionSsid?: string;
    passphrases: string[];
    pmf: string;
    pmfAssocComebackTimeout: number;
    pmfSaQueryRetryTimeout: number;
    portMacauth: string;
    portMacauthReauthTimeout: number;
    portMacauthTimeout: number;
    portalMessageOverrideGroup?: string;
    portalType?: string;
    primaryWagProfile?: string;
    probeRespSuppression: string;
    probeRespThreshold: string;
    ptkRekey: string;
    ptkRekeyIntv: number;
    qosProfile?: string;
    quarantine: string;
    radio2gThreshold: string;
    radio5gThreshold: string;
    radioSensitivity: string;
    radiusMacAuth: string;
    radiusMacAuthBlockInterval?: number;
    radiusMacAuthServer?: string;
    radiusMacAuthUsergroups: string[];
    radiusMacMpskAuth: string;
    radiusMacMpskTimeout: number;
    radiusServer?: string;
    rates11acMcsMap?: string;
    rates11acSs12s: string[];
    rates11acSs34s: string[];
    rates11as: string[];
    rates11axMcsMap?: string;
    rates11axSs12s: string[];
    rates11axSs34s: string[];
    rates11bgs: string[];
    rates11nSs12s: string[];
    rates11nSs34s: string[];
    roamingAcctInterimUpdate?: string;
    saeGroups: string[];
    saeH2eOnly?: string;
    saeHnpOnly?: string;
    saePasswords: string[];
    saePk?: string;
    saePrivateKey?: string;
    scanBotnetConnections: string;
    schedule?: string;
    secondaryWagProfile?: string;
    security: string;
    securityExemptList?: string;
    securityObsoleteOption: string;
    securityRedirectUrl?: string;
    selectedUsergroups?: string;
    splitTunneling: string;
    ssid: string;
    stickyClientRemove: string;
    stickyClientThreshold2g: string;
    stickyClientThreshold5g: string;
    stickyClientThreshold6g: string;
    targetWakeTime: string;
    tkipCounterMeasure: string;
    tunnelEchoInterval?: number;
    tunnelFallbackInterval?: number;
    usergroup?: string;
    utmLog: string;
    utmProfile?: string;
    utmStatus: string;
    vdom?: string;
    vlanAuto: string;
    vlanPooling: string;
    vlanid?: number;
    voiceEnterprise: string;
    webfilterProfile?: string;
}

export interface ObjectWirelesscontrollerVapDynamicMapping_Scope {
    name?: string;
    vdom?: string;
}

export interface ObjectWirelesscontrollerVapMacFilterList {
    id?: number;
    mac: string;
    macFilterPolicy: string;
}

export interface ObjectWirelesscontrollerVapMpskKey {
    comment?: string;
    concurrentClients?: string;
    keyName?: string;
    mpskSchedules?: string;
    passphrases: string[];
}

export interface ObjectWirelesscontrollerVapPortalMessageOverrides {
    authDisclaimerPage?: string;
    authLoginFailedPage?: string;
    authLoginPage?: string;
    authRejectPage?: string;
}

export interface ObjectWirelesscontrollerVapVlanName {
    name?: string;
    vlanId?: number;
}

export interface ObjectWirelesscontrollerVapVlanPool {
    _wtpGroup?: string;
    id?: number;
}

export interface ObjectWirelesscontrollerWtpprofileDenyMacList {
    id: number;
    mac: string;
}

export interface ObjectWirelesscontrollerWtpprofileEslSesDongle {
    apcAddrType: string;
    apcFqdn?: string;
    apcIp: string;
    apcPort?: number;
    coexLevel: string;
    complianceLevel: string;
    eslChannel: string;
    outputPower: string;
    scdEnable: string;
    tlsCertVerification: string;
    tlsFqdnVerification: string;
}

export interface ObjectWirelesscontrollerWtpprofileLan {
    port1Mode?: string;
    port1Ssid?: string;
    port2Mode?: string;
    port2Ssid?: string;
    port3Mode?: string;
    port3Ssid?: string;
    port4Mode?: string;
    port4Ssid?: string;
    port5Mode?: string;
    port5Ssid?: string;
    port6Mode?: string;
    port6Ssid?: string;
    port7Mode?: string;
    port7Ssid?: string;
    port8Mode?: string;
    port8Ssid?: string;
    portEslMode: string;
    portEslSsid?: string;
    portMode?: string;
    portSsid?: string;
}

export interface ObjectWirelesscontrollerWtpprofileLbs {
    aeroscout: string;
    aeroscoutApMac: string;
    aeroscoutMmuReport: string;
    aeroscoutMu: string;
    aeroscoutMuFactor: number;
    aeroscoutMuTimeout: number;
    aeroscoutServerIp: string;
    aeroscoutServerPort?: number;
    ekahauBlinkMode: string;
    ekahauTag: string;
    ercServerIp: string;
    ercServerPort: number;
    fortipresence: string;
    fortipresenceBle: string;
    fortipresenceFrequency?: number;
    fortipresencePort?: number;
    fortipresenceProject?: string;
    fortipresenceRogue?: string;
    fortipresenceSecrets: string[];
    fortipresenceServer?: string;
    fortipresenceServerAddrType?: string;
    fortipresenceServerFqdn?: string;
    fortipresenceUnassoc?: string;
    polestar: string;
    polestarAccumulationInterval: number;
    polestarAssetAddrgrpList?: string;
    polestarAssetUuidList1?: string;
    polestarAssetUuidList2?: string;
    polestarAssetUuidList3?: string;
    polestarAssetUuidList4?: string;
    polestarProtocol: string;
    polestarReportingInterval: number;
    polestarServerFqdn: string;
    polestarServerPath: string;
    polestarServerPort: number;
    polestarServerToken?: string;
    stationLocate: string;
}

export interface ObjectWirelesscontrollerWtpprofilePlatform {
    _localPlatformStr?: string;
    ddscan: string;
    mode?: string;
    type: string;
}

export interface ObjectWirelesscontrollerWtpprofileRadio1 {
    airtimeFairness: string;
    amsdu: string;
    apHandoff?: string;
    apSnifferAddr: string;
    apSnifferBufsize: number;
    apSnifferChan?: number;
    apSnifferCtl: string;
    apSnifferData: string;
    apSnifferMgmtBeacon: string;
    apSnifferMgmtOther: string;
    apSnifferMgmtProbe: string;
    arrpProfile?: string;
    autoPowerHigh?: number;
    autoPowerLevel: string;
    autoPowerLow?: number;
    autoPowerTarget: string;
    band?: string;
    band5gType: string;
    bandwidthAdmissionControl: string;
    bandwidthCapacity: number;
    beaconInterval: number;
    bssColor?: number;
    bssColorMode: string;
    callAdmissionControl: string;
    callCapacity: number;
    channelBonding: string;
    channelUtilization: string;
    channels: string[];
    coexistence: string;
    darrp: string;
    drma: string;
    drmaSensitivity: string;
    dtim: number;
    fragThreshold: number;
    frequencyHandoff?: string;
    iperfProtocol?: string;
    iperfServerPort?: number;
    maxClients?: number;
    maxDistance?: number;
    mimoMode: string;
    mode: string;
    n80211d: string;
    optionalAntenna: string;
    optionalAntennaGain: string;
    powerLevel: number;
    powerMode: string;
    powerValue: number;
    powersaveOptimizes: string[];
    protectionMode: string;
    radioId: number;
    rtsThreshold: number;
    samBssid?: string;
    samCaCertificate?: string;
    samCaptivePortal?: string;
    samClientCertificate?: string;
    samCwpFailureString?: string;
    samCwpMatchString?: string;
    samCwpPasswords: string[];
    samCwpSuccessString?: string;
    samCwpTestUrl?: string;
    samCwpUsername?: string;
    samEapMethod: string;
    samPasswords: string[];
    samPrivateKey?: string;
    samPrivateKeyPasswords: string[];
    samReportIntv?: number;
    samSecurityType?: string;
    samServer?: string;
    samServerFqdn?: string;
    samServerIp?: string;
    samServerType?: string;
    samSsid?: string;
    samTest?: string;
    samUsername?: string;
    shortGuardInterval: string;
    spectrumAnalysis: string;
    transmitOptimizes: string[];
    vap1?: string;
    vap2?: string;
    vap3?: string;
    vap4?: string;
    vap5?: string;
    vap6?: string;
    vap7?: string;
    vap8?: string;
    vapAll: string;
    vaps?: string;
    widsProfile?: string;
    zeroWaitDfs: string;
}

export interface ObjectWirelesscontrollerWtpprofileRadio2 {
    airtimeFairness: string;
    amsdu: string;
    apHandoff?: string;
    apSnifferAddr: string;
    apSnifferBufsize?: number;
    apSnifferChan?: number;
    apSnifferCtl: string;
    apSnifferData: string;
    apSnifferMgmtBeacon: string;
    apSnifferMgmtOther: string;
    apSnifferMgmtProbe: string;
    arrpProfile?: string;
    autoPowerHigh?: number;
    autoPowerLevel: string;
    autoPowerLow?: number;
    autoPowerTarget: string;
    band?: string;
    band5gType: string;
    bandwidthAdmissionControl: string;
    bandwidthCapacity: number;
    beaconInterval: number;
    bssColor?: number;
    bssColorMode: string;
    callAdmissionControl: string;
    callCapacity: number;
    channelBonding: string;
    channelUtilization: string;
    channels: string[];
    coexistence: string;
    darrp: string;
    drma: string;
    drmaSensitivity: string;
    dtim: number;
    fragThreshold: number;
    frequencyHandoff?: string;
    iperfProtocol?: string;
    iperfServerPort?: number;
    maxClients?: number;
    maxDistance?: number;
    mimoMode: string;
    mode: string;
    n80211d: string;
    optionalAntenna: string;
    optionalAntennaGain: string;
    powerLevel: number;
    powerMode: string;
    powerValue: number;
    powersaveOptimizes: string[];
    protectionMode: string;
    radioId: number;
    rtsThreshold: number;
    samBssid?: string;
    samCaCertificate?: string;
    samCaptivePortal?: string;
    samClientCertificate?: string;
    samCwpFailureString?: string;
    samCwpMatchString?: string;
    samCwpPasswords: string[];
    samCwpSuccessString?: string;
    samCwpTestUrl?: string;
    samCwpUsername?: string;
    samEapMethod: string;
    samPasswords: string[];
    samPrivateKey?: string;
    samPrivateKeyPasswords: string[];
    samReportIntv?: number;
    samSecurityType?: string;
    samServer?: string;
    samServerFqdn?: string;
    samServerIp?: string;
    samServerType?: string;
    samSsid?: string;
    samTest?: string;
    samUsername?: string;
    shortGuardInterval: string;
    spectrumAnalysis: string;
    transmitOptimizes: string[];
    vap1?: string;
    vap2?: string;
    vap3?: string;
    vap4?: string;
    vap5?: string;
    vap6?: string;
    vap7?: string;
    vap8?: string;
    vapAll: string;
    vaps?: string;
    widsProfile?: string;
    zeroWaitDfs: string;
}

export interface ObjectWirelesscontrollerWtpprofileRadio3 {
    airtimeFairness?: string;
    amsdu?: string;
    apHandoff?: string;
    apSnifferAddr?: string;
    apSnifferBufsize?: number;
    apSnifferChan?: number;
    apSnifferCtl?: string;
    apSnifferData?: string;
    apSnifferMgmtBeacon?: string;
    apSnifferMgmtOther?: string;
    apSnifferMgmtProbe?: string;
    arrpProfile?: string;
    autoPowerHigh?: number;
    autoPowerLevel?: string;
    autoPowerLow?: number;
    autoPowerTarget?: string;
    band?: string;
    band5gType?: string;
    bandwidthAdmissionControl?: string;
    bandwidthCapacity?: number;
    beaconInterval?: number;
    bssColor?: number;
    bssColorMode?: string;
    callAdmissionControl?: string;
    callCapacity?: number;
    channelBonding?: string;
    channelUtilization?: string;
    channels: string[];
    coexistence?: string;
    darrp?: string;
    drma?: string;
    drmaSensitivity?: string;
    dtim?: number;
    fragThreshold?: number;
    frequencyHandoff?: string;
    iperfProtocol?: string;
    iperfServerPort?: number;
    maxClients?: number;
    maxDistance?: number;
    mimoMode?: string;
    mode?: string;
    n80211d?: string;
    optionalAntenna?: string;
    optionalAntennaGain?: string;
    powerLevel?: number;
    powerMode?: string;
    powerValue?: number;
    powersaveOptimizes: string[];
    protectionMode?: string;
    radioId?: number;
    rtsThreshold?: number;
    samBssid?: string;
    samCaCertificate?: string;
    samCaptivePortal?: string;
    samClientCertificate?: string;
    samCwpFailureString?: string;
    samCwpMatchString?: string;
    samCwpPasswords: string[];
    samCwpSuccessString?: string;
    samCwpTestUrl?: string;
    samCwpUsername?: string;
    samEapMethod?: string;
    samPasswords: string[];
    samPrivateKey?: string;
    samPrivateKeyPasswords: string[];
    samReportIntv?: number;
    samSecurityType?: string;
    samServer?: string;
    samServerFqdn?: string;
    samServerIp?: string;
    samServerType?: string;
    samSsid?: string;
    samTest?: string;
    samUsername?: string;
    shortGuardInterval?: string;
    spectrumAnalysis?: string;
    transmitOptimizes: string[];
    vap1?: string;
    vap2?: string;
    vap3?: string;
    vap4?: string;
    vap5?: string;
    vap6?: string;
    vap7?: string;
    vap8?: string;
    vapAll?: string;
    vaps?: string;
    widsProfile?: string;
    zeroWaitDfs?: string;
}

export interface ObjectWirelesscontrollerWtpprofileRadio4 {
    airtimeFairness?: string;
    amsdu?: string;
    apHandoff?: string;
    apSnifferAddr?: string;
    apSnifferBufsize?: number;
    apSnifferChan?: number;
    apSnifferCtl?: string;
    apSnifferData?: string;
    apSnifferMgmtBeacon?: string;
    apSnifferMgmtOther?: string;
    apSnifferMgmtProbe?: string;
    arrpProfile?: string;
    autoPowerHigh?: number;
    autoPowerLevel?: string;
    autoPowerLow?: number;
    autoPowerTarget?: string;
    band?: string;
    band5gType?: string;
    bandwidthAdmissionControl?: string;
    bandwidthCapacity?: number;
    beaconInterval?: number;
    bssColor?: number;
    bssColorMode?: string;
    callAdmissionControl?: string;
    callCapacity?: number;
    channelBonding?: string;
    channelUtilization?: string;
    channels: string[];
    coexistence?: string;
    darrp?: string;
    drma?: string;
    drmaSensitivity?: string;
    dtim?: number;
    fragThreshold?: number;
    frequencyHandoff?: string;
    iperfProtocol?: string;
    iperfServerPort?: number;
    maxClients?: number;
    maxDistance?: number;
    mimoMode?: string;
    mode?: string;
    n80211d?: string;
    optionalAntenna?: string;
    optionalAntennaGain?: string;
    powerLevel?: number;
    powerMode?: string;
    powerValue?: number;
    powersaveOptimizes: string[];
    protectionMode?: string;
    radioId?: number;
    rtsThreshold?: number;
    samBssid?: string;
    samCaCertificate?: string;
    samCaptivePortal?: string;
    samClientCertificate?: string;
    samCwpFailureString?: string;
    samCwpMatchString?: string;
    samCwpPasswords: string[];
    samCwpSuccessString?: string;
    samCwpTestUrl?: string;
    samCwpUsername?: string;
    samEapMethod?: string;
    samPasswords: string[];
    samPrivateKey?: string;
    samPrivateKeyPasswords: string[];
    samReportIntv?: number;
    samSecurityType?: string;
    samServer?: string;
    samServerFqdn?: string;
    samServerIp?: string;
    samServerType?: string;
    samSsid?: string;
    samTest?: string;
    samUsername?: string;
    shortGuardInterval?: string;
    spectrumAnalysis?: string;
    transmitOptimizes: string[];
    vap1?: string;
    vap2?: string;
    vap3?: string;
    vap4?: string;
    vap5?: string;
    vap6?: string;
    vap7?: string;
    vap8?: string;
    vapAll?: string;
    vaps?: string;
    widsProfile?: string;
    zeroWaitDfs?: string;
}

export interface ObjectWirelesscontrollerWtpprofileSplitTunnelingAcl {
    destIp: string;
    id?: number;
}

export interface PackagesFirewallDospolicy6Anomaly {
    action: string;
    log: string;
    name?: string;
    quarantine: string;
    quarantineExpiry?: string;
    quarantineLog?: string;
    status: string;
    synproxyTcpMss?: string;
    synproxyTcpSack?: string;
    synproxyTcpTimestamp?: string;
    synproxyTcpWindow?: string;
    synproxyTcpWindowscale?: string;
    synproxyTos?: string;
    synproxyTtl?: string;
    threshold?: number;
    thresholddefault?: number;
}

export interface PackagesFirewallDospolicyAnomaly {
    action: string;
    log: string;
    name?: string;
    quarantine: string;
    quarantineExpiry?: string;
    quarantineLog?: string;
    status: string;
    synproxyTcpMss?: string;
    synproxyTcpSack?: string;
    synproxyTcpTimestamp?: string;
    synproxyTcpWindow?: string;
    synproxyTcpWindowscale?: string;
    synproxyTos?: string;
    synproxyTtl?: string;
    threshold?: number;
    thresholddefault?: number;
}

export interface PackagesFirewallPolicyVpnDstNode {
    host?: string;
    seq?: number;
    subnet?: string;
}

export interface PackagesFirewallPolicyVpnSrcNode {
    host?: string;
    seq?: number;
    subnet?: string;
}

export interface PackagesPblockPackagesettings {
    centralNat?: string;
    consolidatedFirewallMode?: string;
    fwpolicy6ImplicitLog?: string;
    fwpolicyImplicitLog?: string;
    inspectionMode?: string;
    ngfwMode?: string;
    policyOffloadLevel?: string;
    sslSshProfile?: string;
}

export interface PackagesPkgPackagesetting {
    centralNat: string;
    consolidatedFirewallMode: string;
    fwpolicy6ImplicitLog: string;
    fwpolicyImplicitLog: string;
    inspectionMode?: string;
    ngfwMode: string;
    sslSshProfile?: string;
}

export interface PackagesPkgPackagesettings {
    centralNat: string;
    consolidatedFirewallMode: string;
    fwpolicy6ImplicitLog: string;
    fwpolicyImplicitLog: string;
    inspectionMode: string;
    ngfwMode: string;
    policyOffloadLevel: string;
    sslSshProfile?: string;
}

export interface PackagesPkgScopemember {
    name?: string;
    vdom?: string;
}

export interface SecurityconsoleAssignPackageTarget {
    adom?: string;
    excluded: string;
    pkg?: string;
}

export interface SecurityconsoleInstallDeviceScope {
    name?: string;
    vdom?: string;
}

export interface SecurityconsoleInstallObjectsV2Scope {
    name?: string;
    vdom?: string;
}

export interface SecurityconsoleInstallPackageScope {
    name?: string;
    vdom?: string;
}

export interface SecurityconsolePackageCloneScope {
    name?: string;
    vdom?: string;
}

export interface SecurityconsolePackageCommitScope {
    name?: string;
    vdom?: string;
}

export interface SecurityconsoleReinstallPackageTarget {
    pkg?: string;
    scopes?: outputs.SecurityconsoleReinstallPackageTargetScope[];
}

export interface SecurityconsoleReinstallPackageTargetScope {
    name?: string;
    vdom?: string;
}

export interface SecurityconsoleSignCertificateTemplateScope {
    name?: string;
    vdom?: string;
}

export interface SecurityconsoleTemplateCliPreviewScope {
    name?: string;
    vdom?: string;
}

export interface SystemAdminGroupMember {
    name?: string;
}

export interface SystemAdminLdapFmgadom {
    adomName: string;
}

export interface SystemAdminProfileDatamaskCustomField {
    fieldCategories: string[];
    fieldName?: string;
    fieldStatus: string;
    fieldType: string;
}

export interface SystemAdminProfileWritePasswdProfile {
    profileid?: string;
}

export interface SystemAdminProfileWritePasswdUserList {
    userid?: string;
}

export interface SystemAdminUserAdomExclude {
    adomName?: string;
}

export interface SystemAdminUserAppFilter {
    appFilterName?: string;
}

export interface SystemAdminUserDashboard {
    column?: number;
    diskioContentType: string;
    diskioPeriod: string;
    logRatePeriod?: string;
    logRateTopn: string;
    logRateType: string;
    moduleid?: number;
    name?: string;
    numEntries: number;
    refreshInterval: number;
    resCpuDisplay: string;
    resPeriod: string;
    resViewType: string;
    status: string;
    tabid?: number;
    timePeriod: string;
    widgetType?: string;
}

export interface SystemAdminUserDashboardTab {
    name?: string;
    tabid?: number;
}

export interface SystemAdminUserFmgadom {
    adomName?: string;
}

export interface SystemAdminUserIpsFilter {
    ipsFilterName?: string;
}

export interface SystemAdminUserMetaData {
    fieldlength?: number;
    fieldname?: string;
    fieldvalue?: string;
    importance: string;
    status: string;
}

export interface SystemAdminUserPolicyPackage {
    policyPackageName?: string;
}

export interface SystemAdminUserWebFilter {
    webFilterName?: string;
}

export interface SystemAlerteventAlertDestination {
    from?: string;
    smtpName?: string;
    snmpName?: string;
    syslogName?: string;
    to?: string;
    type: string;
}

export interface SystemAutodeleteDlpFilesAutoDeletion {
    retention: string;
    runat: number;
    status: string;
    value: number;
}

export interface SystemAutodeleteLogAutoDeletion {
    retention: string;
    runat: number;
    status: string;
    value: number;
}

export interface SystemAutodeleteQuarantineFilesAutoDeletion {
    retention: string;
    runat: number;
    status: string;
    value: number;
}

export interface SystemAutodeleteReportAutoDeletion {
    retention: string;
    runat: number;
    status: string;
    value: number;
}

export interface SystemCsfFabricConnector {
    accprofile?: string;
    configurationWriteAccess: string;
    serial?: string;
}

export interface SystemCsfTrustedList {
    action: string;
    authorizationType: string;
    certificate?: string;
    downstreamAuthorization: string;
    haMembers?: string;
    index: number;
    name?: string;
    serial?: string;
}

export interface SystemGlobalMcPolicyDisabledAdom {
    adomName?: string;
}

export interface SystemGlobalSslCipherSuite {
    cipher?: string;
    priority?: number;
    version: string;
}

export interface SystemHaMonitoredInterface {
    interfaceName?: string;
}

export interface SystemHaMonitoredIp {
    id?: number;
    interface?: string;
    ip?: string;
}

export interface SystemHaPeer {
    id?: number;
    ip: string;
    ip6: string;
    serialNumber?: string;
    status: string;
}

export interface SystemInterfaceIpv6 {
    ip6Address: string;
    ip6Allowaccesses: string[];
    ip6Autoconf: string;
}

export interface SystemInterfaceMember {
    interfaceName?: string;
}

export interface SystemLogRatelimitDevice {
    device?: string;
    filterType: string;
    id?: number;
    ratelimit?: number;
}

export interface SystemLogRatelimitRatelimit {
    filter?: string;
    filterType: string;
    id?: number;
    ratelimit?: number;
}

export interface SystemLogSettingsRollingAnalyzer {
    days: string[];
    delFiles: string;
    directory?: string;
    fileSize: number;
    gzipFormat: string;
    hour?: number;
    ip: string;
    ip2: string;
    ip3: string;
    logFormat: string;
    min?: number;
    password2s: string[];
    password3s: string[];
    passwords: string[];
    port?: number;
    port2?: number;
    port3?: number;
    rollingUpgradeStatus?: number;
    server?: string;
    server2?: string;
    server3?: string;
    serverType: string;
    upload: string;
    uploadHour?: number;
    uploadMode: string;
    uploadTrigger: string;
    username?: string;
    username2?: string;
    username3?: string;
    when: string;
}

export interface SystemLogSettingsRollingLocal {
    days: string[];
    delFiles: string;
    directory?: string;
    fileSize: number;
    gzipFormat: string;
    hour?: number;
    ip: string;
    ip2: string;
    ip3: string;
    logFormat: string;
    min?: number;
    password2s: string[];
    password3s: string[];
    passwords: string[];
    port?: number;
    port2?: number;
    port3?: number;
    rollingUpgradeStatus?: number;
    server?: string;
    server2?: string;
    server3?: string;
    serverType: string;
    upload: string;
    uploadHour?: number;
    uploadMode: string;
    uploadTrigger: string;
    username?: string;
    username2?: string;
    username3?: string;
    when: string;
}

export interface SystemLogSettingsRollingRegular {
    days: string[];
    delFiles: string;
    directory?: string;
    fileSize: number;
    gzipFormat: string;
    hour?: number;
    ip: string;
    ip2: string;
    ip3: string;
    logFormat: string;
    min?: number;
    password2s: string[];
    password3s: string[];
    passwords: string[];
    port?: number;
    port2?: number;
    port3?: number;
    rollingUpgradeStatus?: number;
    server?: string;
    server2?: string;
    server3?: string;
    serverType: string;
    upload: string;
    uploadHour?: number;
    uploadMode: string;
    uploadTrigger: string;
    username?: string;
    username2?: string;
    username3?: string;
    when: string;
}

export interface SystemLogfetchClientprofileDeviceFilter {
    adom: string;
    device: string;
    id?: number;
    vdom: string;
}

export interface SystemLogfetchClientprofileLogFilter {
    field?: string;
    id?: number;
    oper: string;
    value?: string;
}

export interface SystemNtpNtpserver {
    authentication: string;
    id: number;
    keyId?: number;
    keys: string[];
    maxpoll: number;
    minpoll: number;
    ntpv3: string;
    server?: string;
}

export interface SystemSamlFabricIdp {
    devId?: string;
    idpCert?: string;
    idpEntityId?: string;
    idpSingleLogoutUrl?: string;
    idpSingleSignOnUrl?: string;
    idpStatus: string;
}

export interface SystemSamlServiceProvider {
    idpEntityId?: string;
    idpSingleLogoutUrl?: string;
    idpSingleSignOnUrl?: string;
    name?: string;
    prefix?: string;
    spAdom?: string;
    spCert?: string;
    spEntityId?: string;
    spProfile?: string;
    spSingleLogoutUrl?: string;
    spSingleSignOnUrl?: string;
}

export interface SystemSnmpCommunityHost {
    id?: number;
    interface?: string;
    ip: string;
}

export interface SystemSnmpCommunityHosts6 {
    id?: number;
    interface?: string;
    ip: string;
}

export interface SystemSocfabricTrustedList {
    id?: number;
    serial?: string;
}

export interface SystemSqlCustomIndex {
    caseSensitive: string;
    deviceType: string;
    id?: number;
    indexField?: string;
    logType: string;
}

export interface SystemSqlCustomSkipidx {
    deviceType: string;
    id?: number;
    indexField?: string;
    logType: string;
}

export interface SystemSqlTsIndexField {
    category?: string;
    value?: string;
}

export interface SystemTemplateScopemember {
    name?: string;
    vdom?: string;
}

export interface SystemWorkflowApprovalmatrixApprover {
    member?: string;
    seqNum?: number;
}

export interface SystempLogSyslogdFilterExcludeList {
    category?: string;
    fields?: outputs.SystempLogSyslogdFilterExcludeListField[];
    id?: number;
}

export interface SystempLogSyslogdFilterExcludeListField {
    args: string[];
    field?: string;
    negate?: string;
}

export interface SystempLogSyslogdFilterFreeStyle {
    category: string;
    filter?: string;
    filterType: string;
    id?: number;
}

export interface SystempLogSyslogdSettingCustomFieldName {
    custom?: string;
    id?: number;
    name?: string;
}

export interface SystempSystemCentralmanagementServerList {
    addrType: string;
    fqdn?: string;
    id?: number;
    serverAddress: string;
    serverAddress6: string;
    serverTypes: string[];
}

export interface SystempSystemNtpNtpserver {
    authentication?: string;
    id?: number;
    interface?: string;
    interfaceSelectMethod?: string;
    ipType?: string;
    keyId?: number;
    keyType?: string;
    keys: string[];
    ntpv3: string;
    server?: string;
}

export interface WanTemplateScopemember {
    name?: string;
    vdom?: string;
}

export interface WantempSystemSdwanDuplication {
    dstaddr?: string;
    dstaddr6?: string;
    dstintf?: string;
    id?: number;
    packetDeDuplication: string;
    packetDuplication: string;
    service?: string;
    serviceId?: string;
    slaMatchService: string;
    srcaddr?: string;
    srcaddr6?: string;
    srcintf?: string;
}

export interface WantempSystemSdwanHealthCheck {
    _dynamicServer?: string;
    addrMode?: string;
    classId?: string;
    detectMode: string;
    diffservcode: string;
    dnsMatchIp: string;
    dnsRequestDomain: string;
    embedMeasuredHealth: string;
    failtime: number;
    ftpFile?: string;
    ftpMode: string;
    haPriority: number;
    httpAgent: string;
    httpGet?: string;
    httpMatch?: string;
    interval: number;
    members: string[];
    mosCodec: string;
    name?: string;
    packetSize?: number;
    passwords: string[];
    port?: number;
    probeCount: number;
    probePackets: string;
    probeTimeout: number;
    protocol: string;
    qualityMeasuredMethod: string;
    recoverytime: number;
    securityMode?: string;
    servers: string[];
    slaFailLogPeriod?: number;
    slaIdRedistribute?: number;
    slaPassLogPeriod?: number;
    slas?: outputs.WantempSystemSdwanHealthCheckSla[];
    source: string;
    source6: string;
    systemDns: string;
    thresholdAlertJitter?: number;
    thresholdAlertLatency?: number;
    thresholdAlertPacketloss?: number;
    thresholdWarningJitter?: number;
    thresholdWarningLatency?: number;
    thresholdWarningPacketloss?: number;
    updateCascadeInterface: string;
    updateStaticRoute: string;
    user?: string;
    vrf?: number;
}

export interface WantempSystemSdwanHealthCheckSla {
    id?: number;
    jitterThreshold: number;
    latencyThreshold: number;
    linkCostFactors: string[];
    mosThreshold: string;
    packetlossThreshold?: number;
    priorityInSla?: number;
    priorityOutSla?: number;
}

export interface WantempSystemSdwanHealthcheckSla {
    id?: number;
    jitterThreshold: number;
    latencyThreshold: number;
    linkCostFactors: string[];
    mosThreshold: string;
    packetlossThreshold?: number;
    priorityInSla?: number;
    priorityOutSla?: number;
}

export interface WantempSystemSdwanMember {
    _dynamicMember?: string;
    comment?: string;
    cost: string;
    gateway: string;
    gateway6: string;
    ingressSpilloverThreshold?: number;
    interface?: string;
    preferredSource: string;
    priority: number;
    priority6: number;
    seqNum?: number;
    source: string;
    source6: string;
    spilloverThreshold?: number;
    status: string;
    transportGroup?: number;
    volumeRatio: number;
    weight: number;
    zone: string;
}

export interface WantempSystemSdwanNeighbor {
    healthCheck?: string;
    ip?: string;
    member?: string;
    minimumSlaMeetMembers: number;
    mode: string;
    role: string;
    serviceId?: string;
    slaId?: number;
}

export interface WantempSystemSdwanService {
    addrMode: string;
    agentExclusive: string;
    bandwidthWeight?: number;
    default: string;
    dscpForward: string;
    dscpForwardTag?: string;
    dscpReverse: string;
    dscpReverseTag?: string;
    dst?: string;
    dst6?: string;
    dstNegate: string;
    endPort: number;
    endSrcPort: number;
    gateway: string;
    groups?: string;
    hashMode?: string;
    healthCheck?: string;
    holdDownTime?: number;
    id?: number;
    inputDevice?: string;
    inputDeviceNegate: string;
    inputZones: string[];
    internetService: string;
    internetServiceAppCtrlCategories: number[];
    internetServiceAppCtrlGroup?: string;
    internetServiceAppCtrls: number[];
    internetServiceCustom?: string;
    internetServiceCustomGroup?: string;
    internetServiceGroup?: string;
    internetServiceName?: string;
    jitterWeight?: number;
    latencyWeight?: number;
    linkCostFactor?: string;
    linkCostThreshold: number;
    loadBalance: string;
    minimumSlaMeetMembers?: number;
    mode: string;
    name?: string;
    packetLossWeight?: number;
    passiveMeasurement: string;
    priorityMembers?: string;
    priorityZone?: string;
    protocol?: number;
    qualityLink?: number;
    role: string;
    routeTag?: number;
    shortcut: string;
    shortcutPriority: string;
    shortcutStickiness: string;
    slaCompareMethod?: string;
    slaStickiness: string;
    slas?: outputs.WantempSystemSdwanServiceSla[];
    src?: string;
    src6?: string;
    srcNegate: string;
    standaloneAction: string;
    startPort: number;
    startSrcPort: number;
    status: string;
    tieBreak: string;
    tos: string;
    tosMask: string;
    useShortcutSla: string;
    users?: string;
    zoneMode: string;
}

export interface WantempSystemSdwanServiceSla {
    healthCheck?: string;
    id?: number;
}

export interface WantempSystemSdwanZone {
    advpnHealthCheck?: string;
    advpnSelect: string;
    minimumSlaMeetMembers: number;
    name?: string;
    serviceSlaTieBreak?: string;
}

export interface WantempSystemVirtualwanlinkHealthCheck {
    _dynamicServer?: string;
    addrMode?: string;
    diffservcode?: string;
    failtime?: number;
    haPriority?: number;
    httpAgent?: string;
    httpGet?: string;
    httpMatch?: string;
    internetServiceId?: string;
    interval?: number;
    members?: string;
    name?: string;
    packetSize?: number;
    passwords: string[];
    port?: number;
    probePackets?: string;
    probeTimeout?: number;
    protocol?: string;
    recoverytime?: number;
    securityMode?: string;
    servers: string[];
    slaFailLogPeriod?: number;
    slaPassLogPeriod?: number;
    slas?: outputs.WantempSystemVirtualwanlinkHealthCheckSla[];
    thresholdAlertJitter?: number;
    thresholdAlertLatency?: number;
    thresholdAlertPacketloss?: number;
    thresholdWarningJitter?: number;
    thresholdWarningLatency?: number;
    thresholdWarningPacketloss?: number;
    updateCascadeInterface?: string;
    updateStaticRoute?: string;
}

export interface WantempSystemVirtualwanlinkHealthCheckSla {
    id?: number;
    jitterThreshold?: number;
    latencyThreshold?: number;
    linkCostFactors: string[];
    packetlossThreshold?: number;
}

export interface WantempSystemVirtualwanlinkHealthcheckSla {
    id?: number;
    jitterThreshold?: number;
    latencyThreshold?: number;
    linkCostFactors: string[];
    packetlossThreshold?: number;
}

export interface WantempSystemVirtualwanlinkMember {
    _dynamicMember?: string;
    comment?: string;
    cost?: string;
    gateway?: string;
    gateway6?: string;
    ingressSpilloverThreshold?: number;
    interface?: string;
    priority?: number;
    seqNum?: number;
    source?: string;
    source6?: string;
    spilloverThreshold?: number;
    status?: string;
    volumeRatio?: number;
    weight?: number;
}

export interface WantempSystemVirtualwanlinkNeighbor {
    healthCheck?: string;
    ip?: string;
    member?: string;
    role?: string;
    slaId?: number;
}

export interface WantempSystemVirtualwanlinkService {
    addrMode?: string;
    bandwidthWeight?: number;
    default?: string;
    dscpForward?: string;
    dscpForwardTag?: string;
    dscpReverse?: string;
    dscpReverseTag?: string;
    dst?: string;
    dst6?: string;
    dstNegate?: string;
    endPort?: number;
    gateway?: string;
    groups?: string;
    healthCheck?: string;
    holdDownTime?: number;
    id?: number;
    inputDevice?: string;
    inputDeviceNegate?: string;
    internetService?: string;
    internetServiceAppCtrlGroup?: string;
    internetServiceAppCtrls: number[];
    internetServiceCtrlGroup?: string;
    internetServiceCtrls: number[];
    internetServiceCustom?: string;
    internetServiceCustomGroup?: string;
    internetServiceGroup?: string;
    internetServiceId?: string;
    jitterWeight?: number;
    latencyWeight?: number;
    linkCostFactor?: string;
    linkCostThreshold?: number;
    member?: string;
    mode?: string;
    name?: string;
    packetLossWeight?: number;
    priorityMembers?: string;
    protocol?: number;
    qualityLink?: number;
    role?: string;
    routeTag?: number;
    slaCompareMethod?: string;
    slas?: outputs.WantempSystemVirtualwanlinkServiceSla[];
    src?: string;
    src6?: string;
    srcNegate?: string;
    standaloneAction?: string;
    startPort?: number;
    status?: string;
    tos?: string;
    tosMask?: string;
    users?: string;
}

export interface WantempSystemVirtualwanlinkServiceSla {
    healthCheck?: string;
    id?: number;
}

