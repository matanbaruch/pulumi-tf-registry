// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface DvmCmdAddDeviceDevice {
    admPass?: pulumi.Input<string>;
    admUsr?: pulumi.Input<string>;
    authorizationtemplate?: pulumi.Input<string>;
    desc?: pulumi.Input<string>;
    deviceaction?: pulumi.Input<string>;
    deviceblueprint?: pulumi.Input<string>;
    fazquota?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    metafields?: pulumi.Input<string>;
    metafieldsMap?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    mgmtMode?: pulumi.Input<string>;
    mr?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    osType?: pulumi.Input<string>;
    osVer?: pulumi.Input<string>;
    patch?: pulumi.Input<number>;
    platformStr?: pulumi.Input<string>;
    sn?: pulumi.Input<string>;
}

export interface DvmCmdAddDeviceGroup {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface DvmCmdAddDevlistAddDevList {
    admPasses?: pulumi.Input<pulumi.Input<string>[]>;
    admUsr?: pulumi.Input<string>;
    authorizationtemplate?: pulumi.Input<string>;
    desc?: pulumi.Input<string>;
    deviceaction?: pulumi.Input<string>;
    deviceblueprint?: pulumi.Input<string>;
    fazquota?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    metafields?: pulumi.Input<string>;
    mgmtMode?: pulumi.Input<string>;
    mr?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    osType?: pulumi.Input<string>;
    osVer?: pulumi.Input<string>;
    patch?: pulumi.Input<number>;
    platformStr?: pulumi.Input<string>;
    sn?: pulumi.Input<string>;
}

export interface DvmCmdDelDevlistDelDevMemberList {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface DvmCmdUpdateDevlistUpdateDevMemberList {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface DvmdbScriptExecuteScope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface DvmdbScriptScriptSchedule {
    datetime?: pulumi.Input<string>;
    dayOfWeek?: pulumi.Input<string>;
    device?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    runOnDb?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface FmupdateFdssettingPushOverride {
    ip?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface FmupdateFdssettingPushOverrideToClient {
    announceIps?: pulumi.Input<pulumi.Input<inputs.FmupdateFdssettingPushOverrideToClientAnnounceIp>[]>;
    status?: pulumi.Input<string>;
}

export interface FmupdateFdssettingPushOverrideToClientAnnounceIp {
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
}

export interface FmupdateFdssettingPushoverridetoclientAnnounceIp {
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
}

export interface FmupdateFdssettingServerOverride {
    servlists?: pulumi.Input<pulumi.Input<inputs.FmupdateFdssettingServerOverrideServlist>[]>;
    status?: pulumi.Input<string>;
}

export interface FmupdateFdssettingServerOverrideServlist {
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    ip6?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    serviceType?: pulumi.Input<string>;
}

export interface FmupdateFdssettingServeroverrideServlist {
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    ip6?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    serviceType?: pulumi.Input<string>;
}

export interface FmupdateFdssettingUpdateSchedule {
    day?: pulumi.Input<string>;
    frequency?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    times?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FmupdateFwmsettingUpgradeTimeout {
    checkStatusTimeout?: pulumi.Input<number>;
    ctrlCheckStatusTimeout?: pulumi.Input<number>;
    ctrlPutImageByFdsTimeout?: pulumi.Input<number>;
    haSyncTimeout?: pulumi.Input<number>;
    healthCheckTimeout?: pulumi.Input<number>;
    licenseCheckTimeout?: pulumi.Input<number>;
    prepareImageTimeout?: pulumi.Input<number>;
    putImageByFdsTimeout?: pulumi.Input<number>;
    putImageTimeout?: pulumi.Input<number>;
    rebootOfFsckTimeout?: pulumi.Input<number>;
    rebootOfUpgradeTimeout?: pulumi.Input<number>;
    retrieveTimeout?: pulumi.Input<number>;
    rpcTimeout?: pulumi.Input<number>;
    totalTimeout?: pulumi.Input<number>;
}

export interface FmupdateServeraccessprioritiesPrivateServer {
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    ip6?: pulumi.Input<string>;
    timeZone?: pulumi.Input<number>;
}

export interface FmupdateWebspamFgdsettingServerOverride {
    servlists?: pulumi.Input<pulumi.Input<inputs.FmupdateWebspamFgdsettingServerOverrideServlist>[]>;
    status?: pulumi.Input<string>;
}

export interface FmupdateWebspamFgdsettingServerOverrideServlist {
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    ip6?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    serviceType?: pulumi.Input<string>;
}

export interface ObjectAntivirusMmschecksumEntry {
    checksum?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectAntivirusNotificationEntry {
    name?: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectAntivirusProfileCifs {
    archiveBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    archiveLogs?: pulumi.Input<pulumi.Input<string>[]>;
    avScan?: pulumi.Input<string>;
    emulator?: pulumi.Input<string>;
    externalBlocklist?: pulumi.Input<string>;
    fortiai?: pulumi.Input<string>;
    fortindr?: pulumi.Input<string>;
    fortisandbox?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<string>[]>;
    outbreakPrevention?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
}

export interface ObjectAntivirusProfileContentDisarm {
    coverPage?: pulumi.Input<string>;
    detectOnly?: pulumi.Input<string>;
    errorAction?: pulumi.Input<string>;
    officeAction?: pulumi.Input<string>;
    officeDde?: pulumi.Input<string>;
    officeEmbed?: pulumi.Input<string>;
    officeHylink?: pulumi.Input<string>;
    officeLinked?: pulumi.Input<string>;
    officeMacro?: pulumi.Input<string>;
    originalFileDestination?: pulumi.Input<string>;
    pdfActForm?: pulumi.Input<string>;
    pdfActGotor?: pulumi.Input<string>;
    pdfActJava?: pulumi.Input<string>;
    pdfActLaunch?: pulumi.Input<string>;
    pdfActMovie?: pulumi.Input<string>;
    pdfActSound?: pulumi.Input<string>;
    pdfEmbedfile?: pulumi.Input<string>;
    pdfHyperlink?: pulumi.Input<string>;
    pdfJavacode?: pulumi.Input<string>;
}

export interface ObjectAntivirusProfileFtp {
    archiveBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    archiveLogs?: pulumi.Input<pulumi.Input<string>[]>;
    avScan?: pulumi.Input<string>;
    emulator?: pulumi.Input<string>;
    externalBlocklist?: pulumi.Input<string>;
    fortiai?: pulumi.Input<string>;
    fortindr?: pulumi.Input<string>;
    fortisandbox?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<string>[]>;
    outbreakPrevention?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
}

export interface ObjectAntivirusProfileHttp {
    archiveBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    archiveLogs?: pulumi.Input<pulumi.Input<string>[]>;
    avOptimize?: pulumi.Input<string>;
    avScan?: pulumi.Input<string>;
    contentDisarm?: pulumi.Input<string>;
    emulator?: pulumi.Input<string>;
    externalBlocklist?: pulumi.Input<string>;
    fortiai?: pulumi.Input<string>;
    fortindr?: pulumi.Input<string>;
    fortisandbox?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<string>[]>;
    outbreakPrevention?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
    unknownContentEncoding?: pulumi.Input<string>;
}

export interface ObjectAntivirusProfileImap {
    archiveBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    archiveLogs?: pulumi.Input<pulumi.Input<string>[]>;
    avScan?: pulumi.Input<string>;
    contentDisarm?: pulumi.Input<string>;
    emulator?: pulumi.Input<string>;
    executables?: pulumi.Input<string>;
    externalBlocklist?: pulumi.Input<string>;
    fortiai?: pulumi.Input<string>;
    fortindr?: pulumi.Input<string>;
    fortisandbox?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<string>[]>;
    outbreakPrevention?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
}

export interface ObjectAntivirusProfileMapi {
    archiveBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    archiveLogs?: pulumi.Input<pulumi.Input<string>[]>;
    avScan?: pulumi.Input<string>;
    emulator?: pulumi.Input<string>;
    executables?: pulumi.Input<string>;
    externalBlocklist?: pulumi.Input<string>;
    fortiai?: pulumi.Input<string>;
    fortindr?: pulumi.Input<string>;
    fortisandbox?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<string>[]>;
    outbreakPrevention?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
}

export interface ObjectAntivirusProfileNacQuar {
    expiry?: pulumi.Input<string>;
    infected?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
}

export interface ObjectAntivirusProfileNntp {
    archiveBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    archiveLogs?: pulumi.Input<pulumi.Input<string>[]>;
    avScan?: pulumi.Input<string>;
    emulator?: pulumi.Input<string>;
    externalBlocklist?: pulumi.Input<string>;
    fortiai?: pulumi.Input<string>;
    fortindr?: pulumi.Input<string>;
    fortisandbox?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<string>[]>;
    outbreakPrevention?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
}

export interface ObjectAntivirusProfileOutbreakPrevention {
    externalBlocklist?: pulumi.Input<string>;
    ftgdService?: pulumi.Input<string>;
}

export interface ObjectAntivirusProfilePop3 {
    archiveBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    archiveLogs?: pulumi.Input<pulumi.Input<string>[]>;
    avScan?: pulumi.Input<string>;
    contentDisarm?: pulumi.Input<string>;
    emulator?: pulumi.Input<string>;
    executables?: pulumi.Input<string>;
    externalBlocklist?: pulumi.Input<string>;
    fortiai?: pulumi.Input<string>;
    fortindr?: pulumi.Input<string>;
    fortisandbox?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<string>[]>;
    outbreakPrevention?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
}

export interface ObjectAntivirusProfileSmb {
    archiveBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    archiveLogs?: pulumi.Input<pulumi.Input<string>[]>;
    emulator?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<string>[]>;
    outbreakPrevention?: pulumi.Input<string>;
}

export interface ObjectAntivirusProfileSmtp {
    archiveBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    archiveLogs?: pulumi.Input<pulumi.Input<string>[]>;
    avScan?: pulumi.Input<string>;
    contentDisarm?: pulumi.Input<string>;
    emulator?: pulumi.Input<string>;
    executables?: pulumi.Input<string>;
    externalBlocklist?: pulumi.Input<string>;
    fortiai?: pulumi.Input<string>;
    fortindr?: pulumi.Input<string>;
    fortisandbox?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<string>[]>;
    outbreakPrevention?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
}

export interface ObjectAntivirusProfileSsh {
    archiveBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    archiveLogs?: pulumi.Input<pulumi.Input<string>[]>;
    avScan?: pulumi.Input<string>;
    emulator?: pulumi.Input<string>;
    externalBlocklist?: pulumi.Input<string>;
    fortiai?: pulumi.Input<string>;
    fortindr?: pulumi.Input<string>;
    fortisandbox?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<string>[]>;
    outbreakPrevention?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
}

export interface ObjectApplicationListDefaultNetworkService {
    id?: pulumi.Input<number>;
    port?: pulumi.Input<number>;
    services?: pulumi.Input<pulumi.Input<string>[]>;
    violationAction?: pulumi.Input<string>;
}

export interface ObjectApplicationListEntriesParameter {
    id?: pulumi.Input<number>;
    members?: pulumi.Input<pulumi.Input<inputs.ObjectApplicationListEntriesParameterMember>[]>;
    value?: pulumi.Input<string>;
}

export interface ObjectApplicationListEntriesParameterMember {
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ObjectApplicationListEntriesParametersMember {
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ObjectApplicationListEntry {
    action?: pulumi.Input<string>;
    applications?: pulumi.Input<pulumi.Input<number>[]>;
    behaviors?: pulumi.Input<pulumi.Input<string>[]>;
    category?: pulumi.Input<string>;
    exclusions?: pulumi.Input<pulumi.Input<number>[]>;
    id?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
    logPacket?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.ObjectApplicationListEntryParameter>[]>;
    perIpShaper?: pulumi.Input<string>;
    popularities?: pulumi.Input<pulumi.Input<string>[]>;
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    quarantine?: pulumi.Input<string>;
    quarantineExpiry?: pulumi.Input<string>;
    quarantineLog?: pulumi.Input<string>;
    rateCount?: pulumi.Input<number>;
    rateDuration?: pulumi.Input<number>;
    rateMode?: pulumi.Input<string>;
    rateTrack?: pulumi.Input<string>;
    risks?: pulumi.Input<pulumi.Input<number>[]>;
    sessionTtl?: pulumi.Input<number>;
    shaper?: pulumi.Input<string>;
    shaperReverse?: pulumi.Input<string>;
    subCategories?: pulumi.Input<pulumi.Input<number>[]>;
    technologies?: pulumi.Input<pulumi.Input<string>[]>;
    vendors?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectApplicationListEntryParameter {
    id?: pulumi.Input<number>;
    members?: pulumi.Input<pulumi.Input<inputs.ObjectApplicationListEntryParameterMember>[]>;
    value?: pulumi.Input<string>;
}

export interface ObjectApplicationListEntryParameterMember {
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ObjectCasbProfileSaasApplication {
    accessRules?: pulumi.Input<pulumi.Input<inputs.ObjectCasbProfileSaasApplicationAccessRule>[]>;
    customControls?: pulumi.Input<pulumi.Input<inputs.ObjectCasbProfileSaasApplicationCustomControl>[]>;
    domainControl?: pulumi.Input<string>;
    domainControlDomains?: pulumi.Input<pulumi.Input<string>[]>;
    log?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    safeSearch?: pulumi.Input<string>;
    safeSearchControls?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    tenantControl?: pulumi.Input<string>;
    tenantControlTenants?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectCasbProfileSaasApplicationAccessRule {
    action?: pulumi.Input<string>;
    bypasses?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
}

export interface ObjectCasbProfileSaasApplicationCustomControl {
    name?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<inputs.ObjectCasbProfileSaasApplicationCustomControlOption>[]>;
}

export interface ObjectCasbProfileSaasApplicationCustomControlOption {
    name?: pulumi.Input<string>;
    userInputs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectCasbProfileSaasapplicationAccessRule {
    action?: pulumi.Input<string>;
    bypasses?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
}

export interface ObjectCasbProfileSaasapplicationCustomControl {
    name?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<inputs.ObjectCasbProfileSaasapplicationCustomControlOption>[]>;
}

export interface ObjectCasbProfileSaasapplicationCustomControlOption {
    name?: pulumi.Input<string>;
    userInputs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectCasbProfileSaasapplicationCustomcontrolOption {
    name?: pulumi.Input<string>;
    userInputs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectCasbUseractivityControlOption {
    name?: pulumi.Input<string>;
    operations?: pulumi.Input<pulumi.Input<inputs.ObjectCasbUseractivityControlOptionOperation>[]>;
    status?: pulumi.Input<string>;
}

export interface ObjectCasbUseractivityControlOptionOperation {
    action?: pulumi.Input<string>;
    caseSensitive?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    headerName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    searchKey?: pulumi.Input<string>;
    searchPattern?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
    valueFromInput?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectCasbUseractivityControloptionsOperation {
    action?: pulumi.Input<string>;
    caseSensitive?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    headerName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    searchKey?: pulumi.Input<string>;
    searchPattern?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
    valueFromInput?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectCasbUseractivityMatch {
    id?: pulumi.Input<number>;
    rules?: pulumi.Input<pulumi.Input<inputs.ObjectCasbUseractivityMatchRule>[]>;
    strategy?: pulumi.Input<string>;
}

export interface ObjectCasbUseractivityMatchRule {
    caseSensitive?: pulumi.Input<string>;
    domains?: pulumi.Input<pulumi.Input<string>[]>;
    headerName?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    matchPattern?: pulumi.Input<string>;
    matchValue?: pulumi.Input<string>;
    methods?: pulumi.Input<pulumi.Input<string>[]>;
    negate?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ObjectCifsProfileFileFilter {
    entries?: pulumi.Input<pulumi.Input<inputs.ObjectCifsProfileFileFilterEntry>[]>;
    log?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectCifsProfileFileFilterEntry {
    action?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    fileType?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectCifsProfileServerKeytab {
    keytab?: pulumi.Input<string>;
    passwords?: pulumi.Input<pulumi.Input<string>[]>;
    principal?: pulumi.Input<string>;
}

export interface ObjectDlpDictionaryEntry {
    comment?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ignoreCase?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    repeat?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ObjectDlpFilepatternEntry {
    fileType?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
}

export interface ObjectDlpProfileRule {
    action?: pulumi.Input<string>;
    archive?: pulumi.Input<string>;
    expiry?: pulumi.Input<string>;
    fileSize?: pulumi.Input<number>;
    fileType?: pulumi.Input<string>;
    filterBy?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    label?: pulumi.Input<string>;
    matchPercentage?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    protos?: pulumi.Input<pulumi.Input<string>[]>;
    sensitivities?: pulumi.Input<pulumi.Input<string>[]>;
    sensors?: pulumi.Input<pulumi.Input<string>[]>;
    severity?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ObjectDlpSensorEntry {
    count?: pulumi.Input<number>;
    dictionary?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface ObjectDlpSensorFilter {
    action?: pulumi.Input<string>;
    archive?: pulumi.Input<string>;
    companyIdentifier?: pulumi.Input<string>;
    expiry?: pulumi.Input<string>;
    fileSize?: pulumi.Input<number>;
    fileType?: pulumi.Input<string>;
    filterBy?: pulumi.Input<string>;
    fpSensitivity?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    matchPercentage?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    protos?: pulumi.Input<pulumi.Input<string>[]>;
    regexp?: pulumi.Input<string>;
    sensitivity?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ObjectDnsfilterDomainfilterEntry {
    action?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ObjectDnsfilterProfileDnsTranslation {
    addrType?: pulumi.Input<string>;
    dst?: pulumi.Input<string>;
    dst6?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    netmask?: pulumi.Input<string>;
    prefix?: pulumi.Input<number>;
    src?: pulumi.Input<string>;
    src6?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectDnsfilterProfileDomainFilter {
    domainFilterTable?: pulumi.Input<number>;
}

export interface ObjectDnsfilterProfileFtgdDns {
    filters?: pulumi.Input<pulumi.Input<inputs.ObjectDnsfilterProfileFtgdDnsFilter>[]>;
    options?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectDnsfilterProfileFtgdDnsFilter {
    action?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
}

export interface ObjectDnsfilterProfileFtgddnsFilter {
    action?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
}

export interface ObjectDynamicAddressDynamicAddrMapping {
    addr?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface ObjectDynamicCertificateLocalDynamicMapping {
    _scopes?: pulumi.Input<pulumi.Input<inputs.ObjectDynamicCertificateLocalDynamicMapping_Scope>[]>;
    localCert?: pulumi.Input<string>;
}

export interface ObjectDynamicCertificateLocalDynamicMapping_Scope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface ObjectDynamicInterfaceDynamicMapping {
    _scopes?: pulumi.Input<pulumi.Input<inputs.ObjectDynamicInterfaceDynamicMapping_Scope>[]>;
    egressShapingProfile?: pulumi.Input<string>;
    ingressShapingProfile?: pulumi.Input<string>;
    intrazoneDeny?: pulumi.Input<string>;
    localIntfs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectDynamicInterfaceDynamicMapping_Scope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface ObjectDynamicInterfacePlatformMapping {
    egressShapingProfile?: pulumi.Input<string>;
    ingressShapingProfile?: pulumi.Input<string>;
    intfZone?: pulumi.Input<string>;
    intrazoneDeny?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface ObjectDynamicMulticastInterfaceDynamicMapping {
    _scopes?: pulumi.Input<pulumi.Input<inputs.ObjectDynamicMulticastInterfaceDynamicMapping_Scope>[]>;
    localIntf?: pulumi.Input<string>;
}

export interface ObjectDynamicMulticastInterfaceDynamicMapping_Scope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface ObjectDynamicVpntunnelDynamicMapping {
    _scopes?: pulumi.Input<pulumi.Input<inputs.ObjectDynamicVpntunnelDynamicMapping_Scope>[]>;
    localIpsec?: pulumi.Input<string>;
}

export interface ObjectDynamicVpntunnelDynamicMapping_Scope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface ObjectEmailfilterBlockallowlistEntry {
    action?: pulumi.Input<string>;
    addrType?: pulumi.Input<string>;
    emailPattern?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip4Subnet?: pulumi.Input<string>;
    ip6Subnet?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    patternType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ObjectEmailfilterBwlEntry {
    action?: pulumi.Input<string>;
    addrType?: pulumi.Input<string>;
    emailPattern?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip4Subnet?: pulumi.Input<string>;
    ip6Subnet?: pulumi.Input<string>;
    patternType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ObjectEmailfilterBwordEntry {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    language?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    patternType?: pulumi.Input<string>;
    score?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    where?: pulumi.Input<string>;
}

export interface ObjectEmailfilterDnsblEntry {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    server?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectEmailfilterIptrustEntry {
    addrType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip4Subnet?: pulumi.Input<string>;
    ip6Subnet?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectEmailfilterMheaderEntry {
    action?: pulumi.Input<string>;
    fieldbody?: pulumi.Input<string>;
    fieldname?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    patternType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectEmailfilterProfileFileFilter {
    entries?: pulumi.Input<pulumi.Input<inputs.ObjectEmailfilterProfileFileFilterEntry>[]>;
    log?: pulumi.Input<string>;
    scanArchiveContents?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectEmailfilterProfileFileFilterEntry {
    action?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    encryption?: pulumi.Input<string>;
    fileTypes?: pulumi.Input<pulumi.Input<string>[]>;
    filter?: pulumi.Input<string>;
    passwordProtected?: pulumi.Input<string>;
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectEmailfilterProfileGmail {
    log?: pulumi.Input<string>;
    logAll?: pulumi.Input<string>;
}

export interface ObjectEmailfilterProfileImap {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    logAll?: pulumi.Input<string>;
    tagMsg?: pulumi.Input<string>;
    tagTypes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectEmailfilterProfileMapi {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    logAll?: pulumi.Input<string>;
}

export interface ObjectEmailfilterProfileMsnHotmail {
    log?: pulumi.Input<string>;
    logAll?: pulumi.Input<string>;
}

export interface ObjectEmailfilterProfileOtherWebmails {
    logAll?: pulumi.Input<string>;
}

export interface ObjectEmailfilterProfilePop3 {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    logAll?: pulumi.Input<string>;
    tagMsg?: pulumi.Input<string>;
    tagTypes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectEmailfilterProfileSmtp {
    action?: pulumi.Input<string>;
    hdrip?: pulumi.Input<string>;
    localOverride?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    logAll?: pulumi.Input<string>;
    tagMsg?: pulumi.Input<string>;
    tagTypes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectExtendercontrollerExtenderprofileCellular {
    controllerReport?: pulumi.Input<inputs.ObjectExtendercontrollerExtenderprofileCellularControllerReport>;
    dataplan?: pulumi.Input<string>;
    modem1?: pulumi.Input<inputs.ObjectExtendercontrollerExtenderprofileCellularModem1>;
    modem2?: pulumi.Input<inputs.ObjectExtendercontrollerExtenderprofileCellularModem2>;
    smsNotification?: pulumi.Input<inputs.ObjectExtendercontrollerExtenderprofileCellularSmsNotification>;
}

export interface ObjectExtendercontrollerExtenderprofileCellularControllerReport {
    interval?: pulumi.Input<number>;
    signalThreshold?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface ObjectExtendercontrollerExtenderprofileCellularModem1 {
    autoSwitch?: pulumi.Input<inputs.ObjectExtendercontrollerExtenderprofileCellularModem1AutoSwitch>;
    connStatus?: pulumi.Input<number>;
    defaultSim?: pulumi.Input<string>;
    gps?: pulumi.Input<string>;
    modemId?: pulumi.Input<number>;
    preferredCarrier?: pulumi.Input<string>;
    redundantIntf?: pulumi.Input<string>;
    redundantMode?: pulumi.Input<string>;
    sim1Pin?: pulumi.Input<string>;
    sim1PinCodes?: pulumi.Input<pulumi.Input<string>[]>;
    sim2Pin?: pulumi.Input<string>;
    sim2PinCodes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectExtendercontrollerExtenderprofileCellularModem1AutoSwitch {
    dataplan?: pulumi.Input<string>;
    disconnect?: pulumi.Input<string>;
    disconnectPeriod?: pulumi.Input<number>;
    disconnectThreshold?: pulumi.Input<number>;
    signal?: pulumi.Input<string>;
    switchBackTime?: pulumi.Input<string>;
    switchBackTimer?: pulumi.Input<number>;
    switchBacks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectExtendercontrollerExtenderprofileCellularModem2 {
    autoSwitch?: pulumi.Input<inputs.ObjectExtendercontrollerExtenderprofileCellularModem2AutoSwitch>;
    connStatus?: pulumi.Input<number>;
    defaultSim?: pulumi.Input<string>;
    gps?: pulumi.Input<string>;
    modemId?: pulumi.Input<number>;
    preferredCarrier?: pulumi.Input<string>;
    redundantIntf?: pulumi.Input<string>;
    redundantMode?: pulumi.Input<string>;
    sim1Pin?: pulumi.Input<string>;
    sim1PinCodes?: pulumi.Input<pulumi.Input<string>[]>;
    sim2Pin?: pulumi.Input<string>;
    sim2PinCodes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectExtendercontrollerExtenderprofileCellularModem2AutoSwitch {
    dataplan?: pulumi.Input<string>;
    disconnect?: pulumi.Input<string>;
    disconnectPeriod?: pulumi.Input<number>;
    disconnectThreshold?: pulumi.Input<number>;
    signal?: pulumi.Input<string>;
    switchBackTime?: pulumi.Input<string>;
    switchBackTimer?: pulumi.Input<number>;
    switchBacks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectExtendercontrollerExtenderprofileCellularSmsNotification {
    alert?: pulumi.Input<inputs.ObjectExtendercontrollerExtenderprofileCellularSmsNotificationAlert>;
    receivers?: pulumi.Input<pulumi.Input<inputs.ObjectExtendercontrollerExtenderprofileCellularSmsNotificationReceiver>[]>;
    status?: pulumi.Input<string>;
}

export interface ObjectExtendercontrollerExtenderprofileCellularSmsNotificationAlert {
    dataExhausted?: pulumi.Input<string>;
    fgtBackupModeSwitch?: pulumi.Input<string>;
    lowSignalStrength?: pulumi.Input<string>;
    modeSwitch?: pulumi.Input<string>;
    osImageFallback?: pulumi.Input<string>;
    sessionDisconnect?: pulumi.Input<string>;
    systemReboot?: pulumi.Input<string>;
}

export interface ObjectExtendercontrollerExtenderprofileCellularSmsNotificationReceiver {
    alerts?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    phoneNumber?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectExtendercontrollerExtenderprofileCellularSmsnotificationAlert {
    dataExhausted?: pulumi.Input<string>;
    fgtBackupModeSwitch?: pulumi.Input<string>;
    lowSignalStrength?: pulumi.Input<string>;
    modeSwitch?: pulumi.Input<string>;
    osImageFallback?: pulumi.Input<string>;
    sessionDisconnect?: pulumi.Input<string>;
    systemReboot?: pulumi.Input<string>;
}

export interface ObjectExtendercontrollerExtenderprofileCellularSmsnotificationReceiver {
    alerts?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    phoneNumber?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectExtendercontrollerExtenderprofileLanExtension {
    backhaulInterface?: pulumi.Input<string>;
    backhaulIp?: pulumi.Input<string>;
    backhauls?: pulumi.Input<pulumi.Input<inputs.ObjectExtendercontrollerExtenderprofileLanExtensionBackhaul>[]>;
    ipsecTunnel?: pulumi.Input<string>;
    linkLoadbalance?: pulumi.Input<string>;
}

export interface ObjectExtendercontrollerExtenderprofileLanExtensionBackhaul {
    name?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface ObjectExtendercontrollerExtenderprofileLanextensionBackhaul {
    name?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface ObjectExtendercontrollerSimProfileAutoSwitchProfile {
    dataplan?: pulumi.Input<string>;
    disconnect?: pulumi.Input<string>;
    disconnectPeriod?: pulumi.Input<number>;
    disconnectThreshold?: pulumi.Input<number>;
    signal?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    switchBackTime?: pulumi.Input<string>;
    switchBackTimer?: pulumi.Input<number>;
    switchBacks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectExtensioncontrollerExtenderprofileCellular {
    controllerReport?: pulumi.Input<inputs.ObjectExtensioncontrollerExtenderprofileCellularControllerReport>;
    dataplans?: pulumi.Input<pulumi.Input<string>[]>;
    modem1?: pulumi.Input<inputs.ObjectExtensioncontrollerExtenderprofileCellularModem1>;
    modem2?: pulumi.Input<inputs.ObjectExtensioncontrollerExtenderprofileCellularModem2>;
    smsNotification?: pulumi.Input<inputs.ObjectExtensioncontrollerExtenderprofileCellularSmsNotification>;
}

export interface ObjectExtensioncontrollerExtenderprofileCellularControllerReport {
    interval?: pulumi.Input<number>;
    signalThreshold?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface ObjectExtensioncontrollerExtenderprofileCellularModem1 {
    autoSwitch?: pulumi.Input<inputs.ObjectExtensioncontrollerExtenderprofileCellularModem1AutoSwitch>;
    connStatus?: pulumi.Input<number>;
    defaultSim?: pulumi.Input<string>;
    gps?: pulumi.Input<string>;
    modemId?: pulumi.Input<number>;
    preferredCarrier?: pulumi.Input<string>;
    redundantIntf?: pulumi.Input<string>;
    redundantMode?: pulumi.Input<string>;
    sim1Pin?: pulumi.Input<string>;
    sim1PinCodes?: pulumi.Input<pulumi.Input<string>[]>;
    sim2Pin?: pulumi.Input<string>;
    sim2PinCodes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectExtensioncontrollerExtenderprofileCellularModem1AutoSwitch {
    dataplan?: pulumi.Input<string>;
    disconnect?: pulumi.Input<string>;
    disconnectPeriod?: pulumi.Input<number>;
    disconnectThreshold?: pulumi.Input<number>;
    signal?: pulumi.Input<string>;
    switchBackTime?: pulumi.Input<string>;
    switchBackTimer?: pulumi.Input<number>;
    switchBacks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectExtensioncontrollerExtenderprofileCellularModem2 {
    autoSwitch?: pulumi.Input<inputs.ObjectExtensioncontrollerExtenderprofileCellularModem2AutoSwitch>;
    connStatus?: pulumi.Input<number>;
    defaultSim?: pulumi.Input<string>;
    gps?: pulumi.Input<string>;
    modemId?: pulumi.Input<number>;
    preferredCarrier?: pulumi.Input<string>;
    redundantIntf?: pulumi.Input<string>;
    redundantMode?: pulumi.Input<string>;
    sim1Pin?: pulumi.Input<string>;
    sim1PinCodes?: pulumi.Input<pulumi.Input<string>[]>;
    sim2Pin?: pulumi.Input<string>;
    sim2PinCodes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectExtensioncontrollerExtenderprofileCellularModem2AutoSwitch {
    dataplan?: pulumi.Input<string>;
    disconnect?: pulumi.Input<string>;
    disconnectPeriod?: pulumi.Input<number>;
    disconnectThreshold?: pulumi.Input<number>;
    signal?: pulumi.Input<string>;
    switchBackTime?: pulumi.Input<string>;
    switchBackTimer?: pulumi.Input<number>;
    switchBacks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectExtensioncontrollerExtenderprofileCellularSmsNotification {
    alert?: pulumi.Input<inputs.ObjectExtensioncontrollerExtenderprofileCellularSmsNotificationAlert>;
    receivers?: pulumi.Input<pulumi.Input<inputs.ObjectExtensioncontrollerExtenderprofileCellularSmsNotificationReceiver>[]>;
    status?: pulumi.Input<string>;
}

export interface ObjectExtensioncontrollerExtenderprofileCellularSmsNotificationAlert {
    dataExhausted?: pulumi.Input<string>;
    fgtBackupModeSwitch?: pulumi.Input<string>;
    lowSignalStrength?: pulumi.Input<string>;
    modeSwitch?: pulumi.Input<string>;
    osImageFallback?: pulumi.Input<string>;
    sessionDisconnect?: pulumi.Input<string>;
    systemReboot?: pulumi.Input<string>;
}

export interface ObjectExtensioncontrollerExtenderprofileCellularSmsNotificationReceiver {
    alerts?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    phoneNumber?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectExtensioncontrollerExtenderprofileCellularSmsnotificationAlert {
    dataExhausted?: pulumi.Input<string>;
    fgtBackupModeSwitch?: pulumi.Input<string>;
    lowSignalStrength?: pulumi.Input<string>;
    modeSwitch?: pulumi.Input<string>;
    osImageFallback?: pulumi.Input<string>;
    sessionDisconnect?: pulumi.Input<string>;
    systemReboot?: pulumi.Input<string>;
}

export interface ObjectExtensioncontrollerExtenderprofileCellularSmsnotificationReceiver {
    alerts?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    phoneNumber?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectExtensioncontrollerExtenderprofileLanExtension {
    backhaulInterface?: pulumi.Input<string>;
    backhaulIp?: pulumi.Input<string>;
    backhauls?: pulumi.Input<pulumi.Input<inputs.ObjectExtensioncontrollerExtenderprofileLanExtensionBackhaul>[]>;
    ipsecTunnel?: pulumi.Input<string>;
    linkLoadbalance?: pulumi.Input<string>;
}

export interface ObjectExtensioncontrollerExtenderprofileLanExtensionBackhaul {
    name?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface ObjectExtensioncontrollerExtenderprofileLanextensionBackhaul {
    name?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface ObjectExtensioncontrollerExtenderprofileWifi {
    country?: pulumi.Input<string>;
    dfs?: pulumi.Input<string>;
    radio1?: pulumi.Input<inputs.ObjectExtensioncontrollerExtenderprofileWifiRadio1>;
    radio2?: pulumi.Input<inputs.ObjectExtensioncontrollerExtenderprofileWifiRadio2>;
}

export interface ObjectExtensioncontrollerExtenderprofileWifiRadio1 {
    band?: pulumi.Input<string>;
    bandwidth?: pulumi.Input<string>;
    beaconInterval?: pulumi.Input<number>;
    bssColor?: pulumi.Input<number>;
    bssColorMode?: pulumi.Input<string>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    extensionChannel?: pulumi.Input<string>;
    guardInterval?: pulumi.Input<string>;
    lanExtVaps?: pulumi.Input<pulumi.Input<string>[]>;
    localVaps?: pulumi.Input<pulumi.Input<string>[]>;
    maxClients?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    n80211d?: pulumi.Input<string>;
    operatingStandard?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    radioId?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface ObjectExtensioncontrollerExtenderprofileWifiRadio2 {
    band?: pulumi.Input<string>;
    bandwidth?: pulumi.Input<string>;
    beaconInterval?: pulumi.Input<number>;
    bssColor?: pulumi.Input<number>;
    bssColorMode?: pulumi.Input<string>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    extensionChannel?: pulumi.Input<string>;
    guardInterval?: pulumi.Input<string>;
    lanExtVaps?: pulumi.Input<pulumi.Input<string>[]>;
    localVaps?: pulumi.Input<pulumi.Input<string>[]>;
    maxClients?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    n80211d?: pulumi.Input<string>;
    operatingStandard?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    radioId?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface ObjectFilefilterProfileRule {
    action?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    fileTypes?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    passwordProtected?: pulumi.Input<string>;
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFirewallAccessproxy6ApiGateway {
    applications?: pulumi.Input<pulumi.Input<string>[]>;
    h2Support?: pulumi.Input<string>;
    h3Support?: pulumi.Input<string>;
    httpCookieAge?: pulumi.Input<number>;
    httpCookieDomain?: pulumi.Input<string>;
    httpCookieDomainFromHost?: pulumi.Input<string>;
    httpCookieGeneration?: pulumi.Input<number>;
    httpCookiePath?: pulumi.Input<string>;
    httpCookieShare?: pulumi.Input<string>;
    httpsCookieSecure?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ldbMethod?: pulumi.Input<string>;
    persistence?: pulumi.Input<string>;
    quic?: pulumi.Input<inputs.ObjectFirewallAccessproxy6ApiGatewayQuic>;
    realservers?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallAccessproxy6ApiGatewayRealserver>[]>;
    samlRedirect?: pulumi.Input<string>;
    samlServer?: pulumi.Input<string>;
    service?: pulumi.Input<string>;
    sslAlgorithm?: pulumi.Input<string>;
    sslCipherSuites?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallAccessproxy6ApiGatewaySslCipherSuite>[]>;
    sslDhBits?: pulumi.Input<string>;
    sslMaxVersion?: pulumi.Input<string>;
    sslMinVersion?: pulumi.Input<string>;
    sslRenegotiation?: pulumi.Input<string>;
    sslVpnWebPortal?: pulumi.Input<string>;
    urlMap?: pulumi.Input<string>;
    urlMapType?: pulumi.Input<string>;
    virtualHost?: pulumi.Input<string>;
}

export interface ObjectFirewallAccessproxy6ApiGateway6 {
    applications?: pulumi.Input<pulumi.Input<string>[]>;
    h2Support?: pulumi.Input<string>;
    h3Support?: pulumi.Input<string>;
    httpCookieAge?: pulumi.Input<number>;
    httpCookieDomain?: pulumi.Input<string>;
    httpCookieDomainFromHost?: pulumi.Input<string>;
    httpCookieGeneration?: pulumi.Input<number>;
    httpCookiePath?: pulumi.Input<string>;
    httpCookieShare?: pulumi.Input<string>;
    httpsCookieSecure?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ldbMethod?: pulumi.Input<string>;
    persistence?: pulumi.Input<string>;
    quic?: pulumi.Input<inputs.ObjectFirewallAccessproxy6ApiGateway6Quic>;
    realservers?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallAccessproxy6ApiGateway6Realserver>[]>;
    samlRedirect?: pulumi.Input<string>;
    samlServer?: pulumi.Input<string>;
    service?: pulumi.Input<string>;
    sslAlgorithm?: pulumi.Input<string>;
    sslCipherSuites?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallAccessproxy6ApiGateway6SslCipherSuite>[]>;
    sslDhBits?: pulumi.Input<string>;
    sslMaxVersion?: pulumi.Input<string>;
    sslMinVersion?: pulumi.Input<string>;
    sslRenegotiation?: pulumi.Input<string>;
    sslVpnWebPortal?: pulumi.Input<string>;
    urlMap?: pulumi.Input<string>;
    urlMapType?: pulumi.Input<string>;
    virtualHost?: pulumi.Input<string>;
}

export interface ObjectFirewallAccessproxy6ApiGateway6Quic {
    ackDelayExponent?: pulumi.Input<number>;
    activeConnectionIdLimit?: pulumi.Input<number>;
    activeMigration?: pulumi.Input<string>;
    greaseQuicBit?: pulumi.Input<string>;
    maxAckDelay?: pulumi.Input<number>;
    maxDatagramFrameSize?: pulumi.Input<number>;
    maxIdleTimeout?: pulumi.Input<number>;
    maxUdpPayloadSize?: pulumi.Input<number>;
}

export interface ObjectFirewallAccessproxy6ApiGateway6Realserver {
    addrType?: pulumi.Input<string>;
    address?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    externalAuth?: pulumi.Input<string>;
    healthCheck?: pulumi.Input<string>;
    healthCheckProto?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<string>;
    httpHost?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    mappedport?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    sshClientCert?: pulumi.Input<string>;
    sshHostKeyValidation?: pulumi.Input<string>;
    sshHostKeys?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    translateHost?: pulumi.Input<string>;
    tunnelEncryption?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface ObjectFirewallAccessproxy6ApiGateway6SslCipherSuite {
    cipher?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    versions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFirewallAccessproxy6ApiGatewayQuic {
    ackDelayExponent?: pulumi.Input<number>;
    activeConnectionIdLimit?: pulumi.Input<number>;
    activeMigration?: pulumi.Input<string>;
    greaseQuicBit?: pulumi.Input<string>;
    maxAckDelay?: pulumi.Input<number>;
    maxDatagramFrameSize?: pulumi.Input<number>;
    maxIdleTimeout?: pulumi.Input<number>;
    maxUdpPayloadSize?: pulumi.Input<number>;
}

export interface ObjectFirewallAccessproxy6ApiGatewayRealserver {
    addrType?: pulumi.Input<string>;
    address?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    externalAuth?: pulumi.Input<string>;
    healthCheck?: pulumi.Input<string>;
    healthCheckProto?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<string>;
    httpHost?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    mappedport?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    sshClientCert?: pulumi.Input<string>;
    sshHostKeyValidation?: pulumi.Input<string>;
    sshHostKeys?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    translateHost?: pulumi.Input<string>;
    tunnelEncryption?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface ObjectFirewallAccessproxy6ApiGatewaySslCipherSuite {
    cipher?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    versions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFirewallAccessproxy6Apigateway6Quic {
    ackDelayExponent?: pulumi.Input<number>;
    activeConnectionIdLimit?: pulumi.Input<number>;
    activeMigration?: pulumi.Input<string>;
    greaseQuicBit?: pulumi.Input<string>;
    maxAckDelay?: pulumi.Input<number>;
    maxDatagramFrameSize?: pulumi.Input<number>;
    maxIdleTimeout?: pulumi.Input<number>;
    maxUdpPayloadSize?: pulumi.Input<number>;
}

export interface ObjectFirewallAccessproxy6Apigateway6Realserver {
    addrType?: pulumi.Input<string>;
    address?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    externalAuth?: pulumi.Input<string>;
    healthCheck?: pulumi.Input<string>;
    healthCheckProto?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<string>;
    httpHost?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    mappedport?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    sshClientCert?: pulumi.Input<string>;
    sshHostKeyValidation?: pulumi.Input<string>;
    sshHostKeys?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    translateHost?: pulumi.Input<string>;
    tunnelEncryption?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface ObjectFirewallAccessproxy6Apigateway6SslCipherSuite {
    cipher?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    versions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFirewallAccessproxy6ApigatewayQuic {
    ackDelayExponent?: pulumi.Input<number>;
    activeConnectionIdLimit?: pulumi.Input<number>;
    activeMigration?: pulumi.Input<string>;
    greaseQuicBit?: pulumi.Input<string>;
    maxAckDelay?: pulumi.Input<number>;
    maxDatagramFrameSize?: pulumi.Input<number>;
    maxIdleTimeout?: pulumi.Input<number>;
    maxUdpPayloadSize?: pulumi.Input<number>;
}

export interface ObjectFirewallAccessproxy6ApigatewayRealserver {
    addrType?: pulumi.Input<string>;
    address?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    externalAuth?: pulumi.Input<string>;
    healthCheck?: pulumi.Input<string>;
    healthCheckProto?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<string>;
    httpHost?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    mappedport?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    sshClientCert?: pulumi.Input<string>;
    sshHostKeyValidation?: pulumi.Input<string>;
    sshHostKeys?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    translateHost?: pulumi.Input<string>;
    tunnelEncryption?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface ObjectFirewallAccessproxy6ApigatewaySslCipherSuite {
    cipher?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    versions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFirewallAccessproxyApiGateway {
    applications?: pulumi.Input<pulumi.Input<string>[]>;
    h2Support?: pulumi.Input<string>;
    h3Support?: pulumi.Input<string>;
    httpCookieAge?: pulumi.Input<number>;
    httpCookieDomain?: pulumi.Input<string>;
    httpCookieDomainFromHost?: pulumi.Input<string>;
    httpCookieGeneration?: pulumi.Input<number>;
    httpCookiePath?: pulumi.Input<string>;
    httpCookieShare?: pulumi.Input<string>;
    httpsCookieSecure?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ldbMethod?: pulumi.Input<string>;
    persistence?: pulumi.Input<string>;
    quic?: pulumi.Input<inputs.ObjectFirewallAccessproxyApiGatewayQuic>;
    realservers?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallAccessproxyApiGatewayRealserver>[]>;
    samlRedirect?: pulumi.Input<string>;
    samlServer?: pulumi.Input<string>;
    service?: pulumi.Input<string>;
    sslAlgorithm?: pulumi.Input<string>;
    sslCipherSuites?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallAccessproxyApiGatewaySslCipherSuite>[]>;
    sslDhBits?: pulumi.Input<string>;
    sslMaxVersion?: pulumi.Input<string>;
    sslMinVersion?: pulumi.Input<string>;
    sslRenegotiation?: pulumi.Input<string>;
    sslVpnWebPortal?: pulumi.Input<string>;
    urlMap?: pulumi.Input<string>;
    urlMapType?: pulumi.Input<string>;
    virtualHost?: pulumi.Input<string>;
}

export interface ObjectFirewallAccessproxyApiGateway6 {
    applications?: pulumi.Input<pulumi.Input<string>[]>;
    h2Support?: pulumi.Input<string>;
    h3Support?: pulumi.Input<string>;
    httpCookieAge?: pulumi.Input<number>;
    httpCookieDomain?: pulumi.Input<string>;
    httpCookieDomainFromHost?: pulumi.Input<string>;
    httpCookieGeneration?: pulumi.Input<number>;
    httpCookiePath?: pulumi.Input<string>;
    httpCookieShare?: pulumi.Input<string>;
    httpsCookieSecure?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ldbMethod?: pulumi.Input<string>;
    persistence?: pulumi.Input<string>;
    quic?: pulumi.Input<inputs.ObjectFirewallAccessproxyApiGateway6Quic>;
    realservers?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallAccessproxyApiGateway6Realserver>[]>;
    samlRedirect?: pulumi.Input<string>;
    samlServer?: pulumi.Input<string>;
    service?: pulumi.Input<string>;
    sslAlgorithm?: pulumi.Input<string>;
    sslCipherSuites?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallAccessproxyApiGateway6SslCipherSuite>[]>;
    sslDhBits?: pulumi.Input<string>;
    sslMaxVersion?: pulumi.Input<string>;
    sslMinVersion?: pulumi.Input<string>;
    sslRenegotiation?: pulumi.Input<string>;
    sslVpnWebPortal?: pulumi.Input<string>;
    urlMap?: pulumi.Input<string>;
    urlMapType?: pulumi.Input<string>;
    virtualHost?: pulumi.Input<string>;
}

export interface ObjectFirewallAccessproxyApiGateway6Quic {
    ackDelayExponent?: pulumi.Input<number>;
    activeConnectionIdLimit?: pulumi.Input<number>;
    activeMigration?: pulumi.Input<string>;
    greaseQuicBit?: pulumi.Input<string>;
    maxAckDelay?: pulumi.Input<number>;
    maxDatagramFrameSize?: pulumi.Input<number>;
    maxIdleTimeout?: pulumi.Input<number>;
    maxUdpPayloadSize?: pulumi.Input<number>;
}

export interface ObjectFirewallAccessproxyApiGateway6Realserver {
    addrType?: pulumi.Input<string>;
    address?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    externalAuth?: pulumi.Input<string>;
    healthCheck?: pulumi.Input<string>;
    healthCheckProto?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<string>;
    httpHost?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    mappedport?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    sshClientCert?: pulumi.Input<string>;
    sshHostKey?: pulumi.Input<string>;
    sshHostKeyValidation?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    translateHost?: pulumi.Input<string>;
    tunnelEncryption?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface ObjectFirewallAccessproxyApiGateway6SslCipherSuite {
    cipher?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    versions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFirewallAccessproxyApiGatewayQuic {
    ackDelayExponent?: pulumi.Input<number>;
    activeConnectionIdLimit?: pulumi.Input<number>;
    activeMigration?: pulumi.Input<string>;
    greaseQuicBit?: pulumi.Input<string>;
    maxAckDelay?: pulumi.Input<number>;
    maxDatagramFrameSize?: pulumi.Input<number>;
    maxIdleTimeout?: pulumi.Input<number>;
    maxUdpPayloadSize?: pulumi.Input<number>;
}

export interface ObjectFirewallAccessproxyApiGatewayRealserver {
    addrType?: pulumi.Input<string>;
    address?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    externalAuth?: pulumi.Input<string>;
    healthCheck?: pulumi.Input<string>;
    healthCheckProto?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<string>;
    httpHost?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    mappedport?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    sshClientCert?: pulumi.Input<string>;
    sshHostKey?: pulumi.Input<string>;
    sshHostKeyValidation?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    translateHost?: pulumi.Input<string>;
    tunnelEncryption?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface ObjectFirewallAccessproxyApiGatewaySslCipherSuite {
    cipher?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    versions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFirewallAccessproxyApigateway6Quic {
    ackDelayExponent?: pulumi.Input<number>;
    activeConnectionIdLimit?: pulumi.Input<number>;
    activeMigration?: pulumi.Input<string>;
    greaseQuicBit?: pulumi.Input<string>;
    maxAckDelay?: pulumi.Input<number>;
    maxDatagramFrameSize?: pulumi.Input<number>;
    maxIdleTimeout?: pulumi.Input<number>;
    maxUdpPayloadSize?: pulumi.Input<number>;
}

export interface ObjectFirewallAccessproxyApigateway6Realserver {
    addrType?: pulumi.Input<string>;
    address?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    externalAuth?: pulumi.Input<string>;
    healthCheck?: pulumi.Input<string>;
    healthCheckProto?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<string>;
    httpHost?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    mappedport?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    sshClientCert?: pulumi.Input<string>;
    sshHostKey?: pulumi.Input<string>;
    sshHostKeyValidation?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    translateHost?: pulumi.Input<string>;
    tunnelEncryption?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface ObjectFirewallAccessproxyApigateway6SslCipherSuite {
    cipher?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    versions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFirewallAccessproxyApigatewayQuic {
    ackDelayExponent?: pulumi.Input<number>;
    activeConnectionIdLimit?: pulumi.Input<number>;
    activeMigration?: pulumi.Input<string>;
    greaseQuicBit?: pulumi.Input<string>;
    maxAckDelay?: pulumi.Input<number>;
    maxDatagramFrameSize?: pulumi.Input<number>;
    maxIdleTimeout?: pulumi.Input<number>;
    maxUdpPayloadSize?: pulumi.Input<number>;
}

export interface ObjectFirewallAccessproxyApigatewayRealserver {
    addrType?: pulumi.Input<string>;
    address?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    externalAuth?: pulumi.Input<string>;
    healthCheck?: pulumi.Input<string>;
    healthCheckProto?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<string>;
    httpHost?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    mappedport?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    sshClientCert?: pulumi.Input<string>;
    sshHostKey?: pulumi.Input<string>;
    sshHostKeyValidation?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    translateHost?: pulumi.Input<string>;
    tunnelEncryption?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface ObjectFirewallAccessproxyApigatewaySslCipherSuite {
    cipher?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    versions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFirewallAccessproxyRealserver {
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface ObjectFirewallAccessproxyServerPubkeyAuthSettings {
    authCa?: pulumi.Input<string>;
    certExtensions?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallAccessproxyServerPubkeyAuthSettingsCertExtension>[]>;
    permitAgentForwarding?: pulumi.Input<string>;
    permitPortForwarding?: pulumi.Input<string>;
    permitPty?: pulumi.Input<string>;
    permitUserRc?: pulumi.Input<string>;
    permitX11Forwarding?: pulumi.Input<string>;
    sourceAddress?: pulumi.Input<string>;
}

export interface ObjectFirewallAccessproxyServerPubkeyAuthSettingsCertExtension {
    critical?: pulumi.Input<string>;
    data?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ObjectFirewallAccessproxyServerpubkeyauthsettingsCertExtension {
    critical?: pulumi.Input<string>;
    data?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ObjectFirewallAccessproxysshclientcertCertExtension {
    critical?: pulumi.Input<string>;
    data?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ObjectFirewallAddress6DynamicMapping {
    _imageBase64?: pulumi.Input<string>;
    _scopes?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallAddress6DynamicMapping_Scope>[]>;
    cacheTtl?: pulumi.Input<number>;
    color?: pulumi.Input<number>;
    comment?: pulumi.Input<string>;
    country?: pulumi.Input<string>;
    endIp?: pulumi.Input<string>;
    endMac?: pulumi.Input<string>;
    epgName?: pulumi.Input<string>;
    fabricObject?: pulumi.Input<string>;
    fqdn?: pulumi.Input<string>;
    globalObject?: pulumi.Input<number>;
    host?: pulumi.Input<string>;
    hostType?: pulumi.Input<string>;
    ip6?: pulumi.Input<string>;
    macaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    objId?: pulumi.Input<string>;
    routeTag?: pulumi.Input<number>;
    sdn?: pulumi.Input<string>;
    sdnTag?: pulumi.Input<string>;
    startIp?: pulumi.Input<string>;
    startMac?: pulumi.Input<string>;
    subnetSegments?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallAddress6DynamicMappingSubnetSegment>[]>;
    tags?: pulumi.Input<string>;
    template?: pulumi.Input<string>;
    tenant?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    visibility?: pulumi.Input<string>;
}

export interface ObjectFirewallAddress6DynamicMappingSubnetSegment {
    name?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ObjectFirewallAddress6DynamicMapping_Scope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface ObjectFirewallAddress6List {
    ip?: pulumi.Input<string>;
    netId?: pulumi.Input<string>;
    objId?: pulumi.Input<string>;
}

export interface ObjectFirewallAddress6SubnetSegment {
    name?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ObjectFirewallAddress6Tagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFirewallAddress6templateSubnetSegment {
    bits?: pulumi.Input<number>;
    exclusive?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallAddress6templateSubnetSegmentValue>[]>;
}

export interface ObjectFirewallAddress6templateSubnetSegmentValue {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ObjectFirewallAddress6templateSubnetsegmentValue {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ObjectFirewallAddressDynamicMapping {
    _imageBase64?: pulumi.Input<string>;
    _scopes?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallAddressDynamicMapping_Scope>[]>;
    allowRouting?: pulumi.Input<string>;
    associatedInterface?: pulumi.Input<string>;
    cacheTtl?: pulumi.Input<number>;
    clearpassSpt?: pulumi.Input<string>;
    color?: pulumi.Input<number>;
    comment?: pulumi.Input<string>;
    country?: pulumi.Input<string>;
    dirty?: pulumi.Input<string>;
    endIp?: pulumi.Input<string>;
    endMac?: pulumi.Input<string>;
    epgName?: pulumi.Input<string>;
    fabricObject?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    fqdn?: pulumi.Input<string>;
    fssoGroup?: pulumi.Input<string>;
    globalObject?: pulumi.Input<number>;
    hwModel?: pulumi.Input<string>;
    hwVendor?: pulumi.Input<string>;
    interface?: pulumi.Input<string>;
    macaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    nodeIpOnly?: pulumi.Input<string>;
    objId?: pulumi.Input<string>;
    objTag?: pulumi.Input<string>;
    objType?: pulumi.Input<string>;
    organization?: pulumi.Input<string>;
    os?: pulumi.Input<string>;
    patternEnd?: pulumi.Input<number>;
    patternStart?: pulumi.Input<number>;
    policyGroup?: pulumi.Input<string>;
    routeTag?: pulumi.Input<number>;
    sdn?: pulumi.Input<string>;
    sdnAddrType?: pulumi.Input<string>;
    sdnTag?: pulumi.Input<string>;
    startIp?: pulumi.Input<string>;
    startMac?: pulumi.Input<string>;
    subType?: pulumi.Input<string>;
    subnet?: pulumi.Input<string>;
    subnetName?: pulumi.Input<string>;
    swVersion?: pulumi.Input<string>;
    tagDetectionLevel?: pulumi.Input<string>;
    tagType?: pulumi.Input<string>;
    tags?: pulumi.Input<string>;
    tenant?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    visibility?: pulumi.Input<string>;
    wildcard?: pulumi.Input<string>;
    wildcardFqdn?: pulumi.Input<string>;
}

export interface ObjectFirewallAddressDynamicMapping_Scope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface ObjectFirewallAddressList {
    ip?: pulumi.Input<string>;
    netId?: pulumi.Input<string>;
    objId?: pulumi.Input<string>;
}

export interface ObjectFirewallAddressTagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFirewallAddrgrp6DynamicMapping {
    _imageBase64?: pulumi.Input<string>;
    _scopes?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallAddrgrp6DynamicMapping_Scope>[]>;
    color?: pulumi.Input<number>;
    comment?: pulumi.Input<string>;
    exclude?: pulumi.Input<string>;
    excludeMembers?: pulumi.Input<pulumi.Input<string>[]>;
    fabricObject?: pulumi.Input<string>;
    globalObject?: pulumi.Input<number>;
    member?: pulumi.Input<string>;
    tags?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    visibility?: pulumi.Input<string>;
}

export interface ObjectFirewallAddrgrp6DynamicMapping_Scope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface ObjectFirewallAddrgrp6Tagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFirewallAddrgrpDynamicMapping {
    _imageBase64?: pulumi.Input<string>;
    _scopes?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallAddrgrpDynamicMapping_Scope>[]>;
    allowRouting?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    color?: pulumi.Input<number>;
    comment?: pulumi.Input<string>;
    exclude?: pulumi.Input<string>;
    excludeMember?: pulumi.Input<string>;
    fabricObject?: pulumi.Input<string>;
    globalObject?: pulumi.Input<number>;
    members?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    visibility?: pulumi.Input<string>;
}

export interface ObjectFirewallAddrgrpDynamicMapping_Scope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface ObjectFirewallAddrgrpTagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFirewallCarrierendpointbwlEntry {
    actions?: pulumi.Input<pulumi.Input<string>[]>;
    carrierEndpoint?: pulumi.Input<string>;
    logActions?: pulumi.Input<pulumi.Input<string>[]>;
    patternType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectFirewallCasbprofileSaasApplication {
    accessRules?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallCasbprofileSaasApplicationAccessRule>[]>;
    customControls?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallCasbprofileSaasApplicationCustomControl>[]>;
    domainControl?: pulumi.Input<string>;
    domainControlDomains?: pulumi.Input<pulumi.Input<string>[]>;
    log?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    safeSearch?: pulumi.Input<string>;
    safeSearchControls?: pulumi.Input<pulumi.Input<string>[]>;
    tenantControl?: pulumi.Input<string>;
    tenantControlTenants?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFirewallCasbprofileSaasApplicationAccessRule {
    action?: pulumi.Input<string>;
    bypasses?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
}

export interface ObjectFirewallCasbprofileSaasApplicationCustomControl {
    name?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallCasbprofileSaasApplicationCustomControlOption>[]>;
}

export interface ObjectFirewallCasbprofileSaasApplicationCustomControlOption {
    name?: pulumi.Input<string>;
    userInputs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFirewallCasbprofileSaasapplicationAccessRule {
    action?: pulumi.Input<string>;
    bypasses?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
}

export interface ObjectFirewallCasbprofileSaasapplicationCustomControl {
    name?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallCasbprofileSaasapplicationCustomControlOption>[]>;
}

export interface ObjectFirewallCasbprofileSaasapplicationCustomControlOption {
    name?: pulumi.Input<string>;
    userInputs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFirewallCasbprofileSaasapplicationCustomcontrolOption {
    name?: pulumi.Input<string>;
    userInputs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFirewallGtpApn {
    action?: pulumi.Input<string>;
    apnmember?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    selectionModes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFirewallGtpIeRemovePolicy {
    id?: pulumi.Input<number>;
    removeIes?: pulumi.Input<pulumi.Input<string>[]>;
    sgsnAddr?: pulumi.Input<string>;
    sgsnAddr6?: pulumi.Input<string>;
}

export interface ObjectFirewallGtpIeValidation {
    apnRestriction?: pulumi.Input<string>;
    chargingGatewayAddr?: pulumi.Input<string>;
    chargingId?: pulumi.Input<string>;
    endUserAddr?: pulumi.Input<string>;
    gsnAddr?: pulumi.Input<string>;
    imei?: pulumi.Input<string>;
    imsi?: pulumi.Input<string>;
    mmContext?: pulumi.Input<string>;
    msTzone?: pulumi.Input<string>;
    msValidated?: pulumi.Input<string>;
    msisdn?: pulumi.Input<string>;
    nsapi?: pulumi.Input<string>;
    pdpContext?: pulumi.Input<string>;
    qosProfile?: pulumi.Input<string>;
    rai?: pulumi.Input<string>;
    ratType?: pulumi.Input<string>;
    reorderingRequired?: pulumi.Input<string>;
    selectionMode?: pulumi.Input<string>;
    uli?: pulumi.Input<string>;
}

export interface ObjectFirewallGtpImsi {
    action?: pulumi.Input<string>;
    apnmember?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    mccMnc?: pulumi.Input<string>;
    msisdnPrefix?: pulumi.Input<string>;
    selectionModes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFirewallGtpIpPolicy {
    action?: pulumi.Input<string>;
    dstaddr?: pulumi.Input<string>;
    dstaddr6?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    srcaddr?: pulumi.Input<string>;
    srcaddr6?: pulumi.Input<string>;
}

export interface ObjectFirewallGtpMessageRateLimit {
    createAaPdpRequest?: pulumi.Input<number>;
    createAaPdpResponse?: pulumi.Input<number>;
    createMbmsRequest?: pulumi.Input<number>;
    createMbmsResponse?: pulumi.Input<number>;
    createPdpRequest?: pulumi.Input<number>;
    createPdpResponse?: pulumi.Input<number>;
    deleteAaPdpRequest?: pulumi.Input<number>;
    deleteAaPdpResponse?: pulumi.Input<number>;
    deleteMbmsRequest?: pulumi.Input<number>;
    deleteMbmsResponse?: pulumi.Input<number>;
    deletePdpRequest?: pulumi.Input<number>;
    deletePdpResponse?: pulumi.Input<number>;
    echoReponse?: pulumi.Input<number>;
    echoRequest?: pulumi.Input<number>;
    echoResponse?: pulumi.Input<number>;
    errorIndication?: pulumi.Input<number>;
    failureReportRequest?: pulumi.Input<number>;
    failureReportResponse?: pulumi.Input<number>;
    fwdRelocCompleteAck?: pulumi.Input<number>;
    fwdRelocationComplete?: pulumi.Input<number>;
    fwdRelocationRequest?: pulumi.Input<number>;
    fwdRelocationResponse?: pulumi.Input<number>;
    fwdSrnsContext?: pulumi.Input<number>;
    fwdSrnsContextAck?: pulumi.Input<number>;
    gPdu?: pulumi.Input<number>;
    identificationRequest?: pulumi.Input<number>;
    identificationResponse?: pulumi.Input<number>;
    mbmsDeRegRequest?: pulumi.Input<number>;
    mbmsDeRegResponse?: pulumi.Input<number>;
    mbmsNotifyRejRequest?: pulumi.Input<number>;
    mbmsNotifyRejResponse?: pulumi.Input<number>;
    mbmsNotifyRequest?: pulumi.Input<number>;
    mbmsNotifyResponse?: pulumi.Input<number>;
    mbmsRegRequest?: pulumi.Input<number>;
    mbmsRegResponse?: pulumi.Input<number>;
    mbmsSesStartRequest?: pulumi.Input<number>;
    mbmsSesStartResponse?: pulumi.Input<number>;
    mbmsSesStopRequest?: pulumi.Input<number>;
    mbmsSesStopResponse?: pulumi.Input<number>;
    noteMsRequest?: pulumi.Input<number>;
    noteMsResponse?: pulumi.Input<number>;
    pduNotifyRejRequest?: pulumi.Input<number>;
    pduNotifyRejResponse?: pulumi.Input<number>;
    pduNotifyRequest?: pulumi.Input<number>;
    pduNotifyResponse?: pulumi.Input<number>;
    ranInfo?: pulumi.Input<number>;
    relocationCancelRequest?: pulumi.Input<number>;
    relocationCancelResponse?: pulumi.Input<number>;
    sendRouteRequest?: pulumi.Input<number>;
    sendRouteResponse?: pulumi.Input<number>;
    sgsnContextAck?: pulumi.Input<number>;
    sgsnContextRequest?: pulumi.Input<number>;
    sgsnContextResponse?: pulumi.Input<number>;
    supportExtHdrNotify?: pulumi.Input<number>;
    updateMbmsRequest?: pulumi.Input<number>;
    updateMbmsResponse?: pulumi.Input<number>;
    updatePdpRequest?: pulumi.Input<number>;
    updatePdpResponse?: pulumi.Input<number>;
    versionNotSupport?: pulumi.Input<number>;
}

export interface ObjectFirewallGtpMessageRateLimitV0 {
    createPdpRequest?: pulumi.Input<number>;
    deletePdpRequest?: pulumi.Input<number>;
    echoRequest?: pulumi.Input<number>;
}

export interface ObjectFirewallGtpMessageRateLimitV1 {
    createPdpRequest?: pulumi.Input<number>;
    deletePdpRequest?: pulumi.Input<number>;
    echoRequest?: pulumi.Input<number>;
}

export interface ObjectFirewallGtpMessageRateLimitV2 {
    createSessionRequest?: pulumi.Input<number>;
    deleteSessionRequest?: pulumi.Input<number>;
    echoRequest?: pulumi.Input<number>;
}

export interface ObjectFirewallGtpNoipPolicy {
    action?: pulumi.Input<string>;
    end?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    start?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

export interface ObjectFirewallGtpPerApnShaper {
    apn?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    rateLimit?: pulumi.Input<number>;
    version?: pulumi.Input<number>;
}

export interface ObjectFirewallGtpPolicy {
    action?: pulumi.Input<string>;
    apnSelModes?: pulumi.Input<pulumi.Input<string>[]>;
    apnmember?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    imei?: pulumi.Input<string>;
    imsi?: pulumi.Input<string>;
    imsiPrefix?: pulumi.Input<string>;
    maxApnRestriction?: pulumi.Input<string>;
    messages?: pulumi.Input<pulumi.Input<string>[]>;
    msisdn?: pulumi.Input<string>;
    msisdnPrefix?: pulumi.Input<string>;
    rai?: pulumi.Input<string>;
    ratTypes?: pulumi.Input<pulumi.Input<string>[]>;
    uli?: pulumi.Input<string>;
}

export interface ObjectFirewallGtpPolicyV2 {
    action?: pulumi.Input<string>;
    apnSelModes?: pulumi.Input<pulumi.Input<string>[]>;
    apnmember?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    imsiPrefix?: pulumi.Input<string>;
    maxApnRestriction?: pulumi.Input<string>;
    mei?: pulumi.Input<string>;
    messages?: pulumi.Input<pulumi.Input<string>[]>;
    msisdnPrefix?: pulumi.Input<string>;
    ratTypes?: pulumi.Input<pulumi.Input<string>[]>;
    ulis?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFirewallIdentitybasedrouteRule {
    device?: pulumi.Input<string>;
    gateway?: pulumi.Input<string>;
    groups?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface ObjectFirewallInternetserviceEntry {
    id?: pulumi.Input<number>;
    ipNumber?: pulumi.Input<number>;
    ipRangeNumber?: pulumi.Input<number>;
    ports?: pulumi.Input<pulumi.Input<number>[]>;
    protocol?: pulumi.Input<number>;
}

export interface ObjectFirewallInternetserviceadditionEntry {
    addrMode?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    portRanges?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallInternetserviceadditionEntryPortRange>[]>;
    protocol?: pulumi.Input<number>;
}

export interface ObjectFirewallInternetserviceadditionEntryPortRange {
    endPort?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface ObjectFirewallInternetservicecustomDisableEntry {
    id?: pulumi.Input<number>;
    ipRanges?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallInternetservicecustomDisableEntryIpRange>[]>;
    ports?: pulumi.Input<pulumi.Input<number>[]>;
    protocol?: pulumi.Input<number>;
}

export interface ObjectFirewallInternetservicecustomDisableEntryIpRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
}

export interface ObjectFirewallInternetservicecustomEntry {
    addrMode?: pulumi.Input<string>;
    dst?: pulumi.Input<string>;
    dst6s?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<number>;
    portRanges?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallInternetservicecustomEntryPortRange>[]>;
    protocol?: pulumi.Input<number>;
}

export interface ObjectFirewallInternetservicecustomEntryPortRange {
    endPort?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    startPort?: pulumi.Input<number>;
}

export interface ObjectFirewallIppool6DynamicMapping {
    _scopes?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallIppool6DynamicMapping_Scope>[]>;
    addNat46Route?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    endip?: pulumi.Input<string>;
    nat46?: pulumi.Input<string>;
    startip?: pulumi.Input<string>;
}

export interface ObjectFirewallIppool6DynamicMapping_Scope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface ObjectFirewallIppoolDynamicMapping {
    _scopes?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallIppoolDynamicMapping_Scope>[]>;
    addNat64Route?: pulumi.Input<string>;
    arpIntf?: pulumi.Input<string>;
    arpReply?: pulumi.Input<string>;
    associatedInterface?: pulumi.Input<string>;
    blockSize?: pulumi.Input<number>;
    cgnBlockSize?: pulumi.Input<number>;
    cgnClientEndip?: pulumi.Input<string>;
    cgnClientIpv6shift?: pulumi.Input<number>;
    cgnClientStartip?: pulumi.Input<string>;
    cgnFixedalloc?: pulumi.Input<string>;
    cgnOverload?: pulumi.Input<string>;
    cgnPortEnd?: pulumi.Input<number>;
    cgnPortStart?: pulumi.Input<number>;
    cgnSpa?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    endip?: pulumi.Input<string>;
    endport?: pulumi.Input<number>;
    excludeIps?: pulumi.Input<pulumi.Input<string>[]>;
    nat64?: pulumi.Input<string>;
    numBlocksPerUser?: pulumi.Input<number>;
    pbaInterimLog?: pulumi.Input<number>;
    pbaTimeout?: pulumi.Input<number>;
    permitAnyHost?: pulumi.Input<string>;
    portPerUser?: pulumi.Input<number>;
    sourceEndip?: pulumi.Input<string>;
    sourceStartip?: pulumi.Input<string>;
    startip?: pulumi.Input<string>;
    startport?: pulumi.Input<number>;
    subnetBroadcastInIppool?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    utilizationAlarmClear?: pulumi.Input<number>;
    utilizationAlarmRaise?: pulumi.Input<number>;
}

export interface ObjectFirewallIppoolDynamicMapping_Scope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface ObjectFirewallMmsprofileDupe {
    action1s?: pulumi.Input<pulumi.Input<string>[]>;
    action2s?: pulumi.Input<pulumi.Input<string>[]>;
    action3s?: pulumi.Input<pulumi.Input<string>[]>;
    blockTime1?: pulumi.Input<number>;
    blockTime2?: pulumi.Input<number>;
    blockTime3?: pulumi.Input<number>;
    limit1?: pulumi.Input<number>;
    limit2?: pulumi.Input<number>;
    limit3?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    status1?: pulumi.Input<string>;
    status2?: pulumi.Input<string>;
    status3?: pulumi.Input<string>;
    window1?: pulumi.Input<number>;
    window2?: pulumi.Input<number>;
    window3?: pulumi.Input<number>;
}

export interface ObjectFirewallMmsprofileFlood {
    action1s?: pulumi.Input<pulumi.Input<string>[]>;
    action2s?: pulumi.Input<pulumi.Input<string>[]>;
    action3s?: pulumi.Input<pulumi.Input<string>[]>;
    blockTime1?: pulumi.Input<number>;
    blockTime2?: pulumi.Input<number>;
    blockTime3?: pulumi.Input<number>;
    limit1?: pulumi.Input<number>;
    limit2?: pulumi.Input<number>;
    limit3?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    status1?: pulumi.Input<string>;
    status2?: pulumi.Input<string>;
    status3?: pulumi.Input<string>;
    window1?: pulumi.Input<number>;
    window2?: pulumi.Input<number>;
    window3?: pulumi.Input<number>;
}

export interface ObjectFirewallMmsprofileNotifMsisdn {
    msisdn?: pulumi.Input<string>;
    thresholds?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFirewallMmsprofileNotification {
    alertInt?: pulumi.Input<number>;
    alertIntMode?: pulumi.Input<string>;
    alertSrcMsisdn?: pulumi.Input<string>;
    alertStatus?: pulumi.Input<string>;
    bwordInt?: pulumi.Input<number>;
    bwordIntMode?: pulumi.Input<string>;
    bwordStatus?: pulumi.Input<string>;
    carrierEndpointBwlInt?: pulumi.Input<number>;
    carrierEndpointBwlIntMode?: pulumi.Input<string>;
    carrierEndpointBwlStatus?: pulumi.Input<string>;
    daysAlloweds?: pulumi.Input<pulumi.Input<string>[]>;
    detectServer?: pulumi.Input<string>;
    dupeInt?: pulumi.Input<number>;
    dupeIntMode?: pulumi.Input<string>;
    dupeStatus?: pulumi.Input<string>;
    fileBlockInt?: pulumi.Input<number>;
    fileBlockIntMode?: pulumi.Input<string>;
    fileBlockStatus?: pulumi.Input<string>;
    floodInt?: pulumi.Input<number>;
    floodIntMode?: pulumi.Input<string>;
    floodStatus?: pulumi.Input<string>;
    fromInHeader?: pulumi.Input<string>;
    mmsChecksumInt?: pulumi.Input<number>;
    mmsChecksumIntMode?: pulumi.Input<string>;
    mmsChecksumStatus?: pulumi.Input<string>;
    mmscHostname?: pulumi.Input<string>;
    mmscPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    mmscPort?: pulumi.Input<number>;
    mmscUrl?: pulumi.Input<string>;
    mmscUsername?: pulumi.Input<string>;
    msgProtocol?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    rateLimit?: pulumi.Input<number>;
    todWindowDuration?: pulumi.Input<string>;
    todWindowEnd?: pulumi.Input<string>;
    todWindowStart?: pulumi.Input<string>;
    userDomain?: pulumi.Input<string>;
    vasId?: pulumi.Input<string>;
    vaspId?: pulumi.Input<string>;
    virusInt?: pulumi.Input<number>;
    virusIntMode?: pulumi.Input<string>;
    virusStatus?: pulumi.Input<string>;
}

export interface ObjectFirewallMmsprofileOutbreakPrevention {
    externalBlocklist?: pulumi.Input<string>;
    ftgdService?: pulumi.Input<string>;
}

export interface ObjectFirewallMulticastaddress6Tagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<string>;
}

export interface ObjectFirewallMulticastaddressTagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFirewallProfileprotocoloptionsCifs {
    domainController?: pulumi.Input<string>;
    fileFilter?: pulumi.Input<inputs.ObjectFirewallProfileprotocoloptionsCifsFileFilter>;
    options?: pulumi.Input<pulumi.Input<string>[]>;
    oversizeLimit?: pulumi.Input<number>;
    ports?: pulumi.Input<pulumi.Input<number>[]>;
    scanBzip2?: pulumi.Input<string>;
    serverCredentialType?: pulumi.Input<string>;
    serverKeytabs?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallProfileprotocoloptionsCifsServerKeytab>[]>;
    status?: pulumi.Input<string>;
    tcpWindowMaximum?: pulumi.Input<number>;
    tcpWindowMinimum?: pulumi.Input<number>;
    tcpWindowSize?: pulumi.Input<number>;
    tcpWindowType?: pulumi.Input<string>;
    uncompressedNestLimit?: pulumi.Input<number>;
    uncompressedOversizeLimit?: pulumi.Input<number>;
}

export interface ObjectFirewallProfileprotocoloptionsCifsFileFilter {
    entries?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallProfileprotocoloptionsCifsFileFilterEntry>[]>;
    log?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectFirewallProfileprotocoloptionsCifsFileFilterEntry {
    action?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    fileTypes?: pulumi.Input<pulumi.Input<string>[]>;
    filter?: pulumi.Input<string>;
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFirewallProfileprotocoloptionsCifsServerKeytab {
    keytab?: pulumi.Input<string>;
    passwords?: pulumi.Input<pulumi.Input<string>[]>;
    principal?: pulumi.Input<string>;
}

export interface ObjectFirewallProfileprotocoloptionsDns {
    ports?: pulumi.Input<pulumi.Input<number>[]>;
    status?: pulumi.Input<string>;
}

export interface ObjectFirewallProfileprotocoloptionsFtp {
    comfortAmount?: pulumi.Input<number>;
    comfortInterval?: pulumi.Input<number>;
    explicitFtpTls?: pulumi.Input<string>;
    inspectAll?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<string>[]>;
    oversizeLimit?: pulumi.Input<number>;
    ports?: pulumi.Input<pulumi.Input<number>[]>;
    scanBzip2?: pulumi.Input<string>;
    sslOffloaded?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    streamBasedUncompressedLimit?: pulumi.Input<number>;
    tcpWindowMaximum?: pulumi.Input<number>;
    tcpWindowMinimum?: pulumi.Input<number>;
    tcpWindowSize?: pulumi.Input<number>;
    tcpWindowType?: pulumi.Input<string>;
    uncompressedNestLimit?: pulumi.Input<number>;
    uncompressedOversizeLimit?: pulumi.Input<number>;
}

export interface ObjectFirewallProfileprotocoloptionsHttp {
    addressIpRating?: pulumi.Input<string>;
    blockPageStatusCode?: pulumi.Input<number>;
    comfortAmount?: pulumi.Input<number>;
    comfortInterval?: pulumi.Input<number>;
    fortinetBar?: pulumi.Input<string>;
    fortinetBarPort?: pulumi.Input<number>;
    h2c?: pulumi.Input<string>;
    httpPolicy?: pulumi.Input<string>;
    inspectAll?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<string>[]>;
    oversizeLimit?: pulumi.Input<number>;
    ports?: pulumi.Input<pulumi.Input<number>[]>;
    postLangs?: pulumi.Input<pulumi.Input<string>[]>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    rangeBlock?: pulumi.Input<string>;
    retryCount?: pulumi.Input<number>;
    scanBzip2?: pulumi.Input<string>;
    sslOffloaded?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    streamBasedUncompressedLimit?: pulumi.Input<number>;
    streamingContentBypass?: pulumi.Input<string>;
    stripXForwardedFor?: pulumi.Input<string>;
    switchingProtocols?: pulumi.Input<string>;
    tcpWindowMaximum?: pulumi.Input<number>;
    tcpWindowMinimum?: pulumi.Input<number>;
    tcpWindowSize?: pulumi.Input<number>;
    tcpWindowType?: pulumi.Input<string>;
    tunnelNonHttp?: pulumi.Input<string>;
    uncompressedNestLimit?: pulumi.Input<number>;
    uncompressedOversizeLimit?: pulumi.Input<number>;
    unknownContentEncoding?: pulumi.Input<string>;
    unknownHttpVersion?: pulumi.Input<string>;
    verifyDnsForPolicyMatching?: pulumi.Input<string>;
}

export interface ObjectFirewallProfileprotocoloptionsImap {
    inspectAll?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<string>[]>;
    oversizeLimit?: pulumi.Input<number>;
    ports?: pulumi.Input<pulumi.Input<number>[]>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    scanBzip2?: pulumi.Input<string>;
    sslOffloaded?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    uncompressedNestLimit?: pulumi.Input<number>;
    uncompressedOversizeLimit?: pulumi.Input<number>;
}

export interface ObjectFirewallProfileprotocoloptionsMailSignature {
    signature?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectFirewallProfileprotocoloptionsMapi {
    options?: pulumi.Input<pulumi.Input<string>[]>;
    oversizeLimit?: pulumi.Input<number>;
    ports?: pulumi.Input<pulumi.Input<number>[]>;
    scanBzip2?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    uncompressedNestLimit?: pulumi.Input<number>;
    uncompressedOversizeLimit?: pulumi.Input<number>;
}

export interface ObjectFirewallProfileprotocoloptionsNntp {
    inspectAll?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<string>[]>;
    oversizeLimit?: pulumi.Input<number>;
    ports?: pulumi.Input<pulumi.Input<number>[]>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    scanBzip2?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    uncompressedNestLimit?: pulumi.Input<number>;
    uncompressedOversizeLimit?: pulumi.Input<number>;
}

export interface ObjectFirewallProfileprotocoloptionsPop3 {
    inspectAll?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<string>[]>;
    oversizeLimit?: pulumi.Input<number>;
    ports?: pulumi.Input<pulumi.Input<number>[]>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    scanBzip2?: pulumi.Input<string>;
    sslOffloaded?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    uncompressedNestLimit?: pulumi.Input<number>;
    uncompressedOversizeLimit?: pulumi.Input<number>;
}

export interface ObjectFirewallProfileprotocoloptionsSmtp {
    inspectAll?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<string>[]>;
    oversizeLimit?: pulumi.Input<number>;
    ports?: pulumi.Input<pulumi.Input<number>[]>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    scanBzip2?: pulumi.Input<string>;
    serverBusy?: pulumi.Input<string>;
    sslOffloaded?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    uncompressedNestLimit?: pulumi.Input<number>;
    uncompressedOversizeLimit?: pulumi.Input<number>;
}

export interface ObjectFirewallProfileprotocoloptionsSsh {
    comfortAmount?: pulumi.Input<number>;
    comfortInterval?: pulumi.Input<number>;
    options?: pulumi.Input<pulumi.Input<string>[]>;
    oversizeLimit?: pulumi.Input<number>;
    scanBzip2?: pulumi.Input<string>;
    sslOffloaded?: pulumi.Input<string>;
    streamBasedUncompressedLimit?: pulumi.Input<number>;
    tcpWindowMaximum?: pulumi.Input<number>;
    tcpWindowMinimum?: pulumi.Input<number>;
    tcpWindowSize?: pulumi.Input<number>;
    tcpWindowType?: pulumi.Input<string>;
    uncompressedNestLimit?: pulumi.Input<number>;
    uncompressedOversizeLimit?: pulumi.Input<number>;
}

export interface ObjectFirewallProxyaddressHeaderGroup {
    caseSensitivity?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    headerName?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface ObjectFirewallProxyaddressTagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFirewallProxyaddrgrpTagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFirewallShapingprofileShapingEntry {
    burstInMsec?: pulumi.Input<number>;
    cburstInMsec?: pulumi.Input<number>;
    classId?: pulumi.Input<string>;
    guaranteedBandwidthPercentage?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    limit?: pulumi.Input<number>;
    max?: pulumi.Input<number>;
    maximumBandwidthPercentage?: pulumi.Input<number>;
    min?: pulumi.Input<number>;
    priority?: pulumi.Input<string>;
    redProbability?: pulumi.Input<number>;
}

export interface ObjectFirewallSslsshprofileDot {
    certValidationFailure?: pulumi.Input<string>;
    certValidationTimeout?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    expiredServerCert?: pulumi.Input<string>;
    minAllowedSslVersion?: pulumi.Input<string>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    quic?: pulumi.Input<string>;
    revokedServerCert?: pulumi.Input<string>;
    sniServerCertCheck?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    unsupportedSslCipher?: pulumi.Input<string>;
    unsupportedSslNegotiation?: pulumi.Input<string>;
    unsupportedSslVersion?: pulumi.Input<string>;
    untrustedServerCert?: pulumi.Input<string>;
}

export interface ObjectFirewallSslsshprofileEchOuterSni {
    name?: pulumi.Input<string>;
    sni?: pulumi.Input<string>;
}

export interface ObjectFirewallSslsshprofileFtps {
    allowInvalidServerCert?: pulumi.Input<string>;
    certValidationFailure?: pulumi.Input<string>;
    certValidationTimeout?: pulumi.Input<string>;
    clientCertRequest?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    expiredServerCert?: pulumi.Input<string>;
    invalidServerCert?: pulumi.Input<string>;
    minAllowedSslVersion?: pulumi.Input<string>;
    ports?: pulumi.Input<pulumi.Input<number>[]>;
    revokedServerCert?: pulumi.Input<string>;
    sniServerCertCheck?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    unsupportedSsl?: pulumi.Input<string>;
    unsupportedSslCipher?: pulumi.Input<string>;
    unsupportedSslNegotiation?: pulumi.Input<string>;
    unsupportedSslVersion?: pulumi.Input<string>;
    untrustedCert?: pulumi.Input<string>;
    untrustedServerCert?: pulumi.Input<string>;
}

export interface ObjectFirewallSslsshprofileHttps {
    allowInvalidServerCert?: pulumi.Input<string>;
    certProbeFailure?: pulumi.Input<string>;
    certValidationFailure?: pulumi.Input<string>;
    certValidationTimeout?: pulumi.Input<string>;
    clientCertRequest?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    encryptedClientHello?: pulumi.Input<string>;
    expiredServerCert?: pulumi.Input<string>;
    invalidServerCert?: pulumi.Input<string>;
    minAllowedSslVersion?: pulumi.Input<string>;
    ports?: pulumi.Input<pulumi.Input<number>[]>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    quic?: pulumi.Input<string>;
    revokedServerCert?: pulumi.Input<string>;
    sniServerCertCheck?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    unsupportedSsl?: pulumi.Input<string>;
    unsupportedSslCipher?: pulumi.Input<string>;
    unsupportedSslNegotiation?: pulumi.Input<string>;
    unsupportedSslVersion?: pulumi.Input<string>;
    untrustedCert?: pulumi.Input<string>;
    untrustedServerCert?: pulumi.Input<string>;
}

export interface ObjectFirewallSslsshprofileImaps {
    allowInvalidServerCert?: pulumi.Input<string>;
    certValidationFailure?: pulumi.Input<string>;
    certValidationTimeout?: pulumi.Input<string>;
    clientCertRequest?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    expiredServerCert?: pulumi.Input<string>;
    invalidServerCert?: pulumi.Input<string>;
    minAllowedSslVersion?: pulumi.Input<string>;
    ports?: pulumi.Input<pulumi.Input<number>[]>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    revokedServerCert?: pulumi.Input<string>;
    sniServerCertCheck?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    unsupportedSsl?: pulumi.Input<string>;
    unsupportedSslCipher?: pulumi.Input<string>;
    unsupportedSslNegotiation?: pulumi.Input<string>;
    unsupportedSslVersion?: pulumi.Input<string>;
    untrustedCert?: pulumi.Input<string>;
    untrustedServerCert?: pulumi.Input<string>;
}

export interface ObjectFirewallSslsshprofilePop3s {
    allowInvalidServerCert?: pulumi.Input<string>;
    certValidationFailure?: pulumi.Input<string>;
    certValidationTimeout?: pulumi.Input<string>;
    clientCertRequest?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    expiredServerCert?: pulumi.Input<string>;
    invalidServerCert?: pulumi.Input<string>;
    minAllowedSslVersion?: pulumi.Input<string>;
    ports?: pulumi.Input<pulumi.Input<number>[]>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    revokedServerCert?: pulumi.Input<string>;
    sniServerCertCheck?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    unsupportedSsl?: pulumi.Input<string>;
    unsupportedSslCipher?: pulumi.Input<string>;
    unsupportedSslNegotiation?: pulumi.Input<string>;
    unsupportedSslVersion?: pulumi.Input<string>;
    untrustedCert?: pulumi.Input<string>;
    untrustedServerCert?: pulumi.Input<string>;
}

export interface ObjectFirewallSslsshprofileSmtps {
    allowInvalidServerCert?: pulumi.Input<string>;
    certValidationFailure?: pulumi.Input<string>;
    certValidationTimeout?: pulumi.Input<string>;
    clientCertRequest?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    expiredServerCert?: pulumi.Input<string>;
    invalidServerCert?: pulumi.Input<string>;
    minAllowedSslVersion?: pulumi.Input<string>;
    ports?: pulumi.Input<pulumi.Input<number>[]>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    revokedServerCert?: pulumi.Input<string>;
    sniServerCertCheck?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    unsupportedSsl?: pulumi.Input<string>;
    unsupportedSslCipher?: pulumi.Input<string>;
    unsupportedSslNegotiation?: pulumi.Input<string>;
    unsupportedSslVersion?: pulumi.Input<string>;
    untrustedCert?: pulumi.Input<string>;
    untrustedServerCert?: pulumi.Input<string>;
}

export interface ObjectFirewallSslsshprofileSsh {
    inspectAll?: pulumi.Input<string>;
    ports?: pulumi.Input<pulumi.Input<number>[]>;
    proxyAfterTcpHandshake?: pulumi.Input<string>;
    sshAlgorithm?: pulumi.Input<string>;
    sshPolicyCheck?: pulumi.Input<string>;
    sshTunPolicyCheck?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    unsupportedVersion?: pulumi.Input<string>;
}

export interface ObjectFirewallSslsshprofileSsl {
    allowInvalidServerCert?: pulumi.Input<string>;
    certProbeFailure?: pulumi.Input<string>;
    certValidationFailure?: pulumi.Input<string>;
    certValidationTimeout?: pulumi.Input<string>;
    clientCertRequest?: pulumi.Input<string>;
    clientCertificate?: pulumi.Input<string>;
    encryptedClientHello?: pulumi.Input<string>;
    expiredServerCert?: pulumi.Input<string>;
    inspectAll?: pulumi.Input<string>;
    invalidServerCert?: pulumi.Input<string>;
    minAllowedSslVersion?: pulumi.Input<string>;
    revokedServerCert?: pulumi.Input<string>;
    sniServerCertCheck?: pulumi.Input<string>;
    unsupportedSsl?: pulumi.Input<string>;
    unsupportedSslCipher?: pulumi.Input<string>;
    unsupportedSslNegotiation?: pulumi.Input<string>;
    unsupportedSslVersion?: pulumi.Input<string>;
    untrustedCert?: pulumi.Input<string>;
    untrustedServerCert?: pulumi.Input<string>;
}

export interface ObjectFirewallSslsshprofileSslExempt {
    address?: pulumi.Input<string>;
    address6?: pulumi.Input<string>;
    fortiguardCategories?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<number>;
    regex?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    wildcardFqdns?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFirewallSslsshprofileSslServer {
    ftpsClientCertRequest?: pulumi.Input<string>;
    ftpsClientCertificate?: pulumi.Input<string>;
    httpsClientCertRequest?: pulumi.Input<string>;
    httpsClientCertificate?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    imapsClientCertRequest?: pulumi.Input<string>;
    imapsClientCertificate?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    pop3sClientCertRequest?: pulumi.Input<string>;
    pop3sClientCertificate?: pulumi.Input<string>;
    smtpsClientCertRequest?: pulumi.Input<string>;
    smtpsClientCertificate?: pulumi.Input<string>;
    sslOtherClientCertRequest?: pulumi.Input<string>;
    sslOtherClientCertificate?: pulumi.Input<string>;
}

export interface ObjectFirewallVip46DynamicMapping {
    _scopes?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallVip46DynamicMapping_Scope>[]>;
    arpReply?: pulumi.Input<string>;
    color?: pulumi.Input<number>;
    comment?: pulumi.Input<string>;
    extip?: pulumi.Input<string>;
    extport?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ldbMethod?: pulumi.Input<string>;
    mappedip?: pulumi.Input<string>;
    mappedport?: pulumi.Input<string>;
    monitor?: pulumi.Input<string>;
    portforward?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    serverType?: pulumi.Input<string>;
    srcFilters?: pulumi.Input<pulumi.Input<string>[]>;
    srcintfFilter?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface ObjectFirewallVip46DynamicMapping_Scope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface ObjectFirewallVip46Realserver {
    clientIp?: pulumi.Input<string>;
    healthcheck?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    maxConnections?: pulumi.Input<number>;
    monitor?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface ObjectFirewallVip64DynamicMapping {
    _scopes?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallVip64DynamicMapping_Scope>[]>;
    arpReply?: pulumi.Input<string>;
    color?: pulumi.Input<number>;
    comment?: pulumi.Input<string>;
    extip?: pulumi.Input<string>;
    extport?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ldbMethod?: pulumi.Input<string>;
    mappedip?: pulumi.Input<string>;
    mappedport?: pulumi.Input<string>;
    monitor?: pulumi.Input<string>;
    portforward?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    serverType?: pulumi.Input<string>;
    srcFilters?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface ObjectFirewallVip64DynamicMapping_Scope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface ObjectFirewallVip64Realserver {
    clientIp?: pulumi.Input<string>;
    healthcheck?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    maxConnections?: pulumi.Input<number>;
    monitor?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface ObjectFirewallVip6DynamicMapping {
    _scopes?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallVip6DynamicMapping_Scope>[]>;
    addNat64Route?: pulumi.Input<string>;
    arpReply?: pulumi.Input<string>;
    color?: pulumi.Input<number>;
    comment?: pulumi.Input<string>;
    embeddedIpv4Address?: pulumi.Input<string>;
    extip?: pulumi.Input<string>;
    extport?: pulumi.Input<string>;
    h2Support?: pulumi.Input<string>;
    h3Support?: pulumi.Input<string>;
    httpCookieAge?: pulumi.Input<number>;
    httpCookieDomain?: pulumi.Input<string>;
    httpCookieDomainFromHost?: pulumi.Input<string>;
    httpCookieGeneration?: pulumi.Input<number>;
    httpCookiePath?: pulumi.Input<string>;
    httpCookieShare?: pulumi.Input<string>;
    httpIpHeader?: pulumi.Input<string>;
    httpIpHeaderName?: pulumi.Input<string>;
    httpMultiplex?: pulumi.Input<string>;
    httpRedirect?: pulumi.Input<string>;
    httpsCookieSecure?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ipv4Mappedip?: pulumi.Input<string>;
    ipv4Mappedport?: pulumi.Input<string>;
    ldbMethod?: pulumi.Input<string>;
    mappedip?: pulumi.Input<string>;
    mappedport?: pulumi.Input<string>;
    maxEmbryonicConnections?: pulumi.Input<number>;
    monitor?: pulumi.Input<string>;
    nat64?: pulumi.Input<string>;
    nat66?: pulumi.Input<string>;
    natSourceVip?: pulumi.Input<string>;
    ndpReply?: pulumi.Input<string>;
    outlookWebAccess?: pulumi.Input<string>;
    persistence?: pulumi.Input<string>;
    portforward?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    realservers?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallVip6DynamicMappingRealserver>[]>;
    serverType?: pulumi.Input<string>;
    srcFilters?: pulumi.Input<pulumi.Input<string>[]>;
    srcVipFilter?: pulumi.Input<string>;
    sslAcceptFfdheGroups?: pulumi.Input<string>;
    sslAlgorithm?: pulumi.Input<string>;
    sslCertificate?: pulumi.Input<string>;
    sslCipherSuites?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallVip6DynamicMappingSslCipherSuite>[]>;
    sslClientFallback?: pulumi.Input<string>;
    sslClientRekeyCount?: pulumi.Input<number>;
    sslClientRenegotiation?: pulumi.Input<string>;
    sslClientSessionStateMax?: pulumi.Input<number>;
    sslClientSessionStateTimeout?: pulumi.Input<number>;
    sslClientSessionStateType?: pulumi.Input<string>;
    sslDhBits?: pulumi.Input<string>;
    sslHpkp?: pulumi.Input<string>;
    sslHpkpAge?: pulumi.Input<number>;
    sslHpkpBackup?: pulumi.Input<string>;
    sslHpkpIncludeSubdomains?: pulumi.Input<string>;
    sslHpkpPrimary?: pulumi.Input<string>;
    sslHpkpReportUri?: pulumi.Input<string>;
    sslHsts?: pulumi.Input<string>;
    sslHstsAge?: pulumi.Input<number>;
    sslHstsIncludeSubdomains?: pulumi.Input<string>;
    sslHttpLocationConversion?: pulumi.Input<string>;
    sslHttpMatchHost?: pulumi.Input<string>;
    sslMaxVersion?: pulumi.Input<string>;
    sslMinVersion?: pulumi.Input<string>;
    sslMode?: pulumi.Input<string>;
    sslPfs?: pulumi.Input<string>;
    sslSendEmptyFrags?: pulumi.Input<string>;
    sslServerAlgorithm?: pulumi.Input<string>;
    sslServerMaxVersion?: pulumi.Input<string>;
    sslServerMinVersion?: pulumi.Input<string>;
    sslServerRenegotiation?: pulumi.Input<string>;
    sslServerSessionStateMax?: pulumi.Input<number>;
    sslServerSessionStateTimeout?: pulumi.Input<number>;
    sslServerSessionStateType?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    weblogicServer?: pulumi.Input<string>;
    websphereServer?: pulumi.Input<string>;
}

export interface ObjectFirewallVip6DynamicMappingRealserver {
    clientIp?: pulumi.Input<string>;
    healthcheck?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<number>;
    httpHost?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    maxConnections?: pulumi.Input<number>;
    monitor?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    translateHost?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface ObjectFirewallVip6DynamicMappingSslCipherSuite {
    cipher?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    versions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFirewallVip6DynamicMapping_Scope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface ObjectFirewallVip6Quic {
    ackDelayExponent?: pulumi.Input<number>;
    activeConnectionIdLimit?: pulumi.Input<number>;
    activeMigration?: pulumi.Input<string>;
    greaseQuicBit?: pulumi.Input<string>;
    maxAckDelay?: pulumi.Input<number>;
    maxDatagramFrameSize?: pulumi.Input<number>;
    maxIdleTimeout?: pulumi.Input<number>;
    maxUdpPayloadSize?: pulumi.Input<number>;
}

export interface ObjectFirewallVip6Realserver {
    clientIp?: pulumi.Input<string>;
    healthcheck?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<number>;
    httpHost?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    maxConnections?: pulumi.Input<number>;
    monitor?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    translateHost?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface ObjectFirewallVip6SslCipherSuite {
    cipher?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    versions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFirewallVip6SslServerCipherSuite {
    cipher?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    versions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFirewallVipDynamicMapping {
    _scopes?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallVipDynamicMapping_Scope>[]>;
    addNat46Route?: pulumi.Input<string>;
    arpReply?: pulumi.Input<string>;
    color?: pulumi.Input<number>;
    comment?: pulumi.Input<string>;
    dnsMappingTtl?: pulumi.Input<number>;
    extaddr?: pulumi.Input<string>;
    extintf?: pulumi.Input<string>;
    extip?: pulumi.Input<string>;
    extport?: pulumi.Input<string>;
    gratuitousArpInterval?: pulumi.Input<number>;
    gslbDomainName?: pulumi.Input<string>;
    gslbHostname?: pulumi.Input<string>;
    h2Support?: pulumi.Input<string>;
    h3Support?: pulumi.Input<string>;
    httpCookieAge?: pulumi.Input<number>;
    httpCookieDomain?: pulumi.Input<string>;
    httpCookieDomainFromHost?: pulumi.Input<string>;
    httpCookieGeneration?: pulumi.Input<number>;
    httpCookiePath?: pulumi.Input<string>;
    httpCookieShare?: pulumi.Input<string>;
    httpIpHeader?: pulumi.Input<string>;
    httpIpHeaderName?: pulumi.Input<string>;
    httpMultiplex?: pulumi.Input<string>;
    httpMultiplexMaxConcurrentRequest?: pulumi.Input<number>;
    httpMultiplexMaxRequest?: pulumi.Input<number>;
    httpMultiplexTtl?: pulumi.Input<number>;
    httpRedirect?: pulumi.Input<string>;
    httpSupportedMaxVersion?: pulumi.Input<string>;
    httpsCookieSecure?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ipv6Mappedip?: pulumi.Input<string>;
    ipv6Mappedport?: pulumi.Input<string>;
    ldbMethod?: pulumi.Input<string>;
    mappedAddr?: pulumi.Input<string>;
    mappedips?: pulumi.Input<pulumi.Input<string>[]>;
    mappedport?: pulumi.Input<string>;
    maxEmbryonicConnections?: pulumi.Input<number>;
    monitor?: pulumi.Input<string>;
    nat44?: pulumi.Input<string>;
    nat46?: pulumi.Input<string>;
    natSourceVip?: pulumi.Input<string>;
    oneClickGslbServer?: pulumi.Input<string>;
    outlookWebAccess?: pulumi.Input<string>;
    persistence?: pulumi.Input<string>;
    portforward?: pulumi.Input<string>;
    portmappingType?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    realservers?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallVipDynamicMappingRealserver>[]>;
    serverType?: pulumi.Input<string>;
    service?: pulumi.Input<string>;
    srcFilters?: pulumi.Input<pulumi.Input<string>[]>;
    srcVipFilter?: pulumi.Input<string>;
    srcintfFilters?: pulumi.Input<pulumi.Input<string>[]>;
    sslAcceptFfdheGroups?: pulumi.Input<string>;
    sslAlgorithm?: pulumi.Input<string>;
    sslCertificate?: pulumi.Input<string>;
    sslCipherSuites?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallVipDynamicMappingSslCipherSuite>[]>;
    sslClientFallback?: pulumi.Input<string>;
    sslClientRekeyCount?: pulumi.Input<number>;
    sslClientRenegotiation?: pulumi.Input<string>;
    sslClientSessionStateMax?: pulumi.Input<number>;
    sslClientSessionStateTimeout?: pulumi.Input<number>;
    sslClientSessionStateType?: pulumi.Input<string>;
    sslDhBits?: pulumi.Input<string>;
    sslHpkp?: pulumi.Input<string>;
    sslHpkpAge?: pulumi.Input<number>;
    sslHpkpBackup?: pulumi.Input<string>;
    sslHpkpIncludeSubdomains?: pulumi.Input<string>;
    sslHpkpPrimary?: pulumi.Input<string>;
    sslHpkpReportUri?: pulumi.Input<string>;
    sslHsts?: pulumi.Input<string>;
    sslHstsAge?: pulumi.Input<number>;
    sslHstsIncludeSubdomains?: pulumi.Input<string>;
    sslHttpLocationConversion?: pulumi.Input<string>;
    sslHttpMatchHost?: pulumi.Input<string>;
    sslMaxVersion?: pulumi.Input<string>;
    sslMinVersion?: pulumi.Input<string>;
    sslMode?: pulumi.Input<string>;
    sslPfs?: pulumi.Input<string>;
    sslSendEmptyFrags?: pulumi.Input<string>;
    sslServerAlgorithm?: pulumi.Input<string>;
    sslServerMaxVersion?: pulumi.Input<string>;
    sslServerMinVersion?: pulumi.Input<string>;
    sslServerRenegotiation?: pulumi.Input<string>;
    sslServerSessionStateMax?: pulumi.Input<number>;
    sslServerSessionStateTimeout?: pulumi.Input<number>;
    sslServerSessionStateType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    weblogicServer?: pulumi.Input<string>;
    websphereServer?: pulumi.Input<string>;
}

export interface ObjectFirewallVipDynamicMappingRealserver {
    address?: pulumi.Input<string>;
    clientIps?: pulumi.Input<pulumi.Input<string>[]>;
    healthCheckProto?: pulumi.Input<string>;
    healthcheck?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<number>;
    httpHost?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    maxConnections?: pulumi.Input<number>;
    monitor?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    seq?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    translateHost?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface ObjectFirewallVipDynamicMappingSslCipherSuite {
    cipher?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    versions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFirewallVipDynamicMapping_Scope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface ObjectFirewallVipGslbPublicIp {
    index?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
}

export interface ObjectFirewallVipQuic {
    ackDelayExponent?: pulumi.Input<number>;
    activeConnectionIdLimit?: pulumi.Input<number>;
    activeMigration?: pulumi.Input<string>;
    greaseQuicBit?: pulumi.Input<string>;
    maxAckDelay?: pulumi.Input<number>;
    maxDatagramFrameSize?: pulumi.Input<number>;
    maxIdleTimeout?: pulumi.Input<number>;
    maxUdpPayloadSize?: pulumi.Input<number>;
}

export interface ObjectFirewallVipRealserver {
    address?: pulumi.Input<string>;
    clientIps?: pulumi.Input<pulumi.Input<string>[]>;
    healthcheck?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<number>;
    httpHost?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    maxConnections?: pulumi.Input<number>;
    monitor?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    seq?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    translateHost?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface ObjectFirewallVipSslCipherSuite {
    cipher?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    versions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFirewallVipSslServerCipherSuite {
    cipher?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    versions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFirewallVipgrpDynamicMapping {
    _scopes?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallVipgrpDynamicMapping_Scope>[]>;
    color?: pulumi.Input<number>;
    comments?: pulumi.Input<string>;
    interface?: pulumi.Input<string>;
    member?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface ObjectFirewallVipgrpDynamicMapping_Scope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface ObjectFmgFabricAuthorizationTemplatePlatform {
    count?: pulumi.Input<number>;
    extensionType?: pulumi.Input<string>;
    fortilink?: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ObjectFmgVariableDynamicMapping {
    _scopes?: pulumi.Input<pulumi.Input<inputs.ObjectFmgVariableDynamicMapping_Scope>[]>;
    value?: pulumi.Input<string>;
}

export interface ObjectFmgVariableDynamicMapping_Scope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface ObjectFspVlanDhcpServer {
    autoConfiguration?: pulumi.Input<string>;
    autoManagedStatus?: pulumi.Input<string>;
    conflictedIpTimeout?: pulumi.Input<number>;
    ddnsAuth?: pulumi.Input<string>;
    ddnsKey?: pulumi.Input<string>;
    ddnsKeyname?: pulumi.Input<string>;
    ddnsServerIp?: pulumi.Input<string>;
    ddnsTtl?: pulumi.Input<number>;
    ddnsUpdate?: pulumi.Input<string>;
    ddnsUpdateOverride?: pulumi.Input<string>;
    ddnsZone?: pulumi.Input<string>;
    defaultGateway?: pulumi.Input<string>;
    dhcpSettingsFromFortiipam?: pulumi.Input<string>;
    dnsServer1?: pulumi.Input<string>;
    dnsServer2?: pulumi.Input<string>;
    dnsServer3?: pulumi.Input<string>;
    dnsServer4?: pulumi.Input<string>;
    dnsService?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    enable?: pulumi.Input<string>;
    excludeRanges?: pulumi.Input<pulumi.Input<inputs.ObjectFspVlanDhcpServerExcludeRange>[]>;
    filename?: pulumi.Input<string>;
    forticlientOnNetStatus?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ipMode?: pulumi.Input<string>;
    ipRanges?: pulumi.Input<pulumi.Input<inputs.ObjectFspVlanDhcpServerIpRange>[]>;
    ipsecLeaseHold?: pulumi.Input<number>;
    leaseTime?: pulumi.Input<number>;
    macAclDefaultAction?: pulumi.Input<string>;
    netmask?: pulumi.Input<string>;
    nextServer?: pulumi.Input<string>;
    ntpServer1?: pulumi.Input<string>;
    ntpServer2?: pulumi.Input<string>;
    ntpServer3?: pulumi.Input<string>;
    ntpService?: pulumi.Input<string>;
    option1s?: pulumi.Input<pulumi.Input<string>[]>;
    option2s?: pulumi.Input<pulumi.Input<string>[]>;
    option3s?: pulumi.Input<pulumi.Input<string>[]>;
    option4?: pulumi.Input<string>;
    option5?: pulumi.Input<string>;
    option6?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<inputs.ObjectFspVlanDhcpServerOption>[]>;
    relayAgent?: pulumi.Input<string>;
    reservedAddresses?: pulumi.Input<pulumi.Input<inputs.ObjectFspVlanDhcpServerReservedAddress>[]>;
    serverType?: pulumi.Input<string>;
    sharedSubnet?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tftpServers?: pulumi.Input<pulumi.Input<string>[]>;
    timezone?: pulumi.Input<string>;
    timezoneOption?: pulumi.Input<string>;
    vciMatch?: pulumi.Input<string>;
    vciStrings?: pulumi.Input<pulumi.Input<string>[]>;
    wifiAc1?: pulumi.Input<string>;
    wifiAc2?: pulumi.Input<string>;
    wifiAc3?: pulumi.Input<string>;
    wifiAcService?: pulumi.Input<string>;
    winsServer1?: pulumi.Input<string>;
    winsServer2?: pulumi.Input<string>;
}

export interface ObjectFspVlanDhcpServerExcludeRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    leaseTime?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
    uciMatch?: pulumi.Input<string>;
    uciStrings?: pulumi.Input<pulumi.Input<string>[]>;
    vciMatch?: pulumi.Input<string>;
    vciStrings?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFspVlanDhcpServerIpRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    leaseTime?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
    uciMatch?: pulumi.Input<string>;
    uciStrings?: pulumi.Input<pulumi.Input<string>[]>;
    vciMatch?: pulumi.Input<string>;
    vciStrings?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFspVlanDhcpServerOption {
    code?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
    uciMatch?: pulumi.Input<string>;
    uciStrings?: pulumi.Input<pulumi.Input<string>[]>;
    value?: pulumi.Input<string>;
    vciMatch?: pulumi.Input<string>;
    vciStrings?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFspVlanDhcpServerReservedAddress {
    action?: pulumi.Input<string>;
    circuitId?: pulumi.Input<string>;
    circuitIdType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    remoteId?: pulumi.Input<string>;
    remoteIdType?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ObjectFspVlanDynamicMapping {
    _dhcpStatus?: pulumi.Input<string>;
    _scopes?: pulumi.Input<pulumi.Input<inputs.ObjectFspVlanDynamicMapping_Scope>[]>;
    dhcpServer?: pulumi.Input<inputs.ObjectFspVlanDynamicMappingDhcpServer>;
    interface?: pulumi.Input<inputs.ObjectFspVlanDynamicMappingInterface>;
}

export interface ObjectFspVlanDynamicMappingDhcpServer {
    autoConfiguration?: pulumi.Input<string>;
    autoManagedStatus?: pulumi.Input<string>;
    conflictedIpTimeout?: pulumi.Input<number>;
    ddnsAuth?: pulumi.Input<string>;
    ddnsKey?: pulumi.Input<string>;
    ddnsKeyname?: pulumi.Input<string>;
    ddnsServerIp?: pulumi.Input<string>;
    ddnsTtl?: pulumi.Input<number>;
    ddnsUpdate?: pulumi.Input<string>;
    ddnsUpdateOverride?: pulumi.Input<string>;
    ddnsZone?: pulumi.Input<string>;
    defaultGateway?: pulumi.Input<string>;
    dhcpSettingsFromFortiipam?: pulumi.Input<string>;
    dnsServer1?: pulumi.Input<string>;
    dnsServer2?: pulumi.Input<string>;
    dnsServer3?: pulumi.Input<string>;
    dnsServer4?: pulumi.Input<string>;
    dnsService?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    enable?: pulumi.Input<string>;
    excludeRanges?: pulumi.Input<pulumi.Input<inputs.ObjectFspVlanDynamicMappingDhcpServerExcludeRange>[]>;
    filename?: pulumi.Input<string>;
    forticlientOnNetStatus?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ipMode?: pulumi.Input<string>;
    ipRanges?: pulumi.Input<pulumi.Input<inputs.ObjectFspVlanDynamicMappingDhcpServerIpRange>[]>;
    ipsecLeaseHold?: pulumi.Input<number>;
    leaseTime?: pulumi.Input<number>;
    macAclDefaultAction?: pulumi.Input<string>;
    netmask?: pulumi.Input<string>;
    nextServer?: pulumi.Input<string>;
    ntpServer1?: pulumi.Input<string>;
    ntpServer2?: pulumi.Input<string>;
    ntpServer3?: pulumi.Input<string>;
    ntpService?: pulumi.Input<string>;
    option1s?: pulumi.Input<pulumi.Input<string>[]>;
    option2s?: pulumi.Input<pulumi.Input<string>[]>;
    option3s?: pulumi.Input<pulumi.Input<string>[]>;
    option4?: pulumi.Input<string>;
    option5?: pulumi.Input<string>;
    option6?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<inputs.ObjectFspVlanDynamicMappingDhcpServerOption>[]>;
    relayAgent?: pulumi.Input<string>;
    reservedAddresses?: pulumi.Input<pulumi.Input<inputs.ObjectFspVlanDynamicMappingDhcpServerReservedAddress>[]>;
    serverType?: pulumi.Input<string>;
    sharedSubnet?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tftpServers?: pulumi.Input<pulumi.Input<string>[]>;
    timezone?: pulumi.Input<string>;
    timezoneOption?: pulumi.Input<string>;
    vciMatch?: pulumi.Input<string>;
    vciStrings?: pulumi.Input<pulumi.Input<string>[]>;
    wifiAc1?: pulumi.Input<string>;
    wifiAc2?: pulumi.Input<string>;
    wifiAc3?: pulumi.Input<string>;
    wifiAcService?: pulumi.Input<string>;
    winsServer1?: pulumi.Input<string>;
    winsServer2?: pulumi.Input<string>;
}

export interface ObjectFspVlanDynamicMappingDhcpServerExcludeRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    leaseTime?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
    uciMatch?: pulumi.Input<string>;
    uciStrings?: pulumi.Input<pulumi.Input<string>[]>;
    vciMatch?: pulumi.Input<string>;
    vciStrings?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFspVlanDynamicMappingDhcpServerIpRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    leaseTime?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
    uciMatch?: pulumi.Input<string>;
    uciStrings?: pulumi.Input<pulumi.Input<string>[]>;
    vciMatch?: pulumi.Input<string>;
    vciStrings?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFspVlanDynamicMappingDhcpServerOption {
    code?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
    uciMatch?: pulumi.Input<string>;
    uciStrings?: pulumi.Input<pulumi.Input<string>[]>;
    value?: pulumi.Input<string>;
    vciMatch?: pulumi.Input<string>;
    vciStrings?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectFspVlanDynamicMappingDhcpServerReservedAddress {
    action?: pulumi.Input<string>;
    circuitId?: pulumi.Input<string>;
    circuitIdType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    remoteId?: pulumi.Input<string>;
    remoteIdType?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ObjectFspVlanDynamicMappingInterface {
    dhcpRelayAgentOption?: pulumi.Input<string>;
    dhcpRelayInterfaceSelectMethod?: pulumi.Input<string>;
    dhcpRelayIps?: pulumi.Input<pulumi.Input<string>[]>;
    dhcpRelayService?: pulumi.Input<string>;
    dhcpRelayType?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    ipv6?: pulumi.Input<inputs.ObjectFspVlanDynamicMappingInterfaceIpv6>;
    secondaryIp?: pulumi.Input<string>;
    secondaryips?: pulumi.Input<pulumi.Input<inputs.ObjectFspVlanDynamicMappingInterfaceSecondaryip>[]>;
    vlanid?: pulumi.Input<number>;
    vrrps?: pulumi.Input<pulumi.Input<inputs.ObjectFspVlanDynamicMappingInterfaceVrrp>[]>;
}

export interface ObjectFspVlanDynamicMappingInterfaceIpv6 {
    autoconf?: pulumi.Input<string>;
    cliConn6Status?: pulumi.Input<number>;
    dhcp6ClientOptions?: pulumi.Input<pulumi.Input<string>[]>;
    dhcp6InformationRequest?: pulumi.Input<string>;
    dhcp6PrefixDelegation?: pulumi.Input<string>;
    dhcp6PrefixHint?: pulumi.Input<string>;
    dhcp6PrefixHintPlt?: pulumi.Input<number>;
    dhcp6PrefixHintVlt?: pulumi.Input<number>;
    dhcp6RelayInterfaceId?: pulumi.Input<string>;
    dhcp6RelayIp?: pulumi.Input<string>;
    dhcp6RelayService?: pulumi.Input<string>;
    dhcp6RelaySourceInterface?: pulumi.Input<string>;
    dhcp6RelaySourceIp?: pulumi.Input<string>;
    dhcp6RelayType?: pulumi.Input<string>;
    icmp6SendRedirect?: pulumi.Input<string>;
    interfaceIdentifier?: pulumi.Input<string>;
    ip6Address?: pulumi.Input<string>;
    ip6Allowaccesses?: pulumi.Input<pulumi.Input<string>[]>;
    ip6DefaultLife?: pulumi.Input<number>;
    ip6DelegatedPrefixIaid?: pulumi.Input<number>;
    ip6DelegatedPrefixLists?: pulumi.Input<pulumi.Input<inputs.ObjectFspVlanDynamicMappingInterfaceIpv6Ip6DelegatedPrefixList>[]>;
    ip6DnsServerOverride?: pulumi.Input<string>;
    ip6ExtraAddrs?: pulumi.Input<pulumi.Input<inputs.ObjectFspVlanDynamicMappingInterfaceIpv6Ip6ExtraAddr>[]>;
    ip6HopLimit?: pulumi.Input<number>;
    ip6LinkMtu?: pulumi.Input<number>;
    ip6ManageFlag?: pulumi.Input<string>;
    ip6MaxInterval?: pulumi.Input<number>;
    ip6MinInterval?: pulumi.Input<number>;
    ip6Mode?: pulumi.Input<string>;
    ip6OtherFlag?: pulumi.Input<string>;
    ip6PrefixLists?: pulumi.Input<pulumi.Input<inputs.ObjectFspVlanDynamicMappingInterfaceIpv6Ip6PrefixList>[]>;
    ip6PrefixMode?: pulumi.Input<string>;
    ip6ReachableTime?: pulumi.Input<number>;
    ip6RetransTime?: pulumi.Input<number>;
    ip6SendAdv?: pulumi.Input<string>;
    ip6Subnet?: pulumi.Input<string>;
    ip6UpstreamInterface?: pulumi.Input<string>;
    ndCert?: pulumi.Input<string>;
    ndCgaModifier?: pulumi.Input<string>;
    ndMode?: pulumi.Input<string>;
    ndSecurityLevel?: pulumi.Input<number>;
    ndTimestampDelta?: pulumi.Input<number>;
    ndTimestampFuzz?: pulumi.Input<number>;
    raSendMtu?: pulumi.Input<string>;
    uniqueAutoconfAddr?: pulumi.Input<string>;
    vrip6LinkLocal?: pulumi.Input<string>;
    vrrp6s?: pulumi.Input<pulumi.Input<inputs.ObjectFspVlanDynamicMappingInterfaceIpv6Vrrp6>[]>;
    vrrpVirtualMac6?: pulumi.Input<string>;
}

export interface ObjectFspVlanDynamicMappingInterfaceIpv6Ip6DelegatedPrefixList {
    autonomousFlag?: pulumi.Input<string>;
    delegatedPrefixIaid?: pulumi.Input<number>;
    onlinkFlag?: pulumi.Input<string>;
    prefixId?: pulumi.Input<number>;
    rdnssService?: pulumi.Input<string>;
    rdnsses?: pulumi.Input<pulumi.Input<string>[]>;
    subnet?: pulumi.Input<string>;
    upstreamInterface?: pulumi.Input<string>;
}

export interface ObjectFspVlanDynamicMappingInterfaceIpv6Ip6ExtraAddr {
    prefix?: pulumi.Input<string>;
}

export interface ObjectFspVlanDynamicMappingInterfaceIpv6Ip6PrefixList {
    autonomousFlag?: pulumi.Input<string>;
    dnssls?: pulumi.Input<pulumi.Input<string>[]>;
    onlinkFlag?: pulumi.Input<string>;
    preferredLifeTime?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    rdnsses?: pulumi.Input<pulumi.Input<string>[]>;
    validLifeTime?: pulumi.Input<number>;
}

export interface ObjectFspVlanDynamicMappingInterfaceIpv6Vrrp6 {
    acceptMode?: pulumi.Input<string>;
    advInterval?: pulumi.Input<number>;
    ignoreDefaultRoute?: pulumi.Input<string>;
    preempt?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    startTime?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    vrdst6?: pulumi.Input<string>;
    vrgrp?: pulumi.Input<number>;
    vrid?: pulumi.Input<number>;
    vrip6?: pulumi.Input<string>;
}

export interface ObjectFspVlanDynamicMappingInterfaceSecondaryip {
    allowaccesses?: pulumi.Input<pulumi.Input<string>[]>;
    detectprotocols?: pulumi.Input<pulumi.Input<string>[]>;
    detectserver?: pulumi.Input<string>;
    gwdetect?: pulumi.Input<string>;
    haPriority?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    pingServStatus?: pulumi.Input<number>;
    secipRelayIp?: pulumi.Input<string>;
    seq?: pulumi.Input<number>;
}

export interface ObjectFspVlanDynamicMappingInterfaceVrrp {
    acceptMode?: pulumi.Input<string>;
    advInterval?: pulumi.Input<number>;
    ignoreDefaultRoute?: pulumi.Input<string>;
    preempt?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    proxyArps?: pulumi.Input<pulumi.Input<inputs.ObjectFspVlanDynamicMappingInterfaceVrrpProxyArp>[]>;
    startTime?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
    vrdstPriority?: pulumi.Input<number>;
    vrdsts?: pulumi.Input<pulumi.Input<string>[]>;
    vrgrp?: pulumi.Input<number>;
    vrid?: pulumi.Input<number>;
    vrip?: pulumi.Input<string>;
}

export interface ObjectFspVlanDynamicMappingInterfaceVrrpProxyArp {
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
}

export interface ObjectFspVlanDynamicMapping_Scope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface ObjectFspVlanInterface {
    acName?: pulumi.Input<string>;
    aggregate?: pulumi.Input<string>;
    aggregateType?: pulumi.Input<string>;
    algorithm?: pulumi.Input<string>;
    alias?: pulumi.Input<string>;
    allowaccesses?: pulumi.Input<pulumi.Input<string>[]>;
    annex?: pulumi.Input<string>;
    apDiscover?: pulumi.Input<string>;
    arpforward?: pulumi.Input<string>;
    atmProtocol?: pulumi.Input<string>;
    authCert?: pulumi.Input<string>;
    authPortalAddr?: pulumi.Input<string>;
    authType?: pulumi.Input<string>;
    autoAuthExtensionDevice?: pulumi.Input<string>;
    bandwidthMeasureTime?: pulumi.Input<number>;
    bfd?: pulumi.Input<string>;
    bfdDesiredMinTx?: pulumi.Input<number>;
    bfdDetectMult?: pulumi.Input<number>;
    bfdRequiredMinRx?: pulumi.Input<number>;
    broadcastForticlientDiscovery?: pulumi.Input<string>;
    broadcastForward?: pulumi.Input<string>;
    captivePortal?: pulumi.Input<number>;
    cliConnStatus?: pulumi.Input<number>;
    color?: pulumi.Input<number>;
    ddns?: pulumi.Input<string>;
    ddnsAuth?: pulumi.Input<string>;
    ddnsDomain?: pulumi.Input<string>;
    ddnsKey?: pulumi.Input<string>;
    ddnsKeyname?: pulumi.Input<string>;
    ddnsPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    ddnsServer?: pulumi.Input<string>;
    ddnsServerIp?: pulumi.Input<string>;
    ddnsSn?: pulumi.Input<string>;
    ddnsTtl?: pulumi.Input<number>;
    ddnsUsername?: pulumi.Input<string>;
    ddnsZone?: pulumi.Input<string>;
    dedicatedTo?: pulumi.Input<string>;
    defaultPurdueLevel?: pulumi.Input<string>;
    defaultgw?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    detectedPeerMtu?: pulumi.Input<number>;
    detectprotocols?: pulumi.Input<pulumi.Input<string>[]>;
    detectserver?: pulumi.Input<string>;
    deviceAccessList?: pulumi.Input<string>;
    deviceIdentification?: pulumi.Input<string>;
    deviceIdentificationActiveScan?: pulumi.Input<string>;
    deviceNetscan?: pulumi.Input<string>;
    deviceUserIdentification?: pulumi.Input<string>;
    devindex?: pulumi.Input<number>;
    dhcpBroadcastFlag?: pulumi.Input<string>;
    dhcpClasslessRouteAddition?: pulumi.Input<string>;
    dhcpClientIdentifier?: pulumi.Input<string>;
    dhcpRelayAgentOption?: pulumi.Input<string>;
    dhcpRelayCircuitId?: pulumi.Input<string>;
    dhcpRelayInterface?: pulumi.Input<string>;
    dhcpRelayInterfaceSelectMethod?: pulumi.Input<string>;
    dhcpRelayIps?: pulumi.Input<pulumi.Input<string>[]>;
    dhcpRelayLinkSelection?: pulumi.Input<string>;
    dhcpRelayRequestAllServer?: pulumi.Input<string>;
    dhcpRelayService?: pulumi.Input<string>;
    dhcpRelaySourceIp?: pulumi.Input<string>;
    dhcpRelayType?: pulumi.Input<string>;
    dhcpRenewTime?: pulumi.Input<number>;
    dhcpSmartRelay?: pulumi.Input<string>;
    discRetryTimeout?: pulumi.Input<number>;
    disconnectThreshold?: pulumi.Input<number>;
    distance?: pulumi.Input<number>;
    dnsQuery?: pulumi.Input<string>;
    dnsServerOverride?: pulumi.Input<string>;
    dnsServerProtocols?: pulumi.Input<pulumi.Input<string>[]>;
    dropFragment?: pulumi.Input<string>;
    dropOverlappedFragment?: pulumi.Input<string>;
    eapCaCerts?: pulumi.Input<pulumi.Input<string>[]>;
    eapIdentity?: pulumi.Input<string>;
    eapMethod?: pulumi.Input<string>;
    eapPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    eapSupplicant?: pulumi.Input<string>;
    eapUserCerts?: pulumi.Input<pulumi.Input<string>[]>;
    egressCos?: pulumi.Input<string>;
    egressShapingProfile?: pulumi.Input<string>;
    eip?: pulumi.Input<string>;
    endpointCompliance?: pulumi.Input<string>;
    estimatedDownstreamBandwidth?: pulumi.Input<number>;
    estimatedUpstreamBandwidth?: pulumi.Input<number>;
    explicitFtpProxy?: pulumi.Input<string>;
    explicitWebProxy?: pulumi.Input<string>;
    external?: pulumi.Input<string>;
    failActionOnExtender?: pulumi.Input<string>;
    failAlertInterfaces?: pulumi.Input<string>;
    failAlertMethod?: pulumi.Input<string>;
    failDetect?: pulumi.Input<string>;
    failDetectOptions?: pulumi.Input<pulumi.Input<string>[]>;
    fdp?: pulumi.Input<string>;
    fortiheartbeat?: pulumi.Input<string>;
    fortilink?: pulumi.Input<string>;
    fortilinkBackupLink?: pulumi.Input<number>;
    fortilinkNeighborDetect?: pulumi.Input<string>;
    fortilinkSplitInterface?: pulumi.Input<string>;
    fortilinkStacking?: pulumi.Input<string>;
    forwardDomain?: pulumi.Input<number>;
    forwardErrorCorrection?: pulumi.Input<string>;
    fpAnomalies?: pulumi.Input<pulumi.Input<string>[]>;
    fpDisables?: pulumi.Input<pulumi.Input<string>[]>;
    gatewayAddress?: pulumi.Input<string>;
    genericReceiveOffload?: pulumi.Input<string>;
    giGk?: pulumi.Input<string>;
    gwaddr?: pulumi.Input<string>;
    gwdetect?: pulumi.Input<string>;
    haPriority?: pulumi.Input<number>;
    icmpAcceptRedirect?: pulumi.Input<string>;
    icmpRedirect?: pulumi.Input<string>;
    icmpSendRedirect?: pulumi.Input<string>;
    identAccept?: pulumi.Input<string>;
    idleTimeout?: pulumi.Input<number>;
    ifMdix?: pulumi.Input<string>;
    ifMedia?: pulumi.Input<string>;
    ikeSamlServers?: pulumi.Input<pulumi.Input<string>[]>;
    inForceVlanCos?: pulumi.Input<number>;
    inbandwidth?: pulumi.Input<number>;
    ingressCos?: pulumi.Input<string>;
    ingressShapingProfile?: pulumi.Input<string>;
    ingressSpilloverThreshold?: pulumi.Input<number>;
    interconnectProfile?: pulumi.Input<string>;
    internal?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    ipManagedByFortiipam?: pulumi.Input<string>;
    ipmac?: pulumi.Input<string>;
    ipsSnifferMode?: pulumi.Input<string>;
    ipunnumbered?: pulumi.Input<string>;
    ipv6?: pulumi.Input<inputs.ObjectFspVlanInterfaceIpv6>;
    l2forward?: pulumi.Input<string>;
    l2tpClient?: pulumi.Input<string>;
    lacpHaSecondary?: pulumi.Input<string>;
    lacpHaSlave?: pulumi.Input<string>;
    lacpMode?: pulumi.Input<string>;
    lacpSpeed?: pulumi.Input<string>;
    largeReceiveOffload?: pulumi.Input<string>;
    lcpEchoInterval?: pulumi.Input<number>;
    lcpMaxEchoFails?: pulumi.Input<number>;
    linkUpDelay?: pulumi.Input<number>;
    listenForticlientConnection?: pulumi.Input<string>;
    lldpNetworkPolicy?: pulumi.Input<string>;
    lldpReception?: pulumi.Input<string>;
    lldpTransmission?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    macaddr?: pulumi.Input<string>;
    managedSubnetworkSize?: pulumi.Input<string>;
    managementIp?: pulumi.Input<string>;
    maxEgressBurstRate?: pulumi.Input<number>;
    maxEgressRate?: pulumi.Input<number>;
    measuredDownstreamBandwidth?: pulumi.Input<number>;
    measuredUpstreamBandwidth?: pulumi.Input<number>;
    mediatype?: pulumi.Input<string>;
    member?: pulumi.Input<string>;
    minLinks?: pulumi.Input<number>;
    minLinksDown?: pulumi.Input<string>;
    mirroringDirection?: pulumi.Input<string>;
    mirroringPort?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    monitorBandwidth?: pulumi.Input<string>;
    mtu?: pulumi.Input<number>;
    mtuOverride?: pulumi.Input<string>;
    muxType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ndiscforward?: pulumi.Input<string>;
    netbiosForward?: pulumi.Input<string>;
    netflowSampler?: pulumi.Input<string>;
    npQosProfile?: pulumi.Input<number>;
    npuFastpath?: pulumi.Input<string>;
    nst?: pulumi.Input<string>;
    outForceVlanCos?: pulumi.Input<number>;
    outbandwidth?: pulumi.Input<number>;
    padtRetryTimeout?: pulumi.Input<number>;
    passwords?: pulumi.Input<pulumi.Input<string>[]>;
    peerInterface?: pulumi.Input<string>;
    phyMode?: pulumi.Input<string>;
    pingServStatus?: pulumi.Input<number>;
    poe?: pulumi.Input<string>;
    pollingInterval?: pulumi.Input<number>;
    portMirroring?: pulumi.Input<string>;
    pppoeUnnumberedNegotiate?: pulumi.Input<string>;
    pptpAuthType?: pulumi.Input<string>;
    pptpClient?: pulumi.Input<string>;
    pptpPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    pptpServerIp?: pulumi.Input<string>;
    pptpTimeout?: pulumi.Input<number>;
    pptpUser?: pulumi.Input<string>;
    preserveSessionRoute?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    priorityOverride?: pulumi.Input<string>;
    proxyCaptivePortal?: pulumi.Input<string>;
    pvcAtmQos?: pulumi.Input<string>;
    pvcChan?: pulumi.Input<number>;
    pvcCrc?: pulumi.Input<number>;
    pvcPcr?: pulumi.Input<number>;
    pvcScr?: pulumi.Input<number>;
    pvcVlanId?: pulumi.Input<number>;
    pvcVlanRxId?: pulumi.Input<number>;
    pvcVlanRxOp?: pulumi.Input<string>;
    pvcVlanTxId?: pulumi.Input<number>;
    pvcVlanTxOp?: pulumi.Input<string>;
    reachableTime?: pulumi.Input<number>;
    redundantInterface?: pulumi.Input<string>;
    remoteIp?: pulumi.Input<string>;
    replacemsgOverrideGroup?: pulumi.Input<string>;
    retransmission?: pulumi.Input<string>;
    ringRx?: pulumi.Input<number>;
    ringTx?: pulumi.Input<number>;
    role?: pulumi.Input<string>;
    sampleDirection?: pulumi.Input<string>;
    sampleRate?: pulumi.Input<number>;
    scanBotnetConnections?: pulumi.Input<string>;
    secondaryIp?: pulumi.Input<string>;
    secondaryips?: pulumi.Input<pulumi.Input<inputs.ObjectFspVlanInterfaceSecondaryip>[]>;
    security8021xDynamicVlanId?: pulumi.Input<number>;
    security8021xMaster?: pulumi.Input<string>;
    security8021xMemberMode?: pulumi.Input<string>;
    security8021xMode?: pulumi.Input<string>;
    securityExemptList?: pulumi.Input<string>;
    securityExternalLogout?: pulumi.Input<string>;
    securityExternalWeb?: pulumi.Input<string>;
    securityGroups?: pulumi.Input<string>;
    securityMacAuthBypass?: pulumi.Input<string>;
    securityMode?: pulumi.Input<string>;
    securityRedirectUrl?: pulumi.Input<string>;
    selectProfile30a35b?: pulumi.Input<string>;
    serviceName?: pulumi.Input<string>;
    sflowSampler?: pulumi.Input<string>;
    sfpDsl?: pulumi.Input<string>;
    sfpDslAdslFallback?: pulumi.Input<string>;
    sfpDslAutodetect?: pulumi.Input<string>;
    sfpDslMac?: pulumi.Input<string>;
    speed?: pulumi.Input<string>;
    spilloverThreshold?: pulumi.Input<number>;
    srcCheck?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    stp?: pulumi.Input<string>;
    stpEdge?: pulumi.Input<string>;
    stpHaSecondary?: pulumi.Input<string>;
    stpHaSlave?: pulumi.Input<string>;
    stpforward?: pulumi.Input<string>;
    stpforwardMode?: pulumi.Input<string>;
    stripPriorityVlanTag?: pulumi.Input<string>;
    subst?: pulumi.Input<string>;
    substituteDstMac?: pulumi.Input<string>;
    swAlgorithm?: pulumi.Input<string>;
    swcFirstCreate?: pulumi.Input<number>;
    swcVlan?: pulumi.Input<number>;
    switch?: pulumi.Input<string>;
    switchControllerAccessVlan?: pulumi.Input<string>;
    switchControllerArpInspection?: pulumi.Input<string>;
    switchControllerAuth?: pulumi.Input<string>;
    switchControllerDhcpSnooping?: pulumi.Input<string>;
    switchControllerDhcpSnoopingOption82?: pulumi.Input<string>;
    switchControllerDhcpSnoopingVerifyMac?: pulumi.Input<string>;
    switchControllerDynamic?: pulumi.Input<string>;
    switchControllerFeature?: pulumi.Input<string>;
    switchControllerIgmpSnooping?: pulumi.Input<string>;
    switchControllerIgmpSnoopingFastLeave?: pulumi.Input<string>;
    switchControllerIgmpSnoopingProxy?: pulumi.Input<string>;
    switchControllerIotScanning?: pulumi.Input<string>;
    switchControllerLearningLimit?: pulumi.Input<number>;
    switchControllerMgmtVlan?: pulumi.Input<number>;
    switchControllerNac?: pulumi.Input<string>;
    switchControllerNetflowCollect?: pulumi.Input<string>;
    switchControllerOffload?: pulumi.Input<string>;
    switchControllerOffloadGw?: pulumi.Input<string>;
    switchControllerOffloadIp?: pulumi.Input<string>;
    switchControllerOffloading?: pulumi.Input<string>;
    switchControllerOffloadingGw?: pulumi.Input<string>;
    switchControllerOffloadingIp?: pulumi.Input<string>;
    switchControllerRadiusServer?: pulumi.Input<string>;
    switchControllerRspanMode?: pulumi.Input<string>;
    switchControllerSourceIp?: pulumi.Input<string>;
    switchControllerTrafficPolicy?: pulumi.Input<string>;
    systemId?: pulumi.Input<string>;
    systemIdType?: pulumi.Input<string>;
    tcMode?: pulumi.Input<string>;
    tcpMss?: pulumi.Input<number>;
    trunk?: pulumi.Input<string>;
    trustIp1?: pulumi.Input<string>;
    trustIp2?: pulumi.Input<string>;
    trustIp3?: pulumi.Input<string>;
    trustIp61?: pulumi.Input<string>;
    trustIp62?: pulumi.Input<string>;
    trustIp63?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    vci?: pulumi.Input<number>;
    vectoring?: pulumi.Input<string>;
    vindex?: pulumi.Input<number>;
    vlanOpMode?: pulumi.Input<string>;
    vlanProtocol?: pulumi.Input<string>;
    vlanforward?: pulumi.Input<string>;
    vlanid?: pulumi.Input<number>;
    vpi?: pulumi.Input<number>;
    vrf?: pulumi.Input<number>;
    vrrpVirtualMac?: pulumi.Input<string>;
    vrrps?: pulumi.Input<pulumi.Input<inputs.ObjectFspVlanInterfaceVrrp>[]>;
    wccp?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
    wifi5gThreshold?: pulumi.Input<string>;
    wifiAcl?: pulumi.Input<string>;
    wifiApBand?: pulumi.Input<string>;
    wifiAuth?: pulumi.Input<string>;
    wifiAutoConnect?: pulumi.Input<string>;
    wifiAutoSave?: pulumi.Input<string>;
    wifiBroadcastSsid?: pulumi.Input<string>;
    wifiDnsServer1?: pulumi.Input<string>;
    wifiDnsServer2?: pulumi.Input<string>;
    wifiEncrypt?: pulumi.Input<string>;
    wifiFragmentThreshold?: pulumi.Input<number>;
    wifiGateway?: pulumi.Input<string>;
    wifiKeyindex?: pulumi.Input<number>;
    wifiKeys?: pulumi.Input<pulumi.Input<string>[]>;
    wifiMacFilter?: pulumi.Input<string>;
    wifiPassphrases?: pulumi.Input<pulumi.Input<string>[]>;
    wifiRadiusServer?: pulumi.Input<string>;
    wifiRtsThreshold?: pulumi.Input<number>;
    wifiSecurity?: pulumi.Input<string>;
    wifiSsid?: pulumi.Input<string>;
    wifiUsergroup?: pulumi.Input<string>;
    winsIp?: pulumi.Input<string>;
}

export interface ObjectFspVlanInterfaceIpv6 {
    autoconf?: pulumi.Input<string>;
    cliConn6Status?: pulumi.Input<number>;
    dhcp6ClientOptions?: pulumi.Input<pulumi.Input<string>[]>;
    dhcp6InformationRequest?: pulumi.Input<string>;
    dhcp6PrefixDelegation?: pulumi.Input<string>;
    dhcp6PrefixHint?: pulumi.Input<string>;
    dhcp6PrefixHintPlt?: pulumi.Input<number>;
    dhcp6PrefixHintVlt?: pulumi.Input<number>;
    dhcp6RelayInterfaceId?: pulumi.Input<string>;
    dhcp6RelayIp?: pulumi.Input<string>;
    dhcp6RelayService?: pulumi.Input<string>;
    dhcp6RelaySourceInterface?: pulumi.Input<string>;
    dhcp6RelaySourceIp?: pulumi.Input<string>;
    dhcp6RelayType?: pulumi.Input<string>;
    icmp6SendRedirect?: pulumi.Input<string>;
    interfaceIdentifier?: pulumi.Input<string>;
    ip6Address?: pulumi.Input<string>;
    ip6Allowaccesses?: pulumi.Input<pulumi.Input<string>[]>;
    ip6DefaultLife?: pulumi.Input<number>;
    ip6DelegatedPrefixIaid?: pulumi.Input<number>;
    ip6DelegatedPrefixLists?: pulumi.Input<pulumi.Input<inputs.ObjectFspVlanInterfaceIpv6Ip6DelegatedPrefixList>[]>;
    ip6DnsServerOverride?: pulumi.Input<string>;
    ip6ExtraAddrs?: pulumi.Input<pulumi.Input<inputs.ObjectFspVlanInterfaceIpv6Ip6ExtraAddr>[]>;
    ip6HopLimit?: pulumi.Input<number>;
    ip6LinkMtu?: pulumi.Input<number>;
    ip6ManageFlag?: pulumi.Input<string>;
    ip6MaxInterval?: pulumi.Input<number>;
    ip6MinInterval?: pulumi.Input<number>;
    ip6Mode?: pulumi.Input<string>;
    ip6OtherFlag?: pulumi.Input<string>;
    ip6PrefixLists?: pulumi.Input<pulumi.Input<inputs.ObjectFspVlanInterfaceIpv6Ip6PrefixList>[]>;
    ip6PrefixMode?: pulumi.Input<string>;
    ip6ReachableTime?: pulumi.Input<number>;
    ip6RetransTime?: pulumi.Input<number>;
    ip6SendAdv?: pulumi.Input<string>;
    ip6Subnet?: pulumi.Input<string>;
    ip6UpstreamInterface?: pulumi.Input<string>;
    ndCert?: pulumi.Input<string>;
    ndCgaModifier?: pulumi.Input<string>;
    ndMode?: pulumi.Input<string>;
    ndSecurityLevel?: pulumi.Input<number>;
    ndTimestampDelta?: pulumi.Input<number>;
    ndTimestampFuzz?: pulumi.Input<number>;
    raSendMtu?: pulumi.Input<string>;
    uniqueAutoconfAddr?: pulumi.Input<string>;
    vrip6LinkLocal?: pulumi.Input<string>;
    vrrp6s?: pulumi.Input<pulumi.Input<inputs.ObjectFspVlanInterfaceIpv6Vrrp6>[]>;
    vrrpVirtualMac6?: pulumi.Input<string>;
}

export interface ObjectFspVlanInterfaceIpv6Ip6DelegatedPrefixList {
    autonomousFlag?: pulumi.Input<string>;
    delegatedPrefixIaid?: pulumi.Input<number>;
    onlinkFlag?: pulumi.Input<string>;
    prefixId?: pulumi.Input<number>;
    rdnssService?: pulumi.Input<string>;
    rdnsses?: pulumi.Input<pulumi.Input<string>[]>;
    subnet?: pulumi.Input<string>;
    upstreamInterface?: pulumi.Input<string>;
}

export interface ObjectFspVlanInterfaceIpv6Ip6ExtraAddr {
    prefix?: pulumi.Input<string>;
}

export interface ObjectFspVlanInterfaceIpv6Ip6PrefixList {
    autonomousFlag?: pulumi.Input<string>;
    dnssls?: pulumi.Input<pulumi.Input<string>[]>;
    onlinkFlag?: pulumi.Input<string>;
    preferredLifeTime?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    rdnsses?: pulumi.Input<pulumi.Input<string>[]>;
    validLifeTime?: pulumi.Input<number>;
}

export interface ObjectFspVlanInterfaceIpv6Vrrp6 {
    acceptMode?: pulumi.Input<string>;
    advInterval?: pulumi.Input<number>;
    ignoreDefaultRoute?: pulumi.Input<string>;
    preempt?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    startTime?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    vrdst6?: pulumi.Input<string>;
    vrgrp?: pulumi.Input<number>;
    vrid?: pulumi.Input<number>;
    vrip6?: pulumi.Input<string>;
}

export interface ObjectFspVlanInterfaceSecondaryip {
    allowaccesses?: pulumi.Input<pulumi.Input<string>[]>;
    detectprotocols?: pulumi.Input<pulumi.Input<string>[]>;
    detectserver?: pulumi.Input<string>;
    gwdetect?: pulumi.Input<string>;
    haPriority?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    pingServStatus?: pulumi.Input<number>;
    secipRelayIp?: pulumi.Input<string>;
    seq?: pulumi.Input<number>;
}

export interface ObjectFspVlanInterfaceVrrp {
    acceptMode?: pulumi.Input<string>;
    advInterval?: pulumi.Input<number>;
    ignoreDefaultRoute?: pulumi.Input<string>;
    preempt?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    proxyArps?: pulumi.Input<pulumi.Input<inputs.ObjectFspVlanInterfaceVrrpProxyArp>[]>;
    startTime?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
    vrdstPriority?: pulumi.Input<number>;
    vrdsts?: pulumi.Input<pulumi.Input<string>[]>;
    vrgrp?: pulumi.Input<number>;
    vrid?: pulumi.Input<number>;
    vrip?: pulumi.Input<string>;
}

export interface ObjectFspVlanInterfaceVrrpProxyArp {
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
}

export interface ObjectGlobalIpsSensorEntriesExemptIp {
    dstIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    srcIp?: pulumi.Input<string>;
}

export interface ObjectGlobalIpsSensorEntry {
    action?: pulumi.Input<string>;
    applications?: pulumi.Input<pulumi.Input<string>[]>;
    cves?: pulumi.Input<pulumi.Input<string>[]>;
    defaultAction?: pulumi.Input<string>;
    defaultStatus?: pulumi.Input<string>;
    exemptIps?: pulumi.Input<pulumi.Input<inputs.ObjectGlobalIpsSensorEntryExemptIp>[]>;
    id?: pulumi.Input<number>;
    lastModified?: pulumi.Input<string>;
    locations?: pulumi.Input<pulumi.Input<string>[]>;
    log?: pulumi.Input<string>;
    logAttackContext?: pulumi.Input<string>;
    logPacket?: pulumi.Input<string>;
    os?: pulumi.Input<pulumi.Input<string>[]>;
    position?: pulumi.Input<string>;
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    quarantine?: pulumi.Input<string>;
    quarantineExpiry?: pulumi.Input<string>;
    quarantineLog?: pulumi.Input<string>;
    rateCount?: pulumi.Input<number>;
    rateDuration?: pulumi.Input<number>;
    rateMode?: pulumi.Input<string>;
    rateTrack?: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<string>[]>;
    severities?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    vulnTypes?: pulumi.Input<pulumi.Input<number>[]>;
}

export interface ObjectGlobalIpsSensorEntryExemptIp {
    dstIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    srcIp?: pulumi.Input<string>;
}

export interface ObjectGlobalIpsSensorFilter {
    action?: pulumi.Input<string>;
    applicationreal?: pulumi.Input<string>;
    applications?: pulumi.Input<pulumi.Input<string>[]>;
    locationreal?: pulumi.Input<string>;
    locations?: pulumi.Input<pulumi.Input<string>[]>;
    log?: pulumi.Input<string>;
    logPacket?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    os?: pulumi.Input<pulumi.Input<string>[]>;
    osreal?: pulumi.Input<string>;
    protocolreal?: pulumi.Input<string>;
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    quarantine?: pulumi.Input<string>;
    quarantineExpiry?: pulumi.Input<number>;
    quarantineLog?: pulumi.Input<string>;
    severities?: pulumi.Input<pulumi.Input<string>[]>;
    severityreal?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectGlobalIpsSensorOverride {
    action?: pulumi.Input<string>;
    exemptIps?: pulumi.Input<pulumi.Input<inputs.ObjectGlobalIpsSensorOverrideExemptIp>[]>;
    log?: pulumi.Input<string>;
    logPacket?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
    quarantineExpiry?: pulumi.Input<number>;
    quarantineLog?: pulumi.Input<string>;
    ruleId?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface ObjectGlobalIpsSensorOverrideExemptIp {
    dstIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    srcIp?: pulumi.Input<string>;
}

export interface ObjectIcapProfileIcapHeader {
    base64Encoding?: pulumi.Input<string>;
    content?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface ObjectIcapProfileRespmodForwardRule {
    action?: pulumi.Input<string>;
    headerGroups?: pulumi.Input<pulumi.Input<inputs.ObjectIcapProfileRespmodForwardRuleHeaderGroup>[]>;
    host?: pulumi.Input<string>;
    httpRespStatusCodes?: pulumi.Input<pulumi.Input<number>[]>;
    name?: pulumi.Input<string>;
}

export interface ObjectIcapProfileRespmodForwardRuleHeaderGroup {
    caseSensitivity?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    headerName?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface ObjectIcapProfileRespmodforwardrulesHeaderGroup {
    caseSensitivity?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    headerName?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface ObjectIpsSensorEntriesExemptIp {
    dstIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    srcIp?: pulumi.Input<string>;
}

export interface ObjectIpsSensorEntry {
    action?: pulumi.Input<string>;
    applications?: pulumi.Input<pulumi.Input<string>[]>;
    cves?: pulumi.Input<pulumi.Input<string>[]>;
    defaultAction?: pulumi.Input<string>;
    defaultStatus?: pulumi.Input<string>;
    exemptIps?: pulumi.Input<pulumi.Input<inputs.ObjectIpsSensorEntryExemptIp>[]>;
    id?: pulumi.Input<number>;
    lastModified?: pulumi.Input<string>;
    locations?: pulumi.Input<pulumi.Input<string>[]>;
    log?: pulumi.Input<string>;
    logAttackContext?: pulumi.Input<string>;
    logPacket?: pulumi.Input<string>;
    os?: pulumi.Input<pulumi.Input<string>[]>;
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    quarantine?: pulumi.Input<string>;
    quarantineExpiry?: pulumi.Input<string>;
    quarantineLog?: pulumi.Input<string>;
    rateCount?: pulumi.Input<number>;
    rateDuration?: pulumi.Input<number>;
    rateMode?: pulumi.Input<string>;
    rateTrack?: pulumi.Input<string>;
    rule?: pulumi.Input<string>;
    severities?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    vulnTypes?: pulumi.Input<pulumi.Input<number>[]>;
}

export interface ObjectIpsSensorEntryExemptIp {
    dstIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    srcIp?: pulumi.Input<string>;
}

export interface ObjectLogNpuserverServerGroup {
    groupName?: pulumi.Input<string>;
    logFormat?: pulumi.Input<string>;
    logGenEvent?: pulumi.Input<string>;
    logMode?: pulumi.Input<string>;
    logTxMode?: pulumi.Input<string>;
    logUserInfo?: pulumi.Input<string>;
    serverNumber?: pulumi.Input<number>;
    serverStartId?: pulumi.Input<number>;
    swLogFlags?: pulumi.Input<string>;
}

export interface ObjectLogNpuserverServerInfo {
    destPort?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    ipFamily?: pulumi.Input<string>;
    ipv4Server?: pulumi.Input<string>;
    ipv6Server?: pulumi.Input<string>;
    logTransport?: pulumi.Input<string>;
    sourcePort?: pulumi.Input<number>;
    templateTxTimeout?: pulumi.Input<number>;
    vdom?: pulumi.Input<string>;
}

export interface ObjectRouterAccesslist6Rule {
    action?: pulumi.Input<string>;
    exactMatch?: pulumi.Input<string>;
    flags?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    prefix6?: pulumi.Input<string>;
}

export interface ObjectRouterAccesslistRule {
    action?: pulumi.Input<string>;
    exactMatch?: pulumi.Input<string>;
    flags?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    prefix?: pulumi.Input<string>;
    wildcard?: pulumi.Input<string>;
}

export interface ObjectRouterAspathlistRule {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    regexp?: pulumi.Input<string>;
}

export interface ObjectRouterCommunitylistRule {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    match?: pulumi.Input<string>;
    regexp?: pulumi.Input<string>;
}

export interface ObjectRouterPrefixlist6Rule {
    action?: pulumi.Input<string>;
    flags?: pulumi.Input<number>;
    ge?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    le?: pulumi.Input<number>;
    prefix6?: pulumi.Input<string>;
}

export interface ObjectRouterPrefixlistRule {
    action?: pulumi.Input<string>;
    flags?: pulumi.Input<number>;
    ge?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    le?: pulumi.Input<number>;
    prefixes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectRouterRoutemapRule {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    matchAsPath?: pulumi.Input<string>;
    matchCommunity?: pulumi.Input<string>;
    matchCommunityExact?: pulumi.Input<string>;
    matchExtcommunity?: pulumi.Input<string>;
    matchExtcommunityExact?: pulumi.Input<string>;
    matchFlags?: pulumi.Input<number>;
    matchInterface?: pulumi.Input<string>;
    matchIp6Address?: pulumi.Input<string>;
    matchIp6Nexthop?: pulumi.Input<string>;
    matchIpAddress?: pulumi.Input<string>;
    matchIpNexthop?: pulumi.Input<string>;
    matchMetric?: pulumi.Input<string>;
    matchOrigin?: pulumi.Input<string>;
    matchRouteType?: pulumi.Input<string>;
    matchTag?: pulumi.Input<string>;
    matchVrf?: pulumi.Input<number>;
    setAggregatorAs?: pulumi.Input<number>;
    setAggregatorIp?: pulumi.Input<string>;
    setAspathAction?: pulumi.Input<string>;
    setAspaths?: pulumi.Input<pulumi.Input<string>[]>;
    setAtomicAggregate?: pulumi.Input<string>;
    setCommunities?: pulumi.Input<pulumi.Input<string>[]>;
    setCommunityAdditive?: pulumi.Input<string>;
    setCommunityDelete?: pulumi.Input<string>;
    setDampeningMaxSuppress?: pulumi.Input<number>;
    setDampeningReachabilityHalfLife?: pulumi.Input<number>;
    setDampeningReuse?: pulumi.Input<number>;
    setDampeningSuppress?: pulumi.Input<number>;
    setDampeningUnreachabilityHalfLife?: pulumi.Input<number>;
    setExtcommunityRts?: pulumi.Input<pulumi.Input<string>[]>;
    setExtcommunitySoos?: pulumi.Input<pulumi.Input<string>[]>;
    setFlags?: pulumi.Input<number>;
    setIp6Nexthop?: pulumi.Input<string>;
    setIp6NexthopLocal?: pulumi.Input<string>;
    setIpNexthop?: pulumi.Input<string>;
    setIpPrefsrc?: pulumi.Input<string>;
    setLocalPreference?: pulumi.Input<string>;
    setMetric?: pulumi.Input<string>;
    setMetricType?: pulumi.Input<string>;
    setOrigin?: pulumi.Input<string>;
    setOriginatorId?: pulumi.Input<string>;
    setPriority?: pulumi.Input<number>;
    setRouteTag?: pulumi.Input<string>;
    setTag?: pulumi.Input<string>;
    setVpnv4Nexthop?: pulumi.Input<string>;
    setVpnv6Nexthop?: pulumi.Input<string>;
    setVpnv6NexthopLocal?: pulumi.Input<string>;
    setWeight?: pulumi.Input<string>;
}

export interface ObjectSctpfilterProfilePpidFilter {
    action?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ppid?: pulumi.Input<number>;
}

export interface ObjectSpamfilterBwlEntry {
    action?: pulumi.Input<string>;
    addrType?: pulumi.Input<string>;
    emailPattern?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip4Subnet?: pulumi.Input<string>;
    ip6Subnet?: pulumi.Input<string>;
    patternType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ObjectSpamfilterBwordEntry {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    language?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    patternType?: pulumi.Input<string>;
    score?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    where?: pulumi.Input<string>;
}

export interface ObjectSpamfilterDnsblEntry {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    server?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectSpamfilterIptrustEntry {
    addrType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip4Subnet?: pulumi.Input<string>;
    ip6Subnet?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectSpamfilterMheaderEntry {
    action?: pulumi.Input<string>;
    fieldbody?: pulumi.Input<string>;
    fieldname?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    patternType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectSpamfilterProfileGmail {
    log?: pulumi.Input<string>;
}

export interface ObjectSpamfilterProfileImap {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    tagMsg?: pulumi.Input<string>;
    tagTypes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectSpamfilterProfileMapi {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
}

export interface ObjectSpamfilterProfileMsnHotmail {
    log?: pulumi.Input<string>;
}

export interface ObjectSpamfilterProfilePop3 {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    tagMsg?: pulumi.Input<string>;
    tagTypes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectSpamfilterProfileSmtp {
    action?: pulumi.Input<string>;
    hdrip?: pulumi.Input<string>;
    localOverride?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    tagMsg?: pulumi.Input<string>;
    tagTypes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectSshfilterProfileFileFilter {
    entries?: pulumi.Input<pulumi.Input<inputs.ObjectSshfilterProfileFileFilterEntry>[]>;
    log?: pulumi.Input<string>;
    scanArchiveContents?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectSshfilterProfileFileFilterEntry {
    action?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    fileTypes?: pulumi.Input<pulumi.Input<string>[]>;
    filter?: pulumi.Input<string>;
    passwordProtected?: pulumi.Input<string>;
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectSshfilterProfileShellCommand {
    action?: pulumi.Input<string>;
    alert?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ObjectSwitchcontrollerAclIngressAction {
    count?: pulumi.Input<string>;
    drop?: pulumi.Input<string>;
}

export interface ObjectSwitchcontrollerAclIngressClassifier {
    dstIpPrefix?: pulumi.Input<string>;
    dstMac?: pulumi.Input<string>;
    srcIpPrefix?: pulumi.Input<string>;
    srcMac?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
}

export interface ObjectSwitchcontrollerDynamicportpolicyPolicy {
    bouncePortLink?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    family?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    hwVendor?: pulumi.Input<string>;
    interfaceTags?: pulumi.Input<pulumi.Input<string>[]>;
    lldpProfile?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    n8021x?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    qosPolicy?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vlanPolicy?: pulumi.Input<string>;
}

export interface ObjectSwitchcontrollerFortilinksettingsNacPorts {
    bounceNacPort?: pulumi.Input<string>;
    lanSegment?: pulumi.Input<string>;
    memberChange?: pulumi.Input<number>;
    nacLanInterface?: pulumi.Input<string>;
    nacSegmentVlans?: pulumi.Input<pulumi.Input<string>[]>;
    onboardingVlan?: pulumi.Input<string>;
    parentKey?: pulumi.Input<string>;
}

export interface ObjectSwitchcontrollerLldpprofileCustomTlv {
    informationString?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    oui?: pulumi.Input<string>;
    subtype?: pulumi.Input<number>;
}

export interface ObjectSwitchcontrollerLldpprofileMedLocationService {
    name?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    sysLocationId?: pulumi.Input<string>;
}

export interface ObjectSwitchcontrollerLldpprofileMedNetworkPolicy {
    assignVlan?: pulumi.Input<string>;
    dscp?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
    vlanIntf?: pulumi.Input<string>;
}

export interface ObjectSwitchcontrollerManagedswitchCustomCommand {
    commandEntry?: pulumi.Input<string>;
    commandName?: pulumi.Input<string>;
}

export interface ObjectSwitchcontrollerManagedswitchDhcpSnoopingStaticClient {
    ip?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    vlan?: pulumi.Input<string>;
}

export interface ObjectSwitchcontrollerManagedswitchPort {
    accessMode?: pulumi.Input<string>;
    aclGroups?: pulumi.Input<pulumi.Input<string>[]>;
    aggregatorMode?: pulumi.Input<string>;
    allowedVlans?: pulumi.Input<string>;
    allowedVlansAll?: pulumi.Input<string>;
    arpInspectionTrust?: pulumi.Input<string>;
    authenticatedPort?: pulumi.Input<number>;
    bundle?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dhcpSnoopOption82Overrides?: pulumi.Input<pulumi.Input<inputs.ObjectSwitchcontrollerManagedswitchPortDhcpSnoopOption82Override>[]>;
    dhcpSnoopOption82Trust?: pulumi.Input<string>;
    dhcpSnooping?: pulumi.Input<string>;
    discardMode?: pulumi.Input<string>;
    dslProfile?: pulumi.Input<string>;
    edgePort?: pulumi.Input<string>;
    encryptedPort?: pulumi.Input<number>;
    fecCapable?: pulumi.Input<number>;
    fecState?: pulumi.Input<string>;
    flapDuration?: pulumi.Input<number>;
    flapRate?: pulumi.Input<number>;
    flapTimeout?: pulumi.Input<number>;
    flapguard?: pulumi.Input<string>;
    flowControl?: pulumi.Input<string>;
    fortiswitchAcls?: pulumi.Input<pulumi.Input<number>[]>;
    igmpSnooping?: pulumi.Input<string>;
    igmpSnoopingFloodReports?: pulumi.Input<string>;
    igmpsFloodReports?: pulumi.Input<string>;
    igmpsFloodTraffic?: pulumi.Input<string>;
    interfaceTags?: pulumi.Input<string>;
    ipSourceGuard?: pulumi.Input<string>;
    islPeerDeviceSn?: pulumi.Input<string>;
    lacpSpeed?: pulumi.Input<string>;
    learningLimit?: pulumi.Input<number>;
    linkStatus?: pulumi.Input<string>;
    lldpProfile?: pulumi.Input<string>;
    lldpStatus?: pulumi.Input<string>;
    loopGuard?: pulumi.Input<string>;
    loopGuardTimeout?: pulumi.Input<number>;
    matchedDppIntfTags?: pulumi.Input<string>;
    matchedDppPolicy?: pulumi.Input<string>;
    maxBundle?: pulumi.Input<number>;
    mcastSnoopingFloodTraffic?: pulumi.Input<string>;
    mclag?: pulumi.Input<string>;
    mclagIclPort?: pulumi.Input<number>;
    mediaType?: pulumi.Input<string>;
    memberWithdrawalBehavior?: pulumi.Input<string>;
    members?: pulumi.Input<pulumi.Input<string>[]>;
    minBundle?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    p2pPort?: pulumi.Input<number>;
    packetSampleRate?: pulumi.Input<number>;
    packetSampler?: pulumi.Input<string>;
    pauseMeter?: pulumi.Input<number>;
    pauseMeterResume?: pulumi.Input<string>;
    poeMaxPower?: pulumi.Input<string>;
    poeModeBtCabable?: pulumi.Input<number>;
    poePortMode?: pulumi.Input<string>;
    poePortPower?: pulumi.Input<string>;
    poePortPriority?: pulumi.Input<string>;
    poePreStandardDetection?: pulumi.Input<string>;
    poeStandard?: pulumi.Input<string>;
    poeStatus?: pulumi.Input<string>;
    portName?: pulumi.Input<string>;
    portOwner?: pulumi.Input<string>;
    portPolicy?: pulumi.Input<string>;
    portSecurityPolicy?: pulumi.Input<string>;
    portSelectionCriteria?: pulumi.Input<string>;
    ptpStatus?: pulumi.Input<string>;
    qosPolicy?: pulumi.Input<string>;
    restrictedAuthPort?: pulumi.Input<number>;
    rpvstPort?: pulumi.Input<string>;
    sampleDirection?: pulumi.Input<string>;
    sflowCounterInterval?: pulumi.Input<number>;
    sflowSampleRate?: pulumi.Input<number>;
    sflowSampler?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    stickyMac?: pulumi.Input<string>;
    stpBpduGuard?: pulumi.Input<string>;
    stpBpduGuardTimeout?: pulumi.Input<number>;
    stpRootGuard?: pulumi.Input<string>;
    stpState?: pulumi.Input<string>;
    trunkMember?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    untaggedVlans?: pulumi.Input<string>;
    vlan?: pulumi.Input<string>;
}

export interface ObjectSwitchcontrollerManagedswitchPortDhcpSnoopOption82Override {
    circuitId?: pulumi.Input<string>;
    remoteId?: pulumi.Input<string>;
    vlanName?: pulumi.Input<string>;
}

export interface ObjectSwitchcontrollerManagedswitchPortsDhcpSnoopOption82Override {
    circuitId?: pulumi.Input<string>;
    remoteId?: pulumi.Input<string>;
    vlanName?: pulumi.Input<string>;
}

export interface ObjectSwitchcontrollerManagedswitchRouteOffloadRouter {
    routerIp?: pulumi.Input<string>;
    vlanName?: pulumi.Input<string>;
}

export interface ObjectSwitchcontrollerManagedswitchVlan {
    assignmentPriority?: pulumi.Input<number>;
    vlanName?: pulumi.Input<string>;
}

export interface ObjectSwitchcontrollerQosIpdscpmapMap {
    cosQueue?: pulumi.Input<number>;
    diffservs?: pulumi.Input<pulumi.Input<string>[]>;
    ipPrecedences?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ObjectSwitchcontrollerQosQueuepolicyCosQueue {
    description?: pulumi.Input<string>;
    dropPolicy?: pulumi.Input<string>;
    ecn?: pulumi.Input<string>;
    maxRate?: pulumi.Input<number>;
    maxRatePercent?: pulumi.Input<number>;
    minRate?: pulumi.Input<number>;
    minRatePercent?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface ObjectSystemDhcpServerExcludeRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    leaseTime?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
    uciMatch?: pulumi.Input<string>;
    uciStrings?: pulumi.Input<pulumi.Input<string>[]>;
    vciMatch?: pulumi.Input<string>;
    vciStrings?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectSystemDhcpServerIpRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    leaseTime?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
    uciMatch?: pulumi.Input<string>;
    uciStrings?: pulumi.Input<pulumi.Input<string>[]>;
    vciMatch?: pulumi.Input<string>;
    vciStrings?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectSystemDhcpServerOption {
    code?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
    uciMatch?: pulumi.Input<string>;
    uciStrings?: pulumi.Input<pulumi.Input<string>[]>;
    value?: pulumi.Input<string>;
    vciMatch?: pulumi.Input<string>;
    vciStrings?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectSystemDhcpServerReservedAddress {
    action?: pulumi.Input<string>;
    circuitId?: pulumi.Input<string>;
    circuitIdType?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    remoteId?: pulumi.Input<string>;
    remoteIdType?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ObjectSystemGeoipoverrideIp6Range {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
}

export interface ObjectSystemGeoipoverrideIpRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
}

export interface ObjectSystemMetaSysMetaField {
    fieldlength?: pulumi.Input<number>;
    importance?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface ObjectSystemNpuBackgroundSseScan {
    scan?: pulumi.Input<string>;
    scanStale?: pulumi.Input<number>;
    scanVt?: pulumi.Input<number>;
    statsQualAccess?: pulumi.Input<number>;
    statsQualDuration?: pulumi.Input<number>;
    statsUpdateInterval?: pulumi.Input<number>;
    udpKeepaliveInterval?: pulumi.Input<number>;
    udpQualAccess?: pulumi.Input<number>;
    udpQualDuration?: pulumi.Input<number>;
}

export interface ObjectSystemNpuDosOptions {
    npuDosMeterMode?: pulumi.Input<string>;
    npuDosSynproxyMode?: pulumi.Input<string>;
    npuDosTpeMode?: pulumi.Input<string>;
}

export interface ObjectSystemNpuDswDtsProfile {
    action?: pulumi.Input<string>;
    minLimit?: pulumi.Input<number>;
    profileId?: pulumi.Input<number>;
    step?: pulumi.Input<number>;
}

export interface ObjectSystemNpuDswQueueDtsProfile {
    iport?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    oport?: pulumi.Input<string>;
    profileId?: pulumi.Input<number>;
    queueSelect?: pulumi.Input<number>;
}

export interface ObjectSystemNpuFpAnomaly {
    capwapMinlenErr?: pulumi.Input<string>;
    espMinlenErr?: pulumi.Input<string>;
    greCsumErr?: pulumi.Input<string>;
    gtpuPlenErr?: pulumi.Input<string>;
    icmpCsumErr?: pulumi.Input<string>;
    icmpFrag?: pulumi.Input<string>;
    icmpLand?: pulumi.Input<string>;
    icmpMinlenErr?: pulumi.Input<string>;
    ipv4CsumErr?: pulumi.Input<string>;
    ipv4IhlErr?: pulumi.Input<string>;
    ipv4Land?: pulumi.Input<string>;
    ipv4LenErr?: pulumi.Input<string>;
    ipv4OptErr?: pulumi.Input<string>;
    ipv4Optlsrr?: pulumi.Input<string>;
    ipv4Optrr?: pulumi.Input<string>;
    ipv4Optsecurity?: pulumi.Input<string>;
    ipv4Optssrr?: pulumi.Input<string>;
    ipv4Optstream?: pulumi.Input<string>;
    ipv4Opttimestamp?: pulumi.Input<string>;
    ipv4ProtoErr?: pulumi.Input<string>;
    ipv4TtlzeroErr?: pulumi.Input<string>;
    ipv4Unknopt?: pulumi.Input<string>;
    ipv4VerErr?: pulumi.Input<string>;
    ipv6DaddrErr?: pulumi.Input<string>;
    ipv6ExthdrLenErr?: pulumi.Input<string>;
    ipv6ExthdrOrderErr?: pulumi.Input<string>;
    ipv6IhlErr?: pulumi.Input<string>;
    ipv6Land?: pulumi.Input<string>;
    ipv6Optendpid?: pulumi.Input<string>;
    ipv6Opthomeaddr?: pulumi.Input<string>;
    ipv6Optinvld?: pulumi.Input<string>;
    ipv6Optjumbo?: pulumi.Input<string>;
    ipv6Optnsap?: pulumi.Input<string>;
    ipv6Optralert?: pulumi.Input<string>;
    ipv6Opttunnel?: pulumi.Input<string>;
    ipv6PlenZero?: pulumi.Input<string>;
    ipv6ProtoErr?: pulumi.Input<string>;
    ipv6SaddrErr?: pulumi.Input<string>;
    ipv6Unknopt?: pulumi.Input<string>;
    ipv6VerErr?: pulumi.Input<string>;
    nvgreMinlenErr?: pulumi.Input<string>;
    sctpClenErr?: pulumi.Input<string>;
    sctpCrcErr?: pulumi.Input<string>;
    sctpCsumErr?: pulumi.Input<string>;
    sctpL4lenErr?: pulumi.Input<string>;
    tcpCsumErr?: pulumi.Input<string>;
    tcpFinNoack?: pulumi.Input<string>;
    tcpFinOnly?: pulumi.Input<string>;
    tcpHlenErr?: pulumi.Input<string>;
    tcpHlenvsl4lenErr?: pulumi.Input<string>;
    tcpLand?: pulumi.Input<string>;
    tcpNoFlag?: pulumi.Input<string>;
    tcpPlenErr?: pulumi.Input<string>;
    tcpSynData?: pulumi.Input<string>;
    tcpSynFin?: pulumi.Input<string>;
    tcpWinnuke?: pulumi.Input<string>;
    udpCsumErr?: pulumi.Input<string>;
    udpHlenErr?: pulumi.Input<string>;
    udpLand?: pulumi.Input<string>;
    udpLenErr?: pulumi.Input<string>;
    udpPlenErr?: pulumi.Input<string>;
    udpliteCoverErr?: pulumi.Input<string>;
    udpliteCsumErr?: pulumi.Input<string>;
    uespMinlenErr?: pulumi.Input<string>;
    unknprotoMinlenErr?: pulumi.Input<string>;
    vxlanMinlenErr?: pulumi.Input<string>;
}

export interface ObjectSystemNpuHpe {
    allProtocol?: pulumi.Input<number>;
    arpMax?: pulumi.Input<number>;
    enableQueueShaper?: pulumi.Input<string>;
    enableShaper?: pulumi.Input<string>;
    espMax?: pulumi.Input<number>;
    exceptionCode?: pulumi.Input<number>;
    fragmentWithSess?: pulumi.Input<number>;
    fragmentWithoutSession?: pulumi.Input<number>;
    highPriority?: pulumi.Input<number>;
    icmpMax?: pulumi.Input<number>;
    ipFragMax?: pulumi.Input<number>;
    ipOthersMax?: pulumi.Input<number>;
    l2OthersMax?: pulumi.Input<number>;
    priTypeMax?: pulumi.Input<number>;
    queueShaperMax?: pulumi.Input<number>;
    sctpMax?: pulumi.Input<number>;
    tcpMax?: pulumi.Input<number>;
    tcpfinRstMax?: pulumi.Input<number>;
    tcpsynAckMax?: pulumi.Input<number>;
    tcpsynMax?: pulumi.Input<number>;
    udpMax?: pulumi.Input<number>;
}

export interface ObjectSystemNpuIcmpRateCtrl {
    icmpV4BucketSize?: pulumi.Input<number>;
    icmpV4Rate?: pulumi.Input<number>;
    icmpV6BucketSize?: pulumi.Input<number>;
    icmpV6Rate?: pulumi.Input<number>;
}

export interface ObjectSystemNpuIpReassembly {
    maxTimeout?: pulumi.Input<number>;
    minTimeout?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface ObjectSystemNpuIsfNpQueues {
    cos0?: pulumi.Input<string>;
    cos1?: pulumi.Input<string>;
    cos2?: pulumi.Input<string>;
    cos3?: pulumi.Input<string>;
    cos4?: pulumi.Input<string>;
    cos5?: pulumi.Input<string>;
    cos6?: pulumi.Input<string>;
    cos7?: pulumi.Input<string>;
}

export interface ObjectSystemNpuNpQueues {
    ethernetTypes?: pulumi.Input<pulumi.Input<inputs.ObjectSystemNpuNpQueuesEthernetType>[]>;
    ipProtocols?: pulumi.Input<pulumi.Input<inputs.ObjectSystemNpuNpQueuesIpProtocol>[]>;
    ipServices?: pulumi.Input<pulumi.Input<inputs.ObjectSystemNpuNpQueuesIpService>[]>;
    profiles?: pulumi.Input<pulumi.Input<inputs.ObjectSystemNpuNpQueuesProfile>[]>;
    schedulers?: pulumi.Input<pulumi.Input<inputs.ObjectSystemNpuNpQueuesScheduler>[]>;
}

export interface ObjectSystemNpuNpQueuesEthernetType {
    name?: pulumi.Input<string>;
    queue?: pulumi.Input<number>;
    type?: pulumi.Input<number>;
    weight?: pulumi.Input<number>;
}

export interface ObjectSystemNpuNpQueuesIpProtocol {
    name?: pulumi.Input<string>;
    protocol?: pulumi.Input<number>;
    queue?: pulumi.Input<number>;
    weight?: pulumi.Input<number>;
}

export interface ObjectSystemNpuNpQueuesIpService {
    dport?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    protocol?: pulumi.Input<number>;
    queue?: pulumi.Input<number>;
    sport?: pulumi.Input<number>;
    weight?: pulumi.Input<number>;
}

export interface ObjectSystemNpuNpQueuesProfile {
    cos0?: pulumi.Input<string>;
    cos1?: pulumi.Input<string>;
    cos2?: pulumi.Input<string>;
    cos3?: pulumi.Input<string>;
    cos4?: pulumi.Input<string>;
    cos5?: pulumi.Input<string>;
    cos6?: pulumi.Input<string>;
    cos7?: pulumi.Input<string>;
    dscp0?: pulumi.Input<string>;
    dscp1?: pulumi.Input<string>;
    dscp10?: pulumi.Input<string>;
    dscp11?: pulumi.Input<string>;
    dscp12?: pulumi.Input<string>;
    dscp13?: pulumi.Input<string>;
    dscp14?: pulumi.Input<string>;
    dscp15?: pulumi.Input<string>;
    dscp16?: pulumi.Input<string>;
    dscp17?: pulumi.Input<string>;
    dscp18?: pulumi.Input<string>;
    dscp19?: pulumi.Input<string>;
    dscp2?: pulumi.Input<string>;
    dscp20?: pulumi.Input<string>;
    dscp21?: pulumi.Input<string>;
    dscp22?: pulumi.Input<string>;
    dscp23?: pulumi.Input<string>;
    dscp24?: pulumi.Input<string>;
    dscp25?: pulumi.Input<string>;
    dscp26?: pulumi.Input<string>;
    dscp27?: pulumi.Input<string>;
    dscp28?: pulumi.Input<string>;
    dscp29?: pulumi.Input<string>;
    dscp3?: pulumi.Input<string>;
    dscp30?: pulumi.Input<string>;
    dscp31?: pulumi.Input<string>;
    dscp32?: pulumi.Input<string>;
    dscp33?: pulumi.Input<string>;
    dscp34?: pulumi.Input<string>;
    dscp35?: pulumi.Input<string>;
    dscp36?: pulumi.Input<string>;
    dscp37?: pulumi.Input<string>;
    dscp38?: pulumi.Input<string>;
    dscp39?: pulumi.Input<string>;
    dscp4?: pulumi.Input<string>;
    dscp40?: pulumi.Input<string>;
    dscp41?: pulumi.Input<string>;
    dscp42?: pulumi.Input<string>;
    dscp43?: pulumi.Input<string>;
    dscp44?: pulumi.Input<string>;
    dscp45?: pulumi.Input<string>;
    dscp46?: pulumi.Input<string>;
    dscp47?: pulumi.Input<string>;
    dscp48?: pulumi.Input<string>;
    dscp49?: pulumi.Input<string>;
    dscp5?: pulumi.Input<string>;
    dscp50?: pulumi.Input<string>;
    dscp51?: pulumi.Input<string>;
    dscp52?: pulumi.Input<string>;
    dscp53?: pulumi.Input<string>;
    dscp54?: pulumi.Input<string>;
    dscp55?: pulumi.Input<string>;
    dscp56?: pulumi.Input<string>;
    dscp57?: pulumi.Input<string>;
    dscp58?: pulumi.Input<string>;
    dscp59?: pulumi.Input<string>;
    dscp6?: pulumi.Input<string>;
    dscp60?: pulumi.Input<string>;
    dscp61?: pulumi.Input<string>;
    dscp62?: pulumi.Input<string>;
    dscp63?: pulumi.Input<string>;
    dscp7?: pulumi.Input<string>;
    dscp8?: pulumi.Input<string>;
    dscp9?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface ObjectSystemNpuNpQueuesScheduler {
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface ObjectSystemNpuNpqueuesEthernetType {
    name?: pulumi.Input<string>;
    queue?: pulumi.Input<number>;
    type?: pulumi.Input<number>;
    weight?: pulumi.Input<number>;
}

export interface ObjectSystemNpuNpqueuesIpProtocol {
    name?: pulumi.Input<string>;
    protocol?: pulumi.Input<number>;
    queue?: pulumi.Input<number>;
    weight?: pulumi.Input<number>;
}

export interface ObjectSystemNpuNpqueuesIpService {
    dport?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    protocol?: pulumi.Input<number>;
    queue?: pulumi.Input<number>;
    sport?: pulumi.Input<number>;
    weight?: pulumi.Input<number>;
}

export interface ObjectSystemNpuNpqueuesProfile {
    cos0?: pulumi.Input<string>;
    cos1?: pulumi.Input<string>;
    cos2?: pulumi.Input<string>;
    cos3?: pulumi.Input<string>;
    cos4?: pulumi.Input<string>;
    cos5?: pulumi.Input<string>;
    cos6?: pulumi.Input<string>;
    cos7?: pulumi.Input<string>;
    dscp0?: pulumi.Input<string>;
    dscp1?: pulumi.Input<string>;
    dscp10?: pulumi.Input<string>;
    dscp11?: pulumi.Input<string>;
    dscp12?: pulumi.Input<string>;
    dscp13?: pulumi.Input<string>;
    dscp14?: pulumi.Input<string>;
    dscp15?: pulumi.Input<string>;
    dscp16?: pulumi.Input<string>;
    dscp17?: pulumi.Input<string>;
    dscp18?: pulumi.Input<string>;
    dscp19?: pulumi.Input<string>;
    dscp2?: pulumi.Input<string>;
    dscp20?: pulumi.Input<string>;
    dscp21?: pulumi.Input<string>;
    dscp22?: pulumi.Input<string>;
    dscp23?: pulumi.Input<string>;
    dscp24?: pulumi.Input<string>;
    dscp25?: pulumi.Input<string>;
    dscp26?: pulumi.Input<string>;
    dscp27?: pulumi.Input<string>;
    dscp28?: pulumi.Input<string>;
    dscp29?: pulumi.Input<string>;
    dscp3?: pulumi.Input<string>;
    dscp30?: pulumi.Input<string>;
    dscp31?: pulumi.Input<string>;
    dscp32?: pulumi.Input<string>;
    dscp33?: pulumi.Input<string>;
    dscp34?: pulumi.Input<string>;
    dscp35?: pulumi.Input<string>;
    dscp36?: pulumi.Input<string>;
    dscp37?: pulumi.Input<string>;
    dscp38?: pulumi.Input<string>;
    dscp39?: pulumi.Input<string>;
    dscp4?: pulumi.Input<string>;
    dscp40?: pulumi.Input<string>;
    dscp41?: pulumi.Input<string>;
    dscp42?: pulumi.Input<string>;
    dscp43?: pulumi.Input<string>;
    dscp44?: pulumi.Input<string>;
    dscp45?: pulumi.Input<string>;
    dscp46?: pulumi.Input<string>;
    dscp47?: pulumi.Input<string>;
    dscp48?: pulumi.Input<string>;
    dscp49?: pulumi.Input<string>;
    dscp5?: pulumi.Input<string>;
    dscp50?: pulumi.Input<string>;
    dscp51?: pulumi.Input<string>;
    dscp52?: pulumi.Input<string>;
    dscp53?: pulumi.Input<string>;
    dscp54?: pulumi.Input<string>;
    dscp55?: pulumi.Input<string>;
    dscp56?: pulumi.Input<string>;
    dscp57?: pulumi.Input<string>;
    dscp58?: pulumi.Input<string>;
    dscp59?: pulumi.Input<string>;
    dscp6?: pulumi.Input<string>;
    dscp60?: pulumi.Input<string>;
    dscp61?: pulumi.Input<string>;
    dscp62?: pulumi.Input<string>;
    dscp63?: pulumi.Input<string>;
    dscp7?: pulumi.Input<string>;
    dscp8?: pulumi.Input<string>;
    dscp9?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface ObjectSystemNpuNpqueuesScheduler {
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface ObjectSystemNpuNpuTcam {
    data?: pulumi.Input<inputs.ObjectSystemNpuNpuTcamData>;
    dbgDump?: pulumi.Input<number>;
    mask?: pulumi.Input<inputs.ObjectSystemNpuNpuTcamMask>;
    mirAct?: pulumi.Input<inputs.ObjectSystemNpuNpuTcamMirAct>;
    name?: pulumi.Input<string>;
    oid?: pulumi.Input<number>;
    priAct?: pulumi.Input<inputs.ObjectSystemNpuNpuTcamPriAct>;
    sact?: pulumi.Input<inputs.ObjectSystemNpuNpuTcamSact>;
    tact?: pulumi.Input<inputs.ObjectSystemNpuNpuTcamTact>;
    type?: pulumi.Input<string>;
    vid?: pulumi.Input<number>;
}

export interface ObjectSystemNpuNpuTcamData {
    df?: pulumi.Input<string>;
    dstip?: pulumi.Input<string>;
    dstipv6?: pulumi.Input<string>;
    dstmac?: pulumi.Input<string>;
    dstport?: pulumi.Input<number>;
    ethertype?: pulumi.Input<string>;
    extTag?: pulumi.Input<string>;
    fragOff?: pulumi.Input<number>;
    genBufCnt?: pulumi.Input<number>;
    genIv?: pulumi.Input<string>;
    genL3Flags?: pulumi.Input<number>;
    genL4Flags?: pulumi.Input<number>;
    genPktCtrl?: pulumi.Input<number>;
    genPri?: pulumi.Input<number>;
    genPriV?: pulumi.Input<string>;
    genTv?: pulumi.Input<string>;
    ihl?: pulumi.Input<number>;
    ip4Id?: pulumi.Input<number>;
    ip6Fl?: pulumi.Input<number>;
    ipver?: pulumi.Input<number>;
    l4Wd10?: pulumi.Input<number>;
    l4Wd11?: pulumi.Input<number>;
    l4Wd8?: pulumi.Input<number>;
    l4Wd9?: pulumi.Input<number>;
    mf?: pulumi.Input<string>;
    protocol?: pulumi.Input<number>;
    slink?: pulumi.Input<number>;
    smacChange?: pulumi.Input<string>;
    sp?: pulumi.Input<number>;
    srcCfi?: pulumi.Input<string>;
    srcPrio?: pulumi.Input<number>;
    srcUpdt?: pulumi.Input<string>;
    srcip?: pulumi.Input<string>;
    srcipv6?: pulumi.Input<string>;
    srcmac?: pulumi.Input<string>;
    srcport?: pulumi.Input<number>;
    svid?: pulumi.Input<number>;
    tcpAck?: pulumi.Input<string>;
    tcpCwr?: pulumi.Input<string>;
    tcpEce?: pulumi.Input<string>;
    tcpFin?: pulumi.Input<string>;
    tcpPush?: pulumi.Input<string>;
    tcpRst?: pulumi.Input<string>;
    tcpSyn?: pulumi.Input<string>;
    tcpUrg?: pulumi.Input<string>;
    tgtCfi?: pulumi.Input<string>;
    tgtPrio?: pulumi.Input<number>;
    tgtUpdt?: pulumi.Input<string>;
    tgtV?: pulumi.Input<string>;
    tos?: pulumi.Input<number>;
    tp?: pulumi.Input<number>;
    ttl?: pulumi.Input<number>;
    tvid?: pulumi.Input<number>;
    vdid?: pulumi.Input<number>;
}

export interface ObjectSystemNpuNpuTcamMask {
    df?: pulumi.Input<string>;
    dstip?: pulumi.Input<string>;
    dstipv6?: pulumi.Input<string>;
    dstmac?: pulumi.Input<string>;
    dstport?: pulumi.Input<number>;
    ethertype?: pulumi.Input<string>;
    extTag?: pulumi.Input<string>;
    fragOff?: pulumi.Input<number>;
    genBufCnt?: pulumi.Input<number>;
    genIv?: pulumi.Input<string>;
    genL3Flags?: pulumi.Input<number>;
    genL4Flags?: pulumi.Input<number>;
    genPktCtrl?: pulumi.Input<number>;
    genPri?: pulumi.Input<number>;
    genPriV?: pulumi.Input<string>;
    genTv?: pulumi.Input<string>;
    ihl?: pulumi.Input<number>;
    ip4Id?: pulumi.Input<number>;
    ip6Fl?: pulumi.Input<number>;
    ipver?: pulumi.Input<number>;
    l4Wd10?: pulumi.Input<number>;
    l4Wd11?: pulumi.Input<number>;
    l4Wd8?: pulumi.Input<number>;
    l4Wd9?: pulumi.Input<number>;
    mf?: pulumi.Input<string>;
    protocol?: pulumi.Input<number>;
    slink?: pulumi.Input<number>;
    smacChange?: pulumi.Input<string>;
    sp?: pulumi.Input<number>;
    srcCfi?: pulumi.Input<string>;
    srcPrio?: pulumi.Input<number>;
    srcUpdt?: pulumi.Input<string>;
    srcip?: pulumi.Input<string>;
    srcipv6?: pulumi.Input<string>;
    srcmac?: pulumi.Input<string>;
    srcport?: pulumi.Input<number>;
    svid?: pulumi.Input<number>;
    tcpAck?: pulumi.Input<string>;
    tcpCwr?: pulumi.Input<string>;
    tcpEce?: pulumi.Input<string>;
    tcpFin?: pulumi.Input<string>;
    tcpPush?: pulumi.Input<string>;
    tcpRst?: pulumi.Input<string>;
    tcpSyn?: pulumi.Input<string>;
    tcpUrg?: pulumi.Input<string>;
    tgtCfi?: pulumi.Input<string>;
    tgtPrio?: pulumi.Input<number>;
    tgtUpdt?: pulumi.Input<string>;
    tgtV?: pulumi.Input<string>;
    tos?: pulumi.Input<number>;
    tp?: pulumi.Input<number>;
    ttl?: pulumi.Input<number>;
    tvid?: pulumi.Input<number>;
    vdid?: pulumi.Input<number>;
}

export interface ObjectSystemNpuNpuTcamMirAct {
    vlif?: pulumi.Input<number>;
}

export interface ObjectSystemNpuNpuTcamPriAct {
    priority?: pulumi.Input<number>;
    weight?: pulumi.Input<number>;
}

export interface ObjectSystemNpuNpuTcamSact {
    act?: pulumi.Input<number>;
    actV?: pulumi.Input<string>;
    bmproc?: pulumi.Input<number>;
    bmprocV?: pulumi.Input<string>;
    dfLif?: pulumi.Input<number>;
    dfLifV?: pulumi.Input<string>;
    dfr?: pulumi.Input<number>;
    dfrV?: pulumi.Input<string>;
    dmacSkip?: pulumi.Input<number>;
    dmacSkipV?: pulumi.Input<string>;
    dosen?: pulumi.Input<number>;
    dosenV?: pulumi.Input<string>;
    espffProc?: pulumi.Input<number>;
    espffProcV?: pulumi.Input<string>;
    etypePid?: pulumi.Input<number>;
    etypePidV?: pulumi.Input<string>;
    fragProc?: pulumi.Input<number>;
    fragProcV?: pulumi.Input<string>;
    fwd?: pulumi.Input<number>;
    fwdLif?: pulumi.Input<number>;
    fwdLifV?: pulumi.Input<string>;
    fwdTvid?: pulumi.Input<number>;
    fwdTvidV?: pulumi.Input<string>;
    fwdV?: pulumi.Input<string>;
    icpen?: pulumi.Input<number>;
    icpenV?: pulumi.Input<string>;
    igmpMldSnp?: pulumi.Input<number>;
    igmpMldSnpV?: pulumi.Input<string>;
    learn?: pulumi.Input<number>;
    learnV?: pulumi.Input<string>;
    mSrhCtrl?: pulumi.Input<number>;
    mSrhCtrlV?: pulumi.Input<string>;
    macId?: pulumi.Input<number>;
    macIdV?: pulumi.Input<string>;
    mss?: pulumi.Input<number>;
    mssV?: pulumi.Input<string>;
    pleen?: pulumi.Input<number>;
    pleenV?: pulumi.Input<string>;
    prioPid?: pulumi.Input<number>;
    prioPidV?: pulumi.Input<string>;
    promis?: pulumi.Input<number>;
    promisV?: pulumi.Input<string>;
    rfsh?: pulumi.Input<number>;
    rfshV?: pulumi.Input<string>;
    smacSkip?: pulumi.Input<number>;
    smacSkipV?: pulumi.Input<string>;
    tpSmchk?: pulumi.Input<number>;
    tpSmchkV?: pulumi.Input<string>;
    tpeId?: pulumi.Input<number>;
    tpeIdV?: pulumi.Input<string>;
    vdm?: pulumi.Input<number>;
    vdmV?: pulumi.Input<string>;
    vdomId?: pulumi.Input<number>;
    vdomIdV?: pulumi.Input<string>;
    xMode?: pulumi.Input<number>;
    xModeV?: pulumi.Input<string>;
}

export interface ObjectSystemNpuNpuTcamTact {
    act?: pulumi.Input<number>;
    actV?: pulumi.Input<string>;
    fmtuv4S?: pulumi.Input<number>;
    fmtuv4SV?: pulumi.Input<string>;
    fmtuv6S?: pulumi.Input<number>;
    fmtuv6SV?: pulumi.Input<string>;
    lnkid?: pulumi.Input<number>;
    lnkidV?: pulumi.Input<string>;
    macId?: pulumi.Input<number>;
    macIdV?: pulumi.Input<string>;
    mssT?: pulumi.Input<number>;
    mssTV?: pulumi.Input<string>;
    mtuv4?: pulumi.Input<number>;
    mtuv4V?: pulumi.Input<string>;
    mtuv6?: pulumi.Input<number>;
    mtuv6V?: pulumi.Input<string>;
    slifAct?: pulumi.Input<number>;
    slifActV?: pulumi.Input<string>;
    sublnkid?: pulumi.Input<number>;
    sublnkidV?: pulumi.Input<string>;
    tgtvAct?: pulumi.Input<number>;
    tgtvActV?: pulumi.Input<string>;
    tlifAct?: pulumi.Input<number>;
    tlifActV?: pulumi.Input<string>;
    tpeid?: pulumi.Input<number>;
    tpeidV?: pulumi.Input<string>;
    v6fe?: pulumi.Input<number>;
    v6feV?: pulumi.Input<string>;
    vepEn?: pulumi.Input<number>;
    vepEnV?: pulumi.Input<string>;
    vepSlid?: pulumi.Input<number>;
    vepSlidV?: pulumi.Input<string>;
    xltLif?: pulumi.Input<number>;
    xltLifV?: pulumi.Input<string>;
    xltVid?: pulumi.Input<number>;
    xltVidV?: pulumi.Input<string>;
}

export interface ObjectSystemNpuNputcamData {
    df?: pulumi.Input<string>;
    dstip?: pulumi.Input<string>;
    dstipv6?: pulumi.Input<string>;
    dstmac?: pulumi.Input<string>;
    dstport?: pulumi.Input<number>;
    ethertype?: pulumi.Input<string>;
    extTag?: pulumi.Input<string>;
    fragOff?: pulumi.Input<number>;
    genBufCnt?: pulumi.Input<number>;
    genIv?: pulumi.Input<string>;
    genL3Flags?: pulumi.Input<number>;
    genL4Flags?: pulumi.Input<number>;
    genPktCtrl?: pulumi.Input<number>;
    genPri?: pulumi.Input<number>;
    genPriV?: pulumi.Input<string>;
    genTv?: pulumi.Input<string>;
    ihl?: pulumi.Input<number>;
    ip4Id?: pulumi.Input<number>;
    ip6Fl?: pulumi.Input<number>;
    ipver?: pulumi.Input<number>;
    l4Wd10?: pulumi.Input<number>;
    l4Wd11?: pulumi.Input<number>;
    l4Wd8?: pulumi.Input<number>;
    l4Wd9?: pulumi.Input<number>;
    mf?: pulumi.Input<string>;
    protocol?: pulumi.Input<number>;
    slink?: pulumi.Input<number>;
    smacChange?: pulumi.Input<string>;
    sp?: pulumi.Input<number>;
    srcCfi?: pulumi.Input<string>;
    srcPrio?: pulumi.Input<number>;
    srcUpdt?: pulumi.Input<string>;
    srcip?: pulumi.Input<string>;
    srcipv6?: pulumi.Input<string>;
    srcmac?: pulumi.Input<string>;
    srcport?: pulumi.Input<number>;
    svid?: pulumi.Input<number>;
    tcpAck?: pulumi.Input<string>;
    tcpCwr?: pulumi.Input<string>;
    tcpEce?: pulumi.Input<string>;
    tcpFin?: pulumi.Input<string>;
    tcpPush?: pulumi.Input<string>;
    tcpRst?: pulumi.Input<string>;
    tcpSyn?: pulumi.Input<string>;
    tcpUrg?: pulumi.Input<string>;
    tgtCfi?: pulumi.Input<string>;
    tgtPrio?: pulumi.Input<number>;
    tgtUpdt?: pulumi.Input<string>;
    tgtV?: pulumi.Input<string>;
    tos?: pulumi.Input<number>;
    tp?: pulumi.Input<number>;
    ttl?: pulumi.Input<number>;
    tvid?: pulumi.Input<number>;
    vdid?: pulumi.Input<number>;
}

export interface ObjectSystemNpuNputcamMask {
    df?: pulumi.Input<string>;
    dstip?: pulumi.Input<string>;
    dstipv6?: pulumi.Input<string>;
    dstmac?: pulumi.Input<string>;
    dstport?: pulumi.Input<number>;
    ethertype?: pulumi.Input<string>;
    extTag?: pulumi.Input<string>;
    fragOff?: pulumi.Input<number>;
    genBufCnt?: pulumi.Input<number>;
    genIv?: pulumi.Input<string>;
    genL3Flags?: pulumi.Input<number>;
    genL4Flags?: pulumi.Input<number>;
    genPktCtrl?: pulumi.Input<number>;
    genPri?: pulumi.Input<number>;
    genPriV?: pulumi.Input<string>;
    genTv?: pulumi.Input<string>;
    ihl?: pulumi.Input<number>;
    ip4Id?: pulumi.Input<number>;
    ip6Fl?: pulumi.Input<number>;
    ipver?: pulumi.Input<number>;
    l4Wd10?: pulumi.Input<number>;
    l4Wd11?: pulumi.Input<number>;
    l4Wd8?: pulumi.Input<number>;
    l4Wd9?: pulumi.Input<number>;
    mf?: pulumi.Input<string>;
    protocol?: pulumi.Input<number>;
    slink?: pulumi.Input<number>;
    smacChange?: pulumi.Input<string>;
    sp?: pulumi.Input<number>;
    srcCfi?: pulumi.Input<string>;
    srcPrio?: pulumi.Input<number>;
    srcUpdt?: pulumi.Input<string>;
    srcip?: pulumi.Input<string>;
    srcipv6?: pulumi.Input<string>;
    srcmac?: pulumi.Input<string>;
    srcport?: pulumi.Input<number>;
    svid?: pulumi.Input<number>;
    tcpAck?: pulumi.Input<string>;
    tcpCwr?: pulumi.Input<string>;
    tcpEce?: pulumi.Input<string>;
    tcpFin?: pulumi.Input<string>;
    tcpPush?: pulumi.Input<string>;
    tcpRst?: pulumi.Input<string>;
    tcpSyn?: pulumi.Input<string>;
    tcpUrg?: pulumi.Input<string>;
    tgtCfi?: pulumi.Input<string>;
    tgtPrio?: pulumi.Input<number>;
    tgtUpdt?: pulumi.Input<string>;
    tgtV?: pulumi.Input<string>;
    tos?: pulumi.Input<number>;
    tp?: pulumi.Input<number>;
    ttl?: pulumi.Input<number>;
    tvid?: pulumi.Input<number>;
    vdid?: pulumi.Input<number>;
}

export interface ObjectSystemNpuNputcamMirAct {
    vlif?: pulumi.Input<number>;
}

export interface ObjectSystemNpuNputcamPriAct {
    priority?: pulumi.Input<number>;
    weight?: pulumi.Input<number>;
}

export interface ObjectSystemNpuNputcamSact {
    act?: pulumi.Input<number>;
    actV?: pulumi.Input<string>;
    bmproc?: pulumi.Input<number>;
    bmprocV?: pulumi.Input<string>;
    dfLif?: pulumi.Input<number>;
    dfLifV?: pulumi.Input<string>;
    dfr?: pulumi.Input<number>;
    dfrV?: pulumi.Input<string>;
    dmacSkip?: pulumi.Input<number>;
    dmacSkipV?: pulumi.Input<string>;
    dosen?: pulumi.Input<number>;
    dosenV?: pulumi.Input<string>;
    espffProc?: pulumi.Input<number>;
    espffProcV?: pulumi.Input<string>;
    etypePid?: pulumi.Input<number>;
    etypePidV?: pulumi.Input<string>;
    fragProc?: pulumi.Input<number>;
    fragProcV?: pulumi.Input<string>;
    fwd?: pulumi.Input<number>;
    fwdLif?: pulumi.Input<number>;
    fwdLifV?: pulumi.Input<string>;
    fwdTvid?: pulumi.Input<number>;
    fwdTvidV?: pulumi.Input<string>;
    fwdV?: pulumi.Input<string>;
    icpen?: pulumi.Input<number>;
    icpenV?: pulumi.Input<string>;
    igmpMldSnp?: pulumi.Input<number>;
    igmpMldSnpV?: pulumi.Input<string>;
    learn?: pulumi.Input<number>;
    learnV?: pulumi.Input<string>;
    mSrhCtrl?: pulumi.Input<number>;
    mSrhCtrlV?: pulumi.Input<string>;
    macId?: pulumi.Input<number>;
    macIdV?: pulumi.Input<string>;
    mss?: pulumi.Input<number>;
    mssV?: pulumi.Input<string>;
    pleen?: pulumi.Input<number>;
    pleenV?: pulumi.Input<string>;
    prioPid?: pulumi.Input<number>;
    prioPidV?: pulumi.Input<string>;
    promis?: pulumi.Input<number>;
    promisV?: pulumi.Input<string>;
    rfsh?: pulumi.Input<number>;
    rfshV?: pulumi.Input<string>;
    smacSkip?: pulumi.Input<number>;
    smacSkipV?: pulumi.Input<string>;
    tpSmchk?: pulumi.Input<number>;
    tpSmchkV?: pulumi.Input<string>;
    tpeId?: pulumi.Input<number>;
    tpeIdV?: pulumi.Input<string>;
    vdm?: pulumi.Input<number>;
    vdmV?: pulumi.Input<string>;
    vdomId?: pulumi.Input<number>;
    vdomIdV?: pulumi.Input<string>;
    xMode?: pulumi.Input<number>;
    xModeV?: pulumi.Input<string>;
}

export interface ObjectSystemNpuNputcamTact {
    act?: pulumi.Input<number>;
    actV?: pulumi.Input<string>;
    fmtuv4S?: pulumi.Input<number>;
    fmtuv4SV?: pulumi.Input<string>;
    fmtuv6S?: pulumi.Input<number>;
    fmtuv6SV?: pulumi.Input<string>;
    lnkid?: pulumi.Input<number>;
    lnkidV?: pulumi.Input<string>;
    macId?: pulumi.Input<number>;
    macIdV?: pulumi.Input<string>;
    mssT?: pulumi.Input<number>;
    mssTV?: pulumi.Input<string>;
    mtuv4?: pulumi.Input<number>;
    mtuv4V?: pulumi.Input<string>;
    mtuv6?: pulumi.Input<number>;
    mtuv6V?: pulumi.Input<string>;
    slifAct?: pulumi.Input<number>;
    slifActV?: pulumi.Input<string>;
    sublnkid?: pulumi.Input<number>;
    sublnkidV?: pulumi.Input<string>;
    tgtvAct?: pulumi.Input<number>;
    tgtvActV?: pulumi.Input<string>;
    tlifAct?: pulumi.Input<number>;
    tlifActV?: pulumi.Input<string>;
    tpeid?: pulumi.Input<number>;
    tpeidV?: pulumi.Input<string>;
    v6fe?: pulumi.Input<number>;
    v6feV?: pulumi.Input<string>;
    vepEn?: pulumi.Input<number>;
    vepEnV?: pulumi.Input<string>;
    vepSlid?: pulumi.Input<number>;
    vepSlidV?: pulumi.Input<string>;
    xltLif?: pulumi.Input<number>;
    xltLifV?: pulumi.Input<string>;
    xltVid?: pulumi.Input<number>;
    xltVidV?: pulumi.Input<string>;
}

export interface ObjectSystemNpuPortCpuMap {
    cpuCore?: pulumi.Input<string>;
    interface?: pulumi.Input<string>;
}

export interface ObjectSystemNpuPortNpuMap {
    interface?: pulumi.Input<string>;
    npuGroupIndex?: pulumi.Input<number>;
}

export interface ObjectSystemNpuPortPathOption {
    portsUsingNpus?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectSystemNpuPriorityProtocol {
    bfd?: pulumi.Input<string>;
    bgp?: pulumi.Input<string>;
    slbc?: pulumi.Input<string>;
}

export interface ObjectSystemNpuSseHaScan {
    gap?: pulumi.Input<number>;
    maxSessionCnt?: pulumi.Input<number>;
    minDuration?: pulumi.Input<number>;
}

export interface ObjectSystemNpuSwEhHash {
    computation?: pulumi.Input<string>;
    destinationIpLower16?: pulumi.Input<string>;
    destinationIpUpper16?: pulumi.Input<string>;
    destinationPort?: pulumi.Input<string>;
    ipProtocol?: pulumi.Input<string>;
    netmaskLength?: pulumi.Input<number>;
    sourceIpLower16?: pulumi.Input<string>;
    sourceIpUpper16?: pulumi.Input<string>;
    sourcePort?: pulumi.Input<string>;
}

export interface ObjectSystemNpuSwTrHash {
    draco15?: pulumi.Input<string>;
    tcpUdpPort?: pulumi.Input<string>;
}

export interface ObjectSystemNpuTcpTimeoutProfile {
    closeWait?: pulumi.Input<number>;
    finWait?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    synSent?: pulumi.Input<number>;
    synWait?: pulumi.Input<number>;
    tcpIdle?: pulumi.Input<number>;
    timeWait?: pulumi.Input<number>;
}

export interface ObjectSystemNpuUdpTimeoutProfile {
    id?: pulumi.Input<number>;
    udpIdle?: pulumi.Input<number>;
}

export interface ObjectSystemReplacemsggroupAdmin {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface ObjectSystemReplacemsggroupAlertmail {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    msgType?: pulumi.Input<string>;
}

export interface ObjectSystemReplacemsggroupAuth {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface ObjectSystemReplacemsggroupAutomation {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface ObjectSystemReplacemsggroupCustomMessage {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface ObjectSystemReplacemsggroupDeviceDetectionPortal {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface ObjectSystemReplacemsggroupEc {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface ObjectSystemReplacemsggroupFortiguardWf {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface ObjectSystemReplacemsggroupFtp {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface ObjectSystemReplacemsggroupHttp {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface ObjectSystemReplacemsggroupIcap {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface ObjectSystemReplacemsggroupMail {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface ObjectSystemReplacemsggroupMm {
    buffer?: pulumi.Input<string>;
    charset?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface ObjectSystemReplacemsggroupMm1 {
    addSmil?: pulumi.Input<string>;
    charset?: pulumi.Input<string>;
    class?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    from?: pulumi.Input<string>;
    fromSender?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
    message?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
    rspStatus?: pulumi.Input<string>;
    rspText?: pulumi.Input<string>;
    senderVisibility?: pulumi.Input<string>;
    smilPart?: pulumi.Input<string>;
    subject?: pulumi.Input<string>;
}

export interface ObjectSystemReplacemsggroupMm3 {
    addHtml?: pulumi.Input<string>;
    charset?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    from?: pulumi.Input<string>;
    fromSender?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    htmlPart?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
    message?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
    subject?: pulumi.Input<string>;
}

export interface ObjectSystemReplacemsggroupMm4 {
    addSmil?: pulumi.Input<string>;
    charset?: pulumi.Input<string>;
    class?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    from?: pulumi.Input<string>;
    fromSender?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
    message?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
    rspStatus?: pulumi.Input<string>;
    smilPart?: pulumi.Input<string>;
    subject?: pulumi.Input<string>;
}

export interface ObjectSystemReplacemsggroupMm7 {
    addSmil?: pulumi.Input<string>;
    addrType?: pulumi.Input<string>;
    allowContentAdaptation?: pulumi.Input<string>;
    charset?: pulumi.Input<string>;
    class?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    from?: pulumi.Input<string>;
    fromSender?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
    message?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
    rspStatus?: pulumi.Input<string>;
    smilPart?: pulumi.Input<string>;
    subject?: pulumi.Input<string>;
}

export interface ObjectSystemReplacemsggroupNacQuar {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    msgType?: pulumi.Input<string>;
}

export interface ObjectSystemReplacemsggroupNntp {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface ObjectSystemReplacemsggroupSpam {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface ObjectSystemReplacemsggroupSslvpn {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface ObjectSystemReplacemsggroupTrafficQuota {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface ObjectSystemReplacemsggroupUtm {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface ObjectSystemReplacemsggroupWebproxy {
    buffer?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    header?: pulumi.Input<string>;
    msgType?: pulumi.Input<string>;
}

export interface ObjectSystemSdnconnectorCompartmentList {
    compartmentId?: pulumi.Input<string>;
}

export interface ObjectSystemSdnconnectorExternalAccountList {
    externalId?: pulumi.Input<string>;
    regionLists?: pulumi.Input<pulumi.Input<string>[]>;
    roleArn?: pulumi.Input<string>;
}

export interface ObjectSystemSdnconnectorExternalIp {
    name?: pulumi.Input<string>;
}

export interface ObjectSystemSdnconnectorForwardingRule {
    ruleName?: pulumi.Input<string>;
    target?: pulumi.Input<string>;
}

export interface ObjectSystemSdnconnectorGcpProjectList {
    gcpZoneLists?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<string>;
}

export interface ObjectSystemSdnconnectorNic {
    ips?: pulumi.Input<pulumi.Input<inputs.ObjectSystemSdnconnectorNicIp>[]>;
    name?: pulumi.Input<string>;
}

export interface ObjectSystemSdnconnectorNicIp {
    name?: pulumi.Input<string>;
    publicIp?: pulumi.Input<string>;
    resourceGroup?: pulumi.Input<string>;
}

export interface ObjectSystemSdnconnectorOciRegionList {
    region?: pulumi.Input<string>;
}

export interface ObjectSystemSdnconnectorRoute {
    name?: pulumi.Input<string>;
}

export interface ObjectSystemSdnconnectorRouteTable {
    name?: pulumi.Input<string>;
    resourceGroup?: pulumi.Input<string>;
    routes?: pulumi.Input<pulumi.Input<inputs.ObjectSystemSdnconnectorRouteTableRoute>[]>;
    subscriptionId?: pulumi.Input<string>;
}

export interface ObjectSystemSdnconnectorRouteTableRoute {
    name?: pulumi.Input<string>;
    nextHop?: pulumi.Input<string>;
}

export interface ObjectSystemSdnconnectorRoutetableRoute {
    name?: pulumi.Input<string>;
    nextHop?: pulumi.Input<string>;
}

export interface ObjectUserDeviceDynamicMapping {
    _scopes?: pulumi.Input<pulumi.Input<inputs.ObjectUserDeviceDynamicMapping_Scope>[]>;
    avatar?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    family?: pulumi.Input<string>;
    hardwareVendor?: pulumi.Input<string>;
    hardwareVersion?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    masterDevice?: pulumi.Input<string>;
    os?: pulumi.Input<string>;
    softwareVersion?: pulumi.Input<string>;
    tags?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
}

export interface ObjectUserDeviceDynamicMapping_Scope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface ObjectUserDeviceTagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectUserDeviceaccesslistDeviceList {
    action?: pulumi.Input<string>;
    device?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface ObjectUserDevicegroupDynamicMapping {
    _ifUnmanaged?: pulumi.Input<number>;
    _scopes?: pulumi.Input<pulumi.Input<inputs.ObjectUserDevicegroupDynamicMapping_Scope>[]>;
    comment?: pulumi.Input<string>;
    member?: pulumi.Input<string>;
}

export interface ObjectUserDevicegroupDynamicMapping_Scope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface ObjectUserDevicegroupTagging {
    category?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectUserDomaincontrollerExtraServer {
    id?: pulumi.Input<number>;
    ipAddress?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    sourceIpAddress?: pulumi.Input<string>;
    sourcePort?: pulumi.Input<number>;
}

export interface ObjectUserFssoDynamicMapping {
    _guiMeta?: pulumi.Input<string>;
    _scopes?: pulumi.Input<pulumi.Input<inputs.ObjectUserFssoDynamicMapping_Scope>[]>;
    groupPollInterval?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    interfaceSelectMethod?: pulumi.Input<string>;
    ldapPoll?: pulumi.Input<string>;
    ldapPollFilter?: pulumi.Input<string>;
    ldapPollInterval?: pulumi.Input<number>;
    ldapServer?: pulumi.Input<string>;
    logonTimeout?: pulumi.Input<number>;
    password2s?: pulumi.Input<pulumi.Input<string>[]>;
    password3s?: pulumi.Input<pulumi.Input<string>[]>;
    password4s?: pulumi.Input<pulumi.Input<string>[]>;
    password5s?: pulumi.Input<pulumi.Input<string>[]>;
    passwords?: pulumi.Input<pulumi.Input<string>[]>;
    port?: pulumi.Input<number>;
    port2?: pulumi.Input<number>;
    port3?: pulumi.Input<number>;
    port4?: pulumi.Input<number>;
    port5?: pulumi.Input<number>;
    server?: pulumi.Input<string>;
    server2?: pulumi.Input<string>;
    server3?: pulumi.Input<string>;
    server4?: pulumi.Input<string>;
    server5?: pulumi.Input<string>;
    sni?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
    sourceIp6?: pulumi.Input<string>;
    ssl?: pulumi.Input<string>;
    sslServerHostIpCheck?: pulumi.Input<string>;
    sslTrustedCert?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    userInfoServer?: pulumi.Input<string>;
}

export interface ObjectUserFssoDynamicMapping_Scope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface ObjectUserFssopollingAdgrp {
    name?: pulumi.Input<string>;
}

export interface ObjectUserGroupDynamicMapping {
    _scopes?: pulumi.Input<pulumi.Input<inputs.ObjectUserGroupDynamicMapping_Scope>[]>;
    authConcurrentOverride?: pulumi.Input<string>;
    authConcurrentValue?: pulumi.Input<number>;
    authtimeout?: pulumi.Input<number>;
    company?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    expire?: pulumi.Input<number>;
    expireType?: pulumi.Input<string>;
    groupType?: pulumi.Input<string>;
    guests?: pulumi.Input<pulumi.Input<inputs.ObjectUserGroupDynamicMappingGuest>[]>;
    httpDigestRealm?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ldapMemberof?: pulumi.Input<string>;
    logicType?: pulumi.Input<string>;
    matches?: pulumi.Input<pulumi.Input<inputs.ObjectUserGroupDynamicMappingMatch>[]>;
    maxAccounts?: pulumi.Input<number>;
    member?: pulumi.Input<string>;
    mobilePhone?: pulumi.Input<string>;
    multipleGuestAdd?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    redirUrl?: pulumi.Input<string>;
    smsCustomServer?: pulumi.Input<string>;
    smsServer?: pulumi.Input<string>;
    sponsor?: pulumi.Input<string>;
    sslvpnBookmarksGroup?: pulumi.Input<string>;
    sslvpnCacheCleaner?: pulumi.Input<string>;
    sslvpnClientChecks?: pulumi.Input<pulumi.Input<string>[]>;
    sslvpnFtp?: pulumi.Input<string>;
    sslvpnHttp?: pulumi.Input<string>;
    sslvpnOsCheck?: pulumi.Input<string>;
    sslvpnOsCheckList?: pulumi.Input<inputs.ObjectUserGroupDynamicMappingSslvpnOsCheckList>;
    sslvpnPortal?: pulumi.Input<string>;
    sslvpnPortalHeading?: pulumi.Input<string>;
    sslvpnRdp?: pulumi.Input<string>;
    sslvpnSamba?: pulumi.Input<string>;
    sslvpnSplitTunneling?: pulumi.Input<string>;
    sslvpnSsh?: pulumi.Input<string>;
    sslvpnTelnet?: pulumi.Input<string>;
    sslvpnTunnel?: pulumi.Input<string>;
    sslvpnTunnelEndip?: pulumi.Input<string>;
    sslvpnTunnelIpMode?: pulumi.Input<string>;
    sslvpnTunnelStartip?: pulumi.Input<string>;
    sslvpnVirtualDesktop?: pulumi.Input<string>;
    sslvpnVnc?: pulumi.Input<string>;
    sslvpnWebapp?: pulumi.Input<string>;
    ssoAttributeValue?: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
}

export interface ObjectUserGroupDynamicMappingGuest {
    comment?: pulumi.Input<string>;
    company?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    expiration?: pulumi.Input<string>;
    group?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    mobilePhone?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    passwords?: pulumi.Input<pulumi.Input<string>[]>;
    sponsor?: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
}

export interface ObjectUserGroupDynamicMappingMatch {
    _guiMeta?: pulumi.Input<string>;
    groupName?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    serverName?: pulumi.Input<string>;
}

export interface ObjectUserGroupDynamicMappingSslvpnOsCheckList {
    action?: pulumi.Input<string>;
    latestPatchLevel?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tolerance?: pulumi.Input<number>;
}

export interface ObjectUserGroupDynamicMapping_Scope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface ObjectUserGroupGuest {
    comment?: pulumi.Input<string>;
    company?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    expiration?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    mobilePhone?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    passwords?: pulumi.Input<pulumi.Input<string>[]>;
    sponsor?: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
}

export interface ObjectUserGroupMatch {
    _guiMeta?: pulumi.Input<string>;
    groupName?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    serverName?: pulumi.Input<string>;
}

export interface ObjectUserLdapDynamicMapping {
    _scopes?: pulumi.Input<pulumi.Input<inputs.ObjectUserLdapDynamicMapping_Scope>[]>;
    accountKeyCertField?: pulumi.Input<string>;
    accountKeyFilter?: pulumi.Input<string>;
    accountKeyName?: pulumi.Input<string>;
    accountKeyProcessing?: pulumi.Input<string>;
    accountKeyUpnSan?: pulumi.Input<string>;
    antiphish?: pulumi.Input<string>;
    caCert?: pulumi.Input<string>;
    clientCertAuth?: pulumi.Input<string>;
    clientCerts?: pulumi.Input<pulumi.Input<string>[]>;
    cnid?: pulumi.Input<string>;
    dn?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    group?: pulumi.Input<string>;
    groupFilter?: pulumi.Input<string>;
    groupMemberCheck?: pulumi.Input<string>;
    groupObjectFilter?: pulumi.Input<string>;
    groupObjectSearchBase?: pulumi.Input<string>;
    groupSearchBase?: pulumi.Input<string>;
    interface?: pulumi.Input<string>;
    interfaceSelectMethod?: pulumi.Input<string>;
    maxConnections?: pulumi.Input<number>;
    memberAttr?: pulumi.Input<string>;
    obtainUserInfo?: pulumi.Input<string>;
    passwordAttr?: pulumi.Input<string>;
    passwordExpiryWarning?: pulumi.Input<string>;
    passwordRenewal?: pulumi.Input<string>;
    passwords?: pulumi.Input<pulumi.Input<string>[]>;
    port?: pulumi.Input<number>;
    retrieveProtectionProfile?: pulumi.Input<string>;
    searchTypes?: pulumi.Input<pulumi.Input<string>[]>;
    secondaryServer?: pulumi.Input<string>;
    secure?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
    serverIdentityCheck?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
    sourcePort?: pulumi.Input<number>;
    sslMinProtoVersion?: pulumi.Input<string>;
    statusTtl?: pulumi.Input<number>;
    tertiaryServer?: pulumi.Input<string>;
    twoFactor?: pulumi.Input<string>;
    twoFactorAuthentication?: pulumi.Input<string>;
    twoFactorFilter?: pulumi.Input<string>;
    twoFactorNotification?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    userInfoExchangeServer?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export interface ObjectUserLdapDynamicMapping_Scope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface ObjectUserNsxService {
    id?: pulumi.Input<string>;
    integration?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    refId?: pulumi.Input<string>;
}

export interface ObjectUserRadiusAccountingServer {
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    interfaceSelectMethod?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    secrets?: pulumi.Input<pulumi.Input<string>[]>;
    server?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectUserRadiusDynamicMapping {
    _scopes?: pulumi.Input<pulumi.Input<inputs.ObjectUserRadiusDynamicMapping_Scope>[]>;
    accountKeyCertField?: pulumi.Input<string>;
    accountKeyProcessing?: pulumi.Input<string>;
    accountingServers?: pulumi.Input<pulumi.Input<inputs.ObjectUserRadiusDynamicMappingAccountingServer>[]>;
    acctAllServers?: pulumi.Input<string>;
    acctInterimInterval?: pulumi.Input<number>;
    allUsergroup?: pulumi.Input<string>;
    authType?: pulumi.Input<string>;
    caCert?: pulumi.Input<string>;
    callStationIdType?: pulumi.Input<string>;
    classes?: pulumi.Input<pulumi.Input<string>[]>;
    clientCert?: pulumi.Input<string>;
    delimiter?: pulumi.Input<string>;
    dpCarrierEndpointAttribute?: pulumi.Input<string>;
    dpCarrierEndpointBlockAttribute?: pulumi.Input<string>;
    dpContextTimeout?: pulumi.Input<number>;
    dpFlushIpSession?: pulumi.Input<string>;
    dpHoldTime?: pulumi.Input<number>;
    dpHttpHeader?: pulumi.Input<string>;
    dpHttpHeaderFallback?: pulumi.Input<string>;
    dpHttpHeaderStatus?: pulumi.Input<string>;
    dpHttpHeaderSuppress?: pulumi.Input<string>;
    dpLogDynFlags?: pulumi.Input<pulumi.Input<string>[]>;
    dpLogPeriod?: pulumi.Input<number>;
    dpMemPercent?: pulumi.Input<number>;
    dpProfileAttribute?: pulumi.Input<string>;
    dpProfileAttributeKey?: pulumi.Input<string>;
    dpRadiusResponse?: pulumi.Input<string>;
    dpRadiusServerPort?: pulumi.Input<number>;
    dpSecrets?: pulumi.Input<pulumi.Input<string>[]>;
    dpValidateRequestSecret?: pulumi.Input<string>;
    dynamicProfile?: pulumi.Input<string>;
    endpointTranslation?: pulumi.Input<string>;
    epCarrierEndpointConvertHex?: pulumi.Input<string>;
    epCarrierEndpointHeader?: pulumi.Input<string>;
    epCarrierEndpointHeaderSuppress?: pulumi.Input<string>;
    epCarrierEndpointPrefix?: pulumi.Input<string>;
    epCarrierEndpointPrefixRangeMax?: pulumi.Input<number>;
    epCarrierEndpointPrefixRangeMin?: pulumi.Input<number>;
    epCarrierEndpointPrefixString?: pulumi.Input<string>;
    epCarrierEndpointSource?: pulumi.Input<string>;
    epIpHeader?: pulumi.Input<string>;
    epIpHeaderSuppress?: pulumi.Input<string>;
    epMissingHeaderFallback?: pulumi.Input<string>;
    epProfileQueryType?: pulumi.Input<string>;
    groupOverrideAttrType?: pulumi.Input<string>;
    h3cCompatibility?: pulumi.Input<string>;
    interface?: pulumi.Input<string>;
    interfaceSelectMethod?: pulumi.Input<string>;
    macCase?: pulumi.Input<string>;
    macPasswordDelimiter?: pulumi.Input<string>;
    macUsernameDelimiter?: pulumi.Input<string>;
    nasId?: pulumi.Input<string>;
    nasIdType?: pulumi.Input<string>;
    nasIp?: pulumi.Input<string>;
    passwordEncoding?: pulumi.Input<string>;
    passwordRenewal?: pulumi.Input<string>;
    radiusCoa?: pulumi.Input<string>;
    radiusPort?: pulumi.Input<number>;
    rsso?: pulumi.Input<string>;
    rssoContextTimeout?: pulumi.Input<number>;
    rssoEndpointAttribute?: pulumi.Input<string>;
    rssoEndpointBlockAttribute?: pulumi.Input<string>;
    rssoEpOneIpOnly?: pulumi.Input<string>;
    rssoFlushIpSession?: pulumi.Input<string>;
    rssoLogFlags?: pulumi.Input<pulumi.Input<string>[]>;
    rssoLogPeriod?: pulumi.Input<number>;
    rssoRadiusResponse?: pulumi.Input<string>;
    rssoRadiusServerPort?: pulumi.Input<number>;
    rssoSecrets?: pulumi.Input<pulumi.Input<string>[]>;
    rssoValidateRequestSecret?: pulumi.Input<string>;
    secondarySecrets?: pulumi.Input<pulumi.Input<string>[]>;
    secondaryServer?: pulumi.Input<string>;
    secrets?: pulumi.Input<pulumi.Input<string>[]>;
    server?: pulumi.Input<string>;
    serverIdentityCheck?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
    ssoAttribute?: pulumi.Input<string>;
    ssoAttributeKey?: pulumi.Input<string>;
    ssoAttributeValueOverride?: pulumi.Input<string>;
    statusTtl?: pulumi.Input<number>;
    switchControllerAcctFastFramedipDetect?: pulumi.Input<number>;
    switchControllerNasIpDynamic?: pulumi.Input<string>;
    switchControllerServiceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    tertiarySecrets?: pulumi.Input<pulumi.Input<string>[]>;
    tertiaryServer?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    tlsMinProtoVersion?: pulumi.Input<string>;
    transportProtocol?: pulumi.Input<string>;
    useGroupForProfile?: pulumi.Input<string>;
    useManagementVdom?: pulumi.Input<string>;
    usernameCaseSensitive?: pulumi.Input<string>;
}

export interface ObjectUserRadiusDynamicMappingAccountingServer {
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    interfaceSelectMethod?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    secrets?: pulumi.Input<pulumi.Input<string>[]>;
    server?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectUserRadiusDynamicMapping_Scope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface ObjectUserSamlDynamicMapping {
    _scopes?: pulumi.Input<pulumi.Input<inputs.ObjectUserSamlDynamicMapping_Scope>[]>;
    adfsClaim?: pulumi.Input<string>;
    authUrl?: pulumi.Input<string>;
    cert?: pulumi.Input<string>;
    clockTolerance?: pulumi.Input<number>;
    digestMethod?: pulumi.Input<string>;
    entityId?: pulumi.Input<string>;
    groupClaimType?: pulumi.Input<string>;
    groupName?: pulumi.Input<string>;
    idpCert?: pulumi.Input<string>;
    idpEntityId?: pulumi.Input<string>;
    idpSingleLogoutUrl?: pulumi.Input<string>;
    idpSingleSignOnUrl?: pulumi.Input<string>;
    limitRelaystate?: pulumi.Input<string>;
    reauth?: pulumi.Input<string>;
    singleLogoutUrl?: pulumi.Input<string>;
    singleSignOnUrl?: pulumi.Input<string>;
    userClaimType?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
}

export interface ObjectUserSamlDynamicMapping_Scope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface ObjectUserSecurityexemptlistRule {
    devices?: pulumi.Input<string>;
    dstaddr?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    service?: pulumi.Input<string>;
    srcaddr?: pulumi.Input<string>;
}

export interface ObjectUserTacacsDynamicMapping {
    _scopes?: pulumi.Input<pulumi.Input<inputs.ObjectUserTacacsDynamicMapping_Scope>[]>;
    authenType?: pulumi.Input<string>;
    authorization?: pulumi.Input<string>;
    interface?: pulumi.Input<string>;
    interfaceSelectMethod?: pulumi.Input<string>;
    keys?: pulumi.Input<pulumi.Input<string>[]>;
    port?: pulumi.Input<number>;
    secondaryKeys?: pulumi.Input<pulumi.Input<string>[]>;
    secondaryServer?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
    sourceIp?: pulumi.Input<string>;
    statusTtl?: pulumi.Input<number>;
    tertiaryKeys?: pulumi.Input<pulumi.Input<string>[]>;
    tertiaryServer?: pulumi.Input<string>;
}

export interface ObjectUserTacacsDynamicMapping_Scope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface ObjectUserVcenterRule {
    name?: pulumi.Input<string>;
    rule?: pulumi.Input<string>;
}

export interface ObjectVideofilterKeywordWord {
    comment?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    patternType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectVideofilterProfileFilter {
    action?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    channel?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    keyword?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ObjectVideofilterProfileFortiguardCategory {
    filters?: pulumi.Input<pulumi.Input<inputs.ObjectVideofilterProfileFortiguardCategoryFilter>[]>;
}

export interface ObjectVideofilterProfileFortiguardCategoryFilter {
    action?: pulumi.Input<string>;
    categoryId?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
}

export interface ObjectVideofilterProfileFortiguardcategoryFilter {
    action?: pulumi.Input<string>;
    categoryId?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
}

export interface ObjectVideofilterYoutubechannelfilterEntry {
    action?: pulumi.Input<string>;
    channelId?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface ObjectVirtualpatchProfileExemption {
    devices?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<number>;
    rules?: pulumi.Input<pulumi.Input<number>[]>;
    status?: pulumi.Input<string>;
}

export interface ObjectVoipProfileMsrp {
    logViolations?: pulumi.Input<string>;
    maxMsgSize?: pulumi.Input<number>;
    maxMsgSizeAction?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectVoipProfileSccp {
    blockMcast?: pulumi.Input<string>;
    logCallSummary?: pulumi.Input<string>;
    logViolations?: pulumi.Input<string>;
    maxCalls?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    verifyHeader?: pulumi.Input<string>;
}

export interface ObjectVoipProfileSip {
    ackRate?: pulumi.Input<number>;
    ackRateTrack?: pulumi.Input<string>;
    blockAck?: pulumi.Input<string>;
    blockBye?: pulumi.Input<string>;
    blockCancel?: pulumi.Input<string>;
    blockGeoRedOptions?: pulumi.Input<string>;
    blockInfo?: pulumi.Input<string>;
    blockInvite?: pulumi.Input<string>;
    blockLongLines?: pulumi.Input<string>;
    blockMessage?: pulumi.Input<string>;
    blockNotify?: pulumi.Input<string>;
    blockOptions?: pulumi.Input<string>;
    blockPrack?: pulumi.Input<string>;
    blockPublish?: pulumi.Input<string>;
    blockRefer?: pulumi.Input<string>;
    blockRegister?: pulumi.Input<string>;
    blockSubscribe?: pulumi.Input<string>;
    blockUnknown?: pulumi.Input<string>;
    blockUpdate?: pulumi.Input<string>;
    byeRate?: pulumi.Input<number>;
    byeRateTrack?: pulumi.Input<string>;
    callIdRegex?: pulumi.Input<string>;
    callKeepalive?: pulumi.Input<number>;
    cancelRate?: pulumi.Input<number>;
    cancelRateTrack?: pulumi.Input<string>;
    contactFixup?: pulumi.Input<string>;
    contentTypeRegex?: pulumi.Input<string>;
    hntRestrictSourceIp?: pulumi.Input<string>;
    hostedNatTraversal?: pulumi.Input<string>;
    infoRate?: pulumi.Input<number>;
    infoRateTrack?: pulumi.Input<string>;
    inviteRate?: pulumi.Input<number>;
    inviteRateTrack?: pulumi.Input<string>;
    ipsRtp?: pulumi.Input<string>;
    logCallSummary?: pulumi.Input<string>;
    logViolations?: pulumi.Input<string>;
    malformedHeaderAllow?: pulumi.Input<string>;
    malformedHeaderCallId?: pulumi.Input<string>;
    malformedHeaderContact?: pulumi.Input<string>;
    malformedHeaderContentLength?: pulumi.Input<string>;
    malformedHeaderContentType?: pulumi.Input<string>;
    malformedHeaderCseq?: pulumi.Input<string>;
    malformedHeaderExpires?: pulumi.Input<string>;
    malformedHeaderFrom?: pulumi.Input<string>;
    malformedHeaderMaxForwards?: pulumi.Input<string>;
    malformedHeaderNoProxyRequire?: pulumi.Input<string>;
    malformedHeaderNoRequire?: pulumi.Input<string>;
    malformedHeaderPAssertedIdentity?: pulumi.Input<string>;
    malformedHeaderRack?: pulumi.Input<string>;
    malformedHeaderRecordRoute?: pulumi.Input<string>;
    malformedHeaderRoute?: pulumi.Input<string>;
    malformedHeaderRseq?: pulumi.Input<string>;
    malformedHeaderSdpA?: pulumi.Input<string>;
    malformedHeaderSdpB?: pulumi.Input<string>;
    malformedHeaderSdpC?: pulumi.Input<string>;
    malformedHeaderSdpI?: pulumi.Input<string>;
    malformedHeaderSdpK?: pulumi.Input<string>;
    malformedHeaderSdpM?: pulumi.Input<string>;
    malformedHeaderSdpO?: pulumi.Input<string>;
    malformedHeaderSdpR?: pulumi.Input<string>;
    malformedHeaderSdpS?: pulumi.Input<string>;
    malformedHeaderSdpT?: pulumi.Input<string>;
    malformedHeaderSdpV?: pulumi.Input<string>;
    malformedHeaderSdpZ?: pulumi.Input<string>;
    malformedHeaderTo?: pulumi.Input<string>;
    malformedHeaderVia?: pulumi.Input<string>;
    malformedRequestLine?: pulumi.Input<string>;
    maxBodyLength?: pulumi.Input<number>;
    maxDialogs?: pulumi.Input<number>;
    maxIdleDialogs?: pulumi.Input<number>;
    maxLineLength?: pulumi.Input<number>;
    messageRate?: pulumi.Input<number>;
    messageRateTrack?: pulumi.Input<string>;
    natPortRange?: pulumi.Input<string>;
    natTrace?: pulumi.Input<string>;
    noSdpFixup?: pulumi.Input<string>;
    notifyRate?: pulumi.Input<number>;
    notifyRateTrack?: pulumi.Input<string>;
    openContactPinhole?: pulumi.Input<string>;
    openRecordRoutePinhole?: pulumi.Input<string>;
    openRegisterPinhole?: pulumi.Input<string>;
    openViaPinhole?: pulumi.Input<string>;
    optionsRate?: pulumi.Input<number>;
    optionsRateTrack?: pulumi.Input<string>;
    prackRate?: pulumi.Input<number>;
    prackRateTrack?: pulumi.Input<string>;
    preserveOverride?: pulumi.Input<string>;
    provisionalInviteExpiryTime?: pulumi.Input<number>;
    publishRate?: pulumi.Input<number>;
    publishRateTrack?: pulumi.Input<string>;
    referRate?: pulumi.Input<number>;
    referRateTrack?: pulumi.Input<string>;
    registerContactTrace?: pulumi.Input<string>;
    registerRate?: pulumi.Input<number>;
    registerRateTrack?: pulumi.Input<string>;
    rfc2543Branch?: pulumi.Input<string>;
    rtp?: pulumi.Input<string>;
    sslAlgorithm?: pulumi.Input<string>;
    sslAuthClient?: pulumi.Input<string>;
    sslAuthServer?: pulumi.Input<string>;
    sslClientCertificate?: pulumi.Input<string>;
    sslClientRenegotiation?: pulumi.Input<string>;
    sslMaxVersion?: pulumi.Input<string>;
    sslMinVersion?: pulumi.Input<string>;
    sslMode?: pulumi.Input<string>;
    sslPfs?: pulumi.Input<string>;
    sslSendEmptyFrags?: pulumi.Input<string>;
    sslServerCertificate?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    strictRegister?: pulumi.Input<string>;
    subscribeRate?: pulumi.Input<number>;
    subscribeRateTrack?: pulumi.Input<string>;
    unknownHeader?: pulumi.Input<string>;
    updateRate?: pulumi.Input<number>;
    updateRateTrack?: pulumi.Input<string>;
}

export interface ObjectVpnIpsecFecMapping {
    bandwidthBiThreshold?: pulumi.Input<number>;
    bandwidthDownThreshold?: pulumi.Input<number>;
    bandwidthUpThreshold?: pulumi.Input<number>;
    base?: pulumi.Input<number>;
    latencyThreshold?: pulumi.Input<number>;
    packetLossThreshold?: pulumi.Input<number>;
    redundant?: pulumi.Input<number>;
    seqno?: pulumi.Input<number>;
}

export interface ObjectVpnSslWebHostchecksoftwareCheckItemList {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    md5s?: pulumi.Input<pulumi.Input<string>[]>;
    target?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

export interface ObjectVpnSslWebPortalBookmarkGroup {
    bookmarks?: pulumi.Input<pulumi.Input<inputs.ObjectVpnSslWebPortalBookmarkGroupBookmark>[]>;
    name?: pulumi.Input<string>;
}

export interface ObjectVpnSslWebPortalBookmarkGroupBookmark {
    additionalParams?: pulumi.Input<string>;
    apptype?: pulumi.Input<string>;
    colorDepth?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    folder?: pulumi.Input<string>;
    formDatas?: pulumi.Input<pulumi.Input<inputs.ObjectVpnSslWebPortalBookmarkGroupBookmarkFormData>[]>;
    height?: pulumi.Input<number>;
    host?: pulumi.Input<string>;
    keyboardLayout?: pulumi.Input<string>;
    listeningPort?: pulumi.Input<number>;
    loadBalancingInfo?: pulumi.Input<string>;
    logonPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    logonUser?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    preconnectionBlob?: pulumi.Input<string>;
    preconnectionId?: pulumi.Input<number>;
    remotePort?: pulumi.Input<number>;
    restrictedAdmin?: pulumi.Input<string>;
    security?: pulumi.Input<string>;
    sendPreconnectionId?: pulumi.Input<string>;
    serverLayout?: pulumi.Input<string>;
    showStatusWindow?: pulumi.Input<string>;
    sso?: pulumi.Input<string>;
    ssoCredential?: pulumi.Input<string>;
    ssoCredentialSentOnce?: pulumi.Input<string>;
    ssoPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    ssoUsername?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    vncKeyboardLayout?: pulumi.Input<string>;
    width?: pulumi.Input<number>;
}

export interface ObjectVpnSslWebPortalBookmarkGroupBookmarkFormData {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ObjectVpnSslWebPortalBookmarkgroupBookmark {
    additionalParams?: pulumi.Input<string>;
    apptype?: pulumi.Input<string>;
    colorDepth?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    folder?: pulumi.Input<string>;
    formDatas?: pulumi.Input<pulumi.Input<inputs.ObjectVpnSslWebPortalBookmarkgroupBookmarkFormData>[]>;
    height?: pulumi.Input<number>;
    host?: pulumi.Input<string>;
    keyboardLayout?: pulumi.Input<string>;
    listeningPort?: pulumi.Input<number>;
    loadBalancingInfo?: pulumi.Input<string>;
    logonPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    logonUser?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    preconnectionBlob?: pulumi.Input<string>;
    preconnectionId?: pulumi.Input<number>;
    remotePort?: pulumi.Input<number>;
    restrictedAdmin?: pulumi.Input<string>;
    security?: pulumi.Input<string>;
    sendPreconnectionId?: pulumi.Input<string>;
    serverLayout?: pulumi.Input<string>;
    showStatusWindow?: pulumi.Input<string>;
    sso?: pulumi.Input<string>;
    ssoCredential?: pulumi.Input<string>;
    ssoCredentialSentOnce?: pulumi.Input<string>;
    ssoPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    ssoUsername?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    vncKeyboardLayout?: pulumi.Input<string>;
    width?: pulumi.Input<number>;
}

export interface ObjectVpnSslWebPortalBookmarkgroupBookmarkFormData {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ObjectVpnSslWebPortalBookmarkgroupBookmarksFormData {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ObjectVpnSslWebPortalLandingPage {
    formDatas?: pulumi.Input<pulumi.Input<inputs.ObjectVpnSslWebPortalLandingPageFormData>[]>;
    logoutUrl?: pulumi.Input<string>;
    sso?: pulumi.Input<string>;
    ssoCredential?: pulumi.Input<string>;
    ssoPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    ssoUsername?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

export interface ObjectVpnSslWebPortalLandingPageFormData {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ObjectVpnSslWebPortalLandingpageFormData {
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ObjectVpnSslWebPortalMacAddrCheckRule {
    macAddrLists?: pulumi.Input<pulumi.Input<string>[]>;
    macAddrMask?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface ObjectVpnSslWebPortalOsCheckList {
    action?: pulumi.Input<string>;
    latestPatchLevel?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tolerance?: pulumi.Input<number>;
}

export interface ObjectVpnSslWebPortalSplitDn {
    dnsServer1?: pulumi.Input<string>;
    dnsServer2?: pulumi.Input<string>;
    domains?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ipv6DnsServer1?: pulumi.Input<string>;
    ipv6DnsServer2?: pulumi.Input<string>;
}

export interface ObjectVpnmgrNodeIpRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
}

export interface ObjectVpnmgrNodeIpv4ExcludeRange {
    endIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    startIp?: pulumi.Input<string>;
}

export interface ObjectVpnmgrNodeProtectedSubnet {
    addr?: pulumi.Input<string>;
    seq?: pulumi.Input<number>;
}

export interface ObjectVpnmgrNodeScopemember {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface ObjectVpnmgrNodeSummaryAddr {
    addr?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    seq?: pulumi.Input<number>;
}

export interface ObjectWafProfileAddressList {
    blockedAddress?: pulumi.Input<string>;
    blockedLog?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    trustedAddress?: pulumi.Input<string>;
}

export interface ObjectWafProfileConstraint {
    contentLength?: pulumi.Input<inputs.ObjectWafProfileConstraintContentLength>;
    exceptions?: pulumi.Input<pulumi.Input<inputs.ObjectWafProfileConstraintException>[]>;
    headerLength?: pulumi.Input<inputs.ObjectWafProfileConstraintHeaderLength>;
    hostname?: pulumi.Input<inputs.ObjectWafProfileConstraintHostname>;
    lineLength?: pulumi.Input<inputs.ObjectWafProfileConstraintLineLength>;
    malformed?: pulumi.Input<inputs.ObjectWafProfileConstraintMalformed>;
    maxCookie?: pulumi.Input<inputs.ObjectWafProfileConstraintMaxCookie>;
    maxHeaderLine?: pulumi.Input<inputs.ObjectWafProfileConstraintMaxHeaderLine>;
    maxRangeSegment?: pulumi.Input<inputs.ObjectWafProfileConstraintMaxRangeSegment>;
    maxUrlParam?: pulumi.Input<inputs.ObjectWafProfileConstraintMaxUrlParam>;
    method?: pulumi.Input<inputs.ObjectWafProfileConstraintMethod>;
    paramLength?: pulumi.Input<inputs.ObjectWafProfileConstraintParamLength>;
    urlParamLength?: pulumi.Input<inputs.ObjectWafProfileConstraintUrlParamLength>;
    version?: pulumi.Input<inputs.ObjectWafProfileConstraintVersion>;
}

export interface ObjectWafProfileConstraintContentLength {
    action?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectWafProfileConstraintException {
    address?: pulumi.Input<string>;
    contentLength?: pulumi.Input<string>;
    headerLength?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    lineLength?: pulumi.Input<string>;
    malformed?: pulumi.Input<string>;
    maxCookie?: pulumi.Input<string>;
    maxHeaderLine?: pulumi.Input<string>;
    maxRangeSegment?: pulumi.Input<string>;
    maxUrlParam?: pulumi.Input<string>;
    method?: pulumi.Input<string>;
    paramLength?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    regex?: pulumi.Input<string>;
    urlParamLength?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

export interface ObjectWafProfileConstraintHeaderLength {
    action?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectWafProfileConstraintHostname {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectWafProfileConstraintLineLength {
    action?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectWafProfileConstraintMalformed {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectWafProfileConstraintMaxCookie {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    maxCookie?: pulumi.Input<number>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectWafProfileConstraintMaxHeaderLine {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    maxHeaderLine?: pulumi.Input<number>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectWafProfileConstraintMaxRangeSegment {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    maxRangeSegment?: pulumi.Input<number>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectWafProfileConstraintMaxUrlParam {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    maxUrlParam?: pulumi.Input<number>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectWafProfileConstraintMethod {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectWafProfileConstraintParamLength {
    action?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectWafProfileConstraintUrlParamLength {
    action?: pulumi.Input<string>;
    length?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectWafProfileConstraintVersion {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectWafProfileMethod {
    defaultAllowedMethods?: pulumi.Input<pulumi.Input<string>[]>;
    log?: pulumi.Input<string>;
    methodPolicies?: pulumi.Input<pulumi.Input<inputs.ObjectWafProfileMethodMethodPolicy>[]>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectWafProfileMethodMethodPolicy {
    address?: pulumi.Input<string>;
    allowedMethods?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<number>;
    pattern?: pulumi.Input<string>;
    regex?: pulumi.Input<string>;
}

export interface ObjectWafProfileSignature {
    creditCardDetectionThreshold?: pulumi.Input<number>;
    customSignatures?: pulumi.Input<pulumi.Input<inputs.ObjectWafProfileSignatureCustomSignature>[]>;
    disabledSignature?: pulumi.Input<string>;
    disabledSubClass?: pulumi.Input<string>;
    mainClass?: pulumi.Input<inputs.ObjectWafProfileSignatureMainClass>;
}

export interface ObjectWafProfileSignatureCustomSignature {
    action?: pulumi.Input<string>;
    caseSensitivity?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    targets?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectWafProfileSignatureMainClass {
    action?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectWafProfileUrlAccess {
    accessPatterns?: pulumi.Input<pulumi.Input<inputs.ObjectWafProfileUrlAccessAccessPattern>[]>;
    action?: pulumi.Input<string>;
    address?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
}

export interface ObjectWafProfileUrlAccessAccessPattern {
    id?: pulumi.Input<number>;
    negate?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    regex?: pulumi.Input<string>;
    srcaddr?: pulumi.Input<string>;
}

export interface ObjectWafProfileUrlaccessAccessPattern {
    id?: pulumi.Input<number>;
    negate?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    regex?: pulumi.Input<string>;
    srcaddr?: pulumi.Input<string>;
}

export interface ObjectWanoptProfileCifs {
    byteCaching?: pulumi.Input<string>;
    logTraffic?: pulumi.Input<string>;
    ports?: pulumi.Input<pulumi.Input<number>[]>;
    preferChunking?: pulumi.Input<string>;
    protocolOpt?: pulumi.Input<string>;
    secureTunnel?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tunnelSharing?: pulumi.Input<string>;
}

export interface ObjectWanoptProfileFtp {
    byteCaching?: pulumi.Input<string>;
    logTraffic?: pulumi.Input<string>;
    ports?: pulumi.Input<pulumi.Input<number>[]>;
    preferChunking?: pulumi.Input<string>;
    protocolOpt?: pulumi.Input<string>;
    secureTunnel?: pulumi.Input<string>;
    ssl?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tunnelSharing?: pulumi.Input<string>;
}

export interface ObjectWanoptProfileHttp {
    byteCaching?: pulumi.Input<string>;
    logTraffic?: pulumi.Input<string>;
    ports?: pulumi.Input<pulumi.Input<number>[]>;
    preferChunking?: pulumi.Input<string>;
    protocolOpt?: pulumi.Input<string>;
    secureTunnel?: pulumi.Input<string>;
    ssl?: pulumi.Input<string>;
    sslPorts?: pulumi.Input<pulumi.Input<number>[]>;
    status?: pulumi.Input<string>;
    tunnelNonHttp?: pulumi.Input<string>;
    tunnelSharing?: pulumi.Input<string>;
    unknownHttpVersion?: pulumi.Input<string>;
}

export interface ObjectWanoptProfileMapi {
    byteCaching?: pulumi.Input<string>;
    logTraffic?: pulumi.Input<string>;
    ports?: pulumi.Input<pulumi.Input<number>[]>;
    secureTunnel?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tunnelSharing?: pulumi.Input<string>;
}

export interface ObjectWanoptProfileTcp {
    byteCaching?: pulumi.Input<string>;
    byteCachingOpt?: pulumi.Input<string>;
    logTraffic?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    secureTunnel?: pulumi.Input<string>;
    ssl?: pulumi.Input<string>;
    sslPorts?: pulumi.Input<pulumi.Input<number>[]>;
    status?: pulumi.Input<string>;
    tunnelSharing?: pulumi.Input<string>;
}

export interface ObjectWebfilterContentEntry {
    action?: pulumi.Input<string>;
    lang?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    patternType?: pulumi.Input<string>;
    score?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface ObjectWebfilterContentheaderEntry {
    action?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
}

export interface ObjectWebfilterProfileAntiphish {
    authentication?: pulumi.Input<string>;
    checkBasicAuth?: pulumi.Input<string>;
    checkUri?: pulumi.Input<string>;
    checkUsernameOnly?: pulumi.Input<string>;
    customPatterns?: pulumi.Input<pulumi.Input<inputs.ObjectWebfilterProfileAntiphishCustomPattern>[]>;
    defaultAction?: pulumi.Input<string>;
    domainController?: pulumi.Input<string>;
    inspectionEntries?: pulumi.Input<pulumi.Input<inputs.ObjectWebfilterProfileAntiphishInspectionEntry>[]>;
    ldap?: pulumi.Input<string>;
    maxBodyLen?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

export interface ObjectWebfilterProfileAntiphishCustomPattern {
    category?: pulumi.Input<string>;
    pattern?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ObjectWebfilterProfileAntiphishInspectionEntry {
    action?: pulumi.Input<string>;
    fortiguardCategories?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
}

export interface ObjectWebfilterProfileFileFilter {
    entries?: pulumi.Input<pulumi.Input<inputs.ObjectWebfilterProfileFileFilterEntry>[]>;
    log?: pulumi.Input<string>;
    scanArchiveContents?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectWebfilterProfileFileFilterEntry {
    action?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    encryption?: pulumi.Input<string>;
    fileTypes?: pulumi.Input<pulumi.Input<string>[]>;
    filter?: pulumi.Input<string>;
    passwordProtected?: pulumi.Input<string>;
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectWebfilterProfileFtgdWf {
    exemptQuotas?: pulumi.Input<pulumi.Input<string>[]>;
    filters?: pulumi.Input<pulumi.Input<inputs.ObjectWebfilterProfileFtgdWfFilter>[]>;
    maxQuotaTimeout?: pulumi.Input<number>;
    options?: pulumi.Input<pulumi.Input<string>[]>;
    ovrds?: pulumi.Input<pulumi.Input<string>[]>;
    quotas?: pulumi.Input<pulumi.Input<inputs.ObjectWebfilterProfileFtgdWfQuota>[]>;
    rateCrlUrls?: pulumi.Input<string>;
    rateCssUrls?: pulumi.Input<string>;
    rateImageUrls?: pulumi.Input<string>;
    rateJavascriptUrls?: pulumi.Input<string>;
}

export interface ObjectWebfilterProfileFtgdWfFilter {
    action?: pulumi.Input<string>;
    authUsrGrp?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
    overrideReplacemsg?: pulumi.Input<string>;
    warnDuration?: pulumi.Input<string>;
    warningDurationType?: pulumi.Input<string>;
    warningPrompt?: pulumi.Input<string>;
}

export interface ObjectWebfilterProfileFtgdWfQuota {
    category?: pulumi.Input<string>;
    duration?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    overrideReplacemsg?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    unit?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface ObjectWebfilterProfileFtgdwfFilter {
    action?: pulumi.Input<string>;
    authUsrGrp?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    log?: pulumi.Input<string>;
    overrideReplacemsg?: pulumi.Input<string>;
    warnDuration?: pulumi.Input<string>;
    warningDurationType?: pulumi.Input<string>;
    warningPrompt?: pulumi.Input<string>;
}

export interface ObjectWebfilterProfileFtgdwfQuota {
    category?: pulumi.Input<string>;
    duration?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    overrideReplacemsg?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    unit?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface ObjectWebfilterProfileOverride {
    ovrdCookie?: pulumi.Input<string>;
    ovrdDur?: pulumi.Input<string>;
    ovrdDurMode?: pulumi.Input<string>;
    ovrdScope?: pulumi.Input<string>;
    ovrdUserGroups?: pulumi.Input<pulumi.Input<string>[]>;
    profileAttribute?: pulumi.Input<string>;
    profileType?: pulumi.Input<string>;
    profiles?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectWebfilterProfileUrlExtraction {
    redirectHeader?: pulumi.Input<string>;
    redirectNoContent?: pulumi.Input<string>;
    redirectUrl?: pulumi.Input<string>;
    serverFqdn?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface ObjectWebfilterProfileWeb {
    allowlists?: pulumi.Input<pulumi.Input<string>[]>;
    blacklist?: pulumi.Input<string>;
    blocklist?: pulumi.Input<string>;
    bwordTable?: pulumi.Input<string>;
    bwordThreshold?: pulumi.Input<number>;
    contentHeaderList?: pulumi.Input<string>;
    keywordMatches?: pulumi.Input<pulumi.Input<string>[]>;
    logSearch?: pulumi.Input<string>;
    safeSearches?: pulumi.Input<pulumi.Input<string>[]>;
    urlfilterTable?: pulumi.Input<string>;
    vimeoRestrict?: pulumi.Input<string>;
    whitelists?: pulumi.Input<pulumi.Input<string>[]>;
    youtubeRestrict?: pulumi.Input<string>;
}

export interface ObjectWebfilterProfileYoutubeChannelFilter {
    channelId?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface ObjectWebfilterUrlfilterEntry {
    action?: pulumi.Input<string>;
    antiphishAction?: pulumi.Input<string>;
    dnsAddressFamily?: pulumi.Input<string>;
    exempts?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<number>;
    referrerHost?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    webProxyProfile?: pulumi.Input<string>;
}

export interface ObjectWebproxyForwardservergroupServerList {
    name?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface ObjectWebproxyProfileHeader {
    action?: pulumi.Input<string>;
    addOption?: pulumi.Input<string>;
    base64Encoding?: pulumi.Input<string>;
    content?: pulumi.Input<string>;
    dstaddr?: pulumi.Input<string>;
    dstaddr6?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectWirelesscontrollerAccesscontrollistLayer3Ipv4Rule {
    action?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    dstaddr?: pulumi.Input<string>;
    dstport?: pulumi.Input<number>;
    protocol?: pulumi.Input<number>;
    ruleId?: pulumi.Input<number>;
    srcaddr?: pulumi.Input<string>;
    srcport?: pulumi.Input<number>;
}

export interface ObjectWirelesscontrollerAccesscontrollistLayer3Ipv6Rule {
    action?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    dstaddr?: pulumi.Input<string>;
    dstport?: pulumi.Input<number>;
    protocol?: pulumi.Input<number>;
    ruleId?: pulumi.Input<number>;
    srcaddr?: pulumi.Input<string>;
    srcport?: pulumi.Input<number>;
}

export interface ObjectWirelesscontrollerApcfgprofileCommandList {
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    passwdValues?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ObjectWirelesscontrollerBonjourprofilePolicyList {
    description?: pulumi.Input<string>;
    fromVlan?: pulumi.Input<string>;
    policyId?: pulumi.Input<number>;
    services?: pulumi.Input<pulumi.Input<string>[]>;
    toVlan?: pulumi.Input<string>;
}

export interface ObjectWirelesscontrollerHotspot20Anqp3gppcellularMccMncList {
    id?: pulumi.Input<number>;
    mcc?: pulumi.Input<string>;
    mnc?: pulumi.Input<string>;
}

export interface ObjectWirelesscontrollerHotspot20AnqpnairealmNaiList {
    eapMethods?: pulumi.Input<pulumi.Input<inputs.ObjectWirelesscontrollerHotspot20AnqpnairealmNaiListEapMethod>[]>;
    encoding?: pulumi.Input<string>;
    naiRealm?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface ObjectWirelesscontrollerHotspot20AnqpnairealmNaiListEapMethod {
    authParams?: pulumi.Input<pulumi.Input<inputs.ObjectWirelesscontrollerHotspot20AnqpnairealmNaiListEapMethodAuthParam>[]>;
    index?: pulumi.Input<number>;
    method?: pulumi.Input<string>;
}

export interface ObjectWirelesscontrollerHotspot20AnqpnairealmNaiListEapMethodAuthParam {
    id?: pulumi.Input<string>;
    index?: pulumi.Input<number>;
    val?: pulumi.Input<string>;
}

export interface ObjectWirelesscontrollerHotspot20AnqpnairealmNailistEapMethod {
    authParams?: pulumi.Input<pulumi.Input<inputs.ObjectWirelesscontrollerHotspot20AnqpnairealmNailistEapMethodAuthParam>[]>;
    index?: pulumi.Input<number>;
    method?: pulumi.Input<string>;
}

export interface ObjectWirelesscontrollerHotspot20AnqpnairealmNailistEapMethodAuthParam {
    id?: pulumi.Input<string>;
    index?: pulumi.Input<number>;
    val?: pulumi.Input<string>;
}

export interface ObjectWirelesscontrollerHotspot20AnqpnairealmNailistEapmethodAuthParam {
    id?: pulumi.Input<string>;
    index?: pulumi.Input<number>;
    val?: pulumi.Input<string>;
}

export interface ObjectWirelesscontrollerHotspot20AnqproamingconsortiumOiList {
    comment?: pulumi.Input<string>;
    index?: pulumi.Input<number>;
    oi?: pulumi.Input<string>;
}

export interface ObjectWirelesscontrollerHotspot20AnqpvenuenameValueList {
    index?: pulumi.Input<number>;
    lang?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ObjectWirelesscontrollerHotspot20AnqpvenueurlValueList {
    index?: pulumi.Input<number>;
    number?: pulumi.Input<number>;
    value?: pulumi.Input<string>;
}

export interface ObjectWirelesscontrollerHotspot20H2qpadviceofchargeAocList {
    naiRealm?: pulumi.Input<string>;
    naiRealmEncoding?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    planInfos?: pulumi.Input<pulumi.Input<inputs.ObjectWirelesscontrollerHotspot20H2qpadviceofchargeAocListPlanInfo>[]>;
    type?: pulumi.Input<string>;
}

export interface ObjectWirelesscontrollerHotspot20H2qpadviceofchargeAocListPlanInfo {
    currency?: pulumi.Input<string>;
    infoFile?: pulumi.Input<string>;
    lang?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface ObjectWirelesscontrollerHotspot20H2qpadviceofchargeAoclistPlanInfo {
    currency?: pulumi.Input<string>;
    infoFile?: pulumi.Input<string>;
    lang?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface ObjectWirelesscontrollerHotspot20H2qpoperatornameValueList {
    index?: pulumi.Input<number>;
    lang?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface ObjectWirelesscontrollerHotspot20H2qposuproviderFriendlyName {
    friendlyName?: pulumi.Input<string>;
    index?: pulumi.Input<number>;
    lang?: pulumi.Input<string>;
}

export interface ObjectWirelesscontrollerHotspot20H2qposuproviderServiceDescription {
    lang?: pulumi.Input<string>;
    serviceDescription?: pulumi.Input<string>;
    serviceId?: pulumi.Input<number>;
}

export interface ObjectWirelesscontrollerHotspot20H2qposuprovidernaiNaiList {
    name?: pulumi.Input<string>;
    osuNai?: pulumi.Input<string>;
}

export interface ObjectWirelesscontrollerHotspot20IconIconList {
    file?: pulumi.Input<string>;
    height?: pulumi.Input<number>;
    lang?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    width?: pulumi.Input<number>;
}

export interface ObjectWirelesscontrollerHotspot20QosmapDscpExcept {
    dscp?: pulumi.Input<number>;
    index?: pulumi.Input<number>;
    up?: pulumi.Input<number>;
}

export interface ObjectWirelesscontrollerHotspot20QosmapDscpRange {
    high?: pulumi.Input<number>;
    index?: pulumi.Input<number>;
    low?: pulumi.Input<number>;
    up?: pulumi.Input<number>;
}

export interface ObjectWirelesscontrollerMpskprofileMpskGroup {
    mpskKeys?: pulumi.Input<pulumi.Input<inputs.ObjectWirelesscontrollerMpskprofileMpskGroupMpskKey>[]>;
    name?: pulumi.Input<string>;
    vlanId?: pulumi.Input<number>;
    vlanType?: pulumi.Input<string>;
}

export interface ObjectWirelesscontrollerMpskprofileMpskGroupMpskKey {
    comment?: pulumi.Input<string>;
    concurrentClientLimitType?: pulumi.Input<string>;
    concurrentClients?: pulumi.Input<number>;
    mac?: pulumi.Input<string>;
    mpskSchedules?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    passphrases?: pulumi.Input<pulumi.Input<string>[]>;
    pmks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectWirelesscontrollerMpskprofileMpskgroupMpskKey {
    comment?: pulumi.Input<string>;
    concurrentClientLimitType?: pulumi.Input<string>;
    concurrentClients?: pulumi.Input<number>;
    mac?: pulumi.Input<string>;
    mpskSchedules?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    passphrases?: pulumi.Input<pulumi.Input<string>[]>;
    pmks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectWirelesscontrollerVapDynamicMapping {
    _centmgmt?: pulumi.Input<string>;
    _dhcpSvrId?: pulumi.Input<string>;
    _intfAllowaccesses?: pulumi.Input<pulumi.Input<string>[]>;
    _intfDeviceAccessList?: pulumi.Input<string>;
    _intfDeviceIdentification?: pulumi.Input<string>;
    _intfDeviceNetscan?: pulumi.Input<string>;
    _intfDhcp6RelayIp?: pulumi.Input<string>;
    _intfDhcp6RelayService?: pulumi.Input<string>;
    _intfDhcp6RelayType?: pulumi.Input<string>;
    _intfDhcpRelayIps?: pulumi.Input<pulumi.Input<string>[]>;
    _intfDhcpRelayService?: pulumi.Input<string>;
    _intfDhcpRelayType?: pulumi.Input<string>;
    _intfIp?: pulumi.Input<string>;
    _intfIp6Address?: pulumi.Input<string>;
    _intfIp6Allowaccesses?: pulumi.Input<pulumi.Input<string>[]>;
    _intfListenForticlientConnection?: pulumi.Input<string>;
    _isFactorySetting?: pulumi.Input<string>;
    _scopes?: pulumi.Input<pulumi.Input<inputs.ObjectWirelesscontrollerVapDynamicMapping_Scope>[]>;
    accessControlList?: pulumi.Input<string>;
    acctInterimInterval?: pulumi.Input<number>;
    additionalAkms?: pulumi.Input<pulumi.Input<string>[]>;
    addressGroup?: pulumi.Input<string>;
    addressGroupPolicy?: pulumi.Input<string>;
    alias?: pulumi.Input<string>;
    antivirusProfile?: pulumi.Input<string>;
    applicationDetectionEngine?: pulumi.Input<string>;
    applicationDscpMarking?: pulumi.Input<string>;
    applicationList?: pulumi.Input<string>;
    applicationReportIntv?: pulumi.Input<number>;
    atfWeight?: pulumi.Input<number>;
    auth?: pulumi.Input<string>;
    authCert?: pulumi.Input<string>;
    authPortalAddr?: pulumi.Input<string>;
    beaconAdvertisings?: pulumi.Input<pulumi.Input<string>[]>;
    broadcastSsid?: pulumi.Input<string>;
    broadcastSuppressions?: pulumi.Input<pulumi.Input<string>[]>;
    bssColorPartial?: pulumi.Input<string>;
    bstmDisassociationImminent?: pulumi.Input<string>;
    bstmLoadBalancingDisassocTimer?: pulumi.Input<number>;
    bstmRssiDisassocTimer?: pulumi.Input<number>;
    captivePortalAcName?: pulumi.Input<string>;
    captivePortalAuthTimeout?: pulumi.Input<number>;
    captivePortalFwAccounting?: pulumi.Input<string>;
    captivePortalMacauthRadiusSecrets?: pulumi.Input<pulumi.Input<string>[]>;
    captivePortalMacauthRadiusServer?: pulumi.Input<string>;
    captivePortalRadiusSecrets?: pulumi.Input<pulumi.Input<string>[]>;
    captivePortalRadiusServer?: pulumi.Input<string>;
    captivePortalSessionTimeoutInterval?: pulumi.Input<number>;
    clientCount?: pulumi.Input<number>;
    dhcpAddressEnforcement?: pulumi.Input<string>;
    dhcpLeaseTime?: pulumi.Input<number>;
    dhcpOption43Insertion?: pulumi.Input<string>;
    dhcpOption82CircuitIdInsertion?: pulumi.Input<string>;
    dhcpOption82Insertion?: pulumi.Input<string>;
    dhcpOption82RemoteIdInsertion?: pulumi.Input<string>;
    dynamicVlan?: pulumi.Input<string>;
    eapReauth?: pulumi.Input<string>;
    eapReauthIntv?: pulumi.Input<number>;
    eapolKeyRetries?: pulumi.Input<string>;
    encrypt?: pulumi.Input<string>;
    externalFastRoaming?: pulumi.Input<string>;
    externalLogout?: pulumi.Input<string>;
    externalWeb?: pulumi.Input<string>;
    externalWebFormat?: pulumi.Input<string>;
    fastBssTransition?: pulumi.Input<string>;
    fastRoaming?: pulumi.Input<string>;
    ftMobilityDomain?: pulumi.Input<number>;
    ftOverDs?: pulumi.Input<string>;
    ftR0KeyLifetime?: pulumi.Input<number>;
    gasComebackDelay?: pulumi.Input<number>;
    gasFragmentationLimit?: pulumi.Input<number>;
    gtkRekey?: pulumi.Input<string>;
    gtkRekeyIntv?: pulumi.Input<number>;
    highEfficiency?: pulumi.Input<string>;
    hotspot20Profile?: pulumi.Input<string>;
    igmpSnooping?: pulumi.Input<string>;
    intraVapPrivacy?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    ipsSensor?: pulumi.Input<string>;
    ipv6Rules?: pulumi.Input<pulumi.Input<string>[]>;
    keyindex?: pulumi.Input<number>;
    keys?: pulumi.Input<pulumi.Input<string>[]>;
    l3Roaming?: pulumi.Input<string>;
    l3RoamingMode?: pulumi.Input<string>;
    ldpc?: pulumi.Input<string>;
    localAuthentication?: pulumi.Input<string>;
    localBridging?: pulumi.Input<string>;
    localLan?: pulumi.Input<string>;
    localStandalone?: pulumi.Input<string>;
    localStandaloneDns?: pulumi.Input<string>;
    localStandaloneDnsIps?: pulumi.Input<pulumi.Input<string>[]>;
    localStandaloneNat?: pulumi.Input<string>;
    localSwitching?: pulumi.Input<string>;
    macAuthBypass?: pulumi.Input<string>;
    macCalledStationDelimiter?: pulumi.Input<string>;
    macCallingStationDelimiter?: pulumi.Input<string>;
    macCase?: pulumi.Input<string>;
    macFilter?: pulumi.Input<string>;
    macFilterPolicyOther?: pulumi.Input<string>;
    macPasswordDelimiter?: pulumi.Input<string>;
    macUsernameDelimiter?: pulumi.Input<string>;
    maxClients?: pulumi.Input<number>;
    maxClientsAp?: pulumi.Input<number>;
    mbo?: pulumi.Input<string>;
    mboCellDataConnPref?: pulumi.Input<string>;
    meDisableThresh?: pulumi.Input<number>;
    meshBackhaul?: pulumi.Input<string>;
    mpsk?: pulumi.Input<string>;
    mpskConcurrentClients?: pulumi.Input<number>;
    mpskProfile?: pulumi.Input<string>;
    muMimo?: pulumi.Input<string>;
    multicastEnhance?: pulumi.Input<string>;
    multicastRate?: pulumi.Input<string>;
    n80211k?: pulumi.Input<string>;
    n80211v?: pulumi.Input<string>;
    nac?: pulumi.Input<string>;
    nacProfile?: pulumi.Input<string>;
    neighborReportDualBand?: pulumi.Input<string>;
    okc?: pulumi.Input<string>;
    osen?: pulumi.Input<string>;
    oweGroups?: pulumi.Input<pulumi.Input<string>[]>;
    oweTransition?: pulumi.Input<string>;
    oweTransitionSsid?: pulumi.Input<string>;
    passphrases?: pulumi.Input<pulumi.Input<string>[]>;
    pmf?: pulumi.Input<string>;
    pmfAssocComebackTimeout?: pulumi.Input<number>;
    pmfSaQueryRetryTimeout?: pulumi.Input<number>;
    portMacauth?: pulumi.Input<string>;
    portMacauthReauthTimeout?: pulumi.Input<number>;
    portMacauthTimeout?: pulumi.Input<number>;
    portalMessageOverrideGroup?: pulumi.Input<string>;
    portalType?: pulumi.Input<string>;
    primaryWagProfile?: pulumi.Input<string>;
    probeRespSuppression?: pulumi.Input<string>;
    probeRespThreshold?: pulumi.Input<string>;
    ptkRekey?: pulumi.Input<string>;
    ptkRekeyIntv?: pulumi.Input<number>;
    qosProfile?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
    radio2gThreshold?: pulumi.Input<string>;
    radio5gThreshold?: pulumi.Input<string>;
    radioSensitivity?: pulumi.Input<string>;
    radiusMacAuth?: pulumi.Input<string>;
    radiusMacAuthBlockInterval?: pulumi.Input<number>;
    radiusMacAuthServer?: pulumi.Input<string>;
    radiusMacAuthUsergroups?: pulumi.Input<pulumi.Input<string>[]>;
    radiusMacMpskAuth?: pulumi.Input<string>;
    radiusMacMpskTimeout?: pulumi.Input<number>;
    radiusServer?: pulumi.Input<string>;
    rates11acMcsMap?: pulumi.Input<string>;
    rates11acSs12s?: pulumi.Input<pulumi.Input<string>[]>;
    rates11acSs34s?: pulumi.Input<pulumi.Input<string>[]>;
    rates11as?: pulumi.Input<pulumi.Input<string>[]>;
    rates11axMcsMap?: pulumi.Input<string>;
    rates11axSs12s?: pulumi.Input<pulumi.Input<string>[]>;
    rates11axSs34s?: pulumi.Input<pulumi.Input<string>[]>;
    rates11bgs?: pulumi.Input<pulumi.Input<string>[]>;
    rates11nSs12s?: pulumi.Input<pulumi.Input<string>[]>;
    rates11nSs34s?: pulumi.Input<pulumi.Input<string>[]>;
    roamingAcctInterimUpdate?: pulumi.Input<string>;
    saeGroups?: pulumi.Input<pulumi.Input<string>[]>;
    saeH2eOnly?: pulumi.Input<string>;
    saeHnpOnly?: pulumi.Input<string>;
    saePasswords?: pulumi.Input<pulumi.Input<string>[]>;
    saePk?: pulumi.Input<string>;
    saePrivateKey?: pulumi.Input<string>;
    scanBotnetConnections?: pulumi.Input<string>;
    schedule?: pulumi.Input<string>;
    secondaryWagProfile?: pulumi.Input<string>;
    security?: pulumi.Input<string>;
    securityExemptList?: pulumi.Input<string>;
    securityObsoleteOption?: pulumi.Input<string>;
    securityRedirectUrl?: pulumi.Input<string>;
    selectedUsergroups?: pulumi.Input<string>;
    splitTunneling?: pulumi.Input<string>;
    ssid?: pulumi.Input<string>;
    stickyClientRemove?: pulumi.Input<string>;
    stickyClientThreshold2g?: pulumi.Input<string>;
    stickyClientThreshold5g?: pulumi.Input<string>;
    stickyClientThreshold6g?: pulumi.Input<string>;
    targetWakeTime?: pulumi.Input<string>;
    tkipCounterMeasure?: pulumi.Input<string>;
    tunnelEchoInterval?: pulumi.Input<number>;
    tunnelFallbackInterval?: pulumi.Input<number>;
    usergroup?: pulumi.Input<string>;
    utmLog?: pulumi.Input<string>;
    utmProfile?: pulumi.Input<string>;
    utmStatus?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
    vlanAuto?: pulumi.Input<string>;
    vlanPooling?: pulumi.Input<string>;
    vlanid?: pulumi.Input<number>;
    voiceEnterprise?: pulumi.Input<string>;
    webfilterProfile?: pulumi.Input<string>;
}

export interface ObjectWirelesscontrollerVapDynamicMapping_Scope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface ObjectWirelesscontrollerVapMacFilterList {
    id?: pulumi.Input<number>;
    mac?: pulumi.Input<string>;
    macFilterPolicy?: pulumi.Input<string>;
}

export interface ObjectWirelesscontrollerVapMpskKey {
    comment?: pulumi.Input<string>;
    concurrentClients?: pulumi.Input<string>;
    keyName?: pulumi.Input<string>;
    mpskSchedules?: pulumi.Input<string>;
    passphrases?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObjectWirelesscontrollerVapPortalMessageOverrides {
    authDisclaimerPage?: pulumi.Input<string>;
    authLoginFailedPage?: pulumi.Input<string>;
    authLoginPage?: pulumi.Input<string>;
    authRejectPage?: pulumi.Input<string>;
}

export interface ObjectWirelesscontrollerVapVlanName {
    name?: pulumi.Input<string>;
    vlanId?: pulumi.Input<number>;
}

export interface ObjectWirelesscontrollerVapVlanPool {
    _wtpGroup?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface ObjectWirelesscontrollerWtpprofileDenyMacList {
    id?: pulumi.Input<number>;
    mac?: pulumi.Input<string>;
}

export interface ObjectWirelesscontrollerWtpprofileEslSesDongle {
    apcAddrType?: pulumi.Input<string>;
    apcFqdn?: pulumi.Input<string>;
    apcIp?: pulumi.Input<string>;
    apcPort?: pulumi.Input<number>;
    coexLevel?: pulumi.Input<string>;
    complianceLevel?: pulumi.Input<string>;
    eslChannel?: pulumi.Input<string>;
    outputPower?: pulumi.Input<string>;
    scdEnable?: pulumi.Input<string>;
    tlsCertVerification?: pulumi.Input<string>;
    tlsFqdnVerification?: pulumi.Input<string>;
}

export interface ObjectWirelesscontrollerWtpprofileLan {
    port1Mode?: pulumi.Input<string>;
    port1Ssid?: pulumi.Input<string>;
    port2Mode?: pulumi.Input<string>;
    port2Ssid?: pulumi.Input<string>;
    port3Mode?: pulumi.Input<string>;
    port3Ssid?: pulumi.Input<string>;
    port4Mode?: pulumi.Input<string>;
    port4Ssid?: pulumi.Input<string>;
    port5Mode?: pulumi.Input<string>;
    port5Ssid?: pulumi.Input<string>;
    port6Mode?: pulumi.Input<string>;
    port6Ssid?: pulumi.Input<string>;
    port7Mode?: pulumi.Input<string>;
    port7Ssid?: pulumi.Input<string>;
    port8Mode?: pulumi.Input<string>;
    port8Ssid?: pulumi.Input<string>;
    portEslMode?: pulumi.Input<string>;
    portEslSsid?: pulumi.Input<string>;
    portMode?: pulumi.Input<string>;
    portSsid?: pulumi.Input<string>;
}

export interface ObjectWirelesscontrollerWtpprofileLbs {
    aeroscout?: pulumi.Input<string>;
    aeroscoutApMac?: pulumi.Input<string>;
    aeroscoutMmuReport?: pulumi.Input<string>;
    aeroscoutMu?: pulumi.Input<string>;
    aeroscoutMuFactor?: pulumi.Input<number>;
    aeroscoutMuTimeout?: pulumi.Input<number>;
    aeroscoutServerIp?: pulumi.Input<string>;
    aeroscoutServerPort?: pulumi.Input<number>;
    ekahauBlinkMode?: pulumi.Input<string>;
    ekahauTag?: pulumi.Input<string>;
    ercServerIp?: pulumi.Input<string>;
    ercServerPort?: pulumi.Input<number>;
    fortipresence?: pulumi.Input<string>;
    fortipresenceBle?: pulumi.Input<string>;
    fortipresenceFrequency?: pulumi.Input<number>;
    fortipresencePort?: pulumi.Input<number>;
    fortipresenceProject?: pulumi.Input<string>;
    fortipresenceRogue?: pulumi.Input<string>;
    fortipresenceSecrets?: pulumi.Input<pulumi.Input<string>[]>;
    fortipresenceServer?: pulumi.Input<string>;
    fortipresenceServerAddrType?: pulumi.Input<string>;
    fortipresenceServerFqdn?: pulumi.Input<string>;
    fortipresenceUnassoc?: pulumi.Input<string>;
    polestar?: pulumi.Input<string>;
    polestarAccumulationInterval?: pulumi.Input<number>;
    polestarAssetAddrgrpList?: pulumi.Input<string>;
    polestarAssetUuidList1?: pulumi.Input<string>;
    polestarAssetUuidList2?: pulumi.Input<string>;
    polestarAssetUuidList3?: pulumi.Input<string>;
    polestarAssetUuidList4?: pulumi.Input<string>;
    polestarProtocol?: pulumi.Input<string>;
    polestarReportingInterval?: pulumi.Input<number>;
    polestarServerFqdn?: pulumi.Input<string>;
    polestarServerPath?: pulumi.Input<string>;
    polestarServerPort?: pulumi.Input<number>;
    polestarServerToken?: pulumi.Input<string>;
    stationLocate?: pulumi.Input<string>;
}

export interface ObjectWirelesscontrollerWtpprofilePlatform {
    _localPlatformStr?: pulumi.Input<string>;
    ddscan?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ObjectWirelesscontrollerWtpprofileRadio1 {
    airtimeFairness?: pulumi.Input<string>;
    amsdu?: pulumi.Input<string>;
    apHandoff?: pulumi.Input<string>;
    apSnifferAddr?: pulumi.Input<string>;
    apSnifferBufsize?: pulumi.Input<number>;
    apSnifferChan?: pulumi.Input<number>;
    apSnifferCtl?: pulumi.Input<string>;
    apSnifferData?: pulumi.Input<string>;
    apSnifferMgmtBeacon?: pulumi.Input<string>;
    apSnifferMgmtOther?: pulumi.Input<string>;
    apSnifferMgmtProbe?: pulumi.Input<string>;
    arrpProfile?: pulumi.Input<string>;
    autoPowerHigh?: pulumi.Input<number>;
    autoPowerLevel?: pulumi.Input<string>;
    autoPowerLow?: pulumi.Input<number>;
    autoPowerTarget?: pulumi.Input<string>;
    band?: pulumi.Input<string>;
    band5gType?: pulumi.Input<string>;
    bandwidthAdmissionControl?: pulumi.Input<string>;
    bandwidthCapacity?: pulumi.Input<number>;
    beaconInterval?: pulumi.Input<number>;
    bssColor?: pulumi.Input<number>;
    bssColorMode?: pulumi.Input<string>;
    callAdmissionControl?: pulumi.Input<string>;
    callCapacity?: pulumi.Input<number>;
    channelBonding?: pulumi.Input<string>;
    channelUtilization?: pulumi.Input<string>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    coexistence?: pulumi.Input<string>;
    darrp?: pulumi.Input<string>;
    drma?: pulumi.Input<string>;
    drmaSensitivity?: pulumi.Input<string>;
    dtim?: pulumi.Input<number>;
    fragThreshold?: pulumi.Input<number>;
    frequencyHandoff?: pulumi.Input<string>;
    iperfProtocol?: pulumi.Input<string>;
    iperfServerPort?: pulumi.Input<number>;
    maxClients?: pulumi.Input<number>;
    maxDistance?: pulumi.Input<number>;
    mimoMode?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    n80211d?: pulumi.Input<string>;
    optionalAntenna?: pulumi.Input<string>;
    optionalAntennaGain?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    powerMode?: pulumi.Input<string>;
    powerValue?: pulumi.Input<number>;
    powersaveOptimizes?: pulumi.Input<pulumi.Input<string>[]>;
    protectionMode?: pulumi.Input<string>;
    radioId?: pulumi.Input<number>;
    rtsThreshold?: pulumi.Input<number>;
    samBssid?: pulumi.Input<string>;
    samCaCertificate?: pulumi.Input<string>;
    samCaptivePortal?: pulumi.Input<string>;
    samClientCertificate?: pulumi.Input<string>;
    samCwpFailureString?: pulumi.Input<string>;
    samCwpMatchString?: pulumi.Input<string>;
    samCwpPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    samCwpSuccessString?: pulumi.Input<string>;
    samCwpTestUrl?: pulumi.Input<string>;
    samCwpUsername?: pulumi.Input<string>;
    samEapMethod?: pulumi.Input<string>;
    samPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    samPrivateKey?: pulumi.Input<string>;
    samPrivateKeyPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    samReportIntv?: pulumi.Input<number>;
    samSecurityType?: pulumi.Input<string>;
    samServer?: pulumi.Input<string>;
    samServerFqdn?: pulumi.Input<string>;
    samServerIp?: pulumi.Input<string>;
    samServerType?: pulumi.Input<string>;
    samSsid?: pulumi.Input<string>;
    samTest?: pulumi.Input<string>;
    samUsername?: pulumi.Input<string>;
    shortGuardInterval?: pulumi.Input<string>;
    spectrumAnalysis?: pulumi.Input<string>;
    transmitOptimizes?: pulumi.Input<pulumi.Input<string>[]>;
    vap1?: pulumi.Input<string>;
    vap2?: pulumi.Input<string>;
    vap3?: pulumi.Input<string>;
    vap4?: pulumi.Input<string>;
    vap5?: pulumi.Input<string>;
    vap6?: pulumi.Input<string>;
    vap7?: pulumi.Input<string>;
    vap8?: pulumi.Input<string>;
    vapAll?: pulumi.Input<string>;
    vaps?: pulumi.Input<string>;
    widsProfile?: pulumi.Input<string>;
    zeroWaitDfs?: pulumi.Input<string>;
}

export interface ObjectWirelesscontrollerWtpprofileRadio2 {
    airtimeFairness?: pulumi.Input<string>;
    amsdu?: pulumi.Input<string>;
    apHandoff?: pulumi.Input<string>;
    apSnifferAddr?: pulumi.Input<string>;
    apSnifferBufsize?: pulumi.Input<number>;
    apSnifferChan?: pulumi.Input<number>;
    apSnifferCtl?: pulumi.Input<string>;
    apSnifferData?: pulumi.Input<string>;
    apSnifferMgmtBeacon?: pulumi.Input<string>;
    apSnifferMgmtOther?: pulumi.Input<string>;
    apSnifferMgmtProbe?: pulumi.Input<string>;
    arrpProfile?: pulumi.Input<string>;
    autoPowerHigh?: pulumi.Input<number>;
    autoPowerLevel?: pulumi.Input<string>;
    autoPowerLow?: pulumi.Input<number>;
    autoPowerTarget?: pulumi.Input<string>;
    band?: pulumi.Input<string>;
    band5gType?: pulumi.Input<string>;
    bandwidthAdmissionControl?: pulumi.Input<string>;
    bandwidthCapacity?: pulumi.Input<number>;
    beaconInterval?: pulumi.Input<number>;
    bssColor?: pulumi.Input<number>;
    bssColorMode?: pulumi.Input<string>;
    callAdmissionControl?: pulumi.Input<string>;
    callCapacity?: pulumi.Input<number>;
    channelBonding?: pulumi.Input<string>;
    channelUtilization?: pulumi.Input<string>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    coexistence?: pulumi.Input<string>;
    darrp?: pulumi.Input<string>;
    drma?: pulumi.Input<string>;
    drmaSensitivity?: pulumi.Input<string>;
    dtim?: pulumi.Input<number>;
    fragThreshold?: pulumi.Input<number>;
    frequencyHandoff?: pulumi.Input<string>;
    iperfProtocol?: pulumi.Input<string>;
    iperfServerPort?: pulumi.Input<number>;
    maxClients?: pulumi.Input<number>;
    maxDistance?: pulumi.Input<number>;
    mimoMode?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    n80211d?: pulumi.Input<string>;
    optionalAntenna?: pulumi.Input<string>;
    optionalAntennaGain?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    powerMode?: pulumi.Input<string>;
    powerValue?: pulumi.Input<number>;
    powersaveOptimizes?: pulumi.Input<pulumi.Input<string>[]>;
    protectionMode?: pulumi.Input<string>;
    radioId?: pulumi.Input<number>;
    rtsThreshold?: pulumi.Input<number>;
    samBssid?: pulumi.Input<string>;
    samCaCertificate?: pulumi.Input<string>;
    samCaptivePortal?: pulumi.Input<string>;
    samClientCertificate?: pulumi.Input<string>;
    samCwpFailureString?: pulumi.Input<string>;
    samCwpMatchString?: pulumi.Input<string>;
    samCwpPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    samCwpSuccessString?: pulumi.Input<string>;
    samCwpTestUrl?: pulumi.Input<string>;
    samCwpUsername?: pulumi.Input<string>;
    samEapMethod?: pulumi.Input<string>;
    samPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    samPrivateKey?: pulumi.Input<string>;
    samPrivateKeyPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    samReportIntv?: pulumi.Input<number>;
    samSecurityType?: pulumi.Input<string>;
    samServer?: pulumi.Input<string>;
    samServerFqdn?: pulumi.Input<string>;
    samServerIp?: pulumi.Input<string>;
    samServerType?: pulumi.Input<string>;
    samSsid?: pulumi.Input<string>;
    samTest?: pulumi.Input<string>;
    samUsername?: pulumi.Input<string>;
    shortGuardInterval?: pulumi.Input<string>;
    spectrumAnalysis?: pulumi.Input<string>;
    transmitOptimizes?: pulumi.Input<pulumi.Input<string>[]>;
    vap1?: pulumi.Input<string>;
    vap2?: pulumi.Input<string>;
    vap3?: pulumi.Input<string>;
    vap4?: pulumi.Input<string>;
    vap5?: pulumi.Input<string>;
    vap6?: pulumi.Input<string>;
    vap7?: pulumi.Input<string>;
    vap8?: pulumi.Input<string>;
    vapAll?: pulumi.Input<string>;
    vaps?: pulumi.Input<string>;
    widsProfile?: pulumi.Input<string>;
    zeroWaitDfs?: pulumi.Input<string>;
}

export interface ObjectWirelesscontrollerWtpprofileRadio3 {
    airtimeFairness?: pulumi.Input<string>;
    amsdu?: pulumi.Input<string>;
    apHandoff?: pulumi.Input<string>;
    apSnifferAddr?: pulumi.Input<string>;
    apSnifferBufsize?: pulumi.Input<number>;
    apSnifferChan?: pulumi.Input<number>;
    apSnifferCtl?: pulumi.Input<string>;
    apSnifferData?: pulumi.Input<string>;
    apSnifferMgmtBeacon?: pulumi.Input<string>;
    apSnifferMgmtOther?: pulumi.Input<string>;
    apSnifferMgmtProbe?: pulumi.Input<string>;
    arrpProfile?: pulumi.Input<string>;
    autoPowerHigh?: pulumi.Input<number>;
    autoPowerLevel?: pulumi.Input<string>;
    autoPowerLow?: pulumi.Input<number>;
    autoPowerTarget?: pulumi.Input<string>;
    band?: pulumi.Input<string>;
    band5gType?: pulumi.Input<string>;
    bandwidthAdmissionControl?: pulumi.Input<string>;
    bandwidthCapacity?: pulumi.Input<number>;
    beaconInterval?: pulumi.Input<number>;
    bssColor?: pulumi.Input<number>;
    bssColorMode?: pulumi.Input<string>;
    callAdmissionControl?: pulumi.Input<string>;
    callCapacity?: pulumi.Input<number>;
    channelBonding?: pulumi.Input<string>;
    channelUtilization?: pulumi.Input<string>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    coexistence?: pulumi.Input<string>;
    darrp?: pulumi.Input<string>;
    drma?: pulumi.Input<string>;
    drmaSensitivity?: pulumi.Input<string>;
    dtim?: pulumi.Input<number>;
    fragThreshold?: pulumi.Input<number>;
    frequencyHandoff?: pulumi.Input<string>;
    iperfProtocol?: pulumi.Input<string>;
    iperfServerPort?: pulumi.Input<number>;
    maxClients?: pulumi.Input<number>;
    maxDistance?: pulumi.Input<number>;
    mimoMode?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    n80211d?: pulumi.Input<string>;
    optionalAntenna?: pulumi.Input<string>;
    optionalAntennaGain?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    powerMode?: pulumi.Input<string>;
    powerValue?: pulumi.Input<number>;
    powersaveOptimizes?: pulumi.Input<pulumi.Input<string>[]>;
    protectionMode?: pulumi.Input<string>;
    radioId?: pulumi.Input<number>;
    rtsThreshold?: pulumi.Input<number>;
    samBssid?: pulumi.Input<string>;
    samCaCertificate?: pulumi.Input<string>;
    samCaptivePortal?: pulumi.Input<string>;
    samClientCertificate?: pulumi.Input<string>;
    samCwpFailureString?: pulumi.Input<string>;
    samCwpMatchString?: pulumi.Input<string>;
    samCwpPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    samCwpSuccessString?: pulumi.Input<string>;
    samCwpTestUrl?: pulumi.Input<string>;
    samCwpUsername?: pulumi.Input<string>;
    samEapMethod?: pulumi.Input<string>;
    samPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    samPrivateKey?: pulumi.Input<string>;
    samPrivateKeyPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    samReportIntv?: pulumi.Input<number>;
    samSecurityType?: pulumi.Input<string>;
    samServer?: pulumi.Input<string>;
    samServerFqdn?: pulumi.Input<string>;
    samServerIp?: pulumi.Input<string>;
    samServerType?: pulumi.Input<string>;
    samSsid?: pulumi.Input<string>;
    samTest?: pulumi.Input<string>;
    samUsername?: pulumi.Input<string>;
    shortGuardInterval?: pulumi.Input<string>;
    spectrumAnalysis?: pulumi.Input<string>;
    transmitOptimizes?: pulumi.Input<pulumi.Input<string>[]>;
    vap1?: pulumi.Input<string>;
    vap2?: pulumi.Input<string>;
    vap3?: pulumi.Input<string>;
    vap4?: pulumi.Input<string>;
    vap5?: pulumi.Input<string>;
    vap6?: pulumi.Input<string>;
    vap7?: pulumi.Input<string>;
    vap8?: pulumi.Input<string>;
    vapAll?: pulumi.Input<string>;
    vaps?: pulumi.Input<string>;
    widsProfile?: pulumi.Input<string>;
    zeroWaitDfs?: pulumi.Input<string>;
}

export interface ObjectWirelesscontrollerWtpprofileRadio4 {
    airtimeFairness?: pulumi.Input<string>;
    amsdu?: pulumi.Input<string>;
    apHandoff?: pulumi.Input<string>;
    apSnifferAddr?: pulumi.Input<string>;
    apSnifferBufsize?: pulumi.Input<number>;
    apSnifferChan?: pulumi.Input<number>;
    apSnifferCtl?: pulumi.Input<string>;
    apSnifferData?: pulumi.Input<string>;
    apSnifferMgmtBeacon?: pulumi.Input<string>;
    apSnifferMgmtOther?: pulumi.Input<string>;
    apSnifferMgmtProbe?: pulumi.Input<string>;
    arrpProfile?: pulumi.Input<string>;
    autoPowerHigh?: pulumi.Input<number>;
    autoPowerLevel?: pulumi.Input<string>;
    autoPowerLow?: pulumi.Input<number>;
    autoPowerTarget?: pulumi.Input<string>;
    band?: pulumi.Input<string>;
    band5gType?: pulumi.Input<string>;
    bandwidthAdmissionControl?: pulumi.Input<string>;
    bandwidthCapacity?: pulumi.Input<number>;
    beaconInterval?: pulumi.Input<number>;
    bssColor?: pulumi.Input<number>;
    bssColorMode?: pulumi.Input<string>;
    callAdmissionControl?: pulumi.Input<string>;
    callCapacity?: pulumi.Input<number>;
    channelBonding?: pulumi.Input<string>;
    channelUtilization?: pulumi.Input<string>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    coexistence?: pulumi.Input<string>;
    darrp?: pulumi.Input<string>;
    drma?: pulumi.Input<string>;
    drmaSensitivity?: pulumi.Input<string>;
    dtim?: pulumi.Input<number>;
    fragThreshold?: pulumi.Input<number>;
    frequencyHandoff?: pulumi.Input<string>;
    iperfProtocol?: pulumi.Input<string>;
    iperfServerPort?: pulumi.Input<number>;
    maxClients?: pulumi.Input<number>;
    maxDistance?: pulumi.Input<number>;
    mimoMode?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    n80211d?: pulumi.Input<string>;
    optionalAntenna?: pulumi.Input<string>;
    optionalAntennaGain?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    powerMode?: pulumi.Input<string>;
    powerValue?: pulumi.Input<number>;
    powersaveOptimizes?: pulumi.Input<pulumi.Input<string>[]>;
    protectionMode?: pulumi.Input<string>;
    radioId?: pulumi.Input<number>;
    rtsThreshold?: pulumi.Input<number>;
    samBssid?: pulumi.Input<string>;
    samCaCertificate?: pulumi.Input<string>;
    samCaptivePortal?: pulumi.Input<string>;
    samClientCertificate?: pulumi.Input<string>;
    samCwpFailureString?: pulumi.Input<string>;
    samCwpMatchString?: pulumi.Input<string>;
    samCwpPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    samCwpSuccessString?: pulumi.Input<string>;
    samCwpTestUrl?: pulumi.Input<string>;
    samCwpUsername?: pulumi.Input<string>;
    samEapMethod?: pulumi.Input<string>;
    samPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    samPrivateKey?: pulumi.Input<string>;
    samPrivateKeyPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    samReportIntv?: pulumi.Input<number>;
    samSecurityType?: pulumi.Input<string>;
    samServer?: pulumi.Input<string>;
    samServerFqdn?: pulumi.Input<string>;
    samServerIp?: pulumi.Input<string>;
    samServerType?: pulumi.Input<string>;
    samSsid?: pulumi.Input<string>;
    samTest?: pulumi.Input<string>;
    samUsername?: pulumi.Input<string>;
    shortGuardInterval?: pulumi.Input<string>;
    spectrumAnalysis?: pulumi.Input<string>;
    transmitOptimizes?: pulumi.Input<pulumi.Input<string>[]>;
    vap1?: pulumi.Input<string>;
    vap2?: pulumi.Input<string>;
    vap3?: pulumi.Input<string>;
    vap4?: pulumi.Input<string>;
    vap5?: pulumi.Input<string>;
    vap6?: pulumi.Input<string>;
    vap7?: pulumi.Input<string>;
    vap8?: pulumi.Input<string>;
    vapAll?: pulumi.Input<string>;
    vaps?: pulumi.Input<string>;
    widsProfile?: pulumi.Input<string>;
    zeroWaitDfs?: pulumi.Input<string>;
}

export interface ObjectWirelesscontrollerWtpprofileSplitTunnelingAcl {
    destIp?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface PackagesFirewallDospolicy6Anomaly {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
    quarantineExpiry?: pulumi.Input<string>;
    quarantineLog?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    synproxyTcpMss?: pulumi.Input<string>;
    synproxyTcpSack?: pulumi.Input<string>;
    synproxyTcpTimestamp?: pulumi.Input<string>;
    synproxyTcpWindow?: pulumi.Input<string>;
    synproxyTcpWindowscale?: pulumi.Input<string>;
    synproxyTos?: pulumi.Input<string>;
    synproxyTtl?: pulumi.Input<string>;
    threshold?: pulumi.Input<number>;
    thresholddefault?: pulumi.Input<number>;
}

export interface PackagesFirewallDospolicyAnomaly {
    action?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    quarantine?: pulumi.Input<string>;
    quarantineExpiry?: pulumi.Input<string>;
    quarantineLog?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    synproxyTcpMss?: pulumi.Input<string>;
    synproxyTcpSack?: pulumi.Input<string>;
    synproxyTcpTimestamp?: pulumi.Input<string>;
    synproxyTcpWindow?: pulumi.Input<string>;
    synproxyTcpWindowscale?: pulumi.Input<string>;
    synproxyTos?: pulumi.Input<string>;
    synproxyTtl?: pulumi.Input<string>;
    threshold?: pulumi.Input<number>;
    thresholddefault?: pulumi.Input<number>;
}

export interface PackagesFirewallPolicyVpnDstNode {
    host?: pulumi.Input<string>;
    seq?: pulumi.Input<number>;
    subnet?: pulumi.Input<string>;
}

export interface PackagesFirewallPolicyVpnSrcNode {
    host?: pulumi.Input<string>;
    seq?: pulumi.Input<number>;
    subnet?: pulumi.Input<string>;
}

export interface PackagesPblockPackagesettings {
    centralNat?: pulumi.Input<string>;
    consolidatedFirewallMode?: pulumi.Input<string>;
    fwpolicy6ImplicitLog?: pulumi.Input<string>;
    fwpolicyImplicitLog?: pulumi.Input<string>;
    inspectionMode?: pulumi.Input<string>;
    ngfwMode?: pulumi.Input<string>;
    policyOffloadLevel?: pulumi.Input<string>;
    sslSshProfile?: pulumi.Input<string>;
}

export interface PackagesPkgPackagesetting {
    centralNat?: pulumi.Input<string>;
    consolidatedFirewallMode?: pulumi.Input<string>;
    fwpolicy6ImplicitLog?: pulumi.Input<string>;
    fwpolicyImplicitLog?: pulumi.Input<string>;
    inspectionMode?: pulumi.Input<string>;
    ngfwMode?: pulumi.Input<string>;
    sslSshProfile?: pulumi.Input<string>;
}

export interface PackagesPkgPackagesettings {
    centralNat?: pulumi.Input<string>;
    consolidatedFirewallMode?: pulumi.Input<string>;
    fwpolicy6ImplicitLog?: pulumi.Input<string>;
    fwpolicyImplicitLog?: pulumi.Input<string>;
    inspectionMode?: pulumi.Input<string>;
    ngfwMode?: pulumi.Input<string>;
    policyOffloadLevel?: pulumi.Input<string>;
    sslSshProfile?: pulumi.Input<string>;
}

export interface PackagesPkgScopemember {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface SecurityconsoleAssignPackageTarget {
    adom?: pulumi.Input<string>;
    excluded?: pulumi.Input<string>;
    pkg?: pulumi.Input<string>;
}

export interface SecurityconsoleInstallDeviceScope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface SecurityconsoleInstallObjectsV2Scope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface SecurityconsoleInstallPackageScope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface SecurityconsolePackageCloneScope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface SecurityconsolePackageCommitScope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface SecurityconsoleReinstallPackageTarget {
    pkg?: pulumi.Input<string>;
    scopes?: pulumi.Input<pulumi.Input<inputs.SecurityconsoleReinstallPackageTargetScope>[]>;
}

export interface SecurityconsoleReinstallPackageTargetScope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface SecurityconsoleSignCertificateTemplateScope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface SecurityconsoleTemplateCliPreviewScope {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface SystemAdminGroupMember {
    name?: pulumi.Input<string>;
}

export interface SystemAdminLdapFmgadom {
    adomName?: pulumi.Input<string>;
}

export interface SystemAdminProfileDatamaskCustomField {
    fieldCategories?: pulumi.Input<pulumi.Input<string>[]>;
    fieldName?: pulumi.Input<string>;
    fieldStatus?: pulumi.Input<string>;
    fieldType?: pulumi.Input<string>;
}

export interface SystemAdminProfileWritePasswdProfile {
    profileid?: pulumi.Input<string>;
}

export interface SystemAdminProfileWritePasswdUserList {
    userid?: pulumi.Input<string>;
}

export interface SystemAdminUserAdomExclude {
    adomName?: pulumi.Input<string>;
}

export interface SystemAdminUserAppFilter {
    appFilterName?: pulumi.Input<string>;
}

export interface SystemAdminUserDashboard {
    column?: pulumi.Input<number>;
    diskioContentType?: pulumi.Input<string>;
    diskioPeriod?: pulumi.Input<string>;
    logRatePeriod?: pulumi.Input<string>;
    logRateTopn?: pulumi.Input<string>;
    logRateType?: pulumi.Input<string>;
    moduleid?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    numEntries?: pulumi.Input<number>;
    refreshInterval?: pulumi.Input<number>;
    resCpuDisplay?: pulumi.Input<string>;
    resPeriod?: pulumi.Input<string>;
    resViewType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tabid?: pulumi.Input<number>;
    timePeriod?: pulumi.Input<string>;
    widgetType?: pulumi.Input<string>;
}

export interface SystemAdminUserDashboardTab {
    name?: pulumi.Input<string>;
    tabid?: pulumi.Input<number>;
}

export interface SystemAdminUserFmgadom {
    adomName?: pulumi.Input<string>;
}

export interface SystemAdminUserIpsFilter {
    ipsFilterName?: pulumi.Input<string>;
}

export interface SystemAdminUserMetaData {
    fieldlength?: pulumi.Input<number>;
    fieldname?: pulumi.Input<string>;
    fieldvalue?: pulumi.Input<string>;
    importance?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface SystemAdminUserPolicyPackage {
    policyPackageName?: pulumi.Input<string>;
}

export interface SystemAdminUserWebFilter {
    webFilterName?: pulumi.Input<string>;
}

export interface SystemAlerteventAlertDestination {
    from?: pulumi.Input<string>;
    smtpName?: pulumi.Input<string>;
    snmpName?: pulumi.Input<string>;
    syslogName?: pulumi.Input<string>;
    to?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface SystemAutodeleteDlpFilesAutoDeletion {
    retention?: pulumi.Input<string>;
    runat?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface SystemAutodeleteLogAutoDeletion {
    retention?: pulumi.Input<string>;
    runat?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface SystemAutodeleteQuarantineFilesAutoDeletion {
    retention?: pulumi.Input<string>;
    runat?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface SystemAutodeleteReportAutoDeletion {
    retention?: pulumi.Input<string>;
    runat?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface SystemCsfFabricConnector {
    accprofile?: pulumi.Input<string>;
    configurationWriteAccess?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
}

export interface SystemCsfTrustedList {
    action?: pulumi.Input<string>;
    authorizationType?: pulumi.Input<string>;
    certificate?: pulumi.Input<string>;
    downstreamAuthorization?: pulumi.Input<string>;
    haMembers?: pulumi.Input<string>;
    index?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    serial?: pulumi.Input<string>;
}

export interface SystemGlobalMcPolicyDisabledAdom {
    adomName?: pulumi.Input<string>;
}

export interface SystemGlobalSslCipherSuite {
    cipher?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    version?: pulumi.Input<string>;
}

export interface SystemHaMonitoredInterface {
    interfaceName?: pulumi.Input<string>;
}

export interface SystemHaMonitoredIp {
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
}

export interface SystemHaPeer {
    id?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    ip6?: pulumi.Input<string>;
    serialNumber?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

export interface SystemInterfaceIpv6 {
    ip6Address?: pulumi.Input<string>;
    ip6Allowaccesses?: pulumi.Input<pulumi.Input<string>[]>;
    ip6Autoconf?: pulumi.Input<string>;
}

export interface SystemInterfaceMember {
    interfaceName?: pulumi.Input<string>;
}

export interface SystemLogRatelimitDevice {
    device?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ratelimit?: pulumi.Input<number>;
}

export interface SystemLogRatelimitRatelimit {
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    ratelimit?: pulumi.Input<number>;
}

export interface SystemLogSettingsRollingAnalyzer {
    days?: pulumi.Input<pulumi.Input<string>[]>;
    delFiles?: pulumi.Input<string>;
    directory?: pulumi.Input<string>;
    fileSize?: pulumi.Input<number>;
    gzipFormat?: pulumi.Input<string>;
    hour?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    ip2?: pulumi.Input<string>;
    ip3?: pulumi.Input<string>;
    logFormat?: pulumi.Input<string>;
    min?: pulumi.Input<number>;
    password2s?: pulumi.Input<pulumi.Input<string>[]>;
    password3s?: pulumi.Input<pulumi.Input<string>[]>;
    passwords?: pulumi.Input<pulumi.Input<string>[]>;
    port?: pulumi.Input<number>;
    port2?: pulumi.Input<number>;
    port3?: pulumi.Input<number>;
    rollingUpgradeStatus?: pulumi.Input<number>;
    server?: pulumi.Input<string>;
    server2?: pulumi.Input<string>;
    server3?: pulumi.Input<string>;
    serverType?: pulumi.Input<string>;
    upload?: pulumi.Input<string>;
    uploadHour?: pulumi.Input<number>;
    uploadMode?: pulumi.Input<string>;
    uploadTrigger?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    username2?: pulumi.Input<string>;
    username3?: pulumi.Input<string>;
    when?: pulumi.Input<string>;
}

export interface SystemLogSettingsRollingLocal {
    days?: pulumi.Input<pulumi.Input<string>[]>;
    delFiles?: pulumi.Input<string>;
    directory?: pulumi.Input<string>;
    fileSize?: pulumi.Input<number>;
    gzipFormat?: pulumi.Input<string>;
    hour?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    ip2?: pulumi.Input<string>;
    ip3?: pulumi.Input<string>;
    logFormat?: pulumi.Input<string>;
    min?: pulumi.Input<number>;
    password2s?: pulumi.Input<pulumi.Input<string>[]>;
    password3s?: pulumi.Input<pulumi.Input<string>[]>;
    passwords?: pulumi.Input<pulumi.Input<string>[]>;
    port?: pulumi.Input<number>;
    port2?: pulumi.Input<number>;
    port3?: pulumi.Input<number>;
    rollingUpgradeStatus?: pulumi.Input<number>;
    server?: pulumi.Input<string>;
    server2?: pulumi.Input<string>;
    server3?: pulumi.Input<string>;
    serverType?: pulumi.Input<string>;
    upload?: pulumi.Input<string>;
    uploadHour?: pulumi.Input<number>;
    uploadMode?: pulumi.Input<string>;
    uploadTrigger?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    username2?: pulumi.Input<string>;
    username3?: pulumi.Input<string>;
    when?: pulumi.Input<string>;
}

export interface SystemLogSettingsRollingRegular {
    days?: pulumi.Input<pulumi.Input<string>[]>;
    delFiles?: pulumi.Input<string>;
    directory?: pulumi.Input<string>;
    fileSize?: pulumi.Input<number>;
    gzipFormat?: pulumi.Input<string>;
    hour?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    ip2?: pulumi.Input<string>;
    ip3?: pulumi.Input<string>;
    logFormat?: pulumi.Input<string>;
    min?: pulumi.Input<number>;
    password2s?: pulumi.Input<pulumi.Input<string>[]>;
    password3s?: pulumi.Input<pulumi.Input<string>[]>;
    passwords?: pulumi.Input<pulumi.Input<string>[]>;
    port?: pulumi.Input<number>;
    port2?: pulumi.Input<number>;
    port3?: pulumi.Input<number>;
    rollingUpgradeStatus?: pulumi.Input<number>;
    server?: pulumi.Input<string>;
    server2?: pulumi.Input<string>;
    server3?: pulumi.Input<string>;
    serverType?: pulumi.Input<string>;
    upload?: pulumi.Input<string>;
    uploadHour?: pulumi.Input<number>;
    uploadMode?: pulumi.Input<string>;
    uploadTrigger?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    username2?: pulumi.Input<string>;
    username3?: pulumi.Input<string>;
    when?: pulumi.Input<string>;
}

export interface SystemLogfetchClientprofileDeviceFilter {
    adom?: pulumi.Input<string>;
    device?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    vdom?: pulumi.Input<string>;
}

export interface SystemLogfetchClientprofileLogFilter {
    field?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    oper?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface SystemNtpNtpserver {
    authentication?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    keyId?: pulumi.Input<number>;
    keys?: pulumi.Input<pulumi.Input<string>[]>;
    maxpoll?: pulumi.Input<number>;
    minpoll?: pulumi.Input<number>;
    ntpv3?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
}

export interface SystemSamlFabricIdp {
    devId?: pulumi.Input<string>;
    idpCert?: pulumi.Input<string>;
    idpEntityId?: pulumi.Input<string>;
    idpSingleLogoutUrl?: pulumi.Input<string>;
    idpSingleSignOnUrl?: pulumi.Input<string>;
    idpStatus?: pulumi.Input<string>;
}

export interface SystemSamlServiceProvider {
    idpEntityId?: pulumi.Input<string>;
    idpSingleLogoutUrl?: pulumi.Input<string>;
    idpSingleSignOnUrl?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
    spAdom?: pulumi.Input<string>;
    spCert?: pulumi.Input<string>;
    spEntityId?: pulumi.Input<string>;
    spProfile?: pulumi.Input<string>;
    spSingleLogoutUrl?: pulumi.Input<string>;
    spSingleSignOnUrl?: pulumi.Input<string>;
}

export interface SystemSnmpCommunityHost {
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
}

export interface SystemSnmpCommunityHosts6 {
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
}

export interface SystemSocfabricTrustedList {
    id?: pulumi.Input<number>;
    serial?: pulumi.Input<string>;
}

export interface SystemSqlCustomIndex {
    caseSensitive?: pulumi.Input<string>;
    deviceType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    indexField?: pulumi.Input<string>;
    logType?: pulumi.Input<string>;
}

export interface SystemSqlCustomSkipidx {
    deviceType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    indexField?: pulumi.Input<string>;
    logType?: pulumi.Input<string>;
}

export interface SystemSqlTsIndexField {
    category?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface SystemTemplateScopemember {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface SystemWorkflowApprovalmatrixApprover {
    member?: pulumi.Input<string>;
    seqNum?: pulumi.Input<number>;
}

export interface SystempLogSyslogdFilterExcludeList {
    category?: pulumi.Input<string>;
    fields?: pulumi.Input<pulumi.Input<inputs.SystempLogSyslogdFilterExcludeListField>[]>;
    id?: pulumi.Input<number>;
}

export interface SystempLogSyslogdFilterExcludeListField {
    args?: pulumi.Input<pulumi.Input<string>[]>;
    field?: pulumi.Input<string>;
    negate?: pulumi.Input<string>;
}

export interface SystempLogSyslogdFilterFreeStyle {
    category?: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    filterType?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface SystempLogSyslogdSettingCustomFieldName {
    custom?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface SystempSystemCentralmanagementServerList {
    addrType?: pulumi.Input<string>;
    fqdn?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    serverAddress?: pulumi.Input<string>;
    serverAddress6?: pulumi.Input<string>;
    serverTypes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SystempSystemNtpNtpserver {
    authentication?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    interfaceSelectMethod?: pulumi.Input<string>;
    ipType?: pulumi.Input<string>;
    keyId?: pulumi.Input<number>;
    keyType?: pulumi.Input<string>;
    keys?: pulumi.Input<pulumi.Input<string>[]>;
    ntpv3?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
}

export interface WanTemplateScopemember {
    name?: pulumi.Input<string>;
    vdom?: pulumi.Input<string>;
}

export interface WantempSystemSdwanDuplication {
    dstaddr?: pulumi.Input<string>;
    dstaddr6?: pulumi.Input<string>;
    dstintf?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
    packetDeDuplication?: pulumi.Input<string>;
    packetDuplication?: pulumi.Input<string>;
    service?: pulumi.Input<string>;
    serviceId?: pulumi.Input<string>;
    slaMatchService?: pulumi.Input<string>;
    srcaddr?: pulumi.Input<string>;
    srcaddr6?: pulumi.Input<string>;
    srcintf?: pulumi.Input<string>;
}

export interface WantempSystemSdwanHealthCheck {
    _dynamicServer?: pulumi.Input<string>;
    addrMode?: pulumi.Input<string>;
    classId?: pulumi.Input<string>;
    detectMode?: pulumi.Input<string>;
    diffservcode?: pulumi.Input<string>;
    dnsMatchIp?: pulumi.Input<string>;
    dnsRequestDomain?: pulumi.Input<string>;
    embedMeasuredHealth?: pulumi.Input<string>;
    failtime?: pulumi.Input<number>;
    ftpFile?: pulumi.Input<string>;
    ftpMode?: pulumi.Input<string>;
    haPriority?: pulumi.Input<number>;
    httpAgent?: pulumi.Input<string>;
    httpGet?: pulumi.Input<string>;
    httpMatch?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
    members?: pulumi.Input<pulumi.Input<string>[]>;
    mosCodec?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packetSize?: pulumi.Input<number>;
    passwords?: pulumi.Input<pulumi.Input<string>[]>;
    port?: pulumi.Input<number>;
    probeCount?: pulumi.Input<number>;
    probePackets?: pulumi.Input<string>;
    probeTimeout?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    qualityMeasuredMethod?: pulumi.Input<string>;
    recoverytime?: pulumi.Input<number>;
    securityMode?: pulumi.Input<string>;
    servers?: pulumi.Input<pulumi.Input<string>[]>;
    slaFailLogPeriod?: pulumi.Input<number>;
    slaIdRedistribute?: pulumi.Input<number>;
    slaPassLogPeriod?: pulumi.Input<number>;
    slas?: pulumi.Input<pulumi.Input<inputs.WantempSystemSdwanHealthCheckSla>[]>;
    source?: pulumi.Input<string>;
    source6?: pulumi.Input<string>;
    systemDns?: pulumi.Input<string>;
    thresholdAlertJitter?: pulumi.Input<number>;
    thresholdAlertLatency?: pulumi.Input<number>;
    thresholdAlertPacketloss?: pulumi.Input<number>;
    thresholdWarningJitter?: pulumi.Input<number>;
    thresholdWarningLatency?: pulumi.Input<number>;
    thresholdWarningPacketloss?: pulumi.Input<number>;
    updateCascadeInterface?: pulumi.Input<string>;
    updateStaticRoute?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
    vrf?: pulumi.Input<number>;
}

export interface WantempSystemSdwanHealthCheckSla {
    id?: pulumi.Input<number>;
    jitterThreshold?: pulumi.Input<number>;
    latencyThreshold?: pulumi.Input<number>;
    linkCostFactors?: pulumi.Input<pulumi.Input<string>[]>;
    mosThreshold?: pulumi.Input<string>;
    packetlossThreshold?: pulumi.Input<number>;
    priorityInSla?: pulumi.Input<number>;
    priorityOutSla?: pulumi.Input<number>;
}

export interface WantempSystemSdwanHealthcheckSla {
    id?: pulumi.Input<number>;
    jitterThreshold?: pulumi.Input<number>;
    latencyThreshold?: pulumi.Input<number>;
    linkCostFactors?: pulumi.Input<pulumi.Input<string>[]>;
    mosThreshold?: pulumi.Input<string>;
    packetlossThreshold?: pulumi.Input<number>;
    priorityInSla?: pulumi.Input<number>;
    priorityOutSla?: pulumi.Input<number>;
}

export interface WantempSystemSdwanMember {
    _dynamicMember?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    cost?: pulumi.Input<string>;
    gateway?: pulumi.Input<string>;
    gateway6?: pulumi.Input<string>;
    ingressSpilloverThreshold?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    preferredSource?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    priority6?: pulumi.Input<number>;
    seqNum?: pulumi.Input<number>;
    source?: pulumi.Input<string>;
    source6?: pulumi.Input<string>;
    spilloverThreshold?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    transportGroup?: pulumi.Input<number>;
    volumeRatio?: pulumi.Input<number>;
    weight?: pulumi.Input<number>;
    zone?: pulumi.Input<string>;
}

export interface WantempSystemSdwanNeighbor {
    healthCheck?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    member?: pulumi.Input<string>;
    minimumSlaMeetMembers?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    serviceId?: pulumi.Input<string>;
    slaId?: pulumi.Input<number>;
}

export interface WantempSystemSdwanService {
    addrMode?: pulumi.Input<string>;
    agentExclusive?: pulumi.Input<string>;
    bandwidthWeight?: pulumi.Input<number>;
    default?: pulumi.Input<string>;
    dscpForward?: pulumi.Input<string>;
    dscpForwardTag?: pulumi.Input<string>;
    dscpReverse?: pulumi.Input<string>;
    dscpReverseTag?: pulumi.Input<string>;
    dst?: pulumi.Input<string>;
    dst6?: pulumi.Input<string>;
    dstNegate?: pulumi.Input<string>;
    endPort?: pulumi.Input<number>;
    endSrcPort?: pulumi.Input<number>;
    gateway?: pulumi.Input<string>;
    groups?: pulumi.Input<string>;
    hashMode?: pulumi.Input<string>;
    healthCheck?: pulumi.Input<string>;
    holdDownTime?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    inputDevice?: pulumi.Input<string>;
    inputDeviceNegate?: pulumi.Input<string>;
    inputZones?: pulumi.Input<pulumi.Input<string>[]>;
    internetService?: pulumi.Input<string>;
    internetServiceAppCtrlCategories?: pulumi.Input<pulumi.Input<number>[]>;
    internetServiceAppCtrlGroup?: pulumi.Input<string>;
    internetServiceAppCtrls?: pulumi.Input<pulumi.Input<number>[]>;
    internetServiceCustom?: pulumi.Input<string>;
    internetServiceCustomGroup?: pulumi.Input<string>;
    internetServiceGroup?: pulumi.Input<string>;
    internetServiceName?: pulumi.Input<string>;
    jitterWeight?: pulumi.Input<number>;
    latencyWeight?: pulumi.Input<number>;
    linkCostFactor?: pulumi.Input<string>;
    linkCostThreshold?: pulumi.Input<number>;
    loadBalance?: pulumi.Input<string>;
    minimumSlaMeetMembers?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packetLossWeight?: pulumi.Input<number>;
    passiveMeasurement?: pulumi.Input<string>;
    priorityMembers?: pulumi.Input<string>;
    priorityZone?: pulumi.Input<string>;
    protocol?: pulumi.Input<number>;
    qualityLink?: pulumi.Input<number>;
    role?: pulumi.Input<string>;
    routeTag?: pulumi.Input<number>;
    shortcut?: pulumi.Input<string>;
    shortcutPriority?: pulumi.Input<string>;
    shortcutStickiness?: pulumi.Input<string>;
    slaCompareMethod?: pulumi.Input<string>;
    slaStickiness?: pulumi.Input<string>;
    slas?: pulumi.Input<pulumi.Input<inputs.WantempSystemSdwanServiceSla>[]>;
    src?: pulumi.Input<string>;
    src6?: pulumi.Input<string>;
    srcNegate?: pulumi.Input<string>;
    standaloneAction?: pulumi.Input<string>;
    startPort?: pulumi.Input<number>;
    startSrcPort?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tieBreak?: pulumi.Input<string>;
    tos?: pulumi.Input<string>;
    tosMask?: pulumi.Input<string>;
    useShortcutSla?: pulumi.Input<string>;
    users?: pulumi.Input<string>;
    zoneMode?: pulumi.Input<string>;
}

export interface WantempSystemSdwanServiceSla {
    healthCheck?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}

export interface WantempSystemSdwanZone {
    advpnHealthCheck?: pulumi.Input<string>;
    advpnSelect?: pulumi.Input<string>;
    minimumSlaMeetMembers?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    serviceSlaTieBreak?: pulumi.Input<string>;
}

export interface WantempSystemVirtualwanlinkHealthCheck {
    _dynamicServer?: pulumi.Input<string>;
    addrMode?: pulumi.Input<string>;
    diffservcode?: pulumi.Input<string>;
    failtime?: pulumi.Input<number>;
    haPriority?: pulumi.Input<number>;
    httpAgent?: pulumi.Input<string>;
    httpGet?: pulumi.Input<string>;
    httpMatch?: pulumi.Input<string>;
    internetServiceId?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
    members?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packetSize?: pulumi.Input<number>;
    passwords?: pulumi.Input<pulumi.Input<string>[]>;
    port?: pulumi.Input<number>;
    probePackets?: pulumi.Input<string>;
    probeTimeout?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    recoverytime?: pulumi.Input<number>;
    securityMode?: pulumi.Input<string>;
    servers?: pulumi.Input<pulumi.Input<string>[]>;
    slaFailLogPeriod?: pulumi.Input<number>;
    slaPassLogPeriod?: pulumi.Input<number>;
    slas?: pulumi.Input<pulumi.Input<inputs.WantempSystemVirtualwanlinkHealthCheckSla>[]>;
    thresholdAlertJitter?: pulumi.Input<number>;
    thresholdAlertLatency?: pulumi.Input<number>;
    thresholdAlertPacketloss?: pulumi.Input<number>;
    thresholdWarningJitter?: pulumi.Input<number>;
    thresholdWarningLatency?: pulumi.Input<number>;
    thresholdWarningPacketloss?: pulumi.Input<number>;
    updateCascadeInterface?: pulumi.Input<string>;
    updateStaticRoute?: pulumi.Input<string>;
}

export interface WantempSystemVirtualwanlinkHealthCheckSla {
    id?: pulumi.Input<number>;
    jitterThreshold?: pulumi.Input<number>;
    latencyThreshold?: pulumi.Input<number>;
    linkCostFactors?: pulumi.Input<pulumi.Input<string>[]>;
    packetlossThreshold?: pulumi.Input<number>;
}

export interface WantempSystemVirtualwanlinkHealthcheckSla {
    id?: pulumi.Input<number>;
    jitterThreshold?: pulumi.Input<number>;
    latencyThreshold?: pulumi.Input<number>;
    linkCostFactors?: pulumi.Input<pulumi.Input<string>[]>;
    packetlossThreshold?: pulumi.Input<number>;
}

export interface WantempSystemVirtualwanlinkMember {
    _dynamicMember?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    cost?: pulumi.Input<string>;
    gateway?: pulumi.Input<string>;
    gateway6?: pulumi.Input<string>;
    ingressSpilloverThreshold?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    seqNum?: pulumi.Input<number>;
    source?: pulumi.Input<string>;
    source6?: pulumi.Input<string>;
    spilloverThreshold?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    volumeRatio?: pulumi.Input<number>;
    weight?: pulumi.Input<number>;
}

export interface WantempSystemVirtualwanlinkNeighbor {
    healthCheck?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    member?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    slaId?: pulumi.Input<number>;
}

export interface WantempSystemVirtualwanlinkService {
    addrMode?: pulumi.Input<string>;
    bandwidthWeight?: pulumi.Input<number>;
    default?: pulumi.Input<string>;
    dscpForward?: pulumi.Input<string>;
    dscpForwardTag?: pulumi.Input<string>;
    dscpReverse?: pulumi.Input<string>;
    dscpReverseTag?: pulumi.Input<string>;
    dst?: pulumi.Input<string>;
    dst6?: pulumi.Input<string>;
    dstNegate?: pulumi.Input<string>;
    endPort?: pulumi.Input<number>;
    gateway?: pulumi.Input<string>;
    groups?: pulumi.Input<string>;
    healthCheck?: pulumi.Input<string>;
    holdDownTime?: pulumi.Input<number>;
    id?: pulumi.Input<number>;
    inputDevice?: pulumi.Input<string>;
    inputDeviceNegate?: pulumi.Input<string>;
    internetService?: pulumi.Input<string>;
    internetServiceAppCtrlGroup?: pulumi.Input<string>;
    internetServiceAppCtrls?: pulumi.Input<pulumi.Input<number>[]>;
    internetServiceCtrlGroup?: pulumi.Input<string>;
    internetServiceCtrls?: pulumi.Input<pulumi.Input<number>[]>;
    internetServiceCustom?: pulumi.Input<string>;
    internetServiceCustomGroup?: pulumi.Input<string>;
    internetServiceGroup?: pulumi.Input<string>;
    internetServiceId?: pulumi.Input<string>;
    jitterWeight?: pulumi.Input<number>;
    latencyWeight?: pulumi.Input<number>;
    linkCostFactor?: pulumi.Input<string>;
    linkCostThreshold?: pulumi.Input<number>;
    member?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    packetLossWeight?: pulumi.Input<number>;
    priorityMembers?: pulumi.Input<string>;
    protocol?: pulumi.Input<number>;
    qualityLink?: pulumi.Input<number>;
    role?: pulumi.Input<string>;
    routeTag?: pulumi.Input<number>;
    slaCompareMethod?: pulumi.Input<string>;
    slas?: pulumi.Input<pulumi.Input<inputs.WantempSystemVirtualwanlinkServiceSla>[]>;
    src?: pulumi.Input<string>;
    src6?: pulumi.Input<string>;
    srcNegate?: pulumi.Input<string>;
    standaloneAction?: pulumi.Input<string>;
    startPort?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tos?: pulumi.Input<string>;
    tosMask?: pulumi.Input<string>;
    users?: pulumi.Input<string>;
}

export interface WantempSystemVirtualwanlinkServiceSla {
    healthCheck?: pulumi.Input<string>;
    id?: pulumi.Input<number>;
}
