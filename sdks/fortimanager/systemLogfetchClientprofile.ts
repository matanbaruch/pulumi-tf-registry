// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SystemLogfetchClientprofile extends pulumi.CustomResource {
    /**
     * Get an existing SystemLogfetchClientprofile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemLogfetchClientprofileState, opts?: pulumi.CustomResourceOptions): SystemLogfetchClientprofile {
        return new SystemLogfetchClientprofile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/systemLogfetchClientprofile:SystemLogfetchClientprofile';

    /**
     * Returns true if the given object is an instance of SystemLogfetchClientprofile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemLogfetchClientprofile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemLogfetchClientprofile.__pulumiType;
    }

    public readonly clientAdom!: pulumi.Output<string | undefined>;
    public readonly dataRange!: pulumi.Output<string>;
    public readonly dataRangeValue!: pulumi.Output<number>;
    public readonly deviceFilters!: pulumi.Output<outputs.SystemLogfetchClientprofileDeviceFilter[] | undefined>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly endTimes!: pulumi.Output<string[]>;
    public readonly fosid!: pulumi.Output<number | undefined>;
    public readonly indexFetchLogs!: pulumi.Output<string>;
    public readonly logFilterLogic!: pulumi.Output<string>;
    public readonly logFilterStatus!: pulumi.Output<string>;
    public readonly logFilters!: pulumi.Output<outputs.SystemLogfetchClientprofileLogFilter[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly passwords!: pulumi.Output<string[]>;
    public readonly peerCertCn!: pulumi.Output<string | undefined>;
    public readonly secureConnection!: pulumi.Output<string>;
    public readonly serverAdom!: pulumi.Output<string | undefined>;
    public readonly serverIp!: pulumi.Output<string>;
    public readonly startTimes!: pulumi.Output<string[]>;
    public readonly syncAdomConfig!: pulumi.Output<string>;
    public readonly user!: pulumi.Output<string | undefined>;

    /**
     * Create a SystemLogfetchClientprofile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemLogfetchClientprofileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemLogfetchClientprofileArgs | SystemLogfetchClientprofileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemLogfetchClientprofileState | undefined;
            resourceInputs["clientAdom"] = state ? state.clientAdom : undefined;
            resourceInputs["dataRange"] = state ? state.dataRange : undefined;
            resourceInputs["dataRangeValue"] = state ? state.dataRangeValue : undefined;
            resourceInputs["deviceFilters"] = state ? state.deviceFilters : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["endTimes"] = state ? state.endTimes : undefined;
            resourceInputs["fosid"] = state ? state.fosid : undefined;
            resourceInputs["indexFetchLogs"] = state ? state.indexFetchLogs : undefined;
            resourceInputs["logFilterLogic"] = state ? state.logFilterLogic : undefined;
            resourceInputs["logFilterStatus"] = state ? state.logFilterStatus : undefined;
            resourceInputs["logFilters"] = state ? state.logFilters : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["passwords"] = state ? state.passwords : undefined;
            resourceInputs["peerCertCn"] = state ? state.peerCertCn : undefined;
            resourceInputs["secureConnection"] = state ? state.secureConnection : undefined;
            resourceInputs["serverAdom"] = state ? state.serverAdom : undefined;
            resourceInputs["serverIp"] = state ? state.serverIp : undefined;
            resourceInputs["startTimes"] = state ? state.startTimes : undefined;
            resourceInputs["syncAdomConfig"] = state ? state.syncAdomConfig : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
        } else {
            const args = argsOrState as SystemLogfetchClientprofileArgs | undefined;
            resourceInputs["clientAdom"] = args ? args.clientAdom : undefined;
            resourceInputs["dataRange"] = args ? args.dataRange : undefined;
            resourceInputs["dataRangeValue"] = args ? args.dataRangeValue : undefined;
            resourceInputs["deviceFilters"] = args ? args.deviceFilters : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["endTimes"] = args ? args.endTimes : undefined;
            resourceInputs["fosid"] = args ? args.fosid : undefined;
            resourceInputs["indexFetchLogs"] = args ? args.indexFetchLogs : undefined;
            resourceInputs["logFilterLogic"] = args ? args.logFilterLogic : undefined;
            resourceInputs["logFilterStatus"] = args ? args.logFilterStatus : undefined;
            resourceInputs["logFilters"] = args ? args.logFilters : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["passwords"] = args?.passwords ? pulumi.secret(args.passwords) : undefined;
            resourceInputs["peerCertCn"] = args ? args.peerCertCn : undefined;
            resourceInputs["secureConnection"] = args ? args.secureConnection : undefined;
            resourceInputs["serverAdom"] = args ? args.serverAdom : undefined;
            resourceInputs["serverIp"] = args ? args.serverIp : undefined;
            resourceInputs["startTimes"] = args ? args.startTimes : undefined;
            resourceInputs["syncAdomConfig"] = args ? args.syncAdomConfig : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["passwords"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SystemLogfetchClientprofile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemLogfetchClientprofile resources.
 */
export interface SystemLogfetchClientprofileState {
    clientAdom?: pulumi.Input<string>;
    dataRange?: pulumi.Input<string>;
    dataRangeValue?: pulumi.Input<number>;
    deviceFilters?: pulumi.Input<pulumi.Input<inputs.SystemLogfetchClientprofileDeviceFilter>[]>;
    dynamicSortSubtable?: pulumi.Input<string>;
    endTimes?: pulumi.Input<pulumi.Input<string>[]>;
    fosid?: pulumi.Input<number>;
    indexFetchLogs?: pulumi.Input<string>;
    logFilterLogic?: pulumi.Input<string>;
    logFilterStatus?: pulumi.Input<string>;
    logFilters?: pulumi.Input<pulumi.Input<inputs.SystemLogfetchClientprofileLogFilter>[]>;
    name?: pulumi.Input<string>;
    passwords?: pulumi.Input<pulumi.Input<string>[]>;
    peerCertCn?: pulumi.Input<string>;
    secureConnection?: pulumi.Input<string>;
    serverAdom?: pulumi.Input<string>;
    serverIp?: pulumi.Input<string>;
    startTimes?: pulumi.Input<pulumi.Input<string>[]>;
    syncAdomConfig?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemLogfetchClientprofile resource.
 */
export interface SystemLogfetchClientprofileArgs {
    clientAdom?: pulumi.Input<string>;
    dataRange?: pulumi.Input<string>;
    dataRangeValue?: pulumi.Input<number>;
    deviceFilters?: pulumi.Input<pulumi.Input<inputs.SystemLogfetchClientprofileDeviceFilter>[]>;
    dynamicSortSubtable?: pulumi.Input<string>;
    endTimes?: pulumi.Input<pulumi.Input<string>[]>;
    fosid?: pulumi.Input<number>;
    indexFetchLogs?: pulumi.Input<string>;
    logFilterLogic?: pulumi.Input<string>;
    logFilterStatus?: pulumi.Input<string>;
    logFilters?: pulumi.Input<pulumi.Input<inputs.SystemLogfetchClientprofileLogFilter>[]>;
    name?: pulumi.Input<string>;
    passwords?: pulumi.Input<pulumi.Input<string>[]>;
    peerCertCn?: pulumi.Input<string>;
    secureConnection?: pulumi.Input<string>;
    serverAdom?: pulumi.Input<string>;
    serverIp?: pulumi.Input<string>;
    startTimes?: pulumi.Input<pulumi.Input<string>[]>;
    syncAdomConfig?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
}
