// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ObjectFirewallSslsshprofileSslserver extends pulumi.CustomResource {
    /**
     * Get an existing ObjectFirewallSslsshprofileSslserver resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectFirewallSslsshprofileSslserverState, opts?: pulumi.CustomResourceOptions): ObjectFirewallSslsshprofileSslserver {
        return new ObjectFirewallSslsshprofileSslserver(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/objectFirewallSslsshprofileSslserver:ObjectFirewallSslsshprofileSslserver';

    /**
     * Returns true if the given object is an instance of ObjectFirewallSslsshprofileSslserver.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectFirewallSslsshprofileSslserver {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectFirewallSslsshprofileSslserver.__pulumiType;
    }

    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly fosid!: pulumi.Output<number | undefined>;
    public readonly ftpsClientCertRequest!: pulumi.Output<string | undefined>;
    public readonly ftpsClientCertificate!: pulumi.Output<string>;
    public readonly httpsClientCertRequest!: pulumi.Output<string | undefined>;
    public readonly httpsClientCertificate!: pulumi.Output<string>;
    public readonly imapsClientCertRequest!: pulumi.Output<string | undefined>;
    public readonly imapsClientCertificate!: pulumi.Output<string>;
    public readonly ip!: pulumi.Output<string>;
    public readonly pop3sClientCertRequest!: pulumi.Output<string | undefined>;
    public readonly pop3sClientCertificate!: pulumi.Output<string>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly smtpsClientCertRequest!: pulumi.Output<string | undefined>;
    public readonly smtpsClientCertificate!: pulumi.Output<string>;
    public readonly sslOtherClientCertRequest!: pulumi.Output<string | undefined>;
    public readonly sslOtherClientCertificate!: pulumi.Output<string>;
    public readonly sslSshProfile!: pulumi.Output<string>;

    /**
     * Create a ObjectFirewallSslsshprofileSslserver resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObjectFirewallSslsshprofileSslserverArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectFirewallSslsshprofileSslserverArgs | ObjectFirewallSslsshprofileSslserverState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectFirewallSslsshprofileSslserverState | undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["fosid"] = state ? state.fosid : undefined;
            resourceInputs["ftpsClientCertRequest"] = state ? state.ftpsClientCertRequest : undefined;
            resourceInputs["ftpsClientCertificate"] = state ? state.ftpsClientCertificate : undefined;
            resourceInputs["httpsClientCertRequest"] = state ? state.httpsClientCertRequest : undefined;
            resourceInputs["httpsClientCertificate"] = state ? state.httpsClientCertificate : undefined;
            resourceInputs["imapsClientCertRequest"] = state ? state.imapsClientCertRequest : undefined;
            resourceInputs["imapsClientCertificate"] = state ? state.imapsClientCertificate : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["pop3sClientCertRequest"] = state ? state.pop3sClientCertRequest : undefined;
            resourceInputs["pop3sClientCertificate"] = state ? state.pop3sClientCertificate : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["smtpsClientCertRequest"] = state ? state.smtpsClientCertRequest : undefined;
            resourceInputs["smtpsClientCertificate"] = state ? state.smtpsClientCertificate : undefined;
            resourceInputs["sslOtherClientCertRequest"] = state ? state.sslOtherClientCertRequest : undefined;
            resourceInputs["sslOtherClientCertificate"] = state ? state.sslOtherClientCertificate : undefined;
            resourceInputs["sslSshProfile"] = state ? state.sslSshProfile : undefined;
        } else {
            const args = argsOrState as ObjectFirewallSslsshprofileSslserverArgs | undefined;
            if ((!args || args.sslSshProfile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sslSshProfile'");
            }
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["fosid"] = args ? args.fosid : undefined;
            resourceInputs["ftpsClientCertRequest"] = args ? args.ftpsClientCertRequest : undefined;
            resourceInputs["ftpsClientCertificate"] = args ? args.ftpsClientCertificate : undefined;
            resourceInputs["httpsClientCertRequest"] = args ? args.httpsClientCertRequest : undefined;
            resourceInputs["httpsClientCertificate"] = args ? args.httpsClientCertificate : undefined;
            resourceInputs["imapsClientCertRequest"] = args ? args.imapsClientCertRequest : undefined;
            resourceInputs["imapsClientCertificate"] = args ? args.imapsClientCertificate : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["pop3sClientCertRequest"] = args ? args.pop3sClientCertRequest : undefined;
            resourceInputs["pop3sClientCertificate"] = args ? args.pop3sClientCertificate : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["smtpsClientCertRequest"] = args ? args.smtpsClientCertRequest : undefined;
            resourceInputs["smtpsClientCertificate"] = args ? args.smtpsClientCertificate : undefined;
            resourceInputs["sslOtherClientCertRequest"] = args ? args.sslOtherClientCertRequest : undefined;
            resourceInputs["sslOtherClientCertificate"] = args ? args.sslOtherClientCertificate : undefined;
            resourceInputs["sslSshProfile"] = args ? args.sslSshProfile : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectFirewallSslsshprofileSslserver.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectFirewallSslsshprofileSslserver resources.
 */
export interface ObjectFirewallSslsshprofileSslserverState {
    adom?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    ftpsClientCertRequest?: pulumi.Input<string>;
    ftpsClientCertificate?: pulumi.Input<string>;
    httpsClientCertRequest?: pulumi.Input<string>;
    httpsClientCertificate?: pulumi.Input<string>;
    imapsClientCertRequest?: pulumi.Input<string>;
    imapsClientCertificate?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    pop3sClientCertRequest?: pulumi.Input<string>;
    pop3sClientCertificate?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    smtpsClientCertRequest?: pulumi.Input<string>;
    smtpsClientCertificate?: pulumi.Input<string>;
    sslOtherClientCertRequest?: pulumi.Input<string>;
    sslOtherClientCertificate?: pulumi.Input<string>;
    sslSshProfile?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectFirewallSslsshprofileSslserver resource.
 */
export interface ObjectFirewallSslsshprofileSslserverArgs {
    adom?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    ftpsClientCertRequest?: pulumi.Input<string>;
    ftpsClientCertificate?: pulumi.Input<string>;
    httpsClientCertRequest?: pulumi.Input<string>;
    httpsClientCertificate?: pulumi.Input<string>;
    imapsClientCertRequest?: pulumi.Input<string>;
    imapsClientCertificate?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    pop3sClientCertRequest?: pulumi.Input<string>;
    pop3sClientCertificate?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    smtpsClientCertRequest?: pulumi.Input<string>;
    smtpsClientCertificate?: pulumi.Input<string>;
    sslOtherClientCertRequest?: pulumi.Input<string>;
    sslOtherClientCertificate?: pulumi.Input<string>;
    sslSshProfile: pulumi.Input<string>;
}
