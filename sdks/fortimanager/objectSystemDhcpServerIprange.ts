// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ObjectSystemDhcpServerIprange extends pulumi.CustomResource {
    /**
     * Get an existing ObjectSystemDhcpServerIprange resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectSystemDhcpServerIprangeState, opts?: pulumi.CustomResourceOptions): ObjectSystemDhcpServerIprange {
        return new ObjectSystemDhcpServerIprange(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/objectSystemDhcpServerIprange:ObjectSystemDhcpServerIprange';

    /**
     * Returns true if the given object is an instance of ObjectSystemDhcpServerIprange.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectSystemDhcpServerIprange {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectSystemDhcpServerIprange.__pulumiType;
    }

    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly endIp!: pulumi.Output<string>;
    public readonly fosid!: pulumi.Output<number | undefined>;
    public readonly leaseTime!: pulumi.Output<number | undefined>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly server!: pulumi.Output<string>;
    public readonly startIp!: pulumi.Output<string>;
    public readonly uciMatch!: pulumi.Output<string>;
    public readonly uciStrings!: pulumi.Output<string[]>;
    public readonly vciMatch!: pulumi.Output<string>;
    public readonly vciStrings!: pulumi.Output<string[]>;

    /**
     * Create a ObjectSystemDhcpServerIprange resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObjectSystemDhcpServerIprangeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectSystemDhcpServerIprangeArgs | ObjectSystemDhcpServerIprangeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectSystemDhcpServerIprangeState | undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["endIp"] = state ? state.endIp : undefined;
            resourceInputs["fosid"] = state ? state.fosid : undefined;
            resourceInputs["leaseTime"] = state ? state.leaseTime : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["startIp"] = state ? state.startIp : undefined;
            resourceInputs["uciMatch"] = state ? state.uciMatch : undefined;
            resourceInputs["uciStrings"] = state ? state.uciStrings : undefined;
            resourceInputs["vciMatch"] = state ? state.vciMatch : undefined;
            resourceInputs["vciStrings"] = state ? state.vciStrings : undefined;
        } else {
            const args = argsOrState as ObjectSystemDhcpServerIprangeArgs | undefined;
            if ((!args || args.server === undefined) && !opts.urn) {
                throw new Error("Missing required property 'server'");
            }
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["endIp"] = args ? args.endIp : undefined;
            resourceInputs["fosid"] = args ? args.fosid : undefined;
            resourceInputs["leaseTime"] = args ? args.leaseTime : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["startIp"] = args ? args.startIp : undefined;
            resourceInputs["uciMatch"] = args ? args.uciMatch : undefined;
            resourceInputs["uciStrings"] = args ? args.uciStrings : undefined;
            resourceInputs["vciMatch"] = args ? args.vciMatch : undefined;
            resourceInputs["vciStrings"] = args ? args.vciStrings : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectSystemDhcpServerIprange.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectSystemDhcpServerIprange resources.
 */
export interface ObjectSystemDhcpServerIprangeState {
    adom?: pulumi.Input<string>;
    endIp?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    leaseTime?: pulumi.Input<number>;
    scopetype?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
    startIp?: pulumi.Input<string>;
    uciMatch?: pulumi.Input<string>;
    uciStrings?: pulumi.Input<pulumi.Input<string>[]>;
    vciMatch?: pulumi.Input<string>;
    vciStrings?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ObjectSystemDhcpServerIprange resource.
 */
export interface ObjectSystemDhcpServerIprangeArgs {
    adom?: pulumi.Input<string>;
    endIp?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    leaseTime?: pulumi.Input<number>;
    scopetype?: pulumi.Input<string>;
    server: pulumi.Input<string>;
    startIp?: pulumi.Input<string>;
    uciMatch?: pulumi.Input<string>;
    uciStrings?: pulumi.Input<pulumi.Input<string>[]>;
    vciMatch?: pulumi.Input<string>;
    vciStrings?: pulumi.Input<pulumi.Input<string>[]>;
}
