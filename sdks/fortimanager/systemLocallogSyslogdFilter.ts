// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SystemLocallogSyslogdFilter extends pulumi.CustomResource {
    /**
     * Get an existing SystemLocallogSyslogdFilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemLocallogSyslogdFilterState, opts?: pulumi.CustomResourceOptions): SystemLocallogSyslogdFilter {
        return new SystemLocallogSyslogdFilter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/systemLocallogSyslogdFilter:SystemLocallogSyslogdFilter';

    /**
     * Returns true if the given object is an instance of SystemLocallogSyslogdFilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemLocallogSyslogdFilter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemLocallogSyslogdFilter.__pulumiType;
    }

    public readonly aid!: pulumi.Output<string>;
    public readonly controller!: pulumi.Output<string>;
    public readonly devcfg!: pulumi.Output<string>;
    public readonly devops!: pulumi.Output<string>;
    public readonly diskquota!: pulumi.Output<string>;
    public readonly dm!: pulumi.Output<string>;
    public readonly docker!: pulumi.Output<string>;
    public readonly dvm!: pulumi.Output<string>;
    public readonly ediscovery!: pulumi.Output<string>;
    public readonly epmgr!: pulumi.Output<string>;
    public readonly event!: pulumi.Output<string>;
    public readonly eventmgmt!: pulumi.Output<string>;
    public readonly faz!: pulumi.Output<string>;
    public readonly fazha!: pulumi.Output<string>;
    public readonly fazsys!: pulumi.Output<string>;
    public readonly fgd!: pulumi.Output<string>;
    public readonly fgfm!: pulumi.Output<string>;
    public readonly fips!: pulumi.Output<string>;
    public readonly fmgws!: pulumi.Output<string>;
    public readonly fmlmgr!: pulumi.Output<string>;
    public readonly fmwmgr!: pulumi.Output<string>;
    public readonly fortiview!: pulumi.Output<string>;
    public readonly glbcfg!: pulumi.Output<string>;
    public readonly ha!: pulumi.Output<string>;
    public readonly hcache!: pulumi.Output<string>;
    public readonly incident!: pulumi.Output<string>;
    public readonly iolog!: pulumi.Output<string>;
    public readonly logd!: pulumi.Output<string>;
    public readonly logdb!: pulumi.Output<string>;
    public readonly logdev!: pulumi.Output<string>;
    public readonly logfile!: pulumi.Output<string>;
    public readonly logging!: pulumi.Output<string>;
    public readonly lrmgr!: pulumi.Output<string>;
    public readonly objcfg!: pulumi.Output<string>;
    public readonly report!: pulumi.Output<string>;
    public readonly rev!: pulumi.Output<string>;
    public readonly rtmon!: pulumi.Output<string>;
    public readonly scfw!: pulumi.Output<string>;
    public readonly scply!: pulumi.Output<string>;
    public readonly scrmgr!: pulumi.Output<string>;
    public readonly scvpn!: pulumi.Output<string>;
    public readonly system!: pulumi.Output<string>;
    public readonly webport!: pulumi.Output<string>;

    /**
     * Create a SystemLocallogSyslogdFilter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemLocallogSyslogdFilterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemLocallogSyslogdFilterArgs | SystemLocallogSyslogdFilterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemLocallogSyslogdFilterState | undefined;
            resourceInputs["aid"] = state ? state.aid : undefined;
            resourceInputs["controller"] = state ? state.controller : undefined;
            resourceInputs["devcfg"] = state ? state.devcfg : undefined;
            resourceInputs["devops"] = state ? state.devops : undefined;
            resourceInputs["diskquota"] = state ? state.diskquota : undefined;
            resourceInputs["dm"] = state ? state.dm : undefined;
            resourceInputs["docker"] = state ? state.docker : undefined;
            resourceInputs["dvm"] = state ? state.dvm : undefined;
            resourceInputs["ediscovery"] = state ? state.ediscovery : undefined;
            resourceInputs["epmgr"] = state ? state.epmgr : undefined;
            resourceInputs["event"] = state ? state.event : undefined;
            resourceInputs["eventmgmt"] = state ? state.eventmgmt : undefined;
            resourceInputs["faz"] = state ? state.faz : undefined;
            resourceInputs["fazha"] = state ? state.fazha : undefined;
            resourceInputs["fazsys"] = state ? state.fazsys : undefined;
            resourceInputs["fgd"] = state ? state.fgd : undefined;
            resourceInputs["fgfm"] = state ? state.fgfm : undefined;
            resourceInputs["fips"] = state ? state.fips : undefined;
            resourceInputs["fmgws"] = state ? state.fmgws : undefined;
            resourceInputs["fmlmgr"] = state ? state.fmlmgr : undefined;
            resourceInputs["fmwmgr"] = state ? state.fmwmgr : undefined;
            resourceInputs["fortiview"] = state ? state.fortiview : undefined;
            resourceInputs["glbcfg"] = state ? state.glbcfg : undefined;
            resourceInputs["ha"] = state ? state.ha : undefined;
            resourceInputs["hcache"] = state ? state.hcache : undefined;
            resourceInputs["incident"] = state ? state.incident : undefined;
            resourceInputs["iolog"] = state ? state.iolog : undefined;
            resourceInputs["logd"] = state ? state.logd : undefined;
            resourceInputs["logdb"] = state ? state.logdb : undefined;
            resourceInputs["logdev"] = state ? state.logdev : undefined;
            resourceInputs["logfile"] = state ? state.logfile : undefined;
            resourceInputs["logging"] = state ? state.logging : undefined;
            resourceInputs["lrmgr"] = state ? state.lrmgr : undefined;
            resourceInputs["objcfg"] = state ? state.objcfg : undefined;
            resourceInputs["report"] = state ? state.report : undefined;
            resourceInputs["rev"] = state ? state.rev : undefined;
            resourceInputs["rtmon"] = state ? state.rtmon : undefined;
            resourceInputs["scfw"] = state ? state.scfw : undefined;
            resourceInputs["scply"] = state ? state.scply : undefined;
            resourceInputs["scrmgr"] = state ? state.scrmgr : undefined;
            resourceInputs["scvpn"] = state ? state.scvpn : undefined;
            resourceInputs["system"] = state ? state.system : undefined;
            resourceInputs["webport"] = state ? state.webport : undefined;
        } else {
            const args = argsOrState as SystemLocallogSyslogdFilterArgs | undefined;
            resourceInputs["aid"] = args ? args.aid : undefined;
            resourceInputs["controller"] = args ? args.controller : undefined;
            resourceInputs["devcfg"] = args ? args.devcfg : undefined;
            resourceInputs["devops"] = args ? args.devops : undefined;
            resourceInputs["diskquota"] = args ? args.diskquota : undefined;
            resourceInputs["dm"] = args ? args.dm : undefined;
            resourceInputs["docker"] = args ? args.docker : undefined;
            resourceInputs["dvm"] = args ? args.dvm : undefined;
            resourceInputs["ediscovery"] = args ? args.ediscovery : undefined;
            resourceInputs["epmgr"] = args ? args.epmgr : undefined;
            resourceInputs["event"] = args ? args.event : undefined;
            resourceInputs["eventmgmt"] = args ? args.eventmgmt : undefined;
            resourceInputs["faz"] = args ? args.faz : undefined;
            resourceInputs["fazha"] = args ? args.fazha : undefined;
            resourceInputs["fazsys"] = args ? args.fazsys : undefined;
            resourceInputs["fgd"] = args ? args.fgd : undefined;
            resourceInputs["fgfm"] = args ? args.fgfm : undefined;
            resourceInputs["fips"] = args ? args.fips : undefined;
            resourceInputs["fmgws"] = args ? args.fmgws : undefined;
            resourceInputs["fmlmgr"] = args ? args.fmlmgr : undefined;
            resourceInputs["fmwmgr"] = args ? args.fmwmgr : undefined;
            resourceInputs["fortiview"] = args ? args.fortiview : undefined;
            resourceInputs["glbcfg"] = args ? args.glbcfg : undefined;
            resourceInputs["ha"] = args ? args.ha : undefined;
            resourceInputs["hcache"] = args ? args.hcache : undefined;
            resourceInputs["incident"] = args ? args.incident : undefined;
            resourceInputs["iolog"] = args ? args.iolog : undefined;
            resourceInputs["logd"] = args ? args.logd : undefined;
            resourceInputs["logdb"] = args ? args.logdb : undefined;
            resourceInputs["logdev"] = args ? args.logdev : undefined;
            resourceInputs["logfile"] = args ? args.logfile : undefined;
            resourceInputs["logging"] = args ? args.logging : undefined;
            resourceInputs["lrmgr"] = args ? args.lrmgr : undefined;
            resourceInputs["objcfg"] = args ? args.objcfg : undefined;
            resourceInputs["report"] = args ? args.report : undefined;
            resourceInputs["rev"] = args ? args.rev : undefined;
            resourceInputs["rtmon"] = args ? args.rtmon : undefined;
            resourceInputs["scfw"] = args ? args.scfw : undefined;
            resourceInputs["scply"] = args ? args.scply : undefined;
            resourceInputs["scrmgr"] = args ? args.scrmgr : undefined;
            resourceInputs["scvpn"] = args ? args.scvpn : undefined;
            resourceInputs["system"] = args ? args.system : undefined;
            resourceInputs["webport"] = args ? args.webport : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemLocallogSyslogdFilter.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemLocallogSyslogdFilter resources.
 */
export interface SystemLocallogSyslogdFilterState {
    aid?: pulumi.Input<string>;
    controller?: pulumi.Input<string>;
    devcfg?: pulumi.Input<string>;
    devops?: pulumi.Input<string>;
    diskquota?: pulumi.Input<string>;
    dm?: pulumi.Input<string>;
    docker?: pulumi.Input<string>;
    dvm?: pulumi.Input<string>;
    ediscovery?: pulumi.Input<string>;
    epmgr?: pulumi.Input<string>;
    event?: pulumi.Input<string>;
    eventmgmt?: pulumi.Input<string>;
    faz?: pulumi.Input<string>;
    fazha?: pulumi.Input<string>;
    fazsys?: pulumi.Input<string>;
    fgd?: pulumi.Input<string>;
    fgfm?: pulumi.Input<string>;
    fips?: pulumi.Input<string>;
    fmgws?: pulumi.Input<string>;
    fmlmgr?: pulumi.Input<string>;
    fmwmgr?: pulumi.Input<string>;
    fortiview?: pulumi.Input<string>;
    glbcfg?: pulumi.Input<string>;
    ha?: pulumi.Input<string>;
    hcache?: pulumi.Input<string>;
    incident?: pulumi.Input<string>;
    iolog?: pulumi.Input<string>;
    logd?: pulumi.Input<string>;
    logdb?: pulumi.Input<string>;
    logdev?: pulumi.Input<string>;
    logfile?: pulumi.Input<string>;
    logging?: pulumi.Input<string>;
    lrmgr?: pulumi.Input<string>;
    objcfg?: pulumi.Input<string>;
    report?: pulumi.Input<string>;
    rev?: pulumi.Input<string>;
    rtmon?: pulumi.Input<string>;
    scfw?: pulumi.Input<string>;
    scply?: pulumi.Input<string>;
    scrmgr?: pulumi.Input<string>;
    scvpn?: pulumi.Input<string>;
    system?: pulumi.Input<string>;
    webport?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemLocallogSyslogdFilter resource.
 */
export interface SystemLocallogSyslogdFilterArgs {
    aid?: pulumi.Input<string>;
    controller?: pulumi.Input<string>;
    devcfg?: pulumi.Input<string>;
    devops?: pulumi.Input<string>;
    diskquota?: pulumi.Input<string>;
    dm?: pulumi.Input<string>;
    docker?: pulumi.Input<string>;
    dvm?: pulumi.Input<string>;
    ediscovery?: pulumi.Input<string>;
    epmgr?: pulumi.Input<string>;
    event?: pulumi.Input<string>;
    eventmgmt?: pulumi.Input<string>;
    faz?: pulumi.Input<string>;
    fazha?: pulumi.Input<string>;
    fazsys?: pulumi.Input<string>;
    fgd?: pulumi.Input<string>;
    fgfm?: pulumi.Input<string>;
    fips?: pulumi.Input<string>;
    fmgws?: pulumi.Input<string>;
    fmlmgr?: pulumi.Input<string>;
    fmwmgr?: pulumi.Input<string>;
    fortiview?: pulumi.Input<string>;
    glbcfg?: pulumi.Input<string>;
    ha?: pulumi.Input<string>;
    hcache?: pulumi.Input<string>;
    incident?: pulumi.Input<string>;
    iolog?: pulumi.Input<string>;
    logd?: pulumi.Input<string>;
    logdb?: pulumi.Input<string>;
    logdev?: pulumi.Input<string>;
    logfile?: pulumi.Input<string>;
    logging?: pulumi.Input<string>;
    lrmgr?: pulumi.Input<string>;
    objcfg?: pulumi.Input<string>;
    report?: pulumi.Input<string>;
    rev?: pulumi.Input<string>;
    rtmon?: pulumi.Input<string>;
    scfw?: pulumi.Input<string>;
    scply?: pulumi.Input<string>;
    scrmgr?: pulumi.Input<string>;
    scvpn?: pulumi.Input<string>;
    system?: pulumi.Input<string>;
    webport?: pulumi.Input<string>;
}
