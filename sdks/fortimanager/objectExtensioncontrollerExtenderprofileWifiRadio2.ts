// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ObjectExtensioncontrollerExtenderprofileWifiRadio2 extends pulumi.CustomResource {
    /**
     * Get an existing ObjectExtensioncontrollerExtenderprofileWifiRadio2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectExtensioncontrollerExtenderprofileWifiRadio2State, opts?: pulumi.CustomResourceOptions): ObjectExtensioncontrollerExtenderprofileWifiRadio2 {
        return new ObjectExtensioncontrollerExtenderprofileWifiRadio2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/objectExtensioncontrollerExtenderprofileWifiRadio2:ObjectExtensioncontrollerExtenderprofileWifiRadio2';

    /**
     * Returns true if the given object is an instance of ObjectExtensioncontrollerExtenderprofileWifiRadio2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectExtensioncontrollerExtenderprofileWifiRadio2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectExtensioncontrollerExtenderprofileWifiRadio2.__pulumiType;
    }

    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly band!: pulumi.Output<string>;
    public readonly bandwidth!: pulumi.Output<string>;
    public readonly beaconInterval!: pulumi.Output<number>;
    public readonly bssColor!: pulumi.Output<number | undefined>;
    public readonly bssColorMode!: pulumi.Output<string>;
    public readonly channels!: pulumi.Output<string[]>;
    public readonly extenderProfile!: pulumi.Output<string>;
    public readonly extensionChannel!: pulumi.Output<string>;
    public readonly guardInterval!: pulumi.Output<string>;
    public readonly lanExtVaps!: pulumi.Output<string[]>;
    public readonly localVaps!: pulumi.Output<string[]>;
    public readonly maxClients!: pulumi.Output<number | undefined>;
    public readonly mode!: pulumi.Output<string>;
    public readonly n80211d!: pulumi.Output<string>;
    public readonly operatingStandard!: pulumi.Output<string>;
    public readonly powerLevel!: pulumi.Output<number>;
    public readonly radioId!: pulumi.Output<number>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly status!: pulumi.Output<string>;

    /**
     * Create a ObjectExtensioncontrollerExtenderprofileWifiRadio2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObjectExtensioncontrollerExtenderprofileWifiRadio2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectExtensioncontrollerExtenderprofileWifiRadio2Args | ObjectExtensioncontrollerExtenderprofileWifiRadio2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectExtensioncontrollerExtenderprofileWifiRadio2State | undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["band"] = state ? state.band : undefined;
            resourceInputs["bandwidth"] = state ? state.bandwidth : undefined;
            resourceInputs["beaconInterval"] = state ? state.beaconInterval : undefined;
            resourceInputs["bssColor"] = state ? state.bssColor : undefined;
            resourceInputs["bssColorMode"] = state ? state.bssColorMode : undefined;
            resourceInputs["channels"] = state ? state.channels : undefined;
            resourceInputs["extenderProfile"] = state ? state.extenderProfile : undefined;
            resourceInputs["extensionChannel"] = state ? state.extensionChannel : undefined;
            resourceInputs["guardInterval"] = state ? state.guardInterval : undefined;
            resourceInputs["lanExtVaps"] = state ? state.lanExtVaps : undefined;
            resourceInputs["localVaps"] = state ? state.localVaps : undefined;
            resourceInputs["maxClients"] = state ? state.maxClients : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["n80211d"] = state ? state.n80211d : undefined;
            resourceInputs["operatingStandard"] = state ? state.operatingStandard : undefined;
            resourceInputs["powerLevel"] = state ? state.powerLevel : undefined;
            resourceInputs["radioId"] = state ? state.radioId : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as ObjectExtensioncontrollerExtenderprofileWifiRadio2Args | undefined;
            if ((!args || args.extenderProfile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'extenderProfile'");
            }
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["band"] = args ? args.band : undefined;
            resourceInputs["bandwidth"] = args ? args.bandwidth : undefined;
            resourceInputs["beaconInterval"] = args ? args.beaconInterval : undefined;
            resourceInputs["bssColor"] = args ? args.bssColor : undefined;
            resourceInputs["bssColorMode"] = args ? args.bssColorMode : undefined;
            resourceInputs["channels"] = args ? args.channels : undefined;
            resourceInputs["extenderProfile"] = args ? args.extenderProfile : undefined;
            resourceInputs["extensionChannel"] = args ? args.extensionChannel : undefined;
            resourceInputs["guardInterval"] = args ? args.guardInterval : undefined;
            resourceInputs["lanExtVaps"] = args ? args.lanExtVaps : undefined;
            resourceInputs["localVaps"] = args ? args.localVaps : undefined;
            resourceInputs["maxClients"] = args ? args.maxClients : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["n80211d"] = args ? args.n80211d : undefined;
            resourceInputs["operatingStandard"] = args ? args.operatingStandard : undefined;
            resourceInputs["powerLevel"] = args ? args.powerLevel : undefined;
            resourceInputs["radioId"] = args ? args.radioId : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectExtensioncontrollerExtenderprofileWifiRadio2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectExtensioncontrollerExtenderprofileWifiRadio2 resources.
 */
export interface ObjectExtensioncontrollerExtenderprofileWifiRadio2State {
    adom?: pulumi.Input<string>;
    band?: pulumi.Input<string>;
    bandwidth?: pulumi.Input<string>;
    beaconInterval?: pulumi.Input<number>;
    bssColor?: pulumi.Input<number>;
    bssColorMode?: pulumi.Input<string>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    extenderProfile?: pulumi.Input<string>;
    extensionChannel?: pulumi.Input<string>;
    guardInterval?: pulumi.Input<string>;
    lanExtVaps?: pulumi.Input<pulumi.Input<string>[]>;
    localVaps?: pulumi.Input<pulumi.Input<string>[]>;
    maxClients?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    n80211d?: pulumi.Input<string>;
    operatingStandard?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    radioId?: pulumi.Input<number>;
    scopetype?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectExtensioncontrollerExtenderprofileWifiRadio2 resource.
 */
export interface ObjectExtensioncontrollerExtenderprofileWifiRadio2Args {
    adom?: pulumi.Input<string>;
    band?: pulumi.Input<string>;
    bandwidth?: pulumi.Input<string>;
    beaconInterval?: pulumi.Input<number>;
    bssColor?: pulumi.Input<number>;
    bssColorMode?: pulumi.Input<string>;
    channels?: pulumi.Input<pulumi.Input<string>[]>;
    extenderProfile: pulumi.Input<string>;
    extensionChannel?: pulumi.Input<string>;
    guardInterval?: pulumi.Input<string>;
    lanExtVaps?: pulumi.Input<pulumi.Input<string>[]>;
    localVaps?: pulumi.Input<pulumi.Input<string>[]>;
    maxClients?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    n80211d?: pulumi.Input<string>;
    operatingStandard?: pulumi.Input<string>;
    powerLevel?: pulumi.Input<number>;
    radioId?: pulumi.Input<number>;
    scopetype?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}
