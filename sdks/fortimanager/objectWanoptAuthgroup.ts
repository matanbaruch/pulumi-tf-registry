// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ObjectWanoptAuthgroup extends pulumi.CustomResource {
    /**
     * Get an existing ObjectWanoptAuthgroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectWanoptAuthgroupState, opts?: pulumi.CustomResourceOptions): ObjectWanoptAuthgroup {
        return new ObjectWanoptAuthgroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/objectWanoptAuthgroup:ObjectWanoptAuthgroup';

    /**
     * Returns true if the given object is an instance of ObjectWanoptAuthgroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectWanoptAuthgroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectWanoptAuthgroup.__pulumiType;
    }

    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly authMethod!: pulumi.Output<string>;
    public readonly cert!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly peer!: pulumi.Output<string | undefined>;
    public readonly peerAccept!: pulumi.Output<string>;
    public readonly psks!: pulumi.Output<string[]>;
    public readonly scopetype!: pulumi.Output<string | undefined>;

    /**
     * Create a ObjectWanoptAuthgroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ObjectWanoptAuthgroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectWanoptAuthgroupArgs | ObjectWanoptAuthgroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectWanoptAuthgroupState | undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["authMethod"] = state ? state.authMethod : undefined;
            resourceInputs["cert"] = state ? state.cert : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["peer"] = state ? state.peer : undefined;
            resourceInputs["peerAccept"] = state ? state.peerAccept : undefined;
            resourceInputs["psks"] = state ? state.psks : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
        } else {
            const args = argsOrState as ObjectWanoptAuthgroupArgs | undefined;
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["authMethod"] = args ? args.authMethod : undefined;
            resourceInputs["cert"] = args ? args.cert : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["peer"] = args ? args.peer : undefined;
            resourceInputs["peerAccept"] = args ? args.peerAccept : undefined;
            resourceInputs["psks"] = args?.psks ? pulumi.secret(args.psks) : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["psks"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ObjectWanoptAuthgroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectWanoptAuthgroup resources.
 */
export interface ObjectWanoptAuthgroupState {
    adom?: pulumi.Input<string>;
    authMethod?: pulumi.Input<string>;
    cert?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    peer?: pulumi.Input<string>;
    peerAccept?: pulumi.Input<string>;
    psks?: pulumi.Input<pulumi.Input<string>[]>;
    scopetype?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectWanoptAuthgroup resource.
 */
export interface ObjectWanoptAuthgroupArgs {
    adom?: pulumi.Input<string>;
    authMethod?: pulumi.Input<string>;
    cert?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    peer?: pulumi.Input<string>;
    peerAccept?: pulumi.Input<string>;
    psks?: pulumi.Input<pulumi.Input<string>[]>;
    scopetype?: pulumi.Input<string>;
}
