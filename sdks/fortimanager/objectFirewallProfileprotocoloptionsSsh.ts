// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ObjectFirewallProfileprotocoloptionsSsh extends pulumi.CustomResource {
    /**
     * Get an existing ObjectFirewallProfileprotocoloptionsSsh resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectFirewallProfileprotocoloptionsSshState, opts?: pulumi.CustomResourceOptions): ObjectFirewallProfileprotocoloptionsSsh {
        return new ObjectFirewallProfileprotocoloptionsSsh(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/objectFirewallProfileprotocoloptionsSsh:ObjectFirewallProfileprotocoloptionsSsh';

    /**
     * Returns true if the given object is an instance of ObjectFirewallProfileprotocoloptionsSsh.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectFirewallProfileprotocoloptionsSsh {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectFirewallProfileprotocoloptionsSsh.__pulumiType;
    }

    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly comfortAmount!: pulumi.Output<number>;
    public readonly comfortInterval!: pulumi.Output<number>;
    public readonly options!: pulumi.Output<string[]>;
    public readonly oversizeLimit!: pulumi.Output<number>;
    public readonly profileProtocolOptions!: pulumi.Output<string>;
    public readonly scanBzip2!: pulumi.Output<string>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly sslOffloaded!: pulumi.Output<string>;
    public readonly streamBasedUncompressedLimit!: pulumi.Output<number | undefined>;
    public readonly tcpWindowMaximum!: pulumi.Output<number>;
    public readonly tcpWindowMinimum!: pulumi.Output<number>;
    public readonly tcpWindowSize!: pulumi.Output<number>;
    public readonly tcpWindowType!: pulumi.Output<string>;
    public readonly uncompressedNestLimit!: pulumi.Output<number>;
    public readonly uncompressedOversizeLimit!: pulumi.Output<number>;

    /**
     * Create a ObjectFirewallProfileprotocoloptionsSsh resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObjectFirewallProfileprotocoloptionsSshArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectFirewallProfileprotocoloptionsSshArgs | ObjectFirewallProfileprotocoloptionsSshState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectFirewallProfileprotocoloptionsSshState | undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["comfortAmount"] = state ? state.comfortAmount : undefined;
            resourceInputs["comfortInterval"] = state ? state.comfortInterval : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["oversizeLimit"] = state ? state.oversizeLimit : undefined;
            resourceInputs["profileProtocolOptions"] = state ? state.profileProtocolOptions : undefined;
            resourceInputs["scanBzip2"] = state ? state.scanBzip2 : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["sslOffloaded"] = state ? state.sslOffloaded : undefined;
            resourceInputs["streamBasedUncompressedLimit"] = state ? state.streamBasedUncompressedLimit : undefined;
            resourceInputs["tcpWindowMaximum"] = state ? state.tcpWindowMaximum : undefined;
            resourceInputs["tcpWindowMinimum"] = state ? state.tcpWindowMinimum : undefined;
            resourceInputs["tcpWindowSize"] = state ? state.tcpWindowSize : undefined;
            resourceInputs["tcpWindowType"] = state ? state.tcpWindowType : undefined;
            resourceInputs["uncompressedNestLimit"] = state ? state.uncompressedNestLimit : undefined;
            resourceInputs["uncompressedOversizeLimit"] = state ? state.uncompressedOversizeLimit : undefined;
        } else {
            const args = argsOrState as ObjectFirewallProfileprotocoloptionsSshArgs | undefined;
            if ((!args || args.profileProtocolOptions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'profileProtocolOptions'");
            }
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["comfortAmount"] = args ? args.comfortAmount : undefined;
            resourceInputs["comfortInterval"] = args ? args.comfortInterval : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["oversizeLimit"] = args ? args.oversizeLimit : undefined;
            resourceInputs["profileProtocolOptions"] = args ? args.profileProtocolOptions : undefined;
            resourceInputs["scanBzip2"] = args ? args.scanBzip2 : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["sslOffloaded"] = args ? args.sslOffloaded : undefined;
            resourceInputs["streamBasedUncompressedLimit"] = args ? args.streamBasedUncompressedLimit : undefined;
            resourceInputs["tcpWindowMaximum"] = args ? args.tcpWindowMaximum : undefined;
            resourceInputs["tcpWindowMinimum"] = args ? args.tcpWindowMinimum : undefined;
            resourceInputs["tcpWindowSize"] = args ? args.tcpWindowSize : undefined;
            resourceInputs["tcpWindowType"] = args ? args.tcpWindowType : undefined;
            resourceInputs["uncompressedNestLimit"] = args ? args.uncompressedNestLimit : undefined;
            resourceInputs["uncompressedOversizeLimit"] = args ? args.uncompressedOversizeLimit : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectFirewallProfileprotocoloptionsSsh.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectFirewallProfileprotocoloptionsSsh resources.
 */
export interface ObjectFirewallProfileprotocoloptionsSshState {
    adom?: pulumi.Input<string>;
    comfortAmount?: pulumi.Input<number>;
    comfortInterval?: pulumi.Input<number>;
    options?: pulumi.Input<pulumi.Input<string>[]>;
    oversizeLimit?: pulumi.Input<number>;
    profileProtocolOptions?: pulumi.Input<string>;
    scanBzip2?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    sslOffloaded?: pulumi.Input<string>;
    streamBasedUncompressedLimit?: pulumi.Input<number>;
    tcpWindowMaximum?: pulumi.Input<number>;
    tcpWindowMinimum?: pulumi.Input<number>;
    tcpWindowSize?: pulumi.Input<number>;
    tcpWindowType?: pulumi.Input<string>;
    uncompressedNestLimit?: pulumi.Input<number>;
    uncompressedOversizeLimit?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ObjectFirewallProfileprotocoloptionsSsh resource.
 */
export interface ObjectFirewallProfileprotocoloptionsSshArgs {
    adom?: pulumi.Input<string>;
    comfortAmount?: pulumi.Input<number>;
    comfortInterval?: pulumi.Input<number>;
    options?: pulumi.Input<pulumi.Input<string>[]>;
    oversizeLimit?: pulumi.Input<number>;
    profileProtocolOptions: pulumi.Input<string>;
    scanBzip2?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    sslOffloaded?: pulumi.Input<string>;
    streamBasedUncompressedLimit?: pulumi.Input<number>;
    tcpWindowMaximum?: pulumi.Input<number>;
    tcpWindowMinimum?: pulumi.Input<number>;
    tcpWindowSize?: pulumi.Input<number>;
    tcpWindowType?: pulumi.Input<string>;
    uncompressedNestLimit?: pulumi.Input<number>;
    uncompressedOversizeLimit?: pulumi.Input<number>;
}
