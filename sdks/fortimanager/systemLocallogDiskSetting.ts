// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SystemLocallogDiskSetting extends pulumi.CustomResource {
    /**
     * Get an existing SystemLocallogDiskSetting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemLocallogDiskSettingState, opts?: pulumi.CustomResourceOptions): SystemLocallogDiskSetting {
        return new SystemLocallogDiskSetting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/systemLocallogDiskSetting:SystemLocallogDiskSetting';

    /**
     * Returns true if the given object is an instance of SystemLocallogDiskSetting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemLocallogDiskSetting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemLocallogDiskSetting.__pulumiType;
    }

    public readonly diskfull!: pulumi.Output<string>;
    public readonly logDiskFullPercentage!: pulumi.Output<number>;
    public readonly logDiskQuota!: pulumi.Output<number | undefined>;
    public readonly maxLogFileNum!: pulumi.Output<number>;
    public readonly maxLogFileSize!: pulumi.Output<number>;
    public readonly rollDays!: pulumi.Output<string[]>;
    public readonly rollSchedule!: pulumi.Output<string>;
    public readonly rollTime!: pulumi.Output<string>;
    public readonly serverType!: pulumi.Output<string>;
    public readonly severity!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly upload!: pulumi.Output<string>;
    public readonly uploadDeleteFiles!: pulumi.Output<string>;
    public readonly uploadTime!: pulumi.Output<string>;
    public readonly uploaddir!: pulumi.Output<string | undefined>;
    public readonly uploadip!: pulumi.Output<string>;
    public readonly uploadpasses!: pulumi.Output<string[]>;
    public readonly uploadport!: pulumi.Output<number | undefined>;
    public readonly uploadsched!: pulumi.Output<string>;
    public readonly uploadtypes!: pulumi.Output<string[]>;
    public readonly uploaduser!: pulumi.Output<string | undefined>;
    public readonly uploadzip!: pulumi.Output<string>;

    /**
     * Create a SystemLocallogDiskSetting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemLocallogDiskSettingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemLocallogDiskSettingArgs | SystemLocallogDiskSettingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemLocallogDiskSettingState | undefined;
            resourceInputs["diskfull"] = state ? state.diskfull : undefined;
            resourceInputs["logDiskFullPercentage"] = state ? state.logDiskFullPercentage : undefined;
            resourceInputs["logDiskQuota"] = state ? state.logDiskQuota : undefined;
            resourceInputs["maxLogFileNum"] = state ? state.maxLogFileNum : undefined;
            resourceInputs["maxLogFileSize"] = state ? state.maxLogFileSize : undefined;
            resourceInputs["rollDays"] = state ? state.rollDays : undefined;
            resourceInputs["rollSchedule"] = state ? state.rollSchedule : undefined;
            resourceInputs["rollTime"] = state ? state.rollTime : undefined;
            resourceInputs["serverType"] = state ? state.serverType : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["upload"] = state ? state.upload : undefined;
            resourceInputs["uploadDeleteFiles"] = state ? state.uploadDeleteFiles : undefined;
            resourceInputs["uploadTime"] = state ? state.uploadTime : undefined;
            resourceInputs["uploaddir"] = state ? state.uploaddir : undefined;
            resourceInputs["uploadip"] = state ? state.uploadip : undefined;
            resourceInputs["uploadpasses"] = state ? state.uploadpasses : undefined;
            resourceInputs["uploadport"] = state ? state.uploadport : undefined;
            resourceInputs["uploadsched"] = state ? state.uploadsched : undefined;
            resourceInputs["uploadtypes"] = state ? state.uploadtypes : undefined;
            resourceInputs["uploaduser"] = state ? state.uploaduser : undefined;
            resourceInputs["uploadzip"] = state ? state.uploadzip : undefined;
        } else {
            const args = argsOrState as SystemLocallogDiskSettingArgs | undefined;
            resourceInputs["diskfull"] = args ? args.diskfull : undefined;
            resourceInputs["logDiskFullPercentage"] = args ? args.logDiskFullPercentage : undefined;
            resourceInputs["logDiskQuota"] = args ? args.logDiskQuota : undefined;
            resourceInputs["maxLogFileNum"] = args ? args.maxLogFileNum : undefined;
            resourceInputs["maxLogFileSize"] = args ? args.maxLogFileSize : undefined;
            resourceInputs["rollDays"] = args ? args.rollDays : undefined;
            resourceInputs["rollSchedule"] = args ? args.rollSchedule : undefined;
            resourceInputs["rollTime"] = args ? args.rollTime : undefined;
            resourceInputs["serverType"] = args ? args.serverType : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["upload"] = args ? args.upload : undefined;
            resourceInputs["uploadDeleteFiles"] = args ? args.uploadDeleteFiles : undefined;
            resourceInputs["uploadTime"] = args ? args.uploadTime : undefined;
            resourceInputs["uploaddir"] = args ? args.uploaddir : undefined;
            resourceInputs["uploadip"] = args ? args.uploadip : undefined;
            resourceInputs["uploadpasses"] = args?.uploadpasses ? pulumi.secret(args.uploadpasses) : undefined;
            resourceInputs["uploadport"] = args ? args.uploadport : undefined;
            resourceInputs["uploadsched"] = args ? args.uploadsched : undefined;
            resourceInputs["uploadtypes"] = args ? args.uploadtypes : undefined;
            resourceInputs["uploaduser"] = args ? args.uploaduser : undefined;
            resourceInputs["uploadzip"] = args ? args.uploadzip : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["uploadpasses"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SystemLocallogDiskSetting.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemLocallogDiskSetting resources.
 */
export interface SystemLocallogDiskSettingState {
    diskfull?: pulumi.Input<string>;
    logDiskFullPercentage?: pulumi.Input<number>;
    logDiskQuota?: pulumi.Input<number>;
    maxLogFileNum?: pulumi.Input<number>;
    maxLogFileSize?: pulumi.Input<number>;
    rollDays?: pulumi.Input<pulumi.Input<string>[]>;
    rollSchedule?: pulumi.Input<string>;
    rollTime?: pulumi.Input<string>;
    serverType?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    upload?: pulumi.Input<string>;
    uploadDeleteFiles?: pulumi.Input<string>;
    uploadTime?: pulumi.Input<string>;
    uploaddir?: pulumi.Input<string>;
    uploadip?: pulumi.Input<string>;
    uploadpasses?: pulumi.Input<pulumi.Input<string>[]>;
    uploadport?: pulumi.Input<number>;
    uploadsched?: pulumi.Input<string>;
    uploadtypes?: pulumi.Input<pulumi.Input<string>[]>;
    uploaduser?: pulumi.Input<string>;
    uploadzip?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemLocallogDiskSetting resource.
 */
export interface SystemLocallogDiskSettingArgs {
    diskfull?: pulumi.Input<string>;
    logDiskFullPercentage?: pulumi.Input<number>;
    logDiskQuota?: pulumi.Input<number>;
    maxLogFileNum?: pulumi.Input<number>;
    maxLogFileSize?: pulumi.Input<number>;
    rollDays?: pulumi.Input<pulumi.Input<string>[]>;
    rollSchedule?: pulumi.Input<string>;
    rollTime?: pulumi.Input<string>;
    serverType?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    upload?: pulumi.Input<string>;
    uploadDeleteFiles?: pulumi.Input<string>;
    uploadTime?: pulumi.Input<string>;
    uploaddir?: pulumi.Input<string>;
    uploadip?: pulumi.Input<string>;
    uploadpasses?: pulumi.Input<pulumi.Input<string>[]>;
    uploadport?: pulumi.Input<number>;
    uploadsched?: pulumi.Input<string>;
    uploadtypes?: pulumi.Input<pulumi.Input<string>[]>;
    uploaduser?: pulumi.Input<string>;
    uploadzip?: pulumi.Input<string>;
}
