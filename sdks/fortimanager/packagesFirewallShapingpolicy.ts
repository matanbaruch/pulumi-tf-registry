// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PackagesFirewallShapingpolicy extends pulumi.CustomResource {
    /**
     * Get an existing PackagesFirewallShapingpolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PackagesFirewallShapingpolicyState, opts?: pulumi.CustomResourceOptions): PackagesFirewallShapingpolicy {
        return new PackagesFirewallShapingpolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/packagesFirewallShapingpolicy:PackagesFirewallShapingpolicy';

    /**
     * Returns true if the given object is an instance of PackagesFirewallShapingpolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PackagesFirewallShapingpolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PackagesFirewallShapingpolicy.__pulumiType;
    }

    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly appCategories!: pulumi.Output<string[]>;
    public readonly appGroups!: pulumi.Output<string[]>;
    public readonly applications!: pulumi.Output<number[]>;
    public readonly classId!: pulumi.Output<string>;
    public readonly comment!: pulumi.Output<string | undefined>;
    public readonly cos!: pulumi.Output<string>;
    public readonly cosMask!: pulumi.Output<string>;
    public readonly diffservForward!: pulumi.Output<string>;
    public readonly diffservReverse!: pulumi.Output<string>;
    public readonly diffservcodeForward!: pulumi.Output<string | undefined>;
    public readonly diffservcodeRev!: pulumi.Output<string | undefined>;
    public readonly dstaddr6!: pulumi.Output<string | undefined>;
    public readonly dstaddrs!: pulumi.Output<string[]>;
    public readonly dstintfs!: pulumi.Output<string[]>;
    public readonly fosid!: pulumi.Output<number | undefined>;
    public readonly groups!: pulumi.Output<string[]>;
    public readonly internetService!: pulumi.Output<string>;
    public readonly internetServiceCustomGroups!: pulumi.Output<string[]>;
    public readonly internetServiceCustoms!: pulumi.Output<string[]>;
    public readonly internetServiceGroups!: pulumi.Output<string[]>;
    public readonly internetServiceId!: pulumi.Output<string | undefined>;
    public readonly internetServiceNames!: pulumi.Output<string[]>;
    public readonly internetServiceSrc!: pulumi.Output<string>;
    public readonly internetServiceSrcCustom!: pulumi.Output<string | undefined>;
    public readonly internetServiceSrcCustomGroup!: pulumi.Output<string | undefined>;
    public readonly internetServiceSrcGroup!: pulumi.Output<string | undefined>;
    public readonly internetServiceSrcId!: pulumi.Output<string | undefined>;
    public readonly internetServiceSrcNames!: pulumi.Output<string[]>;
    public readonly ipVersion!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly perIpShaper!: pulumi.Output<string | undefined>;
    public readonly pkg!: pulumi.Output<string>;
    public readonly pkgFolderPath!: pulumi.Output<string | undefined>;
    public readonly schedule!: pulumi.Output<string | undefined>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly services!: pulumi.Output<string[]>;
    public readonly srcaddr6!: pulumi.Output<string | undefined>;
    public readonly srcaddrs!: pulumi.Output<string[]>;
    public readonly srcintfs!: pulumi.Output<string[]>;
    public readonly status!: pulumi.Output<string | undefined>;
    public readonly tos!: pulumi.Output<string>;
    public readonly tosMask!: pulumi.Output<string>;
    public readonly tosNegate!: pulumi.Output<string>;
    public readonly trafficShaper!: pulumi.Output<string | undefined>;
    public readonly trafficShaperReverse!: pulumi.Output<string | undefined>;
    public readonly trafficType!: pulumi.Output<string>;
    public readonly urlCategories!: pulumi.Output<string[]>;
    public readonly users!: pulumi.Output<string[]>;
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a PackagesFirewallShapingpolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PackagesFirewallShapingpolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PackagesFirewallShapingpolicyArgs | PackagesFirewallShapingpolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PackagesFirewallShapingpolicyState | undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["appCategories"] = state ? state.appCategories : undefined;
            resourceInputs["appGroups"] = state ? state.appGroups : undefined;
            resourceInputs["applications"] = state ? state.applications : undefined;
            resourceInputs["classId"] = state ? state.classId : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["cos"] = state ? state.cos : undefined;
            resourceInputs["cosMask"] = state ? state.cosMask : undefined;
            resourceInputs["diffservForward"] = state ? state.diffservForward : undefined;
            resourceInputs["diffservReverse"] = state ? state.diffservReverse : undefined;
            resourceInputs["diffservcodeForward"] = state ? state.diffservcodeForward : undefined;
            resourceInputs["diffservcodeRev"] = state ? state.diffservcodeRev : undefined;
            resourceInputs["dstaddr6"] = state ? state.dstaddr6 : undefined;
            resourceInputs["dstaddrs"] = state ? state.dstaddrs : undefined;
            resourceInputs["dstintfs"] = state ? state.dstintfs : undefined;
            resourceInputs["fosid"] = state ? state.fosid : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["internetService"] = state ? state.internetService : undefined;
            resourceInputs["internetServiceCustomGroups"] = state ? state.internetServiceCustomGroups : undefined;
            resourceInputs["internetServiceCustoms"] = state ? state.internetServiceCustoms : undefined;
            resourceInputs["internetServiceGroups"] = state ? state.internetServiceGroups : undefined;
            resourceInputs["internetServiceId"] = state ? state.internetServiceId : undefined;
            resourceInputs["internetServiceNames"] = state ? state.internetServiceNames : undefined;
            resourceInputs["internetServiceSrc"] = state ? state.internetServiceSrc : undefined;
            resourceInputs["internetServiceSrcCustom"] = state ? state.internetServiceSrcCustom : undefined;
            resourceInputs["internetServiceSrcCustomGroup"] = state ? state.internetServiceSrcCustomGroup : undefined;
            resourceInputs["internetServiceSrcGroup"] = state ? state.internetServiceSrcGroup : undefined;
            resourceInputs["internetServiceSrcId"] = state ? state.internetServiceSrcId : undefined;
            resourceInputs["internetServiceSrcNames"] = state ? state.internetServiceSrcNames : undefined;
            resourceInputs["ipVersion"] = state ? state.ipVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["perIpShaper"] = state ? state.perIpShaper : undefined;
            resourceInputs["pkg"] = state ? state.pkg : undefined;
            resourceInputs["pkgFolderPath"] = state ? state.pkgFolderPath : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["services"] = state ? state.services : undefined;
            resourceInputs["srcaddr6"] = state ? state.srcaddr6 : undefined;
            resourceInputs["srcaddrs"] = state ? state.srcaddrs : undefined;
            resourceInputs["srcintfs"] = state ? state.srcintfs : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tos"] = state ? state.tos : undefined;
            resourceInputs["tosMask"] = state ? state.tosMask : undefined;
            resourceInputs["tosNegate"] = state ? state.tosNegate : undefined;
            resourceInputs["trafficShaper"] = state ? state.trafficShaper : undefined;
            resourceInputs["trafficShaperReverse"] = state ? state.trafficShaperReverse : undefined;
            resourceInputs["trafficType"] = state ? state.trafficType : undefined;
            resourceInputs["urlCategories"] = state ? state.urlCategories : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as PackagesFirewallShapingpolicyArgs | undefined;
            if ((!args || args.pkg === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pkg'");
            }
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["appCategories"] = args ? args.appCategories : undefined;
            resourceInputs["appGroups"] = args ? args.appGroups : undefined;
            resourceInputs["applications"] = args ? args.applications : undefined;
            resourceInputs["classId"] = args ? args.classId : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["cos"] = args ? args.cos : undefined;
            resourceInputs["cosMask"] = args ? args.cosMask : undefined;
            resourceInputs["diffservForward"] = args ? args.diffservForward : undefined;
            resourceInputs["diffservReverse"] = args ? args.diffservReverse : undefined;
            resourceInputs["diffservcodeForward"] = args ? args.diffservcodeForward : undefined;
            resourceInputs["diffservcodeRev"] = args ? args.diffservcodeRev : undefined;
            resourceInputs["dstaddr6"] = args ? args.dstaddr6 : undefined;
            resourceInputs["dstaddrs"] = args ? args.dstaddrs : undefined;
            resourceInputs["dstintfs"] = args ? args.dstintfs : undefined;
            resourceInputs["fosid"] = args ? args.fosid : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["internetService"] = args ? args.internetService : undefined;
            resourceInputs["internetServiceCustomGroups"] = args ? args.internetServiceCustomGroups : undefined;
            resourceInputs["internetServiceCustoms"] = args ? args.internetServiceCustoms : undefined;
            resourceInputs["internetServiceGroups"] = args ? args.internetServiceGroups : undefined;
            resourceInputs["internetServiceId"] = args ? args.internetServiceId : undefined;
            resourceInputs["internetServiceNames"] = args ? args.internetServiceNames : undefined;
            resourceInputs["internetServiceSrc"] = args ? args.internetServiceSrc : undefined;
            resourceInputs["internetServiceSrcCustom"] = args ? args.internetServiceSrcCustom : undefined;
            resourceInputs["internetServiceSrcCustomGroup"] = args ? args.internetServiceSrcCustomGroup : undefined;
            resourceInputs["internetServiceSrcGroup"] = args ? args.internetServiceSrcGroup : undefined;
            resourceInputs["internetServiceSrcId"] = args ? args.internetServiceSrcId : undefined;
            resourceInputs["internetServiceSrcNames"] = args ? args.internetServiceSrcNames : undefined;
            resourceInputs["ipVersion"] = args ? args.ipVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["perIpShaper"] = args ? args.perIpShaper : undefined;
            resourceInputs["pkg"] = args ? args.pkg : undefined;
            resourceInputs["pkgFolderPath"] = args ? args.pkgFolderPath : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["services"] = args ? args.services : undefined;
            resourceInputs["srcaddr6"] = args ? args.srcaddr6 : undefined;
            resourceInputs["srcaddrs"] = args ? args.srcaddrs : undefined;
            resourceInputs["srcintfs"] = args ? args.srcintfs : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tos"] = args ? args.tos : undefined;
            resourceInputs["tosMask"] = args ? args.tosMask : undefined;
            resourceInputs["tosNegate"] = args ? args.tosNegate : undefined;
            resourceInputs["trafficShaper"] = args ? args.trafficShaper : undefined;
            resourceInputs["trafficShaperReverse"] = args ? args.trafficShaperReverse : undefined;
            resourceInputs["trafficType"] = args ? args.trafficType : undefined;
            resourceInputs["urlCategories"] = args ? args.urlCategories : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PackagesFirewallShapingpolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PackagesFirewallShapingpolicy resources.
 */
export interface PackagesFirewallShapingpolicyState {
    adom?: pulumi.Input<string>;
    appCategories?: pulumi.Input<pulumi.Input<string>[]>;
    appGroups?: pulumi.Input<pulumi.Input<string>[]>;
    applications?: pulumi.Input<pulumi.Input<number>[]>;
    classId?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    cos?: pulumi.Input<string>;
    cosMask?: pulumi.Input<string>;
    diffservForward?: pulumi.Input<string>;
    diffservReverse?: pulumi.Input<string>;
    diffservcodeForward?: pulumi.Input<string>;
    diffservcodeRev?: pulumi.Input<string>;
    dstaddr6?: pulumi.Input<string>;
    dstaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    dstintfs?: pulumi.Input<pulumi.Input<string>[]>;
    fosid?: pulumi.Input<number>;
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    internetService?: pulumi.Input<string>;
    internetServiceCustomGroups?: pulumi.Input<pulumi.Input<string>[]>;
    internetServiceCustoms?: pulumi.Input<pulumi.Input<string>[]>;
    internetServiceGroups?: pulumi.Input<pulumi.Input<string>[]>;
    internetServiceId?: pulumi.Input<string>;
    internetServiceNames?: pulumi.Input<pulumi.Input<string>[]>;
    internetServiceSrc?: pulumi.Input<string>;
    internetServiceSrcCustom?: pulumi.Input<string>;
    internetServiceSrcCustomGroup?: pulumi.Input<string>;
    internetServiceSrcGroup?: pulumi.Input<string>;
    internetServiceSrcId?: pulumi.Input<string>;
    internetServiceSrcNames?: pulumi.Input<pulumi.Input<string>[]>;
    ipVersion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    perIpShaper?: pulumi.Input<string>;
    pkg?: pulumi.Input<string>;
    pkgFolderPath?: pulumi.Input<string>;
    schedule?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    services?: pulumi.Input<pulumi.Input<string>[]>;
    srcaddr6?: pulumi.Input<string>;
    srcaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    srcintfs?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    tos?: pulumi.Input<string>;
    tosMask?: pulumi.Input<string>;
    tosNegate?: pulumi.Input<string>;
    trafficShaper?: pulumi.Input<string>;
    trafficShaperReverse?: pulumi.Input<string>;
    trafficType?: pulumi.Input<string>;
    urlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    users?: pulumi.Input<pulumi.Input<string>[]>;
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PackagesFirewallShapingpolicy resource.
 */
export interface PackagesFirewallShapingpolicyArgs {
    adom?: pulumi.Input<string>;
    appCategories?: pulumi.Input<pulumi.Input<string>[]>;
    appGroups?: pulumi.Input<pulumi.Input<string>[]>;
    applications?: pulumi.Input<pulumi.Input<number>[]>;
    classId?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    cos?: pulumi.Input<string>;
    cosMask?: pulumi.Input<string>;
    diffservForward?: pulumi.Input<string>;
    diffservReverse?: pulumi.Input<string>;
    diffservcodeForward?: pulumi.Input<string>;
    diffservcodeRev?: pulumi.Input<string>;
    dstaddr6?: pulumi.Input<string>;
    dstaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    dstintfs?: pulumi.Input<pulumi.Input<string>[]>;
    fosid?: pulumi.Input<number>;
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    internetService?: pulumi.Input<string>;
    internetServiceCustomGroups?: pulumi.Input<pulumi.Input<string>[]>;
    internetServiceCustoms?: pulumi.Input<pulumi.Input<string>[]>;
    internetServiceGroups?: pulumi.Input<pulumi.Input<string>[]>;
    internetServiceId?: pulumi.Input<string>;
    internetServiceNames?: pulumi.Input<pulumi.Input<string>[]>;
    internetServiceSrc?: pulumi.Input<string>;
    internetServiceSrcCustom?: pulumi.Input<string>;
    internetServiceSrcCustomGroup?: pulumi.Input<string>;
    internetServiceSrcGroup?: pulumi.Input<string>;
    internetServiceSrcId?: pulumi.Input<string>;
    internetServiceSrcNames?: pulumi.Input<pulumi.Input<string>[]>;
    ipVersion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    perIpShaper?: pulumi.Input<string>;
    pkg: pulumi.Input<string>;
    pkgFolderPath?: pulumi.Input<string>;
    schedule?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    services?: pulumi.Input<pulumi.Input<string>[]>;
    srcaddr6?: pulumi.Input<string>;
    srcaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    srcintfs?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    tos?: pulumi.Input<string>;
    tosMask?: pulumi.Input<string>;
    tosNegate?: pulumi.Input<string>;
    trafficShaper?: pulumi.Input<string>;
    trafficShaperReverse?: pulumi.Input<string>;
    trafficType?: pulumi.Input<string>;
    urlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    users?: pulumi.Input<pulumi.Input<string>[]>;
    uuid?: pulumi.Input<string>;
}
