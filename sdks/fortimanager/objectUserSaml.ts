// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ObjectUserSaml extends pulumi.CustomResource {
    /**
     * Get an existing ObjectUserSaml resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectUserSamlState, opts?: pulumi.CustomResourceOptions): ObjectUserSaml {
        return new ObjectUserSaml(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/objectUserSaml:ObjectUserSaml';

    /**
     * Returns true if the given object is an instance of ObjectUserSaml.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectUserSaml {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectUserSaml.__pulumiType;
    }

    public readonly adfsClaim!: pulumi.Output<string>;
    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly authUrl!: pulumi.Output<string | undefined>;
    public readonly cert!: pulumi.Output<string | undefined>;
    public readonly clockTolerance!: pulumi.Output<number>;
    public readonly digestMethod!: pulumi.Output<string>;
    public readonly dynamicMappings!: pulumi.Output<outputs.ObjectUserSamlDynamicMapping[] | undefined>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly entityId!: pulumi.Output<string | undefined>;
    public readonly groupClaimType!: pulumi.Output<string | undefined>;
    public readonly groupName!: pulumi.Output<string | undefined>;
    public readonly idpCert!: pulumi.Output<string | undefined>;
    public readonly idpEntityId!: pulumi.Output<string | undefined>;
    public readonly idpSingleLogoutUrl!: pulumi.Output<string | undefined>;
    public readonly idpSingleSignOnUrl!: pulumi.Output<string | undefined>;
    public readonly limitRelaystate!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly reauth!: pulumi.Output<string>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly singleLogoutUrl!: pulumi.Output<string | undefined>;
    public readonly singleSignOnUrl!: pulumi.Output<string | undefined>;
    public readonly userClaimType!: pulumi.Output<string | undefined>;
    public readonly userName!: pulumi.Output<string | undefined>;

    /**
     * Create a ObjectUserSaml resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ObjectUserSamlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectUserSamlArgs | ObjectUserSamlState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectUserSamlState | undefined;
            resourceInputs["adfsClaim"] = state ? state.adfsClaim : undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["authUrl"] = state ? state.authUrl : undefined;
            resourceInputs["cert"] = state ? state.cert : undefined;
            resourceInputs["clockTolerance"] = state ? state.clockTolerance : undefined;
            resourceInputs["digestMethod"] = state ? state.digestMethod : undefined;
            resourceInputs["dynamicMappings"] = state ? state.dynamicMappings : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["entityId"] = state ? state.entityId : undefined;
            resourceInputs["groupClaimType"] = state ? state.groupClaimType : undefined;
            resourceInputs["groupName"] = state ? state.groupName : undefined;
            resourceInputs["idpCert"] = state ? state.idpCert : undefined;
            resourceInputs["idpEntityId"] = state ? state.idpEntityId : undefined;
            resourceInputs["idpSingleLogoutUrl"] = state ? state.idpSingleLogoutUrl : undefined;
            resourceInputs["idpSingleSignOnUrl"] = state ? state.idpSingleSignOnUrl : undefined;
            resourceInputs["limitRelaystate"] = state ? state.limitRelaystate : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["reauth"] = state ? state.reauth : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["singleLogoutUrl"] = state ? state.singleLogoutUrl : undefined;
            resourceInputs["singleSignOnUrl"] = state ? state.singleSignOnUrl : undefined;
            resourceInputs["userClaimType"] = state ? state.userClaimType : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
        } else {
            const args = argsOrState as ObjectUserSamlArgs | undefined;
            resourceInputs["adfsClaim"] = args ? args.adfsClaim : undefined;
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["authUrl"] = args ? args.authUrl : undefined;
            resourceInputs["cert"] = args ? args.cert : undefined;
            resourceInputs["clockTolerance"] = args ? args.clockTolerance : undefined;
            resourceInputs["digestMethod"] = args ? args.digestMethod : undefined;
            resourceInputs["dynamicMappings"] = args ? args.dynamicMappings : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["entityId"] = args ? args.entityId : undefined;
            resourceInputs["groupClaimType"] = args ? args.groupClaimType : undefined;
            resourceInputs["groupName"] = args ? args.groupName : undefined;
            resourceInputs["idpCert"] = args ? args.idpCert : undefined;
            resourceInputs["idpEntityId"] = args ? args.idpEntityId : undefined;
            resourceInputs["idpSingleLogoutUrl"] = args ? args.idpSingleLogoutUrl : undefined;
            resourceInputs["idpSingleSignOnUrl"] = args ? args.idpSingleSignOnUrl : undefined;
            resourceInputs["limitRelaystate"] = args ? args.limitRelaystate : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["reauth"] = args ? args.reauth : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["singleLogoutUrl"] = args ? args.singleLogoutUrl : undefined;
            resourceInputs["singleSignOnUrl"] = args ? args.singleSignOnUrl : undefined;
            resourceInputs["userClaimType"] = args ? args.userClaimType : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectUserSaml.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectUserSaml resources.
 */
export interface ObjectUserSamlState {
    adfsClaim?: pulumi.Input<string>;
    adom?: pulumi.Input<string>;
    authUrl?: pulumi.Input<string>;
    cert?: pulumi.Input<string>;
    clockTolerance?: pulumi.Input<number>;
    digestMethod?: pulumi.Input<string>;
    dynamicMappings?: pulumi.Input<pulumi.Input<inputs.ObjectUserSamlDynamicMapping>[]>;
    dynamicSortSubtable?: pulumi.Input<string>;
    entityId?: pulumi.Input<string>;
    groupClaimType?: pulumi.Input<string>;
    groupName?: pulumi.Input<string>;
    idpCert?: pulumi.Input<string>;
    idpEntityId?: pulumi.Input<string>;
    idpSingleLogoutUrl?: pulumi.Input<string>;
    idpSingleSignOnUrl?: pulumi.Input<string>;
    limitRelaystate?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    reauth?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    singleLogoutUrl?: pulumi.Input<string>;
    singleSignOnUrl?: pulumi.Input<string>;
    userClaimType?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectUserSaml resource.
 */
export interface ObjectUserSamlArgs {
    adfsClaim?: pulumi.Input<string>;
    adom?: pulumi.Input<string>;
    authUrl?: pulumi.Input<string>;
    cert?: pulumi.Input<string>;
    clockTolerance?: pulumi.Input<number>;
    digestMethod?: pulumi.Input<string>;
    dynamicMappings?: pulumi.Input<pulumi.Input<inputs.ObjectUserSamlDynamicMapping>[]>;
    dynamicSortSubtable?: pulumi.Input<string>;
    entityId?: pulumi.Input<string>;
    groupClaimType?: pulumi.Input<string>;
    groupName?: pulumi.Input<string>;
    idpCert?: pulumi.Input<string>;
    idpEntityId?: pulumi.Input<string>;
    idpSingleLogoutUrl?: pulumi.Input<string>;
    idpSingleSignOnUrl?: pulumi.Input<string>;
    limitRelaystate?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    reauth?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    singleLogoutUrl?: pulumi.Input<string>;
    singleSignOnUrl?: pulumi.Input<string>;
    userClaimType?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
}
