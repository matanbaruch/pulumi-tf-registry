// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SystemBackupAllsettings extends pulumi.CustomResource {
    /**
     * Get an existing SystemBackupAllsettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemBackupAllsettingsState, opts?: pulumi.CustomResourceOptions): SystemBackupAllsettings {
        return new SystemBackupAllsettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/systemBackupAllsettings:SystemBackupAllsettings';

    /**
     * Returns true if the given object is an instance of SystemBackupAllsettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemBackupAllsettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemBackupAllsettings.__pulumiType;
    }

    public readonly cert!: pulumi.Output<string | undefined>;
    public readonly crptpasswds!: pulumi.Output<string[]>;
    public readonly directory!: pulumi.Output<string | undefined>;
    public readonly passwds!: pulumi.Output<string[]>;
    public readonly protocol!: pulumi.Output<string>;
    public readonly server!: pulumi.Output<string | undefined>;
    public readonly status!: pulumi.Output<string>;
    public readonly time!: pulumi.Output<string | undefined>;
    public readonly user!: pulumi.Output<string>;
    public readonly weekDays!: pulumi.Output<string[]>;

    /**
     * Create a SystemBackupAllsettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemBackupAllsettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemBackupAllsettingsArgs | SystemBackupAllsettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemBackupAllsettingsState | undefined;
            resourceInputs["cert"] = state ? state.cert : undefined;
            resourceInputs["crptpasswds"] = state ? state.crptpasswds : undefined;
            resourceInputs["directory"] = state ? state.directory : undefined;
            resourceInputs["passwds"] = state ? state.passwds : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["time"] = state ? state.time : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
            resourceInputs["weekDays"] = state ? state.weekDays : undefined;
        } else {
            const args = argsOrState as SystemBackupAllsettingsArgs | undefined;
            resourceInputs["cert"] = args ? args.cert : undefined;
            resourceInputs["crptpasswds"] = args?.crptpasswds ? pulumi.secret(args.crptpasswds) : undefined;
            resourceInputs["directory"] = args ? args.directory : undefined;
            resourceInputs["passwds"] = args?.passwds ? pulumi.secret(args.passwds) : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["time"] = args ? args.time : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
            resourceInputs["weekDays"] = args ? args.weekDays : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["crptpasswds", "passwds"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SystemBackupAllsettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemBackupAllsettings resources.
 */
export interface SystemBackupAllsettingsState {
    cert?: pulumi.Input<string>;
    crptpasswds?: pulumi.Input<pulumi.Input<string>[]>;
    directory?: pulumi.Input<string>;
    passwds?: pulumi.Input<pulumi.Input<string>[]>;
    protocol?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    time?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
    weekDays?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a SystemBackupAllsettings resource.
 */
export interface SystemBackupAllsettingsArgs {
    cert?: pulumi.Input<string>;
    crptpasswds?: pulumi.Input<pulumi.Input<string>[]>;
    directory?: pulumi.Input<string>;
    passwds?: pulumi.Input<pulumi.Input<string>[]>;
    protocol?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    time?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
    weekDays?: pulumi.Input<pulumi.Input<string>[]>;
}
