// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ObjectSwitchcontrollerManagedswitchPorts extends pulumi.CustomResource {
    /**
     * Get an existing ObjectSwitchcontrollerManagedswitchPorts resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectSwitchcontrollerManagedswitchPortsState, opts?: pulumi.CustomResourceOptions): ObjectSwitchcontrollerManagedswitchPorts {
        return new ObjectSwitchcontrollerManagedswitchPorts(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/objectSwitchcontrollerManagedswitchPorts:ObjectSwitchcontrollerManagedswitchPorts';

    /**
     * Returns true if the given object is an instance of ObjectSwitchcontrollerManagedswitchPorts.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectSwitchcontrollerManagedswitchPorts {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectSwitchcontrollerManagedswitchPorts.__pulumiType;
    }

    public readonly accessMode!: pulumi.Output<string>;
    public readonly aclGroups!: pulumi.Output<string[]>;
    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly aggregatorMode!: pulumi.Output<string | undefined>;
    public readonly allowedVlans!: pulumi.Output<string | undefined>;
    public readonly allowedVlansAll!: pulumi.Output<string>;
    public readonly arpInspectionTrust!: pulumi.Output<string>;
    public readonly authenticatedPort!: pulumi.Output<number | undefined>;
    public readonly bundle!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly dhcpSnoopOption82Overrides!: pulumi.Output<outputs.ObjectSwitchcontrollerManagedswitchPortsDhcpSnoopOption82Override[] | undefined>;
    public readonly dhcpSnoopOption82Trust!: pulumi.Output<string>;
    public readonly dhcpSnooping!: pulumi.Output<string>;
    public readonly discardMode!: pulumi.Output<string>;
    public readonly dslProfile!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly edgePort!: pulumi.Output<string>;
    public readonly encryptedPort!: pulumi.Output<number | undefined>;
    public readonly fecCapable!: pulumi.Output<number | undefined>;
    public readonly fecState!: pulumi.Output<string>;
    public readonly flapDuration!: pulumi.Output<number>;
    public readonly flapRate!: pulumi.Output<number>;
    public readonly flapTimeout!: pulumi.Output<number | undefined>;
    public readonly flapguard!: pulumi.Output<string>;
    public readonly flowControl!: pulumi.Output<string>;
    public readonly fortiswitchAcls!: pulumi.Output<number[]>;
    public readonly igmpSnooping!: pulumi.Output<string | undefined>;
    public readonly igmpSnoopingFloodReports!: pulumi.Output<string>;
    public readonly igmpsFloodReports!: pulumi.Output<string>;
    public readonly igmpsFloodTraffic!: pulumi.Output<string>;
    public readonly interfaceTags!: pulumi.Output<string | undefined>;
    public readonly ipSourceGuard!: pulumi.Output<string>;
    public readonly islPeerDeviceSn!: pulumi.Output<string | undefined>;
    public readonly lacpSpeed!: pulumi.Output<string>;
    public readonly learningLimit!: pulumi.Output<number | undefined>;
    public readonly linkStatus!: pulumi.Output<string>;
    public readonly lldpProfile!: pulumi.Output<string>;
    public readonly lldpStatus!: pulumi.Output<string>;
    public readonly loopGuard!: pulumi.Output<string>;
    public readonly loopGuardTimeout!: pulumi.Output<number>;
    public readonly managedSwitch!: pulumi.Output<string>;
    public readonly matchedDppIntfTags!: pulumi.Output<string | undefined>;
    public readonly matchedDppPolicy!: pulumi.Output<string | undefined>;
    public readonly maxBundle!: pulumi.Output<number | undefined>;
    public readonly mcastSnoopingFloodTraffic!: pulumi.Output<string>;
    public readonly mclag!: pulumi.Output<string | undefined>;
    public readonly mclagIclPort!: pulumi.Output<number | undefined>;
    public readonly mediaType!: pulumi.Output<string | undefined>;
    public readonly memberWithdrawalBehavior!: pulumi.Output<string>;
    public readonly members!: pulumi.Output<string[]>;
    public readonly minBundle!: pulumi.Output<number | undefined>;
    public readonly mode!: pulumi.Output<string | undefined>;
    public readonly p2pPort!: pulumi.Output<number | undefined>;
    public readonly packetSampleRate!: pulumi.Output<number | undefined>;
    public readonly packetSampler!: pulumi.Output<string>;
    public readonly pauseMeter!: pulumi.Output<number | undefined>;
    public readonly pauseMeterResume!: pulumi.Output<string | undefined>;
    public readonly poeMaxPower!: pulumi.Output<string | undefined>;
    public readonly poeModeBtCabable!: pulumi.Output<number | undefined>;
    public readonly poePortMode!: pulumi.Output<string>;
    public readonly poePortPower!: pulumi.Output<string>;
    public readonly poePortPriority!: pulumi.Output<string>;
    public readonly poePreStandardDetection!: pulumi.Output<string | undefined>;
    public readonly poeStandard!: pulumi.Output<string | undefined>;
    public readonly poeStatus!: pulumi.Output<string | undefined>;
    public readonly portName!: pulumi.Output<string | undefined>;
    public readonly portOwner!: pulumi.Output<string | undefined>;
    public readonly portPolicy!: pulumi.Output<string | undefined>;
    public readonly portSecurityPolicy!: pulumi.Output<string | undefined>;
    public readonly portSelectionCriteria!: pulumi.Output<string | undefined>;
    public readonly ptpStatus!: pulumi.Output<string>;
    public readonly qosPolicy!: pulumi.Output<string>;
    public readonly restrictedAuthPort!: pulumi.Output<number | undefined>;
    public readonly rpvstPort!: pulumi.Output<string>;
    public readonly sampleDirection!: pulumi.Output<string | undefined>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly sflowCounterInterval!: pulumi.Output<number | undefined>;
    public readonly sflowSampleRate!: pulumi.Output<number | undefined>;
    public readonly sflowSampler!: pulumi.Output<string | undefined>;
    public readonly status!: pulumi.Output<string>;
    public readonly stickyMac!: pulumi.Output<string>;
    public readonly stpBpduGuard!: pulumi.Output<string>;
    public readonly stpBpduGuardTimeout!: pulumi.Output<number | undefined>;
    public readonly stpRootGuard!: pulumi.Output<string>;
    public readonly stpState!: pulumi.Output<string>;
    public readonly trunkMember!: pulumi.Output<number | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly untaggedVlans!: pulumi.Output<string | undefined>;
    public readonly vlan!: pulumi.Output<string | undefined>;

    /**
     * Create a ObjectSwitchcontrollerManagedswitchPorts resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObjectSwitchcontrollerManagedswitchPortsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectSwitchcontrollerManagedswitchPortsArgs | ObjectSwitchcontrollerManagedswitchPortsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectSwitchcontrollerManagedswitchPortsState | undefined;
            resourceInputs["accessMode"] = state ? state.accessMode : undefined;
            resourceInputs["aclGroups"] = state ? state.aclGroups : undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["aggregatorMode"] = state ? state.aggregatorMode : undefined;
            resourceInputs["allowedVlans"] = state ? state.allowedVlans : undefined;
            resourceInputs["allowedVlansAll"] = state ? state.allowedVlansAll : undefined;
            resourceInputs["arpInspectionTrust"] = state ? state.arpInspectionTrust : undefined;
            resourceInputs["authenticatedPort"] = state ? state.authenticatedPort : undefined;
            resourceInputs["bundle"] = state ? state.bundle : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dhcpSnoopOption82Overrides"] = state ? state.dhcpSnoopOption82Overrides : undefined;
            resourceInputs["dhcpSnoopOption82Trust"] = state ? state.dhcpSnoopOption82Trust : undefined;
            resourceInputs["dhcpSnooping"] = state ? state.dhcpSnooping : undefined;
            resourceInputs["discardMode"] = state ? state.discardMode : undefined;
            resourceInputs["dslProfile"] = state ? state.dslProfile : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["edgePort"] = state ? state.edgePort : undefined;
            resourceInputs["encryptedPort"] = state ? state.encryptedPort : undefined;
            resourceInputs["fecCapable"] = state ? state.fecCapable : undefined;
            resourceInputs["fecState"] = state ? state.fecState : undefined;
            resourceInputs["flapDuration"] = state ? state.flapDuration : undefined;
            resourceInputs["flapRate"] = state ? state.flapRate : undefined;
            resourceInputs["flapTimeout"] = state ? state.flapTimeout : undefined;
            resourceInputs["flapguard"] = state ? state.flapguard : undefined;
            resourceInputs["flowControl"] = state ? state.flowControl : undefined;
            resourceInputs["fortiswitchAcls"] = state ? state.fortiswitchAcls : undefined;
            resourceInputs["igmpSnooping"] = state ? state.igmpSnooping : undefined;
            resourceInputs["igmpSnoopingFloodReports"] = state ? state.igmpSnoopingFloodReports : undefined;
            resourceInputs["igmpsFloodReports"] = state ? state.igmpsFloodReports : undefined;
            resourceInputs["igmpsFloodTraffic"] = state ? state.igmpsFloodTraffic : undefined;
            resourceInputs["interfaceTags"] = state ? state.interfaceTags : undefined;
            resourceInputs["ipSourceGuard"] = state ? state.ipSourceGuard : undefined;
            resourceInputs["islPeerDeviceSn"] = state ? state.islPeerDeviceSn : undefined;
            resourceInputs["lacpSpeed"] = state ? state.lacpSpeed : undefined;
            resourceInputs["learningLimit"] = state ? state.learningLimit : undefined;
            resourceInputs["linkStatus"] = state ? state.linkStatus : undefined;
            resourceInputs["lldpProfile"] = state ? state.lldpProfile : undefined;
            resourceInputs["lldpStatus"] = state ? state.lldpStatus : undefined;
            resourceInputs["loopGuard"] = state ? state.loopGuard : undefined;
            resourceInputs["loopGuardTimeout"] = state ? state.loopGuardTimeout : undefined;
            resourceInputs["managedSwitch"] = state ? state.managedSwitch : undefined;
            resourceInputs["matchedDppIntfTags"] = state ? state.matchedDppIntfTags : undefined;
            resourceInputs["matchedDppPolicy"] = state ? state.matchedDppPolicy : undefined;
            resourceInputs["maxBundle"] = state ? state.maxBundle : undefined;
            resourceInputs["mcastSnoopingFloodTraffic"] = state ? state.mcastSnoopingFloodTraffic : undefined;
            resourceInputs["mclag"] = state ? state.mclag : undefined;
            resourceInputs["mclagIclPort"] = state ? state.mclagIclPort : undefined;
            resourceInputs["mediaType"] = state ? state.mediaType : undefined;
            resourceInputs["memberWithdrawalBehavior"] = state ? state.memberWithdrawalBehavior : undefined;
            resourceInputs["members"] = state ? state.members : undefined;
            resourceInputs["minBundle"] = state ? state.minBundle : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["p2pPort"] = state ? state.p2pPort : undefined;
            resourceInputs["packetSampleRate"] = state ? state.packetSampleRate : undefined;
            resourceInputs["packetSampler"] = state ? state.packetSampler : undefined;
            resourceInputs["pauseMeter"] = state ? state.pauseMeter : undefined;
            resourceInputs["pauseMeterResume"] = state ? state.pauseMeterResume : undefined;
            resourceInputs["poeMaxPower"] = state ? state.poeMaxPower : undefined;
            resourceInputs["poeModeBtCabable"] = state ? state.poeModeBtCabable : undefined;
            resourceInputs["poePortMode"] = state ? state.poePortMode : undefined;
            resourceInputs["poePortPower"] = state ? state.poePortPower : undefined;
            resourceInputs["poePortPriority"] = state ? state.poePortPriority : undefined;
            resourceInputs["poePreStandardDetection"] = state ? state.poePreStandardDetection : undefined;
            resourceInputs["poeStandard"] = state ? state.poeStandard : undefined;
            resourceInputs["poeStatus"] = state ? state.poeStatus : undefined;
            resourceInputs["portName"] = state ? state.portName : undefined;
            resourceInputs["portOwner"] = state ? state.portOwner : undefined;
            resourceInputs["portPolicy"] = state ? state.portPolicy : undefined;
            resourceInputs["portSecurityPolicy"] = state ? state.portSecurityPolicy : undefined;
            resourceInputs["portSelectionCriteria"] = state ? state.portSelectionCriteria : undefined;
            resourceInputs["ptpStatus"] = state ? state.ptpStatus : undefined;
            resourceInputs["qosPolicy"] = state ? state.qosPolicy : undefined;
            resourceInputs["restrictedAuthPort"] = state ? state.restrictedAuthPort : undefined;
            resourceInputs["rpvstPort"] = state ? state.rpvstPort : undefined;
            resourceInputs["sampleDirection"] = state ? state.sampleDirection : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["sflowCounterInterval"] = state ? state.sflowCounterInterval : undefined;
            resourceInputs["sflowSampleRate"] = state ? state.sflowSampleRate : undefined;
            resourceInputs["sflowSampler"] = state ? state.sflowSampler : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["stickyMac"] = state ? state.stickyMac : undefined;
            resourceInputs["stpBpduGuard"] = state ? state.stpBpduGuard : undefined;
            resourceInputs["stpBpduGuardTimeout"] = state ? state.stpBpduGuardTimeout : undefined;
            resourceInputs["stpRootGuard"] = state ? state.stpRootGuard : undefined;
            resourceInputs["stpState"] = state ? state.stpState : undefined;
            resourceInputs["trunkMember"] = state ? state.trunkMember : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["untaggedVlans"] = state ? state.untaggedVlans : undefined;
            resourceInputs["vlan"] = state ? state.vlan : undefined;
        } else {
            const args = argsOrState as ObjectSwitchcontrollerManagedswitchPortsArgs | undefined;
            if ((!args || args.managedSwitch === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managedSwitch'");
            }
            resourceInputs["accessMode"] = args ? args.accessMode : undefined;
            resourceInputs["aclGroups"] = args ? args.aclGroups : undefined;
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["aggregatorMode"] = args ? args.aggregatorMode : undefined;
            resourceInputs["allowedVlans"] = args ? args.allowedVlans : undefined;
            resourceInputs["allowedVlansAll"] = args ? args.allowedVlansAll : undefined;
            resourceInputs["arpInspectionTrust"] = args ? args.arpInspectionTrust : undefined;
            resourceInputs["authenticatedPort"] = args ? args.authenticatedPort : undefined;
            resourceInputs["bundle"] = args ? args.bundle : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dhcpSnoopOption82Overrides"] = args ? args.dhcpSnoopOption82Overrides : undefined;
            resourceInputs["dhcpSnoopOption82Trust"] = args ? args.dhcpSnoopOption82Trust : undefined;
            resourceInputs["dhcpSnooping"] = args ? args.dhcpSnooping : undefined;
            resourceInputs["discardMode"] = args ? args.discardMode : undefined;
            resourceInputs["dslProfile"] = args ? args.dslProfile : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["edgePort"] = args ? args.edgePort : undefined;
            resourceInputs["encryptedPort"] = args ? args.encryptedPort : undefined;
            resourceInputs["fecCapable"] = args ? args.fecCapable : undefined;
            resourceInputs["fecState"] = args ? args.fecState : undefined;
            resourceInputs["flapDuration"] = args ? args.flapDuration : undefined;
            resourceInputs["flapRate"] = args ? args.flapRate : undefined;
            resourceInputs["flapTimeout"] = args ? args.flapTimeout : undefined;
            resourceInputs["flapguard"] = args ? args.flapguard : undefined;
            resourceInputs["flowControl"] = args ? args.flowControl : undefined;
            resourceInputs["fortiswitchAcls"] = args ? args.fortiswitchAcls : undefined;
            resourceInputs["igmpSnooping"] = args ? args.igmpSnooping : undefined;
            resourceInputs["igmpSnoopingFloodReports"] = args ? args.igmpSnoopingFloodReports : undefined;
            resourceInputs["igmpsFloodReports"] = args ? args.igmpsFloodReports : undefined;
            resourceInputs["igmpsFloodTraffic"] = args ? args.igmpsFloodTraffic : undefined;
            resourceInputs["interfaceTags"] = args ? args.interfaceTags : undefined;
            resourceInputs["ipSourceGuard"] = args ? args.ipSourceGuard : undefined;
            resourceInputs["islPeerDeviceSn"] = args ? args.islPeerDeviceSn : undefined;
            resourceInputs["lacpSpeed"] = args ? args.lacpSpeed : undefined;
            resourceInputs["learningLimit"] = args ? args.learningLimit : undefined;
            resourceInputs["linkStatus"] = args ? args.linkStatus : undefined;
            resourceInputs["lldpProfile"] = args ? args.lldpProfile : undefined;
            resourceInputs["lldpStatus"] = args ? args.lldpStatus : undefined;
            resourceInputs["loopGuard"] = args ? args.loopGuard : undefined;
            resourceInputs["loopGuardTimeout"] = args ? args.loopGuardTimeout : undefined;
            resourceInputs["managedSwitch"] = args ? args.managedSwitch : undefined;
            resourceInputs["matchedDppIntfTags"] = args ? args.matchedDppIntfTags : undefined;
            resourceInputs["matchedDppPolicy"] = args ? args.matchedDppPolicy : undefined;
            resourceInputs["maxBundle"] = args ? args.maxBundle : undefined;
            resourceInputs["mcastSnoopingFloodTraffic"] = args ? args.mcastSnoopingFloodTraffic : undefined;
            resourceInputs["mclag"] = args ? args.mclag : undefined;
            resourceInputs["mclagIclPort"] = args ? args.mclagIclPort : undefined;
            resourceInputs["mediaType"] = args ? args.mediaType : undefined;
            resourceInputs["memberWithdrawalBehavior"] = args ? args.memberWithdrawalBehavior : undefined;
            resourceInputs["members"] = args ? args.members : undefined;
            resourceInputs["minBundle"] = args ? args.minBundle : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["p2pPort"] = args ? args.p2pPort : undefined;
            resourceInputs["packetSampleRate"] = args ? args.packetSampleRate : undefined;
            resourceInputs["packetSampler"] = args ? args.packetSampler : undefined;
            resourceInputs["pauseMeter"] = args ? args.pauseMeter : undefined;
            resourceInputs["pauseMeterResume"] = args ? args.pauseMeterResume : undefined;
            resourceInputs["poeMaxPower"] = args ? args.poeMaxPower : undefined;
            resourceInputs["poeModeBtCabable"] = args ? args.poeModeBtCabable : undefined;
            resourceInputs["poePortMode"] = args ? args.poePortMode : undefined;
            resourceInputs["poePortPower"] = args ? args.poePortPower : undefined;
            resourceInputs["poePortPriority"] = args ? args.poePortPriority : undefined;
            resourceInputs["poePreStandardDetection"] = args ? args.poePreStandardDetection : undefined;
            resourceInputs["poeStandard"] = args ? args.poeStandard : undefined;
            resourceInputs["poeStatus"] = args ? args.poeStatus : undefined;
            resourceInputs["portName"] = args ? args.portName : undefined;
            resourceInputs["portOwner"] = args ? args.portOwner : undefined;
            resourceInputs["portPolicy"] = args ? args.portPolicy : undefined;
            resourceInputs["portSecurityPolicy"] = args ? args.portSecurityPolicy : undefined;
            resourceInputs["portSelectionCriteria"] = args ? args.portSelectionCriteria : undefined;
            resourceInputs["ptpStatus"] = args ? args.ptpStatus : undefined;
            resourceInputs["qosPolicy"] = args ? args.qosPolicy : undefined;
            resourceInputs["restrictedAuthPort"] = args ? args.restrictedAuthPort : undefined;
            resourceInputs["rpvstPort"] = args ? args.rpvstPort : undefined;
            resourceInputs["sampleDirection"] = args ? args.sampleDirection : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["sflowCounterInterval"] = args ? args.sflowCounterInterval : undefined;
            resourceInputs["sflowSampleRate"] = args ? args.sflowSampleRate : undefined;
            resourceInputs["sflowSampler"] = args ? args.sflowSampler : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["stickyMac"] = args ? args.stickyMac : undefined;
            resourceInputs["stpBpduGuard"] = args ? args.stpBpduGuard : undefined;
            resourceInputs["stpBpduGuardTimeout"] = args ? args.stpBpduGuardTimeout : undefined;
            resourceInputs["stpRootGuard"] = args ? args.stpRootGuard : undefined;
            resourceInputs["stpState"] = args ? args.stpState : undefined;
            resourceInputs["trunkMember"] = args ? args.trunkMember : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["untaggedVlans"] = args ? args.untaggedVlans : undefined;
            resourceInputs["vlan"] = args ? args.vlan : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectSwitchcontrollerManagedswitchPorts.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectSwitchcontrollerManagedswitchPorts resources.
 */
export interface ObjectSwitchcontrollerManagedswitchPortsState {
    accessMode?: pulumi.Input<string>;
    aclGroups?: pulumi.Input<pulumi.Input<string>[]>;
    adom?: pulumi.Input<string>;
    aggregatorMode?: pulumi.Input<string>;
    allowedVlans?: pulumi.Input<string>;
    allowedVlansAll?: pulumi.Input<string>;
    arpInspectionTrust?: pulumi.Input<string>;
    authenticatedPort?: pulumi.Input<number>;
    bundle?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dhcpSnoopOption82Overrides?: pulumi.Input<pulumi.Input<inputs.ObjectSwitchcontrollerManagedswitchPortsDhcpSnoopOption82Override>[]>;
    dhcpSnoopOption82Trust?: pulumi.Input<string>;
    dhcpSnooping?: pulumi.Input<string>;
    discardMode?: pulumi.Input<string>;
    dslProfile?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    edgePort?: pulumi.Input<string>;
    encryptedPort?: pulumi.Input<number>;
    fecCapable?: pulumi.Input<number>;
    fecState?: pulumi.Input<string>;
    flapDuration?: pulumi.Input<number>;
    flapRate?: pulumi.Input<number>;
    flapTimeout?: pulumi.Input<number>;
    flapguard?: pulumi.Input<string>;
    flowControl?: pulumi.Input<string>;
    fortiswitchAcls?: pulumi.Input<pulumi.Input<number>[]>;
    igmpSnooping?: pulumi.Input<string>;
    igmpSnoopingFloodReports?: pulumi.Input<string>;
    igmpsFloodReports?: pulumi.Input<string>;
    igmpsFloodTraffic?: pulumi.Input<string>;
    interfaceTags?: pulumi.Input<string>;
    ipSourceGuard?: pulumi.Input<string>;
    islPeerDeviceSn?: pulumi.Input<string>;
    lacpSpeed?: pulumi.Input<string>;
    learningLimit?: pulumi.Input<number>;
    linkStatus?: pulumi.Input<string>;
    lldpProfile?: pulumi.Input<string>;
    lldpStatus?: pulumi.Input<string>;
    loopGuard?: pulumi.Input<string>;
    loopGuardTimeout?: pulumi.Input<number>;
    managedSwitch?: pulumi.Input<string>;
    matchedDppIntfTags?: pulumi.Input<string>;
    matchedDppPolicy?: pulumi.Input<string>;
    maxBundle?: pulumi.Input<number>;
    mcastSnoopingFloodTraffic?: pulumi.Input<string>;
    mclag?: pulumi.Input<string>;
    mclagIclPort?: pulumi.Input<number>;
    mediaType?: pulumi.Input<string>;
    memberWithdrawalBehavior?: pulumi.Input<string>;
    members?: pulumi.Input<pulumi.Input<string>[]>;
    minBundle?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    p2pPort?: pulumi.Input<number>;
    packetSampleRate?: pulumi.Input<number>;
    packetSampler?: pulumi.Input<string>;
    pauseMeter?: pulumi.Input<number>;
    pauseMeterResume?: pulumi.Input<string>;
    poeMaxPower?: pulumi.Input<string>;
    poeModeBtCabable?: pulumi.Input<number>;
    poePortMode?: pulumi.Input<string>;
    poePortPower?: pulumi.Input<string>;
    poePortPriority?: pulumi.Input<string>;
    poePreStandardDetection?: pulumi.Input<string>;
    poeStandard?: pulumi.Input<string>;
    poeStatus?: pulumi.Input<string>;
    portName?: pulumi.Input<string>;
    portOwner?: pulumi.Input<string>;
    portPolicy?: pulumi.Input<string>;
    portSecurityPolicy?: pulumi.Input<string>;
    portSelectionCriteria?: pulumi.Input<string>;
    ptpStatus?: pulumi.Input<string>;
    qosPolicy?: pulumi.Input<string>;
    restrictedAuthPort?: pulumi.Input<number>;
    rpvstPort?: pulumi.Input<string>;
    sampleDirection?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    sflowCounterInterval?: pulumi.Input<number>;
    sflowSampleRate?: pulumi.Input<number>;
    sflowSampler?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    stickyMac?: pulumi.Input<string>;
    stpBpduGuard?: pulumi.Input<string>;
    stpBpduGuardTimeout?: pulumi.Input<number>;
    stpRootGuard?: pulumi.Input<string>;
    stpState?: pulumi.Input<string>;
    trunkMember?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    untaggedVlans?: pulumi.Input<string>;
    vlan?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectSwitchcontrollerManagedswitchPorts resource.
 */
export interface ObjectSwitchcontrollerManagedswitchPortsArgs {
    accessMode?: pulumi.Input<string>;
    aclGroups?: pulumi.Input<pulumi.Input<string>[]>;
    adom?: pulumi.Input<string>;
    aggregatorMode?: pulumi.Input<string>;
    allowedVlans?: pulumi.Input<string>;
    allowedVlansAll?: pulumi.Input<string>;
    arpInspectionTrust?: pulumi.Input<string>;
    authenticatedPort?: pulumi.Input<number>;
    bundle?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dhcpSnoopOption82Overrides?: pulumi.Input<pulumi.Input<inputs.ObjectSwitchcontrollerManagedswitchPortsDhcpSnoopOption82Override>[]>;
    dhcpSnoopOption82Trust?: pulumi.Input<string>;
    dhcpSnooping?: pulumi.Input<string>;
    discardMode?: pulumi.Input<string>;
    dslProfile?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    edgePort?: pulumi.Input<string>;
    encryptedPort?: pulumi.Input<number>;
    fecCapable?: pulumi.Input<number>;
    fecState?: pulumi.Input<string>;
    flapDuration?: pulumi.Input<number>;
    flapRate?: pulumi.Input<number>;
    flapTimeout?: pulumi.Input<number>;
    flapguard?: pulumi.Input<string>;
    flowControl?: pulumi.Input<string>;
    fortiswitchAcls?: pulumi.Input<pulumi.Input<number>[]>;
    igmpSnooping?: pulumi.Input<string>;
    igmpSnoopingFloodReports?: pulumi.Input<string>;
    igmpsFloodReports?: pulumi.Input<string>;
    igmpsFloodTraffic?: pulumi.Input<string>;
    interfaceTags?: pulumi.Input<string>;
    ipSourceGuard?: pulumi.Input<string>;
    islPeerDeviceSn?: pulumi.Input<string>;
    lacpSpeed?: pulumi.Input<string>;
    learningLimit?: pulumi.Input<number>;
    linkStatus?: pulumi.Input<string>;
    lldpProfile?: pulumi.Input<string>;
    lldpStatus?: pulumi.Input<string>;
    loopGuard?: pulumi.Input<string>;
    loopGuardTimeout?: pulumi.Input<number>;
    managedSwitch: pulumi.Input<string>;
    matchedDppIntfTags?: pulumi.Input<string>;
    matchedDppPolicy?: pulumi.Input<string>;
    maxBundle?: pulumi.Input<number>;
    mcastSnoopingFloodTraffic?: pulumi.Input<string>;
    mclag?: pulumi.Input<string>;
    mclagIclPort?: pulumi.Input<number>;
    mediaType?: pulumi.Input<string>;
    memberWithdrawalBehavior?: pulumi.Input<string>;
    members?: pulumi.Input<pulumi.Input<string>[]>;
    minBundle?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    p2pPort?: pulumi.Input<number>;
    packetSampleRate?: pulumi.Input<number>;
    packetSampler?: pulumi.Input<string>;
    pauseMeter?: pulumi.Input<number>;
    pauseMeterResume?: pulumi.Input<string>;
    poeMaxPower?: pulumi.Input<string>;
    poeModeBtCabable?: pulumi.Input<number>;
    poePortMode?: pulumi.Input<string>;
    poePortPower?: pulumi.Input<string>;
    poePortPriority?: pulumi.Input<string>;
    poePreStandardDetection?: pulumi.Input<string>;
    poeStandard?: pulumi.Input<string>;
    poeStatus?: pulumi.Input<string>;
    portName?: pulumi.Input<string>;
    portOwner?: pulumi.Input<string>;
    portPolicy?: pulumi.Input<string>;
    portSecurityPolicy?: pulumi.Input<string>;
    portSelectionCriteria?: pulumi.Input<string>;
    ptpStatus?: pulumi.Input<string>;
    qosPolicy?: pulumi.Input<string>;
    restrictedAuthPort?: pulumi.Input<number>;
    rpvstPort?: pulumi.Input<string>;
    sampleDirection?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    sflowCounterInterval?: pulumi.Input<number>;
    sflowSampleRate?: pulumi.Input<number>;
    sflowSampler?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    stickyMac?: pulumi.Input<string>;
    stpBpduGuard?: pulumi.Input<string>;
    stpBpduGuardTimeout?: pulumi.Input<number>;
    stpRootGuard?: pulumi.Input<string>;
    stpState?: pulumi.Input<string>;
    trunkMember?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    untaggedVlans?: pulumi.Input<string>;
    vlan?: pulumi.Input<string>;
}
