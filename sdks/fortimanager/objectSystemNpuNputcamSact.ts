// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ObjectSystemNpuNputcamSact extends pulumi.CustomResource {
    /**
     * Get an existing ObjectSystemNpuNputcamSact resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectSystemNpuNputcamSactState, opts?: pulumi.CustomResourceOptions): ObjectSystemNpuNputcamSact {
        return new ObjectSystemNpuNputcamSact(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/objectSystemNpuNputcamSact:ObjectSystemNpuNputcamSact';

    /**
     * Returns true if the given object is an instance of ObjectSystemNpuNputcamSact.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectSystemNpuNputcamSact {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectSystemNpuNputcamSact.__pulumiType;
    }

    public readonly act!: pulumi.Output<number | undefined>;
    public readonly actV!: pulumi.Output<string>;
    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly bmproc!: pulumi.Output<number | undefined>;
    public readonly bmprocV!: pulumi.Output<string>;
    public readonly dfLif!: pulumi.Output<number | undefined>;
    public readonly dfLifV!: pulumi.Output<string>;
    public readonly dfr!: pulumi.Output<number | undefined>;
    public readonly dfrV!: pulumi.Output<string>;
    public readonly dmacSkip!: pulumi.Output<number | undefined>;
    public readonly dmacSkipV!: pulumi.Output<string>;
    public readonly dosen!: pulumi.Output<number | undefined>;
    public readonly dosenV!: pulumi.Output<string>;
    public readonly espffProc!: pulumi.Output<number | undefined>;
    public readonly espffProcV!: pulumi.Output<string>;
    public readonly etypePid!: pulumi.Output<number | undefined>;
    public readonly etypePidV!: pulumi.Output<string>;
    public readonly fragProc!: pulumi.Output<number | undefined>;
    public readonly fragProcV!: pulumi.Output<string>;
    public readonly fwd!: pulumi.Output<number | undefined>;
    public readonly fwdLif!: pulumi.Output<number | undefined>;
    public readonly fwdLifV!: pulumi.Output<string>;
    public readonly fwdTvid!: pulumi.Output<number | undefined>;
    public readonly fwdTvidV!: pulumi.Output<string>;
    public readonly fwdV!: pulumi.Output<string>;
    public readonly icpen!: pulumi.Output<number | undefined>;
    public readonly icpenV!: pulumi.Output<string>;
    public readonly igmpMldSnp!: pulumi.Output<number | undefined>;
    public readonly igmpMldSnpV!: pulumi.Output<string>;
    public readonly learn!: pulumi.Output<number | undefined>;
    public readonly learnV!: pulumi.Output<string>;
    public readonly mSrhCtrl!: pulumi.Output<number | undefined>;
    public readonly mSrhCtrlV!: pulumi.Output<string>;
    public readonly macId!: pulumi.Output<number | undefined>;
    public readonly macIdV!: pulumi.Output<string>;
    public readonly mss!: pulumi.Output<number | undefined>;
    public readonly mssV!: pulumi.Output<string>;
    public readonly npuTcam!: pulumi.Output<string>;
    public readonly pleen!: pulumi.Output<number | undefined>;
    public readonly pleenV!: pulumi.Output<string>;
    public readonly prioPid!: pulumi.Output<number | undefined>;
    public readonly prioPidV!: pulumi.Output<string>;
    public readonly promis!: pulumi.Output<number | undefined>;
    public readonly promisV!: pulumi.Output<string>;
    public readonly rfsh!: pulumi.Output<number | undefined>;
    public readonly rfshV!: pulumi.Output<string>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly smacSkip!: pulumi.Output<number | undefined>;
    public readonly smacSkipV!: pulumi.Output<string>;
    public readonly tpSmchk!: pulumi.Output<number | undefined>;
    public readonly tpSmchkV!: pulumi.Output<string>;
    public readonly tpeId!: pulumi.Output<number | undefined>;
    public readonly tpeIdV!: pulumi.Output<string>;
    public readonly vdm!: pulumi.Output<number | undefined>;
    public readonly vdmV!: pulumi.Output<string>;
    public readonly vdomId!: pulumi.Output<number | undefined>;
    public readonly vdomIdV!: pulumi.Output<string>;
    public readonly xMode!: pulumi.Output<number | undefined>;
    public readonly xModeV!: pulumi.Output<string>;

    /**
     * Create a ObjectSystemNpuNputcamSact resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObjectSystemNpuNputcamSactArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectSystemNpuNputcamSactArgs | ObjectSystemNpuNputcamSactState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectSystemNpuNputcamSactState | undefined;
            resourceInputs["act"] = state ? state.act : undefined;
            resourceInputs["actV"] = state ? state.actV : undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["bmproc"] = state ? state.bmproc : undefined;
            resourceInputs["bmprocV"] = state ? state.bmprocV : undefined;
            resourceInputs["dfLif"] = state ? state.dfLif : undefined;
            resourceInputs["dfLifV"] = state ? state.dfLifV : undefined;
            resourceInputs["dfr"] = state ? state.dfr : undefined;
            resourceInputs["dfrV"] = state ? state.dfrV : undefined;
            resourceInputs["dmacSkip"] = state ? state.dmacSkip : undefined;
            resourceInputs["dmacSkipV"] = state ? state.dmacSkipV : undefined;
            resourceInputs["dosen"] = state ? state.dosen : undefined;
            resourceInputs["dosenV"] = state ? state.dosenV : undefined;
            resourceInputs["espffProc"] = state ? state.espffProc : undefined;
            resourceInputs["espffProcV"] = state ? state.espffProcV : undefined;
            resourceInputs["etypePid"] = state ? state.etypePid : undefined;
            resourceInputs["etypePidV"] = state ? state.etypePidV : undefined;
            resourceInputs["fragProc"] = state ? state.fragProc : undefined;
            resourceInputs["fragProcV"] = state ? state.fragProcV : undefined;
            resourceInputs["fwd"] = state ? state.fwd : undefined;
            resourceInputs["fwdLif"] = state ? state.fwdLif : undefined;
            resourceInputs["fwdLifV"] = state ? state.fwdLifV : undefined;
            resourceInputs["fwdTvid"] = state ? state.fwdTvid : undefined;
            resourceInputs["fwdTvidV"] = state ? state.fwdTvidV : undefined;
            resourceInputs["fwdV"] = state ? state.fwdV : undefined;
            resourceInputs["icpen"] = state ? state.icpen : undefined;
            resourceInputs["icpenV"] = state ? state.icpenV : undefined;
            resourceInputs["igmpMldSnp"] = state ? state.igmpMldSnp : undefined;
            resourceInputs["igmpMldSnpV"] = state ? state.igmpMldSnpV : undefined;
            resourceInputs["learn"] = state ? state.learn : undefined;
            resourceInputs["learnV"] = state ? state.learnV : undefined;
            resourceInputs["mSrhCtrl"] = state ? state.mSrhCtrl : undefined;
            resourceInputs["mSrhCtrlV"] = state ? state.mSrhCtrlV : undefined;
            resourceInputs["macId"] = state ? state.macId : undefined;
            resourceInputs["macIdV"] = state ? state.macIdV : undefined;
            resourceInputs["mss"] = state ? state.mss : undefined;
            resourceInputs["mssV"] = state ? state.mssV : undefined;
            resourceInputs["npuTcam"] = state ? state.npuTcam : undefined;
            resourceInputs["pleen"] = state ? state.pleen : undefined;
            resourceInputs["pleenV"] = state ? state.pleenV : undefined;
            resourceInputs["prioPid"] = state ? state.prioPid : undefined;
            resourceInputs["prioPidV"] = state ? state.prioPidV : undefined;
            resourceInputs["promis"] = state ? state.promis : undefined;
            resourceInputs["promisV"] = state ? state.promisV : undefined;
            resourceInputs["rfsh"] = state ? state.rfsh : undefined;
            resourceInputs["rfshV"] = state ? state.rfshV : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["smacSkip"] = state ? state.smacSkip : undefined;
            resourceInputs["smacSkipV"] = state ? state.smacSkipV : undefined;
            resourceInputs["tpSmchk"] = state ? state.tpSmchk : undefined;
            resourceInputs["tpSmchkV"] = state ? state.tpSmchkV : undefined;
            resourceInputs["tpeId"] = state ? state.tpeId : undefined;
            resourceInputs["tpeIdV"] = state ? state.tpeIdV : undefined;
            resourceInputs["vdm"] = state ? state.vdm : undefined;
            resourceInputs["vdmV"] = state ? state.vdmV : undefined;
            resourceInputs["vdomId"] = state ? state.vdomId : undefined;
            resourceInputs["vdomIdV"] = state ? state.vdomIdV : undefined;
            resourceInputs["xMode"] = state ? state.xMode : undefined;
            resourceInputs["xModeV"] = state ? state.xModeV : undefined;
        } else {
            const args = argsOrState as ObjectSystemNpuNputcamSactArgs | undefined;
            if ((!args || args.npuTcam === undefined) && !opts.urn) {
                throw new Error("Missing required property 'npuTcam'");
            }
            resourceInputs["act"] = args ? args.act : undefined;
            resourceInputs["actV"] = args ? args.actV : undefined;
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["bmproc"] = args ? args.bmproc : undefined;
            resourceInputs["bmprocV"] = args ? args.bmprocV : undefined;
            resourceInputs["dfLif"] = args ? args.dfLif : undefined;
            resourceInputs["dfLifV"] = args ? args.dfLifV : undefined;
            resourceInputs["dfr"] = args ? args.dfr : undefined;
            resourceInputs["dfrV"] = args ? args.dfrV : undefined;
            resourceInputs["dmacSkip"] = args ? args.dmacSkip : undefined;
            resourceInputs["dmacSkipV"] = args ? args.dmacSkipV : undefined;
            resourceInputs["dosen"] = args ? args.dosen : undefined;
            resourceInputs["dosenV"] = args ? args.dosenV : undefined;
            resourceInputs["espffProc"] = args ? args.espffProc : undefined;
            resourceInputs["espffProcV"] = args ? args.espffProcV : undefined;
            resourceInputs["etypePid"] = args ? args.etypePid : undefined;
            resourceInputs["etypePidV"] = args ? args.etypePidV : undefined;
            resourceInputs["fragProc"] = args ? args.fragProc : undefined;
            resourceInputs["fragProcV"] = args ? args.fragProcV : undefined;
            resourceInputs["fwd"] = args ? args.fwd : undefined;
            resourceInputs["fwdLif"] = args ? args.fwdLif : undefined;
            resourceInputs["fwdLifV"] = args ? args.fwdLifV : undefined;
            resourceInputs["fwdTvid"] = args ? args.fwdTvid : undefined;
            resourceInputs["fwdTvidV"] = args ? args.fwdTvidV : undefined;
            resourceInputs["fwdV"] = args ? args.fwdV : undefined;
            resourceInputs["icpen"] = args ? args.icpen : undefined;
            resourceInputs["icpenV"] = args ? args.icpenV : undefined;
            resourceInputs["igmpMldSnp"] = args ? args.igmpMldSnp : undefined;
            resourceInputs["igmpMldSnpV"] = args ? args.igmpMldSnpV : undefined;
            resourceInputs["learn"] = args ? args.learn : undefined;
            resourceInputs["learnV"] = args ? args.learnV : undefined;
            resourceInputs["mSrhCtrl"] = args ? args.mSrhCtrl : undefined;
            resourceInputs["mSrhCtrlV"] = args ? args.mSrhCtrlV : undefined;
            resourceInputs["macId"] = args ? args.macId : undefined;
            resourceInputs["macIdV"] = args ? args.macIdV : undefined;
            resourceInputs["mss"] = args ? args.mss : undefined;
            resourceInputs["mssV"] = args ? args.mssV : undefined;
            resourceInputs["npuTcam"] = args ? args.npuTcam : undefined;
            resourceInputs["pleen"] = args ? args.pleen : undefined;
            resourceInputs["pleenV"] = args ? args.pleenV : undefined;
            resourceInputs["prioPid"] = args ? args.prioPid : undefined;
            resourceInputs["prioPidV"] = args ? args.prioPidV : undefined;
            resourceInputs["promis"] = args ? args.promis : undefined;
            resourceInputs["promisV"] = args ? args.promisV : undefined;
            resourceInputs["rfsh"] = args ? args.rfsh : undefined;
            resourceInputs["rfshV"] = args ? args.rfshV : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["smacSkip"] = args ? args.smacSkip : undefined;
            resourceInputs["smacSkipV"] = args ? args.smacSkipV : undefined;
            resourceInputs["tpSmchk"] = args ? args.tpSmchk : undefined;
            resourceInputs["tpSmchkV"] = args ? args.tpSmchkV : undefined;
            resourceInputs["tpeId"] = args ? args.tpeId : undefined;
            resourceInputs["tpeIdV"] = args ? args.tpeIdV : undefined;
            resourceInputs["vdm"] = args ? args.vdm : undefined;
            resourceInputs["vdmV"] = args ? args.vdmV : undefined;
            resourceInputs["vdomId"] = args ? args.vdomId : undefined;
            resourceInputs["vdomIdV"] = args ? args.vdomIdV : undefined;
            resourceInputs["xMode"] = args ? args.xMode : undefined;
            resourceInputs["xModeV"] = args ? args.xModeV : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectSystemNpuNputcamSact.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectSystemNpuNputcamSact resources.
 */
export interface ObjectSystemNpuNputcamSactState {
    act?: pulumi.Input<number>;
    actV?: pulumi.Input<string>;
    adom?: pulumi.Input<string>;
    bmproc?: pulumi.Input<number>;
    bmprocV?: pulumi.Input<string>;
    dfLif?: pulumi.Input<number>;
    dfLifV?: pulumi.Input<string>;
    dfr?: pulumi.Input<number>;
    dfrV?: pulumi.Input<string>;
    dmacSkip?: pulumi.Input<number>;
    dmacSkipV?: pulumi.Input<string>;
    dosen?: pulumi.Input<number>;
    dosenV?: pulumi.Input<string>;
    espffProc?: pulumi.Input<number>;
    espffProcV?: pulumi.Input<string>;
    etypePid?: pulumi.Input<number>;
    etypePidV?: pulumi.Input<string>;
    fragProc?: pulumi.Input<number>;
    fragProcV?: pulumi.Input<string>;
    fwd?: pulumi.Input<number>;
    fwdLif?: pulumi.Input<number>;
    fwdLifV?: pulumi.Input<string>;
    fwdTvid?: pulumi.Input<number>;
    fwdTvidV?: pulumi.Input<string>;
    fwdV?: pulumi.Input<string>;
    icpen?: pulumi.Input<number>;
    icpenV?: pulumi.Input<string>;
    igmpMldSnp?: pulumi.Input<number>;
    igmpMldSnpV?: pulumi.Input<string>;
    learn?: pulumi.Input<number>;
    learnV?: pulumi.Input<string>;
    mSrhCtrl?: pulumi.Input<number>;
    mSrhCtrlV?: pulumi.Input<string>;
    macId?: pulumi.Input<number>;
    macIdV?: pulumi.Input<string>;
    mss?: pulumi.Input<number>;
    mssV?: pulumi.Input<string>;
    npuTcam?: pulumi.Input<string>;
    pleen?: pulumi.Input<number>;
    pleenV?: pulumi.Input<string>;
    prioPid?: pulumi.Input<number>;
    prioPidV?: pulumi.Input<string>;
    promis?: pulumi.Input<number>;
    promisV?: pulumi.Input<string>;
    rfsh?: pulumi.Input<number>;
    rfshV?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    smacSkip?: pulumi.Input<number>;
    smacSkipV?: pulumi.Input<string>;
    tpSmchk?: pulumi.Input<number>;
    tpSmchkV?: pulumi.Input<string>;
    tpeId?: pulumi.Input<number>;
    tpeIdV?: pulumi.Input<string>;
    vdm?: pulumi.Input<number>;
    vdmV?: pulumi.Input<string>;
    vdomId?: pulumi.Input<number>;
    vdomIdV?: pulumi.Input<string>;
    xMode?: pulumi.Input<number>;
    xModeV?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectSystemNpuNputcamSact resource.
 */
export interface ObjectSystemNpuNputcamSactArgs {
    act?: pulumi.Input<number>;
    actV?: pulumi.Input<string>;
    adom?: pulumi.Input<string>;
    bmproc?: pulumi.Input<number>;
    bmprocV?: pulumi.Input<string>;
    dfLif?: pulumi.Input<number>;
    dfLifV?: pulumi.Input<string>;
    dfr?: pulumi.Input<number>;
    dfrV?: pulumi.Input<string>;
    dmacSkip?: pulumi.Input<number>;
    dmacSkipV?: pulumi.Input<string>;
    dosen?: pulumi.Input<number>;
    dosenV?: pulumi.Input<string>;
    espffProc?: pulumi.Input<number>;
    espffProcV?: pulumi.Input<string>;
    etypePid?: pulumi.Input<number>;
    etypePidV?: pulumi.Input<string>;
    fragProc?: pulumi.Input<number>;
    fragProcV?: pulumi.Input<string>;
    fwd?: pulumi.Input<number>;
    fwdLif?: pulumi.Input<number>;
    fwdLifV?: pulumi.Input<string>;
    fwdTvid?: pulumi.Input<number>;
    fwdTvidV?: pulumi.Input<string>;
    fwdV?: pulumi.Input<string>;
    icpen?: pulumi.Input<number>;
    icpenV?: pulumi.Input<string>;
    igmpMldSnp?: pulumi.Input<number>;
    igmpMldSnpV?: pulumi.Input<string>;
    learn?: pulumi.Input<number>;
    learnV?: pulumi.Input<string>;
    mSrhCtrl?: pulumi.Input<number>;
    mSrhCtrlV?: pulumi.Input<string>;
    macId?: pulumi.Input<number>;
    macIdV?: pulumi.Input<string>;
    mss?: pulumi.Input<number>;
    mssV?: pulumi.Input<string>;
    npuTcam: pulumi.Input<string>;
    pleen?: pulumi.Input<number>;
    pleenV?: pulumi.Input<string>;
    prioPid?: pulumi.Input<number>;
    prioPidV?: pulumi.Input<string>;
    promis?: pulumi.Input<number>;
    promisV?: pulumi.Input<string>;
    rfsh?: pulumi.Input<number>;
    rfshV?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    smacSkip?: pulumi.Input<number>;
    smacSkipV?: pulumi.Input<string>;
    tpSmchk?: pulumi.Input<number>;
    tpSmchkV?: pulumi.Input<string>;
    tpeId?: pulumi.Input<number>;
    tpeIdV?: pulumi.Input<string>;
    vdm?: pulumi.Input<number>;
    vdmV?: pulumi.Input<string>;
    vdomId?: pulumi.Input<number>;
    vdomIdV?: pulumi.Input<string>;
    xMode?: pulumi.Input<number>;
    xModeV?: pulumi.Input<string>;
}
