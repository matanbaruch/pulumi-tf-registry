// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FmupdateFwmsetting extends pulumi.CustomResource {
    /**
     * Get an existing FmupdateFwmsetting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FmupdateFwmsettingState, opts?: pulumi.CustomResourceOptions): FmupdateFwmsetting {
        return new FmupdateFwmsetting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/fmupdateFwmsetting:FmupdateFwmsetting';

    /**
     * Returns true if the given object is an instance of FmupdateFwmsetting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FmupdateFwmsetting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FmupdateFwmsetting.__pulumiType;
    }

    public readonly autoScanFgtDisk!: pulumi.Output<string>;
    public readonly checkFgtDisk!: pulumi.Output<string>;
    public readonly fdsFailoverFmg!: pulumi.Output<string>;
    public readonly fdsImageTimeout!: pulumi.Output<number>;
    public readonly healthCheck!: pulumi.Output<string>;
    public readonly immxSource!: pulumi.Output<string>;
    public readonly log!: pulumi.Output<string>;
    public readonly maxDeviceHistory!: pulumi.Output<number>;
    public readonly maxProfileHistory!: pulumi.Output<number>;
    public readonly multipleStepsInterval!: pulumi.Output<number>;
    public readonly retrieve!: pulumi.Output<string>;
    public readonly retryInterval!: pulumi.Output<number>;
    public readonly retryMax!: pulumi.Output<number>;
    public readonly revisionDiff!: pulumi.Output<string>;
    public readonly upgradeTimeout!: pulumi.Output<outputs.FmupdateFwmsettingUpgradeTimeout | undefined>;

    /**
     * Create a FmupdateFwmsetting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FmupdateFwmsettingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FmupdateFwmsettingArgs | FmupdateFwmsettingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FmupdateFwmsettingState | undefined;
            resourceInputs["autoScanFgtDisk"] = state ? state.autoScanFgtDisk : undefined;
            resourceInputs["checkFgtDisk"] = state ? state.checkFgtDisk : undefined;
            resourceInputs["fdsFailoverFmg"] = state ? state.fdsFailoverFmg : undefined;
            resourceInputs["fdsImageTimeout"] = state ? state.fdsImageTimeout : undefined;
            resourceInputs["healthCheck"] = state ? state.healthCheck : undefined;
            resourceInputs["immxSource"] = state ? state.immxSource : undefined;
            resourceInputs["log"] = state ? state.log : undefined;
            resourceInputs["maxDeviceHistory"] = state ? state.maxDeviceHistory : undefined;
            resourceInputs["maxProfileHistory"] = state ? state.maxProfileHistory : undefined;
            resourceInputs["multipleStepsInterval"] = state ? state.multipleStepsInterval : undefined;
            resourceInputs["retrieve"] = state ? state.retrieve : undefined;
            resourceInputs["retryInterval"] = state ? state.retryInterval : undefined;
            resourceInputs["retryMax"] = state ? state.retryMax : undefined;
            resourceInputs["revisionDiff"] = state ? state.revisionDiff : undefined;
            resourceInputs["upgradeTimeout"] = state ? state.upgradeTimeout : undefined;
        } else {
            const args = argsOrState as FmupdateFwmsettingArgs | undefined;
            resourceInputs["autoScanFgtDisk"] = args ? args.autoScanFgtDisk : undefined;
            resourceInputs["checkFgtDisk"] = args ? args.checkFgtDisk : undefined;
            resourceInputs["fdsFailoverFmg"] = args ? args.fdsFailoverFmg : undefined;
            resourceInputs["fdsImageTimeout"] = args ? args.fdsImageTimeout : undefined;
            resourceInputs["healthCheck"] = args ? args.healthCheck : undefined;
            resourceInputs["immxSource"] = args ? args.immxSource : undefined;
            resourceInputs["log"] = args ? args.log : undefined;
            resourceInputs["maxDeviceHistory"] = args ? args.maxDeviceHistory : undefined;
            resourceInputs["maxProfileHistory"] = args ? args.maxProfileHistory : undefined;
            resourceInputs["multipleStepsInterval"] = args ? args.multipleStepsInterval : undefined;
            resourceInputs["retrieve"] = args ? args.retrieve : undefined;
            resourceInputs["retryInterval"] = args ? args.retryInterval : undefined;
            resourceInputs["retryMax"] = args ? args.retryMax : undefined;
            resourceInputs["revisionDiff"] = args ? args.revisionDiff : undefined;
            resourceInputs["upgradeTimeout"] = args ? args.upgradeTimeout : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FmupdateFwmsetting.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FmupdateFwmsetting resources.
 */
export interface FmupdateFwmsettingState {
    autoScanFgtDisk?: pulumi.Input<string>;
    checkFgtDisk?: pulumi.Input<string>;
    fdsFailoverFmg?: pulumi.Input<string>;
    fdsImageTimeout?: pulumi.Input<number>;
    healthCheck?: pulumi.Input<string>;
    immxSource?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    maxDeviceHistory?: pulumi.Input<number>;
    maxProfileHistory?: pulumi.Input<number>;
    multipleStepsInterval?: pulumi.Input<number>;
    retrieve?: pulumi.Input<string>;
    retryInterval?: pulumi.Input<number>;
    retryMax?: pulumi.Input<number>;
    revisionDiff?: pulumi.Input<string>;
    upgradeTimeout?: pulumi.Input<inputs.FmupdateFwmsettingUpgradeTimeout>;
}

/**
 * The set of arguments for constructing a FmupdateFwmsetting resource.
 */
export interface FmupdateFwmsettingArgs {
    autoScanFgtDisk?: pulumi.Input<string>;
    checkFgtDisk?: pulumi.Input<string>;
    fdsFailoverFmg?: pulumi.Input<string>;
    fdsImageTimeout?: pulumi.Input<number>;
    healthCheck?: pulumi.Input<string>;
    immxSource?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    maxDeviceHistory?: pulumi.Input<number>;
    maxProfileHistory?: pulumi.Input<number>;
    multipleStepsInterval?: pulumi.Input<number>;
    retrieve?: pulumi.Input<string>;
    retryInterval?: pulumi.Input<number>;
    retryMax?: pulumi.Input<number>;
    revisionDiff?: pulumi.Input<string>;
    upgradeTimeout?: pulumi.Input<inputs.FmupdateFwmsettingUpgradeTimeout>;
}
