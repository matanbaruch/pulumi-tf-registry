// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ObjectFspVlanInterface extends pulumi.CustomResource {
    /**
     * Get an existing ObjectFspVlanInterface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectFspVlanInterfaceState, opts?: pulumi.CustomResourceOptions): ObjectFspVlanInterface {
        return new ObjectFspVlanInterface(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/objectFspVlanInterface:ObjectFspVlanInterface';

    /**
     * Returns true if the given object is an instance of ObjectFspVlanInterface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectFspVlanInterface {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectFspVlanInterface.__pulumiType;
    }

    public readonly acName!: pulumi.Output<string | undefined>;
    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly aggregate!: pulumi.Output<string | undefined>;
    public readonly aggregateType!: pulumi.Output<string>;
    public readonly algorithm!: pulumi.Output<string | undefined>;
    public readonly alias!: pulumi.Output<string | undefined>;
    public readonly allowaccesses!: pulumi.Output<string[]>;
    public readonly annex!: pulumi.Output<string>;
    public readonly apDiscover!: pulumi.Output<string>;
    public readonly arpforward!: pulumi.Output<string>;
    public readonly atmProtocol!: pulumi.Output<string | undefined>;
    public readonly authCert!: pulumi.Output<string | undefined>;
    public readonly authPortalAddr!: pulumi.Output<string | undefined>;
    public readonly authType!: pulumi.Output<string | undefined>;
    public readonly autoAuthExtensionDevice!: pulumi.Output<string>;
    public readonly bandwidthMeasureTime!: pulumi.Output<number | undefined>;
    public readonly bfd!: pulumi.Output<string>;
    public readonly bfdDesiredMinTx!: pulumi.Output<number | undefined>;
    public readonly bfdDetectMult!: pulumi.Output<number | undefined>;
    public readonly bfdRequiredMinRx!: pulumi.Output<number | undefined>;
    public readonly broadcastForticlientDiscovery!: pulumi.Output<string | undefined>;
    public readonly broadcastForward!: pulumi.Output<string>;
    public readonly captivePortal!: pulumi.Output<number | undefined>;
    public readonly cliConnStatus!: pulumi.Output<number | undefined>;
    public readonly color!: pulumi.Output<number | undefined>;
    public readonly ddns!: pulumi.Output<string | undefined>;
    public readonly ddnsAuth!: pulumi.Output<string | undefined>;
    public readonly ddnsDomain!: pulumi.Output<string | undefined>;
    public readonly ddnsKey!: pulumi.Output<string | undefined>;
    public readonly ddnsKeyname!: pulumi.Output<string | undefined>;
    public readonly ddnsPasswords!: pulumi.Output<string[]>;
    public readonly ddnsServer!: pulumi.Output<string | undefined>;
    public readonly ddnsServerIp!: pulumi.Output<string | undefined>;
    public readonly ddnsSn!: pulumi.Output<string | undefined>;
    public readonly ddnsTtl!: pulumi.Output<number | undefined>;
    public readonly ddnsUsername!: pulumi.Output<string | undefined>;
    public readonly ddnsZone!: pulumi.Output<string | undefined>;
    public readonly dedicatedTo!: pulumi.Output<string>;
    public readonly defaultPurdueLevel!: pulumi.Output<string>;
    public readonly defaultgw!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly detectedPeerMtu!: pulumi.Output<number | undefined>;
    public readonly detectprotocols!: pulumi.Output<string[]>;
    public readonly detectserver!: pulumi.Output<string | undefined>;
    public readonly deviceAccessList!: pulumi.Output<string | undefined>;
    public readonly deviceIdentification!: pulumi.Output<string>;
    public readonly deviceIdentificationActiveScan!: pulumi.Output<string | undefined>;
    public readonly deviceNetscan!: pulumi.Output<string | undefined>;
    public readonly deviceUserIdentification!: pulumi.Output<string | undefined>;
    public readonly devindex!: pulumi.Output<number | undefined>;
    public readonly dhcpBroadcastFlag!: pulumi.Output<string>;
    public readonly dhcpClasslessRouteAddition!: pulumi.Output<string>;
    public readonly dhcpClientIdentifier!: pulumi.Output<string | undefined>;
    public readonly dhcpRelayAgentOption!: pulumi.Output<string | undefined>;
    public readonly dhcpRelayCircuitId!: pulumi.Output<string | undefined>;
    public readonly dhcpRelayInterface!: pulumi.Output<string | undefined>;
    public readonly dhcpRelayInterfaceSelectMethod!: pulumi.Output<string>;
    public readonly dhcpRelayIps!: pulumi.Output<string[]>;
    public readonly dhcpRelayLinkSelection!: pulumi.Output<string>;
    public readonly dhcpRelayRequestAllServer!: pulumi.Output<string>;
    public readonly dhcpRelayService!: pulumi.Output<string>;
    public readonly dhcpRelaySourceIp!: pulumi.Output<string>;
    public readonly dhcpRelayType!: pulumi.Output<string | undefined>;
    public readonly dhcpRenewTime!: pulumi.Output<number | undefined>;
    public readonly dhcpSmartRelay!: pulumi.Output<string>;
    public readonly discRetryTimeout!: pulumi.Output<number | undefined>;
    public readonly disconnectThreshold!: pulumi.Output<number | undefined>;
    public readonly distance!: pulumi.Output<number | undefined>;
    public readonly dnsQuery!: pulumi.Output<string | undefined>;
    public readonly dnsServerOverride!: pulumi.Output<string | undefined>;
    public readonly dnsServerProtocols!: pulumi.Output<string[]>;
    public readonly dropFragment!: pulumi.Output<string>;
    public readonly dropOverlappedFragment!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly eapCaCerts!: pulumi.Output<string[]>;
    public readonly eapIdentity!: pulumi.Output<string | undefined>;
    public readonly eapMethod!: pulumi.Output<string | undefined>;
    public readonly eapPasswords!: pulumi.Output<string[]>;
    public readonly eapSupplicant!: pulumi.Output<string>;
    public readonly eapUserCerts!: pulumi.Output<string[]>;
    public readonly egressCos!: pulumi.Output<string>;
    public readonly egressShapingProfile!: pulumi.Output<string | undefined>;
    public readonly eip!: pulumi.Output<string>;
    public readonly endpointCompliance!: pulumi.Output<string | undefined>;
    public readonly estimatedDownstreamBandwidth!: pulumi.Output<number | undefined>;
    public readonly estimatedUpstreamBandwidth!: pulumi.Output<number | undefined>;
    public readonly explicitFtpProxy!: pulumi.Output<string>;
    public readonly explicitWebProxy!: pulumi.Output<string>;
    public readonly external!: pulumi.Output<string>;
    public readonly failActionOnExtender!: pulumi.Output<string>;
    public readonly failAlertInterfaces!: pulumi.Output<string | undefined>;
    public readonly failAlertMethod!: pulumi.Output<string | undefined>;
    public readonly failDetect!: pulumi.Output<string>;
    public readonly failDetectOptions!: pulumi.Output<string[]>;
    public readonly fdp!: pulumi.Output<string | undefined>;
    public readonly fortiheartbeat!: pulumi.Output<string | undefined>;
    public readonly fortilink!: pulumi.Output<string>;
    public readonly fortilinkBackupLink!: pulumi.Output<number | undefined>;
    public readonly fortilinkNeighborDetect!: pulumi.Output<string>;
    public readonly fortilinkSplitInterface!: pulumi.Output<string | undefined>;
    public readonly fortilinkStacking!: pulumi.Output<string>;
    public readonly forwardDomain!: pulumi.Output<number | undefined>;
    public readonly forwardErrorCorrection!: pulumi.Output<string>;
    public readonly fpAnomalies!: pulumi.Output<string[]>;
    public readonly fpDisables!: pulumi.Output<string[]>;
    public readonly gatewayAddress!: pulumi.Output<string | undefined>;
    public readonly genericReceiveOffload!: pulumi.Output<string | undefined>;
    public readonly giGk!: pulumi.Output<string>;
    public readonly gwaddr!: pulumi.Output<string | undefined>;
    public readonly gwdetect!: pulumi.Output<string | undefined>;
    public readonly haPriority!: pulumi.Output<number | undefined>;
    public readonly icmpAcceptRedirect!: pulumi.Output<string>;
    public readonly icmpRedirect!: pulumi.Output<string | undefined>;
    public readonly icmpSendRedirect!: pulumi.Output<string>;
    public readonly identAccept!: pulumi.Output<string>;
    public readonly idleTimeout!: pulumi.Output<number | undefined>;
    public readonly ifMdix!: pulumi.Output<string | undefined>;
    public readonly ifMedia!: pulumi.Output<string | undefined>;
    public readonly ikeSamlServers!: pulumi.Output<string[]>;
    public readonly inForceVlanCos!: pulumi.Output<number | undefined>;
    public readonly inbandwidth!: pulumi.Output<number | undefined>;
    public readonly ingressCos!: pulumi.Output<string>;
    public readonly ingressShapingProfile!: pulumi.Output<string | undefined>;
    public readonly ingressSpilloverThreshold!: pulumi.Output<number | undefined>;
    public readonly interconnectProfile!: pulumi.Output<string>;
    public readonly internal!: pulumi.Output<number | undefined>;
    public readonly ip!: pulumi.Output<string>;
    public readonly ipManagedByFortiipam!: pulumi.Output<string>;
    public readonly ipmac!: pulumi.Output<string>;
    public readonly ipsSnifferMode!: pulumi.Output<string>;
    public readonly ipunnumbered!: pulumi.Output<string | undefined>;
    public readonly ipv6!: pulumi.Output<outputs.ObjectFspVlanInterfaceIpv6 | undefined>;
    public readonly l2forward!: pulumi.Output<string>;
    public readonly l2tpClient!: pulumi.Output<string>;
    public readonly lacpHaSecondary!: pulumi.Output<string>;
    public readonly lacpHaSlave!: pulumi.Output<string | undefined>;
    public readonly lacpMode!: pulumi.Output<string | undefined>;
    public readonly lacpSpeed!: pulumi.Output<string | undefined>;
    public readonly largeReceiveOffload!: pulumi.Output<string | undefined>;
    public readonly lcpEchoInterval!: pulumi.Output<number | undefined>;
    public readonly lcpMaxEchoFails!: pulumi.Output<number | undefined>;
    public readonly linkUpDelay!: pulumi.Output<number | undefined>;
    public readonly listenForticlientConnection!: pulumi.Output<string | undefined>;
    public readonly lldpNetworkPolicy!: pulumi.Output<string | undefined>;
    public readonly lldpReception!: pulumi.Output<string | undefined>;
    public readonly lldpTransmission!: pulumi.Output<string | undefined>;
    public readonly log!: pulumi.Output<string | undefined>;
    public readonly macaddr!: pulumi.Output<string>;
    public readonly managedSubnetworkSize!: pulumi.Output<string>;
    public readonly managementIp!: pulumi.Output<string>;
    public readonly maxEgressBurstRate!: pulumi.Output<number | undefined>;
    public readonly maxEgressRate!: pulumi.Output<number | undefined>;
    public readonly measuredDownstreamBandwidth!: pulumi.Output<number | undefined>;
    public readonly measuredUpstreamBandwidth!: pulumi.Output<number | undefined>;
    public readonly mediatype!: pulumi.Output<string | undefined>;
    public readonly member!: pulumi.Output<string | undefined>;
    public readonly minLinks!: pulumi.Output<number>;
    public readonly minLinksDown!: pulumi.Output<string>;
    public readonly mirroringDirection!: pulumi.Output<string | undefined>;
    public readonly mirroringPort!: pulumi.Output<string | undefined>;
    public readonly mode!: pulumi.Output<string>;
    public readonly monitorBandwidth!: pulumi.Output<string>;
    public readonly mtu!: pulumi.Output<number | undefined>;
    public readonly mtuOverride!: pulumi.Output<string>;
    public readonly muxType!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly ndiscforward!: pulumi.Output<string>;
    public readonly netbiosForward!: pulumi.Output<string>;
    public readonly netflowSampler!: pulumi.Output<string>;
    public readonly npQosProfile!: pulumi.Output<number | undefined>;
    public readonly npuFastpath!: pulumi.Output<string | undefined>;
    public readonly nst!: pulumi.Output<string | undefined>;
    public readonly outForceVlanCos!: pulumi.Output<number | undefined>;
    public readonly outbandwidth!: pulumi.Output<number | undefined>;
    public readonly padtRetryTimeout!: pulumi.Output<number | undefined>;
    public readonly passwords!: pulumi.Output<string[]>;
    public readonly peerInterface!: pulumi.Output<string | undefined>;
    public readonly phyMode!: pulumi.Output<string | undefined>;
    public readonly pingServStatus!: pulumi.Output<number | undefined>;
    public readonly poe!: pulumi.Output<string>;
    public readonly pollingInterval!: pulumi.Output<number>;
    public readonly portMirroring!: pulumi.Output<string>;
    public readonly pppoeUnnumberedNegotiate!: pulumi.Output<string>;
    public readonly pptpAuthType!: pulumi.Output<string>;
    public readonly pptpClient!: pulumi.Output<string>;
    public readonly pptpPasswords!: pulumi.Output<string[]>;
    public readonly pptpServerIp!: pulumi.Output<string>;
    public readonly pptpTimeout!: pulumi.Output<number | undefined>;
    public readonly pptpUser!: pulumi.Output<string | undefined>;
    public readonly preserveSessionRoute!: pulumi.Output<string>;
    public readonly priority!: pulumi.Output<number | undefined>;
    public readonly priorityOverride!: pulumi.Output<string>;
    public readonly proxyCaptivePortal!: pulumi.Output<string>;
    public readonly pvcAtmQos!: pulumi.Output<string | undefined>;
    public readonly pvcChan!: pulumi.Output<number | undefined>;
    public readonly pvcCrc!: pulumi.Output<number | undefined>;
    public readonly pvcPcr!: pulumi.Output<number | undefined>;
    public readonly pvcScr!: pulumi.Output<number | undefined>;
    public readonly pvcVlanId!: pulumi.Output<number | undefined>;
    public readonly pvcVlanRxId!: pulumi.Output<number | undefined>;
    public readonly pvcVlanRxOp!: pulumi.Output<string | undefined>;
    public readonly pvcVlanTxId!: pulumi.Output<number | undefined>;
    public readonly pvcVlanTxOp!: pulumi.Output<string | undefined>;
    public readonly reachableTime!: pulumi.Output<number>;
    public readonly redundantInterface!: pulumi.Output<string | undefined>;
    public readonly remoteIp!: pulumi.Output<string | undefined>;
    public readonly replacemsgOverrideGroup!: pulumi.Output<string | undefined>;
    public readonly retransmission!: pulumi.Output<string>;
    public readonly ringRx!: pulumi.Output<number | undefined>;
    public readonly ringTx!: pulumi.Output<number | undefined>;
    public readonly role!: pulumi.Output<string>;
    public readonly sampleDirection!: pulumi.Output<string>;
    public readonly sampleRate!: pulumi.Output<number>;
    public readonly scanBotnetConnections!: pulumi.Output<string | undefined>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly secondaryIp!: pulumi.Output<string>;
    public readonly secondaryips!: pulumi.Output<outputs.ObjectFspVlanInterfaceSecondaryip[] | undefined>;
    public readonly security8021xDynamicVlanId!: pulumi.Output<number | undefined>;
    public readonly security8021xMaster!: pulumi.Output<string | undefined>;
    public readonly security8021xMemberMode!: pulumi.Output<string>;
    public readonly security8021xMode!: pulumi.Output<string | undefined>;
    public readonly securityExemptList!: pulumi.Output<string | undefined>;
    public readonly securityExternalLogout!: pulumi.Output<string | undefined>;
    public readonly securityExternalWeb!: pulumi.Output<string | undefined>;
    public readonly securityGroups!: pulumi.Output<string | undefined>;
    public readonly securityMacAuthBypass!: pulumi.Output<string>;
    public readonly securityMode!: pulumi.Output<string>;
    public readonly securityRedirectUrl!: pulumi.Output<string | undefined>;
    public readonly selectProfile30a35b!: pulumi.Output<string>;
    public readonly serviceName!: pulumi.Output<string | undefined>;
    public readonly sflowSampler!: pulumi.Output<string>;
    public readonly sfpDsl!: pulumi.Output<string>;
    public readonly sfpDslAdslFallback!: pulumi.Output<string>;
    public readonly sfpDslAutodetect!: pulumi.Output<string>;
    public readonly sfpDslMac!: pulumi.Output<string>;
    public readonly speed!: pulumi.Output<string>;
    public readonly spilloverThreshold!: pulumi.Output<number | undefined>;
    public readonly srcCheck!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly stp!: pulumi.Output<string>;
    public readonly stpEdge!: pulumi.Output<string>;
    public readonly stpHaSecondary!: pulumi.Output<string>;
    public readonly stpHaSlave!: pulumi.Output<string>;
    public readonly stpforward!: pulumi.Output<string>;
    public readonly stpforwardMode!: pulumi.Output<string>;
    public readonly stripPriorityVlanTag!: pulumi.Output<string | undefined>;
    public readonly subst!: pulumi.Output<string>;
    public readonly substituteDstMac!: pulumi.Output<string>;
    public readonly swAlgorithm!: pulumi.Output<string>;
    public readonly swcFirstCreate!: pulumi.Output<number | undefined>;
    public readonly swcVlan!: pulumi.Output<number | undefined>;
    public readonly switch!: pulumi.Output<string | undefined>;
    public readonly switchControllerAccessVlan!: pulumi.Output<string>;
    public readonly switchControllerArpInspection!: pulumi.Output<string>;
    public readonly switchControllerAuth!: pulumi.Output<string | undefined>;
    public readonly switchControllerDhcpSnooping!: pulumi.Output<string>;
    public readonly switchControllerDhcpSnoopingOption82!: pulumi.Output<string>;
    public readonly switchControllerDhcpSnoopingVerifyMac!: pulumi.Output<string>;
    public readonly switchControllerDynamic!: pulumi.Output<string | undefined>;
    public readonly switchControllerFeature!: pulumi.Output<string>;
    public readonly switchControllerIgmpSnooping!: pulumi.Output<string>;
    public readonly switchControllerIgmpSnoopingFastLeave!: pulumi.Output<string>;
    public readonly switchControllerIgmpSnoopingProxy!: pulumi.Output<string>;
    public readonly switchControllerIotScanning!: pulumi.Output<string>;
    public readonly switchControllerLearningLimit!: pulumi.Output<number | undefined>;
    public readonly switchControllerMgmtVlan!: pulumi.Output<number>;
    public readonly switchControllerNac!: pulumi.Output<string | undefined>;
    public readonly switchControllerNetflowCollect!: pulumi.Output<string>;
    public readonly switchControllerOffload!: pulumi.Output<string>;
    public readonly switchControllerOffloadGw!: pulumi.Output<string>;
    public readonly switchControllerOffloadIp!: pulumi.Output<string>;
    public readonly switchControllerOffloading!: pulumi.Output<string | undefined>;
    public readonly switchControllerOffloadingGw!: pulumi.Output<string | undefined>;
    public readonly switchControllerOffloadingIp!: pulumi.Output<string | undefined>;
    public readonly switchControllerRadiusServer!: pulumi.Output<string | undefined>;
    public readonly switchControllerRspanMode!: pulumi.Output<string>;
    public readonly switchControllerSourceIp!: pulumi.Output<string>;
    public readonly switchControllerTrafficPolicy!: pulumi.Output<string | undefined>;
    public readonly systemId!: pulumi.Output<string>;
    public readonly systemIdType!: pulumi.Output<string>;
    public readonly tcMode!: pulumi.Output<string | undefined>;
    public readonly tcpMss!: pulumi.Output<number | undefined>;
    public readonly trunk!: pulumi.Output<string>;
    public readonly trustIp1!: pulumi.Output<string | undefined>;
    public readonly trustIp2!: pulumi.Output<string | undefined>;
    public readonly trustIp3!: pulumi.Output<string | undefined>;
    public readonly trustIp61!: pulumi.Output<string>;
    public readonly trustIp62!: pulumi.Output<string>;
    public readonly trustIp63!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public readonly username!: pulumi.Output<string | undefined>;
    public readonly vci!: pulumi.Output<number | undefined>;
    public readonly vectoring!: pulumi.Output<string>;
    public readonly vindex!: pulumi.Output<number | undefined>;
    public readonly vlan!: pulumi.Output<string>;
    public readonly vlanOpMode!: pulumi.Output<string>;
    public readonly vlanProtocol!: pulumi.Output<string>;
    public readonly vlanforward!: pulumi.Output<string>;
    public readonly vlanid!: pulumi.Output<number | undefined>;
    public readonly vpi!: pulumi.Output<number | undefined>;
    public readonly vrf!: pulumi.Output<number | undefined>;
    public readonly vrrpVirtualMac!: pulumi.Output<string>;
    public readonly vrrps!: pulumi.Output<outputs.ObjectFspVlanInterfaceVrrp[] | undefined>;
    public readonly wccp!: pulumi.Output<string>;
    public readonly weight!: pulumi.Output<number | undefined>;
    public readonly wifi5gThreshold!: pulumi.Output<string>;
    public readonly wifiAcl!: pulumi.Output<string | undefined>;
    public readonly wifiApBand!: pulumi.Output<string>;
    public readonly wifiAuth!: pulumi.Output<string>;
    public readonly wifiAutoConnect!: pulumi.Output<string>;
    public readonly wifiAutoSave!: pulumi.Output<string>;
    public readonly wifiBroadcastSsid!: pulumi.Output<string | undefined>;
    public readonly wifiDnsServer1!: pulumi.Output<string>;
    public readonly wifiDnsServer2!: pulumi.Output<string>;
    public readonly wifiEncrypt!: pulumi.Output<string>;
    public readonly wifiFragmentThreshold!: pulumi.Output<number | undefined>;
    public readonly wifiGateway!: pulumi.Output<string>;
    public readonly wifiKeyindex!: pulumi.Output<number | undefined>;
    public readonly wifiKeys!: pulumi.Output<string[]>;
    public readonly wifiMacFilter!: pulumi.Output<string | undefined>;
    public readonly wifiPassphrases!: pulumi.Output<string[]>;
    public readonly wifiRadiusServer!: pulumi.Output<string | undefined>;
    public readonly wifiRtsThreshold!: pulumi.Output<number | undefined>;
    public readonly wifiSecurity!: pulumi.Output<string | undefined>;
    public readonly wifiSsid!: pulumi.Output<string | undefined>;
    public readonly wifiUsergroup!: pulumi.Output<string | undefined>;
    public readonly winsIp!: pulumi.Output<string>;

    /**
     * Create a ObjectFspVlanInterface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObjectFspVlanInterfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectFspVlanInterfaceArgs | ObjectFspVlanInterfaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectFspVlanInterfaceState | undefined;
            resourceInputs["acName"] = state ? state.acName : undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["aggregate"] = state ? state.aggregate : undefined;
            resourceInputs["aggregateType"] = state ? state.aggregateType : undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["alias"] = state ? state.alias : undefined;
            resourceInputs["allowaccesses"] = state ? state.allowaccesses : undefined;
            resourceInputs["annex"] = state ? state.annex : undefined;
            resourceInputs["apDiscover"] = state ? state.apDiscover : undefined;
            resourceInputs["arpforward"] = state ? state.arpforward : undefined;
            resourceInputs["atmProtocol"] = state ? state.atmProtocol : undefined;
            resourceInputs["authCert"] = state ? state.authCert : undefined;
            resourceInputs["authPortalAddr"] = state ? state.authPortalAddr : undefined;
            resourceInputs["authType"] = state ? state.authType : undefined;
            resourceInputs["autoAuthExtensionDevice"] = state ? state.autoAuthExtensionDevice : undefined;
            resourceInputs["bandwidthMeasureTime"] = state ? state.bandwidthMeasureTime : undefined;
            resourceInputs["bfd"] = state ? state.bfd : undefined;
            resourceInputs["bfdDesiredMinTx"] = state ? state.bfdDesiredMinTx : undefined;
            resourceInputs["bfdDetectMult"] = state ? state.bfdDetectMult : undefined;
            resourceInputs["bfdRequiredMinRx"] = state ? state.bfdRequiredMinRx : undefined;
            resourceInputs["broadcastForticlientDiscovery"] = state ? state.broadcastForticlientDiscovery : undefined;
            resourceInputs["broadcastForward"] = state ? state.broadcastForward : undefined;
            resourceInputs["captivePortal"] = state ? state.captivePortal : undefined;
            resourceInputs["cliConnStatus"] = state ? state.cliConnStatus : undefined;
            resourceInputs["color"] = state ? state.color : undefined;
            resourceInputs["ddns"] = state ? state.ddns : undefined;
            resourceInputs["ddnsAuth"] = state ? state.ddnsAuth : undefined;
            resourceInputs["ddnsDomain"] = state ? state.ddnsDomain : undefined;
            resourceInputs["ddnsKey"] = state ? state.ddnsKey : undefined;
            resourceInputs["ddnsKeyname"] = state ? state.ddnsKeyname : undefined;
            resourceInputs["ddnsPasswords"] = state ? state.ddnsPasswords : undefined;
            resourceInputs["ddnsServer"] = state ? state.ddnsServer : undefined;
            resourceInputs["ddnsServerIp"] = state ? state.ddnsServerIp : undefined;
            resourceInputs["ddnsSn"] = state ? state.ddnsSn : undefined;
            resourceInputs["ddnsTtl"] = state ? state.ddnsTtl : undefined;
            resourceInputs["ddnsUsername"] = state ? state.ddnsUsername : undefined;
            resourceInputs["ddnsZone"] = state ? state.ddnsZone : undefined;
            resourceInputs["dedicatedTo"] = state ? state.dedicatedTo : undefined;
            resourceInputs["defaultPurdueLevel"] = state ? state.defaultPurdueLevel : undefined;
            resourceInputs["defaultgw"] = state ? state.defaultgw : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["detectedPeerMtu"] = state ? state.detectedPeerMtu : undefined;
            resourceInputs["detectprotocols"] = state ? state.detectprotocols : undefined;
            resourceInputs["detectserver"] = state ? state.detectserver : undefined;
            resourceInputs["deviceAccessList"] = state ? state.deviceAccessList : undefined;
            resourceInputs["deviceIdentification"] = state ? state.deviceIdentification : undefined;
            resourceInputs["deviceIdentificationActiveScan"] = state ? state.deviceIdentificationActiveScan : undefined;
            resourceInputs["deviceNetscan"] = state ? state.deviceNetscan : undefined;
            resourceInputs["deviceUserIdentification"] = state ? state.deviceUserIdentification : undefined;
            resourceInputs["devindex"] = state ? state.devindex : undefined;
            resourceInputs["dhcpBroadcastFlag"] = state ? state.dhcpBroadcastFlag : undefined;
            resourceInputs["dhcpClasslessRouteAddition"] = state ? state.dhcpClasslessRouteAddition : undefined;
            resourceInputs["dhcpClientIdentifier"] = state ? state.dhcpClientIdentifier : undefined;
            resourceInputs["dhcpRelayAgentOption"] = state ? state.dhcpRelayAgentOption : undefined;
            resourceInputs["dhcpRelayCircuitId"] = state ? state.dhcpRelayCircuitId : undefined;
            resourceInputs["dhcpRelayInterface"] = state ? state.dhcpRelayInterface : undefined;
            resourceInputs["dhcpRelayInterfaceSelectMethod"] = state ? state.dhcpRelayInterfaceSelectMethod : undefined;
            resourceInputs["dhcpRelayIps"] = state ? state.dhcpRelayIps : undefined;
            resourceInputs["dhcpRelayLinkSelection"] = state ? state.dhcpRelayLinkSelection : undefined;
            resourceInputs["dhcpRelayRequestAllServer"] = state ? state.dhcpRelayRequestAllServer : undefined;
            resourceInputs["dhcpRelayService"] = state ? state.dhcpRelayService : undefined;
            resourceInputs["dhcpRelaySourceIp"] = state ? state.dhcpRelaySourceIp : undefined;
            resourceInputs["dhcpRelayType"] = state ? state.dhcpRelayType : undefined;
            resourceInputs["dhcpRenewTime"] = state ? state.dhcpRenewTime : undefined;
            resourceInputs["dhcpSmartRelay"] = state ? state.dhcpSmartRelay : undefined;
            resourceInputs["discRetryTimeout"] = state ? state.discRetryTimeout : undefined;
            resourceInputs["disconnectThreshold"] = state ? state.disconnectThreshold : undefined;
            resourceInputs["distance"] = state ? state.distance : undefined;
            resourceInputs["dnsQuery"] = state ? state.dnsQuery : undefined;
            resourceInputs["dnsServerOverride"] = state ? state.dnsServerOverride : undefined;
            resourceInputs["dnsServerProtocols"] = state ? state.dnsServerProtocols : undefined;
            resourceInputs["dropFragment"] = state ? state.dropFragment : undefined;
            resourceInputs["dropOverlappedFragment"] = state ? state.dropOverlappedFragment : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["eapCaCerts"] = state ? state.eapCaCerts : undefined;
            resourceInputs["eapIdentity"] = state ? state.eapIdentity : undefined;
            resourceInputs["eapMethod"] = state ? state.eapMethod : undefined;
            resourceInputs["eapPasswords"] = state ? state.eapPasswords : undefined;
            resourceInputs["eapSupplicant"] = state ? state.eapSupplicant : undefined;
            resourceInputs["eapUserCerts"] = state ? state.eapUserCerts : undefined;
            resourceInputs["egressCos"] = state ? state.egressCos : undefined;
            resourceInputs["egressShapingProfile"] = state ? state.egressShapingProfile : undefined;
            resourceInputs["eip"] = state ? state.eip : undefined;
            resourceInputs["endpointCompliance"] = state ? state.endpointCompliance : undefined;
            resourceInputs["estimatedDownstreamBandwidth"] = state ? state.estimatedDownstreamBandwidth : undefined;
            resourceInputs["estimatedUpstreamBandwidth"] = state ? state.estimatedUpstreamBandwidth : undefined;
            resourceInputs["explicitFtpProxy"] = state ? state.explicitFtpProxy : undefined;
            resourceInputs["explicitWebProxy"] = state ? state.explicitWebProxy : undefined;
            resourceInputs["external"] = state ? state.external : undefined;
            resourceInputs["failActionOnExtender"] = state ? state.failActionOnExtender : undefined;
            resourceInputs["failAlertInterfaces"] = state ? state.failAlertInterfaces : undefined;
            resourceInputs["failAlertMethod"] = state ? state.failAlertMethod : undefined;
            resourceInputs["failDetect"] = state ? state.failDetect : undefined;
            resourceInputs["failDetectOptions"] = state ? state.failDetectOptions : undefined;
            resourceInputs["fdp"] = state ? state.fdp : undefined;
            resourceInputs["fortiheartbeat"] = state ? state.fortiheartbeat : undefined;
            resourceInputs["fortilink"] = state ? state.fortilink : undefined;
            resourceInputs["fortilinkBackupLink"] = state ? state.fortilinkBackupLink : undefined;
            resourceInputs["fortilinkNeighborDetect"] = state ? state.fortilinkNeighborDetect : undefined;
            resourceInputs["fortilinkSplitInterface"] = state ? state.fortilinkSplitInterface : undefined;
            resourceInputs["fortilinkStacking"] = state ? state.fortilinkStacking : undefined;
            resourceInputs["forwardDomain"] = state ? state.forwardDomain : undefined;
            resourceInputs["forwardErrorCorrection"] = state ? state.forwardErrorCorrection : undefined;
            resourceInputs["fpAnomalies"] = state ? state.fpAnomalies : undefined;
            resourceInputs["fpDisables"] = state ? state.fpDisables : undefined;
            resourceInputs["gatewayAddress"] = state ? state.gatewayAddress : undefined;
            resourceInputs["genericReceiveOffload"] = state ? state.genericReceiveOffload : undefined;
            resourceInputs["giGk"] = state ? state.giGk : undefined;
            resourceInputs["gwaddr"] = state ? state.gwaddr : undefined;
            resourceInputs["gwdetect"] = state ? state.gwdetect : undefined;
            resourceInputs["haPriority"] = state ? state.haPriority : undefined;
            resourceInputs["icmpAcceptRedirect"] = state ? state.icmpAcceptRedirect : undefined;
            resourceInputs["icmpRedirect"] = state ? state.icmpRedirect : undefined;
            resourceInputs["icmpSendRedirect"] = state ? state.icmpSendRedirect : undefined;
            resourceInputs["identAccept"] = state ? state.identAccept : undefined;
            resourceInputs["idleTimeout"] = state ? state.idleTimeout : undefined;
            resourceInputs["ifMdix"] = state ? state.ifMdix : undefined;
            resourceInputs["ifMedia"] = state ? state.ifMedia : undefined;
            resourceInputs["ikeSamlServers"] = state ? state.ikeSamlServers : undefined;
            resourceInputs["inForceVlanCos"] = state ? state.inForceVlanCos : undefined;
            resourceInputs["inbandwidth"] = state ? state.inbandwidth : undefined;
            resourceInputs["ingressCos"] = state ? state.ingressCos : undefined;
            resourceInputs["ingressShapingProfile"] = state ? state.ingressShapingProfile : undefined;
            resourceInputs["ingressSpilloverThreshold"] = state ? state.ingressSpilloverThreshold : undefined;
            resourceInputs["interconnectProfile"] = state ? state.interconnectProfile : undefined;
            resourceInputs["internal"] = state ? state.internal : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["ipManagedByFortiipam"] = state ? state.ipManagedByFortiipam : undefined;
            resourceInputs["ipmac"] = state ? state.ipmac : undefined;
            resourceInputs["ipsSnifferMode"] = state ? state.ipsSnifferMode : undefined;
            resourceInputs["ipunnumbered"] = state ? state.ipunnumbered : undefined;
            resourceInputs["ipv6"] = state ? state.ipv6 : undefined;
            resourceInputs["l2forward"] = state ? state.l2forward : undefined;
            resourceInputs["l2tpClient"] = state ? state.l2tpClient : undefined;
            resourceInputs["lacpHaSecondary"] = state ? state.lacpHaSecondary : undefined;
            resourceInputs["lacpHaSlave"] = state ? state.lacpHaSlave : undefined;
            resourceInputs["lacpMode"] = state ? state.lacpMode : undefined;
            resourceInputs["lacpSpeed"] = state ? state.lacpSpeed : undefined;
            resourceInputs["largeReceiveOffload"] = state ? state.largeReceiveOffload : undefined;
            resourceInputs["lcpEchoInterval"] = state ? state.lcpEchoInterval : undefined;
            resourceInputs["lcpMaxEchoFails"] = state ? state.lcpMaxEchoFails : undefined;
            resourceInputs["linkUpDelay"] = state ? state.linkUpDelay : undefined;
            resourceInputs["listenForticlientConnection"] = state ? state.listenForticlientConnection : undefined;
            resourceInputs["lldpNetworkPolicy"] = state ? state.lldpNetworkPolicy : undefined;
            resourceInputs["lldpReception"] = state ? state.lldpReception : undefined;
            resourceInputs["lldpTransmission"] = state ? state.lldpTransmission : undefined;
            resourceInputs["log"] = state ? state.log : undefined;
            resourceInputs["macaddr"] = state ? state.macaddr : undefined;
            resourceInputs["managedSubnetworkSize"] = state ? state.managedSubnetworkSize : undefined;
            resourceInputs["managementIp"] = state ? state.managementIp : undefined;
            resourceInputs["maxEgressBurstRate"] = state ? state.maxEgressBurstRate : undefined;
            resourceInputs["maxEgressRate"] = state ? state.maxEgressRate : undefined;
            resourceInputs["measuredDownstreamBandwidth"] = state ? state.measuredDownstreamBandwidth : undefined;
            resourceInputs["measuredUpstreamBandwidth"] = state ? state.measuredUpstreamBandwidth : undefined;
            resourceInputs["mediatype"] = state ? state.mediatype : undefined;
            resourceInputs["member"] = state ? state.member : undefined;
            resourceInputs["minLinks"] = state ? state.minLinks : undefined;
            resourceInputs["minLinksDown"] = state ? state.minLinksDown : undefined;
            resourceInputs["mirroringDirection"] = state ? state.mirroringDirection : undefined;
            resourceInputs["mirroringPort"] = state ? state.mirroringPort : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["monitorBandwidth"] = state ? state.monitorBandwidth : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["mtuOverride"] = state ? state.mtuOverride : undefined;
            resourceInputs["muxType"] = state ? state.muxType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ndiscforward"] = state ? state.ndiscforward : undefined;
            resourceInputs["netbiosForward"] = state ? state.netbiosForward : undefined;
            resourceInputs["netflowSampler"] = state ? state.netflowSampler : undefined;
            resourceInputs["npQosProfile"] = state ? state.npQosProfile : undefined;
            resourceInputs["npuFastpath"] = state ? state.npuFastpath : undefined;
            resourceInputs["nst"] = state ? state.nst : undefined;
            resourceInputs["outForceVlanCos"] = state ? state.outForceVlanCos : undefined;
            resourceInputs["outbandwidth"] = state ? state.outbandwidth : undefined;
            resourceInputs["padtRetryTimeout"] = state ? state.padtRetryTimeout : undefined;
            resourceInputs["passwords"] = state ? state.passwords : undefined;
            resourceInputs["peerInterface"] = state ? state.peerInterface : undefined;
            resourceInputs["phyMode"] = state ? state.phyMode : undefined;
            resourceInputs["pingServStatus"] = state ? state.pingServStatus : undefined;
            resourceInputs["poe"] = state ? state.poe : undefined;
            resourceInputs["pollingInterval"] = state ? state.pollingInterval : undefined;
            resourceInputs["portMirroring"] = state ? state.portMirroring : undefined;
            resourceInputs["pppoeUnnumberedNegotiate"] = state ? state.pppoeUnnumberedNegotiate : undefined;
            resourceInputs["pptpAuthType"] = state ? state.pptpAuthType : undefined;
            resourceInputs["pptpClient"] = state ? state.pptpClient : undefined;
            resourceInputs["pptpPasswords"] = state ? state.pptpPasswords : undefined;
            resourceInputs["pptpServerIp"] = state ? state.pptpServerIp : undefined;
            resourceInputs["pptpTimeout"] = state ? state.pptpTimeout : undefined;
            resourceInputs["pptpUser"] = state ? state.pptpUser : undefined;
            resourceInputs["preserveSessionRoute"] = state ? state.preserveSessionRoute : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["priorityOverride"] = state ? state.priorityOverride : undefined;
            resourceInputs["proxyCaptivePortal"] = state ? state.proxyCaptivePortal : undefined;
            resourceInputs["pvcAtmQos"] = state ? state.pvcAtmQos : undefined;
            resourceInputs["pvcChan"] = state ? state.pvcChan : undefined;
            resourceInputs["pvcCrc"] = state ? state.pvcCrc : undefined;
            resourceInputs["pvcPcr"] = state ? state.pvcPcr : undefined;
            resourceInputs["pvcScr"] = state ? state.pvcScr : undefined;
            resourceInputs["pvcVlanId"] = state ? state.pvcVlanId : undefined;
            resourceInputs["pvcVlanRxId"] = state ? state.pvcVlanRxId : undefined;
            resourceInputs["pvcVlanRxOp"] = state ? state.pvcVlanRxOp : undefined;
            resourceInputs["pvcVlanTxId"] = state ? state.pvcVlanTxId : undefined;
            resourceInputs["pvcVlanTxOp"] = state ? state.pvcVlanTxOp : undefined;
            resourceInputs["reachableTime"] = state ? state.reachableTime : undefined;
            resourceInputs["redundantInterface"] = state ? state.redundantInterface : undefined;
            resourceInputs["remoteIp"] = state ? state.remoteIp : undefined;
            resourceInputs["replacemsgOverrideGroup"] = state ? state.replacemsgOverrideGroup : undefined;
            resourceInputs["retransmission"] = state ? state.retransmission : undefined;
            resourceInputs["ringRx"] = state ? state.ringRx : undefined;
            resourceInputs["ringTx"] = state ? state.ringTx : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["sampleDirection"] = state ? state.sampleDirection : undefined;
            resourceInputs["sampleRate"] = state ? state.sampleRate : undefined;
            resourceInputs["scanBotnetConnections"] = state ? state.scanBotnetConnections : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["secondaryIp"] = state ? state.secondaryIp : undefined;
            resourceInputs["secondaryips"] = state ? state.secondaryips : undefined;
            resourceInputs["security8021xDynamicVlanId"] = state ? state.security8021xDynamicVlanId : undefined;
            resourceInputs["security8021xMaster"] = state ? state.security8021xMaster : undefined;
            resourceInputs["security8021xMemberMode"] = state ? state.security8021xMemberMode : undefined;
            resourceInputs["security8021xMode"] = state ? state.security8021xMode : undefined;
            resourceInputs["securityExemptList"] = state ? state.securityExemptList : undefined;
            resourceInputs["securityExternalLogout"] = state ? state.securityExternalLogout : undefined;
            resourceInputs["securityExternalWeb"] = state ? state.securityExternalWeb : undefined;
            resourceInputs["securityGroups"] = state ? state.securityGroups : undefined;
            resourceInputs["securityMacAuthBypass"] = state ? state.securityMacAuthBypass : undefined;
            resourceInputs["securityMode"] = state ? state.securityMode : undefined;
            resourceInputs["securityRedirectUrl"] = state ? state.securityRedirectUrl : undefined;
            resourceInputs["selectProfile30a35b"] = state ? state.selectProfile30a35b : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["sflowSampler"] = state ? state.sflowSampler : undefined;
            resourceInputs["sfpDsl"] = state ? state.sfpDsl : undefined;
            resourceInputs["sfpDslAdslFallback"] = state ? state.sfpDslAdslFallback : undefined;
            resourceInputs["sfpDslAutodetect"] = state ? state.sfpDslAutodetect : undefined;
            resourceInputs["sfpDslMac"] = state ? state.sfpDslMac : undefined;
            resourceInputs["speed"] = state ? state.speed : undefined;
            resourceInputs["spilloverThreshold"] = state ? state.spilloverThreshold : undefined;
            resourceInputs["srcCheck"] = state ? state.srcCheck : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["stp"] = state ? state.stp : undefined;
            resourceInputs["stpEdge"] = state ? state.stpEdge : undefined;
            resourceInputs["stpHaSecondary"] = state ? state.stpHaSecondary : undefined;
            resourceInputs["stpHaSlave"] = state ? state.stpHaSlave : undefined;
            resourceInputs["stpforward"] = state ? state.stpforward : undefined;
            resourceInputs["stpforwardMode"] = state ? state.stpforwardMode : undefined;
            resourceInputs["stripPriorityVlanTag"] = state ? state.stripPriorityVlanTag : undefined;
            resourceInputs["subst"] = state ? state.subst : undefined;
            resourceInputs["substituteDstMac"] = state ? state.substituteDstMac : undefined;
            resourceInputs["swAlgorithm"] = state ? state.swAlgorithm : undefined;
            resourceInputs["swcFirstCreate"] = state ? state.swcFirstCreate : undefined;
            resourceInputs["swcVlan"] = state ? state.swcVlan : undefined;
            resourceInputs["switch"] = state ? state.switch : undefined;
            resourceInputs["switchControllerAccessVlan"] = state ? state.switchControllerAccessVlan : undefined;
            resourceInputs["switchControllerArpInspection"] = state ? state.switchControllerArpInspection : undefined;
            resourceInputs["switchControllerAuth"] = state ? state.switchControllerAuth : undefined;
            resourceInputs["switchControllerDhcpSnooping"] = state ? state.switchControllerDhcpSnooping : undefined;
            resourceInputs["switchControllerDhcpSnoopingOption82"] = state ? state.switchControllerDhcpSnoopingOption82 : undefined;
            resourceInputs["switchControllerDhcpSnoopingVerifyMac"] = state ? state.switchControllerDhcpSnoopingVerifyMac : undefined;
            resourceInputs["switchControllerDynamic"] = state ? state.switchControllerDynamic : undefined;
            resourceInputs["switchControllerFeature"] = state ? state.switchControllerFeature : undefined;
            resourceInputs["switchControllerIgmpSnooping"] = state ? state.switchControllerIgmpSnooping : undefined;
            resourceInputs["switchControllerIgmpSnoopingFastLeave"] = state ? state.switchControllerIgmpSnoopingFastLeave : undefined;
            resourceInputs["switchControllerIgmpSnoopingProxy"] = state ? state.switchControllerIgmpSnoopingProxy : undefined;
            resourceInputs["switchControllerIotScanning"] = state ? state.switchControllerIotScanning : undefined;
            resourceInputs["switchControllerLearningLimit"] = state ? state.switchControllerLearningLimit : undefined;
            resourceInputs["switchControllerMgmtVlan"] = state ? state.switchControllerMgmtVlan : undefined;
            resourceInputs["switchControllerNac"] = state ? state.switchControllerNac : undefined;
            resourceInputs["switchControllerNetflowCollect"] = state ? state.switchControllerNetflowCollect : undefined;
            resourceInputs["switchControllerOffload"] = state ? state.switchControllerOffload : undefined;
            resourceInputs["switchControllerOffloadGw"] = state ? state.switchControllerOffloadGw : undefined;
            resourceInputs["switchControllerOffloadIp"] = state ? state.switchControllerOffloadIp : undefined;
            resourceInputs["switchControllerOffloading"] = state ? state.switchControllerOffloading : undefined;
            resourceInputs["switchControllerOffloadingGw"] = state ? state.switchControllerOffloadingGw : undefined;
            resourceInputs["switchControllerOffloadingIp"] = state ? state.switchControllerOffloadingIp : undefined;
            resourceInputs["switchControllerRadiusServer"] = state ? state.switchControllerRadiusServer : undefined;
            resourceInputs["switchControllerRspanMode"] = state ? state.switchControllerRspanMode : undefined;
            resourceInputs["switchControllerSourceIp"] = state ? state.switchControllerSourceIp : undefined;
            resourceInputs["switchControllerTrafficPolicy"] = state ? state.switchControllerTrafficPolicy : undefined;
            resourceInputs["systemId"] = state ? state.systemId : undefined;
            resourceInputs["systemIdType"] = state ? state.systemIdType : undefined;
            resourceInputs["tcMode"] = state ? state.tcMode : undefined;
            resourceInputs["tcpMss"] = state ? state.tcpMss : undefined;
            resourceInputs["trunk"] = state ? state.trunk : undefined;
            resourceInputs["trustIp1"] = state ? state.trustIp1 : undefined;
            resourceInputs["trustIp2"] = state ? state.trustIp2 : undefined;
            resourceInputs["trustIp3"] = state ? state.trustIp3 : undefined;
            resourceInputs["trustIp61"] = state ? state.trustIp61 : undefined;
            resourceInputs["trustIp62"] = state ? state.trustIp62 : undefined;
            resourceInputs["trustIp63"] = state ? state.trustIp63 : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["vci"] = state ? state.vci : undefined;
            resourceInputs["vectoring"] = state ? state.vectoring : undefined;
            resourceInputs["vindex"] = state ? state.vindex : undefined;
            resourceInputs["vlan"] = state ? state.vlan : undefined;
            resourceInputs["vlanOpMode"] = state ? state.vlanOpMode : undefined;
            resourceInputs["vlanProtocol"] = state ? state.vlanProtocol : undefined;
            resourceInputs["vlanforward"] = state ? state.vlanforward : undefined;
            resourceInputs["vlanid"] = state ? state.vlanid : undefined;
            resourceInputs["vpi"] = state ? state.vpi : undefined;
            resourceInputs["vrf"] = state ? state.vrf : undefined;
            resourceInputs["vrrpVirtualMac"] = state ? state.vrrpVirtualMac : undefined;
            resourceInputs["vrrps"] = state ? state.vrrps : undefined;
            resourceInputs["wccp"] = state ? state.wccp : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
            resourceInputs["wifi5gThreshold"] = state ? state.wifi5gThreshold : undefined;
            resourceInputs["wifiAcl"] = state ? state.wifiAcl : undefined;
            resourceInputs["wifiApBand"] = state ? state.wifiApBand : undefined;
            resourceInputs["wifiAuth"] = state ? state.wifiAuth : undefined;
            resourceInputs["wifiAutoConnect"] = state ? state.wifiAutoConnect : undefined;
            resourceInputs["wifiAutoSave"] = state ? state.wifiAutoSave : undefined;
            resourceInputs["wifiBroadcastSsid"] = state ? state.wifiBroadcastSsid : undefined;
            resourceInputs["wifiDnsServer1"] = state ? state.wifiDnsServer1 : undefined;
            resourceInputs["wifiDnsServer2"] = state ? state.wifiDnsServer2 : undefined;
            resourceInputs["wifiEncrypt"] = state ? state.wifiEncrypt : undefined;
            resourceInputs["wifiFragmentThreshold"] = state ? state.wifiFragmentThreshold : undefined;
            resourceInputs["wifiGateway"] = state ? state.wifiGateway : undefined;
            resourceInputs["wifiKeyindex"] = state ? state.wifiKeyindex : undefined;
            resourceInputs["wifiKeys"] = state ? state.wifiKeys : undefined;
            resourceInputs["wifiMacFilter"] = state ? state.wifiMacFilter : undefined;
            resourceInputs["wifiPassphrases"] = state ? state.wifiPassphrases : undefined;
            resourceInputs["wifiRadiusServer"] = state ? state.wifiRadiusServer : undefined;
            resourceInputs["wifiRtsThreshold"] = state ? state.wifiRtsThreshold : undefined;
            resourceInputs["wifiSecurity"] = state ? state.wifiSecurity : undefined;
            resourceInputs["wifiSsid"] = state ? state.wifiSsid : undefined;
            resourceInputs["wifiUsergroup"] = state ? state.wifiUsergroup : undefined;
            resourceInputs["winsIp"] = state ? state.winsIp : undefined;
        } else {
            const args = argsOrState as ObjectFspVlanInterfaceArgs | undefined;
            if ((!args || args.vlan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vlan'");
            }
            resourceInputs["acName"] = args ? args.acName : undefined;
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["aggregate"] = args ? args.aggregate : undefined;
            resourceInputs["aggregateType"] = args ? args.aggregateType : undefined;
            resourceInputs["algorithm"] = args ? args.algorithm : undefined;
            resourceInputs["alias"] = args ? args.alias : undefined;
            resourceInputs["allowaccesses"] = args ? args.allowaccesses : undefined;
            resourceInputs["annex"] = args ? args.annex : undefined;
            resourceInputs["apDiscover"] = args ? args.apDiscover : undefined;
            resourceInputs["arpforward"] = args ? args.arpforward : undefined;
            resourceInputs["atmProtocol"] = args ? args.atmProtocol : undefined;
            resourceInputs["authCert"] = args ? args.authCert : undefined;
            resourceInputs["authPortalAddr"] = args ? args.authPortalAddr : undefined;
            resourceInputs["authType"] = args ? args.authType : undefined;
            resourceInputs["autoAuthExtensionDevice"] = args ? args.autoAuthExtensionDevice : undefined;
            resourceInputs["bandwidthMeasureTime"] = args ? args.bandwidthMeasureTime : undefined;
            resourceInputs["bfd"] = args ? args.bfd : undefined;
            resourceInputs["bfdDesiredMinTx"] = args ? args.bfdDesiredMinTx : undefined;
            resourceInputs["bfdDetectMult"] = args ? args.bfdDetectMult : undefined;
            resourceInputs["bfdRequiredMinRx"] = args ? args.bfdRequiredMinRx : undefined;
            resourceInputs["broadcastForticlientDiscovery"] = args ? args.broadcastForticlientDiscovery : undefined;
            resourceInputs["broadcastForward"] = args ? args.broadcastForward : undefined;
            resourceInputs["captivePortal"] = args ? args.captivePortal : undefined;
            resourceInputs["cliConnStatus"] = args ? args.cliConnStatus : undefined;
            resourceInputs["color"] = args ? args.color : undefined;
            resourceInputs["ddns"] = args ? args.ddns : undefined;
            resourceInputs["ddnsAuth"] = args ? args.ddnsAuth : undefined;
            resourceInputs["ddnsDomain"] = args ? args.ddnsDomain : undefined;
            resourceInputs["ddnsKey"] = args ? args.ddnsKey : undefined;
            resourceInputs["ddnsKeyname"] = args ? args.ddnsKeyname : undefined;
            resourceInputs["ddnsPasswords"] = args?.ddnsPasswords ? pulumi.secret(args.ddnsPasswords) : undefined;
            resourceInputs["ddnsServer"] = args ? args.ddnsServer : undefined;
            resourceInputs["ddnsServerIp"] = args ? args.ddnsServerIp : undefined;
            resourceInputs["ddnsSn"] = args ? args.ddnsSn : undefined;
            resourceInputs["ddnsTtl"] = args ? args.ddnsTtl : undefined;
            resourceInputs["ddnsUsername"] = args ? args.ddnsUsername : undefined;
            resourceInputs["ddnsZone"] = args ? args.ddnsZone : undefined;
            resourceInputs["dedicatedTo"] = args ? args.dedicatedTo : undefined;
            resourceInputs["defaultPurdueLevel"] = args ? args.defaultPurdueLevel : undefined;
            resourceInputs["defaultgw"] = args ? args.defaultgw : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["detectedPeerMtu"] = args ? args.detectedPeerMtu : undefined;
            resourceInputs["detectprotocols"] = args ? args.detectprotocols : undefined;
            resourceInputs["detectserver"] = args ? args.detectserver : undefined;
            resourceInputs["deviceAccessList"] = args ? args.deviceAccessList : undefined;
            resourceInputs["deviceIdentification"] = args ? args.deviceIdentification : undefined;
            resourceInputs["deviceIdentificationActiveScan"] = args ? args.deviceIdentificationActiveScan : undefined;
            resourceInputs["deviceNetscan"] = args ? args.deviceNetscan : undefined;
            resourceInputs["deviceUserIdentification"] = args ? args.deviceUserIdentification : undefined;
            resourceInputs["devindex"] = args ? args.devindex : undefined;
            resourceInputs["dhcpBroadcastFlag"] = args ? args.dhcpBroadcastFlag : undefined;
            resourceInputs["dhcpClasslessRouteAddition"] = args ? args.dhcpClasslessRouteAddition : undefined;
            resourceInputs["dhcpClientIdentifier"] = args ? args.dhcpClientIdentifier : undefined;
            resourceInputs["dhcpRelayAgentOption"] = args ? args.dhcpRelayAgentOption : undefined;
            resourceInputs["dhcpRelayCircuitId"] = args ? args.dhcpRelayCircuitId : undefined;
            resourceInputs["dhcpRelayInterface"] = args ? args.dhcpRelayInterface : undefined;
            resourceInputs["dhcpRelayInterfaceSelectMethod"] = args ? args.dhcpRelayInterfaceSelectMethod : undefined;
            resourceInputs["dhcpRelayIps"] = args ? args.dhcpRelayIps : undefined;
            resourceInputs["dhcpRelayLinkSelection"] = args ? args.dhcpRelayLinkSelection : undefined;
            resourceInputs["dhcpRelayRequestAllServer"] = args ? args.dhcpRelayRequestAllServer : undefined;
            resourceInputs["dhcpRelayService"] = args ? args.dhcpRelayService : undefined;
            resourceInputs["dhcpRelaySourceIp"] = args ? args.dhcpRelaySourceIp : undefined;
            resourceInputs["dhcpRelayType"] = args ? args.dhcpRelayType : undefined;
            resourceInputs["dhcpRenewTime"] = args ? args.dhcpRenewTime : undefined;
            resourceInputs["dhcpSmartRelay"] = args ? args.dhcpSmartRelay : undefined;
            resourceInputs["discRetryTimeout"] = args ? args.discRetryTimeout : undefined;
            resourceInputs["disconnectThreshold"] = args ? args.disconnectThreshold : undefined;
            resourceInputs["distance"] = args ? args.distance : undefined;
            resourceInputs["dnsQuery"] = args ? args.dnsQuery : undefined;
            resourceInputs["dnsServerOverride"] = args ? args.dnsServerOverride : undefined;
            resourceInputs["dnsServerProtocols"] = args ? args.dnsServerProtocols : undefined;
            resourceInputs["dropFragment"] = args ? args.dropFragment : undefined;
            resourceInputs["dropOverlappedFragment"] = args ? args.dropOverlappedFragment : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["eapCaCerts"] = args ? args.eapCaCerts : undefined;
            resourceInputs["eapIdentity"] = args ? args.eapIdentity : undefined;
            resourceInputs["eapMethod"] = args ? args.eapMethod : undefined;
            resourceInputs["eapPasswords"] = args?.eapPasswords ? pulumi.secret(args.eapPasswords) : undefined;
            resourceInputs["eapSupplicant"] = args ? args.eapSupplicant : undefined;
            resourceInputs["eapUserCerts"] = args ? args.eapUserCerts : undefined;
            resourceInputs["egressCos"] = args ? args.egressCos : undefined;
            resourceInputs["egressShapingProfile"] = args ? args.egressShapingProfile : undefined;
            resourceInputs["eip"] = args ? args.eip : undefined;
            resourceInputs["endpointCompliance"] = args ? args.endpointCompliance : undefined;
            resourceInputs["estimatedDownstreamBandwidth"] = args ? args.estimatedDownstreamBandwidth : undefined;
            resourceInputs["estimatedUpstreamBandwidth"] = args ? args.estimatedUpstreamBandwidth : undefined;
            resourceInputs["explicitFtpProxy"] = args ? args.explicitFtpProxy : undefined;
            resourceInputs["explicitWebProxy"] = args ? args.explicitWebProxy : undefined;
            resourceInputs["external"] = args ? args.external : undefined;
            resourceInputs["failActionOnExtender"] = args ? args.failActionOnExtender : undefined;
            resourceInputs["failAlertInterfaces"] = args ? args.failAlertInterfaces : undefined;
            resourceInputs["failAlertMethod"] = args ? args.failAlertMethod : undefined;
            resourceInputs["failDetect"] = args ? args.failDetect : undefined;
            resourceInputs["failDetectOptions"] = args ? args.failDetectOptions : undefined;
            resourceInputs["fdp"] = args ? args.fdp : undefined;
            resourceInputs["fortiheartbeat"] = args ? args.fortiheartbeat : undefined;
            resourceInputs["fortilink"] = args ? args.fortilink : undefined;
            resourceInputs["fortilinkBackupLink"] = args ? args.fortilinkBackupLink : undefined;
            resourceInputs["fortilinkNeighborDetect"] = args ? args.fortilinkNeighborDetect : undefined;
            resourceInputs["fortilinkSplitInterface"] = args ? args.fortilinkSplitInterface : undefined;
            resourceInputs["fortilinkStacking"] = args ? args.fortilinkStacking : undefined;
            resourceInputs["forwardDomain"] = args ? args.forwardDomain : undefined;
            resourceInputs["forwardErrorCorrection"] = args ? args.forwardErrorCorrection : undefined;
            resourceInputs["fpAnomalies"] = args ? args.fpAnomalies : undefined;
            resourceInputs["fpDisables"] = args ? args.fpDisables : undefined;
            resourceInputs["gatewayAddress"] = args ? args.gatewayAddress : undefined;
            resourceInputs["genericReceiveOffload"] = args ? args.genericReceiveOffload : undefined;
            resourceInputs["giGk"] = args ? args.giGk : undefined;
            resourceInputs["gwaddr"] = args ? args.gwaddr : undefined;
            resourceInputs["gwdetect"] = args ? args.gwdetect : undefined;
            resourceInputs["haPriority"] = args ? args.haPriority : undefined;
            resourceInputs["icmpAcceptRedirect"] = args ? args.icmpAcceptRedirect : undefined;
            resourceInputs["icmpRedirect"] = args ? args.icmpRedirect : undefined;
            resourceInputs["icmpSendRedirect"] = args ? args.icmpSendRedirect : undefined;
            resourceInputs["identAccept"] = args ? args.identAccept : undefined;
            resourceInputs["idleTimeout"] = args ? args.idleTimeout : undefined;
            resourceInputs["ifMdix"] = args ? args.ifMdix : undefined;
            resourceInputs["ifMedia"] = args ? args.ifMedia : undefined;
            resourceInputs["ikeSamlServers"] = args ? args.ikeSamlServers : undefined;
            resourceInputs["inForceVlanCos"] = args ? args.inForceVlanCos : undefined;
            resourceInputs["inbandwidth"] = args ? args.inbandwidth : undefined;
            resourceInputs["ingressCos"] = args ? args.ingressCos : undefined;
            resourceInputs["ingressShapingProfile"] = args ? args.ingressShapingProfile : undefined;
            resourceInputs["ingressSpilloverThreshold"] = args ? args.ingressSpilloverThreshold : undefined;
            resourceInputs["interconnectProfile"] = args ? args.interconnectProfile : undefined;
            resourceInputs["internal"] = args ? args.internal : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["ipManagedByFortiipam"] = args ? args.ipManagedByFortiipam : undefined;
            resourceInputs["ipmac"] = args ? args.ipmac : undefined;
            resourceInputs["ipsSnifferMode"] = args ? args.ipsSnifferMode : undefined;
            resourceInputs["ipunnumbered"] = args ? args.ipunnumbered : undefined;
            resourceInputs["ipv6"] = args ? args.ipv6 : undefined;
            resourceInputs["l2forward"] = args ? args.l2forward : undefined;
            resourceInputs["l2tpClient"] = args ? args.l2tpClient : undefined;
            resourceInputs["lacpHaSecondary"] = args ? args.lacpHaSecondary : undefined;
            resourceInputs["lacpHaSlave"] = args ? args.lacpHaSlave : undefined;
            resourceInputs["lacpMode"] = args ? args.lacpMode : undefined;
            resourceInputs["lacpSpeed"] = args ? args.lacpSpeed : undefined;
            resourceInputs["largeReceiveOffload"] = args ? args.largeReceiveOffload : undefined;
            resourceInputs["lcpEchoInterval"] = args ? args.lcpEchoInterval : undefined;
            resourceInputs["lcpMaxEchoFails"] = args ? args.lcpMaxEchoFails : undefined;
            resourceInputs["linkUpDelay"] = args ? args.linkUpDelay : undefined;
            resourceInputs["listenForticlientConnection"] = args ? args.listenForticlientConnection : undefined;
            resourceInputs["lldpNetworkPolicy"] = args ? args.lldpNetworkPolicy : undefined;
            resourceInputs["lldpReception"] = args ? args.lldpReception : undefined;
            resourceInputs["lldpTransmission"] = args ? args.lldpTransmission : undefined;
            resourceInputs["log"] = args ? args.log : undefined;
            resourceInputs["macaddr"] = args ? args.macaddr : undefined;
            resourceInputs["managedSubnetworkSize"] = args ? args.managedSubnetworkSize : undefined;
            resourceInputs["managementIp"] = args ? args.managementIp : undefined;
            resourceInputs["maxEgressBurstRate"] = args ? args.maxEgressBurstRate : undefined;
            resourceInputs["maxEgressRate"] = args ? args.maxEgressRate : undefined;
            resourceInputs["measuredDownstreamBandwidth"] = args ? args.measuredDownstreamBandwidth : undefined;
            resourceInputs["measuredUpstreamBandwidth"] = args ? args.measuredUpstreamBandwidth : undefined;
            resourceInputs["mediatype"] = args ? args.mediatype : undefined;
            resourceInputs["member"] = args ? args.member : undefined;
            resourceInputs["minLinks"] = args ? args.minLinks : undefined;
            resourceInputs["minLinksDown"] = args ? args.minLinksDown : undefined;
            resourceInputs["mirroringDirection"] = args ? args.mirroringDirection : undefined;
            resourceInputs["mirroringPort"] = args ? args.mirroringPort : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["monitorBandwidth"] = args ? args.monitorBandwidth : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["mtuOverride"] = args ? args.mtuOverride : undefined;
            resourceInputs["muxType"] = args ? args.muxType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ndiscforward"] = args ? args.ndiscforward : undefined;
            resourceInputs["netbiosForward"] = args ? args.netbiosForward : undefined;
            resourceInputs["netflowSampler"] = args ? args.netflowSampler : undefined;
            resourceInputs["npQosProfile"] = args ? args.npQosProfile : undefined;
            resourceInputs["npuFastpath"] = args ? args.npuFastpath : undefined;
            resourceInputs["nst"] = args ? args.nst : undefined;
            resourceInputs["outForceVlanCos"] = args ? args.outForceVlanCos : undefined;
            resourceInputs["outbandwidth"] = args ? args.outbandwidth : undefined;
            resourceInputs["padtRetryTimeout"] = args ? args.padtRetryTimeout : undefined;
            resourceInputs["passwords"] = args?.passwords ? pulumi.secret(args.passwords) : undefined;
            resourceInputs["peerInterface"] = args ? args.peerInterface : undefined;
            resourceInputs["phyMode"] = args ? args.phyMode : undefined;
            resourceInputs["pingServStatus"] = args ? args.pingServStatus : undefined;
            resourceInputs["poe"] = args ? args.poe : undefined;
            resourceInputs["pollingInterval"] = args ? args.pollingInterval : undefined;
            resourceInputs["portMirroring"] = args ? args.portMirroring : undefined;
            resourceInputs["pppoeUnnumberedNegotiate"] = args ? args.pppoeUnnumberedNegotiate : undefined;
            resourceInputs["pptpAuthType"] = args ? args.pptpAuthType : undefined;
            resourceInputs["pptpClient"] = args ? args.pptpClient : undefined;
            resourceInputs["pptpPasswords"] = args?.pptpPasswords ? pulumi.secret(args.pptpPasswords) : undefined;
            resourceInputs["pptpServerIp"] = args ? args.pptpServerIp : undefined;
            resourceInputs["pptpTimeout"] = args ? args.pptpTimeout : undefined;
            resourceInputs["pptpUser"] = args ? args.pptpUser : undefined;
            resourceInputs["preserveSessionRoute"] = args ? args.preserveSessionRoute : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["priorityOverride"] = args ? args.priorityOverride : undefined;
            resourceInputs["proxyCaptivePortal"] = args ? args.proxyCaptivePortal : undefined;
            resourceInputs["pvcAtmQos"] = args ? args.pvcAtmQos : undefined;
            resourceInputs["pvcChan"] = args ? args.pvcChan : undefined;
            resourceInputs["pvcCrc"] = args ? args.pvcCrc : undefined;
            resourceInputs["pvcPcr"] = args ? args.pvcPcr : undefined;
            resourceInputs["pvcScr"] = args ? args.pvcScr : undefined;
            resourceInputs["pvcVlanId"] = args ? args.pvcVlanId : undefined;
            resourceInputs["pvcVlanRxId"] = args ? args.pvcVlanRxId : undefined;
            resourceInputs["pvcVlanRxOp"] = args ? args.pvcVlanRxOp : undefined;
            resourceInputs["pvcVlanTxId"] = args ? args.pvcVlanTxId : undefined;
            resourceInputs["pvcVlanTxOp"] = args ? args.pvcVlanTxOp : undefined;
            resourceInputs["reachableTime"] = args ? args.reachableTime : undefined;
            resourceInputs["redundantInterface"] = args ? args.redundantInterface : undefined;
            resourceInputs["remoteIp"] = args ? args.remoteIp : undefined;
            resourceInputs["replacemsgOverrideGroup"] = args ? args.replacemsgOverrideGroup : undefined;
            resourceInputs["retransmission"] = args ? args.retransmission : undefined;
            resourceInputs["ringRx"] = args ? args.ringRx : undefined;
            resourceInputs["ringTx"] = args ? args.ringTx : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["sampleDirection"] = args ? args.sampleDirection : undefined;
            resourceInputs["sampleRate"] = args ? args.sampleRate : undefined;
            resourceInputs["scanBotnetConnections"] = args ? args.scanBotnetConnections : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["secondaryIp"] = args ? args.secondaryIp : undefined;
            resourceInputs["secondaryips"] = args ? args.secondaryips : undefined;
            resourceInputs["security8021xDynamicVlanId"] = args ? args.security8021xDynamicVlanId : undefined;
            resourceInputs["security8021xMaster"] = args ? args.security8021xMaster : undefined;
            resourceInputs["security8021xMemberMode"] = args ? args.security8021xMemberMode : undefined;
            resourceInputs["security8021xMode"] = args ? args.security8021xMode : undefined;
            resourceInputs["securityExemptList"] = args ? args.securityExemptList : undefined;
            resourceInputs["securityExternalLogout"] = args ? args.securityExternalLogout : undefined;
            resourceInputs["securityExternalWeb"] = args ? args.securityExternalWeb : undefined;
            resourceInputs["securityGroups"] = args ? args.securityGroups : undefined;
            resourceInputs["securityMacAuthBypass"] = args ? args.securityMacAuthBypass : undefined;
            resourceInputs["securityMode"] = args ? args.securityMode : undefined;
            resourceInputs["securityRedirectUrl"] = args ? args.securityRedirectUrl : undefined;
            resourceInputs["selectProfile30a35b"] = args ? args.selectProfile30a35b : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["sflowSampler"] = args ? args.sflowSampler : undefined;
            resourceInputs["sfpDsl"] = args ? args.sfpDsl : undefined;
            resourceInputs["sfpDslAdslFallback"] = args ? args.sfpDslAdslFallback : undefined;
            resourceInputs["sfpDslAutodetect"] = args ? args.sfpDslAutodetect : undefined;
            resourceInputs["sfpDslMac"] = args ? args.sfpDslMac : undefined;
            resourceInputs["speed"] = args ? args.speed : undefined;
            resourceInputs["spilloverThreshold"] = args ? args.spilloverThreshold : undefined;
            resourceInputs["srcCheck"] = args ? args.srcCheck : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["stp"] = args ? args.stp : undefined;
            resourceInputs["stpEdge"] = args ? args.stpEdge : undefined;
            resourceInputs["stpHaSecondary"] = args ? args.stpHaSecondary : undefined;
            resourceInputs["stpHaSlave"] = args ? args.stpHaSlave : undefined;
            resourceInputs["stpforward"] = args ? args.stpforward : undefined;
            resourceInputs["stpforwardMode"] = args ? args.stpforwardMode : undefined;
            resourceInputs["stripPriorityVlanTag"] = args ? args.stripPriorityVlanTag : undefined;
            resourceInputs["subst"] = args ? args.subst : undefined;
            resourceInputs["substituteDstMac"] = args ? args.substituteDstMac : undefined;
            resourceInputs["swAlgorithm"] = args ? args.swAlgorithm : undefined;
            resourceInputs["swcFirstCreate"] = args ? args.swcFirstCreate : undefined;
            resourceInputs["swcVlan"] = args ? args.swcVlan : undefined;
            resourceInputs["switch"] = args ? args.switch : undefined;
            resourceInputs["switchControllerAccessVlan"] = args ? args.switchControllerAccessVlan : undefined;
            resourceInputs["switchControllerArpInspection"] = args ? args.switchControllerArpInspection : undefined;
            resourceInputs["switchControllerAuth"] = args ? args.switchControllerAuth : undefined;
            resourceInputs["switchControllerDhcpSnooping"] = args ? args.switchControllerDhcpSnooping : undefined;
            resourceInputs["switchControllerDhcpSnoopingOption82"] = args ? args.switchControllerDhcpSnoopingOption82 : undefined;
            resourceInputs["switchControllerDhcpSnoopingVerifyMac"] = args ? args.switchControllerDhcpSnoopingVerifyMac : undefined;
            resourceInputs["switchControllerDynamic"] = args ? args.switchControllerDynamic : undefined;
            resourceInputs["switchControllerFeature"] = args ? args.switchControllerFeature : undefined;
            resourceInputs["switchControllerIgmpSnooping"] = args ? args.switchControllerIgmpSnooping : undefined;
            resourceInputs["switchControllerIgmpSnoopingFastLeave"] = args ? args.switchControllerIgmpSnoopingFastLeave : undefined;
            resourceInputs["switchControllerIgmpSnoopingProxy"] = args ? args.switchControllerIgmpSnoopingProxy : undefined;
            resourceInputs["switchControllerIotScanning"] = args ? args.switchControllerIotScanning : undefined;
            resourceInputs["switchControllerLearningLimit"] = args ? args.switchControllerLearningLimit : undefined;
            resourceInputs["switchControllerMgmtVlan"] = args ? args.switchControllerMgmtVlan : undefined;
            resourceInputs["switchControllerNac"] = args ? args.switchControllerNac : undefined;
            resourceInputs["switchControllerNetflowCollect"] = args ? args.switchControllerNetflowCollect : undefined;
            resourceInputs["switchControllerOffload"] = args ? args.switchControllerOffload : undefined;
            resourceInputs["switchControllerOffloadGw"] = args ? args.switchControllerOffloadGw : undefined;
            resourceInputs["switchControllerOffloadIp"] = args ? args.switchControllerOffloadIp : undefined;
            resourceInputs["switchControllerOffloading"] = args ? args.switchControllerOffloading : undefined;
            resourceInputs["switchControllerOffloadingGw"] = args ? args.switchControllerOffloadingGw : undefined;
            resourceInputs["switchControllerOffloadingIp"] = args ? args.switchControllerOffloadingIp : undefined;
            resourceInputs["switchControllerRadiusServer"] = args ? args.switchControllerRadiusServer : undefined;
            resourceInputs["switchControllerRspanMode"] = args ? args.switchControllerRspanMode : undefined;
            resourceInputs["switchControllerSourceIp"] = args ? args.switchControllerSourceIp : undefined;
            resourceInputs["switchControllerTrafficPolicy"] = args ? args.switchControllerTrafficPolicy : undefined;
            resourceInputs["systemId"] = args ? args.systemId : undefined;
            resourceInputs["systemIdType"] = args ? args.systemIdType : undefined;
            resourceInputs["tcMode"] = args ? args.tcMode : undefined;
            resourceInputs["tcpMss"] = args ? args.tcpMss : undefined;
            resourceInputs["trunk"] = args ? args.trunk : undefined;
            resourceInputs["trustIp1"] = args ? args.trustIp1 : undefined;
            resourceInputs["trustIp2"] = args ? args.trustIp2 : undefined;
            resourceInputs["trustIp3"] = args ? args.trustIp3 : undefined;
            resourceInputs["trustIp61"] = args ? args.trustIp61 : undefined;
            resourceInputs["trustIp62"] = args ? args.trustIp62 : undefined;
            resourceInputs["trustIp63"] = args ? args.trustIp63 : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["vci"] = args ? args.vci : undefined;
            resourceInputs["vectoring"] = args ? args.vectoring : undefined;
            resourceInputs["vindex"] = args ? args.vindex : undefined;
            resourceInputs["vlan"] = args ? args.vlan : undefined;
            resourceInputs["vlanOpMode"] = args ? args.vlanOpMode : undefined;
            resourceInputs["vlanProtocol"] = args ? args.vlanProtocol : undefined;
            resourceInputs["vlanforward"] = args ? args.vlanforward : undefined;
            resourceInputs["vlanid"] = args ? args.vlanid : undefined;
            resourceInputs["vpi"] = args ? args.vpi : undefined;
            resourceInputs["vrf"] = args ? args.vrf : undefined;
            resourceInputs["vrrpVirtualMac"] = args ? args.vrrpVirtualMac : undefined;
            resourceInputs["vrrps"] = args ? args.vrrps : undefined;
            resourceInputs["wccp"] = args ? args.wccp : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
            resourceInputs["wifi5gThreshold"] = args ? args.wifi5gThreshold : undefined;
            resourceInputs["wifiAcl"] = args ? args.wifiAcl : undefined;
            resourceInputs["wifiApBand"] = args ? args.wifiApBand : undefined;
            resourceInputs["wifiAuth"] = args ? args.wifiAuth : undefined;
            resourceInputs["wifiAutoConnect"] = args ? args.wifiAutoConnect : undefined;
            resourceInputs["wifiAutoSave"] = args ? args.wifiAutoSave : undefined;
            resourceInputs["wifiBroadcastSsid"] = args ? args.wifiBroadcastSsid : undefined;
            resourceInputs["wifiDnsServer1"] = args ? args.wifiDnsServer1 : undefined;
            resourceInputs["wifiDnsServer2"] = args ? args.wifiDnsServer2 : undefined;
            resourceInputs["wifiEncrypt"] = args ? args.wifiEncrypt : undefined;
            resourceInputs["wifiFragmentThreshold"] = args ? args.wifiFragmentThreshold : undefined;
            resourceInputs["wifiGateway"] = args ? args.wifiGateway : undefined;
            resourceInputs["wifiKeyindex"] = args ? args.wifiKeyindex : undefined;
            resourceInputs["wifiKeys"] = args?.wifiKeys ? pulumi.secret(args.wifiKeys) : undefined;
            resourceInputs["wifiMacFilter"] = args ? args.wifiMacFilter : undefined;
            resourceInputs["wifiPassphrases"] = args?.wifiPassphrases ? pulumi.secret(args.wifiPassphrases) : undefined;
            resourceInputs["wifiRadiusServer"] = args ? args.wifiRadiusServer : undefined;
            resourceInputs["wifiRtsThreshold"] = args ? args.wifiRtsThreshold : undefined;
            resourceInputs["wifiSecurity"] = args ? args.wifiSecurity : undefined;
            resourceInputs["wifiSsid"] = args ? args.wifiSsid : undefined;
            resourceInputs["wifiUsergroup"] = args ? args.wifiUsergroup : undefined;
            resourceInputs["winsIp"] = args ? args.winsIp : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["ddnsPasswords", "eapPasswords", "passwords", "pptpPasswords", "wifiKeys", "wifiPassphrases"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ObjectFspVlanInterface.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectFspVlanInterface resources.
 */
export interface ObjectFspVlanInterfaceState {
    acName?: pulumi.Input<string>;
    adom?: pulumi.Input<string>;
    aggregate?: pulumi.Input<string>;
    aggregateType?: pulumi.Input<string>;
    algorithm?: pulumi.Input<string>;
    alias?: pulumi.Input<string>;
    allowaccesses?: pulumi.Input<pulumi.Input<string>[]>;
    annex?: pulumi.Input<string>;
    apDiscover?: pulumi.Input<string>;
    arpforward?: pulumi.Input<string>;
    atmProtocol?: pulumi.Input<string>;
    authCert?: pulumi.Input<string>;
    authPortalAddr?: pulumi.Input<string>;
    authType?: pulumi.Input<string>;
    autoAuthExtensionDevice?: pulumi.Input<string>;
    bandwidthMeasureTime?: pulumi.Input<number>;
    bfd?: pulumi.Input<string>;
    bfdDesiredMinTx?: pulumi.Input<number>;
    bfdDetectMult?: pulumi.Input<number>;
    bfdRequiredMinRx?: pulumi.Input<number>;
    broadcastForticlientDiscovery?: pulumi.Input<string>;
    broadcastForward?: pulumi.Input<string>;
    captivePortal?: pulumi.Input<number>;
    cliConnStatus?: pulumi.Input<number>;
    color?: pulumi.Input<number>;
    ddns?: pulumi.Input<string>;
    ddnsAuth?: pulumi.Input<string>;
    ddnsDomain?: pulumi.Input<string>;
    ddnsKey?: pulumi.Input<string>;
    ddnsKeyname?: pulumi.Input<string>;
    ddnsPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    ddnsServer?: pulumi.Input<string>;
    ddnsServerIp?: pulumi.Input<string>;
    ddnsSn?: pulumi.Input<string>;
    ddnsTtl?: pulumi.Input<number>;
    ddnsUsername?: pulumi.Input<string>;
    ddnsZone?: pulumi.Input<string>;
    dedicatedTo?: pulumi.Input<string>;
    defaultPurdueLevel?: pulumi.Input<string>;
    defaultgw?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    detectedPeerMtu?: pulumi.Input<number>;
    detectprotocols?: pulumi.Input<pulumi.Input<string>[]>;
    detectserver?: pulumi.Input<string>;
    deviceAccessList?: pulumi.Input<string>;
    deviceIdentification?: pulumi.Input<string>;
    deviceIdentificationActiveScan?: pulumi.Input<string>;
    deviceNetscan?: pulumi.Input<string>;
    deviceUserIdentification?: pulumi.Input<string>;
    devindex?: pulumi.Input<number>;
    dhcpBroadcastFlag?: pulumi.Input<string>;
    dhcpClasslessRouteAddition?: pulumi.Input<string>;
    dhcpClientIdentifier?: pulumi.Input<string>;
    dhcpRelayAgentOption?: pulumi.Input<string>;
    dhcpRelayCircuitId?: pulumi.Input<string>;
    dhcpRelayInterface?: pulumi.Input<string>;
    dhcpRelayInterfaceSelectMethod?: pulumi.Input<string>;
    dhcpRelayIps?: pulumi.Input<pulumi.Input<string>[]>;
    dhcpRelayLinkSelection?: pulumi.Input<string>;
    dhcpRelayRequestAllServer?: pulumi.Input<string>;
    dhcpRelayService?: pulumi.Input<string>;
    dhcpRelaySourceIp?: pulumi.Input<string>;
    dhcpRelayType?: pulumi.Input<string>;
    dhcpRenewTime?: pulumi.Input<number>;
    dhcpSmartRelay?: pulumi.Input<string>;
    discRetryTimeout?: pulumi.Input<number>;
    disconnectThreshold?: pulumi.Input<number>;
    distance?: pulumi.Input<number>;
    dnsQuery?: pulumi.Input<string>;
    dnsServerOverride?: pulumi.Input<string>;
    dnsServerProtocols?: pulumi.Input<pulumi.Input<string>[]>;
    dropFragment?: pulumi.Input<string>;
    dropOverlappedFragment?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    eapCaCerts?: pulumi.Input<pulumi.Input<string>[]>;
    eapIdentity?: pulumi.Input<string>;
    eapMethod?: pulumi.Input<string>;
    eapPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    eapSupplicant?: pulumi.Input<string>;
    eapUserCerts?: pulumi.Input<pulumi.Input<string>[]>;
    egressCos?: pulumi.Input<string>;
    egressShapingProfile?: pulumi.Input<string>;
    eip?: pulumi.Input<string>;
    endpointCompliance?: pulumi.Input<string>;
    estimatedDownstreamBandwidth?: pulumi.Input<number>;
    estimatedUpstreamBandwidth?: pulumi.Input<number>;
    explicitFtpProxy?: pulumi.Input<string>;
    explicitWebProxy?: pulumi.Input<string>;
    external?: pulumi.Input<string>;
    failActionOnExtender?: pulumi.Input<string>;
    failAlertInterfaces?: pulumi.Input<string>;
    failAlertMethod?: pulumi.Input<string>;
    failDetect?: pulumi.Input<string>;
    failDetectOptions?: pulumi.Input<pulumi.Input<string>[]>;
    fdp?: pulumi.Input<string>;
    fortiheartbeat?: pulumi.Input<string>;
    fortilink?: pulumi.Input<string>;
    fortilinkBackupLink?: pulumi.Input<number>;
    fortilinkNeighborDetect?: pulumi.Input<string>;
    fortilinkSplitInterface?: pulumi.Input<string>;
    fortilinkStacking?: pulumi.Input<string>;
    forwardDomain?: pulumi.Input<number>;
    forwardErrorCorrection?: pulumi.Input<string>;
    fpAnomalies?: pulumi.Input<pulumi.Input<string>[]>;
    fpDisables?: pulumi.Input<pulumi.Input<string>[]>;
    gatewayAddress?: pulumi.Input<string>;
    genericReceiveOffload?: pulumi.Input<string>;
    giGk?: pulumi.Input<string>;
    gwaddr?: pulumi.Input<string>;
    gwdetect?: pulumi.Input<string>;
    haPriority?: pulumi.Input<number>;
    icmpAcceptRedirect?: pulumi.Input<string>;
    icmpRedirect?: pulumi.Input<string>;
    icmpSendRedirect?: pulumi.Input<string>;
    identAccept?: pulumi.Input<string>;
    idleTimeout?: pulumi.Input<number>;
    ifMdix?: pulumi.Input<string>;
    ifMedia?: pulumi.Input<string>;
    ikeSamlServers?: pulumi.Input<pulumi.Input<string>[]>;
    inForceVlanCos?: pulumi.Input<number>;
    inbandwidth?: pulumi.Input<number>;
    ingressCos?: pulumi.Input<string>;
    ingressShapingProfile?: pulumi.Input<string>;
    ingressSpilloverThreshold?: pulumi.Input<number>;
    interconnectProfile?: pulumi.Input<string>;
    internal?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    ipManagedByFortiipam?: pulumi.Input<string>;
    ipmac?: pulumi.Input<string>;
    ipsSnifferMode?: pulumi.Input<string>;
    ipunnumbered?: pulumi.Input<string>;
    ipv6?: pulumi.Input<inputs.ObjectFspVlanInterfaceIpv6>;
    l2forward?: pulumi.Input<string>;
    l2tpClient?: pulumi.Input<string>;
    lacpHaSecondary?: pulumi.Input<string>;
    lacpHaSlave?: pulumi.Input<string>;
    lacpMode?: pulumi.Input<string>;
    lacpSpeed?: pulumi.Input<string>;
    largeReceiveOffload?: pulumi.Input<string>;
    lcpEchoInterval?: pulumi.Input<number>;
    lcpMaxEchoFails?: pulumi.Input<number>;
    linkUpDelay?: pulumi.Input<number>;
    listenForticlientConnection?: pulumi.Input<string>;
    lldpNetworkPolicy?: pulumi.Input<string>;
    lldpReception?: pulumi.Input<string>;
    lldpTransmission?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    macaddr?: pulumi.Input<string>;
    managedSubnetworkSize?: pulumi.Input<string>;
    managementIp?: pulumi.Input<string>;
    maxEgressBurstRate?: pulumi.Input<number>;
    maxEgressRate?: pulumi.Input<number>;
    measuredDownstreamBandwidth?: pulumi.Input<number>;
    measuredUpstreamBandwidth?: pulumi.Input<number>;
    mediatype?: pulumi.Input<string>;
    member?: pulumi.Input<string>;
    minLinks?: pulumi.Input<number>;
    minLinksDown?: pulumi.Input<string>;
    mirroringDirection?: pulumi.Input<string>;
    mirroringPort?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    monitorBandwidth?: pulumi.Input<string>;
    mtu?: pulumi.Input<number>;
    mtuOverride?: pulumi.Input<string>;
    muxType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ndiscforward?: pulumi.Input<string>;
    netbiosForward?: pulumi.Input<string>;
    netflowSampler?: pulumi.Input<string>;
    npQosProfile?: pulumi.Input<number>;
    npuFastpath?: pulumi.Input<string>;
    nst?: pulumi.Input<string>;
    outForceVlanCos?: pulumi.Input<number>;
    outbandwidth?: pulumi.Input<number>;
    padtRetryTimeout?: pulumi.Input<number>;
    passwords?: pulumi.Input<pulumi.Input<string>[]>;
    peerInterface?: pulumi.Input<string>;
    phyMode?: pulumi.Input<string>;
    pingServStatus?: pulumi.Input<number>;
    poe?: pulumi.Input<string>;
    pollingInterval?: pulumi.Input<number>;
    portMirroring?: pulumi.Input<string>;
    pppoeUnnumberedNegotiate?: pulumi.Input<string>;
    pptpAuthType?: pulumi.Input<string>;
    pptpClient?: pulumi.Input<string>;
    pptpPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    pptpServerIp?: pulumi.Input<string>;
    pptpTimeout?: pulumi.Input<number>;
    pptpUser?: pulumi.Input<string>;
    preserveSessionRoute?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    priorityOverride?: pulumi.Input<string>;
    proxyCaptivePortal?: pulumi.Input<string>;
    pvcAtmQos?: pulumi.Input<string>;
    pvcChan?: pulumi.Input<number>;
    pvcCrc?: pulumi.Input<number>;
    pvcPcr?: pulumi.Input<number>;
    pvcScr?: pulumi.Input<number>;
    pvcVlanId?: pulumi.Input<number>;
    pvcVlanRxId?: pulumi.Input<number>;
    pvcVlanRxOp?: pulumi.Input<string>;
    pvcVlanTxId?: pulumi.Input<number>;
    pvcVlanTxOp?: pulumi.Input<string>;
    reachableTime?: pulumi.Input<number>;
    redundantInterface?: pulumi.Input<string>;
    remoteIp?: pulumi.Input<string>;
    replacemsgOverrideGroup?: pulumi.Input<string>;
    retransmission?: pulumi.Input<string>;
    ringRx?: pulumi.Input<number>;
    ringTx?: pulumi.Input<number>;
    role?: pulumi.Input<string>;
    sampleDirection?: pulumi.Input<string>;
    sampleRate?: pulumi.Input<number>;
    scanBotnetConnections?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    secondaryIp?: pulumi.Input<string>;
    secondaryips?: pulumi.Input<pulumi.Input<inputs.ObjectFspVlanInterfaceSecondaryip>[]>;
    security8021xDynamicVlanId?: pulumi.Input<number>;
    security8021xMaster?: pulumi.Input<string>;
    security8021xMemberMode?: pulumi.Input<string>;
    security8021xMode?: pulumi.Input<string>;
    securityExemptList?: pulumi.Input<string>;
    securityExternalLogout?: pulumi.Input<string>;
    securityExternalWeb?: pulumi.Input<string>;
    securityGroups?: pulumi.Input<string>;
    securityMacAuthBypass?: pulumi.Input<string>;
    securityMode?: pulumi.Input<string>;
    securityRedirectUrl?: pulumi.Input<string>;
    selectProfile30a35b?: pulumi.Input<string>;
    serviceName?: pulumi.Input<string>;
    sflowSampler?: pulumi.Input<string>;
    sfpDsl?: pulumi.Input<string>;
    sfpDslAdslFallback?: pulumi.Input<string>;
    sfpDslAutodetect?: pulumi.Input<string>;
    sfpDslMac?: pulumi.Input<string>;
    speed?: pulumi.Input<string>;
    spilloverThreshold?: pulumi.Input<number>;
    srcCheck?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    stp?: pulumi.Input<string>;
    stpEdge?: pulumi.Input<string>;
    stpHaSecondary?: pulumi.Input<string>;
    stpHaSlave?: pulumi.Input<string>;
    stpforward?: pulumi.Input<string>;
    stpforwardMode?: pulumi.Input<string>;
    stripPriorityVlanTag?: pulumi.Input<string>;
    subst?: pulumi.Input<string>;
    substituteDstMac?: pulumi.Input<string>;
    swAlgorithm?: pulumi.Input<string>;
    swcFirstCreate?: pulumi.Input<number>;
    swcVlan?: pulumi.Input<number>;
    switch?: pulumi.Input<string>;
    switchControllerAccessVlan?: pulumi.Input<string>;
    switchControllerArpInspection?: pulumi.Input<string>;
    switchControllerAuth?: pulumi.Input<string>;
    switchControllerDhcpSnooping?: pulumi.Input<string>;
    switchControllerDhcpSnoopingOption82?: pulumi.Input<string>;
    switchControllerDhcpSnoopingVerifyMac?: pulumi.Input<string>;
    switchControllerDynamic?: pulumi.Input<string>;
    switchControllerFeature?: pulumi.Input<string>;
    switchControllerIgmpSnooping?: pulumi.Input<string>;
    switchControllerIgmpSnoopingFastLeave?: pulumi.Input<string>;
    switchControllerIgmpSnoopingProxy?: pulumi.Input<string>;
    switchControllerIotScanning?: pulumi.Input<string>;
    switchControllerLearningLimit?: pulumi.Input<number>;
    switchControllerMgmtVlan?: pulumi.Input<number>;
    switchControllerNac?: pulumi.Input<string>;
    switchControllerNetflowCollect?: pulumi.Input<string>;
    switchControllerOffload?: pulumi.Input<string>;
    switchControllerOffloadGw?: pulumi.Input<string>;
    switchControllerOffloadIp?: pulumi.Input<string>;
    switchControllerOffloading?: pulumi.Input<string>;
    switchControllerOffloadingGw?: pulumi.Input<string>;
    switchControllerOffloadingIp?: pulumi.Input<string>;
    switchControllerRadiusServer?: pulumi.Input<string>;
    switchControllerRspanMode?: pulumi.Input<string>;
    switchControllerSourceIp?: pulumi.Input<string>;
    switchControllerTrafficPolicy?: pulumi.Input<string>;
    systemId?: pulumi.Input<string>;
    systemIdType?: pulumi.Input<string>;
    tcMode?: pulumi.Input<string>;
    tcpMss?: pulumi.Input<number>;
    trunk?: pulumi.Input<string>;
    trustIp1?: pulumi.Input<string>;
    trustIp2?: pulumi.Input<string>;
    trustIp3?: pulumi.Input<string>;
    trustIp61?: pulumi.Input<string>;
    trustIp62?: pulumi.Input<string>;
    trustIp63?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    vci?: pulumi.Input<number>;
    vectoring?: pulumi.Input<string>;
    vindex?: pulumi.Input<number>;
    vlan?: pulumi.Input<string>;
    vlanOpMode?: pulumi.Input<string>;
    vlanProtocol?: pulumi.Input<string>;
    vlanforward?: pulumi.Input<string>;
    vlanid?: pulumi.Input<number>;
    vpi?: pulumi.Input<number>;
    vrf?: pulumi.Input<number>;
    vrrpVirtualMac?: pulumi.Input<string>;
    vrrps?: pulumi.Input<pulumi.Input<inputs.ObjectFspVlanInterfaceVrrp>[]>;
    wccp?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
    wifi5gThreshold?: pulumi.Input<string>;
    wifiAcl?: pulumi.Input<string>;
    wifiApBand?: pulumi.Input<string>;
    wifiAuth?: pulumi.Input<string>;
    wifiAutoConnect?: pulumi.Input<string>;
    wifiAutoSave?: pulumi.Input<string>;
    wifiBroadcastSsid?: pulumi.Input<string>;
    wifiDnsServer1?: pulumi.Input<string>;
    wifiDnsServer2?: pulumi.Input<string>;
    wifiEncrypt?: pulumi.Input<string>;
    wifiFragmentThreshold?: pulumi.Input<number>;
    wifiGateway?: pulumi.Input<string>;
    wifiKeyindex?: pulumi.Input<number>;
    wifiKeys?: pulumi.Input<pulumi.Input<string>[]>;
    wifiMacFilter?: pulumi.Input<string>;
    wifiPassphrases?: pulumi.Input<pulumi.Input<string>[]>;
    wifiRadiusServer?: pulumi.Input<string>;
    wifiRtsThreshold?: pulumi.Input<number>;
    wifiSecurity?: pulumi.Input<string>;
    wifiSsid?: pulumi.Input<string>;
    wifiUsergroup?: pulumi.Input<string>;
    winsIp?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectFspVlanInterface resource.
 */
export interface ObjectFspVlanInterfaceArgs {
    acName?: pulumi.Input<string>;
    adom?: pulumi.Input<string>;
    aggregate?: pulumi.Input<string>;
    aggregateType?: pulumi.Input<string>;
    algorithm?: pulumi.Input<string>;
    alias?: pulumi.Input<string>;
    allowaccesses?: pulumi.Input<pulumi.Input<string>[]>;
    annex?: pulumi.Input<string>;
    apDiscover?: pulumi.Input<string>;
    arpforward?: pulumi.Input<string>;
    atmProtocol?: pulumi.Input<string>;
    authCert?: pulumi.Input<string>;
    authPortalAddr?: pulumi.Input<string>;
    authType?: pulumi.Input<string>;
    autoAuthExtensionDevice?: pulumi.Input<string>;
    bandwidthMeasureTime?: pulumi.Input<number>;
    bfd?: pulumi.Input<string>;
    bfdDesiredMinTx?: pulumi.Input<number>;
    bfdDetectMult?: pulumi.Input<number>;
    bfdRequiredMinRx?: pulumi.Input<number>;
    broadcastForticlientDiscovery?: pulumi.Input<string>;
    broadcastForward?: pulumi.Input<string>;
    captivePortal?: pulumi.Input<number>;
    cliConnStatus?: pulumi.Input<number>;
    color?: pulumi.Input<number>;
    ddns?: pulumi.Input<string>;
    ddnsAuth?: pulumi.Input<string>;
    ddnsDomain?: pulumi.Input<string>;
    ddnsKey?: pulumi.Input<string>;
    ddnsKeyname?: pulumi.Input<string>;
    ddnsPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    ddnsServer?: pulumi.Input<string>;
    ddnsServerIp?: pulumi.Input<string>;
    ddnsSn?: pulumi.Input<string>;
    ddnsTtl?: pulumi.Input<number>;
    ddnsUsername?: pulumi.Input<string>;
    ddnsZone?: pulumi.Input<string>;
    dedicatedTo?: pulumi.Input<string>;
    defaultPurdueLevel?: pulumi.Input<string>;
    defaultgw?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    detectedPeerMtu?: pulumi.Input<number>;
    detectprotocols?: pulumi.Input<pulumi.Input<string>[]>;
    detectserver?: pulumi.Input<string>;
    deviceAccessList?: pulumi.Input<string>;
    deviceIdentification?: pulumi.Input<string>;
    deviceIdentificationActiveScan?: pulumi.Input<string>;
    deviceNetscan?: pulumi.Input<string>;
    deviceUserIdentification?: pulumi.Input<string>;
    devindex?: pulumi.Input<number>;
    dhcpBroadcastFlag?: pulumi.Input<string>;
    dhcpClasslessRouteAddition?: pulumi.Input<string>;
    dhcpClientIdentifier?: pulumi.Input<string>;
    dhcpRelayAgentOption?: pulumi.Input<string>;
    dhcpRelayCircuitId?: pulumi.Input<string>;
    dhcpRelayInterface?: pulumi.Input<string>;
    dhcpRelayInterfaceSelectMethod?: pulumi.Input<string>;
    dhcpRelayIps?: pulumi.Input<pulumi.Input<string>[]>;
    dhcpRelayLinkSelection?: pulumi.Input<string>;
    dhcpRelayRequestAllServer?: pulumi.Input<string>;
    dhcpRelayService?: pulumi.Input<string>;
    dhcpRelaySourceIp?: pulumi.Input<string>;
    dhcpRelayType?: pulumi.Input<string>;
    dhcpRenewTime?: pulumi.Input<number>;
    dhcpSmartRelay?: pulumi.Input<string>;
    discRetryTimeout?: pulumi.Input<number>;
    disconnectThreshold?: pulumi.Input<number>;
    distance?: pulumi.Input<number>;
    dnsQuery?: pulumi.Input<string>;
    dnsServerOverride?: pulumi.Input<string>;
    dnsServerProtocols?: pulumi.Input<pulumi.Input<string>[]>;
    dropFragment?: pulumi.Input<string>;
    dropOverlappedFragment?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    eapCaCerts?: pulumi.Input<pulumi.Input<string>[]>;
    eapIdentity?: pulumi.Input<string>;
    eapMethod?: pulumi.Input<string>;
    eapPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    eapSupplicant?: pulumi.Input<string>;
    eapUserCerts?: pulumi.Input<pulumi.Input<string>[]>;
    egressCos?: pulumi.Input<string>;
    egressShapingProfile?: pulumi.Input<string>;
    eip?: pulumi.Input<string>;
    endpointCompliance?: pulumi.Input<string>;
    estimatedDownstreamBandwidth?: pulumi.Input<number>;
    estimatedUpstreamBandwidth?: pulumi.Input<number>;
    explicitFtpProxy?: pulumi.Input<string>;
    explicitWebProxy?: pulumi.Input<string>;
    external?: pulumi.Input<string>;
    failActionOnExtender?: pulumi.Input<string>;
    failAlertInterfaces?: pulumi.Input<string>;
    failAlertMethod?: pulumi.Input<string>;
    failDetect?: pulumi.Input<string>;
    failDetectOptions?: pulumi.Input<pulumi.Input<string>[]>;
    fdp?: pulumi.Input<string>;
    fortiheartbeat?: pulumi.Input<string>;
    fortilink?: pulumi.Input<string>;
    fortilinkBackupLink?: pulumi.Input<number>;
    fortilinkNeighborDetect?: pulumi.Input<string>;
    fortilinkSplitInterface?: pulumi.Input<string>;
    fortilinkStacking?: pulumi.Input<string>;
    forwardDomain?: pulumi.Input<number>;
    forwardErrorCorrection?: pulumi.Input<string>;
    fpAnomalies?: pulumi.Input<pulumi.Input<string>[]>;
    fpDisables?: pulumi.Input<pulumi.Input<string>[]>;
    gatewayAddress?: pulumi.Input<string>;
    genericReceiveOffload?: pulumi.Input<string>;
    giGk?: pulumi.Input<string>;
    gwaddr?: pulumi.Input<string>;
    gwdetect?: pulumi.Input<string>;
    haPriority?: pulumi.Input<number>;
    icmpAcceptRedirect?: pulumi.Input<string>;
    icmpRedirect?: pulumi.Input<string>;
    icmpSendRedirect?: pulumi.Input<string>;
    identAccept?: pulumi.Input<string>;
    idleTimeout?: pulumi.Input<number>;
    ifMdix?: pulumi.Input<string>;
    ifMedia?: pulumi.Input<string>;
    ikeSamlServers?: pulumi.Input<pulumi.Input<string>[]>;
    inForceVlanCos?: pulumi.Input<number>;
    inbandwidth?: pulumi.Input<number>;
    ingressCos?: pulumi.Input<string>;
    ingressShapingProfile?: pulumi.Input<string>;
    ingressSpilloverThreshold?: pulumi.Input<number>;
    interconnectProfile?: pulumi.Input<string>;
    internal?: pulumi.Input<number>;
    ip?: pulumi.Input<string>;
    ipManagedByFortiipam?: pulumi.Input<string>;
    ipmac?: pulumi.Input<string>;
    ipsSnifferMode?: pulumi.Input<string>;
    ipunnumbered?: pulumi.Input<string>;
    ipv6?: pulumi.Input<inputs.ObjectFspVlanInterfaceIpv6>;
    l2forward?: pulumi.Input<string>;
    l2tpClient?: pulumi.Input<string>;
    lacpHaSecondary?: pulumi.Input<string>;
    lacpHaSlave?: pulumi.Input<string>;
    lacpMode?: pulumi.Input<string>;
    lacpSpeed?: pulumi.Input<string>;
    largeReceiveOffload?: pulumi.Input<string>;
    lcpEchoInterval?: pulumi.Input<number>;
    lcpMaxEchoFails?: pulumi.Input<number>;
    linkUpDelay?: pulumi.Input<number>;
    listenForticlientConnection?: pulumi.Input<string>;
    lldpNetworkPolicy?: pulumi.Input<string>;
    lldpReception?: pulumi.Input<string>;
    lldpTransmission?: pulumi.Input<string>;
    log?: pulumi.Input<string>;
    macaddr?: pulumi.Input<string>;
    managedSubnetworkSize?: pulumi.Input<string>;
    managementIp?: pulumi.Input<string>;
    maxEgressBurstRate?: pulumi.Input<number>;
    maxEgressRate?: pulumi.Input<number>;
    measuredDownstreamBandwidth?: pulumi.Input<number>;
    measuredUpstreamBandwidth?: pulumi.Input<number>;
    mediatype?: pulumi.Input<string>;
    member?: pulumi.Input<string>;
    minLinks?: pulumi.Input<number>;
    minLinksDown?: pulumi.Input<string>;
    mirroringDirection?: pulumi.Input<string>;
    mirroringPort?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    monitorBandwidth?: pulumi.Input<string>;
    mtu?: pulumi.Input<number>;
    mtuOverride?: pulumi.Input<string>;
    muxType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ndiscforward?: pulumi.Input<string>;
    netbiosForward?: pulumi.Input<string>;
    netflowSampler?: pulumi.Input<string>;
    npQosProfile?: pulumi.Input<number>;
    npuFastpath?: pulumi.Input<string>;
    nst?: pulumi.Input<string>;
    outForceVlanCos?: pulumi.Input<number>;
    outbandwidth?: pulumi.Input<number>;
    padtRetryTimeout?: pulumi.Input<number>;
    passwords?: pulumi.Input<pulumi.Input<string>[]>;
    peerInterface?: pulumi.Input<string>;
    phyMode?: pulumi.Input<string>;
    pingServStatus?: pulumi.Input<number>;
    poe?: pulumi.Input<string>;
    pollingInterval?: pulumi.Input<number>;
    portMirroring?: pulumi.Input<string>;
    pppoeUnnumberedNegotiate?: pulumi.Input<string>;
    pptpAuthType?: pulumi.Input<string>;
    pptpClient?: pulumi.Input<string>;
    pptpPasswords?: pulumi.Input<pulumi.Input<string>[]>;
    pptpServerIp?: pulumi.Input<string>;
    pptpTimeout?: pulumi.Input<number>;
    pptpUser?: pulumi.Input<string>;
    preserveSessionRoute?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    priorityOverride?: pulumi.Input<string>;
    proxyCaptivePortal?: pulumi.Input<string>;
    pvcAtmQos?: pulumi.Input<string>;
    pvcChan?: pulumi.Input<number>;
    pvcCrc?: pulumi.Input<number>;
    pvcPcr?: pulumi.Input<number>;
    pvcScr?: pulumi.Input<number>;
    pvcVlanId?: pulumi.Input<number>;
    pvcVlanRxId?: pulumi.Input<number>;
    pvcVlanRxOp?: pulumi.Input<string>;
    pvcVlanTxId?: pulumi.Input<number>;
    pvcVlanTxOp?: pulumi.Input<string>;
    reachableTime?: pulumi.Input<number>;
    redundantInterface?: pulumi.Input<string>;
    remoteIp?: pulumi.Input<string>;
    replacemsgOverrideGroup?: pulumi.Input<string>;
    retransmission?: pulumi.Input<string>;
    ringRx?: pulumi.Input<number>;
    ringTx?: pulumi.Input<number>;
    role?: pulumi.Input<string>;
    sampleDirection?: pulumi.Input<string>;
    sampleRate?: pulumi.Input<number>;
    scanBotnetConnections?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    secondaryIp?: pulumi.Input<string>;
    secondaryips?: pulumi.Input<pulumi.Input<inputs.ObjectFspVlanInterfaceSecondaryip>[]>;
    security8021xDynamicVlanId?: pulumi.Input<number>;
    security8021xMaster?: pulumi.Input<string>;
    security8021xMemberMode?: pulumi.Input<string>;
    security8021xMode?: pulumi.Input<string>;
    securityExemptList?: pulumi.Input<string>;
    securityExternalLogout?: pulumi.Input<string>;
    securityExternalWeb?: pulumi.Input<string>;
    securityGroups?: pulumi.Input<string>;
    securityMacAuthBypass?: pulumi.Input<string>;
    securityMode?: pulumi.Input<string>;
    securityRedirectUrl?: pulumi.Input<string>;
    selectProfile30a35b?: pulumi.Input<string>;
    serviceName?: pulumi.Input<string>;
    sflowSampler?: pulumi.Input<string>;
    sfpDsl?: pulumi.Input<string>;
    sfpDslAdslFallback?: pulumi.Input<string>;
    sfpDslAutodetect?: pulumi.Input<string>;
    sfpDslMac?: pulumi.Input<string>;
    speed?: pulumi.Input<string>;
    spilloverThreshold?: pulumi.Input<number>;
    srcCheck?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    stp?: pulumi.Input<string>;
    stpEdge?: pulumi.Input<string>;
    stpHaSecondary?: pulumi.Input<string>;
    stpHaSlave?: pulumi.Input<string>;
    stpforward?: pulumi.Input<string>;
    stpforwardMode?: pulumi.Input<string>;
    stripPriorityVlanTag?: pulumi.Input<string>;
    subst?: pulumi.Input<string>;
    substituteDstMac?: pulumi.Input<string>;
    swAlgorithm?: pulumi.Input<string>;
    swcFirstCreate?: pulumi.Input<number>;
    swcVlan?: pulumi.Input<number>;
    switch?: pulumi.Input<string>;
    switchControllerAccessVlan?: pulumi.Input<string>;
    switchControllerArpInspection?: pulumi.Input<string>;
    switchControllerAuth?: pulumi.Input<string>;
    switchControllerDhcpSnooping?: pulumi.Input<string>;
    switchControllerDhcpSnoopingOption82?: pulumi.Input<string>;
    switchControllerDhcpSnoopingVerifyMac?: pulumi.Input<string>;
    switchControllerDynamic?: pulumi.Input<string>;
    switchControllerFeature?: pulumi.Input<string>;
    switchControllerIgmpSnooping?: pulumi.Input<string>;
    switchControllerIgmpSnoopingFastLeave?: pulumi.Input<string>;
    switchControllerIgmpSnoopingProxy?: pulumi.Input<string>;
    switchControllerIotScanning?: pulumi.Input<string>;
    switchControllerLearningLimit?: pulumi.Input<number>;
    switchControllerMgmtVlan?: pulumi.Input<number>;
    switchControllerNac?: pulumi.Input<string>;
    switchControllerNetflowCollect?: pulumi.Input<string>;
    switchControllerOffload?: pulumi.Input<string>;
    switchControllerOffloadGw?: pulumi.Input<string>;
    switchControllerOffloadIp?: pulumi.Input<string>;
    switchControllerOffloading?: pulumi.Input<string>;
    switchControllerOffloadingGw?: pulumi.Input<string>;
    switchControllerOffloadingIp?: pulumi.Input<string>;
    switchControllerRadiusServer?: pulumi.Input<string>;
    switchControllerRspanMode?: pulumi.Input<string>;
    switchControllerSourceIp?: pulumi.Input<string>;
    switchControllerTrafficPolicy?: pulumi.Input<string>;
    systemId?: pulumi.Input<string>;
    systemIdType?: pulumi.Input<string>;
    tcMode?: pulumi.Input<string>;
    tcpMss?: pulumi.Input<number>;
    trunk?: pulumi.Input<string>;
    trustIp1?: pulumi.Input<string>;
    trustIp2?: pulumi.Input<string>;
    trustIp3?: pulumi.Input<string>;
    trustIp61?: pulumi.Input<string>;
    trustIp62?: pulumi.Input<string>;
    trustIp63?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    vci?: pulumi.Input<number>;
    vectoring?: pulumi.Input<string>;
    vindex?: pulumi.Input<number>;
    vlan: pulumi.Input<string>;
    vlanOpMode?: pulumi.Input<string>;
    vlanProtocol?: pulumi.Input<string>;
    vlanforward?: pulumi.Input<string>;
    vlanid?: pulumi.Input<number>;
    vpi?: pulumi.Input<number>;
    vrf?: pulumi.Input<number>;
    vrrpVirtualMac?: pulumi.Input<string>;
    vrrps?: pulumi.Input<pulumi.Input<inputs.ObjectFspVlanInterfaceVrrp>[]>;
    wccp?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
    wifi5gThreshold?: pulumi.Input<string>;
    wifiAcl?: pulumi.Input<string>;
    wifiApBand?: pulumi.Input<string>;
    wifiAuth?: pulumi.Input<string>;
    wifiAutoConnect?: pulumi.Input<string>;
    wifiAutoSave?: pulumi.Input<string>;
    wifiBroadcastSsid?: pulumi.Input<string>;
    wifiDnsServer1?: pulumi.Input<string>;
    wifiDnsServer2?: pulumi.Input<string>;
    wifiEncrypt?: pulumi.Input<string>;
    wifiFragmentThreshold?: pulumi.Input<number>;
    wifiGateway?: pulumi.Input<string>;
    wifiKeyindex?: pulumi.Input<number>;
    wifiKeys?: pulumi.Input<pulumi.Input<string>[]>;
    wifiMacFilter?: pulumi.Input<string>;
    wifiPassphrases?: pulumi.Input<pulumi.Input<string>[]>;
    wifiRadiusServer?: pulumi.Input<string>;
    wifiRtsThreshold?: pulumi.Input<number>;
    wifiSecurity?: pulumi.Input<string>;
    wifiSsid?: pulumi.Input<string>;
    wifiUsergroup?: pulumi.Input<string>;
    winsIp?: pulumi.Input<string>;
}
