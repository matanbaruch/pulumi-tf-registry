// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ObjectUserNsxService extends pulumi.CustomResource {
    /**
     * Get an existing ObjectUserNsxService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectUserNsxServiceState, opts?: pulumi.CustomResourceOptions): ObjectUserNsxService {
        return new ObjectUserNsxService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/objectUserNsxService:ObjectUserNsxService';

    /**
     * Returns true if the given object is an instance of ObjectUserNsxService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectUserNsxService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectUserNsxService.__pulumiType;
    }

    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly fosid!: pulumi.Output<string | undefined>;
    public readonly integration!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nsx!: pulumi.Output<string>;
    public readonly refId!: pulumi.Output<string | undefined>;
    public readonly scopetype!: pulumi.Output<string | undefined>;

    /**
     * Create a ObjectUserNsxService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObjectUserNsxServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectUserNsxServiceArgs | ObjectUserNsxServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectUserNsxServiceState | undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["fosid"] = state ? state.fosid : undefined;
            resourceInputs["integration"] = state ? state.integration : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nsx"] = state ? state.nsx : undefined;
            resourceInputs["refId"] = state ? state.refId : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
        } else {
            const args = argsOrState as ObjectUserNsxServiceArgs | undefined;
            if ((!args || args.nsx === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nsx'");
            }
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["fosid"] = args ? args.fosid : undefined;
            resourceInputs["integration"] = args ? args.integration : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nsx"] = args ? args.nsx : undefined;
            resourceInputs["refId"] = args ? args.refId : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectUserNsxService.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectUserNsxService resources.
 */
export interface ObjectUserNsxServiceState {
    adom?: pulumi.Input<string>;
    fosid?: pulumi.Input<string>;
    integration?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nsx?: pulumi.Input<string>;
    refId?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectUserNsxService resource.
 */
export interface ObjectUserNsxServiceArgs {
    adom?: pulumi.Input<string>;
    fosid?: pulumi.Input<string>;
    integration?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nsx: pulumi.Input<string>;
    refId?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
}
