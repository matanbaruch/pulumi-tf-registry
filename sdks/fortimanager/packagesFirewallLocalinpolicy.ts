// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PackagesFirewallLocalinpolicy extends pulumi.CustomResource {
    /**
     * Get an existing PackagesFirewallLocalinpolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PackagesFirewallLocalinpolicyState, opts?: pulumi.CustomResourceOptions): PackagesFirewallLocalinpolicy {
        return new PackagesFirewallLocalinpolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/packagesFirewallLocalinpolicy:PackagesFirewallLocalinpolicy';

    /**
     * Returns true if the given object is an instance of PackagesFirewallLocalinpolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PackagesFirewallLocalinpolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PackagesFirewallLocalinpolicy.__pulumiType;
    }

    public readonly action!: pulumi.Output<string>;
    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly comments!: pulumi.Output<string | undefined>;
    public readonly dstaddrNegate!: pulumi.Output<string>;
    public readonly dstaddrs!: pulumi.Output<string[]>;
    public readonly haMgmtIntfOnly!: pulumi.Output<string>;
    public readonly internetServiceSrc!: pulumi.Output<string>;
    public readonly internetServiceSrcCustomGroups!: pulumi.Output<string[]>;
    public readonly internetServiceSrcCustoms!: pulumi.Output<string[]>;
    public readonly internetServiceSrcGroups!: pulumi.Output<string[]>;
    public readonly internetServiceSrcNames!: pulumi.Output<string[]>;
    public readonly internetServiceSrcNegate!: pulumi.Output<string>;
    public readonly intfs!: pulumi.Output<string[]>;
    public readonly pkg!: pulumi.Output<string>;
    public readonly pkgFolderPath!: pulumi.Output<string | undefined>;
    public readonly policyid!: pulumi.Output<number | undefined>;
    public readonly schedule!: pulumi.Output<string | undefined>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly serviceNegate!: pulumi.Output<string>;
    public readonly services!: pulumi.Output<string[]>;
    public readonly srcaddrNegate!: pulumi.Output<string>;
    public readonly srcaddrs!: pulumi.Output<string[]>;
    public readonly status!: pulumi.Output<string>;
    public readonly uuid!: pulumi.Output<string>;
    public readonly virtualPatch!: pulumi.Output<string>;

    /**
     * Create a PackagesFirewallLocalinpolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PackagesFirewallLocalinpolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PackagesFirewallLocalinpolicyArgs | PackagesFirewallLocalinpolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PackagesFirewallLocalinpolicyState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["dstaddrNegate"] = state ? state.dstaddrNegate : undefined;
            resourceInputs["dstaddrs"] = state ? state.dstaddrs : undefined;
            resourceInputs["haMgmtIntfOnly"] = state ? state.haMgmtIntfOnly : undefined;
            resourceInputs["internetServiceSrc"] = state ? state.internetServiceSrc : undefined;
            resourceInputs["internetServiceSrcCustomGroups"] = state ? state.internetServiceSrcCustomGroups : undefined;
            resourceInputs["internetServiceSrcCustoms"] = state ? state.internetServiceSrcCustoms : undefined;
            resourceInputs["internetServiceSrcGroups"] = state ? state.internetServiceSrcGroups : undefined;
            resourceInputs["internetServiceSrcNames"] = state ? state.internetServiceSrcNames : undefined;
            resourceInputs["internetServiceSrcNegate"] = state ? state.internetServiceSrcNegate : undefined;
            resourceInputs["intfs"] = state ? state.intfs : undefined;
            resourceInputs["pkg"] = state ? state.pkg : undefined;
            resourceInputs["pkgFolderPath"] = state ? state.pkgFolderPath : undefined;
            resourceInputs["policyid"] = state ? state.policyid : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["serviceNegate"] = state ? state.serviceNegate : undefined;
            resourceInputs["services"] = state ? state.services : undefined;
            resourceInputs["srcaddrNegate"] = state ? state.srcaddrNegate : undefined;
            resourceInputs["srcaddrs"] = state ? state.srcaddrs : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["virtualPatch"] = state ? state.virtualPatch : undefined;
        } else {
            const args = argsOrState as PackagesFirewallLocalinpolicyArgs | undefined;
            if ((!args || args.pkg === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pkg'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["dstaddrNegate"] = args ? args.dstaddrNegate : undefined;
            resourceInputs["dstaddrs"] = args ? args.dstaddrs : undefined;
            resourceInputs["haMgmtIntfOnly"] = args ? args.haMgmtIntfOnly : undefined;
            resourceInputs["internetServiceSrc"] = args ? args.internetServiceSrc : undefined;
            resourceInputs["internetServiceSrcCustomGroups"] = args ? args.internetServiceSrcCustomGroups : undefined;
            resourceInputs["internetServiceSrcCustoms"] = args ? args.internetServiceSrcCustoms : undefined;
            resourceInputs["internetServiceSrcGroups"] = args ? args.internetServiceSrcGroups : undefined;
            resourceInputs["internetServiceSrcNames"] = args ? args.internetServiceSrcNames : undefined;
            resourceInputs["internetServiceSrcNegate"] = args ? args.internetServiceSrcNegate : undefined;
            resourceInputs["intfs"] = args ? args.intfs : undefined;
            resourceInputs["pkg"] = args ? args.pkg : undefined;
            resourceInputs["pkgFolderPath"] = args ? args.pkgFolderPath : undefined;
            resourceInputs["policyid"] = args ? args.policyid : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["serviceNegate"] = args ? args.serviceNegate : undefined;
            resourceInputs["services"] = args ? args.services : undefined;
            resourceInputs["srcaddrNegate"] = args ? args.srcaddrNegate : undefined;
            resourceInputs["srcaddrs"] = args ? args.srcaddrs : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["virtualPatch"] = args ? args.virtualPatch : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PackagesFirewallLocalinpolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PackagesFirewallLocalinpolicy resources.
 */
export interface PackagesFirewallLocalinpolicyState {
    action?: pulumi.Input<string>;
    adom?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    dstaddrNegate?: pulumi.Input<string>;
    dstaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    haMgmtIntfOnly?: pulumi.Input<string>;
    internetServiceSrc?: pulumi.Input<string>;
    internetServiceSrcCustomGroups?: pulumi.Input<pulumi.Input<string>[]>;
    internetServiceSrcCustoms?: pulumi.Input<pulumi.Input<string>[]>;
    internetServiceSrcGroups?: pulumi.Input<pulumi.Input<string>[]>;
    internetServiceSrcNames?: pulumi.Input<pulumi.Input<string>[]>;
    internetServiceSrcNegate?: pulumi.Input<string>;
    intfs?: pulumi.Input<pulumi.Input<string>[]>;
    pkg?: pulumi.Input<string>;
    pkgFolderPath?: pulumi.Input<string>;
    policyid?: pulumi.Input<number>;
    schedule?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    serviceNegate?: pulumi.Input<string>;
    services?: pulumi.Input<pulumi.Input<string>[]>;
    srcaddrNegate?: pulumi.Input<string>;
    srcaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    virtualPatch?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PackagesFirewallLocalinpolicy resource.
 */
export interface PackagesFirewallLocalinpolicyArgs {
    action?: pulumi.Input<string>;
    adom?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    dstaddrNegate?: pulumi.Input<string>;
    dstaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    haMgmtIntfOnly?: pulumi.Input<string>;
    internetServiceSrc?: pulumi.Input<string>;
    internetServiceSrcCustomGroups?: pulumi.Input<pulumi.Input<string>[]>;
    internetServiceSrcCustoms?: pulumi.Input<pulumi.Input<string>[]>;
    internetServiceSrcGroups?: pulumi.Input<pulumi.Input<string>[]>;
    internetServiceSrcNames?: pulumi.Input<pulumi.Input<string>[]>;
    internetServiceSrcNegate?: pulumi.Input<string>;
    intfs?: pulumi.Input<pulumi.Input<string>[]>;
    pkg: pulumi.Input<string>;
    pkgFolderPath?: pulumi.Input<string>;
    policyid?: pulumi.Input<number>;
    schedule?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    serviceNegate?: pulumi.Input<string>;
    services?: pulumi.Input<pulumi.Input<string>[]>;
    srcaddrNegate?: pulumi.Input<string>;
    srcaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    virtualPatch?: pulumi.Input<string>;
}
