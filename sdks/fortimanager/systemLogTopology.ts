// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SystemLogTopology extends pulumi.CustomResource {
    /**
     * Get an existing SystemLogTopology resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemLogTopologyState, opts?: pulumi.CustomResourceOptions): SystemLogTopology {
        return new SystemLogTopology(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/systemLogTopology:SystemLogTopology';

    /**
     * Returns true if the given object is an instance of SystemLogTopology.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemLogTopology {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemLogTopology.__pulumiType;
    }

    public readonly maxDepth!: pulumi.Output<number>;
    public readonly maxDepthShare!: pulumi.Output<number>;

    /**
     * Create a SystemLogTopology resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemLogTopologyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemLogTopologyArgs | SystemLogTopologyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemLogTopologyState | undefined;
            resourceInputs["maxDepth"] = state ? state.maxDepth : undefined;
            resourceInputs["maxDepthShare"] = state ? state.maxDepthShare : undefined;
        } else {
            const args = argsOrState as SystemLogTopologyArgs | undefined;
            resourceInputs["maxDepth"] = args ? args.maxDepth : undefined;
            resourceInputs["maxDepthShare"] = args ? args.maxDepthShare : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemLogTopology.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemLogTopology resources.
 */
export interface SystemLogTopologyState {
    maxDepth?: pulumi.Input<number>;
    maxDepthShare?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SystemLogTopology resource.
 */
export interface SystemLogTopologyArgs {
    maxDepth?: pulumi.Input<number>;
    maxDepthShare?: pulumi.Input<number>;
}
