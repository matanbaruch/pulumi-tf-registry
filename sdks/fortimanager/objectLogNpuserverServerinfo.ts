// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ObjectLogNpuserverServerinfo extends pulumi.CustomResource {
    /**
     * Get an existing ObjectLogNpuserverServerinfo resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectLogNpuserverServerinfoState, opts?: pulumi.CustomResourceOptions): ObjectLogNpuserverServerinfo {
        return new ObjectLogNpuserverServerinfo(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/objectLogNpuserverServerinfo:ObjectLogNpuserverServerinfo';

    /**
     * Returns true if the given object is an instance of ObjectLogNpuserverServerinfo.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectLogNpuserverServerinfo {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectLogNpuserverServerinfo.__pulumiType;
    }

    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly destPort!: pulumi.Output<number | undefined>;
    public readonly fosid!: pulumi.Output<number | undefined>;
    public readonly ipFamily!: pulumi.Output<string>;
    public readonly ipv4Server!: pulumi.Output<string>;
    public readonly ipv6Server!: pulumi.Output<string>;
    public readonly logTransport!: pulumi.Output<string>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly sourcePort!: pulumi.Output<number | undefined>;
    public readonly templateTxTimeout!: pulumi.Output<number>;
    public readonly vdom!: pulumi.Output<string | undefined>;

    /**
     * Create a ObjectLogNpuserverServerinfo resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ObjectLogNpuserverServerinfoArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectLogNpuserverServerinfoArgs | ObjectLogNpuserverServerinfoState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectLogNpuserverServerinfoState | undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["destPort"] = state ? state.destPort : undefined;
            resourceInputs["fosid"] = state ? state.fosid : undefined;
            resourceInputs["ipFamily"] = state ? state.ipFamily : undefined;
            resourceInputs["ipv4Server"] = state ? state.ipv4Server : undefined;
            resourceInputs["ipv6Server"] = state ? state.ipv6Server : undefined;
            resourceInputs["logTransport"] = state ? state.logTransport : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["sourcePort"] = state ? state.sourcePort : undefined;
            resourceInputs["templateTxTimeout"] = state ? state.templateTxTimeout : undefined;
            resourceInputs["vdom"] = state ? state.vdom : undefined;
        } else {
            const args = argsOrState as ObjectLogNpuserverServerinfoArgs | undefined;
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["destPort"] = args ? args.destPort : undefined;
            resourceInputs["fosid"] = args ? args.fosid : undefined;
            resourceInputs["ipFamily"] = args ? args.ipFamily : undefined;
            resourceInputs["ipv4Server"] = args ? args.ipv4Server : undefined;
            resourceInputs["ipv6Server"] = args ? args.ipv6Server : undefined;
            resourceInputs["logTransport"] = args ? args.logTransport : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["sourcePort"] = args ? args.sourcePort : undefined;
            resourceInputs["templateTxTimeout"] = args ? args.templateTxTimeout : undefined;
            resourceInputs["vdom"] = args ? args.vdom : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectLogNpuserverServerinfo.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectLogNpuserverServerinfo resources.
 */
export interface ObjectLogNpuserverServerinfoState {
    adom?: pulumi.Input<string>;
    destPort?: pulumi.Input<number>;
    fosid?: pulumi.Input<number>;
    ipFamily?: pulumi.Input<string>;
    ipv4Server?: pulumi.Input<string>;
    ipv6Server?: pulumi.Input<string>;
    logTransport?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    sourcePort?: pulumi.Input<number>;
    templateTxTimeout?: pulumi.Input<number>;
    vdom?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectLogNpuserverServerinfo resource.
 */
export interface ObjectLogNpuserverServerinfoArgs {
    adom?: pulumi.Input<string>;
    destPort?: pulumi.Input<number>;
    fosid?: pulumi.Input<number>;
    ipFamily?: pulumi.Input<string>;
    ipv4Server?: pulumi.Input<string>;
    ipv6Server?: pulumi.Input<string>;
    logTransport?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    sourcePort?: pulumi.Input<number>;
    templateTxTimeout?: pulumi.Input<number>;
    vdom?: pulumi.Input<string>;
}
