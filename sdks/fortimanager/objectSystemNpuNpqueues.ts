// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ObjectSystemNpuNpqueues extends pulumi.CustomResource {
    /**
     * Get an existing ObjectSystemNpuNpqueues resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectSystemNpuNpqueuesState, opts?: pulumi.CustomResourceOptions): ObjectSystemNpuNpqueues {
        return new ObjectSystemNpuNpqueues(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/objectSystemNpuNpqueues:ObjectSystemNpuNpqueues';

    /**
     * Returns true if the given object is an instance of ObjectSystemNpuNpqueues.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectSystemNpuNpqueues {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectSystemNpuNpqueues.__pulumiType;
    }

    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly ethernetTypes!: pulumi.Output<outputs.ObjectSystemNpuNpqueuesEthernetType[] | undefined>;
    public readonly ipProtocols!: pulumi.Output<outputs.ObjectSystemNpuNpqueuesIpProtocol[] | undefined>;
    public readonly ipServices!: pulumi.Output<outputs.ObjectSystemNpuNpqueuesIpService[] | undefined>;
    public readonly profiles!: pulumi.Output<outputs.ObjectSystemNpuNpqueuesProfile[] | undefined>;
    public readonly schedulers!: pulumi.Output<outputs.ObjectSystemNpuNpqueuesScheduler[] | undefined>;
    public readonly scopetype!: pulumi.Output<string | undefined>;

    /**
     * Create a ObjectSystemNpuNpqueues resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ObjectSystemNpuNpqueuesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectSystemNpuNpqueuesArgs | ObjectSystemNpuNpqueuesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectSystemNpuNpqueuesState | undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["ethernetTypes"] = state ? state.ethernetTypes : undefined;
            resourceInputs["ipProtocols"] = state ? state.ipProtocols : undefined;
            resourceInputs["ipServices"] = state ? state.ipServices : undefined;
            resourceInputs["profiles"] = state ? state.profiles : undefined;
            resourceInputs["schedulers"] = state ? state.schedulers : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
        } else {
            const args = argsOrState as ObjectSystemNpuNpqueuesArgs | undefined;
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["ethernetTypes"] = args ? args.ethernetTypes : undefined;
            resourceInputs["ipProtocols"] = args ? args.ipProtocols : undefined;
            resourceInputs["ipServices"] = args ? args.ipServices : undefined;
            resourceInputs["profiles"] = args ? args.profiles : undefined;
            resourceInputs["schedulers"] = args ? args.schedulers : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectSystemNpuNpqueues.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectSystemNpuNpqueues resources.
 */
export interface ObjectSystemNpuNpqueuesState {
    adom?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    ethernetTypes?: pulumi.Input<pulumi.Input<inputs.ObjectSystemNpuNpqueuesEthernetType>[]>;
    ipProtocols?: pulumi.Input<pulumi.Input<inputs.ObjectSystemNpuNpqueuesIpProtocol>[]>;
    ipServices?: pulumi.Input<pulumi.Input<inputs.ObjectSystemNpuNpqueuesIpService>[]>;
    profiles?: pulumi.Input<pulumi.Input<inputs.ObjectSystemNpuNpqueuesProfile>[]>;
    schedulers?: pulumi.Input<pulumi.Input<inputs.ObjectSystemNpuNpqueuesScheduler>[]>;
    scopetype?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectSystemNpuNpqueues resource.
 */
export interface ObjectSystemNpuNpqueuesArgs {
    adom?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    ethernetTypes?: pulumi.Input<pulumi.Input<inputs.ObjectSystemNpuNpqueuesEthernetType>[]>;
    ipProtocols?: pulumi.Input<pulumi.Input<inputs.ObjectSystemNpuNpqueuesIpProtocol>[]>;
    ipServices?: pulumi.Input<pulumi.Input<inputs.ObjectSystemNpuNpqueuesIpService>[]>;
    profiles?: pulumi.Input<pulumi.Input<inputs.ObjectSystemNpuNpqueuesProfile>[]>;
    schedulers?: pulumi.Input<pulumi.Input<inputs.ObjectSystemNpuNpqueuesScheduler>[]>;
    scopetype?: pulumi.Input<string>;
}
