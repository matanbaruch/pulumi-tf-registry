// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ObjectUserNsx extends pulumi.CustomResource {
    /**
     * Get an existing ObjectUserNsx resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectUserNsxState, opts?: pulumi.CustomResourceOptions): ObjectUserNsx {
        return new ObjectUserNsx(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/objectUserNsx:ObjectUserNsx';

    /**
     * Returns true if the given object is an instance of ObjectUserNsx.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectUserNsx {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectUserNsx.__pulumiType;
    }

    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly fmgip!: pulumi.Output<string | undefined>;
    public readonly fmgpasswds!: pulumi.Output<string[]>;
    public readonly fmguser!: pulumi.Output<string | undefined>;
    public readonly ifAllgroup!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly passwords!: pulumi.Output<string[]>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly server!: pulumi.Output<string | undefined>;
    public readonly serviceIds!: pulumi.Output<string[]>;
    public readonly serviceManagerId!: pulumi.Output<string | undefined>;
    public readonly serviceManagerRev!: pulumi.Output<number | undefined>;
    public readonly services!: pulumi.Output<outputs.ObjectUserNsxService[] | undefined>;
    public readonly status!: pulumi.Output<string>;
    public readonly user!: pulumi.Output<string | undefined>;

    /**
     * Create a ObjectUserNsx resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ObjectUserNsxArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectUserNsxArgs | ObjectUserNsxState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectUserNsxState | undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["fmgip"] = state ? state.fmgip : undefined;
            resourceInputs["fmgpasswds"] = state ? state.fmgpasswds : undefined;
            resourceInputs["fmguser"] = state ? state.fmguser : undefined;
            resourceInputs["ifAllgroup"] = state ? state.ifAllgroup : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["passwords"] = state ? state.passwords : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["serviceIds"] = state ? state.serviceIds : undefined;
            resourceInputs["serviceManagerId"] = state ? state.serviceManagerId : undefined;
            resourceInputs["serviceManagerRev"] = state ? state.serviceManagerRev : undefined;
            resourceInputs["services"] = state ? state.services : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
        } else {
            const args = argsOrState as ObjectUserNsxArgs | undefined;
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["fmgip"] = args ? args.fmgip : undefined;
            resourceInputs["fmgpasswds"] = args?.fmgpasswds ? pulumi.secret(args.fmgpasswds) : undefined;
            resourceInputs["fmguser"] = args ? args.fmguser : undefined;
            resourceInputs["ifAllgroup"] = args ? args.ifAllgroup : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["passwords"] = args?.passwords ? pulumi.secret(args.passwords) : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["serviceIds"] = args ? args.serviceIds : undefined;
            resourceInputs["serviceManagerId"] = args ? args.serviceManagerId : undefined;
            resourceInputs["serviceManagerRev"] = args ? args.serviceManagerRev : undefined;
            resourceInputs["services"] = args ? args.services : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["fmgpasswds", "passwords"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ObjectUserNsx.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectUserNsx resources.
 */
export interface ObjectUserNsxState {
    adom?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    fmgip?: pulumi.Input<string>;
    fmgpasswds?: pulumi.Input<pulumi.Input<string>[]>;
    fmguser?: pulumi.Input<string>;
    ifAllgroup?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    passwords?: pulumi.Input<pulumi.Input<string>[]>;
    scopetype?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
    serviceIds?: pulumi.Input<pulumi.Input<string>[]>;
    serviceManagerId?: pulumi.Input<string>;
    serviceManagerRev?: pulumi.Input<number>;
    services?: pulumi.Input<pulumi.Input<inputs.ObjectUserNsxService>[]>;
    status?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectUserNsx resource.
 */
export interface ObjectUserNsxArgs {
    adom?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    fmgip?: pulumi.Input<string>;
    fmgpasswds?: pulumi.Input<pulumi.Input<string>[]>;
    fmguser?: pulumi.Input<string>;
    ifAllgroup?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    passwords?: pulumi.Input<pulumi.Input<string>[]>;
    scopetype?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
    serviceIds?: pulumi.Input<pulumi.Input<string>[]>;
    serviceManagerId?: pulumi.Input<string>;
    serviceManagerRev?: pulumi.Input<number>;
    services?: pulumi.Input<pulumi.Input<inputs.ObjectUserNsxService>[]>;
    status?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
}
