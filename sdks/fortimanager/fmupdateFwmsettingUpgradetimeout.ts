// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FmupdateFwmsettingUpgradetimeout extends pulumi.CustomResource {
    /**
     * Get an existing FmupdateFwmsettingUpgradetimeout resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FmupdateFwmsettingUpgradetimeoutState, opts?: pulumi.CustomResourceOptions): FmupdateFwmsettingUpgradetimeout {
        return new FmupdateFwmsettingUpgradetimeout(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/fmupdateFwmsettingUpgradetimeout:FmupdateFwmsettingUpgradetimeout';

    /**
     * Returns true if the given object is an instance of FmupdateFwmsettingUpgradetimeout.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FmupdateFwmsettingUpgradetimeout {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FmupdateFwmsettingUpgradetimeout.__pulumiType;
    }

    public readonly checkStatusTimeout!: pulumi.Output<number>;
    public readonly ctrlCheckStatusTimeout!: pulumi.Output<number>;
    public readonly ctrlPutImageByFdsTimeout!: pulumi.Output<number>;
    public readonly haSyncTimeout!: pulumi.Output<number>;
    public readonly healthCheckTimeout!: pulumi.Output<number>;
    public readonly licenseCheckTimeout!: pulumi.Output<number>;
    public readonly prepareImageTimeout!: pulumi.Output<number>;
    public readonly putImageByFdsTimeout!: pulumi.Output<number>;
    public readonly putImageTimeout!: pulumi.Output<number>;
    public readonly rebootOfFsckTimeout!: pulumi.Output<number>;
    public readonly rebootOfUpgradeTimeout!: pulumi.Output<number>;
    public readonly retrieveTimeout!: pulumi.Output<number>;
    public readonly rpcTimeout!: pulumi.Output<number>;
    public readonly totalTimeout!: pulumi.Output<number>;

    /**
     * Create a FmupdateFwmsettingUpgradetimeout resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FmupdateFwmsettingUpgradetimeoutArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FmupdateFwmsettingUpgradetimeoutArgs | FmupdateFwmsettingUpgradetimeoutState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FmupdateFwmsettingUpgradetimeoutState | undefined;
            resourceInputs["checkStatusTimeout"] = state ? state.checkStatusTimeout : undefined;
            resourceInputs["ctrlCheckStatusTimeout"] = state ? state.ctrlCheckStatusTimeout : undefined;
            resourceInputs["ctrlPutImageByFdsTimeout"] = state ? state.ctrlPutImageByFdsTimeout : undefined;
            resourceInputs["haSyncTimeout"] = state ? state.haSyncTimeout : undefined;
            resourceInputs["healthCheckTimeout"] = state ? state.healthCheckTimeout : undefined;
            resourceInputs["licenseCheckTimeout"] = state ? state.licenseCheckTimeout : undefined;
            resourceInputs["prepareImageTimeout"] = state ? state.prepareImageTimeout : undefined;
            resourceInputs["putImageByFdsTimeout"] = state ? state.putImageByFdsTimeout : undefined;
            resourceInputs["putImageTimeout"] = state ? state.putImageTimeout : undefined;
            resourceInputs["rebootOfFsckTimeout"] = state ? state.rebootOfFsckTimeout : undefined;
            resourceInputs["rebootOfUpgradeTimeout"] = state ? state.rebootOfUpgradeTimeout : undefined;
            resourceInputs["retrieveTimeout"] = state ? state.retrieveTimeout : undefined;
            resourceInputs["rpcTimeout"] = state ? state.rpcTimeout : undefined;
            resourceInputs["totalTimeout"] = state ? state.totalTimeout : undefined;
        } else {
            const args = argsOrState as FmupdateFwmsettingUpgradetimeoutArgs | undefined;
            resourceInputs["checkStatusTimeout"] = args ? args.checkStatusTimeout : undefined;
            resourceInputs["ctrlCheckStatusTimeout"] = args ? args.ctrlCheckStatusTimeout : undefined;
            resourceInputs["ctrlPutImageByFdsTimeout"] = args ? args.ctrlPutImageByFdsTimeout : undefined;
            resourceInputs["haSyncTimeout"] = args ? args.haSyncTimeout : undefined;
            resourceInputs["healthCheckTimeout"] = args ? args.healthCheckTimeout : undefined;
            resourceInputs["licenseCheckTimeout"] = args ? args.licenseCheckTimeout : undefined;
            resourceInputs["prepareImageTimeout"] = args ? args.prepareImageTimeout : undefined;
            resourceInputs["putImageByFdsTimeout"] = args ? args.putImageByFdsTimeout : undefined;
            resourceInputs["putImageTimeout"] = args ? args.putImageTimeout : undefined;
            resourceInputs["rebootOfFsckTimeout"] = args ? args.rebootOfFsckTimeout : undefined;
            resourceInputs["rebootOfUpgradeTimeout"] = args ? args.rebootOfUpgradeTimeout : undefined;
            resourceInputs["retrieveTimeout"] = args ? args.retrieveTimeout : undefined;
            resourceInputs["rpcTimeout"] = args ? args.rpcTimeout : undefined;
            resourceInputs["totalTimeout"] = args ? args.totalTimeout : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FmupdateFwmsettingUpgradetimeout.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FmupdateFwmsettingUpgradetimeout resources.
 */
export interface FmupdateFwmsettingUpgradetimeoutState {
    checkStatusTimeout?: pulumi.Input<number>;
    ctrlCheckStatusTimeout?: pulumi.Input<number>;
    ctrlPutImageByFdsTimeout?: pulumi.Input<number>;
    haSyncTimeout?: pulumi.Input<number>;
    healthCheckTimeout?: pulumi.Input<number>;
    licenseCheckTimeout?: pulumi.Input<number>;
    prepareImageTimeout?: pulumi.Input<number>;
    putImageByFdsTimeout?: pulumi.Input<number>;
    putImageTimeout?: pulumi.Input<number>;
    rebootOfFsckTimeout?: pulumi.Input<number>;
    rebootOfUpgradeTimeout?: pulumi.Input<number>;
    retrieveTimeout?: pulumi.Input<number>;
    rpcTimeout?: pulumi.Input<number>;
    totalTimeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a FmupdateFwmsettingUpgradetimeout resource.
 */
export interface FmupdateFwmsettingUpgradetimeoutArgs {
    checkStatusTimeout?: pulumi.Input<number>;
    ctrlCheckStatusTimeout?: pulumi.Input<number>;
    ctrlPutImageByFdsTimeout?: pulumi.Input<number>;
    haSyncTimeout?: pulumi.Input<number>;
    healthCheckTimeout?: pulumi.Input<number>;
    licenseCheckTimeout?: pulumi.Input<number>;
    prepareImageTimeout?: pulumi.Input<number>;
    putImageByFdsTimeout?: pulumi.Input<number>;
    putImageTimeout?: pulumi.Input<number>;
    rebootOfFsckTimeout?: pulumi.Input<number>;
    rebootOfUpgradeTimeout?: pulumi.Input<number>;
    retrieveTimeout?: pulumi.Input<number>;
    rpcTimeout?: pulumi.Input<number>;
    totalTimeout?: pulumi.Input<number>;
}
