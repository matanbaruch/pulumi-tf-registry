// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PackagesFirewallPolicy64 extends pulumi.CustomResource {
    /**
     * Get an existing PackagesFirewallPolicy64 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PackagesFirewallPolicy64State, opts?: pulumi.CustomResourceOptions): PackagesFirewallPolicy64 {
        return new PackagesFirewallPolicy64(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/packagesFirewallPolicy64:PackagesFirewallPolicy64';

    /**
     * Returns true if the given object is an instance of PackagesFirewallPolicy64.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PackagesFirewallPolicy64 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PackagesFirewallPolicy64.__pulumiType;
    }

    public readonly action!: pulumi.Output<string>;
    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly cgnEif!: pulumi.Output<string | undefined>;
    public readonly cgnEim!: pulumi.Output<string | undefined>;
    public readonly cgnLogServerGrp!: pulumi.Output<string | undefined>;
    public readonly cgnResourceQuota!: pulumi.Output<number | undefined>;
    public readonly cgnSessionQuota!: pulumi.Output<number | undefined>;
    public readonly comments!: pulumi.Output<string | undefined>;
    public readonly dstaddrs!: pulumi.Output<string[]>;
    public readonly dstintfs!: pulumi.Output<string[]>;
    public readonly fixedport!: pulumi.Output<string>;
    public readonly ippool!: pulumi.Output<string>;
    public readonly logtraffic!: pulumi.Output<string>;
    public readonly logtrafficStart!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly perIpShaper!: pulumi.Output<string | undefined>;
    public readonly permitAnyHost!: pulumi.Output<string>;
    public readonly pkg!: pulumi.Output<string>;
    public readonly pkgFolderPath!: pulumi.Output<string | undefined>;
    public readonly policyOffload!: pulumi.Output<string | undefined>;
    public readonly policyid!: pulumi.Output<number | undefined>;
    public readonly poolnames!: pulumi.Output<string[]>;
    public readonly schedule!: pulumi.Output<string | undefined>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly services!: pulumi.Output<string[]>;
    public readonly srcaddrs!: pulumi.Output<string[]>;
    public readonly srcintfs!: pulumi.Output<string[]>;
    public readonly status!: pulumi.Output<string>;
    public readonly tcpMssReceiver!: pulumi.Output<number | undefined>;
    public readonly tcpMssSender!: pulumi.Output<number | undefined>;
    public readonly trafficShaper!: pulumi.Output<string | undefined>;
    public readonly trafficShaperReverse!: pulumi.Output<string | undefined>;
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a PackagesFirewallPolicy64 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PackagesFirewallPolicy64Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PackagesFirewallPolicy64Args | PackagesFirewallPolicy64State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PackagesFirewallPolicy64State | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["cgnEif"] = state ? state.cgnEif : undefined;
            resourceInputs["cgnEim"] = state ? state.cgnEim : undefined;
            resourceInputs["cgnLogServerGrp"] = state ? state.cgnLogServerGrp : undefined;
            resourceInputs["cgnResourceQuota"] = state ? state.cgnResourceQuota : undefined;
            resourceInputs["cgnSessionQuota"] = state ? state.cgnSessionQuota : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["dstaddrs"] = state ? state.dstaddrs : undefined;
            resourceInputs["dstintfs"] = state ? state.dstintfs : undefined;
            resourceInputs["fixedport"] = state ? state.fixedport : undefined;
            resourceInputs["ippool"] = state ? state.ippool : undefined;
            resourceInputs["logtraffic"] = state ? state.logtraffic : undefined;
            resourceInputs["logtrafficStart"] = state ? state.logtrafficStart : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["perIpShaper"] = state ? state.perIpShaper : undefined;
            resourceInputs["permitAnyHost"] = state ? state.permitAnyHost : undefined;
            resourceInputs["pkg"] = state ? state.pkg : undefined;
            resourceInputs["pkgFolderPath"] = state ? state.pkgFolderPath : undefined;
            resourceInputs["policyOffload"] = state ? state.policyOffload : undefined;
            resourceInputs["policyid"] = state ? state.policyid : undefined;
            resourceInputs["poolnames"] = state ? state.poolnames : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["services"] = state ? state.services : undefined;
            resourceInputs["srcaddrs"] = state ? state.srcaddrs : undefined;
            resourceInputs["srcintfs"] = state ? state.srcintfs : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tcpMssReceiver"] = state ? state.tcpMssReceiver : undefined;
            resourceInputs["tcpMssSender"] = state ? state.tcpMssSender : undefined;
            resourceInputs["trafficShaper"] = state ? state.trafficShaper : undefined;
            resourceInputs["trafficShaperReverse"] = state ? state.trafficShaperReverse : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as PackagesFirewallPolicy64Args | undefined;
            if ((!args || args.pkg === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pkg'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["cgnEif"] = args ? args.cgnEif : undefined;
            resourceInputs["cgnEim"] = args ? args.cgnEim : undefined;
            resourceInputs["cgnLogServerGrp"] = args ? args.cgnLogServerGrp : undefined;
            resourceInputs["cgnResourceQuota"] = args ? args.cgnResourceQuota : undefined;
            resourceInputs["cgnSessionQuota"] = args ? args.cgnSessionQuota : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["dstaddrs"] = args ? args.dstaddrs : undefined;
            resourceInputs["dstintfs"] = args ? args.dstintfs : undefined;
            resourceInputs["fixedport"] = args ? args.fixedport : undefined;
            resourceInputs["ippool"] = args ? args.ippool : undefined;
            resourceInputs["logtraffic"] = args ? args.logtraffic : undefined;
            resourceInputs["logtrafficStart"] = args ? args.logtrafficStart : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["perIpShaper"] = args ? args.perIpShaper : undefined;
            resourceInputs["permitAnyHost"] = args ? args.permitAnyHost : undefined;
            resourceInputs["pkg"] = args ? args.pkg : undefined;
            resourceInputs["pkgFolderPath"] = args ? args.pkgFolderPath : undefined;
            resourceInputs["policyOffload"] = args ? args.policyOffload : undefined;
            resourceInputs["policyid"] = args ? args.policyid : undefined;
            resourceInputs["poolnames"] = args ? args.poolnames : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["services"] = args ? args.services : undefined;
            resourceInputs["srcaddrs"] = args ? args.srcaddrs : undefined;
            resourceInputs["srcintfs"] = args ? args.srcintfs : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tcpMssReceiver"] = args ? args.tcpMssReceiver : undefined;
            resourceInputs["tcpMssSender"] = args ? args.tcpMssSender : undefined;
            resourceInputs["trafficShaper"] = args ? args.trafficShaper : undefined;
            resourceInputs["trafficShaperReverse"] = args ? args.trafficShaperReverse : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PackagesFirewallPolicy64.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PackagesFirewallPolicy64 resources.
 */
export interface PackagesFirewallPolicy64State {
    action?: pulumi.Input<string>;
    adom?: pulumi.Input<string>;
    cgnEif?: pulumi.Input<string>;
    cgnEim?: pulumi.Input<string>;
    cgnLogServerGrp?: pulumi.Input<string>;
    cgnResourceQuota?: pulumi.Input<number>;
    cgnSessionQuota?: pulumi.Input<number>;
    comments?: pulumi.Input<string>;
    dstaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    dstintfs?: pulumi.Input<pulumi.Input<string>[]>;
    fixedport?: pulumi.Input<string>;
    ippool?: pulumi.Input<string>;
    logtraffic?: pulumi.Input<string>;
    logtrafficStart?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    perIpShaper?: pulumi.Input<string>;
    permitAnyHost?: pulumi.Input<string>;
    pkg?: pulumi.Input<string>;
    pkgFolderPath?: pulumi.Input<string>;
    policyOffload?: pulumi.Input<string>;
    policyid?: pulumi.Input<number>;
    poolnames?: pulumi.Input<pulumi.Input<string>[]>;
    schedule?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    services?: pulumi.Input<pulumi.Input<string>[]>;
    srcaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    srcintfs?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    tcpMssReceiver?: pulumi.Input<number>;
    tcpMssSender?: pulumi.Input<number>;
    trafficShaper?: pulumi.Input<string>;
    trafficShaperReverse?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PackagesFirewallPolicy64 resource.
 */
export interface PackagesFirewallPolicy64Args {
    action?: pulumi.Input<string>;
    adom?: pulumi.Input<string>;
    cgnEif?: pulumi.Input<string>;
    cgnEim?: pulumi.Input<string>;
    cgnLogServerGrp?: pulumi.Input<string>;
    cgnResourceQuota?: pulumi.Input<number>;
    cgnSessionQuota?: pulumi.Input<number>;
    comments?: pulumi.Input<string>;
    dstaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    dstintfs?: pulumi.Input<pulumi.Input<string>[]>;
    fixedport?: pulumi.Input<string>;
    ippool?: pulumi.Input<string>;
    logtraffic?: pulumi.Input<string>;
    logtrafficStart?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    perIpShaper?: pulumi.Input<string>;
    permitAnyHost?: pulumi.Input<string>;
    pkg: pulumi.Input<string>;
    pkgFolderPath?: pulumi.Input<string>;
    policyOffload?: pulumi.Input<string>;
    policyid?: pulumi.Input<number>;
    poolnames?: pulumi.Input<pulumi.Input<string>[]>;
    schedule?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    services?: pulumi.Input<pulumi.Input<string>[]>;
    srcaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    srcintfs?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    tcpMssReceiver?: pulumi.Input<number>;
    tcpMssSender?: pulumi.Input<number>;
    trafficShaper?: pulumi.Input<string>;
    trafficShaperReverse?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}
