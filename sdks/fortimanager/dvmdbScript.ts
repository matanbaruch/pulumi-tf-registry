// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DvmdbScript extends pulumi.CustomResource {
    /**
     * Get an existing DvmdbScript resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DvmdbScriptState, opts?: pulumi.CustomResourceOptions): DvmdbScript {
        return new DvmdbScript(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/dvmdbScript:DvmdbScript';

    /**
     * Returns true if the given object is an instance of DvmdbScript.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DvmdbScript {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DvmdbScript.__pulumiType;
    }

    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly content!: pulumi.Output<string | undefined>;
    public readonly desc!: pulumi.Output<string | undefined>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly filterBuild!: pulumi.Output<number>;
    public readonly filterDevice!: pulumi.Output<number | undefined>;
    public readonly filterHostname!: pulumi.Output<string | undefined>;
    public readonly filterOstype!: pulumi.Output<string>;
    public readonly filterOsver!: pulumi.Output<string>;
    public readonly filterPlatform!: pulumi.Output<string | undefined>;
    public readonly filterSerial!: pulumi.Output<string | undefined>;
    public readonly modificationTime!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly scriptSchedules!: pulumi.Output<outputs.DvmdbScriptScriptSchedule[] | undefined>;
    public readonly target!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a DvmdbScript resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DvmdbScriptArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DvmdbScriptArgs | DvmdbScriptState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DvmdbScriptState | undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["desc"] = state ? state.desc : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["filterBuild"] = state ? state.filterBuild : undefined;
            resourceInputs["filterDevice"] = state ? state.filterDevice : undefined;
            resourceInputs["filterHostname"] = state ? state.filterHostname : undefined;
            resourceInputs["filterOstype"] = state ? state.filterOstype : undefined;
            resourceInputs["filterOsver"] = state ? state.filterOsver : undefined;
            resourceInputs["filterPlatform"] = state ? state.filterPlatform : undefined;
            resourceInputs["filterSerial"] = state ? state.filterSerial : undefined;
            resourceInputs["modificationTime"] = state ? state.modificationTime : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["scriptSchedules"] = state ? state.scriptSchedules : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DvmdbScriptArgs | undefined;
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["desc"] = args ? args.desc : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["filterBuild"] = args ? args.filterBuild : undefined;
            resourceInputs["filterDevice"] = args ? args.filterDevice : undefined;
            resourceInputs["filterHostname"] = args ? args.filterHostname : undefined;
            resourceInputs["filterOstype"] = args ? args.filterOstype : undefined;
            resourceInputs["filterOsver"] = args ? args.filterOsver : undefined;
            resourceInputs["filterPlatform"] = args ? args.filterPlatform : undefined;
            resourceInputs["filterSerial"] = args ? args.filterSerial : undefined;
            resourceInputs["modificationTime"] = args ? args.modificationTime : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["scriptSchedules"] = args ? args.scriptSchedules : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DvmdbScript.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DvmdbScript resources.
 */
export interface DvmdbScriptState {
    adom?: pulumi.Input<string>;
    content?: pulumi.Input<string>;
    desc?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    filterBuild?: pulumi.Input<number>;
    filterDevice?: pulumi.Input<number>;
    filterHostname?: pulumi.Input<string>;
    filterOstype?: pulumi.Input<string>;
    filterOsver?: pulumi.Input<string>;
    filterPlatform?: pulumi.Input<string>;
    filterSerial?: pulumi.Input<string>;
    modificationTime?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    scriptSchedules?: pulumi.Input<pulumi.Input<inputs.DvmdbScriptScriptSchedule>[]>;
    target?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DvmdbScript resource.
 */
export interface DvmdbScriptArgs {
    adom?: pulumi.Input<string>;
    content?: pulumi.Input<string>;
    desc?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    filterBuild?: pulumi.Input<number>;
    filterDevice?: pulumi.Input<number>;
    filterHostname?: pulumi.Input<string>;
    filterOstype?: pulumi.Input<string>;
    filterOsver?: pulumi.Input<string>;
    filterPlatform?: pulumi.Input<string>;
    filterSerial?: pulumi.Input<string>;
    modificationTime?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    scriptSchedules?: pulumi.Input<pulumi.Input<inputs.DvmdbScriptScriptSchedule>[]>;
    target?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}
