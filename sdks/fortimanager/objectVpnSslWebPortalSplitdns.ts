// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ObjectVpnSslWebPortalSplitdns extends pulumi.CustomResource {
    /**
     * Get an existing ObjectVpnSslWebPortalSplitdns resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectVpnSslWebPortalSplitdnsState, opts?: pulumi.CustomResourceOptions): ObjectVpnSslWebPortalSplitdns {
        return new ObjectVpnSslWebPortalSplitdns(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/objectVpnSslWebPortalSplitdns:ObjectVpnSslWebPortalSplitdns';

    /**
     * Returns true if the given object is an instance of ObjectVpnSslWebPortalSplitdns.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectVpnSslWebPortalSplitdns {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectVpnSslWebPortalSplitdns.__pulumiType;
    }

    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly dnsServer1!: pulumi.Output<string | undefined>;
    public readonly dnsServer2!: pulumi.Output<string | undefined>;
    public readonly domains!: pulumi.Output<string | undefined>;
    public readonly fosid!: pulumi.Output<number | undefined>;
    public readonly ipv6DnsServer1!: pulumi.Output<string | undefined>;
    public readonly ipv6DnsServer2!: pulumi.Output<string | undefined>;
    public readonly portal!: pulumi.Output<string>;
    public readonly scopetype!: pulumi.Output<string | undefined>;

    /**
     * Create a ObjectVpnSslWebPortalSplitdns resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObjectVpnSslWebPortalSplitdnsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectVpnSslWebPortalSplitdnsArgs | ObjectVpnSslWebPortalSplitdnsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectVpnSslWebPortalSplitdnsState | undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["dnsServer1"] = state ? state.dnsServer1 : undefined;
            resourceInputs["dnsServer2"] = state ? state.dnsServer2 : undefined;
            resourceInputs["domains"] = state ? state.domains : undefined;
            resourceInputs["fosid"] = state ? state.fosid : undefined;
            resourceInputs["ipv6DnsServer1"] = state ? state.ipv6DnsServer1 : undefined;
            resourceInputs["ipv6DnsServer2"] = state ? state.ipv6DnsServer2 : undefined;
            resourceInputs["portal"] = state ? state.portal : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
        } else {
            const args = argsOrState as ObjectVpnSslWebPortalSplitdnsArgs | undefined;
            if ((!args || args.portal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'portal'");
            }
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["dnsServer1"] = args ? args.dnsServer1 : undefined;
            resourceInputs["dnsServer2"] = args ? args.dnsServer2 : undefined;
            resourceInputs["domains"] = args ? args.domains : undefined;
            resourceInputs["fosid"] = args ? args.fosid : undefined;
            resourceInputs["ipv6DnsServer1"] = args ? args.ipv6DnsServer1 : undefined;
            resourceInputs["ipv6DnsServer2"] = args ? args.ipv6DnsServer2 : undefined;
            resourceInputs["portal"] = args ? args.portal : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectVpnSslWebPortalSplitdns.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectVpnSslWebPortalSplitdns resources.
 */
export interface ObjectVpnSslWebPortalSplitdnsState {
    adom?: pulumi.Input<string>;
    dnsServer1?: pulumi.Input<string>;
    dnsServer2?: pulumi.Input<string>;
    domains?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    ipv6DnsServer1?: pulumi.Input<string>;
    ipv6DnsServer2?: pulumi.Input<string>;
    portal?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectVpnSslWebPortalSplitdns resource.
 */
export interface ObjectVpnSslWebPortalSplitdnsArgs {
    adom?: pulumi.Input<string>;
    dnsServer1?: pulumi.Input<string>;
    dnsServer2?: pulumi.Input<string>;
    domains?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    ipv6DnsServer1?: pulumi.Input<string>;
    ipv6DnsServer2?: pulumi.Input<string>;
    portal: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
}
