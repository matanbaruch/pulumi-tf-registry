// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ObjectLogNpuserverServergroup extends pulumi.CustomResource {
    /**
     * Get an existing ObjectLogNpuserverServergroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectLogNpuserverServergroupState, opts?: pulumi.CustomResourceOptions): ObjectLogNpuserverServergroup {
        return new ObjectLogNpuserverServergroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/objectLogNpuserverServergroup:ObjectLogNpuserverServergroup';

    /**
     * Returns true if the given object is an instance of ObjectLogNpuserverServergroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectLogNpuserverServergroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectLogNpuserverServergroup.__pulumiType;
    }

    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly groupName!: pulumi.Output<string | undefined>;
    public readonly logFormat!: pulumi.Output<string>;
    public readonly logGenEvent!: pulumi.Output<string>;
    public readonly logMode!: pulumi.Output<string>;
    public readonly logTxMode!: pulumi.Output<string>;
    public readonly logUserInfo!: pulumi.Output<string>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly serverNumber!: pulumi.Output<number | undefined>;
    public readonly serverStartId!: pulumi.Output<number | undefined>;
    public readonly swLogFlags!: pulumi.Output<string>;

    /**
     * Create a ObjectLogNpuserverServergroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ObjectLogNpuserverServergroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectLogNpuserverServergroupArgs | ObjectLogNpuserverServergroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectLogNpuserverServergroupState | undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["groupName"] = state ? state.groupName : undefined;
            resourceInputs["logFormat"] = state ? state.logFormat : undefined;
            resourceInputs["logGenEvent"] = state ? state.logGenEvent : undefined;
            resourceInputs["logMode"] = state ? state.logMode : undefined;
            resourceInputs["logTxMode"] = state ? state.logTxMode : undefined;
            resourceInputs["logUserInfo"] = state ? state.logUserInfo : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["serverNumber"] = state ? state.serverNumber : undefined;
            resourceInputs["serverStartId"] = state ? state.serverStartId : undefined;
            resourceInputs["swLogFlags"] = state ? state.swLogFlags : undefined;
        } else {
            const args = argsOrState as ObjectLogNpuserverServergroupArgs | undefined;
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["groupName"] = args ? args.groupName : undefined;
            resourceInputs["logFormat"] = args ? args.logFormat : undefined;
            resourceInputs["logGenEvent"] = args ? args.logGenEvent : undefined;
            resourceInputs["logMode"] = args ? args.logMode : undefined;
            resourceInputs["logTxMode"] = args ? args.logTxMode : undefined;
            resourceInputs["logUserInfo"] = args ? args.logUserInfo : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["serverNumber"] = args ? args.serverNumber : undefined;
            resourceInputs["serverStartId"] = args ? args.serverStartId : undefined;
            resourceInputs["swLogFlags"] = args ? args.swLogFlags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectLogNpuserverServergroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectLogNpuserverServergroup resources.
 */
export interface ObjectLogNpuserverServergroupState {
    adom?: pulumi.Input<string>;
    groupName?: pulumi.Input<string>;
    logFormat?: pulumi.Input<string>;
    logGenEvent?: pulumi.Input<string>;
    logMode?: pulumi.Input<string>;
    logTxMode?: pulumi.Input<string>;
    logUserInfo?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    serverNumber?: pulumi.Input<number>;
    serverStartId?: pulumi.Input<number>;
    swLogFlags?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectLogNpuserverServergroup resource.
 */
export interface ObjectLogNpuserverServergroupArgs {
    adom?: pulumi.Input<string>;
    groupName?: pulumi.Input<string>;
    logFormat?: pulumi.Input<string>;
    logGenEvent?: pulumi.Input<string>;
    logMode?: pulumi.Input<string>;
    logTxMode?: pulumi.Input<string>;
    logUserInfo?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    serverNumber?: pulumi.Input<number>;
    serverStartId?: pulumi.Input<number>;
    swLogFlags?: pulumi.Input<string>;
}
