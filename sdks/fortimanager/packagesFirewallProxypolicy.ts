// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PackagesFirewallProxypolicy extends pulumi.CustomResource {
    /**
     * Get an existing PackagesFirewallProxypolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PackagesFirewallProxypolicyState, opts?: pulumi.CustomResourceOptions): PackagesFirewallProxypolicy {
        return new PackagesFirewallProxypolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/packagesFirewallProxypolicy:PackagesFirewallProxypolicy';

    /**
     * Returns true if the given object is an instance of PackagesFirewallProxypolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PackagesFirewallProxypolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PackagesFirewallProxypolicy.__pulumiType;
    }

    public readonly accessProxies!: pulumi.Output<string[]>;
    public readonly accessProxy6!: pulumi.Output<string | undefined>;
    public readonly action!: pulumi.Output<string>;
    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly applicationList!: pulumi.Output<string | undefined>;
    public readonly avProfile!: pulumi.Output<string | undefined>;
    public readonly blockNotification!: pulumi.Output<string>;
    public readonly casbProfile!: pulumi.Output<string | undefined>;
    public readonly cifsProfile!: pulumi.Output<string | undefined>;
    public readonly comments!: pulumi.Output<string | undefined>;
    public readonly decryptedTrafficMirror!: pulumi.Output<string | undefined>;
    public readonly detectHttpsInHttpRequest!: pulumi.Output<string>;
    public readonly deviceOwnership!: pulumi.Output<string>;
    public readonly diameterFilterProfile!: pulumi.Output<string | undefined>;
    public readonly disclaimer!: pulumi.Output<string>;
    public readonly dlpProfile!: pulumi.Output<string | undefined>;
    public readonly dlpSensor!: pulumi.Output<string | undefined>;
    public readonly dstaddr6s!: pulumi.Output<string[]>;
    public readonly dstaddrNegate!: pulumi.Output<string>;
    public readonly dstaddrs!: pulumi.Output<string[]>;
    public readonly dstintfs!: pulumi.Output<string[]>;
    public readonly emailfilterProfile!: pulumi.Output<string | undefined>;
    public readonly fileFilterProfile!: pulumi.Output<string | undefined>;
    public readonly globalLabel!: pulumi.Output<string | undefined>;
    public readonly groups!: pulumi.Output<string[]>;
    public readonly httpTunnelAuth!: pulumi.Output<string>;
    public readonly icapProfile!: pulumi.Output<string | undefined>;
    public readonly internetService!: pulumi.Output<string>;
    public readonly internetService6!: pulumi.Output<string>;
    public readonly internetService6CustomGroups!: pulumi.Output<string[]>;
    public readonly internetService6Customs!: pulumi.Output<string[]>;
    public readonly internetService6Groups!: pulumi.Output<string[]>;
    public readonly internetService6Names!: pulumi.Output<string[]>;
    public readonly internetService6Negate!: pulumi.Output<string>;
    public readonly internetServiceCustom!: pulumi.Output<string | undefined>;
    public readonly internetServiceCustomGroup!: pulumi.Output<string | undefined>;
    public readonly internetServiceGroup!: pulumi.Output<string | undefined>;
    public readonly internetServiceId!: pulumi.Output<string | undefined>;
    public readonly internetServiceName!: pulumi.Output<string | undefined>;
    public readonly internetServiceNegate!: pulumi.Output<string | undefined>;
    public readonly ipsSensor!: pulumi.Output<string | undefined>;
    public readonly ipsVoipFilter!: pulumi.Output<string | undefined>;
    public readonly label!: pulumi.Output<string | undefined>;
    public readonly logtraffic!: pulumi.Output<string | undefined>;
    public readonly logtrafficStart!: pulumi.Output<string>;
    public readonly mmsProfile!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly pkg!: pulumi.Output<string>;
    public readonly pkgFolderPath!: pulumi.Output<string | undefined>;
    public readonly policyid!: pulumi.Output<number | undefined>;
    public readonly poolnames!: pulumi.Output<string[]>;
    public readonly profileGroup!: pulumi.Output<string | undefined>;
    public readonly profileProtocolOptions!: pulumi.Output<string | undefined>;
    public readonly profileType!: pulumi.Output<string>;
    public readonly proxy!: pulumi.Output<string | undefined>;
    public readonly redirectUrl!: pulumi.Output<string | undefined>;
    public readonly replacemsgOverrideGroup!: pulumi.Output<string | undefined>;
    public readonly scanBotnetConnections!: pulumi.Output<string | undefined>;
    public readonly schedule!: pulumi.Output<string | undefined>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly sctpFilterProfile!: pulumi.Output<string | undefined>;
    public readonly serviceNegate!: pulumi.Output<string>;
    public readonly services!: pulumi.Output<string[]>;
    public readonly sessionTtl!: pulumi.Output<number | undefined>;
    public readonly spamfilterProfile!: pulumi.Output<string | undefined>;
    public readonly srcaddr6s!: pulumi.Output<string[]>;
    public readonly srcaddrNegate!: pulumi.Output<string>;
    public readonly srcaddrs!: pulumi.Output<string[]>;
    public readonly srcintf!: pulumi.Output<string | undefined>;
    public readonly sshFilterProfile!: pulumi.Output<string | undefined>;
    public readonly sshPolicyRedirect!: pulumi.Output<string>;
    public readonly sslSshProfile!: pulumi.Output<string | undefined>;
    public readonly status!: pulumi.Output<string>;
    public readonly transparent!: pulumi.Output<string | undefined>;
    public readonly users!: pulumi.Output<string[]>;
    public readonly utmStatus!: pulumi.Output<string | undefined>;
    public readonly uuid!: pulumi.Output<string>;
    public readonly videofilterProfile!: pulumi.Output<string | undefined>;
    public readonly virtualPatchProfile!: pulumi.Output<string | undefined>;
    public readonly voipProfile!: pulumi.Output<string | undefined>;
    public readonly wafProfile!: pulumi.Output<string | undefined>;
    public readonly webcache!: pulumi.Output<string>;
    public readonly webcacheHttps!: pulumi.Output<string>;
    public readonly webfilterProfile!: pulumi.Output<string | undefined>;
    public readonly webproxyForwardServer!: pulumi.Output<string | undefined>;
    public readonly webproxyProfile!: pulumi.Output<string | undefined>;
    public readonly ztnaEmsTags!: pulumi.Output<string[]>;
    public readonly ztnaTagsMatchLogic!: pulumi.Output<string>;

    /**
     * Create a PackagesFirewallProxypolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PackagesFirewallProxypolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PackagesFirewallProxypolicyArgs | PackagesFirewallProxypolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PackagesFirewallProxypolicyState | undefined;
            resourceInputs["accessProxies"] = state ? state.accessProxies : undefined;
            resourceInputs["accessProxy6"] = state ? state.accessProxy6 : undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["applicationList"] = state ? state.applicationList : undefined;
            resourceInputs["avProfile"] = state ? state.avProfile : undefined;
            resourceInputs["blockNotification"] = state ? state.blockNotification : undefined;
            resourceInputs["casbProfile"] = state ? state.casbProfile : undefined;
            resourceInputs["cifsProfile"] = state ? state.cifsProfile : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["decryptedTrafficMirror"] = state ? state.decryptedTrafficMirror : undefined;
            resourceInputs["detectHttpsInHttpRequest"] = state ? state.detectHttpsInHttpRequest : undefined;
            resourceInputs["deviceOwnership"] = state ? state.deviceOwnership : undefined;
            resourceInputs["diameterFilterProfile"] = state ? state.diameterFilterProfile : undefined;
            resourceInputs["disclaimer"] = state ? state.disclaimer : undefined;
            resourceInputs["dlpProfile"] = state ? state.dlpProfile : undefined;
            resourceInputs["dlpSensor"] = state ? state.dlpSensor : undefined;
            resourceInputs["dstaddr6s"] = state ? state.dstaddr6s : undefined;
            resourceInputs["dstaddrNegate"] = state ? state.dstaddrNegate : undefined;
            resourceInputs["dstaddrs"] = state ? state.dstaddrs : undefined;
            resourceInputs["dstintfs"] = state ? state.dstintfs : undefined;
            resourceInputs["emailfilterProfile"] = state ? state.emailfilterProfile : undefined;
            resourceInputs["fileFilterProfile"] = state ? state.fileFilterProfile : undefined;
            resourceInputs["globalLabel"] = state ? state.globalLabel : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["httpTunnelAuth"] = state ? state.httpTunnelAuth : undefined;
            resourceInputs["icapProfile"] = state ? state.icapProfile : undefined;
            resourceInputs["internetService"] = state ? state.internetService : undefined;
            resourceInputs["internetService6"] = state ? state.internetService6 : undefined;
            resourceInputs["internetService6CustomGroups"] = state ? state.internetService6CustomGroups : undefined;
            resourceInputs["internetService6Customs"] = state ? state.internetService6Customs : undefined;
            resourceInputs["internetService6Groups"] = state ? state.internetService6Groups : undefined;
            resourceInputs["internetService6Names"] = state ? state.internetService6Names : undefined;
            resourceInputs["internetService6Negate"] = state ? state.internetService6Negate : undefined;
            resourceInputs["internetServiceCustom"] = state ? state.internetServiceCustom : undefined;
            resourceInputs["internetServiceCustomGroup"] = state ? state.internetServiceCustomGroup : undefined;
            resourceInputs["internetServiceGroup"] = state ? state.internetServiceGroup : undefined;
            resourceInputs["internetServiceId"] = state ? state.internetServiceId : undefined;
            resourceInputs["internetServiceName"] = state ? state.internetServiceName : undefined;
            resourceInputs["internetServiceNegate"] = state ? state.internetServiceNegate : undefined;
            resourceInputs["ipsSensor"] = state ? state.ipsSensor : undefined;
            resourceInputs["ipsVoipFilter"] = state ? state.ipsVoipFilter : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["logtraffic"] = state ? state.logtraffic : undefined;
            resourceInputs["logtrafficStart"] = state ? state.logtrafficStart : undefined;
            resourceInputs["mmsProfile"] = state ? state.mmsProfile : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pkg"] = state ? state.pkg : undefined;
            resourceInputs["pkgFolderPath"] = state ? state.pkgFolderPath : undefined;
            resourceInputs["policyid"] = state ? state.policyid : undefined;
            resourceInputs["poolnames"] = state ? state.poolnames : undefined;
            resourceInputs["profileGroup"] = state ? state.profileGroup : undefined;
            resourceInputs["profileProtocolOptions"] = state ? state.profileProtocolOptions : undefined;
            resourceInputs["profileType"] = state ? state.profileType : undefined;
            resourceInputs["proxy"] = state ? state.proxy : undefined;
            resourceInputs["redirectUrl"] = state ? state.redirectUrl : undefined;
            resourceInputs["replacemsgOverrideGroup"] = state ? state.replacemsgOverrideGroup : undefined;
            resourceInputs["scanBotnetConnections"] = state ? state.scanBotnetConnections : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["sctpFilterProfile"] = state ? state.sctpFilterProfile : undefined;
            resourceInputs["serviceNegate"] = state ? state.serviceNegate : undefined;
            resourceInputs["services"] = state ? state.services : undefined;
            resourceInputs["sessionTtl"] = state ? state.sessionTtl : undefined;
            resourceInputs["spamfilterProfile"] = state ? state.spamfilterProfile : undefined;
            resourceInputs["srcaddr6s"] = state ? state.srcaddr6s : undefined;
            resourceInputs["srcaddrNegate"] = state ? state.srcaddrNegate : undefined;
            resourceInputs["srcaddrs"] = state ? state.srcaddrs : undefined;
            resourceInputs["srcintf"] = state ? state.srcintf : undefined;
            resourceInputs["sshFilterProfile"] = state ? state.sshFilterProfile : undefined;
            resourceInputs["sshPolicyRedirect"] = state ? state.sshPolicyRedirect : undefined;
            resourceInputs["sslSshProfile"] = state ? state.sslSshProfile : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["transparent"] = state ? state.transparent : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
            resourceInputs["utmStatus"] = state ? state.utmStatus : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["videofilterProfile"] = state ? state.videofilterProfile : undefined;
            resourceInputs["virtualPatchProfile"] = state ? state.virtualPatchProfile : undefined;
            resourceInputs["voipProfile"] = state ? state.voipProfile : undefined;
            resourceInputs["wafProfile"] = state ? state.wafProfile : undefined;
            resourceInputs["webcache"] = state ? state.webcache : undefined;
            resourceInputs["webcacheHttps"] = state ? state.webcacheHttps : undefined;
            resourceInputs["webfilterProfile"] = state ? state.webfilterProfile : undefined;
            resourceInputs["webproxyForwardServer"] = state ? state.webproxyForwardServer : undefined;
            resourceInputs["webproxyProfile"] = state ? state.webproxyProfile : undefined;
            resourceInputs["ztnaEmsTags"] = state ? state.ztnaEmsTags : undefined;
            resourceInputs["ztnaTagsMatchLogic"] = state ? state.ztnaTagsMatchLogic : undefined;
        } else {
            const args = argsOrState as PackagesFirewallProxypolicyArgs | undefined;
            if ((!args || args.pkg === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pkg'");
            }
            resourceInputs["accessProxies"] = args ? args.accessProxies : undefined;
            resourceInputs["accessProxy6"] = args ? args.accessProxy6 : undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["applicationList"] = args ? args.applicationList : undefined;
            resourceInputs["avProfile"] = args ? args.avProfile : undefined;
            resourceInputs["blockNotification"] = args ? args.blockNotification : undefined;
            resourceInputs["casbProfile"] = args ? args.casbProfile : undefined;
            resourceInputs["cifsProfile"] = args ? args.cifsProfile : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["decryptedTrafficMirror"] = args ? args.decryptedTrafficMirror : undefined;
            resourceInputs["detectHttpsInHttpRequest"] = args ? args.detectHttpsInHttpRequest : undefined;
            resourceInputs["deviceOwnership"] = args ? args.deviceOwnership : undefined;
            resourceInputs["diameterFilterProfile"] = args ? args.diameterFilterProfile : undefined;
            resourceInputs["disclaimer"] = args ? args.disclaimer : undefined;
            resourceInputs["dlpProfile"] = args ? args.dlpProfile : undefined;
            resourceInputs["dlpSensor"] = args ? args.dlpSensor : undefined;
            resourceInputs["dstaddr6s"] = args ? args.dstaddr6s : undefined;
            resourceInputs["dstaddrNegate"] = args ? args.dstaddrNegate : undefined;
            resourceInputs["dstaddrs"] = args ? args.dstaddrs : undefined;
            resourceInputs["dstintfs"] = args ? args.dstintfs : undefined;
            resourceInputs["emailfilterProfile"] = args ? args.emailfilterProfile : undefined;
            resourceInputs["fileFilterProfile"] = args ? args.fileFilterProfile : undefined;
            resourceInputs["globalLabel"] = args ? args.globalLabel : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["httpTunnelAuth"] = args ? args.httpTunnelAuth : undefined;
            resourceInputs["icapProfile"] = args ? args.icapProfile : undefined;
            resourceInputs["internetService"] = args ? args.internetService : undefined;
            resourceInputs["internetService6"] = args ? args.internetService6 : undefined;
            resourceInputs["internetService6CustomGroups"] = args ? args.internetService6CustomGroups : undefined;
            resourceInputs["internetService6Customs"] = args ? args.internetService6Customs : undefined;
            resourceInputs["internetService6Groups"] = args ? args.internetService6Groups : undefined;
            resourceInputs["internetService6Names"] = args ? args.internetService6Names : undefined;
            resourceInputs["internetService6Negate"] = args ? args.internetService6Negate : undefined;
            resourceInputs["internetServiceCustom"] = args ? args.internetServiceCustom : undefined;
            resourceInputs["internetServiceCustomGroup"] = args ? args.internetServiceCustomGroup : undefined;
            resourceInputs["internetServiceGroup"] = args ? args.internetServiceGroup : undefined;
            resourceInputs["internetServiceId"] = args ? args.internetServiceId : undefined;
            resourceInputs["internetServiceName"] = args ? args.internetServiceName : undefined;
            resourceInputs["internetServiceNegate"] = args ? args.internetServiceNegate : undefined;
            resourceInputs["ipsSensor"] = args ? args.ipsSensor : undefined;
            resourceInputs["ipsVoipFilter"] = args ? args.ipsVoipFilter : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["logtraffic"] = args ? args.logtraffic : undefined;
            resourceInputs["logtrafficStart"] = args ? args.logtrafficStart : undefined;
            resourceInputs["mmsProfile"] = args ? args.mmsProfile : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pkg"] = args ? args.pkg : undefined;
            resourceInputs["pkgFolderPath"] = args ? args.pkgFolderPath : undefined;
            resourceInputs["policyid"] = args ? args.policyid : undefined;
            resourceInputs["poolnames"] = args ? args.poolnames : undefined;
            resourceInputs["profileGroup"] = args ? args.profileGroup : undefined;
            resourceInputs["profileProtocolOptions"] = args ? args.profileProtocolOptions : undefined;
            resourceInputs["profileType"] = args ? args.profileType : undefined;
            resourceInputs["proxy"] = args ? args.proxy : undefined;
            resourceInputs["redirectUrl"] = args ? args.redirectUrl : undefined;
            resourceInputs["replacemsgOverrideGroup"] = args ? args.replacemsgOverrideGroup : undefined;
            resourceInputs["scanBotnetConnections"] = args ? args.scanBotnetConnections : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["sctpFilterProfile"] = args ? args.sctpFilterProfile : undefined;
            resourceInputs["serviceNegate"] = args ? args.serviceNegate : undefined;
            resourceInputs["services"] = args ? args.services : undefined;
            resourceInputs["sessionTtl"] = args ? args.sessionTtl : undefined;
            resourceInputs["spamfilterProfile"] = args ? args.spamfilterProfile : undefined;
            resourceInputs["srcaddr6s"] = args ? args.srcaddr6s : undefined;
            resourceInputs["srcaddrNegate"] = args ? args.srcaddrNegate : undefined;
            resourceInputs["srcaddrs"] = args ? args.srcaddrs : undefined;
            resourceInputs["srcintf"] = args ? args.srcintf : undefined;
            resourceInputs["sshFilterProfile"] = args ? args.sshFilterProfile : undefined;
            resourceInputs["sshPolicyRedirect"] = args ? args.sshPolicyRedirect : undefined;
            resourceInputs["sslSshProfile"] = args ? args.sslSshProfile : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["transparent"] = args ? args.transparent : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
            resourceInputs["utmStatus"] = args ? args.utmStatus : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["videofilterProfile"] = args ? args.videofilterProfile : undefined;
            resourceInputs["virtualPatchProfile"] = args ? args.virtualPatchProfile : undefined;
            resourceInputs["voipProfile"] = args ? args.voipProfile : undefined;
            resourceInputs["wafProfile"] = args ? args.wafProfile : undefined;
            resourceInputs["webcache"] = args ? args.webcache : undefined;
            resourceInputs["webcacheHttps"] = args ? args.webcacheHttps : undefined;
            resourceInputs["webfilterProfile"] = args ? args.webfilterProfile : undefined;
            resourceInputs["webproxyForwardServer"] = args ? args.webproxyForwardServer : undefined;
            resourceInputs["webproxyProfile"] = args ? args.webproxyProfile : undefined;
            resourceInputs["ztnaEmsTags"] = args ? args.ztnaEmsTags : undefined;
            resourceInputs["ztnaTagsMatchLogic"] = args ? args.ztnaTagsMatchLogic : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PackagesFirewallProxypolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PackagesFirewallProxypolicy resources.
 */
export interface PackagesFirewallProxypolicyState {
    accessProxies?: pulumi.Input<pulumi.Input<string>[]>;
    accessProxy6?: pulumi.Input<string>;
    action?: pulumi.Input<string>;
    adom?: pulumi.Input<string>;
    applicationList?: pulumi.Input<string>;
    avProfile?: pulumi.Input<string>;
    blockNotification?: pulumi.Input<string>;
    casbProfile?: pulumi.Input<string>;
    cifsProfile?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    decryptedTrafficMirror?: pulumi.Input<string>;
    detectHttpsInHttpRequest?: pulumi.Input<string>;
    deviceOwnership?: pulumi.Input<string>;
    diameterFilterProfile?: pulumi.Input<string>;
    disclaimer?: pulumi.Input<string>;
    dlpProfile?: pulumi.Input<string>;
    dlpSensor?: pulumi.Input<string>;
    dstaddr6s?: pulumi.Input<pulumi.Input<string>[]>;
    dstaddrNegate?: pulumi.Input<string>;
    dstaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    dstintfs?: pulumi.Input<pulumi.Input<string>[]>;
    emailfilterProfile?: pulumi.Input<string>;
    fileFilterProfile?: pulumi.Input<string>;
    globalLabel?: pulumi.Input<string>;
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    httpTunnelAuth?: pulumi.Input<string>;
    icapProfile?: pulumi.Input<string>;
    internetService?: pulumi.Input<string>;
    internetService6?: pulumi.Input<string>;
    internetService6CustomGroups?: pulumi.Input<pulumi.Input<string>[]>;
    internetService6Customs?: pulumi.Input<pulumi.Input<string>[]>;
    internetService6Groups?: pulumi.Input<pulumi.Input<string>[]>;
    internetService6Names?: pulumi.Input<pulumi.Input<string>[]>;
    internetService6Negate?: pulumi.Input<string>;
    internetServiceCustom?: pulumi.Input<string>;
    internetServiceCustomGroup?: pulumi.Input<string>;
    internetServiceGroup?: pulumi.Input<string>;
    internetServiceId?: pulumi.Input<string>;
    internetServiceName?: pulumi.Input<string>;
    internetServiceNegate?: pulumi.Input<string>;
    ipsSensor?: pulumi.Input<string>;
    ipsVoipFilter?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    logtraffic?: pulumi.Input<string>;
    logtrafficStart?: pulumi.Input<string>;
    mmsProfile?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pkg?: pulumi.Input<string>;
    pkgFolderPath?: pulumi.Input<string>;
    policyid?: pulumi.Input<number>;
    poolnames?: pulumi.Input<pulumi.Input<string>[]>;
    profileGroup?: pulumi.Input<string>;
    profileProtocolOptions?: pulumi.Input<string>;
    profileType?: pulumi.Input<string>;
    proxy?: pulumi.Input<string>;
    redirectUrl?: pulumi.Input<string>;
    replacemsgOverrideGroup?: pulumi.Input<string>;
    scanBotnetConnections?: pulumi.Input<string>;
    schedule?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    sctpFilterProfile?: pulumi.Input<string>;
    serviceNegate?: pulumi.Input<string>;
    services?: pulumi.Input<pulumi.Input<string>[]>;
    sessionTtl?: pulumi.Input<number>;
    spamfilterProfile?: pulumi.Input<string>;
    srcaddr6s?: pulumi.Input<pulumi.Input<string>[]>;
    srcaddrNegate?: pulumi.Input<string>;
    srcaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    srcintf?: pulumi.Input<string>;
    sshFilterProfile?: pulumi.Input<string>;
    sshPolicyRedirect?: pulumi.Input<string>;
    sslSshProfile?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    transparent?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<string>[]>;
    utmStatus?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    videofilterProfile?: pulumi.Input<string>;
    virtualPatchProfile?: pulumi.Input<string>;
    voipProfile?: pulumi.Input<string>;
    wafProfile?: pulumi.Input<string>;
    webcache?: pulumi.Input<string>;
    webcacheHttps?: pulumi.Input<string>;
    webfilterProfile?: pulumi.Input<string>;
    webproxyForwardServer?: pulumi.Input<string>;
    webproxyProfile?: pulumi.Input<string>;
    ztnaEmsTags?: pulumi.Input<pulumi.Input<string>[]>;
    ztnaTagsMatchLogic?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PackagesFirewallProxypolicy resource.
 */
export interface PackagesFirewallProxypolicyArgs {
    accessProxies?: pulumi.Input<pulumi.Input<string>[]>;
    accessProxy6?: pulumi.Input<string>;
    action?: pulumi.Input<string>;
    adom?: pulumi.Input<string>;
    applicationList?: pulumi.Input<string>;
    avProfile?: pulumi.Input<string>;
    blockNotification?: pulumi.Input<string>;
    casbProfile?: pulumi.Input<string>;
    cifsProfile?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    decryptedTrafficMirror?: pulumi.Input<string>;
    detectHttpsInHttpRequest?: pulumi.Input<string>;
    deviceOwnership?: pulumi.Input<string>;
    diameterFilterProfile?: pulumi.Input<string>;
    disclaimer?: pulumi.Input<string>;
    dlpProfile?: pulumi.Input<string>;
    dlpSensor?: pulumi.Input<string>;
    dstaddr6s?: pulumi.Input<pulumi.Input<string>[]>;
    dstaddrNegate?: pulumi.Input<string>;
    dstaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    dstintfs?: pulumi.Input<pulumi.Input<string>[]>;
    emailfilterProfile?: pulumi.Input<string>;
    fileFilterProfile?: pulumi.Input<string>;
    globalLabel?: pulumi.Input<string>;
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    httpTunnelAuth?: pulumi.Input<string>;
    icapProfile?: pulumi.Input<string>;
    internetService?: pulumi.Input<string>;
    internetService6?: pulumi.Input<string>;
    internetService6CustomGroups?: pulumi.Input<pulumi.Input<string>[]>;
    internetService6Customs?: pulumi.Input<pulumi.Input<string>[]>;
    internetService6Groups?: pulumi.Input<pulumi.Input<string>[]>;
    internetService6Names?: pulumi.Input<pulumi.Input<string>[]>;
    internetService6Negate?: pulumi.Input<string>;
    internetServiceCustom?: pulumi.Input<string>;
    internetServiceCustomGroup?: pulumi.Input<string>;
    internetServiceGroup?: pulumi.Input<string>;
    internetServiceId?: pulumi.Input<string>;
    internetServiceName?: pulumi.Input<string>;
    internetServiceNegate?: pulumi.Input<string>;
    ipsSensor?: pulumi.Input<string>;
    ipsVoipFilter?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    logtraffic?: pulumi.Input<string>;
    logtrafficStart?: pulumi.Input<string>;
    mmsProfile?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pkg: pulumi.Input<string>;
    pkgFolderPath?: pulumi.Input<string>;
    policyid?: pulumi.Input<number>;
    poolnames?: pulumi.Input<pulumi.Input<string>[]>;
    profileGroup?: pulumi.Input<string>;
    profileProtocolOptions?: pulumi.Input<string>;
    profileType?: pulumi.Input<string>;
    proxy?: pulumi.Input<string>;
    redirectUrl?: pulumi.Input<string>;
    replacemsgOverrideGroup?: pulumi.Input<string>;
    scanBotnetConnections?: pulumi.Input<string>;
    schedule?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    sctpFilterProfile?: pulumi.Input<string>;
    serviceNegate?: pulumi.Input<string>;
    services?: pulumi.Input<pulumi.Input<string>[]>;
    sessionTtl?: pulumi.Input<number>;
    spamfilterProfile?: pulumi.Input<string>;
    srcaddr6s?: pulumi.Input<pulumi.Input<string>[]>;
    srcaddrNegate?: pulumi.Input<string>;
    srcaddrs?: pulumi.Input<pulumi.Input<string>[]>;
    srcintf?: pulumi.Input<string>;
    sshFilterProfile?: pulumi.Input<string>;
    sshPolicyRedirect?: pulumi.Input<string>;
    sslSshProfile?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    transparent?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<string>[]>;
    utmStatus?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    videofilterProfile?: pulumi.Input<string>;
    virtualPatchProfile?: pulumi.Input<string>;
    voipProfile?: pulumi.Input<string>;
    wafProfile?: pulumi.Input<string>;
    webcache?: pulumi.Input<string>;
    webcacheHttps?: pulumi.Input<string>;
    webfilterProfile?: pulumi.Input<string>;
    webproxyForwardServer?: pulumi.Input<string>;
    webproxyProfile?: pulumi.Input<string>;
    ztnaEmsTags?: pulumi.Input<pulumi.Input<string>[]>;
    ztnaTagsMatchLogic?: pulumi.Input<string>;
}
