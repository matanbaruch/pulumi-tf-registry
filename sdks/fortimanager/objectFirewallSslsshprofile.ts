// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ObjectFirewallSslsshprofile extends pulumi.CustomResource {
    /**
     * Get an existing ObjectFirewallSslsshprofile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectFirewallSslsshprofileState, opts?: pulumi.CustomResourceOptions): ObjectFirewallSslsshprofile {
        return new ObjectFirewallSslsshprofile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/objectFirewallSslsshprofile:ObjectFirewallSslsshprofile';

    /**
     * Returns true if the given object is an instance of ObjectFirewallSslsshprofile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectFirewallSslsshprofile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectFirewallSslsshprofile.__pulumiType;
    }

    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly allowlist!: pulumi.Output<string>;
    public readonly blockBlacklistedCertificates!: pulumi.Output<string>;
    public readonly blockBlocklistedCertificates!: pulumi.Output<string>;
    public readonly caname!: pulumi.Output<string>;
    public readonly comment!: pulumi.Output<string | undefined>;
    public readonly dot!: pulumi.Output<outputs.ObjectFirewallSslsshprofileDot | undefined>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly echOuterSnis!: pulumi.Output<outputs.ObjectFirewallSslsshprofileEchOuterSni[] | undefined>;
    public readonly ftps!: pulumi.Output<outputs.ObjectFirewallSslsshprofileFtps | undefined>;
    public readonly https!: pulumi.Output<outputs.ObjectFirewallSslsshprofileHttps | undefined>;
    public readonly imaps!: pulumi.Output<outputs.ObjectFirewallSslsshprofileImaps | undefined>;
    public readonly mapiOverHttps!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly pop3s!: pulumi.Output<outputs.ObjectFirewallSslsshprofilePop3s | undefined>;
    public readonly rpcOverHttps!: pulumi.Output<string>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly serverCert!: pulumi.Output<string | undefined>;
    public readonly serverCertMode!: pulumi.Output<string>;
    public readonly smtps!: pulumi.Output<outputs.ObjectFirewallSslsshprofileSmtps | undefined>;
    public readonly ssh!: pulumi.Output<outputs.ObjectFirewallSslsshprofileSsh | undefined>;
    public readonly ssl!: pulumi.Output<outputs.ObjectFirewallSslsshprofileSsl | undefined>;
    public readonly sslAnomaliesLog!: pulumi.Output<string>;
    public readonly sslAnomalyLog!: pulumi.Output<string>;
    public readonly sslExemptionIpRating!: pulumi.Output<string>;
    public readonly sslExemptionLog!: pulumi.Output<string>;
    public readonly sslExemptionsLog!: pulumi.Output<string>;
    public readonly sslExempts!: pulumi.Output<outputs.ObjectFirewallSslsshprofileSslExempt[] | undefined>;
    public readonly sslHandshakeLog!: pulumi.Output<string>;
    public readonly sslNegotiationLog!: pulumi.Output<string>;
    public readonly sslServerCertLog!: pulumi.Output<string>;
    public readonly sslServers!: pulumi.Output<outputs.ObjectFirewallSslsshprofileSslServer[] | undefined>;
    public readonly supportedAlpn!: pulumi.Output<string>;
    public readonly untrustedCaname!: pulumi.Output<string>;
    public readonly useSslServer!: pulumi.Output<string>;
    public readonly whitelist!: pulumi.Output<string>;

    /**
     * Create a ObjectFirewallSslsshprofile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ObjectFirewallSslsshprofileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectFirewallSslsshprofileArgs | ObjectFirewallSslsshprofileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectFirewallSslsshprofileState | undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["allowlist"] = state ? state.allowlist : undefined;
            resourceInputs["blockBlacklistedCertificates"] = state ? state.blockBlacklistedCertificates : undefined;
            resourceInputs["blockBlocklistedCertificates"] = state ? state.blockBlocklistedCertificates : undefined;
            resourceInputs["caname"] = state ? state.caname : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["dot"] = state ? state.dot : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["echOuterSnis"] = state ? state.echOuterSnis : undefined;
            resourceInputs["ftps"] = state ? state.ftps : undefined;
            resourceInputs["https"] = state ? state.https : undefined;
            resourceInputs["imaps"] = state ? state.imaps : undefined;
            resourceInputs["mapiOverHttps"] = state ? state.mapiOverHttps : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pop3s"] = state ? state.pop3s : undefined;
            resourceInputs["rpcOverHttps"] = state ? state.rpcOverHttps : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["serverCert"] = state ? state.serverCert : undefined;
            resourceInputs["serverCertMode"] = state ? state.serverCertMode : undefined;
            resourceInputs["smtps"] = state ? state.smtps : undefined;
            resourceInputs["ssh"] = state ? state.ssh : undefined;
            resourceInputs["ssl"] = state ? state.ssl : undefined;
            resourceInputs["sslAnomaliesLog"] = state ? state.sslAnomaliesLog : undefined;
            resourceInputs["sslAnomalyLog"] = state ? state.sslAnomalyLog : undefined;
            resourceInputs["sslExemptionIpRating"] = state ? state.sslExemptionIpRating : undefined;
            resourceInputs["sslExemptionLog"] = state ? state.sslExemptionLog : undefined;
            resourceInputs["sslExemptionsLog"] = state ? state.sslExemptionsLog : undefined;
            resourceInputs["sslExempts"] = state ? state.sslExempts : undefined;
            resourceInputs["sslHandshakeLog"] = state ? state.sslHandshakeLog : undefined;
            resourceInputs["sslNegotiationLog"] = state ? state.sslNegotiationLog : undefined;
            resourceInputs["sslServerCertLog"] = state ? state.sslServerCertLog : undefined;
            resourceInputs["sslServers"] = state ? state.sslServers : undefined;
            resourceInputs["supportedAlpn"] = state ? state.supportedAlpn : undefined;
            resourceInputs["untrustedCaname"] = state ? state.untrustedCaname : undefined;
            resourceInputs["useSslServer"] = state ? state.useSslServer : undefined;
            resourceInputs["whitelist"] = state ? state.whitelist : undefined;
        } else {
            const args = argsOrState as ObjectFirewallSslsshprofileArgs | undefined;
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["allowlist"] = args ? args.allowlist : undefined;
            resourceInputs["blockBlacklistedCertificates"] = args ? args.blockBlacklistedCertificates : undefined;
            resourceInputs["blockBlocklistedCertificates"] = args ? args.blockBlocklistedCertificates : undefined;
            resourceInputs["caname"] = args ? args.caname : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["dot"] = args ? args.dot : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["echOuterSnis"] = args ? args.echOuterSnis : undefined;
            resourceInputs["ftps"] = args ? args.ftps : undefined;
            resourceInputs["https"] = args ? args.https : undefined;
            resourceInputs["imaps"] = args ? args.imaps : undefined;
            resourceInputs["mapiOverHttps"] = args ? args.mapiOverHttps : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pop3s"] = args ? args.pop3s : undefined;
            resourceInputs["rpcOverHttps"] = args ? args.rpcOverHttps : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["serverCert"] = args ? args.serverCert : undefined;
            resourceInputs["serverCertMode"] = args ? args.serverCertMode : undefined;
            resourceInputs["smtps"] = args ? args.smtps : undefined;
            resourceInputs["ssh"] = args ? args.ssh : undefined;
            resourceInputs["ssl"] = args ? args.ssl : undefined;
            resourceInputs["sslAnomaliesLog"] = args ? args.sslAnomaliesLog : undefined;
            resourceInputs["sslAnomalyLog"] = args ? args.sslAnomalyLog : undefined;
            resourceInputs["sslExemptionIpRating"] = args ? args.sslExemptionIpRating : undefined;
            resourceInputs["sslExemptionLog"] = args ? args.sslExemptionLog : undefined;
            resourceInputs["sslExemptionsLog"] = args ? args.sslExemptionsLog : undefined;
            resourceInputs["sslExempts"] = args ? args.sslExempts : undefined;
            resourceInputs["sslHandshakeLog"] = args ? args.sslHandshakeLog : undefined;
            resourceInputs["sslNegotiationLog"] = args ? args.sslNegotiationLog : undefined;
            resourceInputs["sslServerCertLog"] = args ? args.sslServerCertLog : undefined;
            resourceInputs["sslServers"] = args ? args.sslServers : undefined;
            resourceInputs["supportedAlpn"] = args ? args.supportedAlpn : undefined;
            resourceInputs["untrustedCaname"] = args ? args.untrustedCaname : undefined;
            resourceInputs["useSslServer"] = args ? args.useSslServer : undefined;
            resourceInputs["whitelist"] = args ? args.whitelist : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectFirewallSslsshprofile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectFirewallSslsshprofile resources.
 */
export interface ObjectFirewallSslsshprofileState {
    adom?: pulumi.Input<string>;
    allowlist?: pulumi.Input<string>;
    blockBlacklistedCertificates?: pulumi.Input<string>;
    blockBlocklistedCertificates?: pulumi.Input<string>;
    caname?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    dot?: pulumi.Input<inputs.ObjectFirewallSslsshprofileDot>;
    dynamicSortSubtable?: pulumi.Input<string>;
    echOuterSnis?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallSslsshprofileEchOuterSni>[]>;
    ftps?: pulumi.Input<inputs.ObjectFirewallSslsshprofileFtps>;
    https?: pulumi.Input<inputs.ObjectFirewallSslsshprofileHttps>;
    imaps?: pulumi.Input<inputs.ObjectFirewallSslsshprofileImaps>;
    mapiOverHttps?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pop3s?: pulumi.Input<inputs.ObjectFirewallSslsshprofilePop3s>;
    rpcOverHttps?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    serverCert?: pulumi.Input<string>;
    serverCertMode?: pulumi.Input<string>;
    smtps?: pulumi.Input<inputs.ObjectFirewallSslsshprofileSmtps>;
    ssh?: pulumi.Input<inputs.ObjectFirewallSslsshprofileSsh>;
    ssl?: pulumi.Input<inputs.ObjectFirewallSslsshprofileSsl>;
    sslAnomaliesLog?: pulumi.Input<string>;
    sslAnomalyLog?: pulumi.Input<string>;
    sslExemptionIpRating?: pulumi.Input<string>;
    sslExemptionLog?: pulumi.Input<string>;
    sslExemptionsLog?: pulumi.Input<string>;
    sslExempts?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallSslsshprofileSslExempt>[]>;
    sslHandshakeLog?: pulumi.Input<string>;
    sslNegotiationLog?: pulumi.Input<string>;
    sslServerCertLog?: pulumi.Input<string>;
    sslServers?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallSslsshprofileSslServer>[]>;
    supportedAlpn?: pulumi.Input<string>;
    untrustedCaname?: pulumi.Input<string>;
    useSslServer?: pulumi.Input<string>;
    whitelist?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectFirewallSslsshprofile resource.
 */
export interface ObjectFirewallSslsshprofileArgs {
    adom?: pulumi.Input<string>;
    allowlist?: pulumi.Input<string>;
    blockBlacklistedCertificates?: pulumi.Input<string>;
    blockBlocklistedCertificates?: pulumi.Input<string>;
    caname?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    dot?: pulumi.Input<inputs.ObjectFirewallSslsshprofileDot>;
    dynamicSortSubtable?: pulumi.Input<string>;
    echOuterSnis?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallSslsshprofileEchOuterSni>[]>;
    ftps?: pulumi.Input<inputs.ObjectFirewallSslsshprofileFtps>;
    https?: pulumi.Input<inputs.ObjectFirewallSslsshprofileHttps>;
    imaps?: pulumi.Input<inputs.ObjectFirewallSslsshprofileImaps>;
    mapiOverHttps?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pop3s?: pulumi.Input<inputs.ObjectFirewallSslsshprofilePop3s>;
    rpcOverHttps?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    serverCert?: pulumi.Input<string>;
    serverCertMode?: pulumi.Input<string>;
    smtps?: pulumi.Input<inputs.ObjectFirewallSslsshprofileSmtps>;
    ssh?: pulumi.Input<inputs.ObjectFirewallSslsshprofileSsh>;
    ssl?: pulumi.Input<inputs.ObjectFirewallSslsshprofileSsl>;
    sslAnomaliesLog?: pulumi.Input<string>;
    sslAnomalyLog?: pulumi.Input<string>;
    sslExemptionIpRating?: pulumi.Input<string>;
    sslExemptionLog?: pulumi.Input<string>;
    sslExemptionsLog?: pulumi.Input<string>;
    sslExempts?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallSslsshprofileSslExempt>[]>;
    sslHandshakeLog?: pulumi.Input<string>;
    sslNegotiationLog?: pulumi.Input<string>;
    sslServerCertLog?: pulumi.Input<string>;
    sslServers?: pulumi.Input<pulumi.Input<inputs.ObjectFirewallSslsshprofileSslServer>[]>;
    supportedAlpn?: pulumi.Input<string>;
    untrustedCaname?: pulumi.Input<string>;
    useSslServer?: pulumi.Input<string>;
    whitelist?: pulumi.Input<string>;
}
