// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ObjectFirewallAccessproxy6ApigatewayRealservers extends pulumi.CustomResource {
    /**
     * Get an existing ObjectFirewallAccessproxy6ApigatewayRealservers resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectFirewallAccessproxy6ApigatewayRealserversState, opts?: pulumi.CustomResourceOptions): ObjectFirewallAccessproxy6ApigatewayRealservers {
        return new ObjectFirewallAccessproxy6ApigatewayRealservers(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/objectFirewallAccessproxy6ApigatewayRealservers:ObjectFirewallAccessproxy6ApigatewayRealservers';

    /**
     * Returns true if the given object is an instance of ObjectFirewallAccessproxy6ApigatewayRealservers.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectFirewallAccessproxy6ApigatewayRealservers {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectFirewallAccessproxy6ApigatewayRealservers.__pulumiType;
    }

    public readonly accessProxy6!: pulumi.Output<string>;
    public readonly addrType!: pulumi.Output<string>;
    public readonly address!: pulumi.Output<string | undefined>;
    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly apiGateway!: pulumi.Output<string>;
    public readonly domain!: pulumi.Output<string | undefined>;
    public readonly externalAuth!: pulumi.Output<string>;
    public readonly fosid!: pulumi.Output<number | undefined>;
    public readonly healthCheck!: pulumi.Output<string>;
    public readonly healthCheckProto!: pulumi.Output<string>;
    public readonly holddownInterval!: pulumi.Output<string>;
    public readonly httpHost!: pulumi.Output<string | undefined>;
    public readonly ip!: pulumi.Output<string>;
    public readonly mappedport!: pulumi.Output<string | undefined>;
    public readonly port!: pulumi.Output<number>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly sshClientCert!: pulumi.Output<string | undefined>;
    public readonly sshHostKeyValidation!: pulumi.Output<string>;
    public readonly sshHostKeys!: pulumi.Output<string[]>;
    public readonly status!: pulumi.Output<string>;
    public readonly translateHost!: pulumi.Output<string>;
    public readonly tunnelEncryption!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;
    public readonly weight!: pulumi.Output<number>;

    /**
     * Create a ObjectFirewallAccessproxy6ApigatewayRealservers resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObjectFirewallAccessproxy6ApigatewayRealserversArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectFirewallAccessproxy6ApigatewayRealserversArgs | ObjectFirewallAccessproxy6ApigatewayRealserversState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectFirewallAccessproxy6ApigatewayRealserversState | undefined;
            resourceInputs["accessProxy6"] = state ? state.accessProxy6 : undefined;
            resourceInputs["addrType"] = state ? state.addrType : undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["apiGateway"] = state ? state.apiGateway : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["externalAuth"] = state ? state.externalAuth : undefined;
            resourceInputs["fosid"] = state ? state.fosid : undefined;
            resourceInputs["healthCheck"] = state ? state.healthCheck : undefined;
            resourceInputs["healthCheckProto"] = state ? state.healthCheckProto : undefined;
            resourceInputs["holddownInterval"] = state ? state.holddownInterval : undefined;
            resourceInputs["httpHost"] = state ? state.httpHost : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["mappedport"] = state ? state.mappedport : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["sshClientCert"] = state ? state.sshClientCert : undefined;
            resourceInputs["sshHostKeyValidation"] = state ? state.sshHostKeyValidation : undefined;
            resourceInputs["sshHostKeys"] = state ? state.sshHostKeys : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["translateHost"] = state ? state.translateHost : undefined;
            resourceInputs["tunnelEncryption"] = state ? state.tunnelEncryption : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as ObjectFirewallAccessproxy6ApigatewayRealserversArgs | undefined;
            if ((!args || args.accessProxy6 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessProxy6'");
            }
            if ((!args || args.apiGateway === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiGateway'");
            }
            resourceInputs["accessProxy6"] = args ? args.accessProxy6 : undefined;
            resourceInputs["addrType"] = args ? args.addrType : undefined;
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["apiGateway"] = args ? args.apiGateway : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["externalAuth"] = args ? args.externalAuth : undefined;
            resourceInputs["fosid"] = args ? args.fosid : undefined;
            resourceInputs["healthCheck"] = args ? args.healthCheck : undefined;
            resourceInputs["healthCheckProto"] = args ? args.healthCheckProto : undefined;
            resourceInputs["holddownInterval"] = args ? args.holddownInterval : undefined;
            resourceInputs["httpHost"] = args ? args.httpHost : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["mappedport"] = args ? args.mappedport : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["sshClientCert"] = args ? args.sshClientCert : undefined;
            resourceInputs["sshHostKeyValidation"] = args ? args.sshHostKeyValidation : undefined;
            resourceInputs["sshHostKeys"] = args ? args.sshHostKeys : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["translateHost"] = args ? args.translateHost : undefined;
            resourceInputs["tunnelEncryption"] = args ? args.tunnelEncryption : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectFirewallAccessproxy6ApigatewayRealservers.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectFirewallAccessproxy6ApigatewayRealservers resources.
 */
export interface ObjectFirewallAccessproxy6ApigatewayRealserversState {
    accessProxy6?: pulumi.Input<string>;
    addrType?: pulumi.Input<string>;
    address?: pulumi.Input<string>;
    adom?: pulumi.Input<string>;
    apiGateway?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    externalAuth?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    healthCheck?: pulumi.Input<string>;
    healthCheckProto?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<string>;
    httpHost?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    mappedport?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    scopetype?: pulumi.Input<string>;
    sshClientCert?: pulumi.Input<string>;
    sshHostKeyValidation?: pulumi.Input<string>;
    sshHostKeys?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    translateHost?: pulumi.Input<string>;
    tunnelEncryption?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ObjectFirewallAccessproxy6ApigatewayRealservers resource.
 */
export interface ObjectFirewallAccessproxy6ApigatewayRealserversArgs {
    accessProxy6: pulumi.Input<string>;
    addrType?: pulumi.Input<string>;
    address?: pulumi.Input<string>;
    adom?: pulumi.Input<string>;
    apiGateway: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    externalAuth?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    healthCheck?: pulumi.Input<string>;
    healthCheckProto?: pulumi.Input<string>;
    holddownInterval?: pulumi.Input<string>;
    httpHost?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    mappedport?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    scopetype?: pulumi.Input<string>;
    sshClientCert?: pulumi.Input<string>;
    sshHostKeyValidation?: pulumi.Input<string>;
    sshHostKeys?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    translateHost?: pulumi.Input<string>;
    tunnelEncryption?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}
