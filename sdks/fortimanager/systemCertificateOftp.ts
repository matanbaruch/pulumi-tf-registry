// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SystemCertificateOftp extends pulumi.CustomResource {
    /**
     * Get an existing SystemCertificateOftp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemCertificateOftpState, opts?: pulumi.CustomResourceOptions): SystemCertificateOftp {
        return new SystemCertificateOftp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/systemCertificateOftp:SystemCertificateOftp';

    /**
     * Returns true if the given object is an instance of SystemCertificateOftp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemCertificateOftp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemCertificateOftp.__pulumiType;
    }

    public readonly certificates!: pulumi.Output<string[]>;
    public readonly comment!: pulumi.Output<string | undefined>;
    public readonly local!: pulumi.Output<string | undefined>;
    public readonly mode!: pulumi.Output<string>;
    public readonly passwords!: pulumi.Output<string[]>;
    public readonly privateKeys!: pulumi.Output<string[]>;

    /**
     * Create a SystemCertificateOftp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemCertificateOftpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemCertificateOftpArgs | SystemCertificateOftpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemCertificateOftpState | undefined;
            resourceInputs["certificates"] = state ? state.certificates : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["local"] = state ? state.local : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["passwords"] = state ? state.passwords : undefined;
            resourceInputs["privateKeys"] = state ? state.privateKeys : undefined;
        } else {
            const args = argsOrState as SystemCertificateOftpArgs | undefined;
            resourceInputs["certificates"] = args ? args.certificates : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["local"] = args ? args.local : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["passwords"] = args?.passwords ? pulumi.secret(args.passwords) : undefined;
            resourceInputs["privateKeys"] = args?.privateKeys ? pulumi.secret(args.privateKeys) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["passwords", "privateKeys"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SystemCertificateOftp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemCertificateOftp resources.
 */
export interface SystemCertificateOftpState {
    certificates?: pulumi.Input<pulumi.Input<string>[]>;
    comment?: pulumi.Input<string>;
    local?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    passwords?: pulumi.Input<pulumi.Input<string>[]>;
    privateKeys?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a SystemCertificateOftp resource.
 */
export interface SystemCertificateOftpArgs {
    certificates?: pulumi.Input<pulumi.Input<string>[]>;
    comment?: pulumi.Input<string>;
    local?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    passwords?: pulumi.Input<pulumi.Input<string>[]>;
    privateKeys?: pulumi.Input<pulumi.Input<string>[]>;
}
