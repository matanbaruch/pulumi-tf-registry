// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ObjectIpsSensorEntries extends pulumi.CustomResource {
    /**
     * Get an existing ObjectIpsSensorEntries resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectIpsSensorEntriesState, opts?: pulumi.CustomResourceOptions): ObjectIpsSensorEntries {
        return new ObjectIpsSensorEntries(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/objectIpsSensorEntries:ObjectIpsSensorEntries';

    /**
     * Returns true if the given object is an instance of ObjectIpsSensorEntries.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectIpsSensorEntries {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectIpsSensorEntries.__pulumiType;
    }

    public readonly action!: pulumi.Output<string>;
    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly applications!: pulumi.Output<string[]>;
    public readonly cves!: pulumi.Output<string[]>;
    public readonly defaultAction!: pulumi.Output<string>;
    public readonly defaultStatus!: pulumi.Output<string>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly exemptIps!: pulumi.Output<outputs.ObjectIpsSensorEntriesExemptIp[] | undefined>;
    public readonly fosid!: pulumi.Output<number | undefined>;
    public readonly lastModified!: pulumi.Output<string>;
    public readonly locations!: pulumi.Output<string[]>;
    public readonly log!: pulumi.Output<string>;
    public readonly logAttackContext!: pulumi.Output<string>;
    public readonly logPacket!: pulumi.Output<string>;
    public readonly os!: pulumi.Output<string[]>;
    public readonly protocols!: pulumi.Output<string[]>;
    public readonly quarantine!: pulumi.Output<string>;
    public readonly quarantineExpiry!: pulumi.Output<string | undefined>;
    public readonly quarantineLog!: pulumi.Output<string | undefined>;
    public readonly rateCount!: pulumi.Output<number | undefined>;
    public readonly rateDuration!: pulumi.Output<number | undefined>;
    public readonly rateMode!: pulumi.Output<string | undefined>;
    public readonly rateTrack!: pulumi.Output<string | undefined>;
    public readonly rule!: pulumi.Output<string | undefined>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly sensor!: pulumi.Output<string>;
    public readonly severities!: pulumi.Output<string[]>;
    public readonly status!: pulumi.Output<string>;
    public readonly vulnTypes!: pulumi.Output<number[]>;

    /**
     * Create a ObjectIpsSensorEntries resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObjectIpsSensorEntriesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectIpsSensorEntriesArgs | ObjectIpsSensorEntriesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectIpsSensorEntriesState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["applications"] = state ? state.applications : undefined;
            resourceInputs["cves"] = state ? state.cves : undefined;
            resourceInputs["defaultAction"] = state ? state.defaultAction : undefined;
            resourceInputs["defaultStatus"] = state ? state.defaultStatus : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["exemptIps"] = state ? state.exemptIps : undefined;
            resourceInputs["fosid"] = state ? state.fosid : undefined;
            resourceInputs["lastModified"] = state ? state.lastModified : undefined;
            resourceInputs["locations"] = state ? state.locations : undefined;
            resourceInputs["log"] = state ? state.log : undefined;
            resourceInputs["logAttackContext"] = state ? state.logAttackContext : undefined;
            resourceInputs["logPacket"] = state ? state.logPacket : undefined;
            resourceInputs["os"] = state ? state.os : undefined;
            resourceInputs["protocols"] = state ? state.protocols : undefined;
            resourceInputs["quarantine"] = state ? state.quarantine : undefined;
            resourceInputs["quarantineExpiry"] = state ? state.quarantineExpiry : undefined;
            resourceInputs["quarantineLog"] = state ? state.quarantineLog : undefined;
            resourceInputs["rateCount"] = state ? state.rateCount : undefined;
            resourceInputs["rateDuration"] = state ? state.rateDuration : undefined;
            resourceInputs["rateMode"] = state ? state.rateMode : undefined;
            resourceInputs["rateTrack"] = state ? state.rateTrack : undefined;
            resourceInputs["rule"] = state ? state.rule : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["sensor"] = state ? state.sensor : undefined;
            resourceInputs["severities"] = state ? state.severities : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["vulnTypes"] = state ? state.vulnTypes : undefined;
        } else {
            const args = argsOrState as ObjectIpsSensorEntriesArgs | undefined;
            if ((!args || args.sensor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sensor'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["applications"] = args ? args.applications : undefined;
            resourceInputs["cves"] = args ? args.cves : undefined;
            resourceInputs["defaultAction"] = args ? args.defaultAction : undefined;
            resourceInputs["defaultStatus"] = args ? args.defaultStatus : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["exemptIps"] = args ? args.exemptIps : undefined;
            resourceInputs["fosid"] = args ? args.fosid : undefined;
            resourceInputs["lastModified"] = args ? args.lastModified : undefined;
            resourceInputs["locations"] = args ? args.locations : undefined;
            resourceInputs["log"] = args ? args.log : undefined;
            resourceInputs["logAttackContext"] = args ? args.logAttackContext : undefined;
            resourceInputs["logPacket"] = args ? args.logPacket : undefined;
            resourceInputs["os"] = args ? args.os : undefined;
            resourceInputs["protocols"] = args ? args.protocols : undefined;
            resourceInputs["quarantine"] = args ? args.quarantine : undefined;
            resourceInputs["quarantineExpiry"] = args ? args.quarantineExpiry : undefined;
            resourceInputs["quarantineLog"] = args ? args.quarantineLog : undefined;
            resourceInputs["rateCount"] = args ? args.rateCount : undefined;
            resourceInputs["rateDuration"] = args ? args.rateDuration : undefined;
            resourceInputs["rateMode"] = args ? args.rateMode : undefined;
            resourceInputs["rateTrack"] = args ? args.rateTrack : undefined;
            resourceInputs["rule"] = args ? args.rule : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["sensor"] = args ? args.sensor : undefined;
            resourceInputs["severities"] = args ? args.severities : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["vulnTypes"] = args ? args.vulnTypes : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectIpsSensorEntries.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectIpsSensorEntries resources.
 */
export interface ObjectIpsSensorEntriesState {
    action?: pulumi.Input<string>;
    adom?: pulumi.Input<string>;
    applications?: pulumi.Input<pulumi.Input<string>[]>;
    cves?: pulumi.Input<pulumi.Input<string>[]>;
    defaultAction?: pulumi.Input<string>;
    defaultStatus?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    exemptIps?: pulumi.Input<pulumi.Input<inputs.ObjectIpsSensorEntriesExemptIp>[]>;
    fosid?: pulumi.Input<number>;
    lastModified?: pulumi.Input<string>;
    locations?: pulumi.Input<pulumi.Input<string>[]>;
    log?: pulumi.Input<string>;
    logAttackContext?: pulumi.Input<string>;
    logPacket?: pulumi.Input<string>;
    os?: pulumi.Input<pulumi.Input<string>[]>;
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    quarantine?: pulumi.Input<string>;
    quarantineExpiry?: pulumi.Input<string>;
    quarantineLog?: pulumi.Input<string>;
    rateCount?: pulumi.Input<number>;
    rateDuration?: pulumi.Input<number>;
    rateMode?: pulumi.Input<string>;
    rateTrack?: pulumi.Input<string>;
    rule?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    sensor?: pulumi.Input<string>;
    severities?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    vulnTypes?: pulumi.Input<pulumi.Input<number>[]>;
}

/**
 * The set of arguments for constructing a ObjectIpsSensorEntries resource.
 */
export interface ObjectIpsSensorEntriesArgs {
    action?: pulumi.Input<string>;
    adom?: pulumi.Input<string>;
    applications?: pulumi.Input<pulumi.Input<string>[]>;
    cves?: pulumi.Input<pulumi.Input<string>[]>;
    defaultAction?: pulumi.Input<string>;
    defaultStatus?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    exemptIps?: pulumi.Input<pulumi.Input<inputs.ObjectIpsSensorEntriesExemptIp>[]>;
    fosid?: pulumi.Input<number>;
    lastModified?: pulumi.Input<string>;
    locations?: pulumi.Input<pulumi.Input<string>[]>;
    log?: pulumi.Input<string>;
    logAttackContext?: pulumi.Input<string>;
    logPacket?: pulumi.Input<string>;
    os?: pulumi.Input<pulumi.Input<string>[]>;
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    quarantine?: pulumi.Input<string>;
    quarantineExpiry?: pulumi.Input<string>;
    quarantineLog?: pulumi.Input<string>;
    rateCount?: pulumi.Input<number>;
    rateDuration?: pulumi.Input<number>;
    rateMode?: pulumi.Input<string>;
    rateTrack?: pulumi.Input<string>;
    rule?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
    sensor: pulumi.Input<string>;
    severities?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    vulnTypes?: pulumi.Input<pulumi.Input<number>[]>;
}
