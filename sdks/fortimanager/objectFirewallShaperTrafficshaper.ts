// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ObjectFirewallShaperTrafficshaper extends pulumi.CustomResource {
    /**
     * Get an existing ObjectFirewallShaperTrafficshaper resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectFirewallShaperTrafficshaperState, opts?: pulumi.CustomResourceOptions): ObjectFirewallShaperTrafficshaper {
        return new ObjectFirewallShaperTrafficshaper(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/objectFirewallShaperTrafficshaper:ObjectFirewallShaperTrafficshaper';

    /**
     * Returns true if the given object is an instance of ObjectFirewallShaperTrafficshaper.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectFirewallShaperTrafficshaper {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectFirewallShaperTrafficshaper.__pulumiType;
    }

    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly bandwidthUnit!: pulumi.Output<string>;
    public readonly cos!: pulumi.Output<string>;
    public readonly cosMarking!: pulumi.Output<string>;
    public readonly cosMarkingMethod!: pulumi.Output<string>;
    public readonly diffserv!: pulumi.Output<string>;
    public readonly diffservcode!: pulumi.Output<string | undefined>;
    public readonly dscpMarkingMethod!: pulumi.Output<string>;
    public readonly exceedBandwidth!: pulumi.Output<number | undefined>;
    public readonly exceedClassId!: pulumi.Output<string>;
    public readonly exceedCos!: pulumi.Output<string>;
    public readonly exceedDscp!: pulumi.Output<string>;
    public readonly guaranteedBandwidth!: pulumi.Output<number | undefined>;
    public readonly maximumBandwidth!: pulumi.Output<number | undefined>;
    public readonly maximumCos!: pulumi.Output<string>;
    public readonly maximumDscp!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly overhead!: pulumi.Output<number | undefined>;
    public readonly perPolicy!: pulumi.Output<string>;
    public readonly priority!: pulumi.Output<string>;
    public readonly scopetype!: pulumi.Output<string | undefined>;

    /**
     * Create a ObjectFirewallShaperTrafficshaper resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ObjectFirewallShaperTrafficshaperArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectFirewallShaperTrafficshaperArgs | ObjectFirewallShaperTrafficshaperState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectFirewallShaperTrafficshaperState | undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["bandwidthUnit"] = state ? state.bandwidthUnit : undefined;
            resourceInputs["cos"] = state ? state.cos : undefined;
            resourceInputs["cosMarking"] = state ? state.cosMarking : undefined;
            resourceInputs["cosMarkingMethod"] = state ? state.cosMarkingMethod : undefined;
            resourceInputs["diffserv"] = state ? state.diffserv : undefined;
            resourceInputs["diffservcode"] = state ? state.diffservcode : undefined;
            resourceInputs["dscpMarkingMethod"] = state ? state.dscpMarkingMethod : undefined;
            resourceInputs["exceedBandwidth"] = state ? state.exceedBandwidth : undefined;
            resourceInputs["exceedClassId"] = state ? state.exceedClassId : undefined;
            resourceInputs["exceedCos"] = state ? state.exceedCos : undefined;
            resourceInputs["exceedDscp"] = state ? state.exceedDscp : undefined;
            resourceInputs["guaranteedBandwidth"] = state ? state.guaranteedBandwidth : undefined;
            resourceInputs["maximumBandwidth"] = state ? state.maximumBandwidth : undefined;
            resourceInputs["maximumCos"] = state ? state.maximumCos : undefined;
            resourceInputs["maximumDscp"] = state ? state.maximumDscp : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["overhead"] = state ? state.overhead : undefined;
            resourceInputs["perPolicy"] = state ? state.perPolicy : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
        } else {
            const args = argsOrState as ObjectFirewallShaperTrafficshaperArgs | undefined;
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["bandwidthUnit"] = args ? args.bandwidthUnit : undefined;
            resourceInputs["cos"] = args ? args.cos : undefined;
            resourceInputs["cosMarking"] = args ? args.cosMarking : undefined;
            resourceInputs["cosMarkingMethod"] = args ? args.cosMarkingMethod : undefined;
            resourceInputs["diffserv"] = args ? args.diffserv : undefined;
            resourceInputs["diffservcode"] = args ? args.diffservcode : undefined;
            resourceInputs["dscpMarkingMethod"] = args ? args.dscpMarkingMethod : undefined;
            resourceInputs["exceedBandwidth"] = args ? args.exceedBandwidth : undefined;
            resourceInputs["exceedClassId"] = args ? args.exceedClassId : undefined;
            resourceInputs["exceedCos"] = args ? args.exceedCos : undefined;
            resourceInputs["exceedDscp"] = args ? args.exceedDscp : undefined;
            resourceInputs["guaranteedBandwidth"] = args ? args.guaranteedBandwidth : undefined;
            resourceInputs["maximumBandwidth"] = args ? args.maximumBandwidth : undefined;
            resourceInputs["maximumCos"] = args ? args.maximumCos : undefined;
            resourceInputs["maximumDscp"] = args ? args.maximumDscp : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["overhead"] = args ? args.overhead : undefined;
            resourceInputs["perPolicy"] = args ? args.perPolicy : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectFirewallShaperTrafficshaper.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectFirewallShaperTrafficshaper resources.
 */
export interface ObjectFirewallShaperTrafficshaperState {
    adom?: pulumi.Input<string>;
    bandwidthUnit?: pulumi.Input<string>;
    cos?: pulumi.Input<string>;
    cosMarking?: pulumi.Input<string>;
    cosMarkingMethod?: pulumi.Input<string>;
    diffserv?: pulumi.Input<string>;
    diffservcode?: pulumi.Input<string>;
    dscpMarkingMethod?: pulumi.Input<string>;
    exceedBandwidth?: pulumi.Input<number>;
    exceedClassId?: pulumi.Input<string>;
    exceedCos?: pulumi.Input<string>;
    exceedDscp?: pulumi.Input<string>;
    guaranteedBandwidth?: pulumi.Input<number>;
    maximumBandwidth?: pulumi.Input<number>;
    maximumCos?: pulumi.Input<string>;
    maximumDscp?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    overhead?: pulumi.Input<number>;
    perPolicy?: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectFirewallShaperTrafficshaper resource.
 */
export interface ObjectFirewallShaperTrafficshaperArgs {
    adom?: pulumi.Input<string>;
    bandwidthUnit?: pulumi.Input<string>;
    cos?: pulumi.Input<string>;
    cosMarking?: pulumi.Input<string>;
    cosMarkingMethod?: pulumi.Input<string>;
    diffserv?: pulumi.Input<string>;
    diffservcode?: pulumi.Input<string>;
    dscpMarkingMethod?: pulumi.Input<string>;
    exceedBandwidth?: pulumi.Input<number>;
    exceedClassId?: pulumi.Input<string>;
    exceedCos?: pulumi.Input<string>;
    exceedDscp?: pulumi.Input<string>;
    guaranteedBandwidth?: pulumi.Input<number>;
    maximumBandwidth?: pulumi.Input<number>;
    maximumCos?: pulumi.Input<string>;
    maximumDscp?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    overhead?: pulumi.Input<number>;
    perPolicy?: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
    scopetype?: pulumi.Input<string>;
}
