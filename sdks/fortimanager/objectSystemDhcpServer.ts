// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ObjectSystemDhcpServer extends pulumi.CustomResource {
    /**
     * Get an existing ObjectSystemDhcpServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectSystemDhcpServerState, opts?: pulumi.CustomResourceOptions): ObjectSystemDhcpServer {
        return new ObjectSystemDhcpServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/objectSystemDhcpServer:ObjectSystemDhcpServer';

    /**
     * Returns true if the given object is an instance of ObjectSystemDhcpServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectSystemDhcpServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectSystemDhcpServer.__pulumiType;
    }

    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly autoConfiguration!: pulumi.Output<string>;
    public readonly autoManagedStatus!: pulumi.Output<string>;
    public readonly conflictedIpTimeout!: pulumi.Output<number>;
    public readonly ddnsAuth!: pulumi.Output<string>;
    public readonly ddnsKey!: pulumi.Output<string | undefined>;
    public readonly ddnsKeyname!: pulumi.Output<string | undefined>;
    public readonly ddnsServerIp!: pulumi.Output<string>;
    public readonly ddnsTtl!: pulumi.Output<number>;
    public readonly ddnsUpdate!: pulumi.Output<string>;
    public readonly ddnsUpdateOverride!: pulumi.Output<string>;
    public readonly ddnsZone!: pulumi.Output<string | undefined>;
    public readonly defaultGateway!: pulumi.Output<string>;
    public readonly dhcpSettingsFromFortiipam!: pulumi.Output<string>;
    public readonly dnsServer1!: pulumi.Output<string>;
    public readonly dnsServer2!: pulumi.Output<string>;
    public readonly dnsServer3!: pulumi.Output<string>;
    public readonly dnsServer4!: pulumi.Output<string>;
    public readonly dnsService!: pulumi.Output<string>;
    public readonly domain!: pulumi.Output<string | undefined>;
    public readonly dynamicSortSubtable!: pulumi.Output<string | undefined>;
    public readonly excludeRanges!: pulumi.Output<outputs.ObjectSystemDhcpServerExcludeRange[] | undefined>;
    public readonly filename!: pulumi.Output<string | undefined>;
    public readonly forticlientOnNetStatus!: pulumi.Output<string>;
    public readonly fosid!: pulumi.Output<number | undefined>;
    public readonly interface!: pulumi.Output<string | undefined>;
    public readonly ipMode!: pulumi.Output<string | undefined>;
    public readonly ipRanges!: pulumi.Output<outputs.ObjectSystemDhcpServerIpRange[] | undefined>;
    public readonly ipsecLeaseHold!: pulumi.Output<number | undefined>;
    public readonly leaseTime!: pulumi.Output<number>;
    public readonly macAclDefaultAction!: pulumi.Output<string>;
    public readonly netmask!: pulumi.Output<string>;
    public readonly nextServer!: pulumi.Output<string>;
    public readonly ntpServer1!: pulumi.Output<string>;
    public readonly ntpServer2!: pulumi.Output<string>;
    public readonly ntpServer3!: pulumi.Output<string>;
    public readonly ntpService!: pulumi.Output<string>;
    public readonly options!: pulumi.Output<outputs.ObjectSystemDhcpServerOption[] | undefined>;
    public readonly relayAgent!: pulumi.Output<string>;
    public readonly reservedAddresses!: pulumi.Output<outputs.ObjectSystemDhcpServerReservedAddress[] | undefined>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly serverType!: pulumi.Output<string>;
    public readonly sharedSubnet!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly tftpServers!: pulumi.Output<string[]>;
    public readonly timezone!: pulumi.Output<string>;
    public readonly timezoneOption!: pulumi.Output<string>;
    public readonly vciMatch!: pulumi.Output<string>;
    public readonly vciStrings!: pulumi.Output<string[]>;
    public readonly wifiAc1!: pulumi.Output<string>;
    public readonly wifiAc2!: pulumi.Output<string>;
    public readonly wifiAc3!: pulumi.Output<string>;
    public readonly wifiAcService!: pulumi.Output<string>;
    public readonly winsServer1!: pulumi.Output<string>;
    public readonly winsServer2!: pulumi.Output<string>;

    /**
     * Create a ObjectSystemDhcpServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ObjectSystemDhcpServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectSystemDhcpServerArgs | ObjectSystemDhcpServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectSystemDhcpServerState | undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["autoConfiguration"] = state ? state.autoConfiguration : undefined;
            resourceInputs["autoManagedStatus"] = state ? state.autoManagedStatus : undefined;
            resourceInputs["conflictedIpTimeout"] = state ? state.conflictedIpTimeout : undefined;
            resourceInputs["ddnsAuth"] = state ? state.ddnsAuth : undefined;
            resourceInputs["ddnsKey"] = state ? state.ddnsKey : undefined;
            resourceInputs["ddnsKeyname"] = state ? state.ddnsKeyname : undefined;
            resourceInputs["ddnsServerIp"] = state ? state.ddnsServerIp : undefined;
            resourceInputs["ddnsTtl"] = state ? state.ddnsTtl : undefined;
            resourceInputs["ddnsUpdate"] = state ? state.ddnsUpdate : undefined;
            resourceInputs["ddnsUpdateOverride"] = state ? state.ddnsUpdateOverride : undefined;
            resourceInputs["ddnsZone"] = state ? state.ddnsZone : undefined;
            resourceInputs["defaultGateway"] = state ? state.defaultGateway : undefined;
            resourceInputs["dhcpSettingsFromFortiipam"] = state ? state.dhcpSettingsFromFortiipam : undefined;
            resourceInputs["dnsServer1"] = state ? state.dnsServer1 : undefined;
            resourceInputs["dnsServer2"] = state ? state.dnsServer2 : undefined;
            resourceInputs["dnsServer3"] = state ? state.dnsServer3 : undefined;
            resourceInputs["dnsServer4"] = state ? state.dnsServer4 : undefined;
            resourceInputs["dnsService"] = state ? state.dnsService : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["dynamicSortSubtable"] = state ? state.dynamicSortSubtable : undefined;
            resourceInputs["excludeRanges"] = state ? state.excludeRanges : undefined;
            resourceInputs["filename"] = state ? state.filename : undefined;
            resourceInputs["forticlientOnNetStatus"] = state ? state.forticlientOnNetStatus : undefined;
            resourceInputs["fosid"] = state ? state.fosid : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["ipMode"] = state ? state.ipMode : undefined;
            resourceInputs["ipRanges"] = state ? state.ipRanges : undefined;
            resourceInputs["ipsecLeaseHold"] = state ? state.ipsecLeaseHold : undefined;
            resourceInputs["leaseTime"] = state ? state.leaseTime : undefined;
            resourceInputs["macAclDefaultAction"] = state ? state.macAclDefaultAction : undefined;
            resourceInputs["netmask"] = state ? state.netmask : undefined;
            resourceInputs["nextServer"] = state ? state.nextServer : undefined;
            resourceInputs["ntpServer1"] = state ? state.ntpServer1 : undefined;
            resourceInputs["ntpServer2"] = state ? state.ntpServer2 : undefined;
            resourceInputs["ntpServer3"] = state ? state.ntpServer3 : undefined;
            resourceInputs["ntpService"] = state ? state.ntpService : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["relayAgent"] = state ? state.relayAgent : undefined;
            resourceInputs["reservedAddresses"] = state ? state.reservedAddresses : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["serverType"] = state ? state.serverType : undefined;
            resourceInputs["sharedSubnet"] = state ? state.sharedSubnet : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tftpServers"] = state ? state.tftpServers : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
            resourceInputs["timezoneOption"] = state ? state.timezoneOption : undefined;
            resourceInputs["vciMatch"] = state ? state.vciMatch : undefined;
            resourceInputs["vciStrings"] = state ? state.vciStrings : undefined;
            resourceInputs["wifiAc1"] = state ? state.wifiAc1 : undefined;
            resourceInputs["wifiAc2"] = state ? state.wifiAc2 : undefined;
            resourceInputs["wifiAc3"] = state ? state.wifiAc3 : undefined;
            resourceInputs["wifiAcService"] = state ? state.wifiAcService : undefined;
            resourceInputs["winsServer1"] = state ? state.winsServer1 : undefined;
            resourceInputs["winsServer2"] = state ? state.winsServer2 : undefined;
        } else {
            const args = argsOrState as ObjectSystemDhcpServerArgs | undefined;
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["autoConfiguration"] = args ? args.autoConfiguration : undefined;
            resourceInputs["autoManagedStatus"] = args ? args.autoManagedStatus : undefined;
            resourceInputs["conflictedIpTimeout"] = args ? args.conflictedIpTimeout : undefined;
            resourceInputs["ddnsAuth"] = args ? args.ddnsAuth : undefined;
            resourceInputs["ddnsKey"] = args ? args.ddnsKey : undefined;
            resourceInputs["ddnsKeyname"] = args ? args.ddnsKeyname : undefined;
            resourceInputs["ddnsServerIp"] = args ? args.ddnsServerIp : undefined;
            resourceInputs["ddnsTtl"] = args ? args.ddnsTtl : undefined;
            resourceInputs["ddnsUpdate"] = args ? args.ddnsUpdate : undefined;
            resourceInputs["ddnsUpdateOverride"] = args ? args.ddnsUpdateOverride : undefined;
            resourceInputs["ddnsZone"] = args ? args.ddnsZone : undefined;
            resourceInputs["defaultGateway"] = args ? args.defaultGateway : undefined;
            resourceInputs["dhcpSettingsFromFortiipam"] = args ? args.dhcpSettingsFromFortiipam : undefined;
            resourceInputs["dnsServer1"] = args ? args.dnsServer1 : undefined;
            resourceInputs["dnsServer2"] = args ? args.dnsServer2 : undefined;
            resourceInputs["dnsServer3"] = args ? args.dnsServer3 : undefined;
            resourceInputs["dnsServer4"] = args ? args.dnsServer4 : undefined;
            resourceInputs["dnsService"] = args ? args.dnsService : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["dynamicSortSubtable"] = args ? args.dynamicSortSubtable : undefined;
            resourceInputs["excludeRanges"] = args ? args.excludeRanges : undefined;
            resourceInputs["filename"] = args ? args.filename : undefined;
            resourceInputs["forticlientOnNetStatus"] = args ? args.forticlientOnNetStatus : undefined;
            resourceInputs["fosid"] = args ? args.fosid : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["ipMode"] = args ? args.ipMode : undefined;
            resourceInputs["ipRanges"] = args ? args.ipRanges : undefined;
            resourceInputs["ipsecLeaseHold"] = args ? args.ipsecLeaseHold : undefined;
            resourceInputs["leaseTime"] = args ? args.leaseTime : undefined;
            resourceInputs["macAclDefaultAction"] = args ? args.macAclDefaultAction : undefined;
            resourceInputs["netmask"] = args ? args.netmask : undefined;
            resourceInputs["nextServer"] = args ? args.nextServer : undefined;
            resourceInputs["ntpServer1"] = args ? args.ntpServer1 : undefined;
            resourceInputs["ntpServer2"] = args ? args.ntpServer2 : undefined;
            resourceInputs["ntpServer3"] = args ? args.ntpServer3 : undefined;
            resourceInputs["ntpService"] = args ? args.ntpService : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["relayAgent"] = args ? args.relayAgent : undefined;
            resourceInputs["reservedAddresses"] = args ? args.reservedAddresses : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["serverType"] = args ? args.serverType : undefined;
            resourceInputs["sharedSubnet"] = args ? args.sharedSubnet : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tftpServers"] = args ? args.tftpServers : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
            resourceInputs["timezoneOption"] = args ? args.timezoneOption : undefined;
            resourceInputs["vciMatch"] = args ? args.vciMatch : undefined;
            resourceInputs["vciStrings"] = args ? args.vciStrings : undefined;
            resourceInputs["wifiAc1"] = args ? args.wifiAc1 : undefined;
            resourceInputs["wifiAc2"] = args ? args.wifiAc2 : undefined;
            resourceInputs["wifiAc3"] = args ? args.wifiAc3 : undefined;
            resourceInputs["wifiAcService"] = args ? args.wifiAcService : undefined;
            resourceInputs["winsServer1"] = args ? args.winsServer1 : undefined;
            resourceInputs["winsServer2"] = args ? args.winsServer2 : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectSystemDhcpServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectSystemDhcpServer resources.
 */
export interface ObjectSystemDhcpServerState {
    adom?: pulumi.Input<string>;
    autoConfiguration?: pulumi.Input<string>;
    autoManagedStatus?: pulumi.Input<string>;
    conflictedIpTimeout?: pulumi.Input<number>;
    ddnsAuth?: pulumi.Input<string>;
    ddnsKey?: pulumi.Input<string>;
    ddnsKeyname?: pulumi.Input<string>;
    ddnsServerIp?: pulumi.Input<string>;
    ddnsTtl?: pulumi.Input<number>;
    ddnsUpdate?: pulumi.Input<string>;
    ddnsUpdateOverride?: pulumi.Input<string>;
    ddnsZone?: pulumi.Input<string>;
    defaultGateway?: pulumi.Input<string>;
    dhcpSettingsFromFortiipam?: pulumi.Input<string>;
    dnsServer1?: pulumi.Input<string>;
    dnsServer2?: pulumi.Input<string>;
    dnsServer3?: pulumi.Input<string>;
    dnsServer4?: pulumi.Input<string>;
    dnsService?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    excludeRanges?: pulumi.Input<pulumi.Input<inputs.ObjectSystemDhcpServerExcludeRange>[]>;
    filename?: pulumi.Input<string>;
    forticlientOnNetStatus?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    ipMode?: pulumi.Input<string>;
    ipRanges?: pulumi.Input<pulumi.Input<inputs.ObjectSystemDhcpServerIpRange>[]>;
    ipsecLeaseHold?: pulumi.Input<number>;
    leaseTime?: pulumi.Input<number>;
    macAclDefaultAction?: pulumi.Input<string>;
    netmask?: pulumi.Input<string>;
    nextServer?: pulumi.Input<string>;
    ntpServer1?: pulumi.Input<string>;
    ntpServer2?: pulumi.Input<string>;
    ntpServer3?: pulumi.Input<string>;
    ntpService?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<inputs.ObjectSystemDhcpServerOption>[]>;
    relayAgent?: pulumi.Input<string>;
    reservedAddresses?: pulumi.Input<pulumi.Input<inputs.ObjectSystemDhcpServerReservedAddress>[]>;
    scopetype?: pulumi.Input<string>;
    serverType?: pulumi.Input<string>;
    sharedSubnet?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tftpServers?: pulumi.Input<pulumi.Input<string>[]>;
    timezone?: pulumi.Input<string>;
    timezoneOption?: pulumi.Input<string>;
    vciMatch?: pulumi.Input<string>;
    vciStrings?: pulumi.Input<pulumi.Input<string>[]>;
    wifiAc1?: pulumi.Input<string>;
    wifiAc2?: pulumi.Input<string>;
    wifiAc3?: pulumi.Input<string>;
    wifiAcService?: pulumi.Input<string>;
    winsServer1?: pulumi.Input<string>;
    winsServer2?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectSystemDhcpServer resource.
 */
export interface ObjectSystemDhcpServerArgs {
    adom?: pulumi.Input<string>;
    autoConfiguration?: pulumi.Input<string>;
    autoManagedStatus?: pulumi.Input<string>;
    conflictedIpTimeout?: pulumi.Input<number>;
    ddnsAuth?: pulumi.Input<string>;
    ddnsKey?: pulumi.Input<string>;
    ddnsKeyname?: pulumi.Input<string>;
    ddnsServerIp?: pulumi.Input<string>;
    ddnsTtl?: pulumi.Input<number>;
    ddnsUpdate?: pulumi.Input<string>;
    ddnsUpdateOverride?: pulumi.Input<string>;
    ddnsZone?: pulumi.Input<string>;
    defaultGateway?: pulumi.Input<string>;
    dhcpSettingsFromFortiipam?: pulumi.Input<string>;
    dnsServer1?: pulumi.Input<string>;
    dnsServer2?: pulumi.Input<string>;
    dnsServer3?: pulumi.Input<string>;
    dnsServer4?: pulumi.Input<string>;
    dnsService?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    dynamicSortSubtable?: pulumi.Input<string>;
    excludeRanges?: pulumi.Input<pulumi.Input<inputs.ObjectSystemDhcpServerExcludeRange>[]>;
    filename?: pulumi.Input<string>;
    forticlientOnNetStatus?: pulumi.Input<string>;
    fosid?: pulumi.Input<number>;
    interface?: pulumi.Input<string>;
    ipMode?: pulumi.Input<string>;
    ipRanges?: pulumi.Input<pulumi.Input<inputs.ObjectSystemDhcpServerIpRange>[]>;
    ipsecLeaseHold?: pulumi.Input<number>;
    leaseTime?: pulumi.Input<number>;
    macAclDefaultAction?: pulumi.Input<string>;
    netmask?: pulumi.Input<string>;
    nextServer?: pulumi.Input<string>;
    ntpServer1?: pulumi.Input<string>;
    ntpServer2?: pulumi.Input<string>;
    ntpServer3?: pulumi.Input<string>;
    ntpService?: pulumi.Input<string>;
    options?: pulumi.Input<pulumi.Input<inputs.ObjectSystemDhcpServerOption>[]>;
    relayAgent?: pulumi.Input<string>;
    reservedAddresses?: pulumi.Input<pulumi.Input<inputs.ObjectSystemDhcpServerReservedAddress>[]>;
    scopetype?: pulumi.Input<string>;
    serverType?: pulumi.Input<string>;
    sharedSubnet?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tftpServers?: pulumi.Input<pulumi.Input<string>[]>;
    timezone?: pulumi.Input<string>;
    timezoneOption?: pulumi.Input<string>;
    vciMatch?: pulumi.Input<string>;
    vciStrings?: pulumi.Input<pulumi.Input<string>[]>;
    wifiAc1?: pulumi.Input<string>;
    wifiAc2?: pulumi.Input<string>;
    wifiAc3?: pulumi.Input<string>;
    wifiAcService?: pulumi.Input<string>;
    winsServer1?: pulumi.Input<string>;
    winsServer2?: pulumi.Input<string>;
}
