// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ObjectWebfilterProfileWeb extends pulumi.CustomResource {
    /**
     * Get an existing ObjectWebfilterProfileWeb resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectWebfilterProfileWebState, opts?: pulumi.CustomResourceOptions): ObjectWebfilterProfileWeb {
        return new ObjectWebfilterProfileWeb(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/objectWebfilterProfileWeb:ObjectWebfilterProfileWeb';

    /**
     * Returns true if the given object is an instance of ObjectWebfilterProfileWeb.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectWebfilterProfileWeb {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectWebfilterProfileWeb.__pulumiType;
    }

    public readonly adom!: pulumi.Output<string | undefined>;
    public readonly allowlists!: pulumi.Output<string[]>;
    public readonly blacklist!: pulumi.Output<string>;
    public readonly blocklist!: pulumi.Output<string>;
    public readonly bwordTable!: pulumi.Output<string | undefined>;
    public readonly bwordThreshold!: pulumi.Output<number>;
    public readonly contentHeaderList!: pulumi.Output<string | undefined>;
    public readonly keywordMatches!: pulumi.Output<string[]>;
    public readonly logSearch!: pulumi.Output<string>;
    public readonly profile!: pulumi.Output<string>;
    public readonly safeSearches!: pulumi.Output<string[]>;
    public readonly scopetype!: pulumi.Output<string | undefined>;
    public readonly urlfilterTable!: pulumi.Output<string | undefined>;
    public readonly vimeoRestrict!: pulumi.Output<string | undefined>;
    public readonly whitelists!: pulumi.Output<string[]>;
    public readonly youtubeRestrict!: pulumi.Output<string>;

    /**
     * Create a ObjectWebfilterProfileWeb resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObjectWebfilterProfileWebArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectWebfilterProfileWebArgs | ObjectWebfilterProfileWebState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectWebfilterProfileWebState | undefined;
            resourceInputs["adom"] = state ? state.adom : undefined;
            resourceInputs["allowlists"] = state ? state.allowlists : undefined;
            resourceInputs["blacklist"] = state ? state.blacklist : undefined;
            resourceInputs["blocklist"] = state ? state.blocklist : undefined;
            resourceInputs["bwordTable"] = state ? state.bwordTable : undefined;
            resourceInputs["bwordThreshold"] = state ? state.bwordThreshold : undefined;
            resourceInputs["contentHeaderList"] = state ? state.contentHeaderList : undefined;
            resourceInputs["keywordMatches"] = state ? state.keywordMatches : undefined;
            resourceInputs["logSearch"] = state ? state.logSearch : undefined;
            resourceInputs["profile"] = state ? state.profile : undefined;
            resourceInputs["safeSearches"] = state ? state.safeSearches : undefined;
            resourceInputs["scopetype"] = state ? state.scopetype : undefined;
            resourceInputs["urlfilterTable"] = state ? state.urlfilterTable : undefined;
            resourceInputs["vimeoRestrict"] = state ? state.vimeoRestrict : undefined;
            resourceInputs["whitelists"] = state ? state.whitelists : undefined;
            resourceInputs["youtubeRestrict"] = state ? state.youtubeRestrict : undefined;
        } else {
            const args = argsOrState as ObjectWebfilterProfileWebArgs | undefined;
            if ((!args || args.profile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'profile'");
            }
            resourceInputs["adom"] = args ? args.adom : undefined;
            resourceInputs["allowlists"] = args ? args.allowlists : undefined;
            resourceInputs["blacklist"] = args ? args.blacklist : undefined;
            resourceInputs["blocklist"] = args ? args.blocklist : undefined;
            resourceInputs["bwordTable"] = args ? args.bwordTable : undefined;
            resourceInputs["bwordThreshold"] = args ? args.bwordThreshold : undefined;
            resourceInputs["contentHeaderList"] = args ? args.contentHeaderList : undefined;
            resourceInputs["keywordMatches"] = args ? args.keywordMatches : undefined;
            resourceInputs["logSearch"] = args ? args.logSearch : undefined;
            resourceInputs["profile"] = args ? args.profile : undefined;
            resourceInputs["safeSearches"] = args ? args.safeSearches : undefined;
            resourceInputs["scopetype"] = args ? args.scopetype : undefined;
            resourceInputs["urlfilterTable"] = args ? args.urlfilterTable : undefined;
            resourceInputs["vimeoRestrict"] = args ? args.vimeoRestrict : undefined;
            resourceInputs["whitelists"] = args ? args.whitelists : undefined;
            resourceInputs["youtubeRestrict"] = args ? args.youtubeRestrict : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectWebfilterProfileWeb.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectWebfilterProfileWeb resources.
 */
export interface ObjectWebfilterProfileWebState {
    adom?: pulumi.Input<string>;
    allowlists?: pulumi.Input<pulumi.Input<string>[]>;
    blacklist?: pulumi.Input<string>;
    blocklist?: pulumi.Input<string>;
    bwordTable?: pulumi.Input<string>;
    bwordThreshold?: pulumi.Input<number>;
    contentHeaderList?: pulumi.Input<string>;
    keywordMatches?: pulumi.Input<pulumi.Input<string>[]>;
    logSearch?: pulumi.Input<string>;
    profile?: pulumi.Input<string>;
    safeSearches?: pulumi.Input<pulumi.Input<string>[]>;
    scopetype?: pulumi.Input<string>;
    urlfilterTable?: pulumi.Input<string>;
    vimeoRestrict?: pulumi.Input<string>;
    whitelists?: pulumi.Input<pulumi.Input<string>[]>;
    youtubeRestrict?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectWebfilterProfileWeb resource.
 */
export interface ObjectWebfilterProfileWebArgs {
    adom?: pulumi.Input<string>;
    allowlists?: pulumi.Input<pulumi.Input<string>[]>;
    blacklist?: pulumi.Input<string>;
    blocklist?: pulumi.Input<string>;
    bwordTable?: pulumi.Input<string>;
    bwordThreshold?: pulumi.Input<number>;
    contentHeaderList?: pulumi.Input<string>;
    keywordMatches?: pulumi.Input<pulumi.Input<string>[]>;
    logSearch?: pulumi.Input<string>;
    profile: pulumi.Input<string>;
    safeSearches?: pulumi.Input<pulumi.Input<string>[]>;
    scopetype?: pulumi.Input<string>;
    urlfilterTable?: pulumi.Input<string>;
    vimeoRestrict?: pulumi.Input<string>;
    whitelists?: pulumi.Input<pulumi.Input<string>[]>;
    youtubeRestrict?: pulumi.Input<string>;
}
