// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PackagesGlobalFooterPolicy6 extends pulumi.CustomResource {
    /**
     * Get an existing PackagesGlobalFooterPolicy6 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PackagesGlobalFooterPolicy6State, opts?: pulumi.CustomResourceOptions): PackagesGlobalFooterPolicy6 {
        return new PackagesGlobalFooterPolicy6(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fortimanager:index/packagesGlobalFooterPolicy6:PackagesGlobalFooterPolicy6';

    /**
     * Returns true if the given object is an instance of PackagesGlobalFooterPolicy6.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PackagesGlobalFooterPolicy6 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PackagesGlobalFooterPolicy6.__pulumiType;
    }

    public readonly _policyBlock!: pulumi.Output<number | undefined>;
    public readonly action!: pulumi.Output<string>;
    public readonly antiReplay!: pulumi.Output<string>;
    public readonly appCategory!: pulumi.Output<string | undefined>;
    public readonly appGroup!: pulumi.Output<string | undefined>;
    public readonly applicationCharts!: pulumi.Output<string[]>;
    public readonly applicationList!: pulumi.Output<string | undefined>;
    public readonly applications!: pulumi.Output<number[]>;
    public readonly autoAsicOffload!: pulumi.Output<string>;
    public readonly avProfile!: pulumi.Output<string | undefined>;
    public readonly casiProfile!: pulumi.Output<string | undefined>;
    public readonly cgnLogServerGrp!: pulumi.Output<string | undefined>;
    public readonly cifsProfile!: pulumi.Output<string | undefined>;
    public readonly comments!: pulumi.Output<string | undefined>;
    public readonly customLogFields!: pulumi.Output<string | undefined>;
    public readonly decryptedTrafficMirror!: pulumi.Output<string | undefined>;
    public readonly deepInspectionOptions!: pulumi.Output<string | undefined>;
    public readonly deviceDetectionPortal!: pulumi.Output<string | undefined>;
    public readonly devices!: pulumi.Output<string | undefined>;
    public readonly diffservForward!: pulumi.Output<string>;
    public readonly diffservReverse!: pulumi.Output<string>;
    public readonly diffservcodeForward!: pulumi.Output<string>;
    public readonly diffservcodeRev!: pulumi.Output<string>;
    public readonly dlpSensor!: pulumi.Output<string | undefined>;
    public readonly dnsfilterProfile!: pulumi.Output<string | undefined>;
    public readonly dscpMatch!: pulumi.Output<string | undefined>;
    public readonly dscpNegate!: pulumi.Output<string | undefined>;
    public readonly dscpValue!: pulumi.Output<string | undefined>;
    public readonly dsri!: pulumi.Output<string>;
    public readonly dstaddr!: pulumi.Output<string | undefined>;
    public readonly dstaddrNegate!: pulumi.Output<string>;
    public readonly dstintf!: pulumi.Output<string | undefined>;
    public readonly dynamicProfile!: pulumi.Output<string | undefined>;
    public readonly dynamicProfileAccesses!: pulumi.Output<string[]>;
    public readonly dynamicProfileGroup!: pulumi.Output<string | undefined>;
    public readonly emailCollectionPortal!: pulumi.Output<string | undefined>;
    public readonly emailfilterProfile!: pulumi.Output<string | undefined>;
    public readonly fileFilterProfile!: pulumi.Output<string | undefined>;
    public readonly firewallSessionDirty!: pulumi.Output<string>;
    public readonly fixedport!: pulumi.Output<string>;
    public readonly fsae!: pulumi.Output<string | undefined>;
    public readonly fssoGroups!: pulumi.Output<string | undefined>;
    public readonly globalLabel!: pulumi.Output<string | undefined>;
    public readonly groups!: pulumi.Output<string | undefined>;
    public readonly httpPolicyRedirect!: pulumi.Output<string>;
    public readonly icapProfile!: pulumi.Output<string | undefined>;
    public readonly identityBased!: pulumi.Output<string | undefined>;
    public readonly identityFrom!: pulumi.Output<string | undefined>;
    public readonly inbound!: pulumi.Output<string>;
    public readonly inspectionMode!: pulumi.Output<string>;
    public readonly ippool!: pulumi.Output<string>;
    public readonly ipsSensor!: pulumi.Output<string | undefined>;
    public readonly label!: pulumi.Output<string | undefined>;
    public readonly logtraffic!: pulumi.Output<string>;
    public readonly logtrafficStart!: pulumi.Output<string>;
    public readonly mmsProfile!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nat!: pulumi.Output<string>;
    public readonly natinbound!: pulumi.Output<string>;
    public readonly natoutbound!: pulumi.Output<string>;
    public readonly npAccelation!: pulumi.Output<string | undefined>;
    public readonly npAcceleration!: pulumi.Output<string>;
    public readonly outbound!: pulumi.Output<string>;
    public readonly perIpShaper!: pulumi.Output<string | undefined>;
    public readonly pkg!: pulumi.Output<string>;
    public readonly pkgFolderPath!: pulumi.Output<string | undefined>;
    public readonly policyOffload!: pulumi.Output<string | undefined>;
    public readonly policyid!: pulumi.Output<number>;
    public readonly poolname!: pulumi.Output<string | undefined>;
    public readonly profileGroup!: pulumi.Output<string | undefined>;
    public readonly profileProtocolOptions!: pulumi.Output<string>;
    public readonly profileType!: pulumi.Output<string>;
    public readonly replacemsgGroup!: pulumi.Output<string | undefined>;
    public readonly replacemsgOverrideGroup!: pulumi.Output<string | undefined>;
    public readonly rsso!: pulumi.Output<string | undefined>;
    public readonly schedule!: pulumi.Output<string | undefined>;
    public readonly sendDenyPacket!: pulumi.Output<string>;
    public readonly service!: pulumi.Output<string | undefined>;
    public readonly serviceNegate!: pulumi.Output<string>;
    public readonly sessionTtl!: pulumi.Output<string>;
    public readonly spamfilterProfile!: pulumi.Output<string | undefined>;
    public readonly srcaddr!: pulumi.Output<string | undefined>;
    public readonly srcaddrNegate!: pulumi.Output<string>;
    public readonly srcintf!: pulumi.Output<string | undefined>;
    public readonly sshFilterProfile!: pulumi.Output<string | undefined>;
    public readonly sshPolicyRedirect!: pulumi.Output<string>;
    public readonly sslMirror!: pulumi.Output<string>;
    public readonly sslMirrorIntf!: pulumi.Output<string | undefined>;
    public readonly sslSshProfile!: pulumi.Output<string | undefined>;
    public readonly sslvpnAuth!: pulumi.Output<string | undefined>;
    public readonly sslvpnCcert!: pulumi.Output<string | undefined>;
    public readonly sslvpnCipher!: pulumi.Output<string | undefined>;
    public readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<string | undefined>;
    public readonly tcpMssReceiver!: pulumi.Output<number | undefined>;
    public readonly tcpMssSender!: pulumi.Output<number | undefined>;
    public readonly tcpSessionWithoutSyn!: pulumi.Output<string>;
    public readonly timeoutSendRst!: pulumi.Output<string>;
    public readonly tos!: pulumi.Output<string>;
    public readonly tosMask!: pulumi.Output<string>;
    public readonly tosNegate!: pulumi.Output<string>;
    public readonly trafficShaper!: pulumi.Output<string | undefined>;
    public readonly trafficShaperReverse!: pulumi.Output<string | undefined>;
    public readonly urlCategory!: pulumi.Output<string | undefined>;
    public readonly users!: pulumi.Output<string | undefined>;
    public readonly utmInspectionMode!: pulumi.Output<string | undefined>;
    public readonly utmStatus!: pulumi.Output<string>;
    public readonly uuid!: pulumi.Output<string>;
    public readonly vlanCosFwd!: pulumi.Output<number>;
    public readonly vlanCosRev!: pulumi.Output<number>;
    public readonly vlanFilter!: pulumi.Output<string | undefined>;
    public readonly voipProfile!: pulumi.Output<string | undefined>;
    public readonly vpntunnel!: pulumi.Output<string | undefined>;
    public readonly wafProfile!: pulumi.Output<string | undefined>;
    public readonly webcache!: pulumi.Output<string>;
    public readonly webcacheHttps!: pulumi.Output<string>;
    public readonly webfilterProfile!: pulumi.Output<string | undefined>;
    public readonly webproxyForwardServer!: pulumi.Output<string | undefined>;
    public readonly webproxyProfile!: pulumi.Output<string | undefined>;

    /**
     * Create a PackagesGlobalFooterPolicy6 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PackagesGlobalFooterPolicy6Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PackagesGlobalFooterPolicy6Args | PackagesGlobalFooterPolicy6State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PackagesGlobalFooterPolicy6State | undefined;
            resourceInputs["_policyBlock"] = state ? state._policyBlock : undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["antiReplay"] = state ? state.antiReplay : undefined;
            resourceInputs["appCategory"] = state ? state.appCategory : undefined;
            resourceInputs["appGroup"] = state ? state.appGroup : undefined;
            resourceInputs["applicationCharts"] = state ? state.applicationCharts : undefined;
            resourceInputs["applicationList"] = state ? state.applicationList : undefined;
            resourceInputs["applications"] = state ? state.applications : undefined;
            resourceInputs["autoAsicOffload"] = state ? state.autoAsicOffload : undefined;
            resourceInputs["avProfile"] = state ? state.avProfile : undefined;
            resourceInputs["casiProfile"] = state ? state.casiProfile : undefined;
            resourceInputs["cgnLogServerGrp"] = state ? state.cgnLogServerGrp : undefined;
            resourceInputs["cifsProfile"] = state ? state.cifsProfile : undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["customLogFields"] = state ? state.customLogFields : undefined;
            resourceInputs["decryptedTrafficMirror"] = state ? state.decryptedTrafficMirror : undefined;
            resourceInputs["deepInspectionOptions"] = state ? state.deepInspectionOptions : undefined;
            resourceInputs["deviceDetectionPortal"] = state ? state.deviceDetectionPortal : undefined;
            resourceInputs["devices"] = state ? state.devices : undefined;
            resourceInputs["diffservForward"] = state ? state.diffservForward : undefined;
            resourceInputs["diffservReverse"] = state ? state.diffservReverse : undefined;
            resourceInputs["diffservcodeForward"] = state ? state.diffservcodeForward : undefined;
            resourceInputs["diffservcodeRev"] = state ? state.diffservcodeRev : undefined;
            resourceInputs["dlpSensor"] = state ? state.dlpSensor : undefined;
            resourceInputs["dnsfilterProfile"] = state ? state.dnsfilterProfile : undefined;
            resourceInputs["dscpMatch"] = state ? state.dscpMatch : undefined;
            resourceInputs["dscpNegate"] = state ? state.dscpNegate : undefined;
            resourceInputs["dscpValue"] = state ? state.dscpValue : undefined;
            resourceInputs["dsri"] = state ? state.dsri : undefined;
            resourceInputs["dstaddr"] = state ? state.dstaddr : undefined;
            resourceInputs["dstaddrNegate"] = state ? state.dstaddrNegate : undefined;
            resourceInputs["dstintf"] = state ? state.dstintf : undefined;
            resourceInputs["dynamicProfile"] = state ? state.dynamicProfile : undefined;
            resourceInputs["dynamicProfileAccesses"] = state ? state.dynamicProfileAccesses : undefined;
            resourceInputs["dynamicProfileGroup"] = state ? state.dynamicProfileGroup : undefined;
            resourceInputs["emailCollectionPortal"] = state ? state.emailCollectionPortal : undefined;
            resourceInputs["emailfilterProfile"] = state ? state.emailfilterProfile : undefined;
            resourceInputs["fileFilterProfile"] = state ? state.fileFilterProfile : undefined;
            resourceInputs["firewallSessionDirty"] = state ? state.firewallSessionDirty : undefined;
            resourceInputs["fixedport"] = state ? state.fixedport : undefined;
            resourceInputs["fsae"] = state ? state.fsae : undefined;
            resourceInputs["fssoGroups"] = state ? state.fssoGroups : undefined;
            resourceInputs["globalLabel"] = state ? state.globalLabel : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["httpPolicyRedirect"] = state ? state.httpPolicyRedirect : undefined;
            resourceInputs["icapProfile"] = state ? state.icapProfile : undefined;
            resourceInputs["identityBased"] = state ? state.identityBased : undefined;
            resourceInputs["identityFrom"] = state ? state.identityFrom : undefined;
            resourceInputs["inbound"] = state ? state.inbound : undefined;
            resourceInputs["inspectionMode"] = state ? state.inspectionMode : undefined;
            resourceInputs["ippool"] = state ? state.ippool : undefined;
            resourceInputs["ipsSensor"] = state ? state.ipsSensor : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["logtraffic"] = state ? state.logtraffic : undefined;
            resourceInputs["logtrafficStart"] = state ? state.logtrafficStart : undefined;
            resourceInputs["mmsProfile"] = state ? state.mmsProfile : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nat"] = state ? state.nat : undefined;
            resourceInputs["natinbound"] = state ? state.natinbound : undefined;
            resourceInputs["natoutbound"] = state ? state.natoutbound : undefined;
            resourceInputs["npAccelation"] = state ? state.npAccelation : undefined;
            resourceInputs["npAcceleration"] = state ? state.npAcceleration : undefined;
            resourceInputs["outbound"] = state ? state.outbound : undefined;
            resourceInputs["perIpShaper"] = state ? state.perIpShaper : undefined;
            resourceInputs["pkg"] = state ? state.pkg : undefined;
            resourceInputs["pkgFolderPath"] = state ? state.pkgFolderPath : undefined;
            resourceInputs["policyOffload"] = state ? state.policyOffload : undefined;
            resourceInputs["policyid"] = state ? state.policyid : undefined;
            resourceInputs["poolname"] = state ? state.poolname : undefined;
            resourceInputs["profileGroup"] = state ? state.profileGroup : undefined;
            resourceInputs["profileProtocolOptions"] = state ? state.profileProtocolOptions : undefined;
            resourceInputs["profileType"] = state ? state.profileType : undefined;
            resourceInputs["replacemsgGroup"] = state ? state.replacemsgGroup : undefined;
            resourceInputs["replacemsgOverrideGroup"] = state ? state.replacemsgOverrideGroup : undefined;
            resourceInputs["rsso"] = state ? state.rsso : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["sendDenyPacket"] = state ? state.sendDenyPacket : undefined;
            resourceInputs["service"] = state ? state.service : undefined;
            resourceInputs["serviceNegate"] = state ? state.serviceNegate : undefined;
            resourceInputs["sessionTtl"] = state ? state.sessionTtl : undefined;
            resourceInputs["spamfilterProfile"] = state ? state.spamfilterProfile : undefined;
            resourceInputs["srcaddr"] = state ? state.srcaddr : undefined;
            resourceInputs["srcaddrNegate"] = state ? state.srcaddrNegate : undefined;
            resourceInputs["srcintf"] = state ? state.srcintf : undefined;
            resourceInputs["sshFilterProfile"] = state ? state.sshFilterProfile : undefined;
            resourceInputs["sshPolicyRedirect"] = state ? state.sshPolicyRedirect : undefined;
            resourceInputs["sslMirror"] = state ? state.sslMirror : undefined;
            resourceInputs["sslMirrorIntf"] = state ? state.sslMirrorIntf : undefined;
            resourceInputs["sslSshProfile"] = state ? state.sslSshProfile : undefined;
            resourceInputs["sslvpnAuth"] = state ? state.sslvpnAuth : undefined;
            resourceInputs["sslvpnCcert"] = state ? state.sslvpnCcert : undefined;
            resourceInputs["sslvpnCipher"] = state ? state.sslvpnCipher : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tcpMssReceiver"] = state ? state.tcpMssReceiver : undefined;
            resourceInputs["tcpMssSender"] = state ? state.tcpMssSender : undefined;
            resourceInputs["tcpSessionWithoutSyn"] = state ? state.tcpSessionWithoutSyn : undefined;
            resourceInputs["timeoutSendRst"] = state ? state.timeoutSendRst : undefined;
            resourceInputs["tos"] = state ? state.tos : undefined;
            resourceInputs["tosMask"] = state ? state.tosMask : undefined;
            resourceInputs["tosNegate"] = state ? state.tosNegate : undefined;
            resourceInputs["trafficShaper"] = state ? state.trafficShaper : undefined;
            resourceInputs["trafficShaperReverse"] = state ? state.trafficShaperReverse : undefined;
            resourceInputs["urlCategory"] = state ? state.urlCategory : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
            resourceInputs["utmInspectionMode"] = state ? state.utmInspectionMode : undefined;
            resourceInputs["utmStatus"] = state ? state.utmStatus : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vlanCosFwd"] = state ? state.vlanCosFwd : undefined;
            resourceInputs["vlanCosRev"] = state ? state.vlanCosRev : undefined;
            resourceInputs["vlanFilter"] = state ? state.vlanFilter : undefined;
            resourceInputs["voipProfile"] = state ? state.voipProfile : undefined;
            resourceInputs["vpntunnel"] = state ? state.vpntunnel : undefined;
            resourceInputs["wafProfile"] = state ? state.wafProfile : undefined;
            resourceInputs["webcache"] = state ? state.webcache : undefined;
            resourceInputs["webcacheHttps"] = state ? state.webcacheHttps : undefined;
            resourceInputs["webfilterProfile"] = state ? state.webfilterProfile : undefined;
            resourceInputs["webproxyForwardServer"] = state ? state.webproxyForwardServer : undefined;
            resourceInputs["webproxyProfile"] = state ? state.webproxyProfile : undefined;
        } else {
            const args = argsOrState as PackagesGlobalFooterPolicy6Args | undefined;
            if ((!args || args.pkg === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pkg'");
            }
            resourceInputs["_policyBlock"] = args ? args._policyBlock : undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["antiReplay"] = args ? args.antiReplay : undefined;
            resourceInputs["appCategory"] = args ? args.appCategory : undefined;
            resourceInputs["appGroup"] = args ? args.appGroup : undefined;
            resourceInputs["applicationCharts"] = args ? args.applicationCharts : undefined;
            resourceInputs["applicationList"] = args ? args.applicationList : undefined;
            resourceInputs["applications"] = args ? args.applications : undefined;
            resourceInputs["autoAsicOffload"] = args ? args.autoAsicOffload : undefined;
            resourceInputs["avProfile"] = args ? args.avProfile : undefined;
            resourceInputs["casiProfile"] = args ? args.casiProfile : undefined;
            resourceInputs["cgnLogServerGrp"] = args ? args.cgnLogServerGrp : undefined;
            resourceInputs["cifsProfile"] = args ? args.cifsProfile : undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["customLogFields"] = args ? args.customLogFields : undefined;
            resourceInputs["decryptedTrafficMirror"] = args ? args.decryptedTrafficMirror : undefined;
            resourceInputs["deepInspectionOptions"] = args ? args.deepInspectionOptions : undefined;
            resourceInputs["deviceDetectionPortal"] = args ? args.deviceDetectionPortal : undefined;
            resourceInputs["devices"] = args ? args.devices : undefined;
            resourceInputs["diffservForward"] = args ? args.diffservForward : undefined;
            resourceInputs["diffservReverse"] = args ? args.diffservReverse : undefined;
            resourceInputs["diffservcodeForward"] = args ? args.diffservcodeForward : undefined;
            resourceInputs["diffservcodeRev"] = args ? args.diffservcodeRev : undefined;
            resourceInputs["dlpSensor"] = args ? args.dlpSensor : undefined;
            resourceInputs["dnsfilterProfile"] = args ? args.dnsfilterProfile : undefined;
            resourceInputs["dscpMatch"] = args ? args.dscpMatch : undefined;
            resourceInputs["dscpNegate"] = args ? args.dscpNegate : undefined;
            resourceInputs["dscpValue"] = args ? args.dscpValue : undefined;
            resourceInputs["dsri"] = args ? args.dsri : undefined;
            resourceInputs["dstaddr"] = args ? args.dstaddr : undefined;
            resourceInputs["dstaddrNegate"] = args ? args.dstaddrNegate : undefined;
            resourceInputs["dstintf"] = args ? args.dstintf : undefined;
            resourceInputs["dynamicProfile"] = args ? args.dynamicProfile : undefined;
            resourceInputs["dynamicProfileAccesses"] = args ? args.dynamicProfileAccesses : undefined;
            resourceInputs["dynamicProfileGroup"] = args ? args.dynamicProfileGroup : undefined;
            resourceInputs["emailCollectionPortal"] = args ? args.emailCollectionPortal : undefined;
            resourceInputs["emailfilterProfile"] = args ? args.emailfilterProfile : undefined;
            resourceInputs["fileFilterProfile"] = args ? args.fileFilterProfile : undefined;
            resourceInputs["firewallSessionDirty"] = args ? args.firewallSessionDirty : undefined;
            resourceInputs["fixedport"] = args ? args.fixedport : undefined;
            resourceInputs["fsae"] = args ? args.fsae : undefined;
            resourceInputs["fssoGroups"] = args ? args.fssoGroups : undefined;
            resourceInputs["globalLabel"] = args ? args.globalLabel : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["httpPolicyRedirect"] = args ? args.httpPolicyRedirect : undefined;
            resourceInputs["icapProfile"] = args ? args.icapProfile : undefined;
            resourceInputs["identityBased"] = args ? args.identityBased : undefined;
            resourceInputs["identityFrom"] = args ? args.identityFrom : undefined;
            resourceInputs["inbound"] = args ? args.inbound : undefined;
            resourceInputs["inspectionMode"] = args ? args.inspectionMode : undefined;
            resourceInputs["ippool"] = args ? args.ippool : undefined;
            resourceInputs["ipsSensor"] = args ? args.ipsSensor : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["logtraffic"] = args ? args.logtraffic : undefined;
            resourceInputs["logtrafficStart"] = args ? args.logtrafficStart : undefined;
            resourceInputs["mmsProfile"] = args ? args.mmsProfile : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nat"] = args ? args.nat : undefined;
            resourceInputs["natinbound"] = args ? args.natinbound : undefined;
            resourceInputs["natoutbound"] = args ? args.natoutbound : undefined;
            resourceInputs["npAccelation"] = args ? args.npAccelation : undefined;
            resourceInputs["npAcceleration"] = args ? args.npAcceleration : undefined;
            resourceInputs["outbound"] = args ? args.outbound : undefined;
            resourceInputs["perIpShaper"] = args ? args.perIpShaper : undefined;
            resourceInputs["pkg"] = args ? args.pkg : undefined;
            resourceInputs["pkgFolderPath"] = args ? args.pkgFolderPath : undefined;
            resourceInputs["policyOffload"] = args ? args.policyOffload : undefined;
            resourceInputs["policyid"] = args ? args.policyid : undefined;
            resourceInputs["poolname"] = args ? args.poolname : undefined;
            resourceInputs["profileGroup"] = args ? args.profileGroup : undefined;
            resourceInputs["profileProtocolOptions"] = args ? args.profileProtocolOptions : undefined;
            resourceInputs["profileType"] = args ? args.profileType : undefined;
            resourceInputs["replacemsgGroup"] = args ? args.replacemsgGroup : undefined;
            resourceInputs["replacemsgOverrideGroup"] = args ? args.replacemsgOverrideGroup : undefined;
            resourceInputs["rsso"] = args ? args.rsso : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["sendDenyPacket"] = args ? args.sendDenyPacket : undefined;
            resourceInputs["service"] = args ? args.service : undefined;
            resourceInputs["serviceNegate"] = args ? args.serviceNegate : undefined;
            resourceInputs["sessionTtl"] = args ? args.sessionTtl : undefined;
            resourceInputs["spamfilterProfile"] = args ? args.spamfilterProfile : undefined;
            resourceInputs["srcaddr"] = args ? args.srcaddr : undefined;
            resourceInputs["srcaddrNegate"] = args ? args.srcaddrNegate : undefined;
            resourceInputs["srcintf"] = args ? args.srcintf : undefined;
            resourceInputs["sshFilterProfile"] = args ? args.sshFilterProfile : undefined;
            resourceInputs["sshPolicyRedirect"] = args ? args.sshPolicyRedirect : undefined;
            resourceInputs["sslMirror"] = args ? args.sslMirror : undefined;
            resourceInputs["sslMirrorIntf"] = args ? args.sslMirrorIntf : undefined;
            resourceInputs["sslSshProfile"] = args ? args.sslSshProfile : undefined;
            resourceInputs["sslvpnAuth"] = args ? args.sslvpnAuth : undefined;
            resourceInputs["sslvpnCcert"] = args ? args.sslvpnCcert : undefined;
            resourceInputs["sslvpnCipher"] = args ? args.sslvpnCipher : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tcpMssReceiver"] = args ? args.tcpMssReceiver : undefined;
            resourceInputs["tcpMssSender"] = args ? args.tcpMssSender : undefined;
            resourceInputs["tcpSessionWithoutSyn"] = args ? args.tcpSessionWithoutSyn : undefined;
            resourceInputs["timeoutSendRst"] = args ? args.timeoutSendRst : undefined;
            resourceInputs["tos"] = args ? args.tos : undefined;
            resourceInputs["tosMask"] = args ? args.tosMask : undefined;
            resourceInputs["tosNegate"] = args ? args.tosNegate : undefined;
            resourceInputs["trafficShaper"] = args ? args.trafficShaper : undefined;
            resourceInputs["trafficShaperReverse"] = args ? args.trafficShaperReverse : undefined;
            resourceInputs["urlCategory"] = args ? args.urlCategory : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
            resourceInputs["utmInspectionMode"] = args ? args.utmInspectionMode : undefined;
            resourceInputs["utmStatus"] = args ? args.utmStatus : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vlanCosFwd"] = args ? args.vlanCosFwd : undefined;
            resourceInputs["vlanCosRev"] = args ? args.vlanCosRev : undefined;
            resourceInputs["vlanFilter"] = args ? args.vlanFilter : undefined;
            resourceInputs["voipProfile"] = args ? args.voipProfile : undefined;
            resourceInputs["vpntunnel"] = args ? args.vpntunnel : undefined;
            resourceInputs["wafProfile"] = args ? args.wafProfile : undefined;
            resourceInputs["webcache"] = args ? args.webcache : undefined;
            resourceInputs["webcacheHttps"] = args ? args.webcacheHttps : undefined;
            resourceInputs["webfilterProfile"] = args ? args.webfilterProfile : undefined;
            resourceInputs["webproxyForwardServer"] = args ? args.webproxyForwardServer : undefined;
            resourceInputs["webproxyProfile"] = args ? args.webproxyProfile : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PackagesGlobalFooterPolicy6.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PackagesGlobalFooterPolicy6 resources.
 */
export interface PackagesGlobalFooterPolicy6State {
    _policyBlock?: pulumi.Input<number>;
    action?: pulumi.Input<string>;
    antiReplay?: pulumi.Input<string>;
    appCategory?: pulumi.Input<string>;
    appGroup?: pulumi.Input<string>;
    applicationCharts?: pulumi.Input<pulumi.Input<string>[]>;
    applicationList?: pulumi.Input<string>;
    applications?: pulumi.Input<pulumi.Input<number>[]>;
    autoAsicOffload?: pulumi.Input<string>;
    avProfile?: pulumi.Input<string>;
    casiProfile?: pulumi.Input<string>;
    cgnLogServerGrp?: pulumi.Input<string>;
    cifsProfile?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    customLogFields?: pulumi.Input<string>;
    decryptedTrafficMirror?: pulumi.Input<string>;
    deepInspectionOptions?: pulumi.Input<string>;
    deviceDetectionPortal?: pulumi.Input<string>;
    devices?: pulumi.Input<string>;
    diffservForward?: pulumi.Input<string>;
    diffservReverse?: pulumi.Input<string>;
    diffservcodeForward?: pulumi.Input<string>;
    diffservcodeRev?: pulumi.Input<string>;
    dlpSensor?: pulumi.Input<string>;
    dnsfilterProfile?: pulumi.Input<string>;
    dscpMatch?: pulumi.Input<string>;
    dscpNegate?: pulumi.Input<string>;
    dscpValue?: pulumi.Input<string>;
    dsri?: pulumi.Input<string>;
    dstaddr?: pulumi.Input<string>;
    dstaddrNegate?: pulumi.Input<string>;
    dstintf?: pulumi.Input<string>;
    dynamicProfile?: pulumi.Input<string>;
    dynamicProfileAccesses?: pulumi.Input<pulumi.Input<string>[]>;
    dynamicProfileGroup?: pulumi.Input<string>;
    emailCollectionPortal?: pulumi.Input<string>;
    emailfilterProfile?: pulumi.Input<string>;
    fileFilterProfile?: pulumi.Input<string>;
    firewallSessionDirty?: pulumi.Input<string>;
    fixedport?: pulumi.Input<string>;
    fsae?: pulumi.Input<string>;
    fssoGroups?: pulumi.Input<string>;
    globalLabel?: pulumi.Input<string>;
    groups?: pulumi.Input<string>;
    httpPolicyRedirect?: pulumi.Input<string>;
    icapProfile?: pulumi.Input<string>;
    identityBased?: pulumi.Input<string>;
    identityFrom?: pulumi.Input<string>;
    inbound?: pulumi.Input<string>;
    inspectionMode?: pulumi.Input<string>;
    ippool?: pulumi.Input<string>;
    ipsSensor?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    logtraffic?: pulumi.Input<string>;
    logtrafficStart?: pulumi.Input<string>;
    mmsProfile?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nat?: pulumi.Input<string>;
    natinbound?: pulumi.Input<string>;
    natoutbound?: pulumi.Input<string>;
    npAccelation?: pulumi.Input<string>;
    npAcceleration?: pulumi.Input<string>;
    outbound?: pulumi.Input<string>;
    perIpShaper?: pulumi.Input<string>;
    pkg?: pulumi.Input<string>;
    pkgFolderPath?: pulumi.Input<string>;
    policyOffload?: pulumi.Input<string>;
    policyid?: pulumi.Input<number>;
    poolname?: pulumi.Input<string>;
    profileGroup?: pulumi.Input<string>;
    profileProtocolOptions?: pulumi.Input<string>;
    profileType?: pulumi.Input<string>;
    replacemsgGroup?: pulumi.Input<string>;
    replacemsgOverrideGroup?: pulumi.Input<string>;
    rsso?: pulumi.Input<string>;
    schedule?: pulumi.Input<string>;
    sendDenyPacket?: pulumi.Input<string>;
    service?: pulumi.Input<string>;
    serviceNegate?: pulumi.Input<string>;
    sessionTtl?: pulumi.Input<string>;
    spamfilterProfile?: pulumi.Input<string>;
    srcaddr?: pulumi.Input<string>;
    srcaddrNegate?: pulumi.Input<string>;
    srcintf?: pulumi.Input<string>;
    sshFilterProfile?: pulumi.Input<string>;
    sshPolicyRedirect?: pulumi.Input<string>;
    sslMirror?: pulumi.Input<string>;
    sslMirrorIntf?: pulumi.Input<string>;
    sslSshProfile?: pulumi.Input<string>;
    sslvpnAuth?: pulumi.Input<string>;
    sslvpnCcert?: pulumi.Input<string>;
    sslvpnCipher?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<string>;
    tcpMssReceiver?: pulumi.Input<number>;
    tcpMssSender?: pulumi.Input<number>;
    tcpSessionWithoutSyn?: pulumi.Input<string>;
    timeoutSendRst?: pulumi.Input<string>;
    tos?: pulumi.Input<string>;
    tosMask?: pulumi.Input<string>;
    tosNegate?: pulumi.Input<string>;
    trafficShaper?: pulumi.Input<string>;
    trafficShaperReverse?: pulumi.Input<string>;
    urlCategory?: pulumi.Input<string>;
    users?: pulumi.Input<string>;
    utmInspectionMode?: pulumi.Input<string>;
    utmStatus?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    vlanCosFwd?: pulumi.Input<number>;
    vlanCosRev?: pulumi.Input<number>;
    vlanFilter?: pulumi.Input<string>;
    voipProfile?: pulumi.Input<string>;
    vpntunnel?: pulumi.Input<string>;
    wafProfile?: pulumi.Input<string>;
    webcache?: pulumi.Input<string>;
    webcacheHttps?: pulumi.Input<string>;
    webfilterProfile?: pulumi.Input<string>;
    webproxyForwardServer?: pulumi.Input<string>;
    webproxyProfile?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PackagesGlobalFooterPolicy6 resource.
 */
export interface PackagesGlobalFooterPolicy6Args {
    _policyBlock?: pulumi.Input<number>;
    action?: pulumi.Input<string>;
    antiReplay?: pulumi.Input<string>;
    appCategory?: pulumi.Input<string>;
    appGroup?: pulumi.Input<string>;
    applicationCharts?: pulumi.Input<pulumi.Input<string>[]>;
    applicationList?: pulumi.Input<string>;
    applications?: pulumi.Input<pulumi.Input<number>[]>;
    autoAsicOffload?: pulumi.Input<string>;
    avProfile?: pulumi.Input<string>;
    casiProfile?: pulumi.Input<string>;
    cgnLogServerGrp?: pulumi.Input<string>;
    cifsProfile?: pulumi.Input<string>;
    comments?: pulumi.Input<string>;
    customLogFields?: pulumi.Input<string>;
    decryptedTrafficMirror?: pulumi.Input<string>;
    deepInspectionOptions?: pulumi.Input<string>;
    deviceDetectionPortal?: pulumi.Input<string>;
    devices?: pulumi.Input<string>;
    diffservForward?: pulumi.Input<string>;
    diffservReverse?: pulumi.Input<string>;
    diffservcodeForward?: pulumi.Input<string>;
    diffservcodeRev?: pulumi.Input<string>;
    dlpSensor?: pulumi.Input<string>;
    dnsfilterProfile?: pulumi.Input<string>;
    dscpMatch?: pulumi.Input<string>;
    dscpNegate?: pulumi.Input<string>;
    dscpValue?: pulumi.Input<string>;
    dsri?: pulumi.Input<string>;
    dstaddr?: pulumi.Input<string>;
    dstaddrNegate?: pulumi.Input<string>;
    dstintf?: pulumi.Input<string>;
    dynamicProfile?: pulumi.Input<string>;
    dynamicProfileAccesses?: pulumi.Input<pulumi.Input<string>[]>;
    dynamicProfileGroup?: pulumi.Input<string>;
    emailCollectionPortal?: pulumi.Input<string>;
    emailfilterProfile?: pulumi.Input<string>;
    fileFilterProfile?: pulumi.Input<string>;
    firewallSessionDirty?: pulumi.Input<string>;
    fixedport?: pulumi.Input<string>;
    fsae?: pulumi.Input<string>;
    fssoGroups?: pulumi.Input<string>;
    globalLabel?: pulumi.Input<string>;
    groups?: pulumi.Input<string>;
    httpPolicyRedirect?: pulumi.Input<string>;
    icapProfile?: pulumi.Input<string>;
    identityBased?: pulumi.Input<string>;
    identityFrom?: pulumi.Input<string>;
    inbound?: pulumi.Input<string>;
    inspectionMode?: pulumi.Input<string>;
    ippool?: pulumi.Input<string>;
    ipsSensor?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    logtraffic?: pulumi.Input<string>;
    logtrafficStart?: pulumi.Input<string>;
    mmsProfile?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nat?: pulumi.Input<string>;
    natinbound?: pulumi.Input<string>;
    natoutbound?: pulumi.Input<string>;
    npAccelation?: pulumi.Input<string>;
    npAcceleration?: pulumi.Input<string>;
    outbound?: pulumi.Input<string>;
    perIpShaper?: pulumi.Input<string>;
    pkg: pulumi.Input<string>;
    pkgFolderPath?: pulumi.Input<string>;
    policyOffload?: pulumi.Input<string>;
    policyid?: pulumi.Input<number>;
    poolname?: pulumi.Input<string>;
    profileGroup?: pulumi.Input<string>;
    profileProtocolOptions?: pulumi.Input<string>;
    profileType?: pulumi.Input<string>;
    replacemsgGroup?: pulumi.Input<string>;
    replacemsgOverrideGroup?: pulumi.Input<string>;
    rsso?: pulumi.Input<string>;
    schedule?: pulumi.Input<string>;
    sendDenyPacket?: pulumi.Input<string>;
    service?: pulumi.Input<string>;
    serviceNegate?: pulumi.Input<string>;
    sessionTtl?: pulumi.Input<string>;
    spamfilterProfile?: pulumi.Input<string>;
    srcaddr?: pulumi.Input<string>;
    srcaddrNegate?: pulumi.Input<string>;
    srcintf?: pulumi.Input<string>;
    sshFilterProfile?: pulumi.Input<string>;
    sshPolicyRedirect?: pulumi.Input<string>;
    sslMirror?: pulumi.Input<string>;
    sslMirrorIntf?: pulumi.Input<string>;
    sslSshProfile?: pulumi.Input<string>;
    sslvpnAuth?: pulumi.Input<string>;
    sslvpnCcert?: pulumi.Input<string>;
    sslvpnCipher?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<string>;
    tcpMssReceiver?: pulumi.Input<number>;
    tcpMssSender?: pulumi.Input<number>;
    tcpSessionWithoutSyn?: pulumi.Input<string>;
    timeoutSendRst?: pulumi.Input<string>;
    tos?: pulumi.Input<string>;
    tosMask?: pulumi.Input<string>;
    tosNegate?: pulumi.Input<string>;
    trafficShaper?: pulumi.Input<string>;
    trafficShaperReverse?: pulumi.Input<string>;
    urlCategory?: pulumi.Input<string>;
    users?: pulumi.Input<string>;
    utmInspectionMode?: pulumi.Input<string>;
    utmStatus?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    vlanCosFwd?: pulumi.Input<number>;
    vlanCosRev?: pulumi.Input<number>;
    vlanFilter?: pulumi.Input<string>;
    voipProfile?: pulumi.Input<string>;
    vpntunnel?: pulumi.Input<string>;
    wafProfile?: pulumi.Input<string>;
    webcache?: pulumi.Input<string>;
    webcacheHttps?: pulumi.Input<string>;
    webfilterProfile?: pulumi.Input<string>;
    webproxyForwardServer?: pulumi.Input<string>;
    webproxyProfile?: pulumi.Input<string>;
}
