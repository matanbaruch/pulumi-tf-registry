// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getVariableSet(args: GetVariableSetArgs, opts?: pulumi.InvokeOptions): Promise<GetVariableSetResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tfe:index/getVariableSet:getVariableSet", {
        "id": args.id,
        "name": args.name,
        "organization": args.organization,
        "projectIds": args.projectIds,
        "variableIds": args.variableIds,
        "workspaceIds": args.workspaceIds,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVariableSet.
 */
export interface GetVariableSetArgs {
    id?: string;
    name: string;
    organization?: string;
    projectIds?: string[];
    variableIds?: string[];
    workspaceIds?: string[];
}

/**
 * A collection of values returned by getVariableSet.
 */
export interface GetVariableSetResult {
    readonly description: string;
    readonly global: boolean;
    readonly id: string;
    readonly name: string;
    readonly organization?: string;
    readonly priority: boolean;
    readonly projectIds: string[];
    readonly variableIds: string[];
    readonly workspaceIds: string[];
}
export function getVariableSetOutput(args: GetVariableSetOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVariableSetResult> {
    return pulumi.output(args).apply((a: any) => getVariableSet(a, opts))
}

/**
 * A collection of arguments for invoking getVariableSet.
 */
export interface GetVariableSetOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    organization?: pulumi.Input<string>;
    projectIds?: pulumi.Input<pulumi.Input<string>[]>;
    variableIds?: pulumi.Input<pulumi.Input<string>[]>;
    workspaceIds?: pulumi.Input<pulumi.Input<string>[]>;
}
