// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class TerraformVersion extends pulumi.CustomResource {
    /**
     * Get an existing TerraformVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TerraformVersionState, opts?: pulumi.CustomResourceOptions): TerraformVersion {
        return new TerraformVersion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tfe:index/terraformVersion:TerraformVersion';

    /**
     * Returns true if the given object is an instance of TerraformVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TerraformVersion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TerraformVersion.__pulumiType;
    }

    public readonly beta!: pulumi.Output<boolean | undefined>;
    public readonly deprecated!: pulumi.Output<boolean | undefined>;
    public readonly deprecatedReason!: pulumi.Output<string | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly official!: pulumi.Output<boolean | undefined>;
    public readonly sha!: pulumi.Output<string>;
    public readonly url!: pulumi.Output<string>;
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a TerraformVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TerraformVersionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TerraformVersionArgs | TerraformVersionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TerraformVersionState | undefined;
            resourceInputs["beta"] = state ? state.beta : undefined;
            resourceInputs["deprecated"] = state ? state.deprecated : undefined;
            resourceInputs["deprecatedReason"] = state ? state.deprecatedReason : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["official"] = state ? state.official : undefined;
            resourceInputs["sha"] = state ? state.sha : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as TerraformVersionArgs | undefined;
            if ((!args || args.sha === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sha'");
            }
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["beta"] = args ? args.beta : undefined;
            resourceInputs["deprecated"] = args ? args.deprecated : undefined;
            resourceInputs["deprecatedReason"] = args ? args.deprecatedReason : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["official"] = args ? args.official : undefined;
            resourceInputs["sha"] = args ? args.sha : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TerraformVersion.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TerraformVersion resources.
 */
export interface TerraformVersionState {
    beta?: pulumi.Input<boolean>;
    deprecated?: pulumi.Input<boolean>;
    deprecatedReason?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    official?: pulumi.Input<boolean>;
    sha?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TerraformVersion resource.
 */
export interface TerraformVersionArgs {
    beta?: pulumi.Input<boolean>;
    deprecated?: pulumi.Input<boolean>;
    deprecatedReason?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    official?: pulumi.Input<boolean>;
    sha: pulumi.Input<string>;
    url: pulumi.Input<string>;
    version: pulumi.Input<string>;
}
