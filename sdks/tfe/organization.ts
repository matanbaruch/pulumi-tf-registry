// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Organization extends pulumi.CustomResource {
    /**
     * Get an existing Organization resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrganizationState, opts?: pulumi.CustomResourceOptions): Organization {
        return new Organization(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tfe:index/organization:Organization';

    /**
     * Returns true if the given object is an instance of Organization.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Organization {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Organization.__pulumiType;
    }

    public readonly aggregatedCommitStatusEnabled!: pulumi.Output<boolean>;
    public readonly allowForceDeleteWorkspaces!: pulumi.Output<boolean | undefined>;
    public readonly assessmentsEnforced!: pulumi.Output<boolean | undefined>;
    public readonly collaboratorAuthPolicy!: pulumi.Output<string | undefined>;
    public readonly costEstimationEnabled!: pulumi.Output<boolean>;
    public /*out*/ readonly defaultProjectId!: pulumi.Output<string>;
    public readonly email!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly ownersTeamSamlRoleId!: pulumi.Output<string | undefined>;
    public readonly sendPassingStatusesForUntriggeredSpeculativePlans!: pulumi.Output<boolean>;
    public readonly sessionRememberMinutes!: pulumi.Output<number | undefined>;
    public readonly sessionTimeoutMinutes!: pulumi.Output<number | undefined>;

    /**
     * Create a Organization resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrganizationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrganizationArgs | OrganizationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrganizationState | undefined;
            resourceInputs["aggregatedCommitStatusEnabled"] = state ? state.aggregatedCommitStatusEnabled : undefined;
            resourceInputs["allowForceDeleteWorkspaces"] = state ? state.allowForceDeleteWorkspaces : undefined;
            resourceInputs["assessmentsEnforced"] = state ? state.assessmentsEnforced : undefined;
            resourceInputs["collaboratorAuthPolicy"] = state ? state.collaboratorAuthPolicy : undefined;
            resourceInputs["costEstimationEnabled"] = state ? state.costEstimationEnabled : undefined;
            resourceInputs["defaultProjectId"] = state ? state.defaultProjectId : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ownersTeamSamlRoleId"] = state ? state.ownersTeamSamlRoleId : undefined;
            resourceInputs["sendPassingStatusesForUntriggeredSpeculativePlans"] = state ? state.sendPassingStatusesForUntriggeredSpeculativePlans : undefined;
            resourceInputs["sessionRememberMinutes"] = state ? state.sessionRememberMinutes : undefined;
            resourceInputs["sessionTimeoutMinutes"] = state ? state.sessionTimeoutMinutes : undefined;
        } else {
            const args = argsOrState as OrganizationArgs | undefined;
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            resourceInputs["aggregatedCommitStatusEnabled"] = args ? args.aggregatedCommitStatusEnabled : undefined;
            resourceInputs["allowForceDeleteWorkspaces"] = args ? args.allowForceDeleteWorkspaces : undefined;
            resourceInputs["assessmentsEnforced"] = args ? args.assessmentsEnforced : undefined;
            resourceInputs["collaboratorAuthPolicy"] = args ? args.collaboratorAuthPolicy : undefined;
            resourceInputs["costEstimationEnabled"] = args ? args.costEstimationEnabled : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ownersTeamSamlRoleId"] = args ? args.ownersTeamSamlRoleId : undefined;
            resourceInputs["sendPassingStatusesForUntriggeredSpeculativePlans"] = args ? args.sendPassingStatusesForUntriggeredSpeculativePlans : undefined;
            resourceInputs["sessionRememberMinutes"] = args ? args.sessionRememberMinutes : undefined;
            resourceInputs["sessionTimeoutMinutes"] = args ? args.sessionTimeoutMinutes : undefined;
            resourceInputs["defaultProjectId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Organization.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Organization resources.
 */
export interface OrganizationState {
    aggregatedCommitStatusEnabled?: pulumi.Input<boolean>;
    allowForceDeleteWorkspaces?: pulumi.Input<boolean>;
    assessmentsEnforced?: pulumi.Input<boolean>;
    collaboratorAuthPolicy?: pulumi.Input<string>;
    costEstimationEnabled?: pulumi.Input<boolean>;
    defaultProjectId?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ownersTeamSamlRoleId?: pulumi.Input<string>;
    sendPassingStatusesForUntriggeredSpeculativePlans?: pulumi.Input<boolean>;
    sessionRememberMinutes?: pulumi.Input<number>;
    sessionTimeoutMinutes?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Organization resource.
 */
export interface OrganizationArgs {
    aggregatedCommitStatusEnabled?: pulumi.Input<boolean>;
    allowForceDeleteWorkspaces?: pulumi.Input<boolean>;
    assessmentsEnforced?: pulumi.Input<boolean>;
    collaboratorAuthPolicy?: pulumi.Input<string>;
    costEstimationEnabled?: pulumi.Input<boolean>;
    email: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ownersTeamSamlRoleId?: pulumi.Input<string>;
    sendPassingStatusesForUntriggeredSpeculativePlans?: pulumi.Input<boolean>;
    sessionRememberMinutes?: pulumi.Input<number>;
    sessionTimeoutMinutes?: pulumi.Input<number>;
}
