// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SamlSettings extends pulumi.CustomResource {
    /**
     * Get an existing SamlSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SamlSettingsState, opts?: pulumi.CustomResourceOptions): SamlSettings {
        return new SamlSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tfe:index/samlSettings:SamlSettings';

    /**
     * Returns true if the given object is an instance of SamlSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SamlSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SamlSettings.__pulumiType;
    }

    /**
     * ACS Consumer (Recipient) URL
     */
    public /*out*/ readonly acsConsumerUrl!: pulumi.Output<string>;
    /**
     * Team Attribute Name specifies the name of the SAML attribute that determines team membership
     */
    public readonly attrGroups!: pulumi.Output<string>;
    /**
     * Specifies the role for site admin access. Overrides the "Site Admin Role" method
     */
    public readonly attrSiteAdmin!: pulumi.Output<string>;
    /**
     * Username Attribute Name specifies the name of the SAML attribute that determines the user's username
     */
    public readonly attrUsername!: pulumi.Output<string>;
    /**
     * Ensure that <samlp:AuthnRequest> messages are signed
     */
    public readonly authnRequestsSigned!: pulumi.Output<boolean>;
    /**
     * The certificate used for request and assertion signing
     */
    public readonly certificate!: pulumi.Output<string>;
    /**
     * When sign-on fails and this is enabled, the SAMLResponse XML will be displayed on the login page
     */
    public readonly debug!: pulumi.Output<boolean>;
    /**
     * Whether or not SAML single sign-on is enabled
     */
    public /*out*/ readonly enabled!: pulumi.Output<boolean>;
    /**
     * Identity Provider Certificate specifies the PEM encoded X.509 Certificate as provided by the IdP configuration
     */
    public readonly idpCert!: pulumi.Output<string>;
    /**
     * Metadata (Audience) URL
     */
    public /*out*/ readonly metadataUrl!: pulumi.Output<string>;
    public /*out*/ readonly oldIdpCert!: pulumi.Output<string>;
    /**
     * The private key used for request and assertion signing
     */
    public readonly privateKey!: pulumi.Output<string>;
    /**
     * Signature Digest Method. Must be either `SHA1` or `SHA256`. Defaults to `SHA256`
     */
    public readonly signatureDigestMethod!: pulumi.Output<string>;
    /**
     * Signature Signing Method. Must be either `SHA1` or `SHA256`. Defaults to `SHA256`
     */
    public readonly signatureSigningMethod!: pulumi.Output<string>;
    /**
     * Specifies the role for site admin access, provided in the list of roles sent in the Team Attribute Name attribute
     */
    public readonly siteAdminRole!: pulumi.Output<string>;
    /**
     * Single Log Out URL specifies the HTTPS endpoint on your IdP for single logout requests. This value is provided by the
     * IdP configuration
     */
    public readonly sloEndpointUrl!: pulumi.Output<string>;
    /**
     * Specifies the Single Sign On session timeout in seconds. Defaults to 14 days
     */
    public readonly ssoApiTokenSessionTimeout!: pulumi.Output<number>;
    /**
     * Single Sign On URL specifies the HTTPS endpoint on your IdP for single sign-on requests. This value is provided by the
     * IdP configuration
     */
    public readonly ssoEndpointUrl!: pulumi.Output<string>;
    public readonly teamManagementEnabled!: pulumi.Output<boolean>;
    /**
     * Ensure that <saml:Assertion> elements are signed
     */
    public readonly wantAssertionsSigned!: pulumi.Output<boolean>;

    /**
     * Create a SamlSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SamlSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SamlSettingsArgs | SamlSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SamlSettingsState | undefined;
            resourceInputs["acsConsumerUrl"] = state ? state.acsConsumerUrl : undefined;
            resourceInputs["attrGroups"] = state ? state.attrGroups : undefined;
            resourceInputs["attrSiteAdmin"] = state ? state.attrSiteAdmin : undefined;
            resourceInputs["attrUsername"] = state ? state.attrUsername : undefined;
            resourceInputs["authnRequestsSigned"] = state ? state.authnRequestsSigned : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["debug"] = state ? state.debug : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["idpCert"] = state ? state.idpCert : undefined;
            resourceInputs["metadataUrl"] = state ? state.metadataUrl : undefined;
            resourceInputs["oldIdpCert"] = state ? state.oldIdpCert : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["signatureDigestMethod"] = state ? state.signatureDigestMethod : undefined;
            resourceInputs["signatureSigningMethod"] = state ? state.signatureSigningMethod : undefined;
            resourceInputs["siteAdminRole"] = state ? state.siteAdminRole : undefined;
            resourceInputs["sloEndpointUrl"] = state ? state.sloEndpointUrl : undefined;
            resourceInputs["ssoApiTokenSessionTimeout"] = state ? state.ssoApiTokenSessionTimeout : undefined;
            resourceInputs["ssoEndpointUrl"] = state ? state.ssoEndpointUrl : undefined;
            resourceInputs["teamManagementEnabled"] = state ? state.teamManagementEnabled : undefined;
            resourceInputs["wantAssertionsSigned"] = state ? state.wantAssertionsSigned : undefined;
        } else {
            const args = argsOrState as SamlSettingsArgs | undefined;
            if ((!args || args.idpCert === undefined) && !opts.urn) {
                throw new Error("Missing required property 'idpCert'");
            }
            if ((!args || args.sloEndpointUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sloEndpointUrl'");
            }
            if ((!args || args.ssoEndpointUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ssoEndpointUrl'");
            }
            resourceInputs["attrGroups"] = args ? args.attrGroups : undefined;
            resourceInputs["attrSiteAdmin"] = args ? args.attrSiteAdmin : undefined;
            resourceInputs["attrUsername"] = args ? args.attrUsername : undefined;
            resourceInputs["authnRequestsSigned"] = args ? args.authnRequestsSigned : undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["debug"] = args ? args.debug : undefined;
            resourceInputs["idpCert"] = args ? args.idpCert : undefined;
            resourceInputs["privateKey"] = args?.privateKey ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["signatureDigestMethod"] = args ? args.signatureDigestMethod : undefined;
            resourceInputs["signatureSigningMethod"] = args ? args.signatureSigningMethod : undefined;
            resourceInputs["siteAdminRole"] = args ? args.siteAdminRole : undefined;
            resourceInputs["sloEndpointUrl"] = args ? args.sloEndpointUrl : undefined;
            resourceInputs["ssoApiTokenSessionTimeout"] = args ? args.ssoApiTokenSessionTimeout : undefined;
            resourceInputs["ssoEndpointUrl"] = args ? args.ssoEndpointUrl : undefined;
            resourceInputs["teamManagementEnabled"] = args ? args.teamManagementEnabled : undefined;
            resourceInputs["wantAssertionsSigned"] = args ? args.wantAssertionsSigned : undefined;
            resourceInputs["acsConsumerUrl"] = undefined /*out*/;
            resourceInputs["enabled"] = undefined /*out*/;
            resourceInputs["metadataUrl"] = undefined /*out*/;
            resourceInputs["oldIdpCert"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SamlSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SamlSettings resources.
 */
export interface SamlSettingsState {
    /**
     * ACS Consumer (Recipient) URL
     */
    acsConsumerUrl?: pulumi.Input<string>;
    /**
     * Team Attribute Name specifies the name of the SAML attribute that determines team membership
     */
    attrGroups?: pulumi.Input<string>;
    /**
     * Specifies the role for site admin access. Overrides the "Site Admin Role" method
     */
    attrSiteAdmin?: pulumi.Input<string>;
    /**
     * Username Attribute Name specifies the name of the SAML attribute that determines the user's username
     */
    attrUsername?: pulumi.Input<string>;
    /**
     * Ensure that <samlp:AuthnRequest> messages are signed
     */
    authnRequestsSigned?: pulumi.Input<boolean>;
    /**
     * The certificate used for request and assertion signing
     */
    certificate?: pulumi.Input<string>;
    /**
     * When sign-on fails and this is enabled, the SAMLResponse XML will be displayed on the login page
     */
    debug?: pulumi.Input<boolean>;
    /**
     * Whether or not SAML single sign-on is enabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Identity Provider Certificate specifies the PEM encoded X.509 Certificate as provided by the IdP configuration
     */
    idpCert?: pulumi.Input<string>;
    /**
     * Metadata (Audience) URL
     */
    metadataUrl?: pulumi.Input<string>;
    oldIdpCert?: pulumi.Input<string>;
    /**
     * The private key used for request and assertion signing
     */
    privateKey?: pulumi.Input<string>;
    /**
     * Signature Digest Method. Must be either `SHA1` or `SHA256`. Defaults to `SHA256`
     */
    signatureDigestMethod?: pulumi.Input<string>;
    /**
     * Signature Signing Method. Must be either `SHA1` or `SHA256`. Defaults to `SHA256`
     */
    signatureSigningMethod?: pulumi.Input<string>;
    /**
     * Specifies the role for site admin access, provided in the list of roles sent in the Team Attribute Name attribute
     */
    siteAdminRole?: pulumi.Input<string>;
    /**
     * Single Log Out URL specifies the HTTPS endpoint on your IdP for single logout requests. This value is provided by the
     * IdP configuration
     */
    sloEndpointUrl?: pulumi.Input<string>;
    /**
     * Specifies the Single Sign On session timeout in seconds. Defaults to 14 days
     */
    ssoApiTokenSessionTimeout?: pulumi.Input<number>;
    /**
     * Single Sign On URL specifies the HTTPS endpoint on your IdP for single sign-on requests. This value is provided by the
     * IdP configuration
     */
    ssoEndpointUrl?: pulumi.Input<string>;
    teamManagementEnabled?: pulumi.Input<boolean>;
    /**
     * Ensure that <saml:Assertion> elements are signed
     */
    wantAssertionsSigned?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SamlSettings resource.
 */
export interface SamlSettingsArgs {
    /**
     * Team Attribute Name specifies the name of the SAML attribute that determines team membership
     */
    attrGroups?: pulumi.Input<string>;
    /**
     * Specifies the role for site admin access. Overrides the "Site Admin Role" method
     */
    attrSiteAdmin?: pulumi.Input<string>;
    /**
     * Username Attribute Name specifies the name of the SAML attribute that determines the user's username
     */
    attrUsername?: pulumi.Input<string>;
    /**
     * Ensure that <samlp:AuthnRequest> messages are signed
     */
    authnRequestsSigned?: pulumi.Input<boolean>;
    /**
     * The certificate used for request and assertion signing
     */
    certificate?: pulumi.Input<string>;
    /**
     * When sign-on fails and this is enabled, the SAMLResponse XML will be displayed on the login page
     */
    debug?: pulumi.Input<boolean>;
    /**
     * Identity Provider Certificate specifies the PEM encoded X.509 Certificate as provided by the IdP configuration
     */
    idpCert: pulumi.Input<string>;
    /**
     * The private key used for request and assertion signing
     */
    privateKey?: pulumi.Input<string>;
    /**
     * Signature Digest Method. Must be either `SHA1` or `SHA256`. Defaults to `SHA256`
     */
    signatureDigestMethod?: pulumi.Input<string>;
    /**
     * Signature Signing Method. Must be either `SHA1` or `SHA256`. Defaults to `SHA256`
     */
    signatureSigningMethod?: pulumi.Input<string>;
    /**
     * Specifies the role for site admin access, provided in the list of roles sent in the Team Attribute Name attribute
     */
    siteAdminRole?: pulumi.Input<string>;
    /**
     * Single Log Out URL specifies the HTTPS endpoint on your IdP for single logout requests. This value is provided by the
     * IdP configuration
     */
    sloEndpointUrl: pulumi.Input<string>;
    /**
     * Specifies the Single Sign On session timeout in seconds. Defaults to 14 days
     */
    ssoApiTokenSessionTimeout?: pulumi.Input<number>;
    /**
     * Single Sign On URL specifies the HTTPS endpoint on your IdP for single sign-on requests. This value is provided by the
     * IdP configuration
     */
    ssoEndpointUrl: pulumi.Input<string>;
    teamManagementEnabled?: pulumi.Input<boolean>;
    /**
     * Ensure that <saml:Assertion> elements are signed
     */
    wantAssertionsSigned?: pulumi.Input<boolean>;
}
