// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getWorkspace(args: GetWorkspaceArgs, opts?: pulumi.InvokeOptions): Promise<GetWorkspaceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tfe:index/getWorkspace:getWorkspace", {
        "id": args.id,
        "name": args.name,
        "organization": args.organization,
        "tagNames": args.tagNames,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getWorkspace.
 */
export interface GetWorkspaceArgs {
    id?: string;
    name: string;
    organization?: string;
    tagNames?: string[];
}

/**
 * A collection of values returned by getWorkspace.
 */
export interface GetWorkspaceResult {
    readonly allowDestroyPlan: boolean;
    readonly assessmentsEnabled: boolean;
    readonly autoApply: boolean;
    readonly autoApplyRunTrigger: boolean;
    readonly autoDestroyActivityDuration: string;
    readonly autoDestroyAt: string;
    readonly description: string;
    readonly executionMode: string;
    readonly fileTriggersEnabled: boolean;
    readonly globalRemoteState: boolean;
    readonly htmlUrl: string;
    readonly id: string;
    readonly name: string;
    readonly operations: boolean;
    readonly organization?: string;
    readonly policyCheckFailures: number;
    readonly projectId: string;
    readonly queueAllRuns: boolean;
    readonly remoteStateConsumerIds: string[];
    readonly resourceCount: number;
    readonly runFailures: number;
    readonly runsCount: number;
    readonly sourceName: string;
    readonly sourceUrl: string;
    readonly speculativeEnabled: boolean;
    readonly sshKeyId: string;
    readonly structuredRunOutputEnabled: boolean;
    readonly tagNames: string[];
    readonly terraformVersion: string;
    readonly triggerPatterns: string[];
    readonly triggerPrefixes: string[];
    readonly vcsRepos: outputs.GetWorkspaceVcsRepo[];
    readonly workingDirectory: string;
}
export function getWorkspaceOutput(args: GetWorkspaceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetWorkspaceResult> {
    return pulumi.output(args).apply((a: any) => getWorkspace(a, opts))
}

/**
 * A collection of arguments for invoking getWorkspace.
 */
export interface GetWorkspaceOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    organization?: pulumi.Input<string>;
    tagNames?: pulumi.Input<pulumi.Input<string>[]>;
}
