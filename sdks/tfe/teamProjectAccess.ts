// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class TeamProjectAccess extends pulumi.CustomResource {
    /**
     * Get an existing TeamProjectAccess resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TeamProjectAccessState, opts?: pulumi.CustomResourceOptions): TeamProjectAccess {
        return new TeamProjectAccess(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tfe:index/teamProjectAccess:TeamProjectAccess';

    /**
     * Returns true if the given object is an instance of TeamProjectAccess.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TeamProjectAccess {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TeamProjectAccess.__pulumiType;
    }

    public readonly access!: pulumi.Output<string>;
    public readonly projectAccesses!: pulumi.Output<outputs.TeamProjectAccessProjectAccess[] | undefined>;
    public readonly projectId!: pulumi.Output<string>;
    public readonly teamId!: pulumi.Output<string>;
    public readonly workspaceAccesses!: pulumi.Output<outputs.TeamProjectAccessWorkspaceAccess[] | undefined>;

    /**
     * Create a TeamProjectAccess resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TeamProjectAccessArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TeamProjectAccessArgs | TeamProjectAccessState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TeamProjectAccessState | undefined;
            resourceInputs["access"] = state ? state.access : undefined;
            resourceInputs["projectAccesses"] = state ? state.projectAccesses : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
            resourceInputs["workspaceAccesses"] = state ? state.workspaceAccesses : undefined;
        } else {
            const args = argsOrState as TeamProjectAccessArgs | undefined;
            if ((!args || args.access === undefined) && !opts.urn) {
                throw new Error("Missing required property 'access'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.teamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'teamId'");
            }
            resourceInputs["access"] = args ? args.access : undefined;
            resourceInputs["projectAccesses"] = args ? args.projectAccesses : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["workspaceAccesses"] = args ? args.workspaceAccesses : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TeamProjectAccess.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TeamProjectAccess resources.
 */
export interface TeamProjectAccessState {
    access?: pulumi.Input<string>;
    projectAccesses?: pulumi.Input<pulumi.Input<inputs.TeamProjectAccessProjectAccess>[]>;
    projectId?: pulumi.Input<string>;
    teamId?: pulumi.Input<string>;
    workspaceAccesses?: pulumi.Input<pulumi.Input<inputs.TeamProjectAccessWorkspaceAccess>[]>;
}

/**
 * The set of arguments for constructing a TeamProjectAccess resource.
 */
export interface TeamProjectAccessArgs {
    access: pulumi.Input<string>;
    projectAccesses?: pulumi.Input<pulumi.Input<inputs.TeamProjectAccessProjectAccess>[]>;
    projectId: pulumi.Input<string>;
    teamId: pulumi.Input<string>;
    workspaceAccesses?: pulumi.Input<pulumi.Input<inputs.TeamProjectAccessWorkspaceAccess>[]>;
}
