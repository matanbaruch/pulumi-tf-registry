// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DataRetentionPolicy extends pulumi.CustomResource {
    /**
     * Get an existing DataRetentionPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataRetentionPolicyState, opts?: pulumi.CustomResourceOptions): DataRetentionPolicy {
        return new DataRetentionPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tfe:index/dataRetentionPolicy:DataRetentionPolicy';

    /**
     * Returns true if the given object is an instance of DataRetentionPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataRetentionPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataRetentionPolicy.__pulumiType;
    }

    /**
     * Sets the maximum number of days, months, years data is allowed to exist before it is scheduled for deletion. Cannot be
     * configured if the dont_delete attribute is also configured.
     */
    public readonly deleteOlderThan!: pulumi.Output<outputs.DataRetentionPolicyDeleteOlderThan | undefined>;
    public readonly dontDelete!: pulumi.Output<outputs.DataRetentionPolicyDontDelete | undefined>;
    /**
     * Name of the organization. If omitted, organization must be defined in the provider config.
     */
    public readonly organization!: pulumi.Output<string>;
    /**
     * ID of the workspace that the data retention policy should apply to. If omitted, the data retention policy will apply to
     * the entire organization.
     */
    public readonly workspaceId!: pulumi.Output<string | undefined>;

    /**
     * Create a DataRetentionPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DataRetentionPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataRetentionPolicyArgs | DataRetentionPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataRetentionPolicyState | undefined;
            resourceInputs["deleteOlderThan"] = state ? state.deleteOlderThan : undefined;
            resourceInputs["dontDelete"] = state ? state.dontDelete : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        } else {
            const args = argsOrState as DataRetentionPolicyArgs | undefined;
            resourceInputs["deleteOlderThan"] = args ? args.deleteOlderThan : undefined;
            resourceInputs["dontDelete"] = args ? args.dontDelete : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["workspaceId"] = args ? args.workspaceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataRetentionPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DataRetentionPolicy resources.
 */
export interface DataRetentionPolicyState {
    /**
     * Sets the maximum number of days, months, years data is allowed to exist before it is scheduled for deletion. Cannot be
     * configured if the dont_delete attribute is also configured.
     */
    deleteOlderThan?: pulumi.Input<inputs.DataRetentionPolicyDeleteOlderThan>;
    dontDelete?: pulumi.Input<inputs.DataRetentionPolicyDontDelete>;
    /**
     * Name of the organization. If omitted, organization must be defined in the provider config.
     */
    organization?: pulumi.Input<string>;
    /**
     * ID of the workspace that the data retention policy should apply to. If omitted, the data retention policy will apply to
     * the entire organization.
     */
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DataRetentionPolicy resource.
 */
export interface DataRetentionPolicyArgs {
    /**
     * Sets the maximum number of days, months, years data is allowed to exist before it is scheduled for deletion. Cannot be
     * configured if the dont_delete attribute is also configured.
     */
    deleteOlderThan?: pulumi.Input<inputs.DataRetentionPolicyDeleteOlderThan>;
    dontDelete?: pulumi.Input<inputs.DataRetentionPolicyDontDelete>;
    /**
     * Name of the organization. If omitted, organization must be defined in the provider config.
     */
    organization?: pulumi.Input<string>;
    /**
     * ID of the workspace that the data retention policy should apply to. If omitted, the data retention policy will apply to
     * the entire organization.
     */
    workspaceId?: pulumi.Input<string>;
}
