// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AdminOrganizationSettingsArgs, AdminOrganizationSettingsState } from "./adminOrganizationSettings";
export type AdminOrganizationSettings = import("./adminOrganizationSettings").AdminOrganizationSettings;
export const AdminOrganizationSettings: typeof import("./adminOrganizationSettings").AdminOrganizationSettings = null as any;
utilities.lazyLoad(exports, ["AdminOrganizationSettings"], () => require("./adminOrganizationSettings"));

export { AgentPoolArgs, AgentPoolState } from "./agentPool";
export type AgentPool = import("./agentPool").AgentPool;
export const AgentPool: typeof import("./agentPool").AgentPool = null as any;
utilities.lazyLoad(exports, ["AgentPool"], () => require("./agentPool"));

export { AgentPoolAllowedWorkspacesArgs, AgentPoolAllowedWorkspacesState } from "./agentPoolAllowedWorkspaces";
export type AgentPoolAllowedWorkspaces = import("./agentPoolAllowedWorkspaces").AgentPoolAllowedWorkspaces;
export const AgentPoolAllowedWorkspaces: typeof import("./agentPoolAllowedWorkspaces").AgentPoolAllowedWorkspaces = null as any;
utilities.lazyLoad(exports, ["AgentPoolAllowedWorkspaces"], () => require("./agentPoolAllowedWorkspaces"));

export { AgentTokenArgs, AgentTokenState } from "./agentToken";
export type AgentToken = import("./agentToken").AgentToken;
export const AgentToken: typeof import("./agentToken").AgentToken = null as any;
utilities.lazyLoad(exports, ["AgentToken"], () => require("./agentToken"));

export { DataRetentionPolicyArgs, DataRetentionPolicyState } from "./dataRetentionPolicy";
export type DataRetentionPolicy = import("./dataRetentionPolicy").DataRetentionPolicy;
export const DataRetentionPolicy: typeof import("./dataRetentionPolicy").DataRetentionPolicy = null as any;
utilities.lazyLoad(exports, ["DataRetentionPolicy"], () => require("./dataRetentionPolicy"));

export { GetAgentPoolArgs, GetAgentPoolResult, GetAgentPoolOutputArgs } from "./getAgentPool";
export const getAgentPool: typeof import("./getAgentPool").getAgentPool = null as any;
export const getAgentPoolOutput: typeof import("./getAgentPool").getAgentPoolOutput = null as any;
utilities.lazyLoad(exports, ["getAgentPool","getAgentPoolOutput"], () => require("./getAgentPool"));

export { GetGithubAppInstallationArgs, GetGithubAppInstallationResult, GetGithubAppInstallationOutputArgs } from "./getGithubAppInstallation";
export const getGithubAppInstallation: typeof import("./getGithubAppInstallation").getGithubAppInstallation = null as any;
export const getGithubAppInstallationOutput: typeof import("./getGithubAppInstallation").getGithubAppInstallationOutput = null as any;
utilities.lazyLoad(exports, ["getGithubAppInstallation","getGithubAppInstallationOutput"], () => require("./getGithubAppInstallation"));

export { GetIpRangesArgs, GetIpRangesResult, GetIpRangesOutputArgs } from "./getIpRanges";
export const getIpRanges: typeof import("./getIpRanges").getIpRanges = null as any;
export const getIpRangesOutput: typeof import("./getIpRanges").getIpRangesOutput = null as any;
utilities.lazyLoad(exports, ["getIpRanges","getIpRangesOutput"], () => require("./getIpRanges"));

export { GetNoCodeModuleArgs, GetNoCodeModuleResult, GetNoCodeModuleOutputArgs } from "./getNoCodeModule";
export const getNoCodeModule: typeof import("./getNoCodeModule").getNoCodeModule = null as any;
export const getNoCodeModuleOutput: typeof import("./getNoCodeModule").getNoCodeModuleOutput = null as any;
utilities.lazyLoad(exports, ["getNoCodeModule","getNoCodeModuleOutput"], () => require("./getNoCodeModule"));

export { GetOauthClientArgs, GetOauthClientResult, GetOauthClientOutputArgs } from "./getOauthClient";
export const getOauthClient: typeof import("./getOauthClient").getOauthClient = null as any;
export const getOauthClientOutput: typeof import("./getOauthClient").getOauthClientOutput = null as any;
utilities.lazyLoad(exports, ["getOauthClient","getOauthClientOutput"], () => require("./getOauthClient"));

export { GetOrganizationArgs, GetOrganizationResult, GetOrganizationOutputArgs } from "./getOrganization";
export const getOrganization: typeof import("./getOrganization").getOrganization = null as any;
export const getOrganizationOutput: typeof import("./getOrganization").getOrganizationOutput = null as any;
utilities.lazyLoad(exports, ["getOrganization","getOrganizationOutput"], () => require("./getOrganization"));

export { GetOrganizationMembersArgs, GetOrganizationMembersResult, GetOrganizationMembersOutputArgs } from "./getOrganizationMembers";
export const getOrganizationMembers: typeof import("./getOrganizationMembers").getOrganizationMembers = null as any;
export const getOrganizationMembersOutput: typeof import("./getOrganizationMembers").getOrganizationMembersOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationMembers","getOrganizationMembersOutput"], () => require("./getOrganizationMembers"));

export { GetOrganizationMembershipArgs, GetOrganizationMembershipResult, GetOrganizationMembershipOutputArgs } from "./getOrganizationMembership";
export const getOrganizationMembership: typeof import("./getOrganizationMembership").getOrganizationMembership = null as any;
export const getOrganizationMembershipOutput: typeof import("./getOrganizationMembership").getOrganizationMembershipOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationMembership","getOrganizationMembershipOutput"], () => require("./getOrganizationMembership"));

export { GetOrganizationRunTaskArgs, GetOrganizationRunTaskResult, GetOrganizationRunTaskOutputArgs } from "./getOrganizationRunTask";
export const getOrganizationRunTask: typeof import("./getOrganizationRunTask").getOrganizationRunTask = null as any;
export const getOrganizationRunTaskOutput: typeof import("./getOrganizationRunTask").getOrganizationRunTaskOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationRunTask","getOrganizationRunTaskOutput"], () => require("./getOrganizationRunTask"));

export { GetOrganizationRunTaskGlobalSettingsArgs, GetOrganizationRunTaskGlobalSettingsResult, GetOrganizationRunTaskGlobalSettingsOutputArgs } from "./getOrganizationRunTaskGlobalSettings";
export const getOrganizationRunTaskGlobalSettings: typeof import("./getOrganizationRunTaskGlobalSettings").getOrganizationRunTaskGlobalSettings = null as any;
export const getOrganizationRunTaskGlobalSettingsOutput: typeof import("./getOrganizationRunTaskGlobalSettings").getOrganizationRunTaskGlobalSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationRunTaskGlobalSettings","getOrganizationRunTaskGlobalSettingsOutput"], () => require("./getOrganizationRunTaskGlobalSettings"));

export { GetOrganizationTagsArgs, GetOrganizationTagsResult, GetOrganizationTagsOutputArgs } from "./getOrganizationTags";
export const getOrganizationTags: typeof import("./getOrganizationTags").getOrganizationTags = null as any;
export const getOrganizationTagsOutput: typeof import("./getOrganizationTags").getOrganizationTagsOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationTags","getOrganizationTagsOutput"], () => require("./getOrganizationTags"));

export { GetOrganizationsArgs, GetOrganizationsResult, GetOrganizationsOutputArgs } from "./getOrganizations";
export const getOrganizations: typeof import("./getOrganizations").getOrganizations = null as any;
export const getOrganizationsOutput: typeof import("./getOrganizations").getOrganizationsOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizations","getOrganizationsOutput"], () => require("./getOrganizations"));

export { GetOutputsArgs, GetOutputsResult, GetOutputsOutputArgs } from "./getOutputs";
export const getOutputs: typeof import("./getOutputs").getOutputs = null as any;
export const getOutputsOutput: typeof import("./getOutputs").getOutputsOutput = null as any;
utilities.lazyLoad(exports, ["getOutputs","getOutputsOutput"], () => require("./getOutputs"));

export { GetPolicySetArgs, GetPolicySetResult, GetPolicySetOutputArgs } from "./getPolicySet";
export const getPolicySet: typeof import("./getPolicySet").getPolicySet = null as any;
export const getPolicySetOutput: typeof import("./getPolicySet").getPolicySetOutput = null as any;
utilities.lazyLoad(exports, ["getPolicySet","getPolicySetOutput"], () => require("./getPolicySet"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetRegistryGpgKeyArgs, GetRegistryGpgKeyResult, GetRegistryGpgKeyOutputArgs } from "./getRegistryGpgKey";
export const getRegistryGpgKey: typeof import("./getRegistryGpgKey").getRegistryGpgKey = null as any;
export const getRegistryGpgKeyOutput: typeof import("./getRegistryGpgKey").getRegistryGpgKeyOutput = null as any;
utilities.lazyLoad(exports, ["getRegistryGpgKey","getRegistryGpgKeyOutput"], () => require("./getRegistryGpgKey"));

export { GetRegistryGpgKeysArgs, GetRegistryGpgKeysResult, GetRegistryGpgKeysOutputArgs } from "./getRegistryGpgKeys";
export const getRegistryGpgKeys: typeof import("./getRegistryGpgKeys").getRegistryGpgKeys = null as any;
export const getRegistryGpgKeysOutput: typeof import("./getRegistryGpgKeys").getRegistryGpgKeysOutput = null as any;
utilities.lazyLoad(exports, ["getRegistryGpgKeys","getRegistryGpgKeysOutput"], () => require("./getRegistryGpgKeys"));

export { GetRegistryProviderArgs, GetRegistryProviderResult, GetRegistryProviderOutputArgs } from "./getRegistryProvider";
export const getRegistryProvider: typeof import("./getRegistryProvider").getRegistryProvider = null as any;
export const getRegistryProviderOutput: typeof import("./getRegistryProvider").getRegistryProviderOutput = null as any;
utilities.lazyLoad(exports, ["getRegistryProvider","getRegistryProviderOutput"], () => require("./getRegistryProvider"));

export { GetRegistryProvidersArgs, GetRegistryProvidersResult, GetRegistryProvidersOutputArgs } from "./getRegistryProviders";
export const getRegistryProviders: typeof import("./getRegistryProviders").getRegistryProviders = null as any;
export const getRegistryProvidersOutput: typeof import("./getRegistryProviders").getRegistryProvidersOutput = null as any;
utilities.lazyLoad(exports, ["getRegistryProviders","getRegistryProvidersOutput"], () => require("./getRegistryProviders"));

export { GetSamlSettingsResult } from "./getSamlSettings";
export const getSamlSettings: typeof import("./getSamlSettings").getSamlSettings = null as any;
export const getSamlSettingsOutput: typeof import("./getSamlSettings").getSamlSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getSamlSettings","getSamlSettingsOutput"], () => require("./getSamlSettings"));

export { GetSlugArgs, GetSlugResult, GetSlugOutputArgs } from "./getSlug";
export const getSlug: typeof import("./getSlug").getSlug = null as any;
export const getSlugOutput: typeof import("./getSlug").getSlugOutput = null as any;
utilities.lazyLoad(exports, ["getSlug","getSlugOutput"], () => require("./getSlug"));

export { GetSshKeyArgs, GetSshKeyResult, GetSshKeyOutputArgs } from "./getSshKey";
export const getSshKey: typeof import("./getSshKey").getSshKey = null as any;
export const getSshKeyOutput: typeof import("./getSshKey").getSshKeyOutput = null as any;
utilities.lazyLoad(exports, ["getSshKey","getSshKeyOutput"], () => require("./getSshKey"));

export { GetTeamArgs, GetTeamResult, GetTeamOutputArgs } from "./getTeam";
export const getTeam: typeof import("./getTeam").getTeam = null as any;
export const getTeamOutput: typeof import("./getTeam").getTeamOutput = null as any;
utilities.lazyLoad(exports, ["getTeam","getTeamOutput"], () => require("./getTeam"));

export { GetTeamAccessArgs, GetTeamAccessResult, GetTeamAccessOutputArgs } from "./getTeamAccess";
export const getTeamAccess: typeof import("./getTeamAccess").getTeamAccess = null as any;
export const getTeamAccessOutput: typeof import("./getTeamAccess").getTeamAccessOutput = null as any;
utilities.lazyLoad(exports, ["getTeamAccess","getTeamAccessOutput"], () => require("./getTeamAccess"));

export { GetTeamProjectAccessArgs, GetTeamProjectAccessResult, GetTeamProjectAccessOutputArgs } from "./getTeamProjectAccess";
export const getTeamProjectAccess: typeof import("./getTeamProjectAccess").getTeamProjectAccess = null as any;
export const getTeamProjectAccessOutput: typeof import("./getTeamProjectAccess").getTeamProjectAccessOutput = null as any;
utilities.lazyLoad(exports, ["getTeamProjectAccess","getTeamProjectAccessOutput"], () => require("./getTeamProjectAccess"));

export { GetTeamsArgs, GetTeamsResult, GetTeamsOutputArgs } from "./getTeams";
export const getTeams: typeof import("./getTeams").getTeams = null as any;
export const getTeamsOutput: typeof import("./getTeams").getTeamsOutput = null as any;
utilities.lazyLoad(exports, ["getTeams","getTeamsOutput"], () => require("./getTeams"));

export { GetVariableSetArgs, GetVariableSetResult, GetVariableSetOutputArgs } from "./getVariableSet";
export const getVariableSet: typeof import("./getVariableSet").getVariableSet = null as any;
export const getVariableSetOutput: typeof import("./getVariableSet").getVariableSetOutput = null as any;
utilities.lazyLoad(exports, ["getVariableSet","getVariableSetOutput"], () => require("./getVariableSet"));

export { GetVariablesArgs, GetVariablesResult, GetVariablesOutputArgs } from "./getVariables";
export const getVariables: typeof import("./getVariables").getVariables = null as any;
export const getVariablesOutput: typeof import("./getVariables").getVariablesOutput = null as any;
utilities.lazyLoad(exports, ["getVariables","getVariablesOutput"], () => require("./getVariables"));

export { GetWorkspaceArgs, GetWorkspaceResult, GetWorkspaceOutputArgs } from "./getWorkspace";
export const getWorkspace: typeof import("./getWorkspace").getWorkspace = null as any;
export const getWorkspaceOutput: typeof import("./getWorkspace").getWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspace","getWorkspaceOutput"], () => require("./getWorkspace"));

export { GetWorkspaceIdsArgs, GetWorkspaceIdsResult, GetWorkspaceIdsOutputArgs } from "./getWorkspaceIds";
export const getWorkspaceIds: typeof import("./getWorkspaceIds").getWorkspaceIds = null as any;
export const getWorkspaceIdsOutput: typeof import("./getWorkspaceIds").getWorkspaceIdsOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceIds","getWorkspaceIdsOutput"], () => require("./getWorkspaceIds"));

export { GetWorkspaceRunTaskArgs, GetWorkspaceRunTaskResult, GetWorkspaceRunTaskOutputArgs } from "./getWorkspaceRunTask";
export const getWorkspaceRunTask: typeof import("./getWorkspaceRunTask").getWorkspaceRunTask = null as any;
export const getWorkspaceRunTaskOutput: typeof import("./getWorkspaceRunTask").getWorkspaceRunTaskOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceRunTask","getWorkspaceRunTaskOutput"], () => require("./getWorkspaceRunTask"));

export { NoCodeModuleArgs, NoCodeModuleState } from "./noCodeModule";
export type NoCodeModule = import("./noCodeModule").NoCodeModule;
export const NoCodeModule: typeof import("./noCodeModule").NoCodeModule = null as any;
utilities.lazyLoad(exports, ["NoCodeModule"], () => require("./noCodeModule"));

export { NotificationConfigurationArgs, NotificationConfigurationState } from "./notificationConfiguration";
export type NotificationConfiguration = import("./notificationConfiguration").NotificationConfiguration;
export const NotificationConfiguration: typeof import("./notificationConfiguration").NotificationConfiguration = null as any;
utilities.lazyLoad(exports, ["NotificationConfiguration"], () => require("./notificationConfiguration"));

export { OauthClientArgs, OauthClientState } from "./oauthClient";
export type OauthClient = import("./oauthClient").OauthClient;
export const OauthClient: typeof import("./oauthClient").OauthClient = null as any;
utilities.lazyLoad(exports, ["OauthClient"], () => require("./oauthClient"));

export { OpaVersionArgs, OpaVersionState } from "./opaVersion";
export type OpaVersion = import("./opaVersion").OpaVersion;
export const OpaVersion: typeof import("./opaVersion").OpaVersion = null as any;
utilities.lazyLoad(exports, ["OpaVersion"], () => require("./opaVersion"));

export { OrganizationArgs, OrganizationState } from "./organization";
export type Organization = import("./organization").Organization;
export const Organization: typeof import("./organization").Organization = null as any;
utilities.lazyLoad(exports, ["Organization"], () => require("./organization"));

export { OrganizationDefaultSettingsArgs, OrganizationDefaultSettingsState } from "./organizationDefaultSettings";
export type OrganizationDefaultSettings = import("./organizationDefaultSettings").OrganizationDefaultSettings;
export const OrganizationDefaultSettings: typeof import("./organizationDefaultSettings").OrganizationDefaultSettings = null as any;
utilities.lazyLoad(exports, ["OrganizationDefaultSettings"], () => require("./organizationDefaultSettings"));

export { OrganizationMembershipArgs, OrganizationMembershipState } from "./organizationMembership";
export type OrganizationMembership = import("./organizationMembership").OrganizationMembership;
export const OrganizationMembership: typeof import("./organizationMembership").OrganizationMembership = null as any;
utilities.lazyLoad(exports, ["OrganizationMembership"], () => require("./organizationMembership"));

export { OrganizationModuleSharingArgs, OrganizationModuleSharingState } from "./organizationModuleSharing";
export type OrganizationModuleSharing = import("./organizationModuleSharing").OrganizationModuleSharing;
export const OrganizationModuleSharing: typeof import("./organizationModuleSharing").OrganizationModuleSharing = null as any;
utilities.lazyLoad(exports, ["OrganizationModuleSharing"], () => require("./organizationModuleSharing"));

export { OrganizationRunTaskArgs, OrganizationRunTaskState } from "./organizationRunTask";
export type OrganizationRunTask = import("./organizationRunTask").OrganizationRunTask;
export const OrganizationRunTask: typeof import("./organizationRunTask").OrganizationRunTask = null as any;
utilities.lazyLoad(exports, ["OrganizationRunTask"], () => require("./organizationRunTask"));

export { OrganizationRunTaskGlobalSettingsArgs, OrganizationRunTaskGlobalSettingsState } from "./organizationRunTaskGlobalSettings";
export type OrganizationRunTaskGlobalSettings = import("./organizationRunTaskGlobalSettings").OrganizationRunTaskGlobalSettings;
export const OrganizationRunTaskGlobalSettings: typeof import("./organizationRunTaskGlobalSettings").OrganizationRunTaskGlobalSettings = null as any;
utilities.lazyLoad(exports, ["OrganizationRunTaskGlobalSettings"], () => require("./organizationRunTaskGlobalSettings"));

export { OrganizationTokenArgs, OrganizationTokenState } from "./organizationToken";
export type OrganizationToken = import("./organizationToken").OrganizationToken;
export const OrganizationToken: typeof import("./organizationToken").OrganizationToken = null as any;
utilities.lazyLoad(exports, ["OrganizationToken"], () => require("./organizationToken"));

export { PolicyArgs, PolicyState } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));

export { PolicySetArgs, PolicySetState } from "./policySet";
export type PolicySet = import("./policySet").PolicySet;
export const PolicySet: typeof import("./policySet").PolicySet = null as any;
utilities.lazyLoad(exports, ["PolicySet"], () => require("./policySet"));

export { PolicySetParameterArgs, PolicySetParameterState } from "./policySetParameter";
export type PolicySetParameter = import("./policySetParameter").PolicySetParameter;
export const PolicySetParameter: typeof import("./policySetParameter").PolicySetParameter = null as any;
utilities.lazyLoad(exports, ["PolicySetParameter"], () => require("./policySetParameter"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProjectOauthClientArgs, ProjectOauthClientState } from "./projectOauthClient";
export type ProjectOauthClient = import("./projectOauthClient").ProjectOauthClient;
export const ProjectOauthClient: typeof import("./projectOauthClient").ProjectOauthClient = null as any;
utilities.lazyLoad(exports, ["ProjectOauthClient"], () => require("./projectOauthClient"));

export { ProjectPolicySetArgs, ProjectPolicySetState } from "./projectPolicySet";
export type ProjectPolicySet = import("./projectPolicySet").ProjectPolicySet;
export const ProjectPolicySet: typeof import("./projectPolicySet").ProjectPolicySet = null as any;
utilities.lazyLoad(exports, ["ProjectPolicySet"], () => require("./projectPolicySet"));

export { ProjectVariableSetArgs, ProjectVariableSetState } from "./projectVariableSet";
export type ProjectVariableSet = import("./projectVariableSet").ProjectVariableSet;
export const ProjectVariableSet: typeof import("./projectVariableSet").ProjectVariableSet = null as any;
utilities.lazyLoad(exports, ["ProjectVariableSet"], () => require("./projectVariableSet"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RegistryGpgKeyArgs, RegistryGpgKeyState } from "./registryGpgKey";
export type RegistryGpgKey = import("./registryGpgKey").RegistryGpgKey;
export const RegistryGpgKey: typeof import("./registryGpgKey").RegistryGpgKey = null as any;
utilities.lazyLoad(exports, ["RegistryGpgKey"], () => require("./registryGpgKey"));

export { RegistryModuleArgs, RegistryModuleState } from "./registryModule";
export type RegistryModule = import("./registryModule").RegistryModule;
export const RegistryModule: typeof import("./registryModule").RegistryModule = null as any;
utilities.lazyLoad(exports, ["RegistryModule"], () => require("./registryModule"));

export { RegistryProviderArgs, RegistryProviderState } from "./registryProvider";
export type RegistryProvider = import("./registryProvider").RegistryProvider;
export const RegistryProvider: typeof import("./registryProvider").RegistryProvider = null as any;
utilities.lazyLoad(exports, ["RegistryProvider"], () => require("./registryProvider"));

export { RunTriggerArgs, RunTriggerState } from "./runTrigger";
export type RunTrigger = import("./runTrigger").RunTrigger;
export const RunTrigger: typeof import("./runTrigger").RunTrigger = null as any;
utilities.lazyLoad(exports, ["RunTrigger"], () => require("./runTrigger"));

export { SamlSettingsArgs, SamlSettingsState } from "./samlSettings";
export type SamlSettings = import("./samlSettings").SamlSettings;
export const SamlSettings: typeof import("./samlSettings").SamlSettings = null as any;
utilities.lazyLoad(exports, ["SamlSettings"], () => require("./samlSettings"));

export { SentinelPolicyArgs, SentinelPolicyState } from "./sentinelPolicy";
export type SentinelPolicy = import("./sentinelPolicy").SentinelPolicy;
export const SentinelPolicy: typeof import("./sentinelPolicy").SentinelPolicy = null as any;
utilities.lazyLoad(exports, ["SentinelPolicy"], () => require("./sentinelPolicy"));

export { SentinelVersionArgs, SentinelVersionState } from "./sentinelVersion";
export type SentinelVersion = import("./sentinelVersion").SentinelVersion;
export const SentinelVersion: typeof import("./sentinelVersion").SentinelVersion = null as any;
utilities.lazyLoad(exports, ["SentinelVersion"], () => require("./sentinelVersion"));

export { SshKeyArgs, SshKeyState } from "./sshKey";
export type SshKey = import("./sshKey").SshKey;
export const SshKey: typeof import("./sshKey").SshKey = null as any;
utilities.lazyLoad(exports, ["SshKey"], () => require("./sshKey"));

export { StackArgs, StackState } from "./stack";
export type Stack = import("./stack").Stack;
export const Stack: typeof import("./stack").Stack = null as any;
utilities.lazyLoad(exports, ["Stack"], () => require("./stack"));

export { TeamArgs, TeamState } from "./team";
export type Team = import("./team").Team;
export const Team: typeof import("./team").Team = null as any;
utilities.lazyLoad(exports, ["Team"], () => require("./team"));

export { TeamAccessArgs, TeamAccessState } from "./teamAccess";
export type TeamAccess = import("./teamAccess").TeamAccess;
export const TeamAccess: typeof import("./teamAccess").TeamAccess = null as any;
utilities.lazyLoad(exports, ["TeamAccess"], () => require("./teamAccess"));

export { TeamMemberArgs, TeamMemberState } from "./teamMember";
export type TeamMember = import("./teamMember").TeamMember;
export const TeamMember: typeof import("./teamMember").TeamMember = null as any;
utilities.lazyLoad(exports, ["TeamMember"], () => require("./teamMember"));

export { TeamMembersArgs, TeamMembersState } from "./teamMembers";
export type TeamMembers = import("./teamMembers").TeamMembers;
export const TeamMembers: typeof import("./teamMembers").TeamMembers = null as any;
utilities.lazyLoad(exports, ["TeamMembers"], () => require("./teamMembers"));

export { TeamOrganizationMemberArgs, TeamOrganizationMemberState } from "./teamOrganizationMember";
export type TeamOrganizationMember = import("./teamOrganizationMember").TeamOrganizationMember;
export const TeamOrganizationMember: typeof import("./teamOrganizationMember").TeamOrganizationMember = null as any;
utilities.lazyLoad(exports, ["TeamOrganizationMember"], () => require("./teamOrganizationMember"));

export { TeamOrganizationMembersArgs, TeamOrganizationMembersState } from "./teamOrganizationMembers";
export type TeamOrganizationMembers = import("./teamOrganizationMembers").TeamOrganizationMembers;
export const TeamOrganizationMembers: typeof import("./teamOrganizationMembers").TeamOrganizationMembers = null as any;
utilities.lazyLoad(exports, ["TeamOrganizationMembers"], () => require("./teamOrganizationMembers"));

export { TeamProjectAccessArgs, TeamProjectAccessState } from "./teamProjectAccess";
export type TeamProjectAccess = import("./teamProjectAccess").TeamProjectAccess;
export const TeamProjectAccess: typeof import("./teamProjectAccess").TeamProjectAccess = null as any;
utilities.lazyLoad(exports, ["TeamProjectAccess"], () => require("./teamProjectAccess"));

export { TeamTokenArgs, TeamTokenState } from "./teamToken";
export type TeamToken = import("./teamToken").TeamToken;
export const TeamToken: typeof import("./teamToken").TeamToken = null as any;
utilities.lazyLoad(exports, ["TeamToken"], () => require("./teamToken"));

export { TerraformVersionArgs, TerraformVersionState } from "./terraformVersion";
export type TerraformVersion = import("./terraformVersion").TerraformVersion;
export const TerraformVersion: typeof import("./terraformVersion").TerraformVersion = null as any;
utilities.lazyLoad(exports, ["TerraformVersion"], () => require("./terraformVersion"));

export { TestVariableArgs, TestVariableState } from "./testVariable";
export type TestVariable = import("./testVariable").TestVariable;
export const TestVariable: typeof import("./testVariable").TestVariable = null as any;
utilities.lazyLoad(exports, ["TestVariable"], () => require("./testVariable"));

export { VariableArgs, VariableState } from "./variable";
export type Variable = import("./variable").Variable;
export const Variable: typeof import("./variable").Variable = null as any;
utilities.lazyLoad(exports, ["Variable"], () => require("./variable"));

export { VariableSetArgs, VariableSetState } from "./variableSet";
export type VariableSet = import("./variableSet").VariableSet;
export const VariableSet: typeof import("./variableSet").VariableSet = null as any;
utilities.lazyLoad(exports, ["VariableSet"], () => require("./variableSet"));

export { WorkspaceArgs, WorkspaceState } from "./workspace";
export type Workspace = import("./workspace").Workspace;
export const Workspace: typeof import("./workspace").Workspace = null as any;
utilities.lazyLoad(exports, ["Workspace"], () => require("./workspace"));

export { WorkspacePolicySetArgs, WorkspacePolicySetState } from "./workspacePolicySet";
export type WorkspacePolicySet = import("./workspacePolicySet").WorkspacePolicySet;
export const WorkspacePolicySet: typeof import("./workspacePolicySet").WorkspacePolicySet = null as any;
utilities.lazyLoad(exports, ["WorkspacePolicySet"], () => require("./workspacePolicySet"));

export { WorkspacePolicySetExclusionArgs, WorkspacePolicySetExclusionState } from "./workspacePolicySetExclusion";
export type WorkspacePolicySetExclusion = import("./workspacePolicySetExclusion").WorkspacePolicySetExclusion;
export const WorkspacePolicySetExclusion: typeof import("./workspacePolicySetExclusion").WorkspacePolicySetExclusion = null as any;
utilities.lazyLoad(exports, ["WorkspacePolicySetExclusion"], () => require("./workspacePolicySetExclusion"));

export { WorkspaceRunArgs, WorkspaceRunState } from "./workspaceRun";
export type WorkspaceRun = import("./workspaceRun").WorkspaceRun;
export const WorkspaceRun: typeof import("./workspaceRun").WorkspaceRun = null as any;
utilities.lazyLoad(exports, ["WorkspaceRun"], () => require("./workspaceRun"));

export { WorkspaceRunTaskArgs, WorkspaceRunTaskState } from "./workspaceRunTask";
export type WorkspaceRunTask = import("./workspaceRunTask").WorkspaceRunTask;
export const WorkspaceRunTask: typeof import("./workspaceRunTask").WorkspaceRunTask = null as any;
utilities.lazyLoad(exports, ["WorkspaceRunTask"], () => require("./workspaceRunTask"));

export { WorkspaceSettingsArgs, WorkspaceSettingsState } from "./workspaceSettings";
export type WorkspaceSettings = import("./workspaceSettings").WorkspaceSettings;
export const WorkspaceSettings: typeof import("./workspaceSettings").WorkspaceSettings = null as any;
utilities.lazyLoad(exports, ["WorkspaceSettings"], () => require("./workspaceSettings"));

export { WorkspaceVariableSetArgs, WorkspaceVariableSetState } from "./workspaceVariableSet";
export type WorkspaceVariableSet = import("./workspaceVariableSet").WorkspaceVariableSet;
export const WorkspaceVariableSet: typeof import("./workspaceVariableSet").WorkspaceVariableSet = null as any;
utilities.lazyLoad(exports, ["WorkspaceVariableSet"], () => require("./workspaceVariableSet"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tfe:index/adminOrganizationSettings:AdminOrganizationSettings":
                return new AdminOrganizationSettings(name, <any>undefined, { urn })
            case "tfe:index/agentPool:AgentPool":
                return new AgentPool(name, <any>undefined, { urn })
            case "tfe:index/agentPoolAllowedWorkspaces:AgentPoolAllowedWorkspaces":
                return new AgentPoolAllowedWorkspaces(name, <any>undefined, { urn })
            case "tfe:index/agentToken:AgentToken":
                return new AgentToken(name, <any>undefined, { urn })
            case "tfe:index/dataRetentionPolicy:DataRetentionPolicy":
                return new DataRetentionPolicy(name, <any>undefined, { urn })
            case "tfe:index/noCodeModule:NoCodeModule":
                return new NoCodeModule(name, <any>undefined, { urn })
            case "tfe:index/notificationConfiguration:NotificationConfiguration":
                return new NotificationConfiguration(name, <any>undefined, { urn })
            case "tfe:index/oauthClient:OauthClient":
                return new OauthClient(name, <any>undefined, { urn })
            case "tfe:index/opaVersion:OpaVersion":
                return new OpaVersion(name, <any>undefined, { urn })
            case "tfe:index/organization:Organization":
                return new Organization(name, <any>undefined, { urn })
            case "tfe:index/organizationDefaultSettings:OrganizationDefaultSettings":
                return new OrganizationDefaultSettings(name, <any>undefined, { urn })
            case "tfe:index/organizationMembership:OrganizationMembership":
                return new OrganizationMembership(name, <any>undefined, { urn })
            case "tfe:index/organizationModuleSharing:OrganizationModuleSharing":
                return new OrganizationModuleSharing(name, <any>undefined, { urn })
            case "tfe:index/organizationRunTask:OrganizationRunTask":
                return new OrganizationRunTask(name, <any>undefined, { urn })
            case "tfe:index/organizationRunTaskGlobalSettings:OrganizationRunTaskGlobalSettings":
                return new OrganizationRunTaskGlobalSettings(name, <any>undefined, { urn })
            case "tfe:index/organizationToken:OrganizationToken":
                return new OrganizationToken(name, <any>undefined, { urn })
            case "tfe:index/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "tfe:index/policySet:PolicySet":
                return new PolicySet(name, <any>undefined, { urn })
            case "tfe:index/policySetParameter:PolicySetParameter":
                return new PolicySetParameter(name, <any>undefined, { urn })
            case "tfe:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "tfe:index/projectOauthClient:ProjectOauthClient":
                return new ProjectOauthClient(name, <any>undefined, { urn })
            case "tfe:index/projectPolicySet:ProjectPolicySet":
                return new ProjectPolicySet(name, <any>undefined, { urn })
            case "tfe:index/projectVariableSet:ProjectVariableSet":
                return new ProjectVariableSet(name, <any>undefined, { urn })
            case "tfe:index/registryGpgKey:RegistryGpgKey":
                return new RegistryGpgKey(name, <any>undefined, { urn })
            case "tfe:index/registryModule:RegistryModule":
                return new RegistryModule(name, <any>undefined, { urn })
            case "tfe:index/registryProvider:RegistryProvider":
                return new RegistryProvider(name, <any>undefined, { urn })
            case "tfe:index/runTrigger:RunTrigger":
                return new RunTrigger(name, <any>undefined, { urn })
            case "tfe:index/samlSettings:SamlSettings":
                return new SamlSettings(name, <any>undefined, { urn })
            case "tfe:index/sentinelPolicy:SentinelPolicy":
                return new SentinelPolicy(name, <any>undefined, { urn })
            case "tfe:index/sentinelVersion:SentinelVersion":
                return new SentinelVersion(name, <any>undefined, { urn })
            case "tfe:index/sshKey:SshKey":
                return new SshKey(name, <any>undefined, { urn })
            case "tfe:index/stack:Stack":
                return new Stack(name, <any>undefined, { urn })
            case "tfe:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "tfe:index/teamAccess:TeamAccess":
                return new TeamAccess(name, <any>undefined, { urn })
            case "tfe:index/teamMember:TeamMember":
                return new TeamMember(name, <any>undefined, { urn })
            case "tfe:index/teamMembers:TeamMembers":
                return new TeamMembers(name, <any>undefined, { urn })
            case "tfe:index/teamOrganizationMember:TeamOrganizationMember":
                return new TeamOrganizationMember(name, <any>undefined, { urn })
            case "tfe:index/teamOrganizationMembers:TeamOrganizationMembers":
                return new TeamOrganizationMembers(name, <any>undefined, { urn })
            case "tfe:index/teamProjectAccess:TeamProjectAccess":
                return new TeamProjectAccess(name, <any>undefined, { urn })
            case "tfe:index/teamToken:TeamToken":
                return new TeamToken(name, <any>undefined, { urn })
            case "tfe:index/terraformVersion:TerraformVersion":
                return new TerraformVersion(name, <any>undefined, { urn })
            case "tfe:index/testVariable:TestVariable":
                return new TestVariable(name, <any>undefined, { urn })
            case "tfe:index/variable:Variable":
                return new Variable(name, <any>undefined, { urn })
            case "tfe:index/variableSet:VariableSet":
                return new VariableSet(name, <any>undefined, { urn })
            case "tfe:index/workspace:Workspace":
                return new Workspace(name, <any>undefined, { urn })
            case "tfe:index/workspacePolicySet:WorkspacePolicySet":
                return new WorkspacePolicySet(name, <any>undefined, { urn })
            case "tfe:index/workspacePolicySetExclusion:WorkspacePolicySetExclusion":
                return new WorkspacePolicySetExclusion(name, <any>undefined, { urn })
            case "tfe:index/workspaceRun:WorkspaceRun":
                return new WorkspaceRun(name, <any>undefined, { urn })
            case "tfe:index/workspaceRunTask:WorkspaceRunTask":
                return new WorkspaceRunTask(name, <any>undefined, { urn })
            case "tfe:index/workspaceSettings:WorkspaceSettings":
                return new WorkspaceSettings(name, <any>undefined, { urn })
            case "tfe:index/workspaceVariableSet:WorkspaceVariableSet":
                return new WorkspaceVariableSet(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tfe", "index/adminOrganizationSettings", _module)
pulumi.runtime.registerResourceModule("tfe", "index/agentPool", _module)
pulumi.runtime.registerResourceModule("tfe", "index/agentPoolAllowedWorkspaces", _module)
pulumi.runtime.registerResourceModule("tfe", "index/agentToken", _module)
pulumi.runtime.registerResourceModule("tfe", "index/dataRetentionPolicy", _module)
pulumi.runtime.registerResourceModule("tfe", "index/noCodeModule", _module)
pulumi.runtime.registerResourceModule("tfe", "index/notificationConfiguration", _module)
pulumi.runtime.registerResourceModule("tfe", "index/oauthClient", _module)
pulumi.runtime.registerResourceModule("tfe", "index/opaVersion", _module)
pulumi.runtime.registerResourceModule("tfe", "index/organization", _module)
pulumi.runtime.registerResourceModule("tfe", "index/organizationDefaultSettings", _module)
pulumi.runtime.registerResourceModule("tfe", "index/organizationMembership", _module)
pulumi.runtime.registerResourceModule("tfe", "index/organizationModuleSharing", _module)
pulumi.runtime.registerResourceModule("tfe", "index/organizationRunTask", _module)
pulumi.runtime.registerResourceModule("tfe", "index/organizationRunTaskGlobalSettings", _module)
pulumi.runtime.registerResourceModule("tfe", "index/organizationToken", _module)
pulumi.runtime.registerResourceModule("tfe", "index/policy", _module)
pulumi.runtime.registerResourceModule("tfe", "index/policySet", _module)
pulumi.runtime.registerResourceModule("tfe", "index/policySetParameter", _module)
pulumi.runtime.registerResourceModule("tfe", "index/project", _module)
pulumi.runtime.registerResourceModule("tfe", "index/projectOauthClient", _module)
pulumi.runtime.registerResourceModule("tfe", "index/projectPolicySet", _module)
pulumi.runtime.registerResourceModule("tfe", "index/projectVariableSet", _module)
pulumi.runtime.registerResourceModule("tfe", "index/registryGpgKey", _module)
pulumi.runtime.registerResourceModule("tfe", "index/registryModule", _module)
pulumi.runtime.registerResourceModule("tfe", "index/registryProvider", _module)
pulumi.runtime.registerResourceModule("tfe", "index/runTrigger", _module)
pulumi.runtime.registerResourceModule("tfe", "index/samlSettings", _module)
pulumi.runtime.registerResourceModule("tfe", "index/sentinelPolicy", _module)
pulumi.runtime.registerResourceModule("tfe", "index/sentinelVersion", _module)
pulumi.runtime.registerResourceModule("tfe", "index/sshKey", _module)
pulumi.runtime.registerResourceModule("tfe", "index/stack", _module)
pulumi.runtime.registerResourceModule("tfe", "index/team", _module)
pulumi.runtime.registerResourceModule("tfe", "index/teamAccess", _module)
pulumi.runtime.registerResourceModule("tfe", "index/teamMember", _module)
pulumi.runtime.registerResourceModule("tfe", "index/teamMembers", _module)
pulumi.runtime.registerResourceModule("tfe", "index/teamOrganizationMember", _module)
pulumi.runtime.registerResourceModule("tfe", "index/teamOrganizationMembers", _module)
pulumi.runtime.registerResourceModule("tfe", "index/teamProjectAccess", _module)
pulumi.runtime.registerResourceModule("tfe", "index/teamToken", _module)
pulumi.runtime.registerResourceModule("tfe", "index/terraformVersion", _module)
pulumi.runtime.registerResourceModule("tfe", "index/testVariable", _module)
pulumi.runtime.registerResourceModule("tfe", "index/variable", _module)
pulumi.runtime.registerResourceModule("tfe", "index/variableSet", _module)
pulumi.runtime.registerResourceModule("tfe", "index/workspace", _module)
pulumi.runtime.registerResourceModule("tfe", "index/workspacePolicySet", _module)
pulumi.runtime.registerResourceModule("tfe", "index/workspacePolicySetExclusion", _module)
pulumi.runtime.registerResourceModule("tfe", "index/workspaceRun", _module)
pulumi.runtime.registerResourceModule("tfe", "index/workspaceRunTask", _module)
pulumi.runtime.registerResourceModule("tfe", "index/workspaceSettings", _module)
pulumi.runtime.registerResourceModule("tfe", "index/workspaceVariableSet", _module)
pulumi.runtime.registerResourcePackage("tfe", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:tfe") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
