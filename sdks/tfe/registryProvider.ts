// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RegistryProvider extends pulumi.CustomResource {
    /**
     * Get an existing RegistryProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RegistryProviderState, opts?: pulumi.CustomResourceOptions): RegistryProvider {
        return new RegistryProvider(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tfe:index/registryProvider:RegistryProvider';

    /**
     * Returns true if the given object is an instance of RegistryProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RegistryProvider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RegistryProvider.__pulumiType;
    }

    /**
     * The time when the provider was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Name of the provider.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The namespace of the provider. For private providers this is the same as the oraganization.
     */
    public readonly namespace!: pulumi.Output<string>;
    /**
     * Name of the organization. If omitted, organization must be defined in the provider config.
     */
    public readonly organization!: pulumi.Output<string>;
    /**
     * Whether this is a publicly maintained provider or private. Must be either `public` or `private`.
     */
    public readonly registryName!: pulumi.Output<string>;
    /**
     * The time when the provider was last updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a RegistryProvider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RegistryProviderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RegistryProviderArgs | RegistryProviderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RegistryProviderState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["registryName"] = state ? state.registryName : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as RegistryProviderArgs | undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["registryName"] = args ? args.registryName : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RegistryProvider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RegistryProvider resources.
 */
export interface RegistryProviderState {
    /**
     * The time when the provider was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Name of the provider.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace of the provider. For private providers this is the same as the oraganization.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Name of the organization. If omitted, organization must be defined in the provider config.
     */
    organization?: pulumi.Input<string>;
    /**
     * Whether this is a publicly maintained provider or private. Must be either `public` or `private`.
     */
    registryName?: pulumi.Input<string>;
    /**
     * The time when the provider was last updated.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RegistryProvider resource.
 */
export interface RegistryProviderArgs {
    /**
     * Name of the provider.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace of the provider. For private providers this is the same as the oraganization.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Name of the organization. If omitted, organization must be defined in the provider config.
     */
    organization?: pulumi.Input<string>;
    /**
     * Whether this is a publicly maintained provider or private. Must be either `public` or `private`.
     */
    registryName?: pulumi.Input<string>;
}
