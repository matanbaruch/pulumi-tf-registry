// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface DataRetentionPolicyDeleteOlderThan {
    /**
     * Number of days
     */
    days?: pulumi.Input<number>;
}

export interface DataRetentionPolicyDontDelete {
}

export interface NoCodeModuleVariableOption {
    name: pulumi.Input<string>;
    options: pulumi.Input<pulumi.Input<string>[]>;
    type: pulumi.Input<string>;
}

export interface PolicySetVcsRepo {
    branch?: pulumi.Input<string>;
    githubAppInstallationId?: pulumi.Input<string>;
    identifier: pulumi.Input<string>;
    ingressSubmodules?: pulumi.Input<boolean>;
    oauthTokenId?: pulumi.Input<string>;
}

export interface RegistryModuleTestConfig {
    testsEnabled?: pulumi.Input<boolean>;
}

export interface RegistryModuleVcsRepo {
    branch?: pulumi.Input<string>;
    displayIdentifier: pulumi.Input<string>;
    githubAppInstallationId?: pulumi.Input<string>;
    identifier: pulumi.Input<string>;
    oauthTokenId?: pulumi.Input<string>;
    tags?: pulumi.Input<boolean>;
}

export interface StackVcsRepo {
    branch?: pulumi.Input<string>;
    /**
     * The installation ID of the GitHub App. This conflicts with `oauth_token_id` and can only be used if `oauth_token_id` is not used.
     */
    githubAppInstallationId?: pulumi.Input<string>;
    /**
     * Identifier of the VCS repository.
     */
    identifier: pulumi.Input<string>;
    /**
     * The VCS Connection to use. This ID can be obtained from a `tfe.OauthClient` resource. This conflicts with `github_app_installation_id` and can only be used if `github_app_installation_id` is not used.
     */
    oauthTokenId?: pulumi.Input<string>;
}

export interface TeamAccessPermission {
    runTasks: pulumi.Input<boolean>;
    runs: pulumi.Input<string>;
    sentinelMocks: pulumi.Input<string>;
    stateVersions: pulumi.Input<string>;
    variables: pulumi.Input<string>;
    workspaceLocking: pulumi.Input<boolean>;
}

export interface TeamOrganizationAccess {
    accessSecretTeams?: pulumi.Input<boolean>;
    manageAgentPools?: pulumi.Input<boolean>;
    manageMembership?: pulumi.Input<boolean>;
    manageModules?: pulumi.Input<boolean>;
    manageOrganizationAccess?: pulumi.Input<boolean>;
    managePolicies?: pulumi.Input<boolean>;
    managePolicyOverrides?: pulumi.Input<boolean>;
    manageProjects?: pulumi.Input<boolean>;
    manageProviders?: pulumi.Input<boolean>;
    manageRunTasks?: pulumi.Input<boolean>;
    manageTeams?: pulumi.Input<boolean>;
    manageVcsSettings?: pulumi.Input<boolean>;
    manageWorkspaces?: pulumi.Input<boolean>;
    readProjects?: pulumi.Input<boolean>;
    readWorkspaces?: pulumi.Input<boolean>;
}

export interface TeamProjectAccessProjectAccess {
    settings?: pulumi.Input<string>;
    teams?: pulumi.Input<string>;
}

export interface TeamProjectAccessWorkspaceAccess {
    create?: pulumi.Input<boolean>;
    delete?: pulumi.Input<boolean>;
    locking?: pulumi.Input<boolean>;
    move?: pulumi.Input<boolean>;
    runTasks?: pulumi.Input<boolean>;
    runs?: pulumi.Input<string>;
    sentinelMocks?: pulumi.Input<string>;
    stateVersions?: pulumi.Input<string>;
    variables?: pulumi.Input<string>;
}

export interface WorkspaceRunApply {
    manualConfirm: pulumi.Input<boolean>;
    retry?: pulumi.Input<boolean>;
    retryAttempts?: pulumi.Input<number>;
    retryBackoffMax?: pulumi.Input<number>;
    retryBackoffMin?: pulumi.Input<number>;
    waitForRun?: pulumi.Input<boolean>;
}

export interface WorkspaceRunDestroy {
    manualConfirm: pulumi.Input<boolean>;
    retry?: pulumi.Input<boolean>;
    retryAttempts?: pulumi.Input<number>;
    retryBackoffMax?: pulumi.Input<number>;
    retryBackoffMin?: pulumi.Input<number>;
    waitForRun?: pulumi.Input<boolean>;
}

export interface WorkspaceSettingsOverwrite {
    agentPool: pulumi.Input<boolean>;
    executionMode: pulumi.Input<boolean>;
}

export interface WorkspaceVcsRepo {
    branch?: pulumi.Input<string>;
    githubAppInstallationId?: pulumi.Input<string>;
    identifier: pulumi.Input<string>;
    ingressSubmodules?: pulumi.Input<boolean>;
    oauthTokenId?: pulumi.Input<string>;
    tagsRegex?: pulumi.Input<string>;
}
