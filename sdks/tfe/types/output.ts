// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface DataRetentionPolicyDeleteOlderThan {
    /**
     * Number of days
     */
    days?: number;
}

export interface DataRetentionPolicyDontDelete {
}

export interface GetOrganizationMembersMember {
    organizationMembershipId: string;
    userId: string;
}

export interface GetOrganizationMembersMembersWaiting {
    organizationMembershipId: string;
    userId: string;
}

export interface GetOrganizationTagsTag {
    id: string;
    name: string;
    workspaceCount: number;
}

export interface GetPolicySetVcsRepo {
    branch: string;
    githubAppInstallationId: string;
    identifier: string;
    ingressSubmodules: boolean;
    oauthTokenId: string;
}

export interface GetRegistryGpgKeysKey {
    asciiArmor: string;
    createdAt: string;
    id: string;
    organization: string;
    updatedAt: string;
}

export interface GetRegistryProvidersProvider {
    createdAt: string;
    id: string;
    name: string;
    namespace: string;
    organization: string;
    registryName: string;
    updatedAt: string;
}

export interface GetTeamAccessPermission {
    runTasks: boolean;
    runs: string;
    sentinelMocks: string;
    stateVersions: string;
    variables: string;
    workspaceLocking: boolean;
}

export interface GetTeamProjectAccessProjectAccess {
    settings: string;
    teams: string;
}

export interface GetTeamProjectAccessWorkspaceAccess {
    create: boolean;
    delete: boolean;
    locking: boolean;
    move: boolean;
    runTasks: boolean;
    runs: string;
    sentinelMocks: string;
    stateVersions: string;
    variables: string;
}

export interface GetVariablesEnv {
    category: string;
    hcl: boolean;
    id: string;
    name: string;
    sensitive: boolean;
    value: string;
}

export interface GetVariablesTerraform {
    category: string;
    hcl: boolean;
    id: string;
    name: string;
    sensitive: boolean;
    value: string;
}

export interface GetVariablesVariable {
    category: string;
    hcl: boolean;
    id: string;
    name: string;
    sensitive: boolean;
    value: string;
}

export interface GetWorkspaceVcsRepo {
    branch: string;
    githubAppInstallationId: string;
    identifier: string;
    ingressSubmodules: boolean;
    oauthTokenId: string;
    tagsRegex: string;
}

export interface NoCodeModuleVariableOption {
    name: string;
    options: string[];
    type: string;
}

export interface PolicySetVcsRepo {
    branch?: string;
    githubAppInstallationId?: string;
    identifier: string;
    ingressSubmodules?: boolean;
    oauthTokenId?: string;
}

export interface RegistryModuleTestConfig {
    testsEnabled?: boolean;
}

export interface RegistryModuleVcsRepo {
    branch?: string;
    displayIdentifier: string;
    githubAppInstallationId?: string;
    identifier: string;
    oauthTokenId?: string;
    tags: boolean;
}

export interface StackVcsRepo {
    branch?: string;
    /**
     * The installation ID of the GitHub App. This conflicts with `oauth_token_id` and can only be used if `oauth_token_id` is not used.
     */
    githubAppInstallationId?: string;
    /**
     * Identifier of the VCS repository.
     */
    identifier: string;
    /**
     * The VCS Connection to use. This ID can be obtained from a `tfe.OauthClient` resource. This conflicts with `github_app_installation_id` and can only be used if `github_app_installation_id` is not used.
     */
    oauthTokenId?: string;
}

export interface TeamAccessPermission {
    runTasks: boolean;
    runs: string;
    sentinelMocks: string;
    stateVersions: string;
    variables: string;
    workspaceLocking: boolean;
}

export interface TeamOrganizationAccess {
    accessSecretTeams?: boolean;
    manageAgentPools?: boolean;
    manageMembership?: boolean;
    manageModules?: boolean;
    manageOrganizationAccess?: boolean;
    managePolicies?: boolean;
    managePolicyOverrides?: boolean;
    manageProjects?: boolean;
    manageProviders?: boolean;
    manageRunTasks?: boolean;
    manageTeams?: boolean;
    manageVcsSettings?: boolean;
    manageWorkspaces?: boolean;
    readProjects?: boolean;
    readWorkspaces?: boolean;
}

export interface TeamProjectAccessProjectAccess {
    settings: string;
    teams: string;
}

export interface TeamProjectAccessWorkspaceAccess {
    create: boolean;
    delete: boolean;
    locking: boolean;
    move: boolean;
    runTasks: boolean;
    runs: string;
    sentinelMocks: string;
    stateVersions: string;
    variables: string;
}

export interface WorkspaceRunApply {
    manualConfirm: boolean;
    retry?: boolean;
    retryAttempts?: number;
    retryBackoffMax?: number;
    retryBackoffMin?: number;
    waitForRun?: boolean;
}

export interface WorkspaceRunDestroy {
    manualConfirm: boolean;
    retry?: boolean;
    retryAttempts?: number;
    retryBackoffMax?: number;
    retryBackoffMin?: number;
    waitForRun?: boolean;
}

export interface WorkspaceSettingsOverwrite {
    agentPool: boolean;
    executionMode: boolean;
}

export interface WorkspaceVcsRepo {
    branch?: string;
    githubAppInstallationId?: string;
    identifier: string;
    ingressSubmodules?: boolean;
    oauthTokenId?: string;
    tagsRegex?: string;
}

