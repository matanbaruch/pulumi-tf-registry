// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PolicySet extends pulumi.CustomResource {
    /**
     * Get an existing PolicySet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicySetState, opts?: pulumi.CustomResourceOptions): PolicySet {
        return new PolicySet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tfe:index/policySet:PolicySet';

    /**
     * Returns true if the given object is an instance of PolicySet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicySet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicySet.__pulumiType;
    }

    public readonly agentEnabled!: pulumi.Output<boolean>;
    public readonly description!: pulumi.Output<string>;
    public readonly global!: pulumi.Output<boolean | undefined>;
    public readonly kind!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly organization!: pulumi.Output<string>;
    public readonly overridable!: pulumi.Output<boolean | undefined>;
    public readonly policiesPath!: pulumi.Output<string | undefined>;
    public readonly policyIds!: pulumi.Output<string[] | undefined>;
    /**
     * The policy tool version to run the policy evaluation against
     */
    public readonly policyToolVersion!: pulumi.Output<string>;
    public readonly slug!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly vcsRepo!: pulumi.Output<outputs.PolicySetVcsRepo | undefined>;
    public readonly workspaceIds!: pulumi.Output<string[]>;

    /**
     * Create a PolicySet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PolicySetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicySetArgs | PolicySetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicySetState | undefined;
            resourceInputs["agentEnabled"] = state ? state.agentEnabled : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["global"] = state ? state.global : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["overridable"] = state ? state.overridable : undefined;
            resourceInputs["policiesPath"] = state ? state.policiesPath : undefined;
            resourceInputs["policyIds"] = state ? state.policyIds : undefined;
            resourceInputs["policyToolVersion"] = state ? state.policyToolVersion : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
            resourceInputs["vcsRepo"] = state ? state.vcsRepo : undefined;
            resourceInputs["workspaceIds"] = state ? state.workspaceIds : undefined;
        } else {
            const args = argsOrState as PolicySetArgs | undefined;
            resourceInputs["agentEnabled"] = args ? args.agentEnabled : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["global"] = args ? args.global : undefined;
            resourceInputs["kind"] = args ? args.kind : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["overridable"] = args ? args.overridable : undefined;
            resourceInputs["policiesPath"] = args ? args.policiesPath : undefined;
            resourceInputs["policyIds"] = args ? args.policyIds : undefined;
            resourceInputs["policyToolVersion"] = args ? args.policyToolVersion : undefined;
            resourceInputs["slug"] = args ? args.slug : undefined;
            resourceInputs["vcsRepo"] = args ? args.vcsRepo : undefined;
            resourceInputs["workspaceIds"] = args ? args.workspaceIds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PolicySet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PolicySet resources.
 */
export interface PolicySetState {
    agentEnabled?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    global?: pulumi.Input<boolean>;
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    organization?: pulumi.Input<string>;
    overridable?: pulumi.Input<boolean>;
    policiesPath?: pulumi.Input<string>;
    policyIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The policy tool version to run the policy evaluation against
     */
    policyToolVersion?: pulumi.Input<string>;
    slug?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vcsRepo?: pulumi.Input<inputs.PolicySetVcsRepo>;
    workspaceIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a PolicySet resource.
 */
export interface PolicySetArgs {
    agentEnabled?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    global?: pulumi.Input<boolean>;
    kind?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    organization?: pulumi.Input<string>;
    overridable?: pulumi.Input<boolean>;
    policiesPath?: pulumi.Input<string>;
    policyIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The policy tool version to run the policy evaluation against
     */
    policyToolVersion?: pulumi.Input<string>;
    slug?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vcsRepo?: pulumi.Input<inputs.PolicySetVcsRepo>;
    workspaceIds?: pulumi.Input<pulumi.Input<string>[]>;
}
