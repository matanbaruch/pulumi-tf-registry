// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getRegistryProvider(args: GetRegistryProviderArgs, opts?: pulumi.InvokeOptions): Promise<GetRegistryProviderResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tfe:index/getRegistryProvider:getRegistryProvider", {
        "name": args.name,
        "namespace": args.namespace,
        "organization": args.organization,
        "registryName": args.registryName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRegistryProvider.
 */
export interface GetRegistryProviderArgs {
    name: string;
    namespace?: string;
    organization?: string;
    registryName?: string;
}

/**
 * A collection of values returned by getRegistryProvider.
 */
export interface GetRegistryProviderResult {
    readonly createdAt: string;
    readonly id: string;
    readonly name: string;
    readonly namespace: string;
    readonly organization: string;
    readonly registryName: string;
    readonly updatedAt: string;
}
export function getRegistryProviderOutput(args: GetRegistryProviderOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRegistryProviderResult> {
    return pulumi.output(args).apply((a: any) => getRegistryProvider(a, opts))
}

/**
 * A collection of arguments for invoking getRegistryProvider.
 */
export interface GetRegistryProviderOutputArgs {
    name: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    organization?: pulumi.Input<string>;
    registryName?: pulumi.Input<string>;
}
