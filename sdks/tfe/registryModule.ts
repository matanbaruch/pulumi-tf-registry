// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RegistryModule extends pulumi.CustomResource {
    /**
     * Get an existing RegistryModule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RegistryModuleState, opts?: pulumi.CustomResourceOptions): RegistryModule {
        return new RegistryModule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tfe:index/registryModule:RegistryModule';

    /**
     * Returns true if the given object is an instance of RegistryModule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RegistryModule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RegistryModule.__pulumiType;
    }

    public readonly initialVersion!: pulumi.Output<string | undefined>;
    public readonly moduleProvider!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly namespace!: pulumi.Output<string>;
    public readonly noCode!: pulumi.Output<boolean>;
    public readonly organization!: pulumi.Output<string>;
    public /*out*/ readonly publishingMechanism!: pulumi.Output<string>;
    public readonly registryName!: pulumi.Output<string>;
    public readonly testConfigs!: pulumi.Output<outputs.RegistryModuleTestConfig[] | undefined>;
    public readonly vcsRepo!: pulumi.Output<outputs.RegistryModuleVcsRepo | undefined>;

    /**
     * Create a RegistryModule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RegistryModuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RegistryModuleArgs | RegistryModuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RegistryModuleState | undefined;
            resourceInputs["initialVersion"] = state ? state.initialVersion : undefined;
            resourceInputs["moduleProvider"] = state ? state.moduleProvider : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["noCode"] = state ? state.noCode : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["publishingMechanism"] = state ? state.publishingMechanism : undefined;
            resourceInputs["registryName"] = state ? state.registryName : undefined;
            resourceInputs["testConfigs"] = state ? state.testConfigs : undefined;
            resourceInputs["vcsRepo"] = state ? state.vcsRepo : undefined;
        } else {
            const args = argsOrState as RegistryModuleArgs | undefined;
            resourceInputs["initialVersion"] = args ? args.initialVersion : undefined;
            resourceInputs["moduleProvider"] = args ? args.moduleProvider : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["noCode"] = args ? args.noCode : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["registryName"] = args ? args.registryName : undefined;
            resourceInputs["testConfigs"] = args ? args.testConfigs : undefined;
            resourceInputs["vcsRepo"] = args ? args.vcsRepo : undefined;
            resourceInputs["publishingMechanism"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RegistryModule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RegistryModule resources.
 */
export interface RegistryModuleState {
    initialVersion?: pulumi.Input<string>;
    moduleProvider?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    noCode?: pulumi.Input<boolean>;
    organization?: pulumi.Input<string>;
    publishingMechanism?: pulumi.Input<string>;
    registryName?: pulumi.Input<string>;
    testConfigs?: pulumi.Input<pulumi.Input<inputs.RegistryModuleTestConfig>[]>;
    vcsRepo?: pulumi.Input<inputs.RegistryModuleVcsRepo>;
}

/**
 * The set of arguments for constructing a RegistryModule resource.
 */
export interface RegistryModuleArgs {
    initialVersion?: pulumi.Input<string>;
    moduleProvider?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    noCode?: pulumi.Input<boolean>;
    organization?: pulumi.Input<string>;
    registryName?: pulumi.Input<string>;
    testConfigs?: pulumi.Input<pulumi.Input<inputs.RegistryModuleTestConfig>[]>;
    vcsRepo?: pulumi.Input<inputs.RegistryModuleVcsRepo>;
}
