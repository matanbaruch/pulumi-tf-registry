// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ConfigMap extends pulumi.CustomResource {
    /**
     * Get an existing ConfigMap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigMapState, opts?: pulumi.CustomResourceOptions): ConfigMap {
        return new ConfigMap(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kubernetes:index/configMap:ConfigMap';

    /**
     * Returns true if the given object is an instance of ConfigMap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigMap {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigMap.__pulumiType;
    }

    /**
     * BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can
     * contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in
     * the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.
     * This field only accepts base64-encoded payloads that will be decoded/encoded before being sent/received to/from the
     * apiserver.
     */
    public readonly binaryData!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with
     * non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the
     * BinaryData field, this is enforced during validation process.
     */
    public readonly data!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be
     * modified). If not set to true, the field can be modified at any time. Defaulted to nil.
     */
    public readonly immutable!: pulumi.Output<boolean | undefined>;
    /**
     * Standard config map's metadata. More info:
     * https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    public readonly metadata!: pulumi.Output<outputs.ConfigMapMetadata>;

    /**
     * Create a ConfigMap resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigMapArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigMapArgs | ConfigMapState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigMapState | undefined;
            resourceInputs["binaryData"] = state ? state.binaryData : undefined;
            resourceInputs["data"] = state ? state.data : undefined;
            resourceInputs["immutable"] = state ? state.immutable : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
        } else {
            const args = argsOrState as ConfigMapArgs | undefined;
            if ((!args || args.metadata === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metadata'");
            }
            resourceInputs["binaryData"] = args ? args.binaryData : undefined;
            resourceInputs["data"] = args ? args.data : undefined;
            resourceInputs["immutable"] = args ? args.immutable : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConfigMap.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ConfigMap resources.
 */
export interface ConfigMapState {
    /**
     * BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can
     * contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in
     * the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.
     * This field only accepts base64-encoded payloads that will be decoded/encoded before being sent/received to/from the
     * apiserver.
     */
    binaryData?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with
     * non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the
     * BinaryData field, this is enforced during validation process.
     */
    data?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be
     * modified). If not set to true, the field can be modified at any time. Defaulted to nil.
     */
    immutable?: pulumi.Input<boolean>;
    /**
     * Standard config map's metadata. More info:
     * https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    metadata?: pulumi.Input<inputs.ConfigMapMetadata>;
}

/**
 * The set of arguments for constructing a ConfigMap resource.
 */
export interface ConfigMapArgs {
    /**
     * BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can
     * contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in
     * the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.
     * This field only accepts base64-encoded payloads that will be decoded/encoded before being sent/received to/from the
     * apiserver.
     */
    binaryData?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with
     * non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the
     * BinaryData field, this is enforced during validation process.
     */
    data?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be
     * modified). If not set to true, the field can be modified at any time. Defaulted to nil.
     */
    immutable?: pulumi.Input<boolean>;
    /**
     * Standard config map's metadata. More info:
     * https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    metadata: pulumi.Input<inputs.ConfigMapMetadata>;
}
