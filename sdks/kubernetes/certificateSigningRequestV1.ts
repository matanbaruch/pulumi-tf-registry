// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CertificateSigningRequestV1 extends pulumi.CustomResource {
    /**
     * Get an existing CertificateSigningRequestV1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateSigningRequestV1State, opts?: pulumi.CustomResourceOptions): CertificateSigningRequestV1 {
        return new CertificateSigningRequestV1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kubernetes:index/certificateSigningRequestV1:CertificateSigningRequestV1';

    /**
     * Returns true if the given object is an instance of CertificateSigningRequestV1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CertificateSigningRequestV1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CertificateSigningRequestV1.__pulumiType;
    }

    /**
     * Automatically approve the CertificateSigningRequest
     */
    public readonly autoApprove!: pulumi.Output<boolean | undefined>;
    /**
     * certificate is populated with an issued certificate by the signer after an Approved condition is present. This field is
     * set via the /status subresource. Once populated, this field is immutable. If the certificate signing request is denied,
     * a condition of type "Denied" is added and this field remains empty. If the signer cannot issue the certificate, a
     * condition of type "Failed" is added and this field remains empty. Validation requirements: 1. certificate must contain
     * one or more PEM blocks. 2. All PEM blocks must have the "CERTIFICATE" label, contain no headers, and the encoded data
     * must be a BER-encoded ASN.1 Certificate structure as described in section 4 of RFC5280. 3. Non-PEM content may appear
     * before or after the "CERTIFICATE" PEM blocks and is unvalidated, to allow for explanatory text as described in section
     * 5.2 of RFC7468. If more than one PEM block is present, and the definition of the requested spec.signerName does not
     * indicate otherwise, the first block is the issued certificate, and subsequent blocks should be treated as intermediate
     * certificates and presented in TLS handshakes. The certificate is encoded in PEM format. When serialized as JSON or YAML,
     * the data is additionally base64-encoded, so it consists of: base64(
     */
    public /*out*/ readonly certificate!: pulumi.Output<string>;
    /**
     * Standard certificate signing request's metadata. More info:
     * https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    public readonly metadata!: pulumi.Output<outputs.CertificateSigningRequestV1Metadata>;
    /**
     * CertificateSigningRequest objects provide a mechanism to obtain x509 certificates by submitting a certificate signing
     * request, and having it asynchronously approved and issued. Kubelets use this API to obtain: 1. client certificates to
     * authenticate to kube-apiserver (with the "kubernetes.io/kube-apiserver-client-kubelet" signerName). 2. serving
     * certificates for TLS endpoints kube-apiserver can connect to securely (with the "kubernetes.io/kubelet-serving"
     * signerName). This API can be used to request client certificates to authenticate to kube-apiserver (with the
     * "kubernetes.io/kube-apiserver-client" signerName), or to obtain certificates from custom non-Kubernetes signers.
     */
    public readonly spec!: pulumi.Output<outputs.CertificateSigningRequestV1Spec>;
    public readonly timeouts!: pulumi.Output<outputs.CertificateSigningRequestV1Timeouts | undefined>;

    /**
     * Create a CertificateSigningRequestV1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateSigningRequestV1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateSigningRequestV1Args | CertificateSigningRequestV1State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateSigningRequestV1State | undefined;
            resourceInputs["autoApprove"] = state ? state.autoApprove : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["spec"] = state ? state.spec : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as CertificateSigningRequestV1Args | undefined;
            if ((!args || args.metadata === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metadata'");
            }
            if ((!args || args.spec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'spec'");
            }
            resourceInputs["autoApprove"] = args ? args.autoApprove : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["spec"] = args ? args.spec : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["certificate"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CertificateSigningRequestV1.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CertificateSigningRequestV1 resources.
 */
export interface CertificateSigningRequestV1State {
    /**
     * Automatically approve the CertificateSigningRequest
     */
    autoApprove?: pulumi.Input<boolean>;
    /**
     * certificate is populated with an issued certificate by the signer after an Approved condition is present. This field is
     * set via the /status subresource. Once populated, this field is immutable. If the certificate signing request is denied,
     * a condition of type "Denied" is added and this field remains empty. If the signer cannot issue the certificate, a
     * condition of type "Failed" is added and this field remains empty. Validation requirements: 1. certificate must contain
     * one or more PEM blocks. 2. All PEM blocks must have the "CERTIFICATE" label, contain no headers, and the encoded data
     * must be a BER-encoded ASN.1 Certificate structure as described in section 4 of RFC5280. 3. Non-PEM content may appear
     * before or after the "CERTIFICATE" PEM blocks and is unvalidated, to allow for explanatory text as described in section
     * 5.2 of RFC7468. If more than one PEM block is present, and the definition of the requested spec.signerName does not
     * indicate otherwise, the first block is the issued certificate, and subsequent blocks should be treated as intermediate
     * certificates and presented in TLS handshakes. The certificate is encoded in PEM format. When serialized as JSON or YAML,
     * the data is additionally base64-encoded, so it consists of: base64(
     */
    certificate?: pulumi.Input<string>;
    /**
     * Standard certificate signing request's metadata. More info:
     * https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    metadata?: pulumi.Input<inputs.CertificateSigningRequestV1Metadata>;
    /**
     * CertificateSigningRequest objects provide a mechanism to obtain x509 certificates by submitting a certificate signing
     * request, and having it asynchronously approved and issued. Kubelets use this API to obtain: 1. client certificates to
     * authenticate to kube-apiserver (with the "kubernetes.io/kube-apiserver-client-kubelet" signerName). 2. serving
     * certificates for TLS endpoints kube-apiserver can connect to securely (with the "kubernetes.io/kubelet-serving"
     * signerName). This API can be used to request client certificates to authenticate to kube-apiserver (with the
     * "kubernetes.io/kube-apiserver-client" signerName), or to obtain certificates from custom non-Kubernetes signers.
     */
    spec?: pulumi.Input<inputs.CertificateSigningRequestV1Spec>;
    timeouts?: pulumi.Input<inputs.CertificateSigningRequestV1Timeouts>;
}

/**
 * The set of arguments for constructing a CertificateSigningRequestV1 resource.
 */
export interface CertificateSigningRequestV1Args {
    /**
     * Automatically approve the CertificateSigningRequest
     */
    autoApprove?: pulumi.Input<boolean>;
    /**
     * Standard certificate signing request's metadata. More info:
     * https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    metadata: pulumi.Input<inputs.CertificateSigningRequestV1Metadata>;
    /**
     * CertificateSigningRequest objects provide a mechanism to obtain x509 certificates by submitting a certificate signing
     * request, and having it asynchronously approved and issued. Kubelets use this API to obtain: 1. client certificates to
     * authenticate to kube-apiserver (with the "kubernetes.io/kube-apiserver-client-kubelet" signerName). 2. serving
     * certificates for TLS endpoints kube-apiserver can connect to securely (with the "kubernetes.io/kubelet-serving"
     * signerName). This API can be used to request client certificates to authenticate to kube-apiserver (with the
     * "kubernetes.io/kube-apiserver-client" signerName), or to obtain certificates from custom non-Kubernetes signers.
     */
    spec: pulumi.Input<inputs.CertificateSigningRequestV1Spec>;
    timeouts?: pulumi.Input<inputs.CertificateSigningRequestV1Timeouts>;
}
