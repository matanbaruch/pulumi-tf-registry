// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StorageClassV1 extends pulumi.CustomResource {
    /**
     * Get an existing StorageClassV1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageClassV1State, opts?: pulumi.CustomResourceOptions): StorageClassV1 {
        return new StorageClassV1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kubernetes:index/storageClassV1:StorageClassV1';

    /**
     * Returns true if the given object is an instance of StorageClassV1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageClassV1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageClassV1.__pulumiType;
    }

    /**
     * Indicates whether the storage class allow volume expand
     */
    public readonly allowVolumeExpansion!: pulumi.Output<boolean | undefined>;
    /**
     * Restrict the node topologies where volumes can be dynamically provisioned.
     */
    public readonly allowedTopologies!: pulumi.Output<outputs.StorageClassV1AllowedTopologies | undefined>;
    /**
     * Standard storage class's metadata. More info:
     * https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    public readonly metadata!: pulumi.Output<outputs.StorageClassV1Metadata>;
    /**
     * Persistent Volumes that are dynamically created by a storage class will have the mount options specified
     */
    public readonly mountOptions!: pulumi.Output<string[] | undefined>;
    /**
     * The parameters for the provisioner that should create volumes of this storage class
     */
    public readonly parameters!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Indicates the type of the reclaim policy
     */
    public readonly reclaimPolicy!: pulumi.Output<string | undefined>;
    /**
     * Indicates the type of the provisioner
     */
    public readonly storageProvisioner!: pulumi.Output<string>;
    /**
     * Indicates when volume binding and dynamic provisioning should occur
     */
    public readonly volumeBindingMode!: pulumi.Output<string | undefined>;

    /**
     * Create a StorageClassV1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageClassV1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageClassV1Args | StorageClassV1State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageClassV1State | undefined;
            resourceInputs["allowVolumeExpansion"] = state ? state.allowVolumeExpansion : undefined;
            resourceInputs["allowedTopologies"] = state ? state.allowedTopologies : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["mountOptions"] = state ? state.mountOptions : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["reclaimPolicy"] = state ? state.reclaimPolicy : undefined;
            resourceInputs["storageProvisioner"] = state ? state.storageProvisioner : undefined;
            resourceInputs["volumeBindingMode"] = state ? state.volumeBindingMode : undefined;
        } else {
            const args = argsOrState as StorageClassV1Args | undefined;
            if ((!args || args.metadata === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metadata'");
            }
            if ((!args || args.storageProvisioner === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageProvisioner'");
            }
            resourceInputs["allowVolumeExpansion"] = args ? args.allowVolumeExpansion : undefined;
            resourceInputs["allowedTopologies"] = args ? args.allowedTopologies : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["mountOptions"] = args ? args.mountOptions : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["reclaimPolicy"] = args ? args.reclaimPolicy : undefined;
            resourceInputs["storageProvisioner"] = args ? args.storageProvisioner : undefined;
            resourceInputs["volumeBindingMode"] = args ? args.volumeBindingMode : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageClassV1.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StorageClassV1 resources.
 */
export interface StorageClassV1State {
    /**
     * Indicates whether the storage class allow volume expand
     */
    allowVolumeExpansion?: pulumi.Input<boolean>;
    /**
     * Restrict the node topologies where volumes can be dynamically provisioned.
     */
    allowedTopologies?: pulumi.Input<inputs.StorageClassV1AllowedTopologies>;
    /**
     * Standard storage class's metadata. More info:
     * https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    metadata?: pulumi.Input<inputs.StorageClassV1Metadata>;
    /**
     * Persistent Volumes that are dynamically created by a storage class will have the mount options specified
     */
    mountOptions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The parameters for the provisioner that should create volumes of this storage class
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Indicates the type of the reclaim policy
     */
    reclaimPolicy?: pulumi.Input<string>;
    /**
     * Indicates the type of the provisioner
     */
    storageProvisioner?: pulumi.Input<string>;
    /**
     * Indicates when volume binding and dynamic provisioning should occur
     */
    volumeBindingMode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StorageClassV1 resource.
 */
export interface StorageClassV1Args {
    /**
     * Indicates whether the storage class allow volume expand
     */
    allowVolumeExpansion?: pulumi.Input<boolean>;
    /**
     * Restrict the node topologies where volumes can be dynamically provisioned.
     */
    allowedTopologies?: pulumi.Input<inputs.StorageClassV1AllowedTopologies>;
    /**
     * Standard storage class's metadata. More info:
     * https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    metadata: pulumi.Input<inputs.StorageClassV1Metadata>;
    /**
     * Persistent Volumes that are dynamically created by a storage class will have the mount options specified
     */
    mountOptions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The parameters for the provisioner that should create volumes of this storage class
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Indicates the type of the reclaim policy
     */
    reclaimPolicy?: pulumi.Input<string>;
    /**
     * Indicates the type of the provisioner
     */
    storageProvisioner: pulumi.Input<string>;
    /**
     * Indicates when volume binding and dynamic provisioning should occur
     */
    volumeBindingMode?: pulumi.Input<string>;
}
