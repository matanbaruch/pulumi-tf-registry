// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ValidatingWebhookConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing ValidatingWebhookConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ValidatingWebhookConfigurationState, opts?: pulumi.CustomResourceOptions): ValidatingWebhookConfiguration {
        return new ValidatingWebhookConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kubernetes:index/validatingWebhookConfiguration:ValidatingWebhookConfiguration';

    /**
     * Returns true if the given object is an instance of ValidatingWebhookConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ValidatingWebhookConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ValidatingWebhookConfiguration.__pulumiType;
    }

    /**
     * Standard validating webhook configuration's metadata. More info:
     * https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    public readonly metadata!: pulumi.Output<outputs.ValidatingWebhookConfigurationMetadata>;
    /**
     * Webhooks is a list of webhooks and the affected resources and operations.
     */
    public readonly webhooks!: pulumi.Output<outputs.ValidatingWebhookConfigurationWebhook[]>;

    /**
     * Create a ValidatingWebhookConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ValidatingWebhookConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ValidatingWebhookConfigurationArgs | ValidatingWebhookConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ValidatingWebhookConfigurationState | undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["webhooks"] = state ? state.webhooks : undefined;
        } else {
            const args = argsOrState as ValidatingWebhookConfigurationArgs | undefined;
            if ((!args || args.metadata === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metadata'");
            }
            if ((!args || args.webhooks === undefined) && !opts.urn) {
                throw new Error("Missing required property 'webhooks'");
            }
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["webhooks"] = args ? args.webhooks : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ValidatingWebhookConfiguration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ValidatingWebhookConfiguration resources.
 */
export interface ValidatingWebhookConfigurationState {
    /**
     * Standard validating webhook configuration's metadata. More info:
     * https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    metadata?: pulumi.Input<inputs.ValidatingWebhookConfigurationMetadata>;
    /**
     * Webhooks is a list of webhooks and the affected resources and operations.
     */
    webhooks?: pulumi.Input<pulumi.Input<inputs.ValidatingWebhookConfigurationWebhook>[]>;
}

/**
 * The set of arguments for constructing a ValidatingWebhookConfiguration resource.
 */
export interface ValidatingWebhookConfigurationArgs {
    /**
     * Standard validating webhook configuration's metadata. More info:
     * https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
     */
    metadata: pulumi.Input<inputs.ValidatingWebhookConfigurationMetadata>;
    /**
     * Webhooks is a list of webhooks and the affected resources and operations.
     */
    webhooks: pulumi.Input<pulumi.Input<inputs.ValidatingWebhookConfigurationWebhook>[]>;
}
