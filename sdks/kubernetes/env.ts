// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Env extends pulumi.CustomResource {
    /**
     * Get an existing Env resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EnvState, opts?: pulumi.CustomResourceOptions): Env {
        return new Env(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kubernetes:index/env:Env';

    /**
     * Returns true if the given object is an instance of Env.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Env {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Env.__pulumiType;
    }

    /**
     * Resource API version
     */
    public readonly apiVersion!: pulumi.Output<string>;
    /**
     * Name of the container for which we are updating the environment variables.
     */
    public readonly container!: pulumi.Output<string | undefined>;
    /**
     * List of custom values used to represent environment variables
     */
    public readonly envs!: pulumi.Output<outputs.EnvEnv[]>;
    /**
     * Set the name of the field manager for the specified environment variables.
     */
    public readonly fieldManager!: pulumi.Output<string | undefined>;
    public readonly force!: pulumi.Output<boolean | undefined>;
    /**
     * Name of the initContainer for which we are updating the environment variables.
     */
    public readonly initContainer!: pulumi.Output<string | undefined>;
    /**
     * Resource Kind
     */
    public readonly kind!: pulumi.Output<string>;
    public readonly metadata!: pulumi.Output<outputs.EnvMetadata>;

    /**
     * Create a Env resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EnvArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EnvArgs | EnvState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EnvState | undefined;
            resourceInputs["apiVersion"] = state ? state.apiVersion : undefined;
            resourceInputs["container"] = state ? state.container : undefined;
            resourceInputs["envs"] = state ? state.envs : undefined;
            resourceInputs["fieldManager"] = state ? state.fieldManager : undefined;
            resourceInputs["force"] = state ? state.force : undefined;
            resourceInputs["initContainer"] = state ? state.initContainer : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
        } else {
            const args = argsOrState as EnvArgs | undefined;
            if ((!args || args.apiVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiVersion'");
            }
            if ((!args || args.envs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'envs'");
            }
            if ((!args || args.kind === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kind'");
            }
            if ((!args || args.metadata === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metadata'");
            }
            resourceInputs["apiVersion"] = args ? args.apiVersion : undefined;
            resourceInputs["container"] = args ? args.container : undefined;
            resourceInputs["envs"] = args ? args.envs : undefined;
            resourceInputs["fieldManager"] = args ? args.fieldManager : undefined;
            resourceInputs["force"] = args ? args.force : undefined;
            resourceInputs["initContainer"] = args ? args.initContainer : undefined;
            resourceInputs["kind"] = args ? args.kind : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Env.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Env resources.
 */
export interface EnvState {
    /**
     * Resource API version
     */
    apiVersion?: pulumi.Input<string>;
    /**
     * Name of the container for which we are updating the environment variables.
     */
    container?: pulumi.Input<string>;
    /**
     * List of custom values used to represent environment variables
     */
    envs?: pulumi.Input<pulumi.Input<inputs.EnvEnv>[]>;
    /**
     * Set the name of the field manager for the specified environment variables.
     */
    fieldManager?: pulumi.Input<string>;
    force?: pulumi.Input<boolean>;
    /**
     * Name of the initContainer for which we are updating the environment variables.
     */
    initContainer?: pulumi.Input<string>;
    /**
     * Resource Kind
     */
    kind?: pulumi.Input<string>;
    metadata?: pulumi.Input<inputs.EnvMetadata>;
}

/**
 * The set of arguments for constructing a Env resource.
 */
export interface EnvArgs {
    /**
     * Resource API version
     */
    apiVersion: pulumi.Input<string>;
    /**
     * Name of the container for which we are updating the environment variables.
     */
    container?: pulumi.Input<string>;
    /**
     * List of custom values used to represent environment variables
     */
    envs: pulumi.Input<pulumi.Input<inputs.EnvEnv>[]>;
    /**
     * Set the name of the field manager for the specified environment variables.
     */
    fieldManager?: pulumi.Input<string>;
    force?: pulumi.Input<boolean>;
    /**
     * Name of the initContainer for which we are updating the environment variables.
     */
    initContainer?: pulumi.Input<string>;
    /**
     * Resource Kind
     */
    kind: pulumi.Input<string>;
    metadata: pulumi.Input<inputs.EnvMetadata>;
}
